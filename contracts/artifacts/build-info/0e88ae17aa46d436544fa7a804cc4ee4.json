{
	"id": "0e88ae17aa46d436544fa7a804cc4ee4",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.28",
	"solcLongVersion": "0.8.28+commit.7893614a",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/SwappBox.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.8.2 <0.9.0;\n\n\ncontract Box{\n    uint public deadline;\n    uint public initialTime;\n    bool public  isContractFunded;\n    address payable public owner;\n\n    function deposit(uint _deadline) payable public{\n        require(isContractFunded == false,\"contract already funded\");\n        initialTime = block.timestamp;\n        deadline = _deadline;\n        isContractFunded = true;\n        owner = payable(msg.sender);\n    }\n\n    function withdraw() public {\n        require(owner == msg.sender,\"you are not owner\");\n        uint256 amount = address(this).balance;\n        (bool success,) = owner.call{value:amount}(\"\");\n        require(success,\"withdraw failed!\");\n\n    }\n\n    function changeOwner(address _newOwner)public {\n        owner = payable(_newOwner);\n    }\n}\ncontract SwappyBox{\n\n    Box public box;\n    struct BidTrack{\n        uint bidInitialTime;\n        uint bidEndTime;\n        uint totalBid;\n        uint basePrice;\n        uint lastPrice;\n        address currentWinner;\n    }\n\n  \n    mapping(address=>address[]) public boxes;\n    mapping(address=>BidTrack) public boxData;\n    function createYourBox() public {\n        Box bx = new Box();\n        boxes[msg.sender].push(address(bx));\n\n    }\n\n    function depositToBox(uint _index, uint _deadline) public payable {\n        require(_index < boxes[msg.sender].length, \"Invalid box index\");\n\n        address boxAddress = boxes[msg.sender][_index];\n        Box(boxAddress).deposit{value: msg.value}(_deadline);\n    }\n\n    function withdraw() public{\n\n    }\n\n    function bid() public{\n\n    }\n\n    function getPrice() public{\n\n    }\n\n    \n\n}\n\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.deployedBytecode",
						"evm.methodIdentifiers"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"contracts/SwappBox.sol": {
				"Box": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_newOwner",
									"type": "address"
								}
							],
							"name": "changeOwner",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "deadline",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_deadline",
									"type": "uint256"
								}
							],
							"name": "deposit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "initialTime",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "isContractFunded",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address payable",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"metadata": {
						"optimizer_settings": {
							"is_debug_logging_enabled": false,
							"is_fallback_to_size_enabled": false,
							"is_verify_each_enabled": false,
							"level_back_end": "Aggressive",
							"level_middle_end": "Aggressive",
							"level_middle_end_size": "Zero"
						},
						"revive_pallet_version": null,
						"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8",
						"solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isContractFunded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwappBox.sol\":\"Box\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwappBox.sol\":{\"keccak256\":\"0x1f79772b6d17ed94c7ec5f2d8e1735fb2973fb6a7a638d988cf494739964fa91\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://88c123847d45656671349703153c7de3746f83707e87e0f26460ed340b4530e8\",\"dweb:/ipfs/QmR1q76UgZGp2wEcQBHxhbaDyjFYsEPGArD36U7jKXbyyp\"]}},\"version\":1}",
						"solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
					},
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					},
					"storageLayout": {
						"storage": [
							{
								"astId": 3,
								"contract": "contracts/SwappBox.sol:Box",
								"label": "deadline",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 5,
								"contract": "contracts/SwappBox.sol:Box",
								"label": "initialTime",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 7,
								"contract": "contracts/SwappBox.sol:Box",
								"label": "isContractFunded",
								"offset": 0,
								"slot": "2",
								"type": "t_bool"
							},
							{
								"astId": 9,
								"contract": "contracts/SwappBox.sol:Box",
								"label": "owner",
								"offset": 1,
								"slot": "2",
								"type": "t_address_payable"
							}
						],
						"types": {
							"t_address_payable": {
								"encoding": "inplace",
								"label": "address payable",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"evm": {
						"assembly": "// RO data = 0/0 bytes\n// RW data = 0/65552 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 4461\n// Code size = 13598 bytes\n\n      : @0 (gas: 2)\n     0: i32 a2 = a0 >> 0x10\n     3: jump @6 if a2 != 0\n      : @1 (gas: 2)\n     6: a2 = 0x10001\n    11: jump @6 if a1 >=u a2\n      : @2 (gas: 4)\n    14: a1 = a1 + a0\n    17: i32 a1 = a1 + 0x1f\n    20: a1 = a1 & 0xffffffffffffffe0\n    23: jump @7 if a1 >=u 65537\n      : @3 (gas: 2)\n    29: a3 = i32 [0x20000]\n    34: jump @5 if a3 >=u a1\n      : @4 (gas: 4)\n    37: u32 [0x20000] = a1\n    42: a1 = 0x20010\n    47: a0 = a0 + a1\n    50: ret\n      : @5 (gas: 3)\n    52: a1 = 0x20010\n    57: a0 = a0 + a1\n    60: ret\n      : @6 (gas: 1)\n    62: trap\n      : @7 (gas: 1)\n    63: trap\n      : @8 (gas: 13)\n    64: sp = sp + 0xffffffffffffffd8\n    67: u64 [sp + 0x20] = ra\n    70: u64 [sp + 0x18] = s0\n    73: u64 [sp + 0x10] = s1\n    76: a2 = u64 [a1]\n    78: u64 [sp + 0x8] = a2\n    81: a2 = u64 [a1 + 0x8]\n    84: u64 [sp] = a2\n    86: s0 = u64 [a1 + 0x10]\n    89: s1 = u64 [a1 + 0x18]\n    92: i32 a0 = a0 + 0\n    94: a1 = 0x20\n    97: ra = 2, jump @0\n      : @9 [@dyn 1] (gas: 71)\n   101: a1 = reverse s1\n   103: a2 = reverse s0\n   105: a3 = u64 [sp]\n   107: a3 = reverse a3\n   109: a4 = u64 [sp + 0x8]\n   112: a4 = reverse a4\n   114: u8 [a0 + 0x18] = a4\n   117: u8 [a0 + 0x10] = a3\n   120: u8 [a0 + 0x8] = a2\n   123: u8 [a0] = a1\n   125: a5 = a4 >> 0x38\n   128: u8 [a0 + 0x1f] = a5\n   131: a5 = a4 >> 0x30\n   134: u8 [a0 + 0x1e] = a5\n   137: a5 = a4 >> 0x28\n   140: u8 [a0 + 0x1d] = a5\n   143: a5 = a4 >> 0x20\n   146: u8 [a0 + 0x1c] = a5\n   149: a5 = a4 >> 0x18\n   152: u8 [a0 + 0x1b] = a5\n   155: a5 = a4 >> 0x10\n   158: u8 [a0 + 0x1a] = a5\n   161: a4 = a4 >> 0x8\n   164: u8 [a0 + 0x19] = a4\n   167: a4 = a3 >> 0x38\n   170: u8 [a0 + 0x17] = a4\n   173: a4 = a3 >> 0x30\n   176: u8 [a0 + 0x16] = a4\n   179: a4 = a3 >> 0x28\n   182: u8 [a0 + 0x15] = a4\n   185: a4 = a3 >> 0x20\n   188: u8 [a0 + 0x14] = a4\n   191: a4 = a3 >> 0x18\n   194: u8 [a0 + 0x13] = a4\n   197: a4 = a3 >> 0x10\n   200: u8 [a0 + 0x12] = a4\n   203: a3 = a3 >> 0x8\n   206: u8 [a0 + 0x11] = a3\n   209: a3 = a2 >> 0x38\n   212: u8 [a0 + 0xf] = a3\n   215: a3 = a2 >> 0x30\n   218: u8 [a0 + 0xe] = a3\n   221: a3 = a2 >> 0x28\n   224: u8 [a0 + 0xd] = a3\n   227: a3 = a2 >> 0x20\n   230: u8 [a0 + 0xc] = a3\n   233: a3 = a2 >> 0x18\n   236: u8 [a0 + 0xb] = a3\n   239: a3 = a2 >> 0x10\n   242: u8 [a0 + 0xa] = a3\n   245: a2 = a2 >> 0x8\n   248: u8 [a0 + 0x9] = a2\n   251: a2 = a1 >> 0x38\n   254: u8 [a0 + 0x7] = a2\n   257: a2 = a1 >> 0x30\n   260: u8 [a0 + 0x6] = a2\n   263: a2 = a1 >> 0x28\n   266: u8 [a0 + 0x5] = a2\n   269: a2 = a1 >> 0x20\n   272: u8 [a0 + 0x4] = a2\n   275: a2 = a1 >> 0x18\n   278: u8 [a0 + 0x3] = a2\n   281: a2 = a1 >> 0x10\n   284: u8 [a0 + 0x2] = a2\n   287: a1 = a1 >> 0x8\n   290: u8 [a0 + 0x1] = a1\n   293: ra = u64 [sp + 0x20]\n   296: s0 = u64 [sp + 0x18]\n   299: s1 = u64 [sp + 0x10]\n   302: sp = sp + 0x28\n   305: ret\n      : @10 (gas: 6)\n   307: sp = sp + 0xfffffffffffffff0\n   310: u64 [sp + 0x8] = ra\n   313: u64 [sp] = s0\n   315: s0 = a0 & 0x1\n   318: ecalli 5 // 'call_data_size'\n   320: fallthrough\n      : @11 (gas: 2)\n   321: u32 [0x20004] = a0\n   326: jump @13 if s0 == 0\n      : @12 (gas: 1)\n   329: ra = 4, jump @14\n      : @13 [@dyn 2] (gas: 1)\n   333: ra = 6, jump @28\n      : @14 [@dyn 3] (gas: 9)\n   338: sp = sp + 0xffffffffffffffc0\n   341: u64 [sp + 0x38] = ra\n   344: u64 [sp + 0x30] = s0\n   347: u64 [sp + 0x28] = s1\n   350: s0 = sp + 0x40\n   353: sp = sp & 0xffffffffffffffe0\n   356: a0 = 0x40\n   359: a1 = 0x20\n   362: ra = 8, jump @0\n      : @15 [@dyn 4] (gas: 39)\n   367: u8 [a0 + 31] = 0x80\n   372: u8 [a0 + 30] = 0\n   375: u8 [a0 + 29] = 0\n   378: u8 [a0 + 28] = 0\n   381: u8 [a0 + 27] = 0\n   384: u8 [a0 + 26] = 0\n   387: u8 [a0 + 25] = 0\n   390: u8 [a0 + 24] = 0\n   393: u8 [a0 + 23] = 0\n   396: u8 [a0 + 22] = 0\n   399: u8 [a0 + 21] = 0\n   402: u8 [a0 + 20] = 0\n   405: u8 [a0 + 19] = 0\n   408: u8 [a0 + 18] = 0\n   411: u8 [a0 + 17] = 0\n   414: u8 [a0 + 16] = 0\n   417: u8 [a0 + 15] = 0\n   420: u8 [a0 + 14] = 0\n   423: u8 [a0 + 13] = 0\n   426: u8 [a0 + 12] = 0\n   429: u8 [a0 + 11] = 0\n   432: u8 [a0 + 10] = 0\n   435: u8 [a0 + 9] = 0\n   438: u8 [a0 + 8] = 0\n   441: u8 [a0 + 7] = 0\n   444: u8 [a0 + 6] = 0\n   447: u8 [a0 + 5] = 0\n   450: u8 [a0 + 4] = 0\n   453: u8 [a0 + 3] = 0\n   456: u8 [a0 + 2] = 0\n   459: u8 [a0 + 1] = 0\n   462: u8 [a0 + 0] = 0\n   464: u64 [sp + 24] = 0\n   467: u64 [sp + 0] = 0\n   469: u64 [sp + 8] = 0\n   472: u64 [sp + 16] = 0\n   475: i32 a0 = sp + 0\n   477: ecalli 15 // 'value_transferred'\n   479: fallthrough\n      : @16 (gas: 8)\n   480: a0 = u64 [sp + 0x10]\n   483: a1 = u64 [sp + 0x18]\n   486: a2 = u64 [sp + 0x8]\n   489: a3 = u64 [sp]\n   491: a1 = a1 | a2\n   494: a0 = a0 | a3\n   497: a0 = a0 | a1\n   500: jump @20 if a0 != 0\n      : @17 (gas: 3)\n   504: a0 = 0x40\n   507: a1 = 0x20\n   510: ra = 10, jump @0\n      : @18 [@dyn 5] (gas: 100)\n   515: a1 = u8 [a0 + 0x11]\n   518: a2 = u8 [a0 + 0x10]\n   521: a3 = u8 [a0 + 0x12]\n   524: a4 = u8 [a0 + 0x13]\n   527: a1 = a1 << 0x8\n   530: a1 = a1 | a2\n   533: a3 = a3 << 0x10\n   536: a4 = a4 << 0x18\n   539: a3 = a3 | a4\n   542: a1 = a1 | a3\n   545: a2 = u8 [a0 + 0x15]\n   548: a3 = u8 [a0 + 0x14]\n   551: a4 = u8 [a0 + 0x16]\n   554: a5 = u8 [a0 + 0x17]\n   557: a2 = a2 << 0x8\n   560: a2 = a2 | a3\n   563: a4 = a4 << 0x10\n   566: a5 = a5 << 0x18\n   569: a4 = a4 | a5\n   572: a2 = a2 | a4\n   575: a2 = a2 << 0x20\n   578: t0 = a2 | a1\n   581: a2 = u8 [a0 + 0x1]\n   584: a3 = u8 [a0]\n   586: a4 = u8 [a0 + 0x2]\n   589: a5 = u8 [a0 + 0x3]\n   592: a2 = a2 << 0x8\n   595: a2 = a2 | a3\n   598: a4 = a4 << 0x10\n   601: a5 = a5 << 0x18\n   604: a4 = a4 | a5\n   607: a2 = a2 | a4\n   610: a3 = u8 [a0 + 0x5]\n   613: a4 = u8 [a0 + 0x4]\n   616: a5 = u8 [a0 + 0x6]\n   619: s1 = u8 [a0 + 0x7]\n   622: a3 = a3 << 0x8\n   625: a3 = a3 | a4\n   628: a5 = a5 << 0x10\n   631: s1 = s1 << 0x18\n   634: a5 = a5 | s1\n   637: a3 = a3 | a5\n   640: a3 = a3 << 0x20\n   643: a2 = a2 | a3\n   646: a3 = u8 [a0 + 0x19]\n   649: a4 = u8 [a0 + 0x18]\n   652: a5 = u8 [a0 + 0x1a]\n   655: s1 = u8 [a0 + 0x1b]\n   658: a3 = a3 << 0x8\n   661: a3 = a3 | a4\n   664: a5 = a5 << 0x10\n   667: s1 = s1 << 0x18\n   670: a5 = a5 | s1\n   673: a3 = a3 | a5\n   676: a4 = u8 [a0 + 0x1d]\n   679: a5 = u8 [a0 + 0x1c]\n   682: s1 = u8 [a0 + 0x1e]\n   685: a1 = u8 [a0 + 0x1f]\n   688: a4 = a4 << 0x8\n   691: a4 = a4 | a5\n   694: s1 = s1 << 0x10\n   697: a1 = a1 << 0x18\n   700: a1 = a1 | s1\n   703: a1 = a1 | a4\n   706: a1 = a1 << 0x20\n   709: a3 = a3 | a1\n   712: a1 = u8 [a0 + 0x9]\n   715: a4 = u8 [a0 + 0x8]\n   718: a5 = u8 [a0 + 0xa]\n   721: s1 = u8 [a0 + 0xb]\n   724: a1 = a1 << 0x8\n   727: a1 = a1 | a4\n   730: a5 = a5 << 0x10\n   733: s1 = s1 << 0x18\n   736: a5 = a5 | s1\n   739: a1 = a1 | a5\n   742: a4 = u8 [a0 + 0xd]\n   745: a5 = u8 [a0 + 0xc]\n   748: s1 = u8 [a0 + 0xe]\n   751: a0 = u8 [a0 + 0xf]\n   754: a4 = a4 << 0x8\n   757: a4 = a4 | a5\n   760: s1 = s1 << 0x10\n   763: a0 = a0 << 0x18\n   766: a0 = a0 | s1\n   769: a0 = a0 | a4\n   772: a0 = a0 << 0x20\n   775: a0 = a0 | a1\n   778: a0 = reverse a0\n   780: s1 = reverse a3\n   782: a1 = reverse a2\n   784: a2 = reverse t0\n   786: a1 = a1 | a2\n   789: a2 = s1 | a0\n   792: a2 = a2 | a1\n   795: a2 = a2 >> 0x20\n   798: a0 = a0 | a1\n   801: a0 = a0 << 0x20\n   804: a0 = a0 | a2\n   807: jump @22 if a0 == 0\n      : @19 (gas: 1)\n   810: trap\n      : @20 (gas: 3)\n   811: a0 = 0\n   813: a1 = 0\n   815: ra = 12, jump @0\n      : @21 [@dyn 6] (gas: 5)\n   820: i32 a1 = a0 + 0\n   822: a0 = 0x1\n   825: a2 = 0\n   827: ecalli 12 // 'seal_return'\n   829: fallthrough\n      : @22 (gas: 4)\n   830: i32 s1 = s1 + 0\n   832: a0 = s1\n   834: a1 = 0\n   836: ra = 14, jump @0\n      : @23 [@dyn 7] (gas: 5)\n   841: i32 a0 = a0 + 0\n   843: a1 = 0\n   845: a2 = 0\n   847: ecalli 3 // 'call_data_copy'\n   849: fallthrough\n      : @24 (gas: 2)\n   850: a1 = i32 [0x20008]\n   855: jump @26 if a1 == 0\n      : @25 (gas: 4)\n   858: a0 = 0x30010\n   863: i32 a0 = a0 + 0\n   865: ecalli 13 // 'set_immutable_data'\n   867: fallthrough\n      : @26 (gas: 3)\n   868: a0 = s1\n   870: a1 = 0\n   872: ra = 16, jump @0\n      : @27 [@dyn 8] (gas: 6)\n   877: i32 a1 = a0 + 0\n   879: a0 = 0\n   881: a2 = 0\n   883: ra = 0x12\n   886: ecalli 12 // 'seal_return'\n   888: fallthrough\n      : @28 [@dyn 9] (gas: 8)\n   889: sp = sp + 0xffffffffffffffc0\n   892: u64 [sp + 0x38] = ra\n   895: u64 [sp + 0x30] = s0\n   898: s0 = sp + 0x40\n   901: sp = sp & 0xffffffffffffffe0\n   904: a0 = 0x40\n   907: a1 = 0x20\n   910: ra = 20, jump @0\n      : @29 [@dyn 10] (gas: 34)\n   915: u8 [a0 + 31] = 0x80\n   920: u8 [a0 + 30] = 0\n   923: u8 [a0 + 29] = 0\n   926: u8 [a0 + 28] = 0\n   929: u8 [a0 + 27] = 0\n   932: u8 [a0 + 26] = 0\n   935: u8 [a0 + 25] = 0\n   938: u8 [a0 + 24] = 0\n   941: u8 [a0 + 23] = 0\n   944: u8 [a0 + 22] = 0\n   947: u8 [a0 + 21] = 0\n   950: u8 [a0 + 20] = 0\n   953: u8 [a0 + 19] = 0\n   956: u8 [a0 + 18] = 0\n   959: u8 [a0 + 17] = 0\n   962: u8 [a0 + 16] = 0\n   965: u8 [a0 + 15] = 0\n   968: u8 [a0 + 14] = 0\n   971: u8 [a0 + 13] = 0\n   974: u8 [a0 + 12] = 0\n   977: u8 [a0 + 11] = 0\n   980: u8 [a0 + 10] = 0\n   983: u8 [a0 + 9] = 0\n   986: u8 [a0 + 8] = 0\n   989: u8 [a0 + 7] = 0\n   992: u8 [a0 + 3] = 0\n   995: u8 [a0 + 2] = 0\n   998: u8 [a0 + 1] = 0\n  1001: u8 [a0 + 0] = 0\n  1003: a1 = i32 [0x20004]\n  1008: u8 [a0 + 6] = 0\n  1011: u8 [a0 + 5] = 0\n  1014: u8 [a0 + 4] = 0\n  1017: jump @43 if a1 <u 4\n      : @30 (gas: 4)\n  1022: i32 a0 = sp + 0\n  1024: a1 = 0\n  1026: ecalli 4 // 'call_data_load'\n  1028: fallthrough\n      : @31 (gas: 2)\n  1029: a0 = i32 [sp + 0x1c]\n  1032: jump @36 if a0 <=s 3065339684\n      : @32 (gas: 2)\n  1039: a1 = 0x29dcb000\n  1045: jump @40 if a0 >s 702329038\n      : @33 (gas: 1)\n  1053: jump @45 if a0 == 3065339685\n      : @34 (gas: 1)\n  1061: jump @43 if a0 != 3375685774\n      : @35 (gas: 14)\n  1069: ra = 0x16\n  1072: sp = sp + 0xffffffffffffff60\n  1076: u64 [sp + 0x98] = ra\n  1080: u64 [sp + 0x90] = s0\n  1084: u64 [sp + 0x88] = s1\n  1088: s0 = sp + 0xa0\n  1092: sp = sp & 0xffffffffffffffe0\n  1095: u64 [sp + 56] = 0\n  1098: u64 [sp + 48] = 0\n  1101: u64 [sp + 40] = 0\n  1104: u64 [sp + 32] = 0\n  1107: i32 a0 = sp + 0x20\n  1110: ecalli 15 // 'value_transferred'\n  1112: jump @117\n      : @36 [@dyn 11] (gas: 1)\n  1115: jump @44 if a0 == 2376452955\n      : @37 (gas: 1)\n  1122: jump @47 if a0 == 2632781467\n      : @38 (gas: 1)\n  1130: jump @43 if a0 != 2801392353\n      : @39 (gas: 14)\n  1137: ra = 0x18\n  1140: sp = sp + 0xffffffffffffff40\n  1144: u64 [sp + 0xb8] = ra\n  1148: u64 [sp + 0xb0] = s0\n  1152: u64 [sp + 0xa8] = s1\n  1156: s0 = sp + 0xc0\n  1160: sp = sp & 0xffffffffffffffe0\n  1163: u64 [sp + 56] = 0\n  1166: u64 [sp + 48] = 0\n  1169: u64 [sp + 40] = 0\n  1172: u64 [sp + 32] = 0\n  1175: i32 a0 = sp + 0x20\n  1178: ecalli 15 // 'value_transferred'\n  1180: jump @94\n      : @40 [@dyn 12] (gas: 2)\n  1183: i32 a1 = a1 + 0xcf\n  1187: jump @46 if a0 == a1\n      : @41 (gas: 1)\n  1190: jump @43 if a0 != 1020253707\n      : @42 (gas: 13)\n  1197: ra = 0x1a\n  1200: sp = sp + 0xffffffffffffffc0\n  1203: u64 [sp + 0x38] = ra\n  1206: u64 [sp + 0x30] = s0\n  1209: s0 = sp + 0x40\n  1212: sp = sp & 0xffffffffffffffe0\n  1215: u64 [sp + 24] = 0\n  1218: u64 [sp + 16] = 0\n  1221: u64 [sp + 8] = 0\n  1224: u64 [sp + 0] = 0\n  1226: i32 a0 = sp + 0\n  1228: ecalli 15 // 'value_transferred'\n  1230: jump @61\n      : @43 [@dyn 13] (gas: 1)\n  1233: ra = 28, jump @127\n      : @44 [@dyn 14] (gas: 14)\n  1238: ra = 0x1e\n  1241: sp = sp + 0xffffffffffffff60\n  1245: u64 [sp + 0x98] = ra\n  1249: u64 [sp + 0x90] = s0\n  1253: u64 [sp + 0x88] = s1\n  1257: s0 = sp + 0xa0\n  1261: sp = sp & 0xffffffffffffffe0\n  1264: u64 [sp + 56] = 0\n  1267: u64 [sp + 48] = 0\n  1270: u64 [sp + 40] = 0\n  1273: u64 [sp + 32] = 0\n  1276: i32 a0 = sp + 0x20\n  1279: ecalli 15 // 'value_transferred'\n  1281: jump @72\n      : @45 [@dyn 15] (gas: 1)\n  1284: ra = 32, jump @107\n      : @46 [@dyn 16] (gas: 14)\n  1289: ra = 0x22\n  1292: sp = sp + 0xffffffffffffff60\n  1296: u64 [sp + 0x98] = ra\n  1300: u64 [sp + 0x90] = s0\n  1304: u64 [sp + 0x88] = s1\n  1308: s0 = sp + 0xa0\n  1312: sp = sp & 0xffffffffffffffe0\n  1315: u64 [sp + 56] = 0\n  1318: u64 [sp + 48] = 0\n  1321: u64 [sp + 40] = 0\n  1324: u64 [sp + 32] = 0\n  1327: i32 a0 = sp + 0x20\n  1330: ecalli 15 // 'value_transferred'\n  1332: jump @50\n      : @47 [@dyn 17] (gas: 14)\n  1335: ra = 0x24\n  1338: sp = sp + 0xffffffffffffff60\n  1342: u64 [sp + 0x98] = ra\n  1346: u64 [sp + 0x90] = s0\n  1350: u64 [sp + 0x88] = s1\n  1354: s0 = sp + 0xa0\n  1358: sp = sp & 0xffffffffffffffe0\n  1361: u64 [sp + 56] = 0\n  1364: u64 [sp + 48] = 0\n  1367: u64 [sp + 40] = 0\n  1370: u64 [sp + 32] = 0\n  1373: i32 a0 = sp + 0x20\n  1376: ecalli 15 // 'value_transferred'\n  1378: jump @83\n      : @48 [@dyn 18] (gas: 7)\n  1381: sp = sp + 0xfffffffffffffff0\n  1384: u64 [sp + 0x8] = ra\n  1387: u64 [sp] = s0\n  1389: s0 = a0\n  1391: a0 = 0x40\n  1394: a1 = 0x20\n  1397: ra = 38, jump @0\n      : @49 [@dyn 19] (gas: 100)\n  1402: a1 = u8 [a0 + 0x1]\n  1405: a2 = u8 [a0]\n  1407: a3 = u8 [a0 + 0x2]\n  1410: a4 = u8 [a0 + 0x3]\n  1413: a1 = a1 << 0x8\n  1416: a1 = a1 | a2\n  1419: a3 = a3 << 0x10\n  1422: a4 = a4 << 0x18\n  1425: a3 = a3 | a4\n  1428: a1 = a1 | a3\n  1431: a2 = u8 [a0 + 0x5]\n  1434: a3 = u8 [a0 + 0x4]\n  1437: a4 = u8 [a0 + 0x6]\n  1440: a5 = u8 [a0 + 0x7]\n  1443: a2 = a2 << 0x8\n  1446: a2 = a2 | a3\n  1449: a4 = a4 << 0x10\n  1452: a5 = a5 << 0x18\n  1455: a4 = a4 | a5\n  1458: a2 = a2 | a4\n  1461: a2 = a2 << 0x20\n  1464: t0 = a2 | a1\n  1467: a2 = u8 [a0 + 0x9]\n  1470: a3 = u8 [a0 + 0x8]\n  1473: a4 = u8 [a0 + 0xa]\n  1476: a5 = u8 [a0 + 0xb]\n  1479: a2 = a2 << 0x8\n  1482: a2 = a2 | a3\n  1485: a4 = a4 << 0x10\n  1488: a5 = a5 << 0x18\n  1491: a4 = a4 | a5\n  1494: a2 = a2 | a4\n  1497: a3 = u8 [a0 + 0xd]\n  1500: a4 = u8 [a0 + 0xc]\n  1503: a5 = u8 [a0 + 0xe]\n  1506: a1 = u8 [a0 + 0xf]\n  1509: a3 = a3 << 0x8\n  1512: a3 = a3 | a4\n  1515: a5 = a5 << 0x10\n  1518: a1 = a1 << 0x18\n  1521: a1 = a1 | a5\n  1524: a1 = a1 | a3\n  1527: a1 = a1 << 0x20\n  1530: t1 = a1 | a2\n  1533: a1 = u8 [a0 + 0x11]\n  1536: a3 = u8 [a0 + 0x10]\n  1539: a4 = u8 [a0 + 0x12]\n  1542: a5 = u8 [a0 + 0x13]\n  1545: a1 = a1 << 0x8\n  1548: a1 = a1 | a3\n  1551: a4 = a4 << 0x10\n  1554: a5 = a5 << 0x18\n  1557: a4 = a4 | a5\n  1560: a1 = a1 | a4\n  1563: a3 = u8 [a0 + 0x15]\n  1566: a4 = u8 [a0 + 0x14]\n  1569: a5 = u8 [a0 + 0x16]\n  1572: a2 = u8 [a0 + 0x17]\n  1575: a3 = a3 << 0x8\n  1578: a3 = a3 | a4\n  1581: a5 = a5 << 0x10\n  1584: a2 = a2 << 0x18\n  1587: a2 = a2 | a5\n  1590: a2 = a2 | a3\n  1593: a2 = a2 << 0x20\n  1596: a3 = a2 | a1\n  1599: a1 = u8 [a0 + 0x19]\n  1602: a2 = u8 [a0 + 0x18]\n  1605: a4 = u8 [a0 + 0x1a]\n  1608: a5 = u8 [a0 + 0x1b]\n  1611: a1 = a1 << 0x8\n  1614: a1 = a1 | a2\n  1617: a4 = a4 << 0x10\n  1620: a5 = a5 << 0x18\n  1623: a4 = a4 | a5\n  1626: a1 = a1 | a4\n  1629: a2 = u8 [a0 + 0x1d]\n  1632: a4 = u8 [a0 + 0x1c]\n  1635: a5 = u8 [a0 + 0x1e]\n  1638: a0 = u8 [a0 + 0x1f]\n  1641: a2 = a2 << 0x8\n  1644: a2 = a2 | a4\n  1647: a5 = a5 << 0x10\n  1650: a0 = a0 << 0x18\n  1653: a0 = a0 | a5\n  1656: a0 = a0 | a2\n  1659: a0 = a0 << 0x20\n  1662: a0 = a0 | a1\n  1665: a0 = reverse a0\n  1667: a1 = reverse a3\n  1669: a2 = reverse t1\n  1671: a3 = reverse t0\n  1673: u64 [s0 + 0x18] = a3\n  1676: u64 [s0 + 0x10] = a2\n  1679: u64 [s0 + 0x8] = a1\n  1682: u64 [s0] = a0\n  1684: ra = u64 [sp + 0x8]\n  1687: s0 = u64 [sp]\n  1689: sp = sp + 0x10\n  1692: ret\n      : @50 (gas: 8)\n  1694: a0 = u64 [sp + 0x30]\n  1697: a1 = u64 [sp + 0x38]\n  1700: a2 = u64 [sp + 0x28]\n  1703: a3 = u64 [sp + 0x20]\n  1706: a1 = a1 | a2\n  1709: a0 = a0 | a3\n  1712: a0 = a0 | a1\n  1715: jump @55 if a0 != 0\n      : @51 (gas: 2)\n  1719: a0 = i32 [0x20004]\n  1724: jump @55 if a0 <=u 3\n      : @52 (gas: 26)\n  1729: u64 [sp + 88] = 0\n  1732: u64 [sp + 80] = 0\n  1735: u64 [sp + 72] = 0\n  1738: u64 [sp + 64] = 0\n  1741: u64 [sp + 120] = 0\n  1744: u64 [sp + 112] = 0\n  1747: u64 [sp + 104] = 0\n  1750: u64 [sp + 96] = 0\n  1753: u32 [sp + 128] = 0x20\n  1758: i32 a1 = sp + 0x40\n  1761: i32 a3 = sp + 0x60\n  1764: i32 a4 = sp + 0x80\n  1768: a2 = 0xffffffffffffffff\n  1771: a0 = 0\n  1773: ecalli 7 // 'get_storage'\n  1775: a0 = u64 [sp + 0x78]\n  1778: u64 [sp] = a0\n  1780: a0 = u64 [sp + 0x70]\n  1783: u64 [sp + 0x8] = a0\n  1786: a0 = u64 [sp + 0x68]\n  1789: u64 [sp + 0x10] = a0\n  1792: a0 = u64 [sp + 0x60]\n  1795: u64 [sp + 0x18] = a0\n  1798: a0 = 0x40\n  1801: a1 = 0x20\n  1804: ra = 40, jump @0\n      : @53 [@dyn 20] (gas: 100)\n  1809: a1 = u8 [a0 + 0x11]\n  1812: a2 = u8 [a0 + 0x10]\n  1815: a3 = u8 [a0 + 0x12]\n  1818: a4 = u8 [a0 + 0x13]\n  1821: a1 = a1 << 0x8\n  1824: a1 = a1 | a2\n  1827: a3 = a3 << 0x10\n  1830: a4 = a4 << 0x18\n  1833: a3 = a3 | a4\n  1836: a1 = a1 | a3\n  1839: a2 = u8 [a0 + 0x15]\n  1842: a3 = u8 [a0 + 0x14]\n  1845: a4 = u8 [a0 + 0x16]\n  1848: a5 = u8 [a0 + 0x17]\n  1851: a2 = a2 << 0x8\n  1854: a2 = a2 | a3\n  1857: a4 = a4 << 0x10\n  1860: a5 = a5 << 0x18\n  1863: a4 = a4 | a5\n  1866: a2 = a2 | a4\n  1869: a2 = a2 << 0x20\n  1872: t0 = a2 | a1\n  1875: a2 = u8 [a0 + 0x1]\n  1878: a3 = u8 [a0]\n  1880: a4 = u8 [a0 + 0x2]\n  1883: a5 = u8 [a0 + 0x3]\n  1886: a2 = a2 << 0x8\n  1889: a2 = a2 | a3\n  1892: a4 = a4 << 0x10\n  1895: a5 = a5 << 0x18\n  1898: a4 = a4 | a5\n  1901: a2 = a2 | a4\n  1904: a3 = u8 [a0 + 0x5]\n  1907: a4 = u8 [a0 + 0x4]\n  1910: a5 = u8 [a0 + 0x6]\n  1913: s1 = u8 [a0 + 0x7]\n  1916: a3 = a3 << 0x8\n  1919: a3 = a3 | a4\n  1922: a5 = a5 << 0x10\n  1925: s1 = s1 << 0x18\n  1928: a5 = a5 | s1\n  1931: a3 = a3 | a5\n  1934: a3 = a3 << 0x20\n  1937: a2 = a2 | a3\n  1940: a3 = u8 [a0 + 0x19]\n  1943: a4 = u8 [a0 + 0x18]\n  1946: a5 = u8 [a0 + 0x1a]\n  1949: s1 = u8 [a0 + 0x1b]\n  1952: a3 = a3 << 0x8\n  1955: a3 = a3 | a4\n  1958: a5 = a5 << 0x10\n  1961: s1 = s1 << 0x18\n  1964: a5 = a5 | s1\n  1967: a3 = a3 | a5\n  1970: a4 = u8 [a0 + 0x1d]\n  1973: a5 = u8 [a0 + 0x1c]\n  1976: s1 = u8 [a0 + 0x1e]\n  1979: a1 = u8 [a0 + 0x1f]\n  1982: a4 = a4 << 0x8\n  1985: a4 = a4 | a5\n  1988: s1 = s1 << 0x10\n  1991: a1 = a1 << 0x18\n  1994: a1 = a1 | s1\n  1997: a1 = a1 | a4\n  2000: a1 = a1 << 0x20\n  2003: a3 = a3 | a1\n  2006: a1 = u8 [a0 + 0x9]\n  2009: a4 = u8 [a0 + 0x8]\n  2012: a5 = u8 [a0 + 0xa]\n  2015: s1 = u8 [a0 + 0xb]\n  2018: a1 = a1 << 0x8\n  2021: a1 = a1 | a4\n  2024: a5 = a5 << 0x10\n  2027: s1 = s1 << 0x18\n  2030: a5 = a5 | s1\n  2033: a1 = a1 | a5\n  2036: a4 = u8 [a0 + 0xd]\n  2039: a5 = u8 [a0 + 0xc]\n  2042: s1 = u8 [a0 + 0xe]\n  2045: a0 = u8 [a0 + 0xf]\n  2048: a4 = a4 << 0x8\n  2051: a4 = a4 | a5\n  2054: s1 = s1 << 0x10\n  2057: a0 = a0 << 0x18\n  2060: a0 = a0 | s1\n  2063: a0 = a0 | a4\n  2066: a0 = a0 << 0x20\n  2069: a0 = a0 | a1\n  2072: a1 = reverse a0\n  2074: a0 = reverse a3\n  2076: a2 = reverse a2\n  2078: a3 = reverse t0\n  2080: a2 = a2 | a3\n  2083: a3 = a0 | a1\n  2086: a3 = a3 | a2\n  2089: a3 = a3 >> 0x20\n  2092: a1 = a1 | a2\n  2095: a1 = a1 << 0x20\n  2098: a1 = a1 | a3\n  2101: jump @57 if a1 == 0\n      : @54 (gas: 1)\n  2104: trap\n      : @55 (gas: 3)\n  2105: a0 = 0\n  2107: a1 = 0\n  2109: ra = 42, jump @0\n      : @56 [@dyn 21] (gas: 5)\n  2114: i32 a1 = a0 + 0\n  2116: a0 = 0x1\n  2119: a2 = 0\n  2121: ecalli 12 // 'seal_return'\n  2123: fallthrough\n      : @57 (gas: 4)\n  2124: i32 s1 = a0 + 0\n  2126: a1 = 0x20\n  2129: a0 = s1\n  2131: ra = 44, jump @0\n      : @58 [@dyn 22] (gas: 71)\n  2136: a1 = u64 [sp]\n  2138: a1 = reverse a1\n  2140: a2 = u64 [sp + 0x8]\n  2143: a2 = reverse a2\n  2145: a3 = u64 [sp + 0x10]\n  2148: a3 = reverse a3\n  2150: a4 = u64 [sp + 0x18]\n  2153: a4 = reverse a4\n  2155: a5 = a4 >> 0x38\n  2158: u8 [a0 + 0x1f] = a5\n  2161: a5 = a4 >> 0x30\n  2164: u8 [a0 + 0x1e] = a5\n  2167: a5 = a4 >> 0x28\n  2170: u8 [a0 + 0x1d] = a5\n  2173: a5 = a4 >> 0x20\n  2176: u8 [a0 + 0x1c] = a5\n  2179: a5 = a4 >> 0x18\n  2182: u8 [a0 + 0x1b] = a5\n  2185: a5 = a4 >> 0x10\n  2188: u8 [a0 + 0x1a] = a5\n  2191: a5 = a4 >> 0x8\n  2194: u8 [a0 + 0x19] = a5\n  2197: u8 [a0 + 0x18] = a4\n  2200: u8 [a0 + 0x10] = a3\n  2203: a4 = a3 >> 0x38\n  2206: u8 [a0 + 0x17] = a4\n  2209: a4 = a3 >> 0x30\n  2212: u8 [a0 + 0x16] = a4\n  2215: a4 = a3 >> 0x28\n  2218: u8 [a0 + 0x15] = a4\n  2221: a4 = a3 >> 0x20\n  2224: u8 [a0 + 0x14] = a4\n  2227: a4 = a3 >> 0x18\n  2230: u8 [a0 + 0x13] = a4\n  2233: a4 = a3 >> 0x10\n  2236: u8 [a0 + 0x12] = a4\n  2239: a3 = a3 >> 0x8\n  2242: u8 [a0 + 0x11] = a3\n  2245: u8 [a0 + 0x8] = a2\n  2248: a3 = a2 >> 0x38\n  2251: u8 [a0 + 0xf] = a3\n  2254: a3 = a2 >> 0x30\n  2257: u8 [a0 + 0xe] = a3\n  2260: a3 = a2 >> 0x28\n  2263: u8 [a0 + 0xd] = a3\n  2266: a3 = a2 >> 0x20\n  2269: u8 [a0 + 0xc] = a3\n  2272: a3 = a2 >> 0x18\n  2275: u8 [a0 + 0xb] = a3\n  2278: a3 = a2 >> 0x10\n  2281: u8 [a0 + 0xa] = a3\n  2284: a2 = a2 >> 0x8\n  2287: u8 [a0 + 0x9] = a2\n  2290: u8 [a0] = a1\n  2292: a2 = a1 >> 0x38\n  2295: u8 [a0 + 0x7] = a2\n  2298: a2 = a1 >> 0x30\n  2301: u8 [a0 + 0x6] = a2\n  2304: a2 = a1 >> 0x28\n  2307: u8 [a0 + 0x5] = a2\n  2310: a2 = a1 >> 0x20\n  2313: u8 [a0 + 0x4] = a2\n  2316: a2 = a1 >> 0x18\n  2319: u8 [a0 + 0x3] = a2\n  2322: a2 = a1 >> 0x10\n  2325: u8 [a0 + 0x2] = a2\n  2328: a1 = a1 >> 0x8\n  2331: u8 [a0 + 0x1] = a1\n  2334: a1 = 0x20\n  2337: a0 = s1\n  2339: ra = 46, jump @0\n      : @59 [@dyn 23] (gas: 6)\n  2344: i32 a1 = a0 + 0\n  2346: a2 = 0x20\n  2349: a0 = 0\n  2351: ra = 0x30\n  2354: ecalli 12 // 'seal_return'\n  2356: fallthrough\n      : @60 [@dyn 24] (gas: 9)\n  2357: a2 = u64 [a1 + 0x18]\n  2360: a3 = u64 [a1 + 0x10]\n  2363: a4 = u64 [a1 + 0x8]\n  2366: a1 = u64 [a1]\n  2368: u64 [a0 + 0x18] = a2\n  2371: u64 [a0 + 0x10] = a3\n  2374: u64 [a0 + 0x8] = a4\n  2377: u64 [a0] = a1\n  2379: ret\n      : @61 (gas: 8)\n  2381: a0 = u64 [sp + 0x10]\n  2384: a1 = u64 [sp + 0x18]\n  2387: a2 = u64 [sp + 0x8]\n  2390: a3 = u64 [sp]\n  2392: a1 = a1 | a2\n  2395: a0 = a0 | a3\n  2398: a0 = a0 | a1\n  2401: jump @67 if a0 != 0\n      : @62 (gas: 2)\n  2405: a0 = i32 [0x20004]\n  2410: jump @67 if a0 <=u 3\n      : @63 (gas: 38)\n  2415: ra = 0x32\n  2418: sp = sp + 0xfffffffffffffdc0\n  2422: u64 [sp + 0x238] = ra\n  2426: u64 [sp + 0x230] = s0\n  2430: u64 [sp + 0x228] = s1\n  2434: s0 = sp + 0x240\n  2438: sp = sp & 0xffffffffffffffe0\n  2441: s1 = sp\n  2443: u64 [s1 + 504] = 0\n  2447: u64 [s1 + 496] = 0\n  2451: u64 [s1 + 488] = 0\n  2455: u64 [s1 + 480] = 0x2\n  2460: u64 [s1 + 536] = 0\n  2464: u64 [s1 + 528] = 0\n  2468: u64 [s1 + 520] = 0\n  2472: u64 [s1 + 512] = 0\n  2476: u32 [s1 + 544] = 0x20\n  2481: i32 a1 = s1 + 0x1e0\n  2485: i32 a3 = s1 + 0x200\n  2489: i32 a4 = s1 + 0x220\n  2493: a2 = 0xffffffffffffffff\n  2496: a0 = 0\n  2498: ecalli 7 // 'get_storage'\n  2500: a0 = u64 [s1 + 0x208]\n  2504: a1 = u64 [s1 + 0x200]\n  2508: a3 = u64 [s1 + 0x210]\n  2512: u64 [s1 + 0x48] = a3\n  2515: a2 = a0 << 0x38\n  2518: a1 = a1 >> 0x8\n  2521: a1 = a1 | a2\n  2524: u64 [s1 + 0x58] = a1\n  2527: a1 = a3 << 0x38\n  2530: a0 = a0 >> 0x8\n  2533: a0 = a0 | a1\n  2536: u64 [s1 + 0x50] = a0\n  2539: i32 a0 = s1 + 0x100\n  2543: ecalli 6 // 'caller'\n  2545: jump @182\n      : @64 [@dyn 25] (gas: 3)\n  2548: a0 = 0x40\n  2551: a1 = 0x20\n  2554: ra = 52, jump @0\n      : @65 [@dyn 26] (gas: 100)\n  2559: a1 = u8 [a0 + 0x11]\n  2562: a2 = u8 [a0 + 0x10]\n  2565: a3 = u8 [a0 + 0x12]\n  2568: a4 = u8 [a0 + 0x13]\n  2571: a1 = a1 << 0x8\n  2574: a1 = a1 | a2\n  2577: a3 = a3 << 0x10\n  2580: a4 = a4 << 0x18\n  2583: a3 = a3 | a4\n  2586: a1 = a1 | a3\n  2589: a2 = u8 [a0 + 0x15]\n  2592: a3 = u8 [a0 + 0x14]\n  2595: a4 = u8 [a0 + 0x16]\n  2598: a5 = u8 [a0 + 0x17]\n  2601: a2 = a2 << 0x8\n  2604: a2 = a2 | a3\n  2607: a4 = a4 << 0x10\n  2610: a5 = a5 << 0x18\n  2613: a4 = a4 | a5\n  2616: a2 = a2 | a4\n  2619: a2 = a2 << 0x20\n  2622: t0 = a2 | a1\n  2625: a2 = u8 [a0 + 0x1]\n  2628: a3 = u8 [a0]\n  2630: a4 = u8 [a0 + 0x2]\n  2633: a5 = u8 [a0 + 0x3]\n  2636: a2 = a2 << 0x8\n  2639: a2 = a2 | a3\n  2642: a4 = a4 << 0x10\n  2645: a5 = a5 << 0x18\n  2648: a4 = a4 | a5\n  2651: a2 = a2 | a4\n  2654: a3 = u8 [a0 + 0x5]\n  2657: a4 = u8 [a0 + 0x4]\n  2660: a5 = u8 [a0 + 0x6]\n  2663: a1 = u8 [a0 + 0x7]\n  2666: a3 = a3 << 0x8\n  2669: a3 = a3 | a4\n  2672: a5 = a5 << 0x10\n  2675: a1 = a1 << 0x18\n  2678: a1 = a1 | a5\n  2681: a1 = a1 | a3\n  2684: a1 = a1 << 0x20\n  2687: t1 = a1 | a2\n  2690: a1 = u8 [a0 + 0x19]\n  2693: a3 = u8 [a0 + 0x18]\n  2696: a4 = u8 [a0 + 0x1a]\n  2699: a5 = u8 [a0 + 0x1b]\n  2702: a1 = a1 << 0x8\n  2705: a1 = a1 | a3\n  2708: a4 = a4 << 0x10\n  2711: a5 = a5 << 0x18\n  2714: a4 = a4 | a5\n  2717: a1 = a1 | a4\n  2720: a3 = u8 [a0 + 0x1d]\n  2723: a4 = u8 [a0 + 0x1c]\n  2726: a5 = u8 [a0 + 0x1e]\n  2729: a2 = u8 [a0 + 0x1f]\n  2732: a3 = a3 << 0x8\n  2735: a3 = a3 | a4\n  2738: a5 = a5 << 0x10\n  2741: a2 = a2 << 0x18\n  2744: a2 = a2 | a5\n  2747: a2 = a2 | a3\n  2750: a2 = a2 << 0x20\n  2753: a3 = a2 | a1\n  2756: a1 = u8 [a0 + 0x9]\n  2759: a2 = u8 [a0 + 0x8]\n  2762: a4 = u8 [a0 + 0xa]\n  2765: a5 = u8 [a0 + 0xb]\n  2768: a1 = a1 << 0x8\n  2771: a1 = a1 | a2\n  2774: a4 = a4 << 0x10\n  2777: a5 = a5 << 0x18\n  2780: a4 = a4 | a5\n  2783: a1 = a1 | a4\n  2786: a2 = u8 [a0 + 0xd]\n  2789: a4 = u8 [a0 + 0xc]\n  2792: a5 = u8 [a0 + 0xe]\n  2795: a0 = u8 [a0 + 0xf]\n  2798: a2 = a2 << 0x8\n  2801: a2 = a2 | a4\n  2804: a5 = a5 << 0x10\n  2807: a0 = a0 << 0x18\n  2810: a0 = a0 | a5\n  2813: a0 = a0 | a2\n  2816: a0 = a0 << 0x20\n  2819: a0 = a0 | a1\n  2822: a1 = reverse a0\n  2824: a0 = reverse a3\n  2826: a2 = reverse t1\n  2828: a3 = reverse t0\n  2830: a2 = a2 | a3\n  2833: a3 = a0 | a1\n  2836: a3 = a3 | a2\n  2839: a3 = a3 >> 0x20\n  2842: a1 = a1 | a2\n  2845: a1 = a1 << 0x20\n  2848: a1 = a1 | a3\n  2851: jump @69 if a1 == 0\n      : @66 (gas: 1)\n  2854: trap\n      : @67 (gas: 3)\n  2855: a0 = 0\n  2857: a1 = 0\n  2859: ra = 54, jump @0\n      : @68 [@dyn 27] (gas: 7)\n  2864: i32 a1 = a0 + 0\n  2866: a0 = 0x1\n  2869: a2 = 0\n  2871: ecalli 12 // 'seal_return'\n  2873: i32 a0 = a0 + 0\n  2875: ra = 0x38\n  2878: jump @0\n      : @69 (gas: 2)\n  2881: i32 a0 = a0 + 0\n  2883: ra = 56, jump @0\n      : @70 [@dyn 28] (gas: 6)\n  2888: i32 a1 = a0 + 0\n  2890: a0 = 0\n  2892: a2 = 0\n  2894: ra = 0x3a\n  2897: ecalli 12 // 'seal_return'\n  2899: fallthrough\n      : @71 [@dyn 29] (gas: 194)\n  2900: sp = sp + 0xffffffffffffffa0\n  2903: u64 [sp + 0x58] = ra\n  2906: u64 [sp + 0x50] = s0\n  2909: u64 [sp + 0x48] = s1\n  2912: u64 [sp] = a0\n  2914: t1 = u64 [a1]\n  2916: ra = u64 [a1 + 0x8]\n  2919: a4 = u64 [a1 + 0x10]\n  2922: a1 = u64 [a1 + 0x18]\n  2925: t0 = u64 [a2]\n  2927: a3 = u64 [a2 + 0x8]\n  2930: t2 = u64 [a2 + 0x18]\n  2933: a2 = u64 [a2 + 0x10]\n  2936: s0 = t0 >> 0x3d\n  2939: s1 = a3 << 0x3\n  2942: s0 = s0 | s1\n  2945: a3 = a3 >> 0x3d\n  2948: s1 = a2 << 0x3\n  2951: a3 = a3 | s1\n  2954: a2 = a2 >> 0x3d\n  2957: t2 = t2 << 0x3\n  2960: s1 = t2 | a2\n  2963: t2 = t0 << 0x3\n  2966: a2 = s1 >u 0\n  2968: a5 = a3 >u 0\n  2970: a5 = a2 if s1 != 0\n  2973: a0 = s0 >u 0\n  2975: a2 = t2 <u 0x100\n  2979: t2 = a2 ^ 0x1\n  2982: t2 = a0 if s0 != 0\n  2985: a3 = a3 | s1\n  2988: t2 = a5 if a3 != 0\n  2991: u8 [sp + 71] = 0\n  2994: u8 [sp + 70] = 0\n  2997: u8 [sp + 69] = 0\n  3000: u8 [sp + 68] = 0\n  3003: u8 [sp + 67] = 0\n  3006: u8 [sp + 66] = 0\n  3009: u8 [sp + 65] = 0\n  3012: u8 [sp + 64] = 0\n  3015: u8 [sp + 63] = 0\n  3018: u8 [sp + 62] = 0\n  3021: u8 [sp + 61] = 0\n  3024: u8 [sp + 60] = 0\n  3027: u8 [sp + 59] = 0\n  3030: u8 [sp + 58] = 0\n  3033: u8 [sp + 57] = 0\n  3036: u8 [sp + 56] = 0\n  3039: u8 [sp + 55] = 0\n  3042: u8 [sp + 54] = 0\n  3045: u8 [sp + 53] = 0\n  3048: u8 [sp + 52] = 0\n  3051: u8 [sp + 51] = 0\n  3054: u8 [sp + 50] = 0\n  3057: u8 [sp + 49] = 0\n  3060: u8 [sp + 48] = 0\n  3063: u8 [sp + 47] = 0\n  3066: u8 [sp + 46] = 0\n  3069: u8 [sp + 45] = 0\n  3072: u8 [sp + 44] = 0\n  3075: u8 [sp + 43] = 0\n  3078: u8 [sp + 42] = 0\n  3081: u8 [sp + 41] = 0\n  3084: u8 [sp + 40] = 0\n  3087: u8 [sp + 0x20] = a1\n  3090: u8 [sp + 0x18] = a4\n  3093: u8 [sp + 0x10] = ra\n  3096: u8 [sp + 0x8] = t1\n  3099: a0 = a1 >> 0x38\n  3102: u8 [sp + 0x27] = a0\n  3105: a0 = a1 >> 0x30\n  3108: u8 [sp + 0x26] = a0\n  3111: a0 = a1 >> 0x28\n  3114: u8 [sp + 0x25] = a0\n  3117: a0 = a1 >> 0x20\n  3120: u8 [sp + 0x24] = a0\n  3123: a0 = a1 >> 0x18\n  3126: u8 [sp + 0x23] = a0\n  3129: a0 = a1 >> 0x10\n  3132: u8 [sp + 0x22] = a0\n  3135: a1 = a1 >> 0x8\n  3138: u8 [sp + 0x21] = a1\n  3141: a0 = a4 >> 0x38\n  3144: u8 [sp + 0x1f] = a0\n  3147: a0 = a4 >> 0x30\n  3150: u8 [sp + 0x1e] = a0\n  3153: a0 = a4 >> 0x28\n  3156: u8 [sp + 0x1d] = a0\n  3159: a0 = a4 >> 0x20\n  3162: u8 [sp + 0x1c] = a0\n  3165: a0 = a4 >> 0x18\n  3168: u8 [sp + 0x1b] = a0\n  3171: a0 = a4 >> 0x10\n  3174: u8 [sp + 0x1a] = a0\n  3177: a4 = a4 >> 0x8\n  3180: u8 [sp + 0x19] = a4\n  3183: a0 = ra >> 0x38\n  3186: u8 [sp + 0x17] = a0\n  3189: a0 = ra >> 0x30\n  3192: u8 [sp + 0x16] = a0\n  3195: a0 = ra >> 0x28\n  3198: u8 [sp + 0x15] = a0\n  3201: a0 = ra >> 0x20\n  3204: u8 [sp + 0x14] = a0\n  3207: a0 = ra >> 0x18\n  3210: u8 [sp + 0x13] = a0\n  3213: a0 = ra >> 0x10\n  3216: u8 [sp + 0x12] = a0\n  3219: a0 = ra >> 0x8\n  3222: u8 [sp + 0x11] = a0\n  3225: a0 = t1 >> 0x38\n  3228: u8 [sp + 0xf] = a0\n  3231: a0 = t1 >> 0x30\n  3234: u8 [sp + 0xe] = a0\n  3237: a0 = t1 >> 0x28\n  3240: u8 [sp + 0xd] = a0\n  3243: a0 = t1 >> 0x20\n  3246: u8 [sp + 0xc] = a0\n  3249: a0 = t1 >> 0x18\n  3252: u8 [sp + 0xb] = a0\n  3255: a0 = t1 >> 0x10\n  3258: u8 [sp + 0xa] = a0\n  3261: a0 = t1 >> 0x8\n  3264: u8 [sp + 0x9] = a0\n  3267: a1 = t0 & 0x1f\n  3270: a0 = sp + 0x8\n  3273: a1 = a1 + a0\n  3276: a0 = u8 [a1 + 0x9]\n  3279: a2 = u8 [a1 + 0x8]\n  3282: a3 = u8 [a1 + 0xa]\n  3285: a4 = u8 [a1 + 0xb]\n  3288: a0 = a0 << 0x8\n  3291: a0 = a0 | a2\n  3294: a3 = a3 << 0x10\n  3297: a4 = a4 << 0x18\n  3300: a3 = a3 | a4\n  3303: a0 = a0 | a3\n  3306: a2 = u8 [a1 + 0xd]\n  3309: a3 = u8 [a1 + 0xc]\n  3312: a4 = u8 [a1 + 0xe]\n  3315: a5 = u8 [a1 + 0xf]\n  3318: a2 = a2 << 0x8\n  3321: a2 = a2 | a3\n  3324: a4 = a4 << 0x10\n  3327: a5 = a5 << 0x18\n  3330: a4 = a4 | a5\n  3333: a2 = a2 | a4\n  3336: a2 = a2 << 0x20\n  3339: a3 = a2 | a0\n  3342: a0 = u8 [a1 + 0x1]\n  3345: a2 = u8 [a1]\n  3347: a4 = u8 [a1 + 0x2]\n  3350: a5 = u8 [a1 + 0x3]\n  3353: a0 = a0 << 0x8\n  3356: a0 = a0 | a2\n  3359: a4 = a4 << 0x10\n  3362: a5 = a5 << 0x18\n  3365: a4 = a4 | a5\n  3368: a0 = a0 | a4\n  3371: a2 = u8 [a1 + 0x5]\n  3374: a4 = u8 [a1 + 0x4]\n  3377: a5 = u8 [a1 + 0x6]\n  3380: s1 = u8 [a1 + 0x7]\n  3383: a2 = a2 << 0x8\n  3386: a2 = a2 | a4\n  3389: a5 = a5 << 0x10\n  3392: s1 = s1 << 0x18\n  3395: a5 = a5 | s1\n  3398: a2 = a2 | a5\n  3401: a2 = a2 << 0x20\n  3404: a0 = a0 | a2\n  3407: a2 = u8 [a1 + 0x11]\n  3410: a4 = u8 [a1 + 0x10]\n  3413: a5 = u8 [a1 + 0x12]\n  3416: a1 = u8 [a1 + 0x13]\n  3419: a2 = a2 << 0x8\n  3422: a2 = a2 | a4\n  3425: a5 = a5 << 0x10\n  3428: a1 = a1 << 0x18\n  3431: a1 = a1 | a5\n  3434: a1 = a1 | a2\n  3437: a0 = 0 if t2 != 0\n  3439: a3 = 0 if t2 != 0\n  3441: a1 = 0 if t2 != 0\n  3443: a2 = u64 [sp]\n  3445: u64 [a2 + 24] = 0\n  3448: u64 [a2 + 0x10] = a1\n  3451: u64 [a2 + 0x8] = a3\n  3454: u64 [a2] = a0\n  3456: ra = u64 [sp + 0x58]\n  3459: s0 = u64 [sp + 0x50]\n  3462: s1 = u64 [sp + 0x48]\n  3465: sp = sp + 0x60\n  3468: ret\n      : @72 (gas: 8)\n  3470: a0 = u64 [sp + 0x30]\n  3473: a1 = u64 [sp + 0x38]\n  3476: a2 = u64 [sp + 0x28]\n  3479: a3 = u64 [sp + 0x20]\n  3482: a1 = a1 | a2\n  3485: a0 = a0 | a3\n  3488: a0 = a0 | a1\n  3491: jump @77 if a0 != 0\n      : @73 (gas: 2)\n  3495: a0 = i32 [0x20004]\n  3500: jump @77 if a0 <=u 3\n      : @74 (gas: 24)\n  3505: u64 [sp + 88] = 0\n  3508: u64 [sp + 80] = 0\n  3511: u64 [sp + 72] = 0\n  3514: u64 [sp + 64] = 0x2\n  3518: u64 [sp + 120] = 0\n  3521: u64 [sp + 112] = 0\n  3524: u64 [sp + 104] = 0\n  3527: u64 [sp + 96] = 0\n  3530: u32 [sp + 128] = 0x20\n  3535: i32 a1 = sp + 0x40\n  3538: i32 a3 = sp + 0x60\n  3541: i32 a4 = sp + 0x80\n  3545: a2 = 0xffffffffffffffff\n  3548: a0 = 0\n  3550: ecalli 7 // 'get_storage'\n  3552: a0 = u64 [sp + 0x70]\n  3555: u64 [sp + 0x18] = a0\n  3558: a0 = u64 [sp + 0x68]\n  3561: u64 [sp + 0x10] = a0\n  3564: a0 = u64 [sp + 0x60]\n  3567: u64 [sp + 0x8] = a0\n  3570: a0 = 0x40\n  3573: a1 = 0x20\n  3576: ra = 60, jump @0\n      : @75 [@dyn 30] (gas: 100)\n  3581: a1 = u8 [a0 + 0x11]\n  3584: a2 = u8 [a0 + 0x10]\n  3587: a3 = u8 [a0 + 0x12]\n  3590: a4 = u8 [a0 + 0x13]\n  3593: a1 = a1 << 0x8\n  3596: a1 = a1 | a2\n  3599: a3 = a3 << 0x10\n  3602: a4 = a4 << 0x18\n  3605: a3 = a3 | a4\n  3608: a1 = a1 | a3\n  3611: a2 = u8 [a0 + 0x15]\n  3614: a3 = u8 [a0 + 0x14]\n  3617: a4 = u8 [a0 + 0x16]\n  3620: a5 = u8 [a0 + 0x17]\n  3623: a2 = a2 << 0x8\n  3626: a2 = a2 | a3\n  3629: a4 = a4 << 0x10\n  3632: a5 = a5 << 0x18\n  3635: a4 = a4 | a5\n  3638: a2 = a2 | a4\n  3641: a2 = a2 << 0x20\n  3644: t0 = a2 | a1\n  3647: a2 = u8 [a0 + 0x1]\n  3650: a3 = u8 [a0]\n  3652: a4 = u8 [a0 + 0x2]\n  3655: a5 = u8 [a0 + 0x3]\n  3658: a2 = a2 << 0x8\n  3661: a2 = a2 | a3\n  3664: a4 = a4 << 0x10\n  3667: a5 = a5 << 0x18\n  3670: a4 = a4 | a5\n  3673: a2 = a2 | a4\n  3676: a3 = u8 [a0 + 0x5]\n  3679: a4 = u8 [a0 + 0x4]\n  3682: a5 = u8 [a0 + 0x6]\n  3685: s1 = u8 [a0 + 0x7]\n  3688: a3 = a3 << 0x8\n  3691: a3 = a3 | a4\n  3694: a5 = a5 << 0x10\n  3697: s1 = s1 << 0x18\n  3700: a5 = a5 | s1\n  3703: a3 = a3 | a5\n  3706: a3 = a3 << 0x20\n  3709: a2 = a2 | a3\n  3712: a3 = u8 [a0 + 0x19]\n  3715: a4 = u8 [a0 + 0x18]\n  3718: a5 = u8 [a0 + 0x1a]\n  3721: s1 = u8 [a0 + 0x1b]\n  3724: a3 = a3 << 0x8\n  3727: a3 = a3 | a4\n  3730: a5 = a5 << 0x10\n  3733: s1 = s1 << 0x18\n  3736: a5 = a5 | s1\n  3739: a3 = a3 | a5\n  3742: a4 = u8 [a0 + 0x1d]\n  3745: a5 = u8 [a0 + 0x1c]\n  3748: s1 = u8 [a0 + 0x1e]\n  3751: a1 = u8 [a0 + 0x1f]\n  3754: a4 = a4 << 0x8\n  3757: a4 = a4 | a5\n  3760: s1 = s1 << 0x10\n  3763: a1 = a1 << 0x18\n  3766: a1 = a1 | s1\n  3769: a1 = a1 | a4\n  3772: a1 = a1 << 0x20\n  3775: a3 = a3 | a1\n  3778: a1 = u8 [a0 + 0x9]\n  3781: a4 = u8 [a0 + 0x8]\n  3784: a5 = u8 [a0 + 0xa]\n  3787: s1 = u8 [a0 + 0xb]\n  3790: a1 = a1 << 0x8\n  3793: a1 = a1 | a4\n  3796: a5 = a5 << 0x10\n  3799: s1 = s1 << 0x18\n  3802: a5 = a5 | s1\n  3805: a1 = a1 | a5\n  3808: a4 = u8 [a0 + 0xd]\n  3811: a5 = u8 [a0 + 0xc]\n  3814: s1 = u8 [a0 + 0xe]\n  3817: a0 = u8 [a0 + 0xf]\n  3820: a4 = a4 << 0x8\n  3823: a4 = a4 | a5\n  3826: s1 = s1 << 0x10\n  3829: a0 = a0 << 0x18\n  3832: a0 = a0 | s1\n  3835: a0 = a0 | a4\n  3838: a0 = a0 << 0x20\n  3841: a0 = a0 | a1\n  3844: a1 = reverse a0\n  3846: a0 = reverse a3\n  3848: a2 = reverse a2\n  3850: a3 = reverse t0\n  3852: a2 = a2 | a3\n  3855: a3 = a0 | a1\n  3858: a3 = a3 | a2\n  3861: a3 = a3 >> 0x20\n  3864: a1 = a1 | a2\n  3867: a1 = a1 << 0x20\n  3870: a1 = a1 | a3\n  3873: jump @79 if a1 == 0\n      : @76 (gas: 1)\n  3876: trap\n      : @77 (gas: 3)\n  3877: a0 = 0\n  3879: a1 = 0\n  3881: ra = 62, jump @0\n      : @78 [@dyn 31] (gas: 5)\n  3886: i32 a1 = a0 + 0\n  3888: a0 = 0x1\n  3891: a2 = 0\n  3893: ecalli 12 // 'seal_return'\n  3895: fallthrough\n      : @79 (gas: 17)\n  3896: a1 = u64 [sp + 0x8]\n  3899: a1 = a1 >> 0x8\n  3902: a3 = u64 [sp + 0x10]\n  3905: a2 = a3 << 0x38\n  3908: a1 = a1 | a2\n  3911: u64 [sp + 0x8] = a1\n  3914: a1 = a3 >> 0x8\n  3917: a3 = u64 [sp + 0x18]\n  3920: a2 = a3 << 0x38\n  3923: s1 = a1 | a2\n  3926: a1 = a3 << 0x18\n  3929: a1 = a1 >> 0x20\n  3932: u64 [sp + 0x10] = a1\n  3935: i32 a0 = a0 + 0\n  3937: u64 [sp + 0x18] = a0\n  3940: a1 = 0x20\n  3943: ra = 64, jump @0\n      : @80 [@dyn 32] (gas: 58)\n  3948: a2 = reverse s1\n  3950: a1 = u64 [sp + 0x8]\n  3953: a3 = reverse a1\n  3955: a1 = u64 [sp + 0x10]\n  3958: a1 = reverse a1\n  3960: u8 [a0 + 11] = 0\n  3963: u8 [a0 + 10] = 0\n  3966: u8 [a0 + 9] = 0\n  3969: u8 [a0 + 7] = 0\n  3972: u8 [a0 + 6] = 0\n  3975: u8 [a0 + 5] = 0\n  3978: u8 [a0 + 4] = 0\n  3981: u8 [a0 + 3] = 0\n  3984: u8 [a0 + 2] = 0\n  3987: u8 [a0 + 1] = 0\n  3990: u8 [a0 + 0] = 0\n  3992: u8 [a0 + 0x18] = a3\n  3995: a4 = a3 >> 0x38\n  3998: u8 [a0 + 0x1f] = a4\n  4001: a4 = a3 >> 0x30\n  4004: u8 [a0 + 0x1e] = a4\n  4007: a4 = a3 >> 0x28\n  4010: u8 [a0 + 0x1d] = a4\n  4013: a4 = a3 >> 0x20\n  4016: u8 [a0 + 0x1c] = a4\n  4019: a4 = a3 >> 0x18\n  4022: u8 [a0 + 0x1b] = a4\n  4025: a4 = a3 >> 0x10\n  4028: u8 [a0 + 0x1a] = a4\n  4031: a3 = a3 >> 0x8\n  4034: u8 [a0 + 0x19] = a3\n  4037: u8 [a0 + 0x10] = a2\n  4040: u8 [a0 + 0x8] = a1\n  4043: a3 = a2 >> 0x38\n  4046: u8 [a0 + 0x17] = a3\n  4049: a3 = a2 >> 0x30\n  4052: u8 [a0 + 0x16] = a3\n  4055: a3 = a2 >> 0x28\n  4058: u8 [a0 + 0x15] = a3\n  4061: a3 = a2 >> 0x20\n  4064: u8 [a0 + 0x14] = a3\n  4067: a3 = a2 >> 0x18\n  4070: u8 [a0 + 0x13] = a3\n  4073: a3 = a2 >> 0x10\n  4076: u8 [a0 + 0x12] = a3\n  4079: a2 = a2 >> 0x8\n  4082: u8 [a0 + 0x11] = a2\n  4085: a2 = a1 >> 0x38\n  4088: u8 [a0 + 0xf] = a2\n  4091: a2 = a1 >> 0x30\n  4094: u8 [a0 + 0xe] = a2\n  4097: a2 = a1 >> 0x28\n  4100: u8 [a0 + 0xd] = a2\n  4103: a1 = a1 >> 0x20\n  4106: u8 [a0 + 0xc] = a1\n  4109: a1 = 0x20\n  4112: a0 = u64 [sp + 0x18]\n  4115: ra = 66, jump @0\n      : @81 [@dyn 33] (gas: 6)\n  4120: i32 a1 = a0 + 0\n  4122: a2 = 0x20\n  4125: a0 = 0\n  4127: ra = 0x44\n  4130: ecalli 12 // 'seal_return'\n  4132: fallthrough\n      : @82 [@dyn 34] (gas: 36)\n  4133: sp = sp + 0xffffffffffffffa0\n  4136: u64 [sp + 0x58] = ra\n  4139: u64 [sp + 0x50] = s0\n  4142: u64 [sp + 0x48] = s1\n  4145: s0 = sp + 0x60\n  4148: sp = sp & 0xffffffffffffffe0\n  4151: s1 = a0\n  4153: u64 [sp + 24] = 0\n  4156: u64 [sp + 16] = 0\n  4159: u64 [sp + 8] = 0\n  4162: u64 [sp + 0] = 0x1\n  4165: u64 [sp + 56] = 0\n  4168: u64 [sp + 48] = 0\n  4171: u64 [sp + 40] = 0\n  4174: u64 [sp + 32] = 0\n  4177: u32 [sp + 64] = 0x20\n  4181: i32 a1 = sp + 0\n  4183: i32 a3 = sp + 0x20\n  4186: i32 a4 = sp + 0x40\n  4189: a2 = 0xffffffffffffffff\n  4192: a0 = 0\n  4194: ecalli 7 // 'get_storage'\n  4196: a0 = u64 [sp + 0x38]\n  4199: a1 = u64 [sp + 0x30]\n  4202: a2 = u64 [sp + 0x28]\n  4205: a3 = u64 [sp + 0x20]\n  4208: u64 [s1 + 0x18] = a0\n  4211: u64 [s1 + 0x10] = a1\n  4214: u64 [s1 + 0x8] = a2\n  4217: u64 [s1] = a3\n  4219: sp = s0 + 0xffffffffffffffa0\n  4222: ra = u64 [sp + 0x58]\n  4225: s0 = u64 [sp + 0x50]\n  4228: s1 = u64 [sp + 0x48]\n  4231: sp = sp + 0x60\n  4234: ret\n      : @83 (gas: 8)\n  4236: a0 = u64 [sp + 0x30]\n  4239: a1 = u64 [sp + 0x38]\n  4242: a2 = u64 [sp + 0x28]\n  4245: a3 = u64 [sp + 0x20]\n  4248: a1 = a1 | a2\n  4251: a0 = a0 | a3\n  4254: a0 = a0 | a1\n  4257: jump @88 if a0 != 0\n      : @84 (gas: 2)\n  4261: a0 = i32 [0x20004]\n  4266: jump @88 if a0 <=u 3\n      : @85 (gas: 26)\n  4271: u64 [sp + 88] = 0\n  4274: u64 [sp + 80] = 0\n  4277: u64 [sp + 72] = 0\n  4280: u64 [sp + 64] = 0x1\n  4284: u64 [sp + 120] = 0\n  4287: u64 [sp + 112] = 0\n  4290: u64 [sp + 104] = 0\n  4293: u64 [sp + 96] = 0\n  4296: u32 [sp + 128] = 0x20\n  4301: i32 a1 = sp + 0x40\n  4304: i32 a3 = sp + 0x60\n  4307: i32 a4 = sp + 0x80\n  4311: a2 = 0xffffffffffffffff\n  4314: a0 = 0\n  4316: ecalli 7 // 'get_storage'\n  4318: a0 = u64 [sp + 0x78]\n  4321: u64 [sp] = a0\n  4323: a0 = u64 [sp + 0x70]\n  4326: u64 [sp + 0x8] = a0\n  4329: a0 = u64 [sp + 0x68]\n  4332: u64 [sp + 0x10] = a0\n  4335: a0 = u64 [sp + 0x60]\n  4338: u64 [sp + 0x18] = a0\n  4341: a0 = 0x40\n  4344: a1 = 0x20\n  4347: ra = 70, jump @0\n      : @86 [@dyn 35] (gas: 100)\n  4352: a1 = u8 [a0 + 0x11]\n  4355: a2 = u8 [a0 + 0x10]\n  4358: a3 = u8 [a0 + 0x12]\n  4361: a4 = u8 [a0 + 0x13]\n  4364: a1 = a1 << 0x8\n  4367: a1 = a1 | a2\n  4370: a3 = a3 << 0x10\n  4373: a4 = a4 << 0x18\n  4376: a3 = a3 | a4\n  4379: a1 = a1 | a3\n  4382: a2 = u8 [a0 + 0x15]\n  4385: a3 = u8 [a0 + 0x14]\n  4388: a4 = u8 [a0 + 0x16]\n  4391: a5 = u8 [a0 + 0x17]\n  4394: a2 = a2 << 0x8\n  4397: a2 = a2 | a3\n  4400: a4 = a4 << 0x10\n  4403: a5 = a5 << 0x18\n  4406: a4 = a4 | a5\n  4409: a2 = a2 | a4\n  4412: a2 = a2 << 0x20\n  4415: t0 = a2 | a1\n  4418: a2 = u8 [a0 + 0x1]\n  4421: a3 = u8 [a0]\n  4423: a4 = u8 [a0 + 0x2]\n  4426: a5 = u8 [a0 + 0x3]\n  4429: a2 = a2 << 0x8\n  4432: a2 = a2 | a3\n  4435: a4 = a4 << 0x10\n  4438: a5 = a5 << 0x18\n  4441: a4 = a4 | a5\n  4444: a2 = a2 | a4\n  4447: a3 = u8 [a0 + 0x5]\n  4450: a4 = u8 [a0 + 0x4]\n  4453: a5 = u8 [a0 + 0x6]\n  4456: s1 = u8 [a0 + 0x7]\n  4459: a3 = a3 << 0x8\n  4462: a3 = a3 | a4\n  4465: a5 = a5 << 0x10\n  4468: s1 = s1 << 0x18\n  4471: a5 = a5 | s1\n  4474: a3 = a3 | a5\n  4477: a3 = a3 << 0x20\n  4480: a2 = a2 | a3\n  4483: a3 = u8 [a0 + 0x19]\n  4486: a4 = u8 [a0 + 0x18]\n  4489: a5 = u8 [a0 + 0x1a]\n  4492: s1 = u8 [a0 + 0x1b]\n  4495: a3 = a3 << 0x8\n  4498: a3 = a3 | a4\n  4501: a5 = a5 << 0x10\n  4504: s1 = s1 << 0x18\n  4507: a5 = a5 | s1\n  4510: a3 = a3 | a5\n  4513: a4 = u8 [a0 + 0x1d]\n  4516: a5 = u8 [a0 + 0x1c]\n  4519: s1 = u8 [a0 + 0x1e]\n  4522: a1 = u8 [a0 + 0x1f]\n  4525: a4 = a4 << 0x8\n  4528: a4 = a4 | a5\n  4531: s1 = s1 << 0x10\n  4534: a1 = a1 << 0x18\n  4537: a1 = a1 | s1\n  4540: a1 = a1 | a4\n  4543: a1 = a1 << 0x20\n  4546: a3 = a3 | a1\n  4549: a1 = u8 [a0 + 0x9]\n  4552: a4 = u8 [a0 + 0x8]\n  4555: a5 = u8 [a0 + 0xa]\n  4558: s1 = u8 [a0 + 0xb]\n  4561: a1 = a1 << 0x8\n  4564: a1 = a1 | a4\n  4567: a5 = a5 << 0x10\n  4570: s1 = s1 << 0x18\n  4573: a5 = a5 | s1\n  4576: a1 = a1 | a5\n  4579: a4 = u8 [a0 + 0xd]\n  4582: a5 = u8 [a0 + 0xc]\n  4585: s1 = u8 [a0 + 0xe]\n  4588: a0 = u8 [a0 + 0xf]\n  4591: a4 = a4 << 0x8\n  4594: a4 = a4 | a5\n  4597: s1 = s1 << 0x10\n  4600: a0 = a0 << 0x18\n  4603: a0 = a0 | s1\n  4606: a0 = a0 | a4\n  4609: a0 = a0 << 0x20\n  4612: a0 = a0 | a1\n  4615: a1 = reverse a0\n  4617: a0 = reverse a3\n  4619: a2 = reverse a2\n  4621: a3 = reverse t0\n  4623: a2 = a2 | a3\n  4626: a3 = a0 | a1\n  4629: a3 = a3 | a2\n  4632: a3 = a3 >> 0x20\n  4635: a1 = a1 | a2\n  4638: a1 = a1 << 0x20\n  4641: a1 = a1 | a3\n  4644: jump @90 if a1 == 0\n      : @87 (gas: 1)\n  4647: trap\n      : @88 (gas: 3)\n  4648: a0 = 0\n  4650: a1 = 0\n  4652: ra = 72, jump @0\n      : @89 [@dyn 36] (gas: 5)\n  4657: i32 a1 = a0 + 0\n  4659: a0 = 0x1\n  4662: a2 = 0\n  4664: ecalli 12 // 'seal_return'\n  4666: fallthrough\n      : @90 (gas: 4)\n  4667: i32 s1 = a0 + 0\n  4669: a1 = 0x20\n  4672: a0 = s1\n  4674: ra = 74, jump @0\n      : @91 [@dyn 37] (gas: 71)\n  4679: a1 = u64 [sp]\n  4681: a1 = reverse a1\n  4683: a2 = u64 [sp + 0x8]\n  4686: a2 = reverse a2\n  4688: a3 = u64 [sp + 0x10]\n  4691: a3 = reverse a3\n  4693: a4 = u64 [sp + 0x18]\n  4696: a4 = reverse a4\n  4698: a5 = a4 >> 0x38\n  4701: u8 [a0 + 0x1f] = a5\n  4704: a5 = a4 >> 0x30\n  4707: u8 [a0 + 0x1e] = a5\n  4710: a5 = a4 >> 0x28\n  4713: u8 [a0 + 0x1d] = a5\n  4716: a5 = a4 >> 0x20\n  4719: u8 [a0 + 0x1c] = a5\n  4722: a5 = a4 >> 0x18\n  4725: u8 [a0 + 0x1b] = a5\n  4728: a5 = a4 >> 0x10\n  4731: u8 [a0 + 0x1a] = a5\n  4734: a5 = a4 >> 0x8\n  4737: u8 [a0 + 0x19] = a5\n  4740: u8 [a0 + 0x18] = a4\n  4743: u8 [a0 + 0x10] = a3\n  4746: a4 = a3 >> 0x38\n  4749: u8 [a0 + 0x17] = a4\n  4752: a4 = a3 >> 0x30\n  4755: u8 [a0 + 0x16] = a4\n  4758: a4 = a3 >> 0x28\n  4761: u8 [a0 + 0x15] = a4\n  4764: a4 = a3 >> 0x20\n  4767: u8 [a0 + 0x14] = a4\n  4770: a4 = a3 >> 0x18\n  4773: u8 [a0 + 0x13] = a4\n  4776: a4 = a3 >> 0x10\n  4779: u8 [a0 + 0x12] = a4\n  4782: a3 = a3 >> 0x8\n  4785: u8 [a0 + 0x11] = a3\n  4788: u8 [a0 + 0x8] = a2\n  4791: a3 = a2 >> 0x38\n  4794: u8 [a0 + 0xf] = a3\n  4797: a3 = a2 >> 0x30\n  4800: u8 [a0 + 0xe] = a3\n  4803: a3 = a2 >> 0x28\n  4806: u8 [a0 + 0xd] = a3\n  4809: a3 = a2 >> 0x20\n  4812: u8 [a0 + 0xc] = a3\n  4815: a3 = a2 >> 0x18\n  4818: u8 [a0 + 0xb] = a3\n  4821: a3 = a2 >> 0x10\n  4824: u8 [a0 + 0xa] = a3\n  4827: a2 = a2 >> 0x8\n  4830: u8 [a0 + 0x9] = a2\n  4833: u8 [a0] = a1\n  4835: a2 = a1 >> 0x38\n  4838: u8 [a0 + 0x7] = a2\n  4841: a2 = a1 >> 0x30\n  4844: u8 [a0 + 0x6] = a2\n  4847: a2 = a1 >> 0x28\n  4850: u8 [a0 + 0x5] = a2\n  4853: a2 = a1 >> 0x20\n  4856: u8 [a0 + 0x4] = a2\n  4859: a2 = a1 >> 0x18\n  4862: u8 [a0 + 0x3] = a2\n  4865: a2 = a1 >> 0x10\n  4868: u8 [a0 + 0x2] = a2\n  4871: a1 = a1 >> 0x8\n  4874: u8 [a0 + 0x1] = a1\n  4877: a1 = 0x20\n  4880: a0 = s1\n  4882: ra = 76, jump @0\n      : @92 [@dyn 38] (gas: 6)\n  4887: i32 a1 = a0 + 0\n  4889: a2 = 0x20\n  4892: a0 = 0\n  4894: ra = 0x4e\n  4897: ecalli 12 // 'seal_return'\n  4899: fallthrough\n      : @93 [@dyn 39] (gas: 8)\n  4900: a2 = u32 [a1 + 0x10]\n  4903: a3 = u64 [a1 + 0x8]\n  4906: a1 = u64 [a1]\n  4908: u64 [a0 + 24] = 0\n  4911: u64 [a0 + 0x10] = a2\n  4914: u64 [a0 + 0x8] = a3\n  4917: u64 [a0] = a1\n  4919: ret\n      : @94 (gas: 8)\n  4921: a0 = u64 [sp + 0x30]\n  4924: a1 = u64 [sp + 0x38]\n  4927: a2 = u64 [sp + 0x28]\n  4930: a3 = u64 [sp + 0x20]\n  4933: a1 = a1 | a2\n  4936: a0 = a0 | a3\n  4939: a0 = a0 | a1\n  4942: jump @101 if a0 != 0\n      : @95 (gas: 2)\n  4946: a0 = i32 [0x20004]\n  4951: jump @101 if a0 <=u 35\n      : @96 (gas: 4)\n  4956: i32 a0 = sp + 0x80\n  4960: a1 = 0x4\n  4963: ecalli 4 // 'call_data_load'\n  4965: fallthrough\n      : @97 (gas: 11)\n  4966: s1 = u64 [sp + 0x90]\n  4970: a2 = u64 [sp + 0x98]\n  4974: a0 = 0x100000000\n  4984: a0 = a0 ^ s1\n  4987: a0 = a0 | a2\n  4990: a1 = s1 >> 0x20\n  4993: a1 = a1 <u 0x1\n  4996: u64 [sp + 0x18] = a2\n  4999: a1 = 0 if a2 != 0\n  5001: a1 = 0 if a0 == 0\n  5003: jump @102 if a1 == 0\n      : @98 (gas: 57)\n  5007: a0 = u64 [sp + 0x88]\n  5011: u64 [sp + 0x10] = a0\n  5014: a0 = u64 [sp + 0x80]\n  5018: u64 [sp + 0x8] = a0\n  5021: u64 [sp + 120] = 0\n  5024: u64 [sp + 112] = 0\n  5027: u64 [sp + 104] = 0\n  5030: u64 [sp + 96] = 0x2\n  5034: u64 [sp + 152] = 0\n  5038: u64 [sp + 144] = 0\n  5042: u64 [sp + 136] = 0\n  5046: u64 [sp + 128] = 0\n  5050: u32 [sp + 64] = 0x20\n  5054: i32 a1 = sp + 0x60\n  5057: i32 a3 = sp + 0x80\n  5061: i32 a4 = sp + 0x40\n  5064: a2 = 0xffffffffffffffff\n  5067: a0 = 0\n  5069: ecalli 7 // 'get_storage'\n  5071: t1 = u64 [sp + 0x98]\n  5075: a1 = u8 [sp + 0x80]\n  5079: a2 = u64 [sp + 0x90]\n  5083: a3 = u64 [sp + 0x8]\n  5086: a5 = a3 >> 0x38\n  5089: a0 = u64 [sp + 0x10]\n  5092: a4 = a0 << 0x8\n  5095: t0 = a4 | a5\n  5098: a4 = s1 >> 0x38\n  5101: a5 = u64 [sp + 0x18]\n  5104: a5 = a5 << 0x8\n  5107: a4 = a4 | a5\n  5110: a5 = a0 >> 0x38\n  5113: s1 = s1 << 0x8\n  5116: a5 = a5 | s1\n  5119: s1 = a3 << 0x8\n  5122: a2 = a2 >> 0x28\n  5125: a2 = a2 << 0x28\n  5128: a1 = a1 | s1\n  5131: a2 = a2 | a5\n  5134: a0 = t1 | a4\n  5137: u64 [sp + 120] = 0\n  5140: u64 [sp + 112] = 0\n  5143: u64 [sp + 104] = 0\n  5146: u64 [sp + 96] = 0x2\n  5150: u64 [sp + 0x98] = a0\n  5154: u64 [sp + 0x90] = a2\n  5158: u64 [sp + 0x88] = t0\n  5162: u64 [sp + 0x80] = a1\n  5166: i32 a1 = sp + 0x60\n  5169: i32 a3 = sp + 0x80\n  5173: a2 = 0xffffffffffffffff\n  5176: a4 = 0x20\n  5179: a0 = 0\n  5181: ecalli 14 // 'set_storage'\n  5183: a0 = 0x40\n  5186: a1 = 0x20\n  5189: ra = 80, jump @0\n      : @99 [@dyn 40] (gas: 100)\n  5194: a1 = u8 [a0 + 0x11]\n  5197: a2 = u8 [a0 + 0x10]\n  5200: a3 = u8 [a0 + 0x12]\n  5203: a4 = u8 [a0 + 0x13]\n  5206: a1 = a1 << 0x8\n  5209: a1 = a1 | a2\n  5212: a3 = a3 << 0x10\n  5215: a4 = a4 << 0x18\n  5218: a3 = a3 | a4\n  5221: a1 = a1 | a3\n  5224: a2 = u8 [a0 + 0x15]\n  5227: a3 = u8 [a0 + 0x14]\n  5230: a4 = u8 [a0 + 0x16]\n  5233: a5 = u8 [a0 + 0x17]\n  5236: a2 = a2 << 0x8\n  5239: a2 = a2 | a3\n  5242: a4 = a4 << 0x10\n  5245: a5 = a5 << 0x18\n  5248: a4 = a4 | a5\n  5251: a2 = a2 | a4\n  5254: a2 = a2 << 0x20\n  5257: t0 = a2 | a1\n  5260: a2 = u8 [a0 + 0x1]\n  5263: a3 = u8 [a0]\n  5265: a4 = u8 [a0 + 0x2]\n  5268: a5 = u8 [a0 + 0x3]\n  5271: a2 = a2 << 0x8\n  5274: a2 = a2 | a3\n  5277: a4 = a4 << 0x10\n  5280: a5 = a5 << 0x18\n  5283: a4 = a4 | a5\n  5286: a2 = a2 | a4\n  5289: a3 = u8 [a0 + 0x5]\n  5292: a4 = u8 [a0 + 0x4]\n  5295: a5 = u8 [a0 + 0x6]\n  5298: s1 = u8 [a0 + 0x7]\n  5301: a3 = a3 << 0x8\n  5304: a3 = a3 | a4\n  5307: a5 = a5 << 0x10\n  5310: s1 = s1 << 0x18\n  5313: a5 = a5 | s1\n  5316: a3 = a3 | a5\n  5319: a3 = a3 << 0x20\n  5322: a2 = a2 | a3\n  5325: a3 = u8 [a0 + 0x19]\n  5328: a4 = u8 [a0 + 0x18]\n  5331: a5 = u8 [a0 + 0x1a]\n  5334: s1 = u8 [a0 + 0x1b]\n  5337: a3 = a3 << 0x8\n  5340: a3 = a3 | a4\n  5343: a5 = a5 << 0x10\n  5346: s1 = s1 << 0x18\n  5349: a5 = a5 | s1\n  5352: a3 = a3 | a5\n  5355: a4 = u8 [a0 + 0x1d]\n  5358: a5 = u8 [a0 + 0x1c]\n  5361: s1 = u8 [a0 + 0x1e]\n  5364: a1 = u8 [a0 + 0x1f]\n  5367: a4 = a4 << 0x8\n  5370: a4 = a4 | a5\n  5373: s1 = s1 << 0x10\n  5376: a1 = a1 << 0x18\n  5379: a1 = a1 | s1\n  5382: a1 = a1 | a4\n  5385: a1 = a1 << 0x20\n  5388: a3 = a3 | a1\n  5391: a1 = u8 [a0 + 0x9]\n  5394: a4 = u8 [a0 + 0x8]\n  5397: a5 = u8 [a0 + 0xa]\n  5400: s1 = u8 [a0 + 0xb]\n  5403: a1 = a1 << 0x8\n  5406: a1 = a1 | a4\n  5409: a5 = a5 << 0x10\n  5412: s1 = s1 << 0x18\n  5415: a5 = a5 | s1\n  5418: a1 = a1 | a5\n  5421: a4 = u8 [a0 + 0xd]\n  5424: a5 = u8 [a0 + 0xc]\n  5427: s1 = u8 [a0 + 0xe]\n  5430: a0 = u8 [a0 + 0xf]\n  5433: a4 = a4 << 0x8\n  5436: a4 = a4 | a5\n  5439: s1 = s1 << 0x10\n  5442: a0 = a0 << 0x18\n  5445: a0 = a0 | s1\n  5448: a0 = a0 | a4\n  5451: a0 = a0 << 0x20\n  5454: a0 = a0 | a1\n  5457: a1 = reverse a0\n  5459: a0 = reverse a3\n  5461: a2 = reverse a2\n  5463: a3 = reverse t0\n  5465: a2 = a2 | a3\n  5468: a3 = a0 | a1\n  5471: a3 = a3 | a2\n  5474: a3 = a3 >> 0x20\n  5477: a1 = a1 | a2\n  5480: a1 = a1 << 0x20\n  5483: a1 = a1 | a3\n  5486: jump @104 if a1 == 0\n      : @100 (gas: 1)\n  5489: trap\n      : @101 (gas: 4)\n  5490: a0 = 0\n  5492: a1 = 0\n  5494: ra = 0x52\n  5497: jump @0\n      : @102 (gas: 2)\n  5500: a0 = 0\n  5502: ra = 82, jump @0\n      : @103 [@dyn 41] (gas: 7)\n  5507: i32 a1 = a0 + 0\n  5509: a0 = 0x1\n  5512: a2 = 0\n  5514: ecalli 12 // 'seal_return'\n  5516: i32 a0 = a0 + 0\n  5518: ra = 0x54\n  5521: jump @0\n      : @104 (gas: 2)\n  5524: i32 a0 = a0 + 0\n  5526: ra = 84, jump @0\n      : @105 [@dyn 42] (gas: 6)\n  5531: i32 a1 = a0 + 0\n  5533: a0 = 0\n  5535: a2 = 0\n  5537: ra = 0x56\n  5540: ecalli 12 // 'seal_return'\n  5542: fallthrough\n      : @106 [@dyn 43] (gas: 1)\n  5543: ret\n      : @107 (gas: 7)\n  5545: sp = sp + 0xffffffffffffffa0\n  5548: u64 [sp + 0x58] = ra\n  5551: u64 [sp + 0x50] = s0\n  5554: s0 = sp + 0x60\n  5557: sp = sp & 0xffffffffffffffe0\n  5560: a0 = i32 [0x20004]\n  5565: jump @112 if a0 <=u 35\n      : @108 (gas: 43)\n  5570: i32 a0 = sp + 0x20\n  5573: a1 = 0x4\n  5576: ecalli 4 // 'call_data_load'\n  5578: a1 = u64 [sp + 0x20]\n  5581: a0 = u64 [sp + 0x28]\n  5584: a2 = u64 [sp + 0x30]\n  5587: a3 = u64 [sp + 0x38]\n  5590: u64 [sp + 0x18] = a3\n  5593: u64 [sp + 0x10] = a2\n  5596: u64 [sp + 0x8] = a0\n  5599: a0 = sp\n  5601: u64 [sp] = a1\n  5603: ra = 0x58\n  5606: sp = sp + 0xfffffffffffffec0\n  5610: u64 [sp + 0x138] = ra\n  5614: u64 [sp + 0x130] = s0\n  5618: u64 [sp + 0x128] = s1\n  5622: s0 = sp + 0x140\n  5626: sp = sp & 0xffffffffffffffe0\n  5629: a1 = u64 [a0 + 0x18]\n  5632: u64 [sp + 0x20] = a1\n  5635: a1 = u64 [a0 + 0x10]\n  5638: u64 [sp + 0x28] = a1\n  5641: a1 = u64 [a0 + 0x8]\n  5644: u64 [sp + 0x30] = a1\n  5647: a0 = u64 [a0]\n  5649: u64 [sp + 0x38] = a0\n  5652: u64 [sp + 248] = 0\n  5656: u64 [sp + 240] = 0\n  5660: u64 [sp + 232] = 0\n  5664: u64 [sp + 224] = 0x2\n  5669: u64 [sp + 280] = 0\n  5673: u64 [sp + 272] = 0\n  5677: u64 [sp + 264] = 0\n  5681: u64 [sp + 256] = 0\n  5685: u32 [sp + 192] = 0x20\n  5690: i32 a1 = sp + 0xe0\n  5694: i32 a3 = sp + 0x100\n  5698: i32 a4 = sp + 0xc0\n  5702: a2 = 0xffffffffffffffff\n  5705: a0 = 0\n  5707: ecalli 7 // 'get_storage'\n  5709: jump @214\n      : @109 [@dyn 44] (gas: 3)\n  5712: a0 = 0x40\n  5715: a1 = 0x20\n  5718: ra = 90, jump @0\n      : @110 [@dyn 45] (gas: 100)\n  5723: a1 = u8 [a0 + 0x11]\n  5726: a2 = u8 [a0 + 0x10]\n  5729: a3 = u8 [a0 + 0x12]\n  5732: a4 = u8 [a0 + 0x13]\n  5735: a1 = a1 << 0x8\n  5738: a1 = a1 | a2\n  5741: a3 = a3 << 0x10\n  5744: a4 = a4 << 0x18\n  5747: a3 = a3 | a4\n  5750: a1 = a1 | a3\n  5753: a2 = u8 [a0 + 0x15]\n  5756: a3 = u8 [a0 + 0x14]\n  5759: a4 = u8 [a0 + 0x16]\n  5762: a5 = u8 [a0 + 0x17]\n  5765: a2 = a2 << 0x8\n  5768: a2 = a2 | a3\n  5771: a4 = a4 << 0x10\n  5774: a5 = a5 << 0x18\n  5777: a4 = a4 | a5\n  5780: a2 = a2 | a4\n  5783: a2 = a2 << 0x20\n  5786: t0 = a2 | a1\n  5789: a2 = u8 [a0 + 0x1]\n  5792: a3 = u8 [a0]\n  5794: a4 = u8 [a0 + 0x2]\n  5797: a5 = u8 [a0 + 0x3]\n  5800: a2 = a2 << 0x8\n  5803: a2 = a2 | a3\n  5806: a4 = a4 << 0x10\n  5809: a5 = a5 << 0x18\n  5812: a4 = a4 | a5\n  5815: a2 = a2 | a4\n  5818: a3 = u8 [a0 + 0x5]\n  5821: a4 = u8 [a0 + 0x4]\n  5824: a5 = u8 [a0 + 0x6]\n  5827: a1 = u8 [a0 + 0x7]\n  5830: a3 = a3 << 0x8\n  5833: a3 = a3 | a4\n  5836: a5 = a5 << 0x10\n  5839: a1 = a1 << 0x18\n  5842: a1 = a1 | a5\n  5845: a1 = a1 | a3\n  5848: a1 = a1 << 0x20\n  5851: t1 = a1 | a2\n  5854: a1 = u8 [a0 + 0x19]\n  5857: a3 = u8 [a0 + 0x18]\n  5860: a4 = u8 [a0 + 0x1a]\n  5863: a5 = u8 [a0 + 0x1b]\n  5866: a1 = a1 << 0x8\n  5869: a1 = a1 | a3\n  5872: a4 = a4 << 0x10\n  5875: a5 = a5 << 0x18\n  5878: a4 = a4 | a5\n  5881: a1 = a1 | a4\n  5884: a3 = u8 [a0 + 0x1d]\n  5887: a4 = u8 [a0 + 0x1c]\n  5890: a5 = u8 [a0 + 0x1e]\n  5893: a2 = u8 [a0 + 0x1f]\n  5896: a3 = a3 << 0x8\n  5899: a3 = a3 | a4\n  5902: a5 = a5 << 0x10\n  5905: a2 = a2 << 0x18\n  5908: a2 = a2 | a5\n  5911: a2 = a2 | a3\n  5914: a2 = a2 << 0x20\n  5917: a3 = a2 | a1\n  5920: a1 = u8 [a0 + 0x9]\n  5923: a2 = u8 [a0 + 0x8]\n  5926: a4 = u8 [a0 + 0xa]\n  5929: a5 = u8 [a0 + 0xb]\n  5932: a1 = a1 << 0x8\n  5935: a1 = a1 | a2\n  5938: a4 = a4 << 0x10\n  5941: a5 = a5 << 0x18\n  5944: a4 = a4 | a5\n  5947: a1 = a1 | a4\n  5950: a2 = u8 [a0 + 0xd]\n  5953: a4 = u8 [a0 + 0xc]\n  5956: a5 = u8 [a0 + 0xe]\n  5959: a0 = u8 [a0 + 0xf]\n  5962: a2 = a2 << 0x8\n  5965: a2 = a2 | a4\n  5968: a5 = a5 << 0x10\n  5971: a0 = a0 << 0x18\n  5974: a0 = a0 | a5\n  5977: a0 = a0 | a2\n  5980: a0 = a0 << 0x20\n  5983: a0 = a0 | a1\n  5986: a1 = reverse a0\n  5988: a0 = reverse a3\n  5990: a2 = reverse t1\n  5992: a3 = reverse t0\n  5994: a2 = a2 | a3\n  5997: a3 = a0 | a1\n  6000: a3 = a3 | a2\n  6003: a3 = a3 >> 0x20\n  6006: a1 = a1 | a2\n  6009: a1 = a1 << 0x20\n  6012: a1 = a1 | a3\n  6015: jump @114 if a1 == 0\n      : @111 (gas: 1)\n  6018: trap\n      : @112 (gas: 3)\n  6019: a0 = 0\n  6021: a1 = 0\n  6023: ra = 92, jump @0\n      : @113 [@dyn 46] (gas: 7)\n  6028: i32 a1 = a0 + 0\n  6030: a0 = 0x1\n  6033: a2 = 0\n  6035: ecalli 12 // 'seal_return'\n  6037: i32 a0 = a0 + 0\n  6039: ra = 0x5e\n  6042: jump @0\n      : @114 (gas: 2)\n  6045: i32 a0 = a0 + 0\n  6047: ra = 94, jump @0\n      : @115 [@dyn 47] (gas: 6)\n  6052: i32 a1 = a0 + 0\n  6054: a0 = 0\n  6056: a2 = 0\n  6058: ra = 0x60\n  6061: ecalli 12 // 'seal_return'\n  6063: fallthrough\n      : @116 [@dyn 48] (gas: 6)\n  6064: a1 = u8 [a1]\n  6066: u64 [a0 + 24] = 0\n  6069: u64 [a0 + 16] = 0\n  6072: u64 [a0 + 8] = 0\n  6075: u64 [a0] = a1\n  6077: ret\n      : @117 (gas: 8)\n  6079: a0 = u64 [sp + 0x30]\n  6082: a1 = u64 [sp + 0x38]\n  6085: a2 = u64 [sp + 0x28]\n  6088: a3 = u64 [sp + 0x20]\n  6091: a1 = a1 | a2\n  6094: a0 = a0 | a3\n  6097: a0 = a0 | a1\n  6100: jump @122 if a0 != 0\n      : @118 (gas: 2)\n  6104: a0 = i32 [0x20004]\n  6109: jump @122 if a0 <=u 3\n      : @119 (gas: 20)\n  6114: u64 [sp + 88] = 0\n  6117: u64 [sp + 80] = 0\n  6120: u64 [sp + 72] = 0\n  6123: u64 [sp + 64] = 0x2\n  6127: u64 [sp + 120] = 0\n  6130: u64 [sp + 112] = 0\n  6133: u64 [sp + 104] = 0\n  6136: u64 [sp + 96] = 0\n  6139: u32 [sp + 128] = 0x20\n  6144: i32 a1 = sp + 0x40\n  6147: i32 a3 = sp + 0x60\n  6150: i32 a4 = sp + 0x80\n  6154: a2 = 0xffffffffffffffff\n  6157: a0 = 0\n  6159: ecalli 7 // 'get_storage'\n  6161: a0 = u64 [sp + 0x60]\n  6164: u64 [sp + 0x18] = a0\n  6167: a0 = 0x40\n  6170: a1 = 0x20\n  6173: ra = 98, jump @0\n      : @120 [@dyn 49] (gas: 100)\n  6178: a1 = u8 [a0 + 0x11]\n  6181: a2 = u8 [a0 + 0x10]\n  6184: a3 = u8 [a0 + 0x12]\n  6187: a4 = u8 [a0 + 0x13]\n  6190: a1 = a1 << 0x8\n  6193: a1 = a1 | a2\n  6196: a3 = a3 << 0x10\n  6199: a4 = a4 << 0x18\n  6202: a3 = a3 | a4\n  6205: a1 = a1 | a3\n  6208: a2 = u8 [a0 + 0x15]\n  6211: a3 = u8 [a0 + 0x14]\n  6214: a4 = u8 [a0 + 0x16]\n  6217: a5 = u8 [a0 + 0x17]\n  6220: a2 = a2 << 0x8\n  6223: a2 = a2 | a3\n  6226: a4 = a4 << 0x10\n  6229: a5 = a5 << 0x18\n  6232: a4 = a4 | a5\n  6235: a2 = a2 | a4\n  6238: a2 = a2 << 0x20\n  6241: t0 = a2 | a1\n  6244: a2 = u8 [a0 + 0x1]\n  6247: a3 = u8 [a0]\n  6249: a4 = u8 [a0 + 0x2]\n  6252: a5 = u8 [a0 + 0x3]\n  6255: a2 = a2 << 0x8\n  6258: a2 = a2 | a3\n  6261: a4 = a4 << 0x10\n  6264: a5 = a5 << 0x18\n  6267: a4 = a4 | a5\n  6270: a2 = a2 | a4\n  6273: a3 = u8 [a0 + 0x5]\n  6276: a4 = u8 [a0 + 0x4]\n  6279: a5 = u8 [a0 + 0x6]\n  6282: s1 = u8 [a0 + 0x7]\n  6285: a3 = a3 << 0x8\n  6288: a3 = a3 | a4\n  6291: a5 = a5 << 0x10\n  6294: s1 = s1 << 0x18\n  6297: a5 = a5 | s1\n  6300: a3 = a3 | a5\n  6303: a3 = a3 << 0x20\n  6306: a2 = a2 | a3\n  6309: a3 = u8 [a0 + 0x19]\n  6312: a4 = u8 [a0 + 0x18]\n  6315: a5 = u8 [a0 + 0x1a]\n  6318: s1 = u8 [a0 + 0x1b]\n  6321: a3 = a3 << 0x8\n  6324: a3 = a3 | a4\n  6327: a5 = a5 << 0x10\n  6330: s1 = s1 << 0x18\n  6333: a5 = a5 | s1\n  6336: a3 = a3 | a5\n  6339: a4 = u8 [a0 + 0x1d]\n  6342: a5 = u8 [a0 + 0x1c]\n  6345: s1 = u8 [a0 + 0x1e]\n  6348: a1 = u8 [a0 + 0x1f]\n  6351: a4 = a4 << 0x8\n  6354: a4 = a4 | a5\n  6357: s1 = s1 << 0x10\n  6360: a1 = a1 << 0x18\n  6363: a1 = a1 | s1\n  6366: a1 = a1 | a4\n  6369: a1 = a1 << 0x20\n  6372: a3 = a3 | a1\n  6375: a1 = u8 [a0 + 0x9]\n  6378: a4 = u8 [a0 + 0x8]\n  6381: a5 = u8 [a0 + 0xa]\n  6384: s1 = u8 [a0 + 0xb]\n  6387: a1 = a1 << 0x8\n  6390: a1 = a1 | a4\n  6393: a5 = a5 << 0x10\n  6396: s1 = s1 << 0x18\n  6399: a5 = a5 | s1\n  6402: a1 = a1 | a5\n  6405: a4 = u8 [a0 + 0xd]\n  6408: a5 = u8 [a0 + 0xc]\n  6411: s1 = u8 [a0 + 0xe]\n  6414: a0 = u8 [a0 + 0xf]\n  6417: a4 = a4 << 0x8\n  6420: a4 = a4 | a5\n  6423: s1 = s1 << 0x10\n  6426: a0 = a0 << 0x18\n  6429: a0 = a0 | s1\n  6432: a0 = a0 | a4\n  6435: a0 = a0 << 0x20\n  6438: a0 = a0 | a1\n  6441: a1 = reverse a0\n  6443: a0 = reverse a3\n  6445: a2 = reverse a2\n  6447: a3 = reverse t0\n  6449: a2 = a2 | a3\n  6452: a3 = a0 | a1\n  6455: a3 = a3 | a2\n  6458: a3 = a3 >> 0x20\n  6461: a1 = a1 | a2\n  6464: a1 = a1 << 0x20\n  6467: a1 = a1 | a3\n  6470: jump @124 if a1 == 0\n      : @121 (gas: 1)\n  6473: trap\n      : @122 (gas: 3)\n  6474: a0 = 0\n  6476: a1 = 0\n  6478: ra = 100, jump @0\n      : @123 [@dyn 50] (gas: 5)\n  6483: i32 a1 = a0 + 0\n  6485: a0 = 0x1\n  6488: a2 = 0\n  6490: ecalli 12 // 'seal_return'\n  6492: fallthrough\n      : @124 (gas: 6)\n  6493: a1 = u8 [sp + 0x18]\n  6496: s1 = a1 >u 0\n  6498: i32 a0 = a0 + 0\n  6500: u64 [sp + 0x18] = a0\n  6503: a1 = 0x20\n  6506: ra = 102, jump @0\n      : @125 [@dyn 51] (gas: 35)\n  6511: u8 [a0 + 0x1f] = s1\n  6514: u8 [a0 + 30] = 0\n  6517: u8 [a0 + 29] = 0\n  6520: u8 [a0 + 28] = 0\n  6523: u8 [a0 + 27] = 0\n  6526: u8 [a0 + 26] = 0\n  6529: u8 [a0 + 25] = 0\n  6532: u8 [a0 + 24] = 0\n  6535: u8 [a0 + 23] = 0\n  6538: u8 [a0 + 22] = 0\n  6541: u8 [a0 + 21] = 0\n  6544: u8 [a0 + 20] = 0\n  6547: u8 [a0 + 19] = 0\n  6550: u8 [a0 + 18] = 0\n  6553: u8 [a0 + 17] = 0\n  6556: u8 [a0 + 16] = 0\n  6559: u8 [a0 + 15] = 0\n  6562: u8 [a0 + 14] = 0\n  6565: u8 [a0 + 13] = 0\n  6568: u8 [a0 + 12] = 0\n  6571: u8 [a0 + 11] = 0\n  6574: u8 [a0 + 10] = 0\n  6577: u8 [a0 + 9] = 0\n  6580: u8 [a0 + 8] = 0\n  6583: u8 [a0 + 7] = 0\n  6586: u8 [a0 + 6] = 0\n  6589: u8 [a0 + 5] = 0\n  6592: u8 [a0 + 4] = 0\n  6595: u8 [a0 + 3] = 0\n  6598: u8 [a0 + 2] = 0\n  6601: u8 [a0 + 1] = 0\n  6604: u8 [a0 + 0] = 0\n  6606: a1 = 0x20\n  6609: a0 = u64 [sp + 0x18]\n  6612: ra = 104, jump @0\n      : @126 [@dyn 52] (gas: 6)\n  6617: i32 a1 = a0 + 0\n  6619: a2 = 0x20\n  6622: a0 = 0\n  6624: ra = 0x6a\n  6627: ecalli 12 // 'seal_return'\n  6629: fallthrough\n      : @127 [@dyn 53] (gas: 5)\n  6630: sp = sp + 0xfffffffffffffff8\n  6633: u64 [sp] = ra\n  6635: a0 = 0\n  6637: a1 = 0\n  6639: ra = 108, jump @0\n      : @128 [@dyn 54] (gas: 6)\n  6644: i32 a1 = a0 + 0\n  6646: a0 = 0x1\n  6649: a2 = 0\n  6651: ra = 0x6e\n  6654: ecalli 12 // 'seal_return'\n  6656: fallthrough\n      : @129 [@dyn 55] (gas: 19)\n  6657: a2 = u64 [a1 + 0x8]\n  6660: a3 = u64 [a1]\n  6662: a4 = u64 [a1 + 0x18]\n  6665: a1 = u64 [a1 + 0x10]\n  6668: a5 = a2 << 0x38\n  6671: a3 = a3 >> 0x8\n  6674: a3 = a3 | a5\n  6677: a5 = a1 << 0x38\n  6680: a2 = a2 >> 0x8\n  6683: a2 = a2 | a5\n  6686: a5 = a4 << 0x38\n  6689: a1 = a1 >> 0x8\n  6692: a1 = a1 | a5\n  6695: a4 = a4 >> 0x8\n  6698: u64 [a0 + 0x18] = a4\n  6701: u64 [a0 + 0x10] = a1\n  6704: u64 [a0 + 0x8] = a2\n  6707: u64 [a0] = a3\n  6709: ret\n      : @130 (gas: 17)\n  6711: sp = sp + 0xffffffffffffffa0\n  6714: u64 [sp + 0x58] = ra\n  6717: u64 [sp + 0x50] = s0\n  6720: u64 [sp + 0x48] = s1\n  6723: a3 = u64 [a1 + 0x18]\n  6726: a4 = u64 [a1 + 0x10]\n  6729: a5 = u64 [a1 + 0x8]\n  6732: s1 = u64 [a1]\n  6734: a1 = a5 | a3\n  6737: a2 = s1 | a4\n  6740: a2 = a2 | a1\n  6743: a2 = a2 >> 0x20\n  6746: a1 = a1 | a4\n  6749: a1 = a1 << 0x20\n  6752: a1 = a1 | a2\n  6755: u64 [sp + 0x28] = a0\n  6758: jump @137 if a1 != 0\n      : @131 (gas: 19)\n  6762: a0 = s1 + 0x20\n  6765: u64 [sp + 0x30] = a0\n  6768: a0 = a0 <u s1\n  6771: a1 = a5 + a0\n  6774: u64 [sp + 0x40] = a1\n  6777: u64 [sp + 0x8] = a5\n  6780: s0 = a1 <u a5\n  6783: s0 = a0 if a0 == 0\n  6786: s0 = s0 + a4\n  6789: u64 [sp + 0x10] = a4\n  6792: a0 = s0 <u a4\n  6795: u64 [sp + 0x18] = a3\n  6798: a0 = a0 + a3\n  6801: u64 [sp + 0x38] = a0\n  6804: u64 [sp] = s1\n  6806: i32 a0 = s1 + 0\n  6808: a1 = 0x20\n  6811: s1 = 0x20\n  6814: ra = 112, jump @0\n      : @132 [@dyn 56] (gas: 45)\n  6819: u8 [a0 + 0x1f] = s1\n  6822: a1 = u64 [sp + 0x30]\n  6825: s1 = a1\n  6827: a1 = a1 | s0\n  6830: a2 = u64 [sp + 0x40]\n  6833: a4 = u64 [sp + 0x38]\n  6836: a2 = a2 | a4\n  6839: a1 = a1 | a2\n  6842: a1 = a1 >> 0x20\n  6845: u64 [sp + 0x20] = s0\n  6848: a2 = a2 | s0\n  6851: a2 = a2 << 0x20\n  6854: a1 = a1 | a2\n  6857: u8 [a0 + 30] = 0\n  6860: u8 [a0 + 29] = 0\n  6863: u8 [a0 + 28] = 0\n  6866: u8 [a0 + 27] = 0\n  6869: u8 [a0 + 26] = 0\n  6872: u8 [a0 + 25] = 0\n  6875: u8 [a0 + 24] = 0\n  6878: u8 [a0 + 23] = 0\n  6881: u8 [a0 + 22] = 0\n  6884: u8 [a0 + 21] = 0\n  6887: u8 [a0 + 20] = 0\n  6890: u8 [a0 + 19] = 0\n  6893: u8 [a0 + 18] = 0\n  6896: u8 [a0 + 17] = 0\n  6899: u8 [a0 + 16] = 0\n  6902: u8 [a0 + 15] = 0\n  6905: u8 [a0 + 14] = 0\n  6908: u8 [a0 + 13] = 0\n  6911: u8 [a0 + 12] = 0\n  6914: u8 [a0 + 11] = 0\n  6917: u8 [a0 + 10] = 0\n  6920: u8 [a0 + 9] = 0\n  6923: u8 [a0 + 8] = 0\n  6926: u8 [a0 + 7] = 0\n  6929: u8 [a0 + 6] = 0\n  6932: u8 [a0 + 5] = 0\n  6935: u8 [a0 + 4] = 0\n  6938: u8 [a0 + 3] = 0\n  6941: u8 [a0 + 2] = 0\n  6944: u8 [a0 + 1] = 0\n  6947: u8 [a0 + 0] = 0\n  6949: jump @137 if a1 != 0\n      : @133 (gas: 4)\n  6953: i32 s0 = s1 + 0\n  6955: a1 = 0x20\n  6958: a0 = s0\n  6960: ra = 114, jump @0\n      : @134 [@dyn 57] (gas: 41)\n  6965: u8 [a0 + 31] = 0x11\n  6969: u8 [a0 + 30] = 0\n  6972: u8 [a0 + 29] = 0\n  6975: u8 [a0 + 28] = 0\n  6978: u8 [a0 + 27] = 0\n  6981: u8 [a0 + 26] = 0\n  6984: u8 [a0 + 25] = 0\n  6987: u8 [a0 + 24] = 0\n  6990: u8 [a0 + 23] = 0\n  6993: u8 [a0 + 22] = 0\n  6996: u8 [a0 + 21] = 0\n  6999: u8 [a0 + 20] = 0\n  7002: u8 [a0 + 19] = 0\n  7005: u8 [a0 + 18] = 0\n  7008: u8 [a0 + 17] = 0\n  7011: u8 [a0 + 16] = 0\n  7014: u8 [a0 + 15] = 0\n  7017: u8 [a0 + 14] = 0\n  7020: u8 [a0 + 13] = 0\n  7023: u8 [a0 + 12] = 0\n  7026: u8 [a0 + 11] = 0\n  7029: u8 [a0 + 10] = 0\n  7032: u8 [a0 + 9] = 0\n  7035: u8 [a0 + 8] = 0\n  7038: u8 [a0 + 7] = 0\n  7041: u8 [a0 + 6] = 0\n  7044: u8 [a0 + 5] = 0\n  7047: u8 [a0 + 4] = 0\n  7050: u8 [a0 + 3] = 0\n  7053: u8 [a0 + 2] = 0\n  7056: u8 [a0 + 1] = 0\n  7059: a1 = u64 [sp + 0x20]\n  7062: a2 = u64 [sp + 0x38]\n  7065: a1 = a1 | a2\n  7068: a2 = 0xffffffe0\n  7078: a2 = s1 <u a2\n  7081: a3 = u64 [sp + 0x40]\n  7084: a2 = 0 if a3 != 0\n  7086: a2 = 0 if a1 != 0\n  7088: u8 [a0 + 0] = 0\n  7090: jump @137 if a2 == 0\n      : @135 (gas: 3)\n  7094: i32 a0 = s0 + 0x20\n  7097: a1 = 0x20\n  7100: ra = 116, jump @0\n      : @136 [@dyn 58] (gas: 55)\n  7105: u8 [a0 + 31] = 0\n  7108: u8 [a0 + 30] = 0\n  7111: u8 [a0 + 29] = 0\n  7114: u8 [a0 + 28] = 0\n  7117: u8 [a0 + 27] = 0\n  7120: u8 [a0 + 26] = 0\n  7123: u8 [a0 + 25] = 0\n  7126: u8 [a0 + 24] = 0\n  7129: u8 [a0 + 23] = 0\n  7132: u8 [a0 + 22] = 0\n  7135: u8 [a0 + 21] = 0\n  7138: u8 [a0 + 20] = 0\n  7141: u8 [a0 + 19] = 0\n  7144: u8 [a0 + 18] = 0\n  7147: u8 [a0 + 17] = 0\n  7150: u8 [a0 + 16] = 0x72\n  7154: u8 [a0 + 15] = 0x65\n  7158: u8 [a0 + 14] = 0x6e\n  7162: u8 [a0 + 13] = 0x77\n  7166: u8 [a0 + 12] = 0x6f\n  7170: u8 [a0 + 11] = 0x20\n  7174: a5 = 0x74\n  7177: u8 [a0 + 0xa] = a5\n  7180: u8 [a0 + 9] = 0x6f\n  7184: u8 [a0 + 8] = 0x6e\n  7188: u8 [a0 + 7] = 0x20\n  7192: u8 [a0 + 6] = 0x65\n  7196: u8 [a0 + 5] = 0x72\n  7200: u8 [a0 + 4] = 0x61\n  7204: u8 [a0 + 3] = 0x20\n  7208: u8 [a0 + 2] = 0x75\n  7212: u8 [a0 + 1] = 0x6f\n  7216: u8 [a0 + 0] = 0x79\n  7219: a1 = u64 [sp]\n  7221: a0 = a1 + 0x60\n  7224: a1 = a0 <u a1\n  7227: a3 = u64 [sp + 0x8]\n  7230: a2 = a3 + a1\n  7233: a3 = a2 <u a3\n  7236: a3 = a1 if a1 == 0\n  7239: a1 = u64 [sp + 0x10]\n  7242: a3 = a3 + a1\n  7245: a1 = a3 <u a1\n  7248: a4 = u64 [sp + 0x18]\n  7251: a1 = a1 + a4\n  7254: a4 = u64 [sp + 0x28]\n  7257: u64 [a4] = a0\n  7259: u64 [a4 + 0x8] = a2\n  7262: u64 [a4 + 0x10] = a3\n  7265: u64 [a4 + 0x18] = a1\n  7268: ra = u64 [sp + 0x58]\n  7271: s0 = u64 [sp + 0x50]\n  7274: s1 = u64 [sp + 0x48]\n  7277: sp = sp + 0x60\n  7280: ret\n      : @137 (gas: 1)\n  7282: trap\n      : @138 [@dyn 59] (gas: 130)\n  7283: a1 = u8 [a0 + 0x19]\n  7286: a2 = u8 [a0 + 0x18]\n  7289: a3 = u8 [a0 + 0x1a]\n  7292: a4 = u8 [a0 + 0x1b]\n  7295: a1 = a1 << 0x8\n  7298: a1 = a1 | a2\n  7301: a3 = a3 << 0x10\n  7304: a4 = a4 << 0x18\n  7307: a3 = a3 | a4\n  7310: a1 = a1 | a3\n  7313: a2 = u8 [a0 + 0x1d]\n  7316: a3 = u8 [a0 + 0x1c]\n  7319: a4 = u8 [a0 + 0x1e]\n  7322: a5 = u8 [a0 + 0x1f]\n  7325: a2 = a2 << 0x8\n  7328: a2 = a2 | a3\n  7331: a4 = a4 << 0x10\n  7334: a5 = a5 << 0x18\n  7337: a4 = a4 | a5\n  7340: a2 = a2 | a4\n  7343: a2 = a2 << 0x20\n  7346: t0 = a2 | a1\n  7349: a2 = u8 [a0 + 0x11]\n  7352: a3 = u8 [a0 + 0x10]\n  7355: a4 = u8 [a0 + 0x12]\n  7358: a5 = u8 [a0 + 0x13]\n  7361: a2 = a2 << 0x8\n  7364: a2 = a2 | a3\n  7367: a4 = a4 << 0x10\n  7370: a5 = a5 << 0x18\n  7373: a4 = a4 | a5\n  7376: a2 = a2 | a4\n  7379: a3 = u8 [a0 + 0x15]\n  7382: a4 = u8 [a0 + 0x14]\n  7385: a5 = u8 [a0 + 0x16]\n  7388: s1 = u8 [a0 + 0x17]\n  7391: a3 = a3 << 0x8\n  7394: a3 = a3 | a4\n  7397: a5 = a5 << 0x10\n  7400: s1 = s1 << 0x18\n  7403: a5 = a5 | s1\n  7406: a3 = a3 | a5\n  7409: a3 = a3 << 0x20\n  7412: a2 = a2 | a3\n  7415: a3 = u8 [a0 + 0x9]\n  7418: a4 = u8 [a0 + 0x8]\n  7421: a5 = u8 [a0 + 0xa]\n  7424: s1 = u8 [a0 + 0xb]\n  7427: a3 = a3 << 0x8\n  7430: a3 = a3 | a4\n  7433: a5 = a5 << 0x10\n  7436: s1 = s1 << 0x18\n  7439: a5 = a5 | s1\n  7442: a3 = a3 | a5\n  7445: a4 = u8 [a0 + 0xd]\n  7448: a5 = u8 [a0 + 0xc]\n  7451: s1 = u8 [a0 + 0xe]\n  7454: a1 = u8 [a0 + 0xf]\n  7457: a4 = a4 << 0x8\n  7460: a4 = a4 | a5\n  7463: s1 = s1 << 0x10\n  7466: a1 = a1 << 0x18\n  7469: a1 = a1 | s1\n  7472: a1 = a1 | a4\n  7475: a1 = a1 << 0x20\n  7478: a3 = a3 | a1\n  7481: a1 = u8 [a0 + 0x1]\n  7484: a4 = u8 [a0]\n  7486: a5 = u8 [a0 + 0x2]\n  7489: s1 = u8 [a0 + 0x3]\n  7492: a1 = a1 << 0x8\n  7495: a1 = a1 | a4\n  7498: a5 = a5 << 0x10\n  7501: s1 = s1 << 0x18\n  7504: a5 = a5 | s1\n  7507: a1 = a1 | a5\n  7510: a4 = u8 [a0 + 0x5]\n  7513: a5 = u8 [a0 + 0x4]\n  7516: s1 = u8 [a0 + 0x6]\n  7519: a0 = u8 [a0 + 0x7]\n  7522: a4 = a4 << 0x8\n  7525: a4 = a4 | a5\n  7528: s1 = s1 << 0x10\n  7531: a0 = a0 << 0x18\n  7534: a0 = a0 | s1\n  7537: a0 = a0 | a4\n  7540: a0 = a0 << 0x20\n  7543: a0 = a0 | a1\n  7546: t1 = reverse a0\n  7548: t2 = reverse a3\n  7550: s1 = reverse a2\n  7552: a5 = reverse t0\n  7554: a1 = u64 [sp + 0x18]\n  7557: a0 = a1 + 0x1f\n  7560: a1 = a0 <u a1\n  7563: a3 = u64 [sp + 0x20]\n  7566: a2 = a3 + a1\n  7569: a3 = a2 <u a3\n  7572: a3 = a1 if a1 == 0\n  7575: a1 = u64 [sp + 0x28]\n  7578: a3 = a3 + a1\n  7581: a1 = a3 <u a1\n  7584: a4 = u64 [sp + 0x30]\n  7587: a1 = a1 + a4\n  7590: a0 = a0 & 0xffffffffffffffe0\n  7593: a0 = a0 + a5\n  7596: u64 [sp + 0x28] = a5\n  7599: u64 [sp + 0x10] = a0\n  7602: a4 = a0 <u a5\n  7605: a2 = a2 + s1\n  7608: a5 = a2 + a4\n  7611: a2 = a5 ^ s1\n  7614: u64 [sp + 0x30] = s1\n  7617: a0 = a5 <u s1\n  7620: a0 = a4 if a2 == 0\n  7623: a3 = a3 + t2\n  7626: a4 = a3 + a0\n  7629: s1 = a4 <u a3\n  7632: a2 = a3 <u t2\n  7635: a1 = a1 + t1\n  7638: a1 = a1 + a2\n  7641: s1 = s1 + a1\n  7644: a1 = a4 >u 0\n  7646: a2 = s1 >u 0\n  7648: a2 = a1 if s1 == 0\n  7651: a1 = a4 | s1\n  7654: u64 [sp + 0x8] = a5\n  7657: a3 = a5 >u 0\n  7659: a3 = a2 if a1 != 0\n  7662: jump @142 if a3 != 0\n      : @139 (gas: 8)\n  7666: a1 = a4 <u t2\n  7669: a2 = s1 ^ t1\n  7672: a3 = s1 <u t1\n  7675: a3 = a1 if a2 == 0\n  7678: a1 = a4 ^ t2\n  7681: a1 = a1 | a2\n  7684: a0 = a3 if a1 != 0\n  7687: jump @142 if a0 != 0\n      : @140 (gas: 6)\n  7691: a0 = 0x40\n  7694: a1 = 0x20\n  7697: u64 [sp + 0x20] = t2\n  7700: u64 [sp + 0x18] = t1\n  7703: u64 [sp] = a4\n  7705: ra = 120, jump @0\n      : @141 [@dyn 60] (gas: 82)\n  7710: a1 = reverse s1\n  7712: a2 = u64 [sp]\n  7714: a2 = reverse a2\n  7716: a3 = u64 [sp + 0x8]\n  7719: a3 = reverse a3\n  7721: a4 = u64 [sp + 0x10]\n  7724: a4 = reverse a4\n  7726: u8 [a0 + 0x18] = a4\n  7729: a5 = a4 >> 0x38\n  7732: u8 [a0 + 0x1f] = a5\n  7735: a5 = a4 >> 0x30\n  7738: u8 [a0 + 0x1e] = a5\n  7741: a5 = a4 >> 0x28\n  7744: u8 [a0 + 0x1d] = a5\n  7747: a5 = a4 >> 0x20\n  7750: u8 [a0 + 0x1c] = a5\n  7753: a5 = a4 >> 0x18\n  7756: u8 [a0 + 0x1b] = a5\n  7759: a5 = a4 >> 0x10\n  7762: u8 [a0 + 0x1a] = a5\n  7765: a4 = a4 >> 0x8\n  7768: u8 [a0 + 0x19] = a4\n  7771: u8 [a0 + 0x10] = a3\n  7774: a4 = a3 >> 0x38\n  7777: u8 [a0 + 0x17] = a4\n  7780: a4 = a3 >> 0x30\n  7783: u8 [a0 + 0x16] = a4\n  7786: a4 = a3 >> 0x28\n  7789: u8 [a0 + 0x15] = a4\n  7792: a4 = a3 >> 0x20\n  7795: u8 [a0 + 0x14] = a4\n  7798: a4 = a3 >> 0x18\n  7801: u8 [a0 + 0x13] = a4\n  7804: a4 = a3 >> 0x10\n  7807: u8 [a0 + 0x12] = a4\n  7810: a3 = a3 >> 0x8\n  7813: u8 [a0 + 0x11] = a3\n  7816: u8 [a0 + 0x8] = a2\n  7819: a3 = a2 >> 0x38\n  7822: u8 [a0 + 0xf] = a3\n  7825: a3 = a2 >> 0x30\n  7828: u8 [a0 + 0xe] = a3\n  7831: a3 = a2 >> 0x28\n  7834: u8 [a0 + 0xd] = a3\n  7837: a3 = a2 >> 0x20\n  7840: u8 [a0 + 0xc] = a3\n  7843: a3 = a2 >> 0x18\n  7846: u8 [a0 + 0xb] = a3\n  7849: a3 = a2 >> 0x10\n  7852: u8 [a0 + 0xa] = a3\n  7855: a2 = a2 >> 0x8\n  7858: u8 [a0 + 0x9] = a2\n  7861: u8 [a0] = a1\n  7863: a2 = a1 >> 0x38\n  7866: u8 [a0 + 0x7] = a2\n  7869: a2 = a1 >> 0x30\n  7872: u8 [a0 + 0x6] = a2\n  7875: a2 = a1 >> 0x28\n  7878: u8 [a0 + 0x5] = a2\n  7881: a2 = a1 >> 0x20\n  7884: u8 [a0 + 0x4] = a2\n  7887: a2 = a1 >> 0x18\n  7890: u8 [a0 + 0x3] = a2\n  7893: a2 = a1 >> 0x10\n  7896: u8 [a0 + 0x2] = a2\n  7899: a1 = a1 >> 0x8\n  7902: u8 [a0 + 0x1] = a1\n  7905: a0 = u64 [sp + 0x38]\n  7908: a1 = u64 [sp + 0x28]\n  7911: u64 [a0] = a1\n  7913: a1 = u64 [sp + 0x18]\n  7916: u64 [a0 + 0x18] = a1\n  7919: a1 = u64 [sp + 0x30]\n  7922: u64 [a0 + 0x8] = a1\n  7925: a1 = u64 [sp + 0x20]\n  7928: u64 [a0 + 0x10] = a1\n  7931: sp = s0 + 0xffffffffffffff60\n  7935: ra = u64 [sp + 0x98]\n  7939: s0 = u64 [sp + 0x90]\n  7943: s1 = u64 [sp + 0x88]\n  7947: sp = sp + 0xa0\n  7951: ret\n      : @142 (gas: 8)\n  7953: u64 [sp + 112] = 0\n  7956: u64 [sp + 104] = 0\n  7959: u64 [sp + 96] = 0\n  7962: a0 = 0x4e487b7100000000\n  7972: a1 = sp + 0x60\n  7975: u64 [sp + 0x78] = a0\n  7978: a0 = 0\n  7980: ra = 122, jump @8\n      : @143 [@dyn 61] (gas: 7)\n  7985: u64 [sp + 88] = 0\n  7988: u64 [sp + 80] = 0\n  7991: u64 [sp + 64] = 0x41\n  7995: a0 = 0x4\n  7998: a1 = sp + 0x40\n  8001: u64 [sp + 72] = 0\n  8004: ra = 124, jump @8\n      : @144 [@dyn 62] (gas: 3)\n  8009: a1 = 0x24\n  8012: a0 = 0\n  8014: ra = 126, jump @0\n      : @145 [@dyn 63] (gas: 6)\n  8019: i32 a1 = a0 + 0\n  8021: a0 = 0x1\n  8024: a2 = 0x24\n  8027: ra = 0x80\n  8031: ecalli 12 // 'seal_return'\n  8033: fallthrough\n      : @146 [@dyn 64] (gas: 7)\n  8034: a3 = u64 [a1 + 0x18]\n  8037: a4 = u64 [a1 + 0x10]\n  8040: a2 = u64 [a1 + 0x8]\n  8043: a3 = a3 | a4\n  8046: a4 = a2 <u 0x1\n  8049: a4 = 0 if a3 != 0\n  8051: jump @148 if a4 == 0\n      : @147 (gas: 16)\n  8054: a1 = u64 [a1]\n  8056: a3 = a1 + 0x1f\n  8059: a1 = a3 <u a1\n  8062: a1 = a1 + a2\n  8065: a1 = a1 & 0x1\n  8068: a3 = a3 & 0xffffffffffffffe0\n  8071: a2 = a3 + 0x20\n  8074: a3 = a2 <u a3\n  8077: a4 = a1 + a3\n  8080: a1 = a4 <u a1\n  8083: a1 = a3 if a3 == 0\n  8086: u64 [a0 + 24] = 0\n  8089: u64 [a0] = a2\n  8091: u64 [a0 + 0x8] = a4\n  8094: u64 [a0 + 0x10] = a1\n  8097: ret\n      : @148 (gas: 13)\n  8099: sp = sp + 0xffffffffffffffb0\n  8102: u64 [sp + 0x48] = ra\n  8105: u64 [sp + 0x40] = s0\n  8108: s0 = sp + 0x50\n  8111: sp = sp & 0xfffffffffffffff0\n  8114: u64 [sp + 48] = 0\n  8117: u64 [sp + 40] = 0\n  8120: u64 [sp + 32] = 0\n  8123: a0 = 0x4e487b7100000000\n  8133: a1 = sp + 0x20\n  8136: u64 [sp + 0x38] = a0\n  8139: a0 = 0\n  8141: ra = 130, jump @8\n      : @149 [@dyn 65] (gas: 7)\n  8147: u64 [sp + 24] = 0\n  8150: u64 [sp + 16] = 0\n  8153: u64 [sp + 0] = 0x41\n  8156: a0 = 0x4\n  8159: a1 = sp\n  8161: u64 [sp + 8] = 0\n  8164: ra = 132, jump @8\n      : @150 [@dyn 66] (gas: 3)\n  8170: a1 = 0x24\n  8173: a0 = 0\n  8175: ra = 134, jump @0\n      : @151 [@dyn 67] (gas: 6)\n  8181: i32 a1 = a0 + 0\n  8183: a0 = 0x1\n  8186: a2 = 0x24\n  8189: ra = 0x88\n  8193: ecalli 12 // 'seal_return'\n  8195: fallthrough\n      : @152 [@dyn 68] (gas: 16)\n  8196: sp = sp + 0xffffffffffffff20\n  8200: u64 [sp + 0xd8] = ra\n  8204: u64 [sp + 0xd0] = s0\n  8208: u64 [sp + 0xc8] = s1\n  8212: s0 = sp + 0xe0\n  8216: sp = sp & 0xfffffffffffffff0\n  8219: a3 = u64 [a1 + 0x18]\n  8222: a2 = u64 [a1 + 0x10]\n  8225: a4 = u64 [a1 + 0x8]\n  8228: u64 [sp + 0x10] = a2\n  8231: u64 [sp + 0x8] = a3\n  8234: a2 = a2 | a3\n  8237: a3 = a4 <u 0x1\n  8240: a3 = 0 if a2 != 0\n  8242: u64 [sp + 0x38] = a0\n  8245: jump @158 if a3 == 0\n      : @153 (gas: 38)\n  8249: s1 = u64 [a1]\n  8251: a0 = s1 + 0x1f\n  8254: a1 = a0 <u s1\n  8257: u64 [sp + 0x18] = a4\n  8260: a1 = a1 + a4\n  8263: a1 = a1 & 0x1\n  8266: a0 = a0 & 0xffffffffffffffe0\n  8269: a2 = a0 + 0x20\n  8272: a0 = a2 <u a0\n  8275: a3 = a1 + a0\n  8278: a4 = a3 <u a1\n  8281: a4 = a0 if a0 == 0\n  8284: u64 [sp + 152] = 0\n  8288: u64 [sp + 0x80] = a2\n  8292: u64 [sp + 0x88] = a3\n  8296: a0 = sp + 0xa0\n  8300: a1 = sp + 0x80\n  8304: u64 [sp + 0x90] = a4\n  8308: ra = 0x8a\n  8312: sp = sp + 0xffffffffffffff60\n  8316: u64 [sp + 0x98] = ra\n  8320: u64 [sp + 0x90] = s0\n  8324: u64 [sp + 0x88] = s1\n  8328: s0 = sp + 0xa0\n  8332: sp = sp & 0xfffffffffffffff0\n  8335: a2 = u64 [a1 + 0x18]\n  8338: u64 [sp + 0x30] = a2\n  8341: a2 = u64 [a1 + 0x10]\n  8344: u64 [sp + 0x28] = a2\n  8347: a2 = u64 [a1 + 0x8]\n  8350: u64 [sp + 0x20] = a2\n  8353: a1 = u64 [a1]\n  8355: u64 [sp + 0x18] = a1\n  8358: u64 [sp + 0x38] = a0\n  8361: a0 = 0x40\n  8364: a1 = 0x20\n  8367: ra = 0x76\n  8370: jump @0\n      : @154 [@dyn 69] (gas: 15)\n  8373: a0 = u64 [sp + 0xb8]\n  8377: a2 = u64 [sp + 0xb0]\n  8381: a1 = u64 [sp + 0xa8]\n  8385: a3 = u64 [sp + 0xa0]\n  8389: u64 [sp + 0x28] = a0\n  8392: u64 [sp + 0x20] = a1\n  8395: a0 = a0 | a1\n  8398: a1 = a3 | a2\n  8401: a1 = a1 | a0\n  8404: a1 = a1 >> 0x20\n  8407: u64 [sp + 0x30] = a2\n  8410: a0 = a0 | a2\n  8413: a0 = a0 << 0x20\n  8416: a0 = a0 | a1\n  8419: jump @157 if a0 != 0\n      : @155 (gas: 4)\n  8423: i32 a0 = a3 + 0\n  8425: a1 = 0x20\n  8428: u64 [sp] = a3\n  8430: ra = 140, jump @0\n      : @156 [@dyn 70] (gas: 82)\n  8436: a1 = u64 [sp + 0x8]\n  8439: a1 = reverse a1\n  8441: a2 = u64 [sp + 0x10]\n  8444: a2 = reverse a2\n  8446: a3 = u64 [sp + 0x18]\n  8449: a3 = reverse a3\n  8451: a4 = reverse s1\n  8453: a5 = a4 >> 0x38\n  8456: u8 [a0 + 0x1f] = a5\n  8459: a5 = a4 >> 0x30\n  8462: u8 [a0 + 0x1e] = a5\n  8465: a5 = a4 >> 0x28\n  8468: u8 [a0 + 0x1d] = a5\n  8471: a5 = a4 >> 0x20\n  8474: u8 [a0 + 0x1c] = a5\n  8477: a5 = a4 >> 0x18\n  8480: u8 [a0 + 0x1b] = a5\n  8483: a5 = a4 >> 0x10\n  8486: u8 [a0 + 0x1a] = a5\n  8489: a5 = a4 >> 0x8\n  8492: u8 [a0 + 0x19] = a5\n  8495: u8 [a0 + 0x18] = a4\n  8498: u8 [a0 + 0x10] = a3\n  8501: a4 = a3 >> 0x38\n  8504: u8 [a0 + 0x17] = a4\n  8507: a4 = a3 >> 0x30\n  8510: u8 [a0 + 0x16] = a4\n  8513: a4 = a3 >> 0x28\n  8516: u8 [a0 + 0x15] = a4\n  8519: a4 = a3 >> 0x20\n  8522: u8 [a0 + 0x14] = a4\n  8525: a4 = a3 >> 0x18\n  8528: u8 [a0 + 0x13] = a4\n  8531: a4 = a3 >> 0x10\n  8534: u8 [a0 + 0x12] = a4\n  8537: a3 = a3 >> 0x8\n  8540: u8 [a0 + 0x11] = a3\n  8543: u8 [a0 + 0x8] = a2\n  8546: a3 = a2 >> 0x38\n  8549: u8 [a0 + 0xf] = a3\n  8552: a3 = a2 >> 0x30\n  8555: u8 [a0 + 0xe] = a3\n  8558: a3 = a2 >> 0x28\n  8561: u8 [a0 + 0xd] = a3\n  8564: a3 = a2 >> 0x20\n  8567: u8 [a0 + 0xc] = a3\n  8570: a3 = a2 >> 0x18\n  8573: u8 [a0 + 0xb] = a3\n  8576: a3 = a2 >> 0x10\n  8579: u8 [a0 + 0xa] = a3\n  8582: a2 = a2 >> 0x8\n  8585: u8 [a0 + 0x9] = a2\n  8588: u8 [a0] = a1\n  8590: a2 = a1 >> 0x38\n  8593: u8 [a0 + 0x7] = a2\n  8596: a2 = a1 >> 0x30\n  8599: u8 [a0 + 0x6] = a2\n  8602: a2 = a1 >> 0x28\n  8605: u8 [a0 + 0x5] = a2\n  8608: a2 = a1 >> 0x20\n  8611: u8 [a0 + 0x4] = a2\n  8614: a2 = a1 >> 0x18\n  8617: u8 [a0 + 0x3] = a2\n  8620: a2 = a1 >> 0x10\n  8623: u8 [a0 + 0x2] = a2\n  8626: a1 = a1 >> 0x8\n  8629: u8 [a0 + 0x1] = a1\n  8632: a0 = u64 [sp + 0x38]\n  8635: a1 = u64 [sp]\n  8637: u64 [a0] = a1\n  8639: a1 = u64 [sp + 0x28]\n  8642: u64 [a0 + 0x18] = a1\n  8645: a1 = u64 [sp + 0x20]\n  8648: u64 [a0 + 0x8] = a1\n  8651: a1 = u64 [sp + 0x30]\n  8654: u64 [a0 + 0x10] = a1\n  8657: sp = s0 + 0xffffffffffffff20\n  8661: ra = u64 [sp + 0xd8]\n  8665: s0 = u64 [sp + 0xd0]\n  8669: s1 = u64 [sp + 0xc8]\n  8673: sp = sp + 0xe0\n  8677: ret\n      : @157 (gas: 1)\n  8679: trap\n      : @158 (gas: 8)\n  8680: u64 [sp + 112] = 0\n  8683: u64 [sp + 104] = 0\n  8686: u64 [sp + 96] = 0\n  8689: a0 = 0x4e487b7100000000\n  8699: a1 = sp + 0x60\n  8702: u64 [sp + 0x78] = a0\n  8705: a0 = 0\n  8707: ra = 142, jump @8\n      : @159 [@dyn 71] (gas: 7)\n  8713: u64 [sp + 88] = 0\n  8716: u64 [sp + 80] = 0\n  8719: u64 [sp + 64] = 0x41\n  8723: a0 = 0x4\n  8726: a1 = sp + 0x40\n  8729: u64 [sp + 72] = 0\n  8732: ra = 144, jump @8\n      : @160 [@dyn 72] (gas: 3)\n  8738: a1 = 0x24\n  8741: a0 = 0\n  8743: ra = 146, jump @0\n      : @161 [@dyn 73] (gas: 6)\n  8749: i32 a1 = a0 + 0\n  8751: a0 = 0x1\n  8754: a2 = 0x24\n  8757: ra = 0x94\n  8761: ecalli 12 // 'seal_return'\n  8763: fallthrough\n      : @162 [@dyn 74] (gas: 6)\n  8764: u64 [a0 + 24] = 0\n  8767: u64 [a0 + 16] = 0\n  8770: u64 [a0 + 8] = 0\n  8773: a1 = 0x60\n  8776: u64 [a0] = a1\n  8778: ret\n      : @163 (gas: 1)\n  8780: jump @172 if a0 == 0\n      : @164 (gas: 9)\n  8784: u64 [sp + 0x20] = s1\n  8787: ecalli 11 // 'return_data_size'\n  8789: u64 [sp + 88] = 0\n  8792: u64 [sp + 80] = 0\n  8795: u64 [sp + 0x40] = a0\n  8798: a0 = sp + 0x60\n  8801: a1 = sp + 0x40\n  8804: u64 [sp + 72] = 0\n  8807: ra = 150, jump @152\n      : @165 [@dyn 75] (gas: 9)\n  8813: a0 = u64 [sp + 0x78]\n  8816: u64 [sp + 0x38] = a0\n  8819: a0 = u64 [sp + 0x70]\n  8822: u64 [sp + 0x30] = a0\n  8825: a0 = u64 [sp + 0x68]\n  8828: u64 [sp + 0x28] = a0\n  8831: s1 = u64 [sp + 0x60]\n  8834: ecalli 11 // 'return_data_size'\n  8836: fallthrough\n      : @166 (gas: 20)\n  8837: a1 = s1 + 0x20\n  8840: u64 [sp + 0x18] = s1\n  8843: a2 = a1 <u s1\n  8846: a4 = u64 [sp + 0x28]\n  8849: a3 = a4 + a2\n  8852: a4 = a3 <u a4\n  8855: a4 = a2 if a2 == 0\n  8858: a2 = u64 [sp + 0x30]\n  8861: a4 = a4 + a2\n  8864: a2 = a4 <u a2\n  8867: a5 = u64 [sp + 0x38]\n  8870: a2 = a2 + a5\n  8873: a5 = a1 | a4\n  8876: a2 = a2 | a3\n  8879: a5 = a5 | a2\n  8882: a5 = a5 >> 0x20\n  8885: a2 = a2 | a4\n  8888: a2 = a2 << 0x20\n  8891: a2 = a2 | a5\n  8894: jump @171 if a2 != 0\n      : @167 (gas: 3)\n  8897: s1 = a0\n  8899: a0 = a0 >> 0x20\n  8902: jump @171 if a0 != 0\n      : @168 (gas: 4)\n  8905: i32 a0 = a1 + 0\n  8907: i32 a1 = s1 + 0\n  8909: u64 [sp + 0x10] = a1\n  8912: ra = 152, jump @0\n      : @169 [@dyn 76] (gas: 6)\n  8918: u32 [sp + 0x80] = s1\n  8922: i32 a0 = a0 + 0\n  8924: i32 a1 = sp + 0x80\n  8928: a2 = 0\n  8930: ecalli 10 // 'return_data_copy'\n  8932: fallthrough\n      : @170 (gas: 8)\n  8933: a0 = i32 [sp + 0x80]\n  8937: s1 = u64 [sp + 0x20]\n  8940: a1 = u64 [sp + 0x38]\n  8943: a2 = u64 [sp + 0x30]\n  8946: a3 = u64 [sp + 0x28]\n  8949: a4 = u64 [sp + 0x18]\n  8952: a5 = u64 [sp + 0x10]\n  8955: jump @173 if a0 >=u a5\n      : @171 (gas: 1)\n  8958: trap\n      : @172 (gas: 5)\n  8959: a3 = 0\n  8961: a2 = 0\n  8963: a1 = 0\n  8965: a4 = 0x60\n  8968: fallthrough\n      : @173 (gas: 10)\n  8969: u64 [s1] = a4\n  8971: u64 [s1 + 0x8] = a3\n  8974: u64 [s1 + 0x10] = a2\n  8977: u64 [s1 + 0x18] = a1\n  8980: sp = s0 + 0xffffffffffffff60\n  8984: ra = u64 [sp + 0x98]\n  8988: s0 = u64 [sp + 0x90]\n  8992: s1 = u64 [sp + 0x88]\n  8996: sp = sp + 0xa0\n  9000: ret\n      : @174 (gas: 17)\n  9002: sp = sp + 0xffffffffffffffa0\n  9005: u64 [sp + 0x58] = ra\n  9008: u64 [sp + 0x50] = s0\n  9011: u64 [sp + 0x48] = s1\n  9014: a3 = u64 [a1 + 0x18]\n  9017: a4 = u64 [a1 + 0x10]\n  9020: a5 = u64 [a1 + 0x8]\n  9023: s1 = u64 [a1]\n  9025: a1 = a5 | a3\n  9028: a2 = s1 | a4\n  9031: a2 = a2 | a1\n  9034: a2 = a2 >> 0x20\n  9037: a1 = a1 | a4\n  9040: a1 = a1 << 0x20\n  9043: a1 = a1 | a2\n  9046: u64 [sp + 0x28] = a0\n  9049: jump @181 if a1 != 0\n      : @175 (gas: 19)\n  9053: a0 = s1 + 0x20\n  9056: u64 [sp + 0x30] = a0\n  9059: a0 = a0 <u s1\n  9062: a1 = a5 + a0\n  9065: u64 [sp + 0x40] = a1\n  9068: u64 [sp + 0x8] = a5\n  9071: s0 = a1 <u a5\n  9074: s0 = a0 if a0 == 0\n  9077: s0 = s0 + a4\n  9080: u64 [sp + 0x10] = a4\n  9083: a0 = s0 <u a4\n  9086: u64 [sp + 0x18] = a3\n  9089: a0 = a0 + a3\n  9092: u64 [sp + 0x38] = a0\n  9095: u64 [sp] = s1\n  9097: i32 a0 = s1 + 0\n  9099: a1 = 0x20\n  9102: s1 = 0x20\n  9105: ra = 154, jump @0\n      : @176 [@dyn 77] (gas: 45)\n  9111: u8 [a0 + 0x1f] = s1\n  9114: a1 = u64 [sp + 0x30]\n  9117: s1 = a1\n  9119: a1 = a1 | s0\n  9122: a2 = u64 [sp + 0x40]\n  9125: a4 = u64 [sp + 0x38]\n  9128: a2 = a2 | a4\n  9131: a1 = a1 | a2\n  9134: a1 = a1 >> 0x20\n  9137: u64 [sp + 0x20] = s0\n  9140: a2 = a2 | s0\n  9143: a2 = a2 << 0x20\n  9146: a1 = a1 | a2\n  9149: u8 [a0 + 30] = 0\n  9152: u8 [a0 + 29] = 0\n  9155: u8 [a0 + 28] = 0\n  9158: u8 [a0 + 27] = 0\n  9161: u8 [a0 + 26] = 0\n  9164: u8 [a0 + 25] = 0\n  9167: u8 [a0 + 24] = 0\n  9170: u8 [a0 + 23] = 0\n  9173: u8 [a0 + 22] = 0\n  9176: u8 [a0 + 21] = 0\n  9179: u8 [a0 + 20] = 0\n  9182: u8 [a0 + 19] = 0\n  9185: u8 [a0 + 18] = 0\n  9188: u8 [a0 + 17] = 0\n  9191: u8 [a0 + 16] = 0\n  9194: u8 [a0 + 15] = 0\n  9197: u8 [a0 + 14] = 0\n  9200: u8 [a0 + 13] = 0\n  9203: u8 [a0 + 12] = 0\n  9206: u8 [a0 + 11] = 0\n  9209: u8 [a0 + 10] = 0\n  9212: u8 [a0 + 9] = 0\n  9215: u8 [a0 + 8] = 0\n  9218: u8 [a0 + 7] = 0\n  9221: u8 [a0 + 6] = 0\n  9224: u8 [a0 + 5] = 0\n  9227: u8 [a0 + 4] = 0\n  9230: u8 [a0 + 3] = 0\n  9233: u8 [a0 + 2] = 0\n  9236: u8 [a0 + 1] = 0\n  9239: u8 [a0 + 0] = 0\n  9241: jump @181 if a1 != 0\n      : @177 (gas: 4)\n  9245: i32 s0 = s1 + 0\n  9247: a1 = 0x20\n  9250: a0 = s0\n  9252: ra = 156, jump @0\n      : @178 [@dyn 78] (gas: 41)\n  9258: u8 [a0 + 31] = 0x10\n  9262: u8 [a0 + 30] = 0\n  9265: u8 [a0 + 29] = 0\n  9268: u8 [a0 + 28] = 0\n  9271: u8 [a0 + 27] = 0\n  9274: u8 [a0 + 26] = 0\n  9277: u8 [a0 + 25] = 0\n  9280: u8 [a0 + 24] = 0\n  9283: u8 [a0 + 23] = 0\n  9286: u8 [a0 + 22] = 0\n  9289: u8 [a0 + 21] = 0\n  9292: u8 [a0 + 20] = 0\n  9295: u8 [a0 + 19] = 0\n  9298: u8 [a0 + 18] = 0\n  9301: u8 [a0 + 17] = 0\n  9304: u8 [a0 + 16] = 0\n  9307: u8 [a0 + 15] = 0\n  9310: u8 [a0 + 14] = 0\n  9313: u8 [a0 + 13] = 0\n  9316: u8 [a0 + 12] = 0\n  9319: u8 [a0 + 11] = 0\n  9322: u8 [a0 + 10] = 0\n  9325: u8 [a0 + 9] = 0\n  9328: u8 [a0 + 8] = 0\n  9331: u8 [a0 + 7] = 0\n  9334: u8 [a0 + 6] = 0\n  9337: u8 [a0 + 5] = 0\n  9340: u8 [a0 + 4] = 0\n  9343: u8 [a0 + 3] = 0\n  9346: u8 [a0 + 2] = 0\n  9349: u8 [a0 + 1] = 0\n  9352: a1 = u64 [sp + 0x20]\n  9355: a2 = u64 [sp + 0x38]\n  9358: a1 = a1 | a2\n  9361: a2 = 0xffffffe0\n  9371: a2 = s1 <u a2\n  9374: a3 = u64 [sp + 0x40]\n  9377: a2 = 0 if a3 != 0\n  9379: a2 = 0 if a1 != 0\n  9381: u8 [a0 + 0] = 0\n  9383: jump @181 if a2 == 0\n      : @179 (gas: 3)\n  9387: i32 a0 = s0 + 0x20\n  9390: a1 = 0x20\n  9393: ra = 158, jump @0\n      : @180 [@dyn 79] (gas: 54)\n  9399: u8 [a0 + 31] = 0\n  9402: u8 [a0 + 30] = 0\n  9405: u8 [a0 + 29] = 0\n  9408: u8 [a0 + 28] = 0\n  9411: u8 [a0 + 27] = 0\n  9414: u8 [a0 + 26] = 0\n  9417: u8 [a0 + 25] = 0\n  9420: u8 [a0 + 24] = 0\n  9423: u8 [a0 + 23] = 0\n  9426: u8 [a0 + 22] = 0\n  9429: u8 [a0 + 21] = 0\n  9432: u8 [a0 + 20] = 0\n  9435: u8 [a0 + 19] = 0\n  9438: u8 [a0 + 18] = 0\n  9441: u8 [a0 + 17] = 0\n  9444: u8 [a0 + 16] = 0\n  9447: u8 [a0 + 15] = 0x21\n  9451: u8 [a0 + 14] = 0x64\n  9455: u8 [a0 + 13] = 0x65\n  9459: u8 [a0 + 12] = 0x6c\n  9463: u8 [a0 + 11] = 0x69\n  9467: u8 [a0 + 10] = 0x61\n  9471: u8 [a0 + 9] = 0x66\n  9475: u8 [a0 + 8] = 0x20\n  9479: u8 [a0 + 7] = 0x77\n  9483: u8 [a0 + 6] = 0x61\n  9487: u8 [a0 + 5] = 0x72\n  9491: u8 [a0 + 4] = 0x64\n  9495: u8 [a0 + 3] = 0x68\n  9499: u8 [a0 + 2] = 0x74\n  9503: u8 [a0 + 1] = 0x69\n  9507: u8 [a0 + 0] = 0x77\n  9510: a1 = u64 [sp]\n  9512: a0 = a1 + 0x60\n  9515: a1 = a0 <u a1\n  9518: a3 = u64 [sp + 0x8]\n  9521: a2 = a3 + a1\n  9524: a3 = a2 <u a3\n  9527: a3 = a1 if a1 == 0\n  9530: a1 = u64 [sp + 0x10]\n  9533: a3 = a3 + a1\n  9536: a1 = a3 <u a1\n  9539: a4 = u64 [sp + 0x18]\n  9542: a1 = a1 + a4\n  9545: a4 = u64 [sp + 0x28]\n  9548: u64 [a4] = a0\n  9550: u64 [a4 + 0x8] = a2\n  9553: u64 [a4 + 0x10] = a3\n  9556: u64 [a4 + 0x18] = a1\n  9559: ra = u64 [sp + 0x58]\n  9562: s0 = u64 [sp + 0x50]\n  9565: s1 = u64 [sp + 0x48]\n  9568: sp = sp + 0x60\n  9571: ret\n      : @181 (gas: 1)\n  9573: trap\n      : @182 (gas: 24)\n  9574: a0 = u64 [s1 + 0x108]\n  9578: a1 = i32 [s1 + 0x110]\n  9582: a2 = u64 [s1 + 0x100]\n  9586: a0 = reverse a0\n  9588: a3 = a0 << 0x20\n  9591: a1 = reverse a1\n  9593: a1 = a1 >> 0x20\n  9596: a1 = a1 | a3\n  9599: a0 = a0 >> 0x20\n  9602: a2 = reverse a2\n  9604: a3 = a2 << 0x20\n  9607: a0 = a0 | a3\n  9610: a2 = a2 >> 0x20\n  9613: a3 = u64 [s1 + 0x48]\n  9616: a3 = a3 << 0x18\n  9619: a3 = a3 >> 0x20\n  9622: a4 = u64 [s1 + 0x50]\n  9625: a0 = a0 ^ a4\n  9628: a4 = u64 [s1 + 0x58]\n  9631: a1 = a1 ^ a4\n  9634: a2 = a2 ^ a3\n  9637: a1 = a1 | a2\n  9640: a0 = a0 | a1\n  9643: jump @191 if a0 != 0\n      : @183 (gas: 54)\n  9647: i32 a0 = s1 + 0x120\n  9651: ecalli 0 // 'address'\n  9652: a0 = u64 [s1 + 0x128]\n  9656: a1 = u64 [s1 + 0x120]\n  9660: a2 = i32 [s1 + 0x130]\n  9664: u64 [s1 + 0x148] = a0\n  9668: u64 [s1 + 0x140] = a1\n  9672: u32 [s1 + 0x150] = a2\n  9676: a0 = sp + 0xffffffffffffffe0\n  9679: a0 = a0 & 0xffffffffffffffe0\n  9682: u64 [s1 + 0x40] = a0\n  9685: sp = a0\n  9687: i32 a1 = a0 + 0\n  9689: i32 a0 = s1 + 0x140\n  9693: ecalli 1 // 'balance_of'\n  9695: a1 = u64 [s1 + 0x40]\n  9698: a0 = u64 [a1]\n  9700: u64 [s1 + 0x58] = a0\n  9703: a0 = u64 [a1 + 0x8]\n  9706: u64 [s1 + 0x50] = a0\n  9709: a0 = u64 [a1 + 0x10]\n  9712: u64 [s1 + 0x48] = a0\n  9715: a0 = u64 [a1 + 0x18]\n  9718: u64 [s1 + 0x40] = a0\n  9721: u64 [s1 + 504] = 0\n  9725: u64 [s1 + 496] = 0\n  9729: u64 [s1 + 488] = 0\n  9733: u64 [s1 + 480] = 0x2\n  9738: u64 [s1 + 536] = 0\n  9742: u64 [s1 + 528] = 0\n  9746: u64 [s1 + 520] = 0\n  9750: u64 [s1 + 512] = 0\n  9754: u32 [s1 + 544] = 0x20\n  9759: i32 a1 = s1 + 0x1e0\n  9763: i32 a3 = s1 + 0x200\n  9767: i32 a4 = s1 + 0x220\n  9771: a2 = 0xffffffffffffffff\n  9774: a0 = 0\n  9776: ecalli 7 // 'get_storage'\n  9778: a0 = u64 [s1 + 0x208]\n  9782: a1 = u64 [s1 + 0x200]\n  9786: a3 = u64 [s1 + 0x210]\n  9790: u64 [s1 + 0x38] = a3\n  9793: a2 = a0 << 0x38\n  9796: a1 = a1 >> 0x8\n  9799: a1 = a1 | a2\n  9802: u64 [s1 + 0x30] = a1\n  9805: a1 = a3 << 0x38\n  9808: a0 = a0 >> 0x8\n  9811: a0 = a0 | a1\n  9814: u64 [s1 + 0x28] = a0\n  9817: a0 = 0x40\n  9820: a1 = 0x20\n  9823: ra = 160, jump @0\n      : @184 [@dyn 80] (gas: 98)\n  9829: a1 = u8 [a0 + 0x11]\n  9832: a2 = u8 [a0 + 0x10]\n  9835: a3 = u8 [a0 + 0x12]\n  9838: a4 = u8 [a0 + 0x13]\n  9841: a1 = a1 << 0x8\n  9844: a1 = a1 | a2\n  9847: a3 = a3 << 0x10\n  9850: a4 = a4 << 0x18\n  9853: a3 = a3 | a4\n  9856: a1 = a1 | a3\n  9859: a2 = u8 [a0 + 0x15]\n  9862: a3 = u8 [a0 + 0x14]\n  9865: a4 = u8 [a0 + 0x16]\n  9868: a5 = u8 [a0 + 0x17]\n  9871: a2 = a2 << 0x8\n  9874: a2 = a2 | a3\n  9877: a4 = a4 << 0x10\n  9880: a5 = a5 << 0x18\n  9883: a4 = a4 | a5\n  9886: a2 = a2 | a4\n  9889: a2 = a2 << 0x20\n  9892: t0 = a2 | a1\n  9895: a2 = u8 [a0 + 0x1]\n  9898: a3 = u8 [a0]\n  9900: a4 = u8 [a0 + 0x2]\n  9903: a5 = u8 [a0 + 0x3]\n  9906: a2 = a2 << 0x8\n  9909: a2 = a2 | a3\n  9912: a4 = a4 << 0x10\n  9915: a5 = a5 << 0x18\n  9918: a4 = a4 | a5\n  9921: a2 = a2 | a4\n  9924: a3 = u8 [a0 + 0x5]\n  9927: a4 = u8 [a0 + 0x4]\n  9930: a5 = u8 [a0 + 0x6]\n  9933: a1 = u8 [a0 + 0x7]\n  9936: a3 = a3 << 0x8\n  9939: a3 = a3 | a4\n  9942: a5 = a5 << 0x10\n  9945: a1 = a1 << 0x18\n  9948: a1 = a1 | a5\n  9951: a1 = a1 | a3\n  9954: a1 = a1 << 0x20\n  9957: t1 = a1 | a2\n  9960: a1 = u8 [a0 + 0x19]\n  9963: a3 = u8 [a0 + 0x18]\n  9966: a4 = u8 [a0 + 0x1a]\n  9969: a5 = u8 [a0 + 0x1b]\n  9972: a1 = a1 << 0x8\n  9975: a1 = a1 | a3\n  9978: a4 = a4 << 0x10\n  9981: a5 = a5 << 0x18\n  9984: a4 = a4 | a5\n  9987: a1 = a1 | a4\n  9990: a3 = u8 [a0 + 0x1d]\n  9993: a4 = u8 [a0 + 0x1c]\n  9996: a5 = u8 [a0 + 0x1e]\n  9999: a2 = u8 [a0 + 0x1f]\n 10002: a3 = a3 << 0x8\n 10005: a3 = a3 | a4\n 10008: a5 = a5 << 0x10\n 10011: a2 = a2 << 0x18\n 10014: a2 = a2 | a5\n 10017: a2 = a2 | a3\n 10020: a2 = a2 << 0x20\n 10023: a3 = a2 | a1\n 10026: a1 = u8 [a0 + 0x9]\n 10029: a2 = u8 [a0 + 0x8]\n 10032: a4 = u8 [a0 + 0xa]\n 10035: a5 = u8 [a0 + 0xb]\n 10038: a1 = a1 << 0x8\n 10041: a1 = a1 | a2\n 10044: a4 = a4 << 0x10\n 10047: a5 = a5 << 0x18\n 10050: a4 = a4 | a5\n 10053: a1 = a1 | a4\n 10056: a2 = u8 [a0 + 0xd]\n 10059: a4 = u8 [a0 + 0xc]\n 10062: a5 = u8 [a0 + 0xe]\n 10065: a0 = u8 [a0 + 0xf]\n 10068: a2 = a2 << 0x8\n 10071: a2 = a2 | a4\n 10074: a5 = a5 << 0x10\n 10077: a0 = a0 << 0x18\n 10080: a0 = a0 | a5\n 10083: a0 = a0 | a2\n 10086: a0 = a0 << 0x20\n 10089: a0 = a0 | a1\n 10092: a0 = reverse a0\n 10094: u64 [s1 + 0x20] = a0\n 10097: a0 = reverse a3\n 10099: u64 [s1 + 0x8] = a0\n 10102: a0 = reverse t1\n 10104: u64 [s1 + 0x18] = a0\n 10107: a0 = reverse t0\n 10109: u64 [s1 + 0x10] = a0\n 10112: ecalli 9 // 'ref_time_left'\n 10114: fallthrough\n      : @185 (gas: 38)\n 10115: u64 [s1] = a0\n 10117: a0 = u64 [s1 + 0x28]\n 10120: a0 = reverse a0\n 10122: a1 = u64 [s1 + 0x30]\n 10125: a1 = reverse a1\n 10127: a2 = a0 >> 0x20\n 10130: a3 = a1 << 0x20\n 10133: a2 = a2 | a3\n 10136: a0 = a0 << 0x20\n 10139: a3 = u64 [s1 + 0x38]\n 10142: a3 = reverse a3\n 10144: a3 = a3 << 0x8\n 10147: a3 = a3 >> 0x20\n 10150: a0 = a0 | a3\n 10153: u64 [s1 + 0x168] = a2\n 10157: a2 = u64 [s1 + 0x8]\n 10160: u64 [s1 + 0x160] = a0\n 10164: a1 = a1 >> 0x20\n 10167: u32 [s1 + 0x170] = a1\n 10171: a0 = u64 [s1 + 0x40]\n 10174: u64 [s1 + 0x198] = a0\n 10178: a0 = u64 [s1 + 0x48]\n 10181: u64 [s1 + 0x190] = a0\n 10185: a0 = u64 [s1 + 0x50]\n 10188: u64 [s1 + 0x188] = a0\n 10192: a0 = u64 [s1 + 0x18]\n 10195: a1 = u64 [s1 + 0x10]\n 10198: a0 = a0 | a1\n 10201: a3 = u64 [s1 + 0x20]\n 10204: a1 = a2 | a3\n 10207: a1 = a1 | a0\n 10210: a0 = a0 | a3\n 10213: a1 = a1 >> 0x20\n 10216: a0 = a0 << 0x20\n 10219: a0 = a0 | a1\n 10222: a1 = u64 [s1 + 0x58]\n 10225: u64 [s1 + 0x180] = a1\n 10229: jump @202 if a0 != 0\n      : @186 (gas: 3)\n 10233: i32 a0 = a2 + 0\n 10235: a1 = 0\n 10237: ra = 162, jump @0\n      : @187 [@dyn 81] (gas: 4)\n 10243: u64 [s1 + 0x58] = a0\n 10246: a0 = 0\n 10248: a1 = 0\n 10250: ra = 164, jump @0\n      : @188 [@dyn 82] (gas: 43)\n 10256: u32 [s1 + 416] = 0\n 10260: a2 = u64 [s1]\n 10262: a1 = a2 >u 0x8fc\n 10266: a2 = -a1\n 10268: u64 [s1 + 0x1d8] = a2\n 10272: u64 [s1 + 0x1d0] = a2\n 10276: u64 [s1 + 0x1c8] = a2\n 10280: u64 [s1 + 0x1c0] = a2\n 10284: a2 = s1 + 0x160\n 10288: a2 = a2 << 0x20\n 10291: a2 = a2 >> 0x20\n 10294: a1 = a1 << 0x23\n 10297: t0 = a1 | a2\n 10300: a1 = s1 + 0x180\n 10304: a1 = a1 << 0x20\n 10307: a1 = a1 >> 0x20\n 10310: a2 = s1 + 0x1c0\n 10314: a2 = a2 << 0x20\n 10317: a3 = a2 | a1\n 10320: a4 = u64 [s1 + 0x58]\n 10323: a4 = a4 << 0x20\n 10326: a4 = a4 >> 0x20\n 10329: a0 = a0 << 0x20\n 10332: a0 = a0 >> 0x20\n 10335: a1 = s1 + 0x1a0\n 10339: a1 = a1 << 0x20\n 10342: a5 = a1 | a0\n 10345: a1 = 0xffffffffffffffff\n 10348: a2 = 0xffffffffffffffff\n 10351: a0 = t0\n 10353: ecalli 2 // 'call'\n 10355: u64 [s1 + 0x58] = a0\n 10358: a0 = s1 + 0xa0\n 10362: ra = 0xa6\n 10366: sp = sp + 0xffffffffffffff60\n 10370: u64 [sp + 0x98] = ra\n 10374: u64 [sp + 0x90] = s0\n 10378: u64 [sp + 0x88] = s1\n 10382: s0 = sp + 0xa0\n 10386: sp = sp & 0xffffffffffffffe0\n 10389: s1 = a0\n 10391: ecalli 11 // 'return_data_size'\n 10393: jump @163\n      : @189 [@dyn 83] (gas: 2)\n 10396: a0 = u64 [s1 + 0x58]\n 10399: jump @196 if a0 != 0\n      : @190 (gas: 6)\n 10403: sp = s0 + 0xfffffffffffffdc0\n 10407: ra = u64 [sp + 0x238]\n 10411: s0 = u64 [sp + 0x230]\n 10415: s1 = u64 [sp + 0x228]\n 10419: sp = sp + 0x240\n 10423: ret\n      : @191 (gas: 3)\n 10425: a0 = 0x40\n 10428: a1 = 0x20\n 10431: ra = 168, jump @0\n      : @192 [@dyn 84] (gas: 104)\n 10437: a1 = u8 [a0 + 0x11]\n 10440: a2 = u8 [a0 + 0x10]\n 10443: a3 = u8 [a0 + 0x12]\n 10446: a4 = u8 [a0 + 0x13]\n 10449: a1 = a1 << 0x8\n 10452: a1 = a1 | a2\n 10455: a3 = a3 << 0x10\n 10458: a4 = a4 << 0x18\n 10461: a3 = a3 | a4\n 10464: a1 = a1 | a3\n 10467: a2 = u8 [a0 + 0x15]\n 10470: a3 = u8 [a0 + 0x14]\n 10473: a4 = u8 [a0 + 0x16]\n 10476: a5 = u8 [a0 + 0x17]\n 10479: a2 = a2 << 0x8\n 10482: a2 = a2 | a3\n 10485: a4 = a4 << 0x10\n 10488: a5 = a5 << 0x18\n 10491: a4 = a4 | a5\n 10494: a2 = a2 | a4\n 10497: a2 = a2 << 0x20\n 10500: t0 = a2 | a1\n 10503: a2 = u8 [a0 + 0x1]\n 10506: a3 = u8 [a0]\n 10508: a4 = u8 [a0 + 0x2]\n 10511: a5 = u8 [a0 + 0x3]\n 10514: a2 = a2 << 0x8\n 10517: a2 = a2 | a3\n 10520: a4 = a4 << 0x10\n 10523: a5 = a5 << 0x18\n 10526: a4 = a4 | a5\n 10529: a2 = a2 | a4\n 10532: a3 = u8 [a0 + 0x5]\n 10535: a4 = u8 [a0 + 0x4]\n 10538: a5 = u8 [a0 + 0x6]\n 10541: a1 = u8 [a0 + 0x7]\n 10544: a3 = a3 << 0x8\n 10547: a3 = a3 | a4\n 10550: a5 = a5 << 0x10\n 10553: a1 = a1 << 0x18\n 10556: a1 = a1 | a5\n 10559: a1 = a1 | a3\n 10562: a1 = a1 << 0x20\n 10565: t1 = a1 | a2\n 10568: a1 = u8 [a0 + 0x19]\n 10571: a3 = u8 [a0 + 0x18]\n 10574: a4 = u8 [a0 + 0x1a]\n 10577: a5 = u8 [a0 + 0x1b]\n 10580: a1 = a1 << 0x8\n 10583: a1 = a1 | a3\n 10586: a4 = a4 << 0x10\n 10589: a5 = a5 << 0x18\n 10592: a4 = a4 | a5\n 10595: a1 = a1 | a4\n 10598: a3 = u8 [a0 + 0x1d]\n 10601: a4 = u8 [a0 + 0x1c]\n 10604: a5 = u8 [a0 + 0x1e]\n 10607: a2 = u8 [a0 + 0x1f]\n 10610: a3 = a3 << 0x8\n 10613: a3 = a3 | a4\n 10616: a5 = a5 << 0x10\n 10619: a2 = a2 << 0x18\n 10622: a2 = a2 | a5\n 10625: a2 = a2 | a3\n 10628: a2 = a2 << 0x20\n 10631: a3 = a2 | a1\n 10634: a1 = u8 [a0 + 0x9]\n 10637: a2 = u8 [a0 + 0x8]\n 10640: a4 = u8 [a0 + 0xa]\n 10643: a5 = u8 [a0 + 0xb]\n 10646: a1 = a1 << 0x8\n 10649: a1 = a1 | a2\n 10652: a4 = a4 << 0x10\n 10655: a5 = a5 << 0x18\n 10658: a4 = a4 | a5\n 10661: a1 = a1 | a4\n 10664: a2 = u8 [a0 + 0xd]\n 10667: a4 = u8 [a0 + 0xc]\n 10670: a5 = u8 [a0 + 0xe]\n 10673: a0 = u8 [a0 + 0xf]\n 10676: a2 = a2 << 0x8\n 10679: a2 = a2 | a4\n 10682: a5 = a5 << 0x10\n 10685: a0 = a0 << 0x18\n 10688: a0 = a0 | a5\n 10691: a0 = a0 | a2\n 10694: a0 = a0 << 0x20\n 10697: a0 = a0 | a1\n 10700: a4 = reverse a0\n 10702: a1 = reverse a3\n 10704: a2 = reverse t1\n 10706: a0 = reverse t0\n 10708: u64 [s1 + 0x58] = a0\n 10711: u64 [s1 + 0x48] = a2\n 10714: a0 = a0 | a2\n 10717: a2 = a1\n 10719: a1 = a1 | a4\n 10722: a1 = a1 | a0\n 10725: a1 = a1 >> 0x20\n 10728: u64 [s1 + 0x50] = a4\n 10731: a0 = a0 | a4\n 10734: a0 = a0 << 0x20\n 10737: a0 = a0 | a1\n 10740: jump @202 if a0 != 0\n      : @193 (gas: 5)\n 10744: u64 [s1 + 0x40] = a2\n 10747: i32 a0 = a2 + 0\n 10749: a1 = 0x20\n 10752: u64 [s1 + 0x38] = a0\n 10755: ra = 170, jump @0\n      : @194 [@dyn 85] (gas: 51)\n 10761: u8 [a0 + 31] = 0\n 10764: u8 [a0 + 30] = 0\n 10767: u8 [a0 + 29] = 0\n 10770: u8 [a0 + 28] = 0\n 10773: u8 [a0 + 27] = 0\n 10776: u8 [a0 + 26] = 0\n 10779: u8 [a0 + 25] = 0\n 10782: u8 [a0 + 24] = 0\n 10785: u8 [a0 + 23] = 0\n 10788: u8 [a0 + 22] = 0\n 10791: u8 [a0 + 21] = 0\n 10794: u8 [a0 + 20] = 0\n 10797: u8 [a0 + 19] = 0\n 10800: u8 [a0 + 18] = 0\n 10803: u8 [a0 + 17] = 0\n 10806: u8 [a0 + 16] = 0\n 10809: u8 [a0 + 15] = 0\n 10812: u8 [a0 + 14] = 0\n 10815: u8 [a0 + 13] = 0\n 10818: u8 [a0 + 12] = 0\n 10821: u8 [a0 + 11] = 0\n 10824: u8 [a0 + 10] = 0\n 10827: u8 [a0 + 9] = 0\n 10830: u8 [a0 + 8] = 0\n 10833: u8 [a0 + 7] = 0\n 10836: u8 [a0 + 6] = 0\n 10839: u8 [a0 + 5] = 0\n 10842: u8 [a0 + 4] = 0\n 10845: u8 [a0 + 3] = 0xa0\n 10850: u8 [a0 + 2] = 0x79\n 10854: u8 [a0 + 1] = 0xc3\n 10859: u8 [a0 + 0] = 0x8\n 10862: a1 = u64 [s1 + 0x40]\n 10865: a0 = a1 + 0x4\n 10868: a1 = a0 <u a1\n 10871: a3 = u64 [s1 + 0x58]\n 10874: a2 = a3 + a1\n 10877: a3 = a2 <u a3\n 10880: a3 = a1 if a1 == 0\n 10883: a1 = u64 [s1 + 0x50]\n 10886: a3 = a3 + a1\n 10889: a1 = a3 <u a1\n 10892: a4 = u64 [s1 + 0x48]\n 10895: a4 = a4 + a1\n 10898: u64 [s1 + 0xc8] = a2\n 10902: u64 [s1 + 0xc0] = a0\n 10906: u64 [s1 + 0xd0] = a3\n 10910: a0 = s1 + 0xe0\n 10914: a1 = s1 + 0xc0\n 10918: u64 [s1 + 0xd8] = a4\n 10922: ra = 172, jump @130\n      : @195 [@dyn 86] (gas: 5)\n 10928: a0 = u64 [s1 + 0xe8]\n 10932: t0 = u64 [s1 + 0xf8]\n 10936: t1 = u64 [s1 + 0xe0]\n 10940: a3 = u64 [s1 + 0xf0]\n 10944: jump @201\n      : @196 (gas: 3)\n 10947: a0 = 0x40\n 10950: a1 = 0x20\n 10953: ra = 174, jump @0\n      : @197 [@dyn 87] (gas: 104)\n 10959: a1 = u8 [a0 + 0x11]\n 10962: a2 = u8 [a0 + 0x10]\n 10965: a3 = u8 [a0 + 0x12]\n 10968: a4 = u8 [a0 + 0x13]\n 10971: a1 = a1 << 0x8\n 10974: a1 = a1 | a2\n 10977: a3 = a3 << 0x10\n 10980: a4 = a4 << 0x18\n 10983: a3 = a3 | a4\n 10986: a1 = a1 | a3\n 10989: a2 = u8 [a0 + 0x15]\n 10992: a3 = u8 [a0 + 0x14]\n 10995: a4 = u8 [a0 + 0x16]\n 10998: a5 = u8 [a0 + 0x17]\n 11001: a2 = a2 << 0x8\n 11004: a2 = a2 | a3\n 11007: a4 = a4 << 0x10\n 11010: a5 = a5 << 0x18\n 11013: a4 = a4 | a5\n 11016: a2 = a2 | a4\n 11019: a2 = a2 << 0x20\n 11022: t0 = a2 | a1\n 11025: a2 = u8 [a0 + 0x1]\n 11028: a3 = u8 [a0]\n 11030: a4 = u8 [a0 + 0x2]\n 11033: a5 = u8 [a0 + 0x3]\n 11036: a2 = a2 << 0x8\n 11039: a2 = a2 | a3\n 11042: a4 = a4 << 0x10\n 11045: a5 = a5 << 0x18\n 11048: a4 = a4 | a5\n 11051: a2 = a2 | a4\n 11054: a3 = u8 [a0 + 0x5]\n 11057: a4 = u8 [a0 + 0x4]\n 11060: a5 = u8 [a0 + 0x6]\n 11063: a1 = u8 [a0 + 0x7]\n 11066: a3 = a3 << 0x8\n 11069: a3 = a3 | a4\n 11072: a5 = a5 << 0x10\n 11075: a1 = a1 << 0x18\n 11078: a1 = a1 | a5\n 11081: a1 = a1 | a3\n 11084: a1 = a1 << 0x20\n 11087: t1 = a1 | a2\n 11090: a1 = u8 [a0 + 0x19]\n 11093: a3 = u8 [a0 + 0x18]\n 11096: a4 = u8 [a0 + 0x1a]\n 11099: a5 = u8 [a0 + 0x1b]\n 11102: a1 = a1 << 0x8\n 11105: a1 = a1 | a3\n 11108: a4 = a4 << 0x10\n 11111: a5 = a5 << 0x18\n 11114: a4 = a4 | a5\n 11117: a1 = a1 | a4\n 11120: a3 = u8 [a0 + 0x1d]\n 11123: a4 = u8 [a0 + 0x1c]\n 11126: a5 = u8 [a0 + 0x1e]\n 11129: a2 = u8 [a0 + 0x1f]\n 11132: a3 = a3 << 0x8\n 11135: a3 = a3 | a4\n 11138: a5 = a5 << 0x10\n 11141: a2 = a2 << 0x18\n 11144: a2 = a2 | a5\n 11147: a2 = a2 | a3\n 11150: a2 = a2 << 0x20\n 11153: a3 = a2 | a1\n 11156: a1 = u8 [a0 + 0x9]\n 11159: a2 = u8 [a0 + 0x8]\n 11162: a4 = u8 [a0 + 0xa]\n 11165: a5 = u8 [a0 + 0xb]\n 11168: a1 = a1 << 0x8\n 11171: a1 = a1 | a2\n 11174: a4 = a4 << 0x10\n 11177: a5 = a5 << 0x18\n 11180: a4 = a4 | a5\n 11183: a1 = a1 | a4\n 11186: a2 = u8 [a0 + 0xd]\n 11189: a4 = u8 [a0 + 0xc]\n 11192: a5 = u8 [a0 + 0xe]\n 11195: a0 = u8 [a0 + 0xf]\n 11198: a2 = a2 << 0x8\n 11201: a2 = a2 | a4\n 11204: a5 = a5 << 0x10\n 11207: a0 = a0 << 0x18\n 11210: a0 = a0 | a5\n 11213: a0 = a0 | a2\n 11216: a0 = a0 << 0x20\n 11219: a0 = a0 | a1\n 11222: a4 = reverse a0\n 11224: a1 = reverse a3\n 11226: a2 = reverse t1\n 11228: a0 = reverse t0\n 11230: u64 [s1 + 0x58] = a0\n 11233: u64 [s1 + 0x48] = a2\n 11236: a0 = a0 | a2\n 11239: a2 = a1\n 11241: a1 = a1 | a4\n 11244: a1 = a1 | a0\n 11247: a1 = a1 >> 0x20\n 11250: u64 [s1 + 0x50] = a4\n 11253: a0 = a0 | a4\n 11256: a0 = a0 << 0x20\n 11259: a0 = a0 | a1\n 11262: jump @202 if a0 != 0\n      : @198 (gas: 5)\n 11266: u64 [s1 + 0x40] = a2\n 11269: i32 a0 = a2 + 0\n 11271: a1 = 0x20\n 11274: u64 [s1 + 0x38] = a0\n 11277: ra = 176, jump @0\n      : @199 [@dyn 88] (gas: 51)\n 11283: u8 [a0 + 31] = 0\n 11286: u8 [a0 + 30] = 0\n 11289: u8 [a0 + 29] = 0\n 11292: u8 [a0 + 28] = 0\n 11295: u8 [a0 + 27] = 0\n 11298: u8 [a0 + 26] = 0\n 11301: u8 [a0 + 25] = 0\n 11304: u8 [a0 + 24] = 0\n 11307: u8 [a0 + 23] = 0\n 11310: u8 [a0 + 22] = 0\n 11313: u8 [a0 + 21] = 0\n 11316: u8 [a0 + 20] = 0\n 11319: u8 [a0 + 19] = 0\n 11322: u8 [a0 + 18] = 0\n 11325: u8 [a0 + 17] = 0\n 11328: u8 [a0 + 16] = 0\n 11331: u8 [a0 + 15] = 0\n 11334: u8 [a0 + 14] = 0\n 11337: u8 [a0 + 13] = 0\n 11340: u8 [a0 + 12] = 0\n 11343: u8 [a0 + 11] = 0\n 11346: u8 [a0 + 10] = 0\n 11349: u8 [a0 + 9] = 0\n 11352: u8 [a0 + 8] = 0\n 11355: u8 [a0 + 7] = 0\n 11358: u8 [a0 + 6] = 0\n 11361: u8 [a0 + 5] = 0\n 11364: u8 [a0 + 4] = 0\n 11367: u8 [a0 + 3] = 0xa0\n 11372: u8 [a0 + 2] = 0x79\n 11376: u8 [a0 + 1] = 0xc3\n 11381: u8 [a0 + 0] = 0x8\n 11384: a1 = u64 [s1 + 0x40]\n 11387: a0 = a1 + 0x4\n 11390: a1 = a0 <u a1\n 11393: a3 = u64 [s1 + 0x58]\n 11396: a2 = a3 + a1\n 11399: a3 = a2 <u a3\n 11402: a3 = a1 if a1 == 0\n 11405: a1 = u64 [s1 + 0x50]\n 11408: a3 = a3 + a1\n 11411: a1 = a3 <u a1\n 11414: a4 = u64 [s1 + 0x48]\n 11417: a4 = a4 + a1\n 11420: u64 [s1 + 0x68] = a2\n 11423: u64 [s1 + 0x60] = a0\n 11426: u64 [s1 + 0x70] = a3\n 11429: a0 = s1 + 0x80\n 11433: a1 = s1 + 0x60\n 11436: u64 [s1 + 0x78] = a4\n 11439: ra = 178, jump @174\n      : @200 [@dyn 89] (gas: 5)\n 11445: a0 = u64 [s1 + 0x88]\n 11449: t0 = u64 [s1 + 0x98]\n 11453: t1 = u64 [s1 + 0x80]\n 11457: a3 = u64 [s1 + 0x90]\n 11461: fallthrough\n      : @201 (gas: 27)\n 11462: a1 = u64 [s1 + 0x58]\n 11465: a4 = a0 ^ a1\n 11468: a5 = a0 <u a1\n 11471: ra = a1\n 11473: t2 = u64 [s1 + 0x40]\n 11476: a1 = t1 <u t2\n 11479: a5 = a1 if a4 == 0\n 11482: a2 = u64 [s1 + 0x50]\n 11485: a4 = a3 - a2\n 11488: a3 = a3 <u a2\n 11491: a2 = u64 [s1 + 0x48]\n 11494: a2 = t0 - a2\n 11497: a2 = a2 - a3\n 11500: a3 = a4 <u a5\n 11503: a2 = a2 - a3\n 11506: a4 = a4 - a5\n 11509: a0 = a0 - ra\n 11512: a1 = a0 - a1\n 11515: a0 = t1 - t2\n 11518: a1 = a1 | a2\n 11521: a2 = a0 | a4\n 11524: a2 = a2 | a1\n 11527: a1 = a1 | a4\n 11530: a2 = a2 >> 0x20\n 11533: a1 = a1 << 0x20\n 11536: a1 = a1 | a2\n 11539: jump @203 if a1 == 0\n      : @202 (gas: 1)\n 11542: trap\n      : @203 (gas: 4)\n 11543: i32 a1 = a0 + 0\n 11545: u64 [s1 + 0x58] = a1\n 11548: a0 = u64 [s1 + 0x38]\n 11551: ra = 180, jump @0\n      : @204 [@dyn 90] (gas: 6)\n 11557: i32 a1 = a0 + 0\n 11559: a0 = 0x1\n 11562: a2 = u64 [s1 + 0x58]\n 11565: ra = 0xb6\n 11569: ecalli 12 // 'seal_return'\n 11571: fallthrough\n      : @205 [@dyn 91] (gas: 19)\n 11572: a2 = u64 [a1]\n 11574: a4 = u64 [a1 + 0x8]\n 11577: t0 = u64 [a1 + 0x18]\n 11580: a1 = u64 [a1 + 0x10]\n 11583: a5 = a2 >> 0x38\n 11586: a3 = a4 << 0x8\n 11589: a3 = a3 | a5\n 11592: a4 = a4 >> 0x38\n 11595: a5 = a1 << 0x8\n 11598: a4 = a4 | a5\n 11601: a1 = a1 >> 0x38\n 11604: t0 = t0 << 0x8\n 11607: a1 = t0 | a1\n 11610: a2 = a2 << 0x8\n 11613: u64 [a0] = a2\n 11615: u64 [a0 + 0x18] = a1\n 11618: u64 [a0 + 0x10] = a4\n 11621: u64 [a0 + 0x8] = a3\n 11624: ret\n      : @206 (gas: 17)\n 11626: sp = sp + 0xffffffffffffffa0\n 11629: u64 [sp + 0x58] = ra\n 11632: u64 [sp + 0x50] = s0\n 11635: u64 [sp + 0x48] = s1\n 11638: a3 = u64 [a1 + 0x18]\n 11641: a4 = u64 [a1 + 0x10]\n 11644: a5 = u64 [a1 + 0x8]\n 11647: s1 = u64 [a1]\n 11649: a1 = a5 | a3\n 11652: a2 = s1 | a4\n 11655: a2 = a2 | a1\n 11658: a2 = a2 >> 0x20\n 11661: a1 = a1 | a4\n 11664: a1 = a1 << 0x20\n 11667: a1 = a1 | a2\n 11670: u64 [sp + 0x28] = a0\n 11673: jump @213 if a1 != 0\n      : @207 (gas: 19)\n 11677: a0 = s1 + 0x20\n 11680: u64 [sp + 0x30] = a0\n 11683: a0 = a0 <u s1\n 11686: a1 = a5 + a0\n 11689: u64 [sp + 0x40] = a1\n 11692: u64 [sp + 0x8] = a5\n 11695: s0 = a1 <u a5\n 11698: s0 = a0 if a0 == 0\n 11701: s0 = s0 + a4\n 11704: u64 [sp + 0x10] = a4\n 11707: a0 = s0 <u a4\n 11710: u64 [sp + 0x18] = a3\n 11713: a0 = a0 + a3\n 11716: u64 [sp + 0x38] = a0\n 11719: u64 [sp] = s1\n 11721: i32 a0 = s1 + 0\n 11723: a1 = 0x20\n 11726: s1 = 0x20\n 11729: ra = 184, jump @0\n      : @208 [@dyn 92] (gas: 45)\n 11735: u8 [a0 + 0x1f] = s1\n 11738: a1 = u64 [sp + 0x30]\n 11741: s1 = a1\n 11743: a1 = a1 | s0\n 11746: a2 = u64 [sp + 0x40]\n 11749: a4 = u64 [sp + 0x38]\n 11752: a2 = a2 | a4\n 11755: a1 = a1 | a2\n 11758: a1 = a1 >> 0x20\n 11761: u64 [sp + 0x20] = s0\n 11764: a2 = a2 | s0\n 11767: a2 = a2 << 0x20\n 11770: a1 = a1 | a2\n 11773: u8 [a0 + 30] = 0\n 11776: u8 [a0 + 29] = 0\n 11779: u8 [a0 + 28] = 0\n 11782: u8 [a0 + 27] = 0\n 11785: u8 [a0 + 26] = 0\n 11788: u8 [a0 + 25] = 0\n 11791: u8 [a0 + 24] = 0\n 11794: u8 [a0 + 23] = 0\n 11797: u8 [a0 + 22] = 0\n 11800: u8 [a0 + 21] = 0\n 11803: u8 [a0 + 20] = 0\n 11806: u8 [a0 + 19] = 0\n 11809: u8 [a0 + 18] = 0\n 11812: u8 [a0 + 17] = 0\n 11815: u8 [a0 + 16] = 0\n 11818: u8 [a0 + 15] = 0\n 11821: u8 [a0 + 14] = 0\n 11824: u8 [a0 + 13] = 0\n 11827: u8 [a0 + 12] = 0\n 11830: u8 [a0 + 11] = 0\n 11833: u8 [a0 + 10] = 0\n 11836: u8 [a0 + 9] = 0\n 11839: u8 [a0 + 8] = 0\n 11842: u8 [a0 + 7] = 0\n 11845: u8 [a0 + 6] = 0\n 11848: u8 [a0 + 5] = 0\n 11851: u8 [a0 + 4] = 0\n 11854: u8 [a0 + 3] = 0\n 11857: u8 [a0 + 2] = 0\n 11860: u8 [a0 + 1] = 0\n 11863: u8 [a0 + 0] = 0\n 11865: jump @213 if a1 != 0\n      : @209 (gas: 4)\n 11869: i32 s0 = s1 + 0\n 11871: a1 = 0x20\n 11874: a0 = s0\n 11876: ra = 186, jump @0\n      : @210 [@dyn 93] (gas: 41)\n 11882: u8 [a0 + 31] = 0x17\n 11886: u8 [a0 + 30] = 0\n 11889: u8 [a0 + 29] = 0\n 11892: u8 [a0 + 28] = 0\n 11895: u8 [a0 + 27] = 0\n 11898: u8 [a0 + 26] = 0\n 11901: u8 [a0 + 25] = 0\n 11904: u8 [a0 + 24] = 0\n 11907: u8 [a0 + 23] = 0\n 11910: u8 [a0 + 22] = 0\n 11913: u8 [a0 + 21] = 0\n 11916: u8 [a0 + 20] = 0\n 11919: u8 [a0 + 19] = 0\n 11922: u8 [a0 + 18] = 0\n 11925: u8 [a0 + 17] = 0\n 11928: u8 [a0 + 16] = 0\n 11931: u8 [a0 + 15] = 0\n 11934: u8 [a0 + 14] = 0\n 11937: u8 [a0 + 13] = 0\n 11940: u8 [a0 + 12] = 0\n 11943: u8 [a0 + 11] = 0\n 11946: u8 [a0 + 10] = 0\n 11949: u8 [a0 + 9] = 0\n 11952: u8 [a0 + 8] = 0\n 11955: u8 [a0 + 7] = 0\n 11958: u8 [a0 + 6] = 0\n 11961: u8 [a0 + 5] = 0\n 11964: u8 [a0 + 4] = 0\n 11967: u8 [a0 + 3] = 0\n 11970: u8 [a0 + 2] = 0\n 11973: u8 [a0 + 1] = 0\n 11976: a1 = u64 [sp + 0x20]\n 11979: a2 = u64 [sp + 0x38]\n 11982: a1 = a1 | a2\n 11985: a2 = 0xffffffe0\n 11995: a2 = s1 <u a2\n 11998: a3 = u64 [sp + 0x40]\n 12001: a2 = 0 if a3 != 0\n 12003: a2 = 0 if a1 != 0\n 12005: u8 [a0 + 0] = 0\n 12007: jump @213 if a2 == 0\n      : @211 (gas: 3)\n 12011: i32 a0 = s0 + 0x20\n 12014: a1 = 0x20\n 12017: ra = 188, jump @0\n      : @212 [@dyn 94] (gas: 55)\n 12023: u8 [a0 + 31] = 0\n 12026: u8 [a0 + 30] = 0\n 12029: u8 [a0 + 29] = 0\n 12032: u8 [a0 + 28] = 0\n 12035: u8 [a0 + 27] = 0\n 12038: u8 [a0 + 26] = 0\n 12041: u8 [a0 + 25] = 0\n 12044: u8 [a0 + 24] = 0\n 12047: u8 [a0 + 23] = 0\n 12050: u8 [a0 + 22] = 0x64\n 12054: u8 [a0 + 21] = 0x65\n 12058: u8 [a0 + 20] = 0x64\n 12062: u8 [a0 + 19] = 0x6e\n 12066: u8 [a0 + 18] = 0x75\n 12070: u8 [a0 + 17] = 0x66\n 12074: u8 [a0 + 16] = 0x20\n 12078: u8 [a0 + 15] = 0x79\n 12082: u8 [a0 + 14] = 0x64\n 12086: u8 [a0 + 13] = 0x61\n 12090: u8 [a0 + 12] = 0x65\n 12094: u8 [a0 + 11] = 0x72\n 12098: u8 [a0 + 10] = 0x6c\n 12102: u8 [a0 + 9] = 0x61\n 12106: u8 [a0 + 8] = 0x20\n 12110: u8 [a0 + 7] = 0x74\n 12114: a5 = 0x63\n 12117: u8 [a0 + 0x6] = a5\n 12120: u8 [a0 + 5] = 0x61\n 12124: u8 [a0 + 4] = 0x72\n 12128: u8 [a0 + 3] = 0x74\n 12132: u8 [a0 + 2] = 0x6e\n 12136: u8 [a0 + 1] = 0x6f\n 12140: u8 [a0] = a5\n 12142: a1 = u64 [sp]\n 12144: a0 = a1 + 0x60\n 12147: a1 = a0 <u a1\n 12150: a3 = u64 [sp + 0x8]\n 12153: a2 = a3 + a1\n 12156: a3 = a2 <u a3\n 12159: a3 = a1 if a1 == 0\n 12162: a1 = u64 [sp + 0x10]\n 12165: a3 = a3 + a1\n 12168: a1 = a3 <u a1\n 12171: a4 = u64 [sp + 0x18]\n 12174: a1 = a1 + a4\n 12177: a4 = u64 [sp + 0x28]\n 12180: u64 [a4] = a0\n 12182: u64 [a4 + 0x8] = a2\n 12185: u64 [a4 + 0x10] = a3\n 12188: u64 [a4 + 0x18] = a1\n 12191: ra = u64 [sp + 0x58]\n 12194: s0 = u64 [sp + 0x50]\n 12197: s1 = u64 [sp + 0x48]\n 12200: sp = sp + 0x60\n 12203: ret\n      : @213 (gas: 1)\n 12205: trap\n      : @214 (gas: 2)\n 12206: a0 = u8 [sp + 0x100]\n 12210: jump @216 if a0 != 0\n      : @215 (gas: 179)\n 12214: i32 a0 = sp + 0x80\n 12218: ecalli 8 // 'now'\n 12220: a0 = u64 [sp + 0x80]\n 12224: u64 [sp + 0x18] = a0\n 12227: a0 = u64 [sp + 0x88]\n 12231: u64 [sp + 0x10] = a0\n 12234: a0 = u64 [sp + 0x90]\n 12238: u64 [sp + 0x8] = a0\n 12241: s1 = u64 [sp + 0x98]\n 12245: u64 [sp + 248] = 0\n 12249: u64 [sp + 240] = 0\n 12253: u64 [sp + 232] = 0\n 12257: u64 [sp + 224] = 0x1\n 12262: u64 [sp + 280] = 0\n 12266: u64 [sp + 272] = 0\n 12270: u64 [sp + 264] = 0\n 12274: u64 [sp + 256] = 0\n 12278: u32 [sp + 192] = 0x20\n 12283: i32 a1 = sp + 0xe0\n 12287: i32 a3 = sp + 0x100\n 12291: i32 a4 = sp + 0xc0\n 12295: a2 = 0xffffffffffffffff\n 12298: a0 = 0\n 12300: ecalli 7 // 'get_storage'\n 12302: u64 [sp + 248] = 0\n 12306: u64 [sp + 240] = 0\n 12310: u64 [sp + 232] = 0\n 12314: u64 [sp + 224] = 0x1\n 12319: u64 [sp + 0x118] = s1\n 12323: a0 = u64 [sp + 0x8]\n 12326: u64 [sp + 0x110] = a0\n 12330: a0 = u64 [sp + 0x10]\n 12333: u64 [sp + 0x108] = a0\n 12337: a0 = u64 [sp + 0x18]\n 12340: u64 [sp + 0x100] = a0\n 12344: i32 a1 = sp + 0xe0\n 12348: i32 a3 = sp + 0x100\n 12352: a2 = 0xffffffffffffffff\n 12355: a4 = 0x20\n 12358: a0 = 0\n 12360: ecalli 14 // 'set_storage'\n 12362: u64 [sp + 248] = 0\n 12366: u64 [sp + 240] = 0\n 12370: u64 [sp + 232] = 0\n 12374: u64 [sp + 224] = 0\n 12378: u64 [sp + 280] = 0\n 12382: u64 [sp + 272] = 0\n 12386: u64 [sp + 264] = 0\n 12390: u64 [sp + 256] = 0\n 12394: u32 [sp + 192] = 0x20\n 12399: i32 a1 = sp + 0xe0\n 12403: i32 a3 = sp + 0x100\n 12407: i32 a4 = sp + 0xc0\n 12411: a2 = 0xffffffffffffffff\n 12414: a0 = 0\n 12416: ecalli 7 // 'get_storage'\n 12418: u64 [sp + 248] = 0\n 12422: u64 [sp + 240] = 0\n 12426: u64 [sp + 232] = 0\n 12430: u64 [sp + 224] = 0\n 12434: a0 = u64 [sp + 0x20]\n 12437: u64 [sp + 0x118] = a0\n 12441: a0 = u64 [sp + 0x28]\n 12444: u64 [sp + 0x110] = a0\n 12448: a0 = u64 [sp + 0x30]\n 12451: u64 [sp + 0x108] = a0\n 12455: a0 = u64 [sp + 0x38]\n 12458: u64 [sp + 0x100] = a0\n 12462: i32 a1 = sp + 0xe0\n 12466: i32 a3 = sp + 0x100\n 12470: a2 = 0xffffffffffffffff\n 12473: a4 = 0x20\n 12476: a0 = 0\n 12478: ecalli 14 // 'set_storage'\n 12480: u64 [sp + 248] = 0\n 12484: u64 [sp + 240] = 0\n 12488: u64 [sp + 232] = 0\n 12492: u64 [sp + 224] = 0x2\n 12497: u64 [sp + 280] = 0\n 12501: u64 [sp + 272] = 0\n 12505: u64 [sp + 264] = 0\n 12509: u64 [sp + 256] = 0\n 12513: u32 [sp + 192] = 0x20\n 12518: i32 a1 = sp + 0xe0\n 12522: i32 a3 = sp + 0x100\n 12526: i32 a4 = sp + 0xc0\n 12530: a2 = 0xffffffffffffffff\n 12533: a0 = 0\n 12535: ecalli 7 // 'get_storage'\n 12537: a0 = u64 [sp + 0x100]\n 12541: a1 = u64 [sp + 0x108]\n 12545: a2 = u64 [sp + 0x110]\n 12549: a3 = u64 [sp + 0x118]\n 12553: a0 = a0 & 0xffffffffffffff00\n 12557: a0 = a0 | 0x1\n 12560: u64 [sp + 248] = 0\n 12564: u64 [sp + 240] = 0\n 12568: u64 [sp + 232] = 0\n 12572: u64 [sp + 224] = 0x2\n 12577: u64 [sp + 0x118] = a3\n 12581: u64 [sp + 0x110] = a2\n 12585: u64 [sp + 0x108] = a1\n 12589: u64 [sp + 0x100] = a0\n 12593: i32 a1 = sp + 0xe0\n 12597: i32 a3 = sp + 0x100\n 12601: a2 = 0xffffffffffffffff\n 12604: a4 = 0x20\n 12607: a0 = 0\n 12609: ecalli 14 // 'set_storage'\n 12611: i32 a0 = sp + 0xa0\n 12615: ecalli 6 // 'caller'\n 12617: a0 = u64 [sp + 0xa8]\n 12621: a1 = i32 [sp + 0xb0]\n 12625: a2 = u64 [sp + 0xa0]\n 12629: a3 = reverse a0\n 12631: u64 [sp + 0x30] = a3\n 12634: a0 = a3 << 0x20\n 12637: a1 = reverse a1\n 12639: a1 = a1 >> 0x20\n 12642: a0 = a0 | a1\n 12645: u64 [sp + 0x38] = a0\n 12648: a0 = a3 >> 0x20\n 12651: s1 = reverse a2\n 12653: a1 = s1 << 0x20\n 12656: a0 = a0 | a1\n 12659: u64 [sp + 0x28] = a0\n 12662: u64 [sp + 248] = 0\n 12666: u64 [sp + 240] = 0\n 12670: u64 [sp + 232] = 0\n 12674: u64 [sp + 224] = 0x2\n 12679: u64 [sp + 280] = 0\n 12683: u64 [sp + 272] = 0\n 12687: u64 [sp + 264] = 0\n 12691: u64 [sp + 256] = 0\n 12695: u32 [sp + 192] = 0x20\n 12700: i32 a1 = sp + 0xe0\n 12704: i32 a3 = sp + 0x100\n 12708: i32 a4 = sp + 0xc0\n 12712: a2 = 0xffffffffffffffff\n 12715: a0 = 0\n 12717: ecalli 7 // 'get_storage'\n 12719: a0 = u64 [sp + 0x118]\n 12723: a1 = u8 [sp + 0x100]\n 12727: a2 = u64 [sp + 0x110]\n 12731: a3 = u64 [sp + 0x28]\n 12734: a3 = a3 << 0x8\n 12737: a4 = u64 [sp + 0x30]\n 12740: i32 a4 = a4 >> 0x18\n 12743: a3 = a3 | a4\n 12746: i32 a4 = s1 >> 0x18\n 12749: s1 = s1 >> 0x20\n 12752: s1 = s1 << 0x8\n 12755: a5 = u64 [sp + 0x38]\n 12758: a5 = a5 << 0x8\n 12761: a2 = a2 >> 0x28\n 12764: a2 = a2 << 0x28\n 12767: a1 = a1 | a5\n 12770: a2 = a2 | a4\n 12773: a2 = a2 | s1\n 12776: u64 [sp + 248] = 0\n 12780: u64 [sp + 240] = 0\n 12784: u64 [sp + 232] = 0\n 12788: u64 [sp + 224] = 0x2\n 12793: u64 [sp + 0x118] = a0\n 12797: u64 [sp + 0x110] = a2\n 12801: u64 [sp + 0x108] = a3\n 12805: u64 [sp + 0x100] = a1\n 12809: i32 a1 = sp + 0xe0\n 12813: i32 a3 = sp + 0x100\n 12817: a2 = 0xffffffffffffffff\n 12820: a4 = 0x20\n 12823: a0 = 0\n 12825: ecalli 14 // 'set_storage'\n 12827: sp = s0 + 0xfffffffffffffec0\n 12831: ra = u64 [sp + 0x138]\n 12835: s0 = u64 [sp + 0x130]\n 12839: s1 = u64 [sp + 0x128]\n 12843: sp = sp + 0x140\n 12847: ret\n      : @216 (gas: 3)\n 12849: a0 = 0x40\n 12852: a1 = 0x20\n 12855: ra = 190, jump @0\n      : @217 [@dyn 95] (gas: 103)\n 12861: a1 = u8 [a0 + 0x11]\n 12864: a2 = u8 [a0 + 0x10]\n 12867: a3 = u8 [a0 + 0x12]\n 12870: a4 = u8 [a0 + 0x13]\n 12873: a1 = a1 << 0x8\n 12876: a1 = a1 | a2\n 12879: a3 = a3 << 0x10\n 12882: a4 = a4 << 0x18\n 12885: a3 = a3 | a4\n 12888: a1 = a1 | a3\n 12891: a2 = u8 [a0 + 0x15]\n 12894: a3 = u8 [a0 + 0x14]\n 12897: a4 = u8 [a0 + 0x16]\n 12900: a5 = u8 [a0 + 0x17]\n 12903: a2 = a2 << 0x8\n 12906: a2 = a2 | a3\n 12909: a4 = a4 << 0x10\n 12912: a5 = a5 << 0x18\n 12915: a4 = a4 | a5\n 12918: a2 = a2 | a4\n 12921: a2 = a2 << 0x20\n 12924: t0 = a2 | a1\n 12927: a2 = u8 [a0 + 0x1]\n 12930: a3 = u8 [a0]\n 12932: a4 = u8 [a0 + 0x2]\n 12935: a5 = u8 [a0 + 0x3]\n 12938: a2 = a2 << 0x8\n 12941: a2 = a2 | a3\n 12944: a4 = a4 << 0x10\n 12947: a5 = a5 << 0x18\n 12950: a4 = a4 | a5\n 12953: a2 = a2 | a4\n 12956: a3 = u8 [a0 + 0x5]\n 12959: a4 = u8 [a0 + 0x4]\n 12962: a5 = u8 [a0 + 0x6]\n 12965: s1 = u8 [a0 + 0x7]\n 12968: a3 = a3 << 0x8\n 12971: a3 = a3 | a4\n 12974: a5 = a5 << 0x10\n 12977: s1 = s1 << 0x18\n 12980: a5 = a5 | s1\n 12983: a3 = a3 | a5\n 12986: a3 = a3 << 0x20\n 12989: a2 = a2 | a3\n 12992: a3 = u8 [a0 + 0x19]\n 12995: a4 = u8 [a0 + 0x18]\n 12998: a5 = u8 [a0 + 0x1a]\n 13001: s1 = u8 [a0 + 0x1b]\n 13004: a3 = a3 << 0x8\n 13007: a3 = a3 | a4\n 13010: a5 = a5 << 0x10\n 13013: s1 = s1 << 0x18\n 13016: a5 = a5 | s1\n 13019: a3 = a3 | a5\n 13022: a4 = u8 [a0 + 0x1d]\n 13025: a5 = u8 [a0 + 0x1c]\n 13028: s1 = u8 [a0 + 0x1e]\n 13031: a1 = u8 [a0 + 0x1f]\n 13034: a4 = a4 << 0x8\n 13037: a4 = a4 | a5\n 13040: s1 = s1 << 0x10\n 13043: a1 = a1 << 0x18\n 13046: a1 = a1 | s1\n 13049: a1 = a1 | a4\n 13052: a1 = a1 << 0x20\n 13055: a3 = a3 | a1\n 13058: a1 = u8 [a0 + 0x9]\n 13061: a4 = u8 [a0 + 0x8]\n 13064: a5 = u8 [a0 + 0xa]\n 13067: s1 = u8 [a0 + 0xb]\n 13070: a1 = a1 << 0x8\n 13073: a1 = a1 | a4\n 13076: a5 = a5 << 0x10\n 13079: s1 = s1 << 0x18\n 13082: a5 = a5 | s1\n 13085: a1 = a1 | a5\n 13088: a4 = u8 [a0 + 0xd]\n 13091: a5 = u8 [a0 + 0xc]\n 13094: s1 = u8 [a0 + 0xe]\n 13097: a0 = u8 [a0 + 0xf]\n 13100: a4 = a4 << 0x8\n 13103: a4 = a4 | a5\n 13106: s1 = s1 << 0x10\n 13109: a0 = a0 << 0x18\n 13112: a0 = a0 | s1\n 13115: a0 = a0 | a4\n 13118: a0 = a0 << 0x20\n 13121: a0 = a0 | a1\n 13124: s1 = reverse a0\n 13126: a1 = reverse a3\n 13128: a2 = reverse a2\n 13130: a0 = reverse t0\n 13132: u64 [sp + 0x38] = a0\n 13135: u64 [sp + 0x30] = a2\n 13138: a0 = a0 | a2\n 13141: a2 = a1\n 13143: a1 = a1 | s1\n 13146: a1 = a1 | a0\n 13149: a1 = a1 >> 0x20\n 13152: a0 = a0 | s1\n 13155: a0 = a0 << 0x20\n 13158: a0 = a0 | a1\n 13161: jump @221 if a0 != 0\n      : @218 (gas: 5)\n 13165: u64 [sp + 0x28] = a2\n 13168: i32 a0 = a2 + 0\n 13170: a1 = 0x20\n 13173: u64 [sp + 0x20] = a0\n 13176: ra = 192, jump @0\n      : @219 [@dyn 96] (gas: 50)\n 13182: u8 [a0 + 31] = 0\n 13185: u8 [a0 + 30] = 0\n 13188: u8 [a0 + 29] = 0\n 13191: u8 [a0 + 28] = 0\n 13194: u8 [a0 + 27] = 0\n 13197: u8 [a0 + 26] = 0\n 13200: u8 [a0 + 25] = 0\n 13203: u8 [a0 + 24] = 0\n 13206: u8 [a0 + 23] = 0\n 13209: u8 [a0 + 22] = 0\n 13212: u8 [a0 + 21] = 0\n 13215: u8 [a0 + 20] = 0\n 13218: u8 [a0 + 19] = 0\n 13221: u8 [a0 + 18] = 0\n 13224: u8 [a0 + 17] = 0\n 13227: u8 [a0 + 16] = 0\n 13230: u8 [a0 + 15] = 0\n 13233: u8 [a0 + 14] = 0\n 13236: u8 [a0 + 13] = 0\n 13239: u8 [a0 + 12] = 0\n 13242: u8 [a0 + 11] = 0\n 13245: u8 [a0 + 10] = 0\n 13248: u8 [a0 + 9] = 0\n 13251: u8 [a0 + 8] = 0\n 13254: u8 [a0 + 7] = 0\n 13257: u8 [a0 + 6] = 0\n 13260: u8 [a0 + 5] = 0\n 13263: u8 [a0 + 4] = 0\n 13266: u8 [a0 + 3] = 0xa0\n 13271: u8 [a0 + 2] = 0x79\n 13275: u8 [a0 + 1] = 0xc3\n 13280: u8 [a0 + 0] = 0x8\n 13283: a1 = u64 [sp + 0x28]\n 13286: a0 = a1 + 0x4\n 13289: a1 = a0 <u a1\n 13292: a3 = u64 [sp + 0x38]\n 13295: a2 = a3 + a1\n 13298: a3 = a2 <u a3\n 13301: a3 = a1 if a1 == 0\n 13304: a3 = a3 + s1\n 13307: a1 = a3 <u s1\n 13310: a4 = u64 [sp + 0x30]\n 13313: a4 = a4 + a1\n 13316: u64 [sp + 0x48] = a2\n 13319: u64 [sp + 0x40] = a0\n 13322: u64 [sp + 0x50] = a3\n 13325: a0 = sp + 0x60\n 13328: a1 = sp + 0x40\n 13331: u64 [sp + 0x58] = a4\n 13334: ra = 194, jump @206\n      : @220 [@dyn 97] (gas: 30)\n 13340: a0 = u64 [sp + 0x68]\n 13343: t0 = u64 [sp + 0x78]\n 13346: t1 = u64 [sp + 0x60]\n 13349: a3 = u64 [sp + 0x70]\n 13352: a1 = u64 [sp + 0x38]\n 13355: a4 = a0 ^ a1\n 13358: a5 = a0 <u a1\n 13361: t2 = a1\n 13363: a2 = u64 [sp + 0x28]\n 13366: a1 = t1 <u a2\n 13369: a5 = a1 if a4 == 0\n 13372: a4 = a3 - s1\n 13375: a3 = a3 <u s1\n 13378: s1 = u64 [sp + 0x30]\n 13381: s1 = t0 - s1\n 13384: s1 = s1 - a3\n 13387: a3 = a4 <u a5\n 13390: s1 = s1 - a3\n 13393: a4 = a4 - a5\n 13396: a0 = a0 - t2\n 13399: a1 = a0 - a1\n 13402: a0 = t1 - a2\n 13405: a1 = a1 | s1\n 13408: a2 = a0 | a4\n 13411: a2 = a2 | a1\n 13414: a1 = a1 | a4\n 13417: a2 = a2 >> 0x20\n 13420: a1 = a1 << 0x20\n 13423: a1 = a1 | a2\n 13426: jump @222 if a1 == 0\n      : @221 (gas: 1)\n 13429: trap\n      : @222 (gas: 4)\n 13430: i32 s1 = a0 + 0\n 13432: a0 = u64 [sp + 0x20]\n 13435: a1 = s1\n 13437: ra = 196, jump @0\n      : @223 [@dyn 98] (gas: 7)\n 13443: i32 a1 = a0 + 0\n 13445: a0 = 0x1\n 13448: a2 = s1\n 13450: ecalli 12 // 'seal_return'\n 13452: a0 = 0\n 13454: ra = 0xc6\n 13458: jump @10\n      : @224 [export #0: 'call'] (gas: 2)\n 13461: a0 = 0\n 13463: ra = 198, jump @10\n      : @225 [@dyn 99] [export #1: 'deploy'] (gas: 2)\n 13469: a0 = 0x1\n 13472: ra = 200, jump @10\n      : @226 [@dyn 100] (gas: 43)\n 13478: sp = sp + 0xffffffffffffffa0\n 13481: u64 [sp + 0x58] = ra\n 13484: u64 [sp + 0x50] = s0\n 13487: u64 [sp + 0x48] = s1\n 13490: s0 = sp + 0x60\n 13493: sp = sp & 0xfffffffffffffff0\n 13496: a2 = u64 [a1]\n 13498: a3 = u64 [a1 + 0x8]\n 13501: a4 = u64 [a1 + 0x10]\n 13504: a1 = u64 [a1 + 0x18]\n 13507: s1 = a0\n 13509: u64 [sp + 0x18] = a1\n 13512: u64 [sp + 0x10] = a4\n 13515: u64 [sp + 0x8] = a3\n 13518: a0 = sp + 0x20\n 13521: a1 = sp\n 13523: u64 [sp] = a2\n 13525: a2 = u64 [a1 + 0x10]\n 13528: a3 = u64 [a1 + 0x18]\n 13531: a4 = u64 [a1 + 0x8]\n 13534: a1 = u64 [a1]\n 13536: a3 = a3 | a4\n 13539: a1 = a1 | a2\n 13542: a1 = a1 | a3\n 13545: a1 = a1 >u 0\n 13547: u64 [a0 + 24] = 0\n 13550: u64 [a0 + 16] = 0\n 13553: u64 [a0 + 8] = 0\n 13556: u64 [a0] = a1\n 13558: a0 = u64 [sp + 0x30]\n 13561: a1 = u64 [sp + 0x38]\n 13564: a2 = u64 [sp + 0x20]\n 13567: a3 = u64 [sp + 0x28]\n 13570: u64 [s1 + 0x10] = a0\n 13573: u64 [s1 + 0x18] = a1\n 13576: u64 [s1] = a2\n 13578: u64 [s1 + 0x8] = a3\n 13581: sp = s0 + 0xffffffffffffffa0\n 13584: ra = u64 [sp + 0x58]\n 13587: s0 = u64 [sp + 0x50]\n 13590: s1 = u64 [sp + 0x48]\n 13593: sp = sp + 0x60\n 13596: ret\n",
						"bytecode": {
							"object": ""
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {
							"changeOwner(address)": "a6f9dae1",
							"deadline()": "29dcb0cf",
							"deposit(uint256)": "b6b55f25",
							"initialTime()": "9ced0e9b",
							"isContractFunded()": "c934e08e",
							"owner()": "8da5cb5b",
							"withdraw()": "3ccfd60b"
						}
					},
					"irOptimized": "/// @use-src 0:\"contracts/SwappBox.sol\"\nobject \"Box_91\" {\n    code {\n        {\n            /// @src 0:71:822  \"contract Box{...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            let _1 := allocate_unbounded()\n            codecopy(_1, dataoffset(\"Box_91_deployed\"), datasize(\"Box_91_deployed\"))\n            return(_1, datasize(\"Box_91_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n    }\n    /// @use-src 0:\"contracts/SwappBox.sol\"\n    object \"Box_91_deployed\" {\n        code {\n            {\n                /// @src 0:71:822  \"contract Box{...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let selector := shift_right_unsigned(calldataload(0))\n                    switch selector\n                    case 0x29dcb0cf { external_fun_deadline() }\n                    case 0x3ccfd60b { external_fun_withdraw() }\n                    case 0x8da5cb5b { external_fun_owner() }\n                    case 0x9ced0e9b { external_fun_initialTime() }\n                    case 0xa6f9dae1 { external_fun_changeOwner() }\n                    case 0xb6b55f25 { external_fun_deposit() }\n                    case 0xc934e08e {\n                        external_fun_isContractFunded()\n                    }\n                    default { }\n                }\n                revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            }\n            function shift_right_unsigned(value) -> newValue\n            { newValue := shr(224, value) }\n            function allocate_unbounded() -> memPtr\n            { memPtr := mload(64) }\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            { revert(0, 0) }\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            { revert(0, 0) }\n            function abi_decode(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function shift_right_unsigned_dynamic(bits, value) -> newValue\n            { newValue := shr(bits, value) }\n            function cleanup_from_storage_uint256(value) -> cleaned\n            { cleaned := value }\n            function extract_from_storage_value_dynamict_uint256(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_uint256(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_uint256(sload(slot), offset)\n            }\n            /// @ast-id 3 @src 0:89:109  \"uint public deadline\"\n            function getter_fun_deadline() -> ret\n            {\n                let slot := 0\n                let offset := 0\n                ret := read_from_storage_split_dynamic_uint256(slot, offset)\n            }\n            /// @src 0:71:822  \"contract Box{...\"\n            function cleanup_uint256(value) -> cleaned\n            { cleaned := value }\n            function abi_encode_uint256_to_uint256(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function abi_encode_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_uint256_to_uint256(value0, add(headStart, 0))\n            }\n            function external_fun_deadline()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_deadline()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_encode_tuple(headStart) -> tail\n            { tail := add(headStart, 0) }\n            function external_fun_withdraw()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                fun_withdraw()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function cleanup_from_storage_address_payable(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function extract_from_storage_value_dynamict_address_payable(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_address_payable(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_address_payable(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_address_payable(sload(slot), offset)\n            }\n            /// @ast-id 9 @src 0:179:207  \"address payable public owner\"\n            function getter_fun_owner() -> ret\n            {\n                let slot := 2\n                let offset := 1\n                ret := read_from_storage_split_dynamic_address_payable(slot, offset)\n            }\n            /// @src 0:71:822  \"contract Box{...\"\n            function cleanup_uint160(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function cleanup_address_payable(value) -> cleaned\n            {\n                cleaned := cleanup_uint160(value)\n            }\n            function abi_encode_address_payable_to_address_payable(value, pos)\n            {\n                mstore(pos, cleanup_address_payable(value))\n            }\n            function abi_encode_address_payable(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_address_payable_to_address_payable(value0, add(headStart, 0))\n            }\n            function external_fun_owner()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_owner()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_address_payable(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            /// @ast-id 5 @src 0:115:138  \"uint public initialTime\"\n            function getter_fun_initialTime() -> ret\n            {\n                let slot := 1\n                let offset := 0\n                ret := read_from_storage_split_dynamic_uint256(slot, offset)\n            }\n            /// @src 0:71:822  \"contract Box{...\"\n            function external_fun_initialTime()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_initialTime()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function cleanup_address(value) -> cleaned\n            {\n                cleaned := cleanup_uint160(value)\n            }\n            function validator_revert_address(value)\n            {\n                if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n            }\n            function abi_decode_address(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_address(value)\n            }\n            function abi_decode_tuple_address(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n            }\n            function external_fun_changeOwner()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_address(4, calldatasize())\n                fun_changeOwner(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function validator_revert_uint256(value)\n            {\n                if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n            }\n            function abi_decode_uint256(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_uint256(value)\n            }\n            function abi_decode_tuple_uint256(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n            }\n            function external_fun_deposit()\n            {\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                fun_deposit(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function cleanup_from_storage_bool(value) -> cleaned\n            { cleaned := and(value, 0xff) }\n            function extract_from_storage_value_dynamict_bool(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_bool(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_bool(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_bool(sload(slot), offset)\n            }\n            /// @ast-id 7 @src 0:144:173  \"bool public  isContractFunded\"\n            function getter_fun_isContractFunded() -> ret\n            {\n                let slot := 2\n                let offset := 0\n                ret := read_from_storage_split_dynamic_bool(slot, offset)\n            }\n            /// @src 0:71:822  \"contract Box{...\"\n            function cleanup_bool(value) -> cleaned\n            {\n                cleaned := iszero(iszero(value))\n            }\n            function abi_encode_bool_to_bool(value, pos)\n            {\n                mstore(pos, cleanup_bool(value))\n            }\n            function abi_encode_bool(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_bool_to_bool(value0, add(headStart, 0))\n            }\n            function external_fun_isContractFunded()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_isContractFunded()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_bool(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            { revert(0, 0) }\n            function shift_right_8_unsigned(value) -> newValue\n            { newValue := shr(8, value) }\n            function extract_from_storage_value_offset_address_payable(slot_value) -> value\n            {\n                value := cleanup_from_storage_address_payable(shift_right_8_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_address_payable(slot) -> value\n            {\n                value := extract_from_storage_value_offset_address_payable(sload(slot))\n            }\n            function identity(value) -> ret\n            { ret := value }\n            function convert_uint160_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_uint160(value)))\n            }\n            function convert_uint160_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_payable_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function store_literal_in_memory_978897ed65b2e5af5d002526b7872b151fa7174b4e2fd1e87ff9808e2d24c95e(memPtr)\n            {\n                mstore(add(memPtr, 0), \"you are not owner\")\n            }\n            function abi_encode_stringliteral_978897ed65b2e5af5d002526b7872b151fa7174b4e2fd1e87ff9808e2d24c95e(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 17)\n                store_literal_in_memory_978897ed65b2e5af5d002526b7872b151fa7174b4e2fd1e87ff9808e2d24c95e(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_978897ed65b2e5af5d002526b7872b151fa7174b4e2fd1e87ff9808e2d24c95e(tail)\n            }\n            function require_helper_stringliteral(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function convert_contract_Box_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function array_storeLengthForEncoding_bytes_nonPadded_inplace(pos, length) -> updated_pos\n            { updated_pos := pos }\n            function abi_encode_stringliteral_c5d2(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_bytes_nonPadded_inplace(pos, 0)\n                end := add(pos, 0)\n            }\n            function abi_encode_packed_stringliteral_c5d2(pos) -> end\n            {\n                pos := abi_encode_stringliteral_c5d2(pos)\n                end := pos\n            }\n            function round_up_to_mul_of(value) -> result\n            {\n                result := and(add(value, 31), not(31))\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function allocate_memory(size) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                finalize_allocation(memPtr, size)\n            }\n            function array_allocation_size_bytes(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := round_up_to_mul_of(length)\n                size := add(size, 0x20)\n            }\n            function allocate_memory_array_bytes(length) -> memPtr\n            {\n                let allocSize := array_allocation_size_bytes(length)\n                memPtr := allocate_memory(allocSize)\n                mstore(memPtr, length)\n            }\n            function zero_value_for_split_bytes() -> ret\n            { ret := 96 }\n            function extract_returndata() -> data\n            {\n                switch returndatasize()\n                case 0 {\n                    data := zero_value_for_split_bytes()\n                }\n                default {\n                    data := allocate_memory_array_bytes(returndatasize())\n                    returndatacopy(add(data, 0x20), 0, returndatasize())\n                }\n            }\n            function store_literal_in_memory_213aa065932c4e20e48a20823f0c33d5b1c95a5f89892b1b61c3181e9ee210f1(memPtr)\n            {\n                mstore(add(memPtr, 0), \"withdraw failed!\")\n            }\n            function abi_encode_stringliteral_213aa065932c4e20e48a20823f0c33d5b1c95a5f89892b1b61c3181e9ee210f1(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 16)\n                store_literal_in_memory_213aa065932c4e20e48a20823f0c33d5b1c95a5f89892b1b61c3181e9ee210f1(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_213a(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_213aa065932c4e20e48a20823f0c33d5b1c95a5f89892b1b61c3181e9ee210f1(tail)\n            }\n            function require_helper_stringliteral_213a(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_213a(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            /// @ast-id 77 @src 0:483:725  \"function withdraw() public {...\"\n            function fun_withdraw()\n            {\n                /// @src 0:528:533  \"owner\"\n                let _1 := read_from_storage_split_offset_address_payable(0x02)\n                let expr := _1\n                /// @src 0:537:547  \"msg.sender\"\n                let expr_1 := caller()\n                /// @src 0:528:547  \"owner == msg.sender\"\n                let expr_2 := eq(convert_address_payable_to_address(expr), cleanup_address(expr_1))\n                /// @src 0:520:568  \"require(owner == msg.sender,\\\"you are not owner\\\")\"\n                require_helper_stringliteral(expr_2)\n                /// @src 0:603:607  \"this\"\n                let expr_address := address()\n                /// @src 0:595:608  \"address(this)\"\n                let expr_3 := convert_contract_Box_to_address(expr_address)\n                /// @src 0:595:616  \"address(this).balance\"\n                let expr_4 := balance(expr_3)\n                /// @src 0:578:616  \"uint256 amount = address(this).balance\"\n                let var_amount := expr_4\n                /// @src 0:644:649  \"owner\"\n                let _2 := read_from_storage_split_offset_address_payable(0x02)\n                let expr_5 := _2\n                /// @src 0:644:654  \"owner.call\"\n                let expr_65_address := convert_address_payable_to_address(expr_5)\n                /// @src 0:661:667  \"amount\"\n                let _3 := var_amount\n                let expr_6 := _3\n                /// @src 0:644:668  \"owner.call{value:amount}\"\n                let expr_67_address := expr_65_address\n                let expr_value := expr_6\n                /// @src 0:644:672  \"owner.call{value:amount}(\\\"\\\")\"\n                let _4 := allocate_unbounded()\n                let _5 := sub(abi_encode_packed_stringliteral_c5d2(_4), _4)\n                let expr_component := call(gas(), expr_67_address, expr_value, _4, _5, 0, 0)\n                pop(extract_returndata())\n                /// @src 0:626:672  \"(bool success,) = owner.call{value:amount}(\\\"\\\")\"\n                let var_success := expr_component\n                /// @src 0:690:697  \"success\"\n                let _6 := var_success\n                let expr_7 := _6\n                /// @src 0:682:717  \"require(success,\\\"withdraw failed!\\\")\"\n                require_helper_stringliteral_213a(expr_7)\n            }\n            /// @src 0:71:822  \"contract Box{...\"\n            function convert_uint160_to_address_payable(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_to_address_payable(value) -> converted\n            {\n                converted := convert_uint160_to_address_payable(value)\n            }\n            function shift_left(value) -> newValue\n            { newValue := shl(8, value) }\n            function update_byte_slice_shift_1(value, toInsert) -> result\n            {\n                let mask := sub(shl(168, 1), 256)\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_address_payable_to_address_payable(value) -> converted\n            {\n                converted := convert_uint160_to_address_payable(value)\n            }\n            function prepare_store_address_payable(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_address_payable_to_address_payable(slot, value)\n            {\n                let convertedValue := convert_address_payable_to_address_payable(value)\n                sstore(slot, update_byte_slice_shift_1(sload(slot), prepare_store_address_payable(convertedValue)))\n            }\n            /// @ast-id 90 @src 0:731:820  \"function changeOwner(address _newOwner)public {...\"\n            function fun_changeOwner(var_newOwner)\n            {\n                /// @src 0:803:812  \"_newOwner\"\n                let _1 := var_newOwner\n                let expr := _1\n                /// @src 0:795:813  \"payable(_newOwner)\"\n                let expr_1 := convert_address_to_address_payable(expr)\n                /// @src 0:787:813  \"owner = payable(_newOwner)\"\n                update_storage_value_offset_address_payable_to_address_payable(0x02, expr_1)\n            }\n            /// @src 0:71:822  \"contract Box{...\"\n            function shift_right_0_unsigned(value) -> newValue\n            { newValue := shr(0, value) }\n            function extract_from_storage_value_offset_bool(slot_value) -> value\n            {\n                value := cleanup_from_storage_bool(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_bool(slot) -> value\n            {\n                value := extract_from_storage_value_offset_bool(sload(slot))\n            }\n            function store_literal_in_memory_c57a6ec4b9927c9dd7e51ad04ae0100f64df778f4f50c469bf1e8ebedc5ceb97(memPtr)\n            {\n                mstore(add(memPtr, 0), \"contract already funded\")\n            }\n            function abi_encode_stringliteral_c57a6ec4b9927c9dd7e51ad04ae0100f64df778f4f50c469bf1e8ebedc5ceb97(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 23)\n                store_literal_in_memory_c57a6ec4b9927c9dd7e51ad04ae0100f64df778f4f50c469bf1e8ebedc5ceb97(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_c57a(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_c57a6ec4b9927c9dd7e51ad04ae0100f64df778f4f50c469bf1e8ebedc5ceb97(tail)\n            }\n            function require_helper_stringliteral_c57a(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_c57a(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function shift_left_0(value) -> newValue\n            { newValue := shl(0, value) }\n            function update_byte_slice_shift(value, toInsert) -> result\n            {\n                let mask := not(0)\n                toInsert := shift_left_0(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_uint256_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_uint256(value)))\n            }\n            function prepare_store_uint256(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_uint256_to_uint256(slot, value)\n            {\n                let convertedValue := convert_uint256_to_uint256(value)\n                sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n            }\n            function update_byte_slice_shift_0(value, toInsert) -> result\n            {\n                let mask := 255\n                toInsert := shift_left_0(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_bool_to_bool(value) -> converted\n            {\n                converted := cleanup_bool(value)\n            }\n            function prepare_store_bool(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_bool_to_bool(slot, value)\n            {\n                let convertedValue := convert_bool_to_bool(value)\n                sstore(slot, update_byte_slice_shift_0(sload(slot), prepare_store_bool(convertedValue)))\n            }\n            /// @ast-id 43 @src 0:214:477  \"function deposit(uint _deadline) payable public{...\"\n            function fun_deposit(var_deadline)\n            {\n                /// @src 0:279:295  \"isContractFunded\"\n                let _1 := read_from_storage_split_offset_bool(0x02)\n                let expr := _1\n                /// @src 0:299:304  \"false\"\n                let expr_1 := 0x00\n                /// @src 0:279:304  \"isContractFunded == false\"\n                let expr_2 := eq(cleanup_bool(expr), cleanup_bool(expr_1))\n                /// @src 0:271:331  \"require(isContractFunded == false,\\\"contract already funded\\\")\"\n                require_helper_stringliteral_c57a(expr_2)\n                /// @src 0:355:370  \"block.timestamp\"\n                let expr_3 := timestamp()\n                /// @src 0:341:370  \"initialTime = block.timestamp\"\n                update_storage_value_offset_uint256_to_uint256(0x01, expr_3)\n                /// @src 0:391:400  \"_deadline\"\n                let _2 := var_deadline\n                let expr_4 := _2\n                /// @src 0:380:400  \"deadline = _deadline\"\n                update_storage_value_offset_uint256_to_uint256(0x00, expr_4)\n                /// @src 0:429:433  \"true\"\n                let expr_5 := 0x01\n                /// @src 0:410:433  \"isContractFunded = true\"\n                update_storage_value_offset_bool_to_bool(0x02, expr_5)\n                /// @src 0:459:469  \"msg.sender\"\n                let expr_6 := caller()\n                /// @src 0:451:470  \"payable(msg.sender)\"\n                let expr_7 := convert_address_to_address_payable(expr_6)\n                /// @src 0:443:470  \"owner = payable(msg.sender)\"\n                update_storage_value_offset_address_payable_to_address_payable(0x02, expr_7)\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220b1c8c47a15b582e0f1ded151c785262c0437fd26b8fd951c5a4bb25687ca880864736f6c634300081c0033\"\n    }\n}\n",
					"hash": "76d222742bbd1d87ed0fdaf5066f3ec9a6d6c8cddd34127146dcda0afad1269f",
					"factoryDependencies": {}
				},
				"SwappyBox": {
					"abi": [
						{
							"inputs": [],
							"name": "bid",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "box",
							"outputs": [
								{
									"internalType": "contract Box",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "boxData",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "bidInitialTime",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "bidEndTime",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "totalBid",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "basePrice",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "lastPrice",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "currentWinner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "boxes",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "createYourBox",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_index",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_deadline",
									"type": "uint256"
								}
							],
							"name": "depositToBox",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getPrice",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"metadata": {
						"optimizer_settings": {
							"is_debug_logging_enabled": false,
							"is_fallback_to_size_enabled": false,
							"is_verify_each_enabled": false,
							"level_back_end": "Aggressive",
							"level_middle_end": "Aggressive",
							"level_middle_end_size": "Zero"
						},
						"revive_pallet_version": null,
						"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8",
						"solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"box\",\"outputs\":[{\"internalType\":\"contract Box\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"boxData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bidInitialTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currentWinner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boxes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createYourBox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"depositToBox\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwappBox.sol\":\"SwappyBox\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwappBox.sol\":{\"keccak256\":\"0x1f79772b6d17ed94c7ec5f2d8e1735fb2973fb6a7a638d988cf494739964fa91\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://88c123847d45656671349703153c7de3746f83707e87e0f26460ed340b4530e8\",\"dweb:/ipfs/QmR1q76UgZGp2wEcQBHxhbaDyjFYsEPGArD36U7jKXbyyp\"]}},\"version\":1}",
						"solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
					},
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					},
					"storageLayout": {
						"storage": [
							{
								"astId": 94,
								"contract": "contracts/SwappBox.sol:SwappyBox",
								"label": "box",
								"offset": 0,
								"slot": "0",
								"type": "t_contract(Box)91"
							},
							{
								"astId": 112,
								"contract": "contracts/SwappBox.sol:SwappyBox",
								"label": "boxes",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
							},
							{
								"astId": 117,
								"contract": "contracts/SwappBox.sol:SwappyBox",
								"label": "boxData",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_address,t_struct(BidTrack)107_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_address)dyn_storage": {
								"base": "t_address",
								"encoding": "dynamic_array",
								"label": "address[]",
								"numberOfBytes": "32"
							},
							"t_contract(Box)91": {
								"encoding": "inplace",
								"label": "contract Box",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_array(t_address)dyn_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => address[])",
								"numberOfBytes": "32",
								"value": "t_array(t_address)dyn_storage"
							},
							"t_mapping(t_address,t_struct(BidTrack)107_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct SwappyBox.BidTrack)",
								"numberOfBytes": "32",
								"value": "t_struct(BidTrack)107_storage"
							},
							"t_struct(BidTrack)107_storage": {
								"encoding": "inplace",
								"label": "struct SwappyBox.BidTrack",
								"members": [
									{
										"astId": 96,
										"contract": "contracts/SwappBox.sol:SwappyBox",
										"label": "bidInitialTime",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 98,
										"contract": "contracts/SwappBox.sol:SwappyBox",
										"label": "bidEndTime",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 100,
										"contract": "contracts/SwappBox.sol:SwappyBox",
										"label": "totalBid",
										"offset": 0,
										"slot": "2",
										"type": "t_uint256"
									},
									{
										"astId": 102,
										"contract": "contracts/SwappBox.sol:SwappyBox",
										"label": "basePrice",
										"offset": 0,
										"slot": "3",
										"type": "t_uint256"
									},
									{
										"astId": 104,
										"contract": "contracts/SwappBox.sol:SwappyBox",
										"label": "lastPrice",
										"offset": 0,
										"slot": "4",
										"type": "t_uint256"
									},
									{
										"astId": 106,
										"contract": "contracts/SwappBox.sol:SwappyBox",
										"label": "currentWinner",
										"offset": 0,
										"slot": "5",
										"type": "t_address"
									}
								],
								"numberOfBytes": "192"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"evm": {
						"assembly": "// RO data = 0/0 bytes\n// RW data = 0/65552 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 6710\n// Code size = 21013 bytes\n\n      : @0 (gas: 2)\n     0: i32 a2 = a0 >> 0x10\n     3: jump @6 if a2 != 0\n      : @1 (gas: 2)\n     6: a2 = 0x10001\n    11: jump @6 if a1 >=u a2\n      : @2 (gas: 4)\n    14: a1 = a1 + a0\n    17: i32 a1 = a1 + 0x1f\n    20: a1 = a1 & 0xffffffffffffffe0\n    23: jump @7 if a1 >=u 65537\n      : @3 (gas: 2)\n    29: a3 = i32 [0x20000]\n    34: jump @5 if a3 >=u a1\n      : @4 (gas: 4)\n    37: u32 [0x20000] = a1\n    42: a1 = 0x20010\n    47: a0 = a0 + a1\n    50: ret\n      : @5 (gas: 3)\n    52: a1 = 0x20010\n    57: a0 = a0 + a1\n    60: ret\n      : @6 (gas: 1)\n    62: trap\n      : @7 (gas: 1)\n    63: trap\n      : @8 (gas: 13)\n    64: sp = sp + 0xffffffffffffffd8\n    67: u64 [sp + 0x20] = ra\n    70: u64 [sp + 0x18] = s0\n    73: u64 [sp + 0x10] = s1\n    76: a2 = u64 [a1]\n    78: u64 [sp + 0x8] = a2\n    81: a2 = u64 [a1 + 0x8]\n    84: u64 [sp] = a2\n    86: s0 = u64 [a1 + 0x10]\n    89: s1 = u64 [a1 + 0x18]\n    92: i32 a0 = a0 + 0\n    94: a1 = 0x20\n    97: ra = 2, jump @0\n      : @9 [@dyn 1] (gas: 71)\n   101: a1 = reverse s1\n   103: a2 = reverse s0\n   105: a3 = u64 [sp]\n   107: a3 = reverse a3\n   109: a4 = u64 [sp + 0x8]\n   112: a4 = reverse a4\n   114: u8 [a0 + 0x18] = a4\n   117: u8 [a0 + 0x10] = a3\n   120: u8 [a0 + 0x8] = a2\n   123: u8 [a0] = a1\n   125: a5 = a4 >> 0x38\n   128: u8 [a0 + 0x1f] = a5\n   131: a5 = a4 >> 0x30\n   134: u8 [a0 + 0x1e] = a5\n   137: a5 = a4 >> 0x28\n   140: u8 [a0 + 0x1d] = a5\n   143: a5 = a4 >> 0x20\n   146: u8 [a0 + 0x1c] = a5\n   149: a5 = a4 >> 0x18\n   152: u8 [a0 + 0x1b] = a5\n   155: a5 = a4 >> 0x10\n   158: u8 [a0 + 0x1a] = a5\n   161: a4 = a4 >> 0x8\n   164: u8 [a0 + 0x19] = a4\n   167: a4 = a3 >> 0x38\n   170: u8 [a0 + 0x17] = a4\n   173: a4 = a3 >> 0x30\n   176: u8 [a0 + 0x16] = a4\n   179: a4 = a3 >> 0x28\n   182: u8 [a0 + 0x15] = a4\n   185: a4 = a3 >> 0x20\n   188: u8 [a0 + 0x14] = a4\n   191: a4 = a3 >> 0x18\n   194: u8 [a0 + 0x13] = a4\n   197: a4 = a3 >> 0x10\n   200: u8 [a0 + 0x12] = a4\n   203: a3 = a3 >> 0x8\n   206: u8 [a0 + 0x11] = a3\n   209: a3 = a2 >> 0x38\n   212: u8 [a0 + 0xf] = a3\n   215: a3 = a2 >> 0x30\n   218: u8 [a0 + 0xe] = a3\n   221: a3 = a2 >> 0x28\n   224: u8 [a0 + 0xd] = a3\n   227: a3 = a2 >> 0x20\n   230: u8 [a0 + 0xc] = a3\n   233: a3 = a2 >> 0x18\n   236: u8 [a0 + 0xb] = a3\n   239: a3 = a2 >> 0x10\n   242: u8 [a0 + 0xa] = a3\n   245: a2 = a2 >> 0x8\n   248: u8 [a0 + 0x9] = a2\n   251: a2 = a1 >> 0x38\n   254: u8 [a0 + 0x7] = a2\n   257: a2 = a1 >> 0x30\n   260: u8 [a0 + 0x6] = a2\n   263: a2 = a1 >> 0x28\n   266: u8 [a0 + 0x5] = a2\n   269: a2 = a1 >> 0x20\n   272: u8 [a0 + 0x4] = a2\n   275: a2 = a1 >> 0x18\n   278: u8 [a0 + 0x3] = a2\n   281: a2 = a1 >> 0x10\n   284: u8 [a0 + 0x2] = a2\n   287: a1 = a1 >> 0x8\n   290: u8 [a0 + 0x1] = a1\n   293: ra = u64 [sp + 0x20]\n   296: s0 = u64 [sp + 0x18]\n   299: s1 = u64 [sp + 0x10]\n   302: sp = sp + 0x28\n   305: ret\n      : @10 (gas: 6)\n   307: sp = sp + 0xfffffffffffffff0\n   310: u64 [sp + 0x8] = ra\n   313: u64 [sp] = s0\n   315: s0 = a0 & 0x1\n   318: ecalli 3 // 'call_data_size'\n   320: fallthrough\n      : @11 (gas: 2)\n   321: u32 [0x20004] = a0\n   326: jump @13 if s0 == 0\n      : @12 (gas: 1)\n   329: ra = 4, jump @14\n      : @13 [@dyn 2] (gas: 1)\n   333: ra = 6, jump @28\n      : @14 [@dyn 3] (gas: 9)\n   338: sp = sp + 0xffffffffffffffc0\n   341: u64 [sp + 0x38] = ra\n   344: u64 [sp + 0x30] = s0\n   347: u64 [sp + 0x28] = s1\n   350: s0 = sp + 0x40\n   353: sp = sp & 0xffffffffffffffe0\n   356: a0 = 0x40\n   359: a1 = 0x20\n   362: ra = 8, jump @0\n      : @15 [@dyn 4] (gas: 39)\n   367: u8 [a0 + 31] = 0x80\n   372: u8 [a0 + 30] = 0\n   375: u8 [a0 + 29] = 0\n   378: u8 [a0 + 28] = 0\n   381: u8 [a0 + 27] = 0\n   384: u8 [a0 + 26] = 0\n   387: u8 [a0 + 25] = 0\n   390: u8 [a0 + 24] = 0\n   393: u8 [a0 + 23] = 0\n   396: u8 [a0 + 22] = 0\n   399: u8 [a0 + 21] = 0\n   402: u8 [a0 + 20] = 0\n   405: u8 [a0 + 19] = 0\n   408: u8 [a0 + 18] = 0\n   411: u8 [a0 + 17] = 0\n   414: u8 [a0 + 16] = 0\n   417: u8 [a0 + 15] = 0\n   420: u8 [a0 + 14] = 0\n   423: u8 [a0 + 13] = 0\n   426: u8 [a0 + 12] = 0\n   429: u8 [a0 + 11] = 0\n   432: u8 [a0 + 10] = 0\n   435: u8 [a0 + 9] = 0\n   438: u8 [a0 + 8] = 0\n   441: u8 [a0 + 7] = 0\n   444: u8 [a0 + 6] = 0\n   447: u8 [a0 + 5] = 0\n   450: u8 [a0 + 4] = 0\n   453: u8 [a0 + 3] = 0\n   456: u8 [a0 + 2] = 0\n   459: u8 [a0 + 1] = 0\n   462: u8 [a0 + 0] = 0\n   464: u64 [sp + 24] = 0\n   467: u64 [sp + 0] = 0\n   469: u64 [sp + 8] = 0\n   472: u64 [sp + 16] = 0\n   475: i32 a0 = sp + 0\n   477: ecalli 15 // 'value_transferred'\n   479: fallthrough\n      : @16 (gas: 8)\n   480: a0 = u64 [sp + 0x10]\n   483: a1 = u64 [sp + 0x18]\n   486: a2 = u64 [sp + 0x8]\n   489: a3 = u64 [sp]\n   491: a1 = a1 | a2\n   494: a0 = a0 | a3\n   497: a0 = a0 | a1\n   500: jump @20 if a0 != 0\n      : @17 (gas: 3)\n   504: a0 = 0x40\n   507: a1 = 0x20\n   510: ra = 10, jump @0\n      : @18 [@dyn 5] (gas: 100)\n   515: a1 = u8 [a0 + 0x11]\n   518: a2 = u8 [a0 + 0x10]\n   521: a3 = u8 [a0 + 0x12]\n   524: a4 = u8 [a0 + 0x13]\n   527: a1 = a1 << 0x8\n   530: a1 = a1 | a2\n   533: a3 = a3 << 0x10\n   536: a4 = a4 << 0x18\n   539: a3 = a3 | a4\n   542: a1 = a1 | a3\n   545: a2 = u8 [a0 + 0x15]\n   548: a3 = u8 [a0 + 0x14]\n   551: a4 = u8 [a0 + 0x16]\n   554: a5 = u8 [a0 + 0x17]\n   557: a2 = a2 << 0x8\n   560: a2 = a2 | a3\n   563: a4 = a4 << 0x10\n   566: a5 = a5 << 0x18\n   569: a4 = a4 | a5\n   572: a2 = a2 | a4\n   575: a2 = a2 << 0x20\n   578: t0 = a2 | a1\n   581: a2 = u8 [a0 + 0x1]\n   584: a3 = u8 [a0]\n   586: a4 = u8 [a0 + 0x2]\n   589: a5 = u8 [a0 + 0x3]\n   592: a2 = a2 << 0x8\n   595: a2 = a2 | a3\n   598: a4 = a4 << 0x10\n   601: a5 = a5 << 0x18\n   604: a4 = a4 | a5\n   607: a2 = a2 | a4\n   610: a3 = u8 [a0 + 0x5]\n   613: a4 = u8 [a0 + 0x4]\n   616: a5 = u8 [a0 + 0x6]\n   619: s1 = u8 [a0 + 0x7]\n   622: a3 = a3 << 0x8\n   625: a3 = a3 | a4\n   628: a5 = a5 << 0x10\n   631: s1 = s1 << 0x18\n   634: a5 = a5 | s1\n   637: a3 = a3 | a5\n   640: a3 = a3 << 0x20\n   643: a2 = a2 | a3\n   646: a3 = u8 [a0 + 0x19]\n   649: a4 = u8 [a0 + 0x18]\n   652: a5 = u8 [a0 + 0x1a]\n   655: s1 = u8 [a0 + 0x1b]\n   658: a3 = a3 << 0x8\n   661: a3 = a3 | a4\n   664: a5 = a5 << 0x10\n   667: s1 = s1 << 0x18\n   670: a5 = a5 | s1\n   673: a3 = a3 | a5\n   676: a4 = u8 [a0 + 0x1d]\n   679: a5 = u8 [a0 + 0x1c]\n   682: s1 = u8 [a0 + 0x1e]\n   685: a1 = u8 [a0 + 0x1f]\n   688: a4 = a4 << 0x8\n   691: a4 = a4 | a5\n   694: s1 = s1 << 0x10\n   697: a1 = a1 << 0x18\n   700: a1 = a1 | s1\n   703: a1 = a1 | a4\n   706: a1 = a1 << 0x20\n   709: a3 = a3 | a1\n   712: a1 = u8 [a0 + 0x9]\n   715: a4 = u8 [a0 + 0x8]\n   718: a5 = u8 [a0 + 0xa]\n   721: s1 = u8 [a0 + 0xb]\n   724: a1 = a1 << 0x8\n   727: a1 = a1 | a4\n   730: a5 = a5 << 0x10\n   733: s1 = s1 << 0x18\n   736: a5 = a5 | s1\n   739: a1 = a1 | a5\n   742: a4 = u8 [a0 + 0xd]\n   745: a5 = u8 [a0 + 0xc]\n   748: s1 = u8 [a0 + 0xe]\n   751: a0 = u8 [a0 + 0xf]\n   754: a4 = a4 << 0x8\n   757: a4 = a4 | a5\n   760: s1 = s1 << 0x10\n   763: a0 = a0 << 0x18\n   766: a0 = a0 | s1\n   769: a0 = a0 | a4\n   772: a0 = a0 << 0x20\n   775: a0 = a0 | a1\n   778: a0 = reverse a0\n   780: s1 = reverse a3\n   782: a1 = reverse a2\n   784: a2 = reverse t0\n   786: a1 = a1 | a2\n   789: a2 = s1 | a0\n   792: a2 = a2 | a1\n   795: a2 = a2 >> 0x20\n   798: a0 = a0 | a1\n   801: a0 = a0 << 0x20\n   804: a0 = a0 | a2\n   807: jump @22 if a0 == 0\n      : @19 (gas: 1)\n   810: trap\n      : @20 (gas: 3)\n   811: a0 = 0\n   813: a1 = 0\n   815: ra = 12, jump @0\n      : @21 [@dyn 6] (gas: 5)\n   820: i32 a1 = a0 + 0\n   822: a0 = 0x1\n   825: a2 = 0\n   827: ecalli 12 // 'seal_return'\n   829: fallthrough\n      : @22 (gas: 4)\n   830: i32 s1 = s1 + 0\n   832: a0 = s1\n   834: a1 = 0\n   836: ra = 14, jump @0\n      : @23 [@dyn 7] (gas: 5)\n   841: i32 a0 = a0 + 0\n   843: a1 = 0\n   845: a2 = 0\n   847: ecalli 1 // 'call_data_copy'\n   849: fallthrough\n      : @24 (gas: 2)\n   850: a1 = i32 [0x20008]\n   855: jump @26 if a1 == 0\n      : @25 (gas: 4)\n   858: a0 = 0x30010\n   863: i32 a0 = a0 + 0\n   865: ecalli 13 // 'set_immutable_data'\n   867: fallthrough\n      : @26 (gas: 3)\n   868: a0 = s1\n   870: a1 = 0\n   872: ra = 16, jump @0\n      : @27 [@dyn 8] (gas: 6)\n   877: i32 a1 = a0 + 0\n   879: a0 = 0\n   881: a2 = 0\n   883: ra = 0x12\n   886: ecalli 12 // 'seal_return'\n   888: fallthrough\n      : @28 [@dyn 9] (gas: 8)\n   889: sp = sp + 0xffffffffffffffc0\n   892: u64 [sp + 0x38] = ra\n   895: u64 [sp + 0x30] = s0\n   898: s0 = sp + 0x40\n   901: sp = sp & 0xffffffffffffffe0\n   904: a0 = 0x40\n   907: a1 = 0x20\n   910: ra = 20, jump @0\n      : @29 [@dyn 10] (gas: 34)\n   915: u8 [a0 + 31] = 0x80\n   920: u8 [a0 + 30] = 0\n   923: u8 [a0 + 29] = 0\n   926: u8 [a0 + 28] = 0\n   929: u8 [a0 + 27] = 0\n   932: u8 [a0 + 26] = 0\n   935: u8 [a0 + 25] = 0\n   938: u8 [a0 + 24] = 0\n   941: u8 [a0 + 23] = 0\n   944: u8 [a0 + 22] = 0\n   947: u8 [a0 + 21] = 0\n   950: u8 [a0 + 20] = 0\n   953: u8 [a0 + 19] = 0\n   956: u8 [a0 + 18] = 0\n   959: u8 [a0 + 17] = 0\n   962: u8 [a0 + 16] = 0\n   965: u8 [a0 + 15] = 0\n   968: u8 [a0 + 14] = 0\n   971: u8 [a0 + 13] = 0\n   974: u8 [a0 + 12] = 0\n   977: u8 [a0 + 11] = 0\n   980: u8 [a0 + 10] = 0\n   983: u8 [a0 + 9] = 0\n   986: u8 [a0 + 8] = 0\n   989: u8 [a0 + 7] = 0\n   992: u8 [a0 + 3] = 0\n   995: u8 [a0 + 2] = 0\n   998: u8 [a0 + 1] = 0\n  1001: u8 [a0 + 0] = 0\n  1003: a1 = i32 [0x20004]\n  1008: u8 [a0 + 6] = 0\n  1011: u8 [a0 + 5] = 0\n  1014: u8 [a0 + 4] = 0\n  1017: jump @46 if a1 <u 4\n      : @30 (gas: 4)\n  1022: i32 a0 = sp + 0\n  1024: a1 = 0\n  1026: ecalli 2 // 'call_data_load'\n  1028: fallthrough\n      : @31 (gas: 2)\n  1029: a0 = i32 [sp + 0x1c]\n  1032: jump @36 if a0 >s 848193942\n      : @32 (gas: 1)\n  1039: jump @40 if a0 >s 330924195\n      : @33 (gas: 1)\n  1046: jump @42 if a0 == 2564160970\n      : @34 (gas: 1)\n  1053: jump @46 if a0 != 2766793371\n      : @35 (gas: 14)\n  1061: ra = 0x16\n  1064: sp = sp + 0xfffffffffffffcc0\n  1068: u64 [sp + 0x338] = ra\n  1072: u64 [sp + 0x330] = s0\n  1076: u64 [sp + 0x328] = s1\n  1080: s0 = sp + 0x340\n  1084: sp = sp & 0xffffffffffffffe0\n  1087: u64 [sp + 760] = 0\n  1091: u64 [sp + 752] = 0\n  1095: u64 [sp + 744] = 0\n  1099: u64 [sp + 736] = 0\n  1103: i32 a0 = sp + 0x2e0\n  1107: ecalli 15 // 'value_transferred'\n  1109: jump @174\n      : @36 [@dyn 11] (gas: 2)\n  1112: a1 = 0x5cf51000\n  1118: jump @43 if a0 >s 1559564535\n      : @37 (gas: 1)\n  1125: jump @47 if a0 == 848193943\n      : @38 (gas: 1)\n  1133: jump @42 if a0 == 1020253707\n      : @39 (gas: 1)\n  1140: jump @46\n      : @40 (gas: 1)\n  1142: jump @48 if a0 == 330924196\n      : @41 (gas: 1)\n  1150: jump @46 if a0 != 429436655\n      : @42 (gas: 13)\n  1157: ra = 0x18\n  1160: sp = sp + 0xffffffffffffffc0\n  1163: u64 [sp + 0x38] = ra\n  1166: u64 [sp + 0x30] = s0\n  1169: s0 = sp + 0x40\n  1172: sp = sp & 0xffffffffffffffe0\n  1175: u64 [sp + 24] = 0\n  1178: u64 [sp + 16] = 0\n  1181: u64 [sp + 8] = 0\n  1184: u64 [sp + 0] = 0\n  1186: i32 a0 = sp + 0\n  1188: ecalli 15 // 'value_transferred'\n  1190: jump @100\n      : @43 [@dyn 12] (gas: 2)\n  1193: i32 a1 = a1 + 0xf8\n  1197: jump @49 if a0 == a1\n      : @44 (gas: 1)\n  1201: jump @46 if a0 != 1967265185\n      : @45 (gas: 14)\n  1208: ra = 0x1a\n  1211: sp = sp + 0xffffffffffffff60\n  1215: u64 [sp + 0x98] = ra\n  1219: u64 [sp + 0x90] = s0\n  1223: u64 [sp + 0x88] = s1\n  1227: s0 = sp + 0xa0\n  1231: sp = sp & 0xffffffffffffffe0\n  1234: u64 [sp + 56] = 0\n  1237: u64 [sp + 48] = 0\n  1240: u64 [sp + 40] = 0\n  1243: u64 [sp + 32] = 0\n  1246: i32 a0 = sp + 0x20\n  1249: ecalli 15 // 'value_transferred'\n  1251: jump @138\n      : @46 [@dyn 13] (gas: 7)\n  1254: ra = 0x1c\n  1257: sp = sp + 0xfffffffffffffff8\n  1260: u64 [sp] = ra\n  1262: a0 = 0\n  1264: a1 = 0\n  1266: ra = 0xdc\n  1270: jump @0\n      : @47 [@dyn 14] (gas: 1)\n  1273: ra = 30, jump @109\n      : @48 [@dyn 15] (gas: 14)\n  1278: ra = 0x20\n  1281: sp = sp + 0xfffffffffffffec0\n  1285: u64 [sp + 0x138] = ra\n  1289: u64 [sp + 0x130] = s0\n  1293: u64 [sp + 0x128] = s1\n  1297: s0 = sp + 0x140\n  1301: sp = sp & 0xffffffffffffffe0\n  1304: u64 [sp + 280] = 0\n  1308: u64 [sp + 272] = 0\n  1312: u64 [sp + 264] = 0\n  1316: u64 [sp + 256] = 0\n  1320: i32 a0 = sp + 0x100\n  1324: ecalli 15 // 'value_transferred'\n  1326: jump @84\n      : @49 [@dyn 16] (gas: 1)\n  1329: ra = 34, jump @128\n      : @50 [@dyn 17] (gas: 7)\n  1334: sp = sp + 0xfffffffffffffff0\n  1337: u64 [sp + 0x8] = ra\n  1340: u64 [sp] = s0\n  1342: s0 = a0\n  1344: a0 = 0x40\n  1347: a1 = 0x20\n  1350: ra = 36, jump @0\n      : @51 [@dyn 18] (gas: 100)\n  1355: a1 = u8 [a0 + 0x1]\n  1358: a2 = u8 [a0]\n  1360: a3 = u8 [a0 + 0x2]\n  1363: a4 = u8 [a0 + 0x3]\n  1366: a1 = a1 << 0x8\n  1369: a1 = a1 | a2\n  1372: a3 = a3 << 0x10\n  1375: a4 = a4 << 0x18\n  1378: a3 = a3 | a4\n  1381: a1 = a1 | a3\n  1384: a2 = u8 [a0 + 0x5]\n  1387: a3 = u8 [a0 + 0x4]\n  1390: a4 = u8 [a0 + 0x6]\n  1393: a5 = u8 [a0 + 0x7]\n  1396: a2 = a2 << 0x8\n  1399: a2 = a2 | a3\n  1402: a4 = a4 << 0x10\n  1405: a5 = a5 << 0x18\n  1408: a4 = a4 | a5\n  1411: a2 = a2 | a4\n  1414: a2 = a2 << 0x20\n  1417: t0 = a2 | a1\n  1420: a2 = u8 [a0 + 0x9]\n  1423: a3 = u8 [a0 + 0x8]\n  1426: a4 = u8 [a0 + 0xa]\n  1429: a5 = u8 [a0 + 0xb]\n  1432: a2 = a2 << 0x8\n  1435: a2 = a2 | a3\n  1438: a4 = a4 << 0x10\n  1441: a5 = a5 << 0x18\n  1444: a4 = a4 | a5\n  1447: a2 = a2 | a4\n  1450: a3 = u8 [a0 + 0xd]\n  1453: a4 = u8 [a0 + 0xc]\n  1456: a5 = u8 [a0 + 0xe]\n  1459: a1 = u8 [a0 + 0xf]\n  1462: a3 = a3 << 0x8\n  1465: a3 = a3 | a4\n  1468: a5 = a5 << 0x10\n  1471: a1 = a1 << 0x18\n  1474: a1 = a1 | a5\n  1477: a1 = a1 | a3\n  1480: a1 = a1 << 0x20\n  1483: t1 = a1 | a2\n  1486: a1 = u8 [a0 + 0x11]\n  1489: a3 = u8 [a0 + 0x10]\n  1492: a4 = u8 [a0 + 0x12]\n  1495: a5 = u8 [a0 + 0x13]\n  1498: a1 = a1 << 0x8\n  1501: a1 = a1 | a3\n  1504: a4 = a4 << 0x10\n  1507: a5 = a5 << 0x18\n  1510: a4 = a4 | a5\n  1513: a1 = a1 | a4\n  1516: a3 = u8 [a0 + 0x15]\n  1519: a4 = u8 [a0 + 0x14]\n  1522: a5 = u8 [a0 + 0x16]\n  1525: a2 = u8 [a0 + 0x17]\n  1528: a3 = a3 << 0x8\n  1531: a3 = a3 | a4\n  1534: a5 = a5 << 0x10\n  1537: a2 = a2 << 0x18\n  1540: a2 = a2 | a5\n  1543: a2 = a2 | a3\n  1546: a2 = a2 << 0x20\n  1549: a3 = a2 | a1\n  1552: a1 = u8 [a0 + 0x19]\n  1555: a2 = u8 [a0 + 0x18]\n  1558: a4 = u8 [a0 + 0x1a]\n  1561: a5 = u8 [a0 + 0x1b]\n  1564: a1 = a1 << 0x8\n  1567: a1 = a1 | a2\n  1570: a4 = a4 << 0x10\n  1573: a5 = a5 << 0x18\n  1576: a4 = a4 | a5\n  1579: a1 = a1 | a4\n  1582: a2 = u8 [a0 + 0x1d]\n  1585: a4 = u8 [a0 + 0x1c]\n  1588: a5 = u8 [a0 + 0x1e]\n  1591: a0 = u8 [a0 + 0x1f]\n  1594: a2 = a2 << 0x8\n  1597: a2 = a2 | a4\n  1600: a5 = a5 << 0x10\n  1603: a0 = a0 << 0x18\n  1606: a0 = a0 | a5\n  1609: a0 = a0 | a2\n  1612: a0 = a0 << 0x20\n  1615: a0 = a0 | a1\n  1618: a0 = reverse a0\n  1620: a1 = reverse a3\n  1622: a2 = reverse t1\n  1624: a3 = reverse t0\n  1626: u64 [s0 + 0x18] = a3\n  1629: u64 [s0 + 0x10] = a2\n  1632: u64 [s0 + 0x8] = a1\n  1635: u64 [s0] = a0\n  1637: ra = u64 [sp + 0x8]\n  1640: s0 = u64 [sp]\n  1642: sp = sp + 0x10\n  1645: ret\n      : @52 (gas: 47)\n  1647: sp = sp + 0xffffffffffffff80\n  1650: u64 [sp + 0x78] = ra\n  1653: u64 [sp + 0x70] = s0\n  1656: u64 [sp + 0x68] = s1\n  1659: s0 = sp + 0x80\n  1663: sp = sp & 0xffffffffffffffe0\n  1666: ra = u64 [a1 + 0x10]\n  1669: a5 = u64 [a1 + 0x8]\n  1672: a3 = u64 [a2 + 0x8]\n  1675: t1 = u64 [a1]\n  1677: a4 = u64 [a2]\n  1679: u64 [sp + 0x28] = a4\n  1682: t2 = u64 [a2 + 0x10]\n  1685: t0 = a3 ^ a5\n  1688: s1 = a3 <u a5\n  1691: a4 = a4 <u t1\n  1694: u64 [sp + 0x20] = a4\n  1697: s1 = a4 if t0 == 0\n  1700: t0 = u64 [a1 + 0x18]\n  1703: a1 = u64 [a2 + 0x18]\n  1706: u64 [sp + 0x18] = a1\n  1709: a2 = t2 - ra\n  1712: a1 = a2 - s1\n  1715: u64 [sp + 0x30] = a1\n  1718: a1 = a2 <u s1\n  1721: a4 = t2 <u ra\n  1724: u64 [sp + 0x38] = t0\n  1727: a2 = u64 [sp + 0x18]\n  1730: a2 = a2 - t0\n  1733: a2 = a2 - a4\n  1736: a2 = a2 - a1\n  1739: a1 = a3 - a5\n  1742: a3 = u64 [sp + 0x20]\n  1745: a1 = a1 - a3\n  1748: a3 = u64 [sp + 0x28]\n  1751: a3 = a3 - t1\n  1754: a4 = a1 >u 0\n  1756: a3 = a3 <u 0x40\n  1759: a3 = a3 ^ 0x1\n  1762: a3 = a4 if a1 != 0\n  1765: s1 = a2 >s 0\n  1767: a1 = u64 [sp + 0x30]\n  1770: a4 = a1 >u 0\n  1772: a4 = s1 if a2 != 0\n  1775: a1 = a1 | a2\n  1778: a3 = a4 if a1 != 0\n  1781: jump @59 if a3 == 0\n      : @53 (gas: 12)\n  1785: s1 = a0\n  1787: a0 = t1 | ra\n  1790: u64 [sp + 0x30] = a5\n  1793: a1 = u64 [sp + 0x38]\n  1796: a1 = a1 | a5\n  1799: a0 = a0 | a1\n  1802: a0 = a0 >> 0x20\n  1805: u64 [sp + 0x28] = ra\n  1808: a1 = a1 | ra\n  1811: a1 = a1 << 0x20\n  1814: a0 = a0 | a1\n  1817: jump @58 if a0 != 0\n      : @54 (gas: 6)\n  1821: u64 [sp + 0x20] = t1\n  1824: i32 a1 = t1 + 0\n  1826: i32 a0 = sp + 0x40\n  1829: u64 [sp + 0x8] = a1\n  1832: ecalli 2 // 'call_data_load'\n  1834: fallthrough\n      : @55 (gas: 10)\n  1835: a3 = u64 [sp + 0x50]\n  1838: a4 = u64 [sp + 0x58]\n  1841: a0 = 0x100000000\n  1851: a1 = a3 ^ a0\n  1854: a1 = a1 | a4\n  1857: a2 = a3 >> 0x20\n  1860: a2 = a2 <u 0x1\n  1863: a2 = 0 if a4 != 0\n  1865: a2 = 0 if a1 == 0\n  1867: jump @59 if a2 == 0\n      : @56 (gas: 12)\n  1871: u64 [sp + 0x10] = a4\n  1874: u64 [sp + 0x18] = a3\n  1877: a1 = u64 [sp + 0x28]\n  1880: a2 = u64 [sp + 0x38]\n  1883: a1 = a1 | a2\n  1886: a0 = 0xffffffe0\n  1896: a2 = u64 [sp + 0x20]\n  1899: a0 = a2 <u a0\n  1902: a2 = u64 [sp + 0x30]\n  1905: a0 = 0 if a2 != 0\n  1907: a0 = 0 if a1 != 0\n  1909: jump @58 if a0 == 0\n      : @57 (gas: 30)\n  1912: a0 = u64 [sp + 0x48]\n  1915: u64 [sp + 0x30] = a0\n  1918: a0 = u64 [sp + 0x40]\n  1921: u64 [sp + 0x38] = a0\n  1924: a0 = u64 [sp + 0x8]\n  1927: i32 a1 = a0 + 0x20\n  1930: i32 a0 = sp + 0x40\n  1933: ecalli 2 // 'call_data_load'\n  1935: a0 = u64 [sp + 0x58]\n  1938: a1 = u64 [sp + 0x50]\n  1941: a2 = u64 [sp + 0x48]\n  1944: a3 = u64 [sp + 0x40]\n  1947: u64 [s1 + 0x38] = a0\n  1950: u64 [s1 + 0x30] = a1\n  1953: u64 [s1 + 0x28] = a2\n  1956: u64 [s1 + 0x20] = a3\n  1959: a0 = u64 [sp + 0x10]\n  1962: u64 [s1 + 0x18] = a0\n  1965: a0 = u64 [sp + 0x18]\n  1968: u64 [s1 + 0x10] = a0\n  1971: a0 = u64 [sp + 0x30]\n  1974: u64 [s1 + 0x8] = a0\n  1977: a0 = u64 [sp + 0x38]\n  1980: u64 [s1] = a0\n  1982: sp = s0 + 0xffffffffffffff80\n  1985: ra = u64 [sp + 0x78]\n  1988: s0 = u64 [sp + 0x70]\n  1991: s1 = u64 [sp + 0x68]\n  1994: sp = sp + 0x80\n  1998: ret\n      : @58 (gas: 1)\n  2000: trap\n      : @59 (gas: 3)\n  2001: a0 = 0\n  2003: a1 = 0\n  2005: ra = 38, jump @0\n      : @60 [@dyn 19] (gas: 6)\n  2010: i32 a1 = a0 + 0\n  2012: a0 = 0x1\n  2015: a2 = 0\n  2017: ra = 0x28\n  2020: ecalli 12 // 'seal_return'\n  2022: fallthrough\n      : @61 [@dyn 20] (gas: 9)\n  2023: a2 = u64 [a1 + 0x18]\n  2026: a3 = u64 [a1 + 0x10]\n  2029: a4 = u64 [a1 + 0x8]\n  2032: a1 = u64 [a1]\n  2034: u64 [a0 + 0x18] = a2\n  2037: u64 [a0 + 0x10] = a3\n  2040: u64 [a0 + 0x8] = a4\n  2043: u64 [a0] = a1\n  2045: ret\n      : @62 (gas: 38)\n  2047: sp = sp + 0xfffffffffffffee0\n  2051: u64 [sp + 0x118] = ra\n  2055: u64 [sp + 0x110] = s0\n  2059: u64 [sp + 0x108] = s1\n  2063: s0 = sp + 0x120\n  2067: sp = sp & 0xffffffffffffffe0\n  2070: u64 [sp + 0x40] = a0\n  2073: a0 = u64 [a2]\n  2075: u64 [sp + 0x48] = a0\n  2078: a0 = u64 [a2 + 0x8]\n  2081: u64 [sp + 0x50] = a0\n  2084: a0 = u64 [a2 + 0x10]\n  2087: u64 [sp + 0x58] = a0\n  2090: s1 = u64 [a2 + 0x18]\n  2093: a4 = u64 [a1 + 0x18]\n  2096: a3 = u64 [a1 + 0x10]\n  2099: a2 = u64 [a1 + 0x8]\n  2102: a0 = u64 [a1]\n  2104: u64 [sp + 0x18] = a4\n  2107: u64 [sp + 0xb8] = a4\n  2111: u64 [sp + 0x20] = a3\n  2114: u64 [sp + 0xb0] = a3\n  2118: u64 [sp + 0x28] = a2\n  2121: u64 [sp + 0xa8] = a2\n  2125: u64 [sp + 0x30] = a0\n  2128: u64 [sp + 0xa0] = a0\n  2132: u64 [sp + 248] = 0\n  2136: u64 [sp + 240] = 0\n  2140: u64 [sp + 232] = 0\n  2144: u64 [sp + 224] = 0\n  2148: u32 [sp + 192] = 0x20\n  2153: i32 a1 = sp + 0xa0\n  2157: i32 a3 = sp + 0xe0\n  2161: i32 a4 = sp + 0xc0\n  2165: a2 = 0xffffffffffffffff\n  2168: a0 = 0\n  2170: ecalli 6 // 'get_storage'\n  2172: fallthrough\n      : @63 (gas: 20)\n  2173: a0 = u64 [sp + 0xf8]\n  2177: t0 = u64 [sp + 0xe0]\n  2181: a2 = u64 [sp + 0xf0]\n  2185: a3 = u64 [sp + 0xe8]\n  2189: a4 = a0 ^ s1\n  2192: u64 [sp + 0x38] = s1\n  2195: a1 = s1 <u a0\n  2198: a0 = u64 [sp + 0x58]\n  2201: a5 = a0 <u a2\n  2204: a5 = a1 if a4 != 0\n  2207: a1 = u64 [sp + 0x50]\n  2210: t1 = a3 ^ a1\n  2213: a3 = a1 <u a3\n  2216: a1 = u64 [sp + 0x48]\n  2219: a1 = a1 <u t0\n  2222: a1 = a3 if t1 != 0\n  2225: a0 = a0 ^ a2\n  2228: a0 = a0 | a4\n  2231: a1 = a5 if a0 != 0\n  2234: jump @67 if a1 == 0\n      : @64 (gas: 3)\n  2238: a1 = 0x20\n  2241: a0 = 0\n  2243: ra = 42, jump @0\n      : @65 [@dyn 21] (gas: 71)\n  2248: a1 = u64 [sp + 0x18]\n  2251: a1 = reverse a1\n  2253: a2 = u64 [sp + 0x20]\n  2256: a2 = reverse a2\n  2258: a3 = u64 [sp + 0x28]\n  2261: a3 = reverse a3\n  2263: a4 = u64 [sp + 0x30]\n  2266: a4 = reverse a4\n  2268: a5 = a4 >> 0x38\n  2271: u8 [a0 + 0x1f] = a5\n  2274: a5 = a4 >> 0x30\n  2277: u8 [a0 + 0x1e] = a5\n  2280: a5 = a4 >> 0x28\n  2283: u8 [a0 + 0x1d] = a5\n  2286: a5 = a4 >> 0x20\n  2289: u8 [a0 + 0x1c] = a5\n  2292: a5 = a4 >> 0x18\n  2295: u8 [a0 + 0x1b] = a5\n  2298: a5 = a4 >> 0x10\n  2301: u8 [a0 + 0x1a] = a5\n  2304: a5 = a4 >> 0x8\n  2307: u8 [a0 + 0x19] = a5\n  2310: u8 [a0 + 0x18] = a4\n  2313: u8 [a0 + 0x10] = a3\n  2316: a4 = a3 >> 0x38\n  2319: u8 [a0 + 0x17] = a4\n  2322: a4 = a3 >> 0x30\n  2325: u8 [a0 + 0x16] = a4\n  2328: a4 = a3 >> 0x28\n  2331: u8 [a0 + 0x15] = a4\n  2334: a4 = a3 >> 0x20\n  2337: u8 [a0 + 0x14] = a4\n  2340: a4 = a3 >> 0x18\n  2343: u8 [a0 + 0x13] = a4\n  2346: a4 = a3 >> 0x10\n  2349: u8 [a0 + 0x12] = a4\n  2352: a3 = a3 >> 0x8\n  2355: u8 [a0 + 0x11] = a3\n  2358: u8 [a0 + 0x8] = a2\n  2361: a3 = a2 >> 0x38\n  2364: u8 [a0 + 0xf] = a3\n  2367: a3 = a2 >> 0x30\n  2370: u8 [a0 + 0xe] = a3\n  2373: a3 = a2 >> 0x28\n  2376: u8 [a0 + 0xd] = a3\n  2379: a3 = a2 >> 0x20\n  2382: u8 [a0 + 0xc] = a3\n  2385: a3 = a2 >> 0x18\n  2388: u8 [a0 + 0xb] = a3\n  2391: a3 = a2 >> 0x10\n  2394: u8 [a0 + 0xa] = a3\n  2397: a2 = a2 >> 0x8\n  2400: u8 [a0 + 0x9] = a2\n  2403: u8 [a0] = a1\n  2405: a2 = a1 >> 0x38\n  2408: u8 [a0 + 0x7] = a2\n  2411: a2 = a1 >> 0x30\n  2414: u8 [a0 + 0x6] = a2\n  2417: a2 = a1 >> 0x28\n  2420: u8 [a0 + 0x5] = a2\n  2423: a2 = a1 >> 0x20\n  2426: u8 [a0 + 0x4] = a2\n  2429: a2 = a1 >> 0x18\n  2432: u8 [a0 + 0x3] = a2\n  2435: a2 = a1 >> 0x10\n  2438: u8 [a0 + 0x2] = a2\n  2441: a1 = a1 >> 0x8\n  2444: u8 [a0 + 0x1] = a1\n  2447: a1 = 0x20\n  2450: a0 = 0\n  2452: ra = 44, jump @0\n      : @66 [@dyn 22] (gas: 45)\n  2457: i32 a0 = a0 + 0\n  2459: i32 a2 = sp + 0xe0\n  2463: a1 = 0x20\n  2466: ecalli 7 // 'hash_keccak_256'\n  2468: a0 = u64 [sp + 0xe0]\n  2472: a1 = u64 [sp + 0xe8]\n  2476: a2 = u64 [sp + 0xf8]\n  2480: a3 = u64 [sp + 0xf0]\n  2484: t0 = reverse a0\n  2486: a1 = reverse a1\n  2488: a2 = reverse a2\n  2490: a3 = reverse a3\n  2492: a4 = u64 [sp + 0x50]\n  2495: a4 = a4 + a3\n  2498: a5 = u64 [sp + 0x48]\n  2501: a5 = a5 + a2\n  2504: a2 = a5 <u a2\n  2507: a4 = a4 + a2\n  2510: s1 = a4 ^ a3\n  2513: a3 = a4 <u a3\n  2516: a3 = a2 if s1 == 0\n  2519: a2 = u64 [sp + 0x58]\n  2522: a2 = a2 + a1\n  2525: a3 = a3 + a2\n  2528: s1 = a3 <u a2\n  2531: a0 = u64 [sp + 0x38]\n  2534: a0 = a0 + t0\n  2537: a1 = a2 <u a1\n  2540: a0 = a0 + a1\n  2543: a0 = a0 + s1\n  2546: a1 = u64 [sp + 0x40]\n  2549: u64 [a1 + 56] = 0\n  2552: u64 [a1 + 48] = 0\n  2555: u64 [a1 + 40] = 0\n  2558: u64 [a1 + 32] = 0\n  2561: u64 [a1] = a5\n  2563: u64 [a1 + 0x8] = a4\n  2566: u64 [a1 + 0x10] = a3\n  2569: u64 [a1 + 0x18] = a0\n  2572: sp = s0 + 0xfffffffffffffee0\n  2576: ra = u64 [sp + 0x118]\n  2580: s0 = u64 [sp + 0x110]\n  2584: s1 = u64 [sp + 0x108]\n  2588: sp = sp + 0x120\n  2592: ret\n      : @67 (gas: 8)\n  2594: u64 [sp + 144] = 0\n  2598: u64 [sp + 136] = 0\n  2602: u64 [sp + 128] = 0\n  2606: a0 = 0x4e487b7100000000\n  2616: a1 = sp + 0x80\n  2620: u64 [sp + 0x98] = a0\n  2624: a0 = 0\n  2626: ra = 46, jump @8\n      : @68 [@dyn 23] (gas: 7)\n  2631: u64 [sp + 120] = 0\n  2634: u64 [sp + 112] = 0\n  2637: u64 [sp + 96] = 0x32\n  2641: a0 = 0x4\n  2644: a1 = sp + 0x60\n  2647: u64 [sp + 104] = 0\n  2650: ra = 48, jump @8\n      : @69 [@dyn 24] (gas: 3)\n  2655: a1 = 0x24\n  2658: a0 = 0\n  2660: ra = 50, jump @0\n      : @70 [@dyn 25] (gas: 6)\n  2665: i32 a1 = a0 + 0\n  2667: a0 = 0x1\n  2670: a2 = 0x24\n  2673: ra = 0x34\n  2676: ecalli 12 // 'seal_return'\n  2678: fallthrough\n      : @71 [@dyn 26] (gas: 236)\n  2679: sp = sp + 0xffffffffffffffa0\n  2682: u64 [sp + 0x58] = ra\n  2685: u64 [sp + 0x50] = s0\n  2688: u64 [sp + 0x48] = s1\n  2691: u64 [sp] = a0\n  2693: t0 = u64 [a1]\n  2695: t1 = u64 [a2]\n  2697: a0 = u64 [a2 + 0x8]\n  2700: a3 = u64 [a2 + 0x10]\n  2703: a4 = u64 [a1 + 0x18]\n  2706: s0 = u64 [a1 + 0x10]\n  2709: a2 = u64 [a2 + 0x18]\n  2712: a1 = u64 [a1 + 0x8]\n  2715: t2 = a4 >u 0\n  2717: s1 = s0 >u 0\n  2719: s1 = t2 if a4 != 0\n  2722: ra = a1 >u 0\n  2724: a5 = t0 <u 0x100\n  2728: t2 = a5 ^ 0x1\n  2731: t2 = ra if a1 != 0\n  2734: a4 = a4 | s0\n  2737: t2 = s1 if a4 != 0\n  2740: u8 [sp + 71] = 0\n  2743: u8 [sp + 70] = 0\n  2746: u8 [sp + 69] = 0\n  2749: u8 [sp + 68] = 0\n  2752: u8 [sp + 67] = 0\n  2755: u8 [sp + 66] = 0\n  2758: u8 [sp + 65] = 0\n  2761: u8 [sp + 64] = 0\n  2764: u8 [sp + 63] = 0\n  2767: u8 [sp + 62] = 0\n  2770: u8 [sp + 61] = 0\n  2773: u8 [sp + 60] = 0\n  2776: u8 [sp + 59] = 0\n  2779: u8 [sp + 58] = 0\n  2782: u8 [sp + 57] = 0\n  2785: u8 [sp + 56] = 0\n  2788: u8 [sp + 55] = 0\n  2791: u8 [sp + 54] = 0\n  2794: u8 [sp + 53] = 0\n  2797: u8 [sp + 52] = 0\n  2800: u8 [sp + 51] = 0\n  2803: u8 [sp + 50] = 0\n  2806: u8 [sp + 49] = 0\n  2809: u8 [sp + 48] = 0\n  2812: u8 [sp + 47] = 0\n  2815: u8 [sp + 46] = 0\n  2818: u8 [sp + 45] = 0\n  2821: u8 [sp + 44] = 0\n  2824: u8 [sp + 43] = 0\n  2827: u8 [sp + 42] = 0\n  2830: u8 [sp + 41] = 0\n  2833: u8 [sp + 40] = 0\n  2836: u8 [sp + 0x20] = a2\n  2839: u8 [sp + 0x18] = a3\n  2842: u8 [sp + 0x10] = a0\n  2845: u8 [sp + 0x8] = t1\n  2848: a1 = a2 >> 0x38\n  2851: u8 [sp + 0x27] = a1\n  2854: a1 = a2 >> 0x30\n  2857: u8 [sp + 0x26] = a1\n  2860: a1 = a2 >> 0x28\n  2863: u8 [sp + 0x25] = a1\n  2866: a1 = a2 >> 0x20\n  2869: u8 [sp + 0x24] = a1\n  2872: a1 = a2 >> 0x18\n  2875: u8 [sp + 0x23] = a1\n  2878: a1 = a2 >> 0x10\n  2881: u8 [sp + 0x22] = a1\n  2884: a2 = a2 >> 0x8\n  2887: u8 [sp + 0x21] = a2\n  2890: a1 = a3 >> 0x38\n  2893: u8 [sp + 0x1f] = a1\n  2896: a1 = a3 >> 0x30\n  2899: u8 [sp + 0x1e] = a1\n  2902: a1 = a3 >> 0x28\n  2905: u8 [sp + 0x1d] = a1\n  2908: a1 = a3 >> 0x20\n  2911: u8 [sp + 0x1c] = a1\n  2914: a1 = a3 >> 0x18\n  2917: u8 [sp + 0x1b] = a1\n  2920: a1 = a3 >> 0x10\n  2923: u8 [sp + 0x1a] = a1\n  2926: a3 = a3 >> 0x8\n  2929: u8 [sp + 0x19] = a3\n  2932: a1 = a0 >> 0x38\n  2935: u8 [sp + 0x17] = a1\n  2938: a1 = a0 >> 0x30\n  2941: u8 [sp + 0x16] = a1\n  2944: a1 = a0 >> 0x28\n  2947: u8 [sp + 0x15] = a1\n  2950: a1 = a0 >> 0x20\n  2953: u8 [sp + 0x14] = a1\n  2956: a1 = a0 >> 0x18\n  2959: u8 [sp + 0x13] = a1\n  2962: a1 = a0 >> 0x10\n  2965: u8 [sp + 0x12] = a1\n  2968: a0 = a0 >> 0x8\n  2971: u8 [sp + 0x11] = a0\n  2974: a0 = t1 >> 0x38\n  2977: u8 [sp + 0xf] = a0\n  2980: a0 = t1 >> 0x30\n  2983: u8 [sp + 0xe] = a0\n  2986: a0 = t1 >> 0x28\n  2989: u8 [sp + 0xd] = a0\n  2992: a0 = t1 >> 0x20\n  2995: u8 [sp + 0xc] = a0\n  2998: a0 = t1 >> 0x18\n  3001: u8 [sp + 0xb] = a0\n  3004: a0 = t1 >> 0x10\n  3007: u8 [sp + 0xa] = a0\n  3010: a0 = t1 >> 0x8\n  3013: u8 [sp + 0x9] = a0\n  3016: a0 = t0 << 0x38\n  3019: a0 = a0 >> 0x3b\n  3022: a2 = sp + 0x8\n  3025: a2 = a2 + a0\n  3028: a0 = u8 [a2 + 0x11]\n  3031: a1 = u8 [a2 + 0x10]\n  3034: a3 = u8 [a2 + 0x12]\n  3037: a4 = u8 [a2 + 0x13]\n  3040: a0 = a0 << 0x8\n  3043: a0 = a0 | a1\n  3046: a3 = a3 << 0x10\n  3049: a4 = a4 << 0x18\n  3052: a3 = a3 | a4\n  3055: a0 = a0 | a3\n  3058: a1 = u8 [a2 + 0x15]\n  3061: a3 = u8 [a2 + 0x14]\n  3064: a4 = u8 [a2 + 0x16]\n  3067: a5 = u8 [a2 + 0x17]\n  3070: a1 = a1 << 0x8\n  3073: a1 = a1 | a3\n  3076: a4 = a4 << 0x10\n  3079: a5 = a5 << 0x18\n  3082: a4 = a4 | a5\n  3085: a1 = a1 | a4\n  3088: a1 = a1 << 0x20\n  3091: ra = a1 | a0\n  3094: a3 = t0 & 0x7\n  3097: a1 = ra >> a3\n  3100: a0 = u8 [a2 + 0x19]\n  3103: a4 = u8 [a2 + 0x18]\n  3106: s1 = u8 [a2 + 0x1a]\n  3109: s0 = u8 [a2 + 0x1b]\n  3112: a0 = a0 << 0x8\n  3115: a0 = a0 | a4\n  3118: s1 = s1 << 0x10\n  3121: s0 = s0 << 0x18\n  3124: s0 = s0 | s1\n  3127: a0 = a0 | s0\n  3130: a4 = u8 [a2 + 0x1d]\n  3133: s1 = u8 [a2 + 0x1c]\n  3136: s0 = u8 [a2 + 0x1e]\n  3139: a5 = u8 [a2 + 0x1f]\n  3142: a4 = a4 << 0x8\n  3145: a4 = a4 | s1\n  3148: s0 = s0 << 0x10\n  3151: a5 = a5 << 0x18\n  3154: a5 = a5 | s0\n  3157: a4 = a4 | a5\n  3160: a4 = a4 << 0x20\n  3163: t0 = a4 | a0\n  3166: a0 = t0 << 0x1\n  3169: t1 = a3 ^ 0x3f\n  3172: a4 = a0 << t1\n  3175: a4 = a4 | a1\n  3178: a0 = u8 [a2 + 0x9]\n  3181: a1 = u8 [a2 + 0x8]\n  3184: a5 = u8 [a2 + 0xa]\n  3187: s0 = u8 [a2 + 0xb]\n  3190: a0 = a0 << 0x8\n  3193: a0 = a0 | a1\n  3196: a5 = a5 << 0x10\n  3199: s0 = s0 << 0x18\n  3202: a5 = a5 | s0\n  3205: a0 = a0 | a5\n  3208: a1 = u8 [a2 + 0xd]\n  3211: a5 = u8 [a2 + 0xc]\n  3214: s0 = u8 [a2 + 0xe]\n  3217: s1 = u8 [a2 + 0xf]\n  3220: a1 = a1 << 0x8\n  3223: a1 = a1 | a5\n  3226: s0 = s0 << 0x10\n  3229: s1 = s1 << 0x18\n  3232: s0 = s0 | s1\n  3235: a1 = a1 | s0\n  3238: a1 = a1 << 0x20\n  3241: a1 = a1 | a0\n  3244: a0 = a1 >> a3\n  3247: ra = ra << 0x1\n  3250: a5 = a3 ^ 0xffffffffffffffff\n  3253: a5 = ra << a5\n  3256: ra = a0 | a5\n  3259: a0 = u8 [a2 + 0x1]\n  3262: s0 = u8 [a2]\n  3264: s1 = u8 [a2 + 0x2]\n  3267: a5 = u8 [a2 + 0x3]\n  3270: a0 = a0 << 0x8\n  3273: a0 = a0 | s0\n  3276: s1 = s1 << 0x10\n  3279: a5 = a5 << 0x18\n  3282: a5 = a5 | s1\n  3285: a0 = a0 | a5\n  3288: a5 = u8 [a2 + 0x5]\n  3291: s0 = u8 [a2 + 0x4]\n  3294: s1 = u8 [a2 + 0x6]\n  3297: a2 = u8 [a2 + 0x7]\n  3300: a5 = a5 << 0x8\n  3303: a5 = a5 | s0\n  3306: s1 = s1 << 0x10\n  3309: a2 = a2 << 0x18\n  3312: a2 = a2 | s1\n  3315: a2 = a2 | a5\n  3318: a2 = a2 << 0x20\n  3321: a0 = a0 | a2\n  3324: a0 = a0 >> a3\n  3327: a1 = a1 << 0x1\n  3330: a1 = a1 << t1\n  3333: a0 = a0 | a1\n  3336: a1 = t0 >> a3\n  3339: a0 = 0 if t2 != 0\n  3341: ra = 0 if t2 != 0\n  3343: a4 = 0 if t2 != 0\n  3345: a1 = 0 if t2 != 0\n  3347: a2 = u64 [sp]\n  3349: u64 [a2 + 0x18] = a1\n  3352: u64 [a2 + 0x10] = a4\n  3355: u64 [a2 + 0x8] = ra\n  3358: u64 [a2] = a0\n  3360: ra = u64 [sp + 0x58]\n  3363: s0 = u64 [sp + 0x50]\n  3366: s1 = u64 [sp + 0x48]\n  3369: sp = sp + 0x60\n  3372: ret\n      : @72 [@dyn 27] (gas: 58)\n  3374: a1 = reverse s1\n  3376: a2 = u64 [sp + 0x28]\n  3379: a2 = reverse a2\n  3381: a3 = u64 [sp + 0x50]\n  3384: a3 = reverse a3\n  3386: a4 = a3 >> 0x38\n  3389: u8 [a0 + 0x1f] = a4\n  3392: a4 = a3 >> 0x30\n  3395: u8 [a0 + 0x1e] = a4\n  3398: a4 = a3 >> 0x28\n  3401: u8 [a0 + 0x1d] = a4\n  3404: a4 = a3 >> 0x20\n  3407: u8 [a0 + 0x1c] = a4\n  3410: a4 = a3 >> 0x18\n  3413: u8 [a0 + 0x1b] = a4\n  3416: a4 = a3 >> 0x10\n  3419: u8 [a0 + 0x1a] = a4\n  3422: a4 = a3 >> 0x8\n  3425: u8 [a0 + 0x19] = a4\n  3428: u8 [a0 + 0x18] = a3\n  3431: a3 = a2 >> 0x38\n  3434: u8 [a0 + 0x17] = a3\n  3437: a3 = a2 >> 0x30\n  3440: u8 [a0 + 0x16] = a3\n  3443: a3 = a2 >> 0x28\n  3446: u8 [a0 + 0x15] = a3\n  3449: a3 = a2 >> 0x20\n  3452: u8 [a0 + 0x14] = a3\n  3455: a3 = a2 >> 0x18\n  3458: u8 [a0 + 0x13] = a3\n  3461: a3 = a2 >> 0x10\n  3464: u8 [a0 + 0x12] = a3\n  3467: a3 = a2 >> 0x8\n  3470: u8 [a0 + 0x11] = a3\n  3473: u8 [a0 + 0x10] = a2\n  3476: a2 = a1 >> 0x38\n  3479: u8 [a0 + 0xf] = a2\n  3482: a2 = a1 >> 0x30\n  3485: u8 [a0 + 0xe] = a2\n  3488: a2 = a1 >> 0x28\n  3491: u8 [a0 + 0xd] = a2\n  3494: a2 = a1 >> 0x20\n  3497: u8 [a0 + 0xc] = a2\n  3500: u8 [a0 + 11] = 0\n  3503: u8 [a0 + 10] = 0\n  3506: u8 [a0 + 9] = 0\n  3509: u8 [a0 + 0x8] = a1\n  3512: u8 [a0 + 7] = 0\n  3515: u8 [a0 + 6] = 0\n  3518: u8 [a0 + 5] = 0\n  3521: u8 [a0 + 4] = 0\n  3524: u8 [a0 + 3] = 0\n  3527: u8 [a0 + 2] = 0\n  3530: u8 [a0 + 1] = 0\n  3533: u8 [a0 + 0] = 0\n  3535: a0 = 0x20\n  3538: a1 = 0x20\n  3541: ra = 56, jump @0\n      : @73 [@dyn 28] (gas: 35)\n  3546: u8 [a0 + 31] = 0x1\n  3550: u8 [a0 + 30] = 0\n  3553: u8 [a0 + 29] = 0\n  3556: u8 [a0 + 28] = 0\n  3559: u8 [a0 + 27] = 0\n  3562: u8 [a0 + 26] = 0\n  3565: u8 [a0 + 25] = 0\n  3568: u8 [a0 + 24] = 0\n  3571: u8 [a0 + 23] = 0\n  3574: u8 [a0 + 22] = 0\n  3577: u8 [a0 + 21] = 0\n  3580: u8 [a0 + 20] = 0\n  3583: u8 [a0 + 19] = 0\n  3586: u8 [a0 + 18] = 0\n  3589: u8 [a0 + 17] = 0\n  3592: u8 [a0 + 16] = 0\n  3595: u8 [a0 + 15] = 0\n  3598: u8 [a0 + 14] = 0\n  3601: u8 [a0 + 13] = 0\n  3604: u8 [a0 + 12] = 0\n  3607: u8 [a0 + 11] = 0\n  3610: u8 [a0 + 10] = 0\n  3613: u8 [a0 + 9] = 0\n  3616: u8 [a0 + 8] = 0\n  3619: u8 [a0 + 7] = 0\n  3622: u8 [a0 + 6] = 0\n  3625: u8 [a0 + 5] = 0\n  3628: u8 [a0 + 4] = 0\n  3631: u8 [a0 + 3] = 0\n  3634: u8 [a0 + 2] = 0\n  3637: u8 [a0 + 1] = 0\n  3640: u8 [a0 + 0] = 0\n  3642: a1 = 0x40\n  3645: a0 = 0\n  3647: ra = 58, jump @0\n      : @74 [@dyn 29] (gas: 32)\n  3652: i32 a0 = a0 + 0\n  3654: i32 a2 = sp + 0x140\n  3658: a1 = 0x40\n  3661: ecalli 7 // 'hash_keccak_256'\n  3663: a0 = u64 [sp + 0x158]\n  3667: a1 = u64 [sp + 0x150]\n  3671: a2 = u64 [sp + 0x148]\n  3675: a3 = u64 [sp + 0x140]\n  3679: a5 = reverse a0\n  3681: a4 = reverse a1\n  3683: a1 = reverse a2\n  3685: a0 = reverse a3\n  3687: u64 [sp + 0x28] = a0\n  3690: u64 [sp + 0x138] = a0\n  3694: u64 [sp + 0x20] = a1\n  3697: u64 [sp + 0x130] = a1\n  3701: u64 [sp + 0x18] = a4\n  3704: u64 [sp + 0x128] = a4\n  3708: u64 [sp + 0x10] = a5\n  3711: u64 [sp + 0x120] = a5\n  3715: u64 [sp + 344] = 0\n  3719: u64 [sp + 336] = 0\n  3723: u64 [sp + 328] = 0\n  3727: u64 [sp + 320] = 0\n  3731: u32 [sp + 352] = 0x20\n  3736: i32 a1 = sp + 0x120\n  3740: i32 a3 = sp + 0x140\n  3744: i32 a4 = sp + 0x160\n  3748: a2 = 0xffffffffffffffff\n  3751: a0 = 0\n  3753: ecalli 6 // 'get_storage'\n  3755: fallthrough\n      : @75 (gas: 20)\n  3756: t1 = u64 [sp + 0x40]\n  3759: t2 = u64 [sp + 0x38]\n  3762: t0 = u64 [sp + 0x30]\n  3765: a0 = u64 [sp + 0x158]\n  3769: a1 = u64 [sp + 0x140]\n  3773: s1 = u64 [sp + 0x150]\n  3777: a3 = u64 [sp + 0x148]\n  3781: a4 = a0 ^ t0\n  3784: a0 = t0 <u a0\n  3787: a2 = u64 [sp + 0x48]\n  3790: a5 = a2 <u s1\n  3793: a5 = a0 if a4 != 0\n  3796: a0 = a3 ^ t2\n  3799: a3 = t2 <u a3\n  3802: a1 = t1 <u a1\n  3805: a1 = a3 if a0 != 0\n  3808: a0 = s1 ^ a2\n  3811: a0 = a0 | a4\n  3814: a1 = a5 if a0 != 0\n  3817: jump @78 if a1 == 0\n      : @76 (gas: 18)\n  3821: a0 = 0xffffffff\n  3831: u64 [sp + 0x50] = a0\n  3834: u64 [sp + 0xa0] = t1\n  3838: a0 = u64 [sp + 0x10]\n  3841: u64 [sp + 0xc0] = a0\n  3845: u64 [sp + 0xa8] = t2\n  3849: a0 = u64 [sp + 0x18]\n  3852: u64 [sp + 0xc8] = a0\n  3856: u64 [sp + 0xb0] = a2\n  3860: a0 = u64 [sp + 0x20]\n  3863: u64 [sp + 0xd0] = a0\n  3867: u64 [sp + 0xb8] = t0\n  3871: a0 = sp + 0xe0\n  3875: a1 = sp + 0xc0\n  3879: a2 = sp + 0xa0\n  3883: a3 = u64 [sp + 0x28]\n  3886: u64 [sp + 0xd8] = a3\n  3890: ra = 60, jump @62\n      : @77 [@dyn 30] (gas: 219)\n  3895: a0 = u64 [sp + 0x118]\n  3899: u64 [sp + 0x48] = a0\n  3902: a0 = u64 [sp + 0x110]\n  3906: u64 [sp + 0x40] = a0\n  3909: s1 = u64 [sp + 0x108]\n  3913: a0 = u64 [sp + 0x100]\n  3917: u64 [sp + 0x38] = a0\n  3920: a0 = u64 [sp + 0xf8]\n  3924: a1 = u64 [sp + 0xf0]\n  3928: a2 = u64 [sp + 0xe8]\n  3932: a3 = u64 [sp + 0xe0]\n  3936: u64 [sp + 0x138] = a0\n  3940: u64 [sp + 0x130] = a1\n  3944: u64 [sp + 0x128] = a2\n  3948: u64 [sp + 0x120] = a3\n  3952: u64 [sp + 344] = 0\n  3956: u64 [sp + 336] = 0\n  3960: u64 [sp + 328] = 0\n  3964: u64 [sp + 320] = 0\n  3968: u32 [sp + 352] = 0x20\n  3973: i32 a1 = sp + 0x120\n  3977: i32 a3 = sp + 0x140\n  3981: i32 a4 = sp + 0x160\n  3985: a2 = 0xffffffffffffffff\n  3988: a0 = 0\n  3990: ecalli 6 // 'get_storage'\n  3992: a1 = u64 [sp + 0x140]\n  3996: a2 = u64 [sp + 0x148]\n  4000: t0 = u64 [sp + 0x38]\n  4003: a0 = t0 >> 0x3d\n  4006: a3 = s1 << 0x3\n  4009: a3 = a3 | a0\n  4012: s1 = s1 >> 0x3d\n  4015: a4 = u64 [sp + 0x40]\n  4018: a0 = a4 << 0x3\n  4021: s1 = s1 | a0\n  4024: a0 = a4 >> 0x3d\n  4027: a4 = u64 [sp + 0x48]\n  4030: a4 = a4 << 0x3\n  4033: a4 = a4 | a0\n  4036: a0 = t0 << 0x3\n  4039: a5 = a3 >u 0\n  4041: a0 = a0 <u 0x100\n  4045: a0 = a0 ^ 0x1\n  4048: a0 = a5 if a3 != 0\n  4051: a3 = a4 >u 0\n  4053: a5 = s1 >u 0\n  4055: a5 = a3 if a4 != 0\n  4058: a3 = u64 [sp + 0x150]\n  4062: s1 = s1 | a4\n  4065: a4 = u64 [sp + 0x158]\n  4069: a0 = a5 if s1 != 0\n  4072: u8 [sp + 159] = 0\n  4076: u8 [sp + 158] = 0\n  4080: u8 [sp + 157] = 0\n  4084: u8 [sp + 156] = 0\n  4088: u8 [sp + 155] = 0\n  4092: u8 [sp + 154] = 0\n  4096: u8 [sp + 153] = 0\n  4100: u8 [sp + 152] = 0\n  4104: u8 [sp + 151] = 0\n  4108: u8 [sp + 150] = 0\n  4112: u8 [sp + 149] = 0\n  4116: u8 [sp + 148] = 0\n  4120: u8 [sp + 147] = 0\n  4124: u8 [sp + 146] = 0\n  4128: u8 [sp + 145] = 0\n  4132: u8 [sp + 144] = 0\n  4136: u8 [sp + 143] = 0\n  4140: u8 [sp + 142] = 0\n  4144: u8 [sp + 141] = 0\n  4148: u8 [sp + 140] = 0\n  4152: u8 [sp + 139] = 0\n  4156: u8 [sp + 138] = 0\n  4160: u8 [sp + 137] = 0\n  4164: u8 [sp + 136] = 0\n  4168: u8 [sp + 135] = 0\n  4172: u8 [sp + 134] = 0\n  4176: u8 [sp + 133] = 0\n  4180: u8 [sp + 132] = 0\n  4184: u8 [sp + 131] = 0\n  4188: u8 [sp + 130] = 0\n  4192: u8 [sp + 129] = 0\n  4196: u8 [sp + 128] = 0\n  4200: u8 [sp + 0x78] = a4\n  4203: u8 [sp + 0x70] = a3\n  4206: u8 [sp + 0x68] = a2\n  4209: u8 [sp + 0x60] = a1\n  4212: a5 = a4 >> 0x38\n  4215: u8 [sp + 0x7f] = a5\n  4218: a5 = a4 >> 0x30\n  4221: u8 [sp + 0x7e] = a5\n  4224: a5 = a4 >> 0x28\n  4227: u8 [sp + 0x7d] = a5\n  4230: a5 = a4 >> 0x20\n  4233: u8 [sp + 0x7c] = a5\n  4236: a5 = a4 >> 0x18\n  4239: u8 [sp + 0x7b] = a5\n  4242: a5 = a4 >> 0x10\n  4245: u8 [sp + 0x7a] = a5\n  4248: a4 = a4 >> 0x8\n  4251: u8 [sp + 0x79] = a4\n  4254: a4 = a3 >> 0x38\n  4257: u8 [sp + 0x77] = a4\n  4260: a4 = a3 >> 0x30\n  4263: u8 [sp + 0x76] = a4\n  4266: a4 = a3 >> 0x28\n  4269: u8 [sp + 0x75] = a4\n  4272: a4 = a3 >> 0x20\n  4275: u8 [sp + 0x74] = a4\n  4278: a4 = a3 >> 0x18\n  4281: u8 [sp + 0x73] = a4\n  4284: a4 = a3 >> 0x10\n  4287: u8 [sp + 0x72] = a4\n  4290: a3 = a3 >> 0x8\n  4293: u8 [sp + 0x71] = a3\n  4296: a3 = a2 >> 0x38\n  4299: u8 [sp + 0x6f] = a3\n  4302: a3 = a2 >> 0x30\n  4305: u8 [sp + 0x6e] = a3\n  4308: a3 = a2 >> 0x28\n  4311: u8 [sp + 0x6d] = a3\n  4314: a3 = a2 >> 0x20\n  4317: u8 [sp + 0x6c] = a3\n  4320: a3 = a2 >> 0x18\n  4323: u8 [sp + 0x6b] = a3\n  4326: a3 = a2 >> 0x10\n  4329: u8 [sp + 0x6a] = a3\n  4332: a2 = a2 >> 0x8\n  4335: u8 [sp + 0x69] = a2\n  4338: a2 = a1 >> 0x38\n  4341: u8 [sp + 0x67] = a2\n  4344: a2 = a1 >> 0x30\n  4347: u8 [sp + 0x66] = a2\n  4350: a2 = a1 >> 0x28\n  4353: u8 [sp + 0x65] = a2\n  4356: a2 = a1 >> 0x20\n  4359: u8 [sp + 0x64] = a2\n  4362: a2 = a1 >> 0x18\n  4365: u8 [sp + 0x63] = a2\n  4368: a2 = a1 >> 0x10\n  4371: u8 [sp + 0x62] = a2\n  4374: a1 = a1 >> 0x8\n  4377: u8 [sp + 0x61] = a1\n  4380: a1 = t0 & 0x1f\n  4383: a2 = sp + 0x60\n  4386: a1 = a1 + a2\n  4389: a2 = u8 [a1 + 0x1]\n  4392: a3 = u8 [a1]\n  4394: a4 = u8 [a1 + 0x2]\n  4397: a5 = u8 [a1 + 0x3]\n  4400: a2 = a2 << 0x8\n  4403: a2 = a2 | a3\n  4406: a4 = a4 << 0x10\n  4409: a5 = a5 << 0x18\n  4412: a4 = a4 | a5\n  4415: a2 = a2 | a4\n  4418: a3 = u8 [a1 + 0x5]\n  4421: a4 = u8 [a1 + 0x4]\n  4424: a5 = u8 [a1 + 0x6]\n  4427: s1 = u8 [a1 + 0x7]\n  4430: a3 = a3 << 0x8\n  4433: a3 = a3 | a4\n  4436: a5 = a5 << 0x10\n  4439: s1 = s1 << 0x18\n  4442: a5 = a5 | s1\n  4445: a3 = a3 | a5\n  4448: a3 = a3 << 0x20\n  4451: t0 = a3 | a2\n  4454: a3 = u8 [a1 + 0x9]\n  4457: a4 = u8 [a1 + 0x8]\n  4460: a5 = u8 [a1 + 0xa]\n  4463: s1 = u8 [a1 + 0xb]\n  4466: a3 = a3 << 0x8\n  4469: a3 = a3 | a4\n  4472: a5 = a5 << 0x10\n  4475: s1 = s1 << 0x18\n  4478: a5 = a5 | s1\n  4481: a3 = a3 | a5\n  4484: a4 = u8 [a1 + 0xd]\n  4487: a5 = u8 [a1 + 0xc]\n  4490: s1 = u8 [a1 + 0xe]\n  4493: a2 = u8 [a1 + 0xf]\n  4496: a4 = a4 << 0x8\n  4499: a4 = a4 | a5\n  4502: s1 = s1 << 0x10\n  4505: a2 = a2 << 0x18\n  4508: a2 = a2 | s1\n  4511: a2 = a2 | a4\n  4514: a2 = a2 << 0x20\n  4517: a2 = a2 | a3\n  4520: a3 = u8 [a1 + 0x11]\n  4523: a4 = u8 [a1 + 0x10]\n  4526: a5 = u8 [a1 + 0x12]\n  4529: a1 = u8 [a1 + 0x13]\n  4532: a3 = a3 << 0x8\n  4535: a3 = a3 | a4\n  4538: a5 = a5 << 0x10\n  4541: a1 = a1 << 0x18\n  4544: a1 = a1 | a5\n  4547: a1 = a1 | a3\n  4550: a2 = a2 & 0xffffffffffffffff\n  4553: a3 = t0 & 0xffffffffffffffff\n  4556: a4 = u64 [sp + 0x50]\n  4559: a1 = a1 & a4\n  4562: a3 = 0 if a0 != 0\n  4564: a2 = 0 if a0 != 0\n  4566: a1 = 0 if a0 != 0\n  4568: a0 = u64 [sp + 0x58]\n  4571: u64 [a0 + 0x10] = a1\n  4574: u64 [a0 + 0x8] = a2\n  4577: u64 [a0] = a3\n  4579: u64 [a0 + 24] = 0\n  4582: sp = s0 + 0xfffffffffffffe80\n  4586: ra = u64 [sp + 0x178]\n  4590: s0 = u64 [sp + 0x170]\n  4594: s1 = u64 [sp + 0x168]\n  4598: sp = sp + 0x180\n  4602: ret\n      : @78 (gas: 2)\n  4604: a0 = 0\n  4606: ra = 62, jump @0\n      : @79 [@dyn 31] (gas: 6)\n  4611: i32 a1 = a0 + 0\n  4613: a0 = 0x1\n  4616: a2 = 0\n  4618: ra = 0x40\n  4621: ecalli 12 // 'seal_return'\n  4623: fallthrough\n      : @80 [@dyn 32] (gas: 12)\n  4624: a2 = u64 [a1 + 0x10]\n  4627: a3 = u64 [a1 + 0x18]\n  4630: a4 = u64 [a1 + 0x8]\n  4633: a1 = u64 [a1]\n  4635: a3 = a3 | a4\n  4638: a4 = a1 | a2\n  4641: a4 = a4 | a3\n  4644: a4 = a4 >> 0x20\n  4647: a2 = a2 | a3\n  4650: a2 = a2 << 0x20\n  4653: a2 = a2 | a4\n  4656: jump @83 if a2 != 0\n      : @81 (gas: 13)\n  4660: sp = sp + 0xffffffffffffffe0\n  4663: u64 [sp + 0x18] = ra\n  4666: u64 [sp + 0x10] = s0\n  4669: u64 [sp + 0x8] = s1\n  4672: a2 = u64 [a0 + 0x10]\n  4675: a3 = u64 [a0 + 0x8]\n  4678: u64 [sp] = a3\n  4680: s1 = u64 [a0]\n  4682: a2 = a2 << 0x20\n  4685: s0 = a2 >> 0x20\n  4688: i32 a0 = a1 + 0\n  4690: a1 = 0x20\n  4693: ra = 66, jump @0\n      : @82 [@dyn 33] (gas: 59)\n  4698: a1 = reverse s0\n  4700: a2 = u64 [sp]\n  4702: a2 = reverse a2\n  4704: a3 = reverse s1\n  4706: a4 = a3 >> 0x38\n  4709: u8 [a0 + 0x1f] = a4\n  4712: a4 = a3 >> 0x30\n  4715: u8 [a0 + 0x1e] = a4\n  4718: a4 = a3 >> 0x28\n  4721: u8 [a0 + 0x1d] = a4\n  4724: a4 = a3 >> 0x20\n  4727: u8 [a0 + 0x1c] = a4\n  4730: a4 = a3 >> 0x18\n  4733: u8 [a0 + 0x1b] = a4\n  4736: a4 = a3 >> 0x10\n  4739: u8 [a0 + 0x1a] = a4\n  4742: a4 = a3 >> 0x8\n  4745: u8 [a0 + 0x19] = a4\n  4748: u8 [a0 + 0x18] = a3\n  4751: u8 [a0 + 0x10] = a2\n  4754: u8 [a0 + 11] = 0\n  4757: u8 [a0 + 10] = 0\n  4760: u8 [a0 + 9] = 0\n  4763: u8 [a0 + 7] = 0\n  4766: u8 [a0 + 6] = 0\n  4769: u8 [a0 + 5] = 0\n  4772: u8 [a0 + 4] = 0\n  4775: u8 [a0 + 3] = 0\n  4778: u8 [a0 + 2] = 0\n  4781: u8 [a0 + 1] = 0\n  4784: u8 [a0 + 0] = 0\n  4786: a3 = a2 >> 0x38\n  4789: u8 [a0 + 0x17] = a3\n  4792: a3 = a2 >> 0x30\n  4795: u8 [a0 + 0x16] = a3\n  4798: a3 = a2 >> 0x28\n  4801: u8 [a0 + 0x15] = a3\n  4804: a3 = a2 >> 0x20\n  4807: u8 [a0 + 0x14] = a3\n  4810: a3 = a2 >> 0x18\n  4813: u8 [a0 + 0x13] = a3\n  4816: a3 = a2 >> 0x10\n  4819: u8 [a0 + 0x12] = a3\n  4822: a2 = a2 >> 0x8\n  4825: u8 [a0 + 0x11] = a2\n  4828: u8 [a0 + 0x8] = a1\n  4831: a2 = a1 >> 0x38\n  4834: u8 [a0 + 0xf] = a2\n  4837: a2 = a1 >> 0x30\n  4840: u8 [a0 + 0xe] = a2\n  4843: a2 = a1 >> 0x28\n  4846: u8 [a0 + 0xd] = a2\n  4849: a1 = a1 >> 0x20\n  4852: u8 [a0 + 0xc] = a1\n  4855: ra = u64 [sp + 0x18]\n  4858: s0 = u64 [sp + 0x10]\n  4861: s1 = u64 [sp + 0x8]\n  4864: sp = sp + 0x20\n  4867: ret\n      : @83 (gas: 1)\n  4869: trap\n      : @84 (gas: 8)\n  4870: a0 = u64 [sp + 0x110]\n  4874: a1 = u64 [sp + 0x118]\n  4878: a2 = u64 [sp + 0x108]\n  4882: a3 = u64 [sp + 0x100]\n  4886: a1 = a1 | a2\n  4889: a0 = a0 | a3\n  4892: a0 = a0 | a1\n  4895: jump @90 if a0 != 0\n      : @85 (gas: 13)\n  4899: a0 = u32 [0x20004]\n  4904: u64 [sp + 152] = 0\n  4908: u64 [sp + 144] = 0\n  4912: u64 [sp + 136] = 0\n  4916: u64 [sp + 0x80] = a0\n  4920: u64 [sp + 184] = 0\n  4924: u64 [sp + 176] = 0\n  4928: u64 [sp + 160] = 0x4\n  4933: a0 = sp + 0xc0\n  4937: a1 = sp + 0xa0\n  4941: a2 = sp + 0x80\n  4945: u64 [sp + 168] = 0\n  4949: ra = 68, jump @52\n      : @86 [@dyn 34] (gas: 44)\n  4954: t0 = u64 [sp + 0xc0]\n  4958: a0 = u64 [sp + 0xc8]\n  4962: a1 = u64 [sp + 0xd0]\n  4966: a2 = u64 [sp + 0xd8]\n  4970: a4 = u64 [sp + 0xe0]\n  4974: a5 = u64 [sp + 0xe8]\n  4978: s1 = u64 [sp + 0xf0]\n  4982: a3 = u64 [sp + 0xf8]\n  4986: u64 [sp + 0x38] = a3\n  4989: u64 [sp + 0x30] = s1\n  4992: u64 [sp + 0x28] = a5\n  4995: u64 [sp + 0x20] = a4\n  4998: u64 [sp + 0x58] = a2\n  5001: u64 [sp + 0x50] = a1\n  5004: u64 [sp + 0x48] = a0\n  5007: a0 = sp + 0x60\n  5010: a1 = sp + 0x40\n  5013: a2 = sp + 0x20\n  5016: u64 [sp + 0x40] = t0\n  5019: ra = 0x46\n  5022: sp = sp + 0xfffffffffffffe80\n  5026: u64 [sp + 0x178] = ra\n  5030: u64 [sp + 0x170] = s0\n  5034: u64 [sp + 0x168] = s1\n  5038: s0 = sp + 0x180\n  5042: sp = sp & 0xffffffffffffffe0\n  5045: a3 = u64 [a2]\n  5047: u64 [sp + 0x40] = a3\n  5050: a3 = u64 [a2 + 0x8]\n  5053: u64 [sp + 0x38] = a3\n  5056: a3 = u64 [a2 + 0x10]\n  5059: u64 [sp + 0x48] = a3\n  5062: a2 = u64 [a2 + 0x18]\n  5065: u64 [sp + 0x30] = a2\n  5068: a2 = u64 [a1]\n  5070: u64 [sp + 0x50] = a2\n  5073: a2 = u64 [a1 + 0x8]\n  5076: u64 [sp + 0x28] = a2\n  5079: s1 = u32 [a1 + 0x10]\n  5082: u64 [sp + 0x58] = a0\n  5085: a1 = 0x20\n  5088: a0 = 0\n  5090: ra = 0x36\n  5093: jump @0\n      : @87 [@dyn 35] (gas: 11)\n  5096: a0 = u64 [sp + 0x78]\n  5099: u64 [sp] = a0\n  5101: a0 = u64 [sp + 0x70]\n  5104: u64 [sp + 0x8] = a0\n  5107: a0 = u64 [sp + 0x68]\n  5110: u64 [sp + 0x10] = a0\n  5113: a0 = u64 [sp + 0x60]\n  5116: u64 [sp + 0x18] = a0\n  5119: a0 = 0x40\n  5122: a1 = 0x20\n  5125: ra = 72, jump @0\n      : @88 [@dyn 36] (gas: 100)\n  5130: a1 = u8 [a0 + 0x11]\n  5133: a2 = u8 [a0 + 0x10]\n  5136: a3 = u8 [a0 + 0x12]\n  5139: a4 = u8 [a0 + 0x13]\n  5142: a1 = a1 << 0x8\n  5145: a1 = a1 | a2\n  5148: a3 = a3 << 0x10\n  5151: a4 = a4 << 0x18\n  5154: a3 = a3 | a4\n  5157: a1 = a1 | a3\n  5160: a2 = u8 [a0 + 0x15]\n  5163: a3 = u8 [a0 + 0x14]\n  5166: a4 = u8 [a0 + 0x16]\n  5169: a5 = u8 [a0 + 0x17]\n  5172: a2 = a2 << 0x8\n  5175: a2 = a2 | a3\n  5178: a4 = a4 << 0x10\n  5181: a5 = a5 << 0x18\n  5184: a4 = a4 | a5\n  5187: a2 = a2 | a4\n  5190: a2 = a2 << 0x20\n  5193: t0 = a2 | a1\n  5196: a2 = u8 [a0 + 0x1]\n  5199: a3 = u8 [a0]\n  5201: a4 = u8 [a0 + 0x2]\n  5204: a5 = u8 [a0 + 0x3]\n  5207: a2 = a2 << 0x8\n  5210: a2 = a2 | a3\n  5213: a4 = a4 << 0x10\n  5216: a5 = a5 << 0x18\n  5219: a4 = a4 | a5\n  5222: a2 = a2 | a4\n  5225: a3 = u8 [a0 + 0x5]\n  5228: a4 = u8 [a0 + 0x4]\n  5231: a5 = u8 [a0 + 0x6]\n  5234: s1 = u8 [a0 + 0x7]\n  5237: a3 = a3 << 0x8\n  5240: a3 = a3 | a4\n  5243: a5 = a5 << 0x10\n  5246: s1 = s1 << 0x18\n  5249: a5 = a5 | s1\n  5252: a3 = a3 | a5\n  5255: a3 = a3 << 0x20\n  5258: a2 = a2 | a3\n  5261: a3 = u8 [a0 + 0x19]\n  5264: a4 = u8 [a0 + 0x18]\n  5267: a5 = u8 [a0 + 0x1a]\n  5270: s1 = u8 [a0 + 0x1b]\n  5273: a3 = a3 << 0x8\n  5276: a3 = a3 | a4\n  5279: a5 = a5 << 0x10\n  5282: s1 = s1 << 0x18\n  5285: a5 = a5 | s1\n  5288: a3 = a3 | a5\n  5291: a4 = u8 [a0 + 0x1d]\n  5294: a5 = u8 [a0 + 0x1c]\n  5297: s1 = u8 [a0 + 0x1e]\n  5300: a1 = u8 [a0 + 0x1f]\n  5303: a4 = a4 << 0x8\n  5306: a4 = a4 | a5\n  5309: s1 = s1 << 0x10\n  5312: a1 = a1 << 0x18\n  5315: a1 = a1 | s1\n  5318: a1 = a1 | a4\n  5321: a1 = a1 << 0x20\n  5324: a3 = a3 | a1\n  5327: a1 = u8 [a0 + 0x9]\n  5330: a4 = u8 [a0 + 0x8]\n  5333: a5 = u8 [a0 + 0xa]\n  5336: s1 = u8 [a0 + 0xb]\n  5339: a1 = a1 << 0x8\n  5342: a1 = a1 | a4\n  5345: a5 = a5 << 0x10\n  5348: s1 = s1 << 0x18\n  5351: a5 = a5 | s1\n  5354: a1 = a1 | a5\n  5357: a4 = u8 [a0 + 0xd]\n  5360: a5 = u8 [a0 + 0xc]\n  5363: s1 = u8 [a0 + 0xe]\n  5366: a0 = u8 [a0 + 0xf]\n  5369: a4 = a4 << 0x8\n  5372: a4 = a4 | a5\n  5375: s1 = s1 << 0x10\n  5378: a0 = a0 << 0x18\n  5381: a0 = a0 | s1\n  5384: a0 = a0 | a4\n  5387: a0 = a0 << 0x20\n  5390: a0 = a0 | a1\n  5393: a1 = reverse a0\n  5395: a0 = reverse a3\n  5397: a2 = reverse a2\n  5399: a3 = reverse t0\n  5401: a2 = a2 | a3\n  5404: a3 = a0 | a1\n  5407: a3 = a3 | a2\n  5410: a3 = a3 >> 0x20\n  5413: a1 = a1 | a2\n  5416: a1 = a1 << 0x20\n  5419: a1 = a1 | a3\n  5422: jump @92 if a1 == 0\n      : @89 (gas: 1)\n  5425: trap\n      : @90 (gas: 3)\n  5426: a0 = 0\n  5428: a1 = 0\n  5430: ra = 74, jump @0\n      : @91 [@dyn 37] (gas: 5)\n  5435: i32 a1 = a0 + 0\n  5437: a0 = 0x1\n  5440: a2 = 0\n  5442: ecalli 12 // 'seal_return'\n  5444: fallthrough\n      : @92 (gas: 4)\n  5445: i32 s1 = a0 + 0\n  5447: a1 = 0x20\n  5450: a0 = s1\n  5452: ra = 76, jump @0\n      : @93 [@dyn 38] (gas: 71)\n  5457: a1 = u64 [sp]\n  5459: a1 = reverse a1\n  5461: a2 = u64 [sp + 0x8]\n  5464: a2 = reverse a2\n  5466: a3 = u64 [sp + 0x10]\n  5469: a3 = reverse a3\n  5471: a4 = u64 [sp + 0x18]\n  5474: a4 = reverse a4\n  5476: a5 = a4 >> 0x38\n  5479: u8 [a0 + 0x1f] = a5\n  5482: a5 = a4 >> 0x30\n  5485: u8 [a0 + 0x1e] = a5\n  5488: a5 = a4 >> 0x28\n  5491: u8 [a0 + 0x1d] = a5\n  5494: a5 = a4 >> 0x20\n  5497: u8 [a0 + 0x1c] = a5\n  5500: a5 = a4 >> 0x18\n  5503: u8 [a0 + 0x1b] = a5\n  5506: a5 = a4 >> 0x10\n  5509: u8 [a0 + 0x1a] = a5\n  5512: a5 = a4 >> 0x8\n  5515: u8 [a0 + 0x19] = a5\n  5518: u8 [a0 + 0x18] = a4\n  5521: u8 [a0 + 0x10] = a3\n  5524: a4 = a3 >> 0x38\n  5527: u8 [a0 + 0x17] = a4\n  5530: a4 = a3 >> 0x30\n  5533: u8 [a0 + 0x16] = a4\n  5536: a4 = a3 >> 0x28\n  5539: u8 [a0 + 0x15] = a4\n  5542: a4 = a3 >> 0x20\n  5545: u8 [a0 + 0x14] = a4\n  5548: a4 = a3 >> 0x18\n  5551: u8 [a0 + 0x13] = a4\n  5554: a4 = a3 >> 0x10\n  5557: u8 [a0 + 0x12] = a4\n  5560: a3 = a3 >> 0x8\n  5563: u8 [a0 + 0x11] = a3\n  5566: u8 [a0 + 0x8] = a2\n  5569: a3 = a2 >> 0x38\n  5572: u8 [a0 + 0xf] = a3\n  5575: a3 = a2 >> 0x30\n  5578: u8 [a0 + 0xe] = a3\n  5581: a3 = a2 >> 0x28\n  5584: u8 [a0 + 0xd] = a3\n  5587: a3 = a2 >> 0x20\n  5590: u8 [a0 + 0xc] = a3\n  5593: a3 = a2 >> 0x18\n  5596: u8 [a0 + 0xb] = a3\n  5599: a3 = a2 >> 0x10\n  5602: u8 [a0 + 0xa] = a3\n  5605: a2 = a2 >> 0x8\n  5608: u8 [a0 + 0x9] = a2\n  5611: u8 [a0] = a1\n  5613: a2 = a1 >> 0x38\n  5616: u8 [a0 + 0x7] = a2\n  5619: a2 = a1 >> 0x30\n  5622: u8 [a0 + 0x6] = a2\n  5625: a2 = a1 >> 0x28\n  5628: u8 [a0 + 0x5] = a2\n  5631: a2 = a1 >> 0x20\n  5634: u8 [a0 + 0x4] = a2\n  5637: a2 = a1 >> 0x18\n  5640: u8 [a0 + 0x3] = a2\n  5643: a2 = a1 >> 0x10\n  5646: u8 [a0 + 0x2] = a2\n  5649: a1 = a1 >> 0x8\n  5652: u8 [a0 + 0x1] = a1\n  5655: a1 = 0x20\n  5658: a0 = s1\n  5660: ra = 78, jump @0\n      : @94 [@dyn 39] (gas: 6)\n  5665: i32 a1 = a0 + 0\n  5667: a2 = 0x20\n  5670: a0 = 0\n  5672: ra = 0x50\n  5675: ecalli 12 // 'seal_return'\n  5677: fallthrough\n      : @95 [@dyn 40] (gas: 19)\n  5678: t0 = u64 [a0 + 0x18]\n  5681: t1 = u64 [a1 + 0x18]\n  5684: a4 = u64 [a0 + 0x10]\n  5687: a5 = u64 [a0 + 0x8]\n  5690: a2 = u64 [a1 + 0x8]\n  5693: t2 = u64 [a0]\n  5695: a3 = u64 [a1]\n  5697: a1 = u64 [a1 + 0x10]\n  5700: a0 = a2 ^ a5\n  5703: a2 = a2 <u a5\n  5706: a3 = a3 <u t2\n  5709: a3 = a2 if a0 != 0\n  5712: a0 = a1 - a4\n  5715: a0 = a0 <u a3\n  5718: a1 = a1 <u a4\n  5721: a2 = t1 - t0\n  5724: a2 = a2 - a1\n  5727: a2 = a2 - a0\n  5730: jump @97 if a2 <s 0\n      : @96 (gas: 1)\n  5733: ret\n      : @97 (gas: 5)\n  5735: sp = sp + 0xfffffffffffffff8\n  5738: u64 [sp] = ra\n  5740: a0 = 0\n  5742: a1 = 0\n  5744: ra = 82, jump @0\n      : @98 [@dyn 41] (gas: 6)\n  5749: i32 a1 = a0 + 0\n  5751: a0 = 0x1\n  5754: a2 = 0\n  5756: ra = 0x54\n  5759: ecalli 12 // 'seal_return'\n  5761: fallthrough\n      : @99 [@dyn 42] (gas: 9)\n  5762: a2 = u64 [a1 + 0x18]\n  5765: a3 = u64 [a1 + 0x10]\n  5768: a4 = u64 [a1 + 0x8]\n  5771: a1 = u64 [a1]\n  5773: u64 [a0 + 0x18] = a2\n  5776: u64 [a0 + 0x10] = a3\n  5779: u64 [a0 + 0x8] = a4\n  5782: u64 [a0] = a1\n  5784: ret\n      : @100 (gas: 8)\n  5786: a0 = u64 [sp + 0x10]\n  5789: a1 = u64 [sp + 0x18]\n  5792: a2 = u64 [sp + 0x8]\n  5795: a3 = u64 [sp]\n  5797: a1 = a1 | a2\n  5800: a0 = a0 | a3\n  5803: a0 = a0 | a1\n  5806: jump @105 if a0 != 0\n      : @101 (gas: 2)\n  5810: a0 = i32 [0x20004]\n  5815: jump @105 if a0 <=u 3\n      : @102 (gas: 3)\n  5820: a0 = 0x40\n  5823: a1 = 0x20\n  5826: ra = 86, jump @0\n      : @103 [@dyn 43] (gas: 100)\n  5831: a1 = u8 [a0 + 0x11]\n  5834: a2 = u8 [a0 + 0x10]\n  5837: a3 = u8 [a0 + 0x12]\n  5840: a4 = u8 [a0 + 0x13]\n  5843: a1 = a1 << 0x8\n  5846: a1 = a1 | a2\n  5849: a3 = a3 << 0x10\n  5852: a4 = a4 << 0x18\n  5855: a3 = a3 | a4\n  5858: a1 = a1 | a3\n  5861: a2 = u8 [a0 + 0x15]\n  5864: a3 = u8 [a0 + 0x14]\n  5867: a4 = u8 [a0 + 0x16]\n  5870: a5 = u8 [a0 + 0x17]\n  5873: a2 = a2 << 0x8\n  5876: a2 = a2 | a3\n  5879: a4 = a4 << 0x10\n  5882: a5 = a5 << 0x18\n  5885: a4 = a4 | a5\n  5888: a2 = a2 | a4\n  5891: a2 = a2 << 0x20\n  5894: t0 = a2 | a1\n  5897: a2 = u8 [a0 + 0x1]\n  5900: a3 = u8 [a0]\n  5902: a4 = u8 [a0 + 0x2]\n  5905: a5 = u8 [a0 + 0x3]\n  5908: a2 = a2 << 0x8\n  5911: a2 = a2 | a3\n  5914: a4 = a4 << 0x10\n  5917: a5 = a5 << 0x18\n  5920: a4 = a4 | a5\n  5923: a2 = a2 | a4\n  5926: a3 = u8 [a0 + 0x5]\n  5929: a4 = u8 [a0 + 0x4]\n  5932: a5 = u8 [a0 + 0x6]\n  5935: a1 = u8 [a0 + 0x7]\n  5938: a3 = a3 << 0x8\n  5941: a3 = a3 | a4\n  5944: a5 = a5 << 0x10\n  5947: a1 = a1 << 0x18\n  5950: a1 = a1 | a5\n  5953: a1 = a1 | a3\n  5956: a1 = a1 << 0x20\n  5959: t1 = a1 | a2\n  5962: a1 = u8 [a0 + 0x19]\n  5965: a3 = u8 [a0 + 0x18]\n  5968: a4 = u8 [a0 + 0x1a]\n  5971: a5 = u8 [a0 + 0x1b]\n  5974: a1 = a1 << 0x8\n  5977: a1 = a1 | a3\n  5980: a4 = a4 << 0x10\n  5983: a5 = a5 << 0x18\n  5986: a4 = a4 | a5\n  5989: a1 = a1 | a4\n  5992: a3 = u8 [a0 + 0x1d]\n  5995: a4 = u8 [a0 + 0x1c]\n  5998: a5 = u8 [a0 + 0x1e]\n  6001: a2 = u8 [a0 + 0x1f]\n  6004: a3 = a3 << 0x8\n  6007: a3 = a3 | a4\n  6010: a5 = a5 << 0x10\n  6013: a2 = a2 << 0x18\n  6016: a2 = a2 | a5\n  6019: a2 = a2 | a3\n  6022: a2 = a2 << 0x20\n  6025: a3 = a2 | a1\n  6028: a1 = u8 [a0 + 0x9]\n  6031: a2 = u8 [a0 + 0x8]\n  6034: a4 = u8 [a0 + 0xa]\n  6037: a5 = u8 [a0 + 0xb]\n  6040: a1 = a1 << 0x8\n  6043: a1 = a1 | a2\n  6046: a4 = a4 << 0x10\n  6049: a5 = a5 << 0x18\n  6052: a4 = a4 | a5\n  6055: a1 = a1 | a4\n  6058: a2 = u8 [a0 + 0xd]\n  6061: a4 = u8 [a0 + 0xc]\n  6064: a5 = u8 [a0 + 0xe]\n  6067: a0 = u8 [a0 + 0xf]\n  6070: a2 = a2 << 0x8\n  6073: a2 = a2 | a4\n  6076: a5 = a5 << 0x10\n  6079: a0 = a0 << 0x18\n  6082: a0 = a0 | a5\n  6085: a0 = a0 | a2\n  6088: a0 = a0 << 0x20\n  6091: a0 = a0 | a1\n  6094: a1 = reverse a0\n  6096: a0 = reverse a3\n  6098: a2 = reverse t1\n  6100: a3 = reverse t0\n  6102: a2 = a2 | a3\n  6105: a3 = a0 | a1\n  6108: a3 = a3 | a2\n  6111: a3 = a3 >> 0x20\n  6114: a1 = a1 | a2\n  6117: a1 = a1 << 0x20\n  6120: a1 = a1 | a3\n  6123: jump @107 if a1 == 0\n      : @104 (gas: 1)\n  6126: trap\n      : @105 (gas: 3)\n  6127: a0 = 0\n  6129: a1 = 0\n  6131: ra = 88, jump @0\n      : @106 [@dyn 44] (gas: 7)\n  6136: i32 a1 = a0 + 0\n  6138: a0 = 0x1\n  6141: a2 = 0\n  6143: ecalli 12 // 'seal_return'\n  6145: i32 a0 = a0 + 0\n  6147: ra = 0x5a\n  6150: jump @0\n      : @107 (gas: 2)\n  6153: i32 a0 = a0 + 0\n  6155: ra = 90, jump @0\n      : @108 [@dyn 45] (gas: 6)\n  6160: i32 a1 = a0 + 0\n  6162: a0 = 0\n  6164: a2 = 0\n  6166: ra = 0x5c\n  6169: ecalli 12 // 'seal_return'\n  6171: fallthrough\n      : @109 [@dyn 46] (gas: 12)\n  6172: sp = sp + 0xffffffffffffffc0\n  6175: u64 [sp + 0x38] = ra\n  6178: u64 [sp + 0x30] = s0\n  6181: s0 = sp + 0x40\n  6184: sp = sp & 0xffffffffffffffe0\n  6187: u64 [sp + 24] = 0\n  6190: u64 [sp + 16] = 0\n  6193: u64 [sp + 8] = 0\n  6196: u64 [sp + 0] = 0\n  6198: i32 a0 = sp + 0\n  6200: ecalli 15 // 'value_transferred'\n  6202: fallthrough\n      : @110 (gas: 8)\n  6203: a0 = u64 [sp + 0x10]\n  6206: a1 = u64 [sp + 0x18]\n  6209: a2 = u64 [sp + 0x8]\n  6212: a3 = u64 [sp]\n  6214: a1 = a1 | a2\n  6217: a0 = a0 | a3\n  6220: a0 = a0 | a1\n  6223: jump @116 if a0 != 0\n      : @111 (gas: 2)\n  6227: a0 = i32 [0x20004]\n  6232: jump @116 if a0 <=u 3\n      : @112 (gas: 1)\n  6237: ra = 94, jump @212\n      : @113 [@dyn 47] (gas: 3)\n  6242: a0 = 0x40\n  6245: a1 = 0x20\n  6248: ra = 96, jump @0\n      : @114 [@dyn 48] (gas: 100)\n  6253: a1 = u8 [a0 + 0x11]\n  6256: a2 = u8 [a0 + 0x10]\n  6259: a3 = u8 [a0 + 0x12]\n  6262: a4 = u8 [a0 + 0x13]\n  6265: a1 = a1 << 0x8\n  6268: a1 = a1 | a2\n  6271: a3 = a3 << 0x10\n  6274: a4 = a4 << 0x18\n  6277: a3 = a3 | a4\n  6280: a1 = a1 | a3\n  6283: a2 = u8 [a0 + 0x15]\n  6286: a3 = u8 [a0 + 0x14]\n  6289: a4 = u8 [a0 + 0x16]\n  6292: a5 = u8 [a0 + 0x17]\n  6295: a2 = a2 << 0x8\n  6298: a2 = a2 | a3\n  6301: a4 = a4 << 0x10\n  6304: a5 = a5 << 0x18\n  6307: a4 = a4 | a5\n  6310: a2 = a2 | a4\n  6313: a2 = a2 << 0x20\n  6316: t0 = a2 | a1\n  6319: a2 = u8 [a0 + 0x1]\n  6322: a3 = u8 [a0]\n  6324: a4 = u8 [a0 + 0x2]\n  6327: a5 = u8 [a0 + 0x3]\n  6330: a2 = a2 << 0x8\n  6333: a2 = a2 | a3\n  6336: a4 = a4 << 0x10\n  6339: a5 = a5 << 0x18\n  6342: a4 = a4 | a5\n  6345: a2 = a2 | a4\n  6348: a3 = u8 [a0 + 0x5]\n  6351: a4 = u8 [a0 + 0x4]\n  6354: a5 = u8 [a0 + 0x6]\n  6357: a1 = u8 [a0 + 0x7]\n  6360: a3 = a3 << 0x8\n  6363: a3 = a3 | a4\n  6366: a5 = a5 << 0x10\n  6369: a1 = a1 << 0x18\n  6372: a1 = a1 | a5\n  6375: a1 = a1 | a3\n  6378: a1 = a1 << 0x20\n  6381: t1 = a1 | a2\n  6384: a1 = u8 [a0 + 0x19]\n  6387: a3 = u8 [a0 + 0x18]\n  6390: a4 = u8 [a0 + 0x1a]\n  6393: a5 = u8 [a0 + 0x1b]\n  6396: a1 = a1 << 0x8\n  6399: a1 = a1 | a3\n  6402: a4 = a4 << 0x10\n  6405: a5 = a5 << 0x18\n  6408: a4 = a4 | a5\n  6411: a1 = a1 | a4\n  6414: a3 = u8 [a0 + 0x1d]\n  6417: a4 = u8 [a0 + 0x1c]\n  6420: a5 = u8 [a0 + 0x1e]\n  6423: a2 = u8 [a0 + 0x1f]\n  6426: a3 = a3 << 0x8\n  6429: a3 = a3 | a4\n  6432: a5 = a5 << 0x10\n  6435: a2 = a2 << 0x18\n  6438: a2 = a2 | a5\n  6441: a2 = a2 | a3\n  6444: a2 = a2 << 0x20\n  6447: a3 = a2 | a1\n  6450: a1 = u8 [a0 + 0x9]\n  6453: a2 = u8 [a0 + 0x8]\n  6456: a4 = u8 [a0 + 0xa]\n  6459: a5 = u8 [a0 + 0xb]\n  6462: a1 = a1 << 0x8\n  6465: a1 = a1 | a2\n  6468: a4 = a4 << 0x10\n  6471: a5 = a5 << 0x18\n  6474: a4 = a4 | a5\n  6477: a1 = a1 | a4\n  6480: a2 = u8 [a0 + 0xd]\n  6483: a4 = u8 [a0 + 0xc]\n  6486: a5 = u8 [a0 + 0xe]\n  6489: a0 = u8 [a0 + 0xf]\n  6492: a2 = a2 << 0x8\n  6495: a2 = a2 | a4\n  6498: a5 = a5 << 0x10\n  6501: a0 = a0 << 0x18\n  6504: a0 = a0 | a5\n  6507: a0 = a0 | a2\n  6510: a0 = a0 << 0x20\n  6513: a0 = a0 | a1\n  6516: a1 = reverse a0\n  6518: a0 = reverse a3\n  6520: a2 = reverse t1\n  6522: a3 = reverse t0\n  6524: a2 = a2 | a3\n  6527: a3 = a0 | a1\n  6530: a3 = a3 | a2\n  6533: a3 = a3 >> 0x20\n  6536: a1 = a1 | a2\n  6539: a1 = a1 << 0x20\n  6542: a1 = a1 | a3\n  6545: jump @118 if a1 == 0\n      : @115 (gas: 1)\n  6548: trap\n      : @116 (gas: 3)\n  6549: a0 = 0\n  6551: a1 = 0\n  6553: ra = 98, jump @0\n      : @117 [@dyn 49] (gas: 7)\n  6558: i32 a1 = a0 + 0\n  6560: a0 = 0x1\n  6563: a2 = 0\n  6565: ecalli 12 // 'seal_return'\n  6567: i32 a0 = a0 + 0\n  6569: ra = 0x64\n  6572: jump @0\n      : @118 (gas: 2)\n  6575: i32 a0 = a0 + 0\n  6577: ra = 100, jump @0\n      : @119 [@dyn 50] (gas: 6)\n  6582: i32 a1 = a0 + 0\n  6584: a0 = 0\n  6586: a2 = 0\n  6588: ra = 0x66\n  6591: ecalli 12 // 'seal_return'\n  6593: fallthrough\n      : @120 [@dyn 51] (gas: 47)\n  6594: sp = sp + 0xffffffffffffff80\n  6597: u64 [sp + 0x78] = ra\n  6600: u64 [sp + 0x70] = s0\n  6603: u64 [sp + 0x68] = s1\n  6606: s0 = sp + 0x80\n  6610: sp = sp & 0xffffffffffffffe0\n  6613: ra = u64 [a1 + 0x10]\n  6616: a5 = u64 [a1 + 0x8]\n  6619: a3 = u64 [a2 + 0x8]\n  6622: t1 = u64 [a1]\n  6624: a4 = u64 [a2]\n  6626: u64 [sp + 0x28] = a4\n  6629: t2 = u64 [a2 + 0x10]\n  6632: t0 = a3 ^ a5\n  6635: s1 = a3 <u a5\n  6638: a4 = a4 <u t1\n  6641: u64 [sp + 0x20] = a4\n  6644: s1 = a4 if t0 == 0\n  6647: t0 = u64 [a1 + 0x18]\n  6650: a1 = u64 [a2 + 0x18]\n  6653: u64 [sp + 0x18] = a1\n  6656: a2 = t2 - ra\n  6659: a1 = a2 - s1\n  6662: u64 [sp + 0x30] = a1\n  6665: a1 = a2 <u s1\n  6668: a4 = t2 <u ra\n  6671: u64 [sp + 0x38] = t0\n  6674: a2 = u64 [sp + 0x18]\n  6677: a2 = a2 - t0\n  6680: a2 = a2 - a4\n  6683: a2 = a2 - a1\n  6686: a1 = a3 - a5\n  6689: a3 = u64 [sp + 0x20]\n  6692: a1 = a1 - a3\n  6695: a3 = u64 [sp + 0x28]\n  6698: a3 = a3 - t1\n  6701: a4 = a1 >u 0\n  6703: a3 = a3 <u 0x40\n  6706: a3 = a3 ^ 0x1\n  6709: a3 = a4 if a1 != 0\n  6712: s1 = a2 >s 0\n  6714: a1 = u64 [sp + 0x30]\n  6717: a4 = a1 >u 0\n  6719: a4 = s1 if a2 != 0\n  6722: a1 = a1 | a2\n  6725: a3 = a4 if a1 != 0\n  6728: jump @126 if a3 == 0\n      : @121 (gas: 12)\n  6732: s1 = a0\n  6734: a0 = t1 | ra\n  6737: u64 [sp + 0x30] = a5\n  6740: a1 = u64 [sp + 0x38]\n  6743: a1 = a1 | a5\n  6746: a0 = a0 | a1\n  6749: a0 = a0 >> 0x20\n  6752: u64 [sp + 0x28] = ra\n  6755: a1 = a1 | ra\n  6758: a1 = a1 << 0x20\n  6761: a0 = a0 | a1\n  6764: jump @125 if a0 != 0\n      : @122 (gas: 6)\n  6768: i32 a1 = t1 + 0\n  6770: i32 a0 = sp + 0x40\n  6773: u64 [sp + 0x18] = a1\n  6776: u64 [sp + 0x20] = t1\n  6779: ecalli 2 // 'call_data_load'\n  6781: fallthrough\n      : @123 (gas: 10)\n  6782: a0 = u64 [sp + 0x28]\n  6785: a1 = u64 [sp + 0x38]\n  6788: a0 = a0 | a1\n  6791: a1 = 0xffffffe0\n  6801: a2 = u64 [sp + 0x20]\n  6804: a1 = a2 <u a1\n  6807: a2 = u64 [sp + 0x30]\n  6810: a1 = 0 if a2 != 0\n  6812: a1 = 0 if a0 != 0\n  6814: jump @125 if a1 == 0\n      : @124 (gas: 34)\n  6817: a0 = u64 [sp + 0x58]\n  6820: u64 [sp + 0x20] = a0\n  6823: a0 = u64 [sp + 0x50]\n  6826: u64 [sp + 0x28] = a0\n  6829: a0 = u64 [sp + 0x48]\n  6832: u64 [sp + 0x30] = a0\n  6835: a0 = u64 [sp + 0x40]\n  6838: u64 [sp + 0x38] = a0\n  6841: a0 = u64 [sp + 0x18]\n  6844: i32 a1 = a0 + 0x20\n  6847: i32 a0 = sp + 0x40\n  6850: ecalli 2 // 'call_data_load'\n  6852: a0 = u64 [sp + 0x58]\n  6855: a1 = u64 [sp + 0x50]\n  6858: a2 = u64 [sp + 0x48]\n  6861: a3 = u64 [sp + 0x40]\n  6864: u64 [s1 + 0x38] = a0\n  6867: u64 [s1 + 0x30] = a1\n  6870: u64 [s1 + 0x28] = a2\n  6873: u64 [s1 + 0x20] = a3\n  6876: a0 = u64 [sp + 0x20]\n  6879: u64 [s1 + 0x18] = a0\n  6882: a0 = u64 [sp + 0x28]\n  6885: u64 [s1 + 0x10] = a0\n  6888: a0 = u64 [sp + 0x30]\n  6891: u64 [s1 + 0x8] = a0\n  6894: a0 = u64 [sp + 0x38]\n  6897: u64 [s1] = a0\n  6899: sp = s0 + 0xffffffffffffff80\n  6902: ra = u64 [sp + 0x78]\n  6905: s0 = u64 [sp + 0x70]\n  6908: s1 = u64 [sp + 0x68]\n  6911: sp = sp + 0x80\n  6915: ret\n      : @125 (gas: 1)\n  6917: trap\n      : @126 (gas: 3)\n  6918: a0 = 0\n  6920: a1 = 0\n  6922: ra = 104, jump @0\n      : @127 [@dyn 52] (gas: 6)\n  6927: i32 a1 = a0 + 0\n  6929: a0 = 0x1\n  6932: a2 = 0\n  6934: ra = 0x6a\n  6937: ecalli 12 // 'seal_return'\n  6939: fallthrough\n      : @128 [@dyn 53] (gas: 8)\n  6940: sp = sp + 0xffffffffffffff60\n  6944: u64 [sp + 0x98] = ra\n  6948: u64 [sp + 0x90] = s0\n  6952: u64 [sp + 0x88] = s1\n  6956: s0 = sp + 0xa0\n  6960: sp = sp & 0xffffffffffffffe0\n  6963: a0 = i32 [0x20004]\n  6968: jump @133 if a0 <=u 67\n      : @129 (gas: 75)\n  6973: i32 a0 = sp + 0x60\n  6976: a1 = 0x4\n  6979: ecalli 2 // 'call_data_load'\n  6981: a0 = u64 [sp + 0x60]\n  6984: u64 [sp + 0x18] = a0\n  6987: a0 = u64 [sp + 0x68]\n  6990: u64 [sp + 0x10] = a0\n  6993: a0 = u64 [sp + 0x70]\n  6996: u64 [sp + 0x8] = a0\n  6999: s1 = u64 [sp + 0x78]\n  7002: i32 a0 = sp + 0x60\n  7005: a1 = 0x24\n  7008: ecalli 2 // 'call_data_load'\n  7010: a0 = u64 [sp + 0x60]\n  7013: a1 = u64 [sp + 0x68]\n  7016: a2 = u64 [sp + 0x70]\n  7019: a3 = u64 [sp + 0x78]\n  7022: u64 [sp + 0x38] = a3\n  7025: u64 [sp + 0x30] = a2\n  7028: u64 [sp + 0x28] = a1\n  7031: u64 [sp + 0x20] = a0\n  7034: u64 [sp + 0x58] = s1\n  7037: a0 = u64 [sp + 0x8]\n  7040: u64 [sp + 0x50] = a0\n  7043: a0 = u64 [sp + 0x10]\n  7046: u64 [sp + 0x48] = a0\n  7049: a0 = sp + 0x40\n  7052: a1 = sp + 0x20\n  7055: a2 = u64 [sp + 0x18]\n  7058: u64 [sp + 0x40] = a2\n  7061: ra = 0x6c\n  7064: sp = sp + 0xfffffffffffffd60\n  7068: u64 [sp + 0x298] = ra\n  7072: u64 [sp + 0x290] = s0\n  7076: u64 [sp + 0x288] = s1\n  7080: s0 = sp + 0x2a0\n  7084: sp = sp & 0xffffffffffffffe0\n  7087: s1 = sp\n  7089: a2 = u64 [a1 + 0x18]\n  7092: u64 [s1 + 0x48] = a2\n  7095: a2 = u64 [a1 + 0x10]\n  7098: u64 [s1 + 0x50] = a2\n  7101: a2 = u64 [a1 + 0x8]\n  7104: u64 [s1 + 0x58] = a2\n  7107: a1 = u64 [a1]\n  7109: u64 [s1 + 0x60] = a1\n  7112: a1 = u64 [a0]\n  7114: u64 [s1 + 0x98] = a1\n  7118: a1 = u64 [a0 + 0x8]\n  7121: u64 [s1 + 0x90] = a1\n  7125: a1 = u64 [a0 + 0x10]\n  7128: u64 [s1 + 0x88] = a1\n  7132: a0 = u64 [a0 + 0x18]\n  7135: u64 [s1 + 0x80] = a0\n  7139: i32 a0 = s1 + 0x160\n  7143: ecalli 4 // 'caller'\n  7145: a0 = u64 [s1 + 0x168]\n  7149: a1 = i32 [s1 + 0x170]\n  7153: a3 = u64 [s1 + 0x160]\n  7157: u64 [s1 + 0x70] = a3\n  7160: a0 = reverse a0\n  7162: a2 = a0 << 0x20\n  7165: a1 = reverse a1\n  7167: a1 = a1 >> 0x20\n  7170: a1 = a1 | a2\n  7173: u64 [s1 + 0x78] = a1\n  7176: a0 = a0 >> 0x20\n  7179: a1 = reverse a3\n  7181: a1 = a1 << 0x20\n  7184: a0 = a0 | a1\n  7187: u64 [s1 + 0x68] = a0\n  7190: a1 = 0x20\n  7193: a0 = 0\n  7195: ra = 0xe0\n  7199: jump @0\n      : @130 [@dyn 54] (gas: 3)\n  7202: a0 = 0x40\n  7205: a1 = 0x20\n  7208: ra = 110, jump @0\n      : @131 [@dyn 55] (gas: 100)\n  7213: a1 = u8 [a0 + 0x11]\n  7216: a2 = u8 [a0 + 0x10]\n  7219: a3 = u8 [a0 + 0x12]\n  7222: a4 = u8 [a0 + 0x13]\n  7225: a1 = a1 << 0x8\n  7228: a1 = a1 | a2\n  7231: a3 = a3 << 0x10\n  7234: a4 = a4 << 0x18\n  7237: a3 = a3 | a4\n  7240: a1 = a1 | a3\n  7243: a2 = u8 [a0 + 0x15]\n  7246: a3 = u8 [a0 + 0x14]\n  7249: a4 = u8 [a0 + 0x16]\n  7252: a5 = u8 [a0 + 0x17]\n  7255: a2 = a2 << 0x8\n  7258: a2 = a2 | a3\n  7261: a4 = a4 << 0x10\n  7264: a5 = a5 << 0x18\n  7267: a4 = a4 | a5\n  7270: a2 = a2 | a4\n  7273: a2 = a2 << 0x20\n  7276: t0 = a2 | a1\n  7279: a2 = u8 [a0 + 0x1]\n  7282: a3 = u8 [a0]\n  7284: a4 = u8 [a0 + 0x2]\n  7287: a5 = u8 [a0 + 0x3]\n  7290: a2 = a2 << 0x8\n  7293: a2 = a2 | a3\n  7296: a4 = a4 << 0x10\n  7299: a5 = a5 << 0x18\n  7302: a4 = a4 | a5\n  7305: a2 = a2 | a4\n  7308: a3 = u8 [a0 + 0x5]\n  7311: a4 = u8 [a0 + 0x4]\n  7314: a5 = u8 [a0 + 0x6]\n  7317: s1 = u8 [a0 + 0x7]\n  7320: a3 = a3 << 0x8\n  7323: a3 = a3 | a4\n  7326: a5 = a5 << 0x10\n  7329: s1 = s1 << 0x18\n  7332: a5 = a5 | s1\n  7335: a3 = a3 | a5\n  7338: a3 = a3 << 0x20\n  7341: a2 = a2 | a3\n  7344: a3 = u8 [a0 + 0x19]\n  7347: a4 = u8 [a0 + 0x18]\n  7350: a5 = u8 [a0 + 0x1a]\n  7353: s1 = u8 [a0 + 0x1b]\n  7356: a3 = a3 << 0x8\n  7359: a3 = a3 | a4\n  7362: a5 = a5 << 0x10\n  7365: s1 = s1 << 0x18\n  7368: a5 = a5 | s1\n  7371: a3 = a3 | a5\n  7374: a4 = u8 [a0 + 0x1d]\n  7377: a5 = u8 [a0 + 0x1c]\n  7380: s1 = u8 [a0 + 0x1e]\n  7383: a1 = u8 [a0 + 0x1f]\n  7386: a4 = a4 << 0x8\n  7389: a4 = a4 | a5\n  7392: s1 = s1 << 0x10\n  7395: a1 = a1 << 0x18\n  7398: a1 = a1 | s1\n  7401: a1 = a1 | a4\n  7404: a1 = a1 << 0x20\n  7407: a3 = a3 | a1\n  7410: a1 = u8 [a0 + 0x9]\n  7413: a4 = u8 [a0 + 0x8]\n  7416: a5 = u8 [a0 + 0xa]\n  7419: s1 = u8 [a0 + 0xb]\n  7422: a1 = a1 << 0x8\n  7425: a1 = a1 | a4\n  7428: a5 = a5 << 0x10\n  7431: s1 = s1 << 0x18\n  7434: a5 = a5 | s1\n  7437: a1 = a1 | a5\n  7440: a4 = u8 [a0 + 0xd]\n  7443: a5 = u8 [a0 + 0xc]\n  7446: s1 = u8 [a0 + 0xe]\n  7449: a0 = u8 [a0 + 0xf]\n  7452: a4 = a4 << 0x8\n  7455: a4 = a4 | a5\n  7458: s1 = s1 << 0x10\n  7461: a0 = a0 << 0x18\n  7464: a0 = a0 | s1\n  7467: a0 = a0 | a4\n  7470: a0 = a0 << 0x20\n  7473: a0 = a0 | a1\n  7476: a1 = reverse a0\n  7478: a0 = reverse a3\n  7480: a2 = reverse a2\n  7482: a3 = reverse t0\n  7484: a2 = a2 | a3\n  7487: a3 = a0 | a1\n  7490: a3 = a3 | a2\n  7493: a3 = a3 >> 0x20\n  7496: a1 = a1 | a2\n  7499: a1 = a1 << 0x20\n  7502: a1 = a1 | a3\n  7505: jump @135 if a1 == 0\n      : @132 (gas: 1)\n  7508: trap\n      : @133 (gas: 3)\n  7509: a0 = 0\n  7511: a1 = 0\n  7513: ra = 112, jump @0\n      : @134 [@dyn 56] (gas: 7)\n  7518: i32 a1 = a0 + 0\n  7520: a0 = 0x1\n  7523: a2 = 0\n  7525: ecalli 12 // 'seal_return'\n  7527: i32 a0 = a0 + 0\n  7529: ra = 0x72\n  7532: jump @0\n      : @135 (gas: 2)\n  7535: i32 a0 = a0 + 0\n  7537: ra = 114, jump @0\n      : @136 [@dyn 57] (gas: 6)\n  7542: i32 a1 = a0 + 0\n  7544: a0 = 0\n  7546: a2 = 0\n  7548: ra = 0x74\n  7551: ecalli 12 // 'seal_return'\n  7553: fallthrough\n      : @137 [@dyn 58] (gas: 35)\n  7554: sp = sp + 0xffffffffffffffa0\n  7557: u64 [sp + 0x58] = ra\n  7560: u64 [sp + 0x50] = s0\n  7563: u64 [sp + 0x48] = s1\n  7566: s0 = sp + 0x60\n  7569: sp = sp & 0xffffffffffffffe0\n  7572: s1 = a0\n  7574: u64 [sp + 24] = 0\n  7577: u64 [sp + 16] = 0\n  7580: u64 [sp + 8] = 0\n  7583: u64 [sp + 0] = 0\n  7585: u64 [sp + 56] = 0\n  7588: u64 [sp + 48] = 0\n  7591: u64 [sp + 40] = 0\n  7594: u64 [sp + 32] = 0\n  7597: u32 [sp + 64] = 0x20\n  7601: i32 a1 = sp + 0\n  7603: i32 a3 = sp + 0x20\n  7606: i32 a4 = sp + 0x40\n  7609: a2 = 0xffffffffffffffff\n  7612: a0 = 0\n  7614: ecalli 6 // 'get_storage'\n  7616: a0 = u32 [sp + 0x30]\n  7619: a1 = u64 [sp + 0x28]\n  7622: a2 = u64 [sp + 0x20]\n  7625: u64 [s1 + 24] = 0\n  7628: u64 [s1 + 0x10] = a0\n  7631: u64 [s1 + 0x8] = a1\n  7634: u64 [s1] = a2\n  7636: sp = s0 + 0xffffffffffffffa0\n  7639: ra = u64 [sp + 0x58]\n  7642: s0 = u64 [sp + 0x50]\n  7645: s1 = u64 [sp + 0x48]\n  7648: sp = sp + 0x60\n  7651: ret\n      : @138 (gas: 8)\n  7653: a0 = u64 [sp + 0x30]\n  7656: a1 = u64 [sp + 0x38]\n  7659: a2 = u64 [sp + 0x28]\n  7662: a3 = u64 [sp + 0x20]\n  7665: a1 = a1 | a2\n  7668: a0 = a0 | a3\n  7671: a0 = a0 | a1\n  7674: jump @143 if a0 != 0\n      : @139 (gas: 2)\n  7678: a0 = i32 [0x20004]\n  7683: jump @143 if a0 <=u 3\n      : @140 (gas: 24)\n  7688: u64 [sp + 88] = 0\n  7691: u64 [sp + 80] = 0\n  7694: u64 [sp + 72] = 0\n  7697: u64 [sp + 64] = 0\n  7700: u64 [sp + 120] = 0\n  7703: u64 [sp + 112] = 0\n  7706: u64 [sp + 104] = 0\n  7709: u64 [sp + 96] = 0\n  7712: u32 [sp + 128] = 0x20\n  7717: i32 a1 = sp + 0x40\n  7720: i32 a3 = sp + 0x60\n  7723: i32 a4 = sp + 0x80\n  7727: a2 = 0xffffffffffffffff\n  7730: a0 = 0\n  7732: ecalli 6 // 'get_storage'\n  7734: a0 = u64 [sp + 0x70]\n  7737: u64 [sp + 0x8] = a0\n  7740: a0 = u64 [sp + 0x68]\n  7743: u64 [sp + 0x10] = a0\n  7746: a0 = u64 [sp + 0x60]\n  7749: u64 [sp + 0x18] = a0\n  7752: a0 = 0x40\n  7755: a1 = 0x20\n  7758: ra = 118, jump @0\n      : @141 [@dyn 59] (gas: 100)\n  7763: a1 = u8 [a0 + 0x11]\n  7766: a2 = u8 [a0 + 0x10]\n  7769: a3 = u8 [a0 + 0x12]\n  7772: a4 = u8 [a0 + 0x13]\n  7775: a1 = a1 << 0x8\n  7778: a1 = a1 | a2\n  7781: a3 = a3 << 0x10\n  7784: a4 = a4 << 0x18\n  7787: a3 = a3 | a4\n  7790: a1 = a1 | a3\n  7793: a2 = u8 [a0 + 0x15]\n  7796: a3 = u8 [a0 + 0x14]\n  7799: a4 = u8 [a0 + 0x16]\n  7802: a5 = u8 [a0 + 0x17]\n  7805: a2 = a2 << 0x8\n  7808: a2 = a2 | a3\n  7811: a4 = a4 << 0x10\n  7814: a5 = a5 << 0x18\n  7817: a4 = a4 | a5\n  7820: a2 = a2 | a4\n  7823: a2 = a2 << 0x20\n  7826: t0 = a2 | a1\n  7829: a2 = u8 [a0 + 0x1]\n  7832: a3 = u8 [a0]\n  7834: a4 = u8 [a0 + 0x2]\n  7837: a5 = u8 [a0 + 0x3]\n  7840: a2 = a2 << 0x8\n  7843: a2 = a2 | a3\n  7846: a4 = a4 << 0x10\n  7849: a5 = a5 << 0x18\n  7852: a4 = a4 | a5\n  7855: a2 = a2 | a4\n  7858: a3 = u8 [a0 + 0x5]\n  7861: a4 = u8 [a0 + 0x4]\n  7864: a5 = u8 [a0 + 0x6]\n  7867: s1 = u8 [a0 + 0x7]\n  7870: a3 = a3 << 0x8\n  7873: a3 = a3 | a4\n  7876: a5 = a5 << 0x10\n  7879: s1 = s1 << 0x18\n  7882: a5 = a5 | s1\n  7885: a3 = a3 | a5\n  7888: a3 = a3 << 0x20\n  7891: a2 = a2 | a3\n  7894: a3 = u8 [a0 + 0x19]\n  7897: a4 = u8 [a0 + 0x18]\n  7900: a5 = u8 [a0 + 0x1a]\n  7903: s1 = u8 [a0 + 0x1b]\n  7906: a3 = a3 << 0x8\n  7909: a3 = a3 | a4\n  7912: a5 = a5 << 0x10\n  7915: s1 = s1 << 0x18\n  7918: a5 = a5 | s1\n  7921: a3 = a3 | a5\n  7924: a4 = u8 [a0 + 0x1d]\n  7927: a5 = u8 [a0 + 0x1c]\n  7930: s1 = u8 [a0 + 0x1e]\n  7933: a1 = u8 [a0 + 0x1f]\n  7936: a4 = a4 << 0x8\n  7939: a4 = a4 | a5\n  7942: s1 = s1 << 0x10\n  7945: a1 = a1 << 0x18\n  7948: a1 = a1 | s1\n  7951: a1 = a1 | a4\n  7954: a1 = a1 << 0x20\n  7957: a3 = a3 | a1\n  7960: a1 = u8 [a0 + 0x9]\n  7963: a4 = u8 [a0 + 0x8]\n  7966: a5 = u8 [a0 + 0xa]\n  7969: s1 = u8 [a0 + 0xb]\n  7972: a1 = a1 << 0x8\n  7975: a1 = a1 | a4\n  7978: a5 = a5 << 0x10\n  7981: s1 = s1 << 0x18\n  7984: a5 = a5 | s1\n  7987: a1 = a1 | a5\n  7990: a4 = u8 [a0 + 0xd]\n  7993: a5 = u8 [a0 + 0xc]\n  7996: s1 = u8 [a0 + 0xe]\n  7999: a0 = u8 [a0 + 0xf]\n  8002: a4 = a4 << 0x8\n  8005: a4 = a4 | a5\n  8008: s1 = s1 << 0x10\n  8011: a0 = a0 << 0x18\n  8014: a0 = a0 | s1\n  8017: a0 = a0 | a4\n  8020: a0 = a0 << 0x20\n  8023: a0 = a0 | a1\n  8026: a1 = reverse a0\n  8028: a0 = reverse a3\n  8030: a2 = reverse a2\n  8032: a3 = reverse t0\n  8034: a2 = a2 | a3\n  8037: a3 = a0 | a1\n  8040: a3 = a3 | a2\n  8043: a3 = a3 >> 0x20\n  8046: a1 = a1 | a2\n  8049: a1 = a1 << 0x20\n  8052: a1 = a1 | a3\n  8055: jump @145 if a1 == 0\n      : @142 (gas: 1)\n  8058: trap\n      : @143 (gas: 3)\n  8059: a0 = 0\n  8061: a1 = 0\n  8063: ra = 120, jump @0\n      : @144 [@dyn 60] (gas: 5)\n  8068: i32 a1 = a0 + 0\n  8070: a0 = 0x1\n  8073: a2 = 0\n  8075: ecalli 12 // 'seal_return'\n  8077: fallthrough\n      : @145 (gas: 7)\n  8078: a1 = u64 [sp + 0x8]\n  8081: a1 = a1 << 0x20\n  8084: s1 = a1 >> 0x20\n  8087: i32 a0 = a0 + 0\n  8089: u64 [sp + 0x8] = a0\n  8092: a1 = 0x20\n  8095: ra = 122, jump @0\n      : @146 [@dyn 61] (gas: 58)\n  8100: a1 = reverse s1\n  8102: a2 = u64 [sp + 0x10]\n  8105: a2 = reverse a2\n  8107: a3 = u64 [sp + 0x18]\n  8110: a3 = reverse a3\n  8112: a4 = a3 >> 0x38\n  8115: u8 [a0 + 0x1f] = a4\n  8118: a4 = a3 >> 0x30\n  8121: u8 [a0 + 0x1e] = a4\n  8124: a4 = a3 >> 0x28\n  8127: u8 [a0 + 0x1d] = a4\n  8130: a4 = a3 >> 0x20\n  8133: u8 [a0 + 0x1c] = a4\n  8136: a4 = a3 >> 0x18\n  8139: u8 [a0 + 0x1b] = a4\n  8142: a4 = a3 >> 0x10\n  8145: u8 [a0 + 0x1a] = a4\n  8148: a4 = a3 >> 0x8\n  8151: u8 [a0 + 0x19] = a4\n  8154: u8 [a0 + 0x18] = a3\n  8157: u8 [a0 + 0x10] = a2\n  8160: u8 [a0 + 11] = 0\n  8163: u8 [a0 + 10] = 0\n  8166: u8 [a0 + 9] = 0\n  8169: u8 [a0 + 7] = 0\n  8172: u8 [a0 + 6] = 0\n  8175: u8 [a0 + 5] = 0\n  8178: u8 [a0 + 4] = 0\n  8181: u8 [a0 + 3] = 0\n  8184: u8 [a0 + 2] = 0\n  8187: u8 [a0 + 1] = 0\n  8190: u8 [a0 + 0] = 0\n  8192: a3 = a2 >> 0x38\n  8195: u8 [a0 + 0x17] = a3\n  8198: a3 = a2 >> 0x30\n  8201: u8 [a0 + 0x16] = a3\n  8204: a3 = a2 >> 0x28\n  8207: u8 [a0 + 0x15] = a3\n  8210: a3 = a2 >> 0x20\n  8213: u8 [a0 + 0x14] = a3\n  8216: a3 = a2 >> 0x18\n  8219: u8 [a0 + 0x13] = a3\n  8222: a3 = a2 >> 0x10\n  8225: u8 [a0 + 0x12] = a3\n  8228: a2 = a2 >> 0x8\n  8231: u8 [a0 + 0x11] = a2\n  8234: u8 [a0 + 0x8] = a1\n  8237: a2 = a1 >> 0x38\n  8240: u8 [a0 + 0xf] = a2\n  8243: a2 = a1 >> 0x30\n  8246: u8 [a0 + 0xe] = a2\n  8249: a2 = a1 >> 0x28\n  8252: u8 [a0 + 0xd] = a2\n  8255: a1 = a1 >> 0x20\n  8258: u8 [a0 + 0xc] = a1\n  8261: a1 = 0x20\n  8264: a0 = u64 [sp + 0x8]\n  8267: ra = 124, jump @0\n      : @147 [@dyn 62] (gas: 6)\n  8272: i32 a1 = a0 + 0\n  8274: a2 = 0x20\n  8277: a0 = 0\n  8279: ra = 0x7e\n  8282: ecalli 12 // 'seal_return'\n  8284: fallthrough\n      : @148 [@dyn 63] (gas: 52)\n  8285: sp = sp + 0xffffffffffffff80\n  8288: u64 [sp + 0x78] = ra\n  8291: u64 [sp + 0x70] = s0\n  8294: u64 [sp + 0x68] = s1\n  8297: s0 = sp + 0x80\n  8301: sp = sp & 0xffffffffffffffe0\n  8304: t2 = u64 [a1 + 0x10]\n  8307: a5 = u64 [a1 + 0x8]\n  8310: t0 = u64 [a2 + 0x8]\n  8313: s1 = u64 [a1]\n  8315: u64 [sp + 0x10] = s1\n  8318: a4 = u64 [a2]\n  8320: u64 [sp + 0x18] = a4\n  8323: ra = u64 [a2 + 0x10]\n  8326: a3 = t0 ^ a5\n  8329: u64 [sp + 0x38] = a3\n  8332: a3 = t0 <u a5\n  8335: a4 = a4 <u s1\n  8338: t1 = u64 [sp + 0x38]\n  8341: a3 = a4 if t1 == 0\n  8344: t1 = a4\n  8346: a1 = u64 [a1 + 0x18]\n  8349: u64 [sp + 0x38] = a1\n  8352: a1 = u64 [a2 + 0x18]\n  8355: u64 [sp + 0x20] = a1\n  8358: a1 = ra - t2\n  8361: a2 = a1 - a3\n  8364: u64 [sp + 0x28] = a2\n  8367: a2 = a1 <u a3\n  8370: u64 [sp + 0x30] = t2\n  8373: a3 = ra <u t2\n  8376: a1 = u64 [sp + 0x38]\n  8379: a4 = u64 [sp + 0x20]\n  8382: a1 = a4 - a1\n  8385: a1 = a1 - a3\n  8388: t2 = a1 - a2\n  8391: s1 = t0 - a5\n  8394: a2 = s1 - t1\n  8397: t0 = u64 [sp + 0x10]\n  8400: a1 = u64 [sp + 0x18]\n  8403: a3 = a1 - t0\n  8406: a4 = a2 >u 0\n  8408: a3 = a3 <u 0x20\n  8411: a3 = a3 ^ 0x1\n  8414: a3 = a4 if a2 != 0\n  8417: a2 = t2 >s 0\n  8419: a1 = u64 [sp + 0x28]\n  8422: a4 = a1 >u 0\n  8424: a4 = a2 if t2 != 0\n  8427: a1 = a1 | t2\n  8430: a3 = a4 if a1 != 0\n  8433: jump @154 if a3 == 0\n      : @149 (gas: 11)\n  8436: s1 = a0\n  8438: a2 = u64 [sp + 0x30]\n  8441: a0 = t0 | a2\n  8444: a1 = u64 [sp + 0x38]\n  8447: a1 = a1 | a5\n  8450: a0 = a0 | a1\n  8453: a0 = a0 >> 0x20\n  8456: a1 = a1 | a2\n  8459: a1 = a1 << 0x20\n  8462: a0 = a0 | a1\n  8465: jump @153 if a0 != 0\n      : @150 (gas: 4)\n  8468: i32 a1 = t0 + 0\n  8470: i32 a0 = sp + 0x40\n  8473: ecalli 2 // 'call_data_load'\n  8475: fallthrough\n      : @151 (gas: 10)\n  8476: a0 = u64 [sp + 0x50]\n  8479: a1 = u64 [sp + 0x58]\n  8482: a2 = 0x100000000\n  8492: a2 = a2 ^ a0\n  8495: a2 = a2 | a1\n  8498: a3 = a0 >> 0x20\n  8501: a3 = a3 <u 0x1\n  8504: a3 = 0 if a1 != 0\n  8506: a3 = 0 if a2 == 0\n  8508: jump @154 if a3 == 0\n      : @152 (gas: 12)\n  8511: a2 = u64 [sp + 0x48]\n  8514: a3 = u64 [sp + 0x40]\n  8517: u64 [s1 + 0x8] = a2\n  8520: u64 [s1] = a3\n  8522: u64 [s1 + 0x10] = a0\n  8525: u64 [s1 + 0x18] = a1\n  8528: sp = s0 + 0xffffffffffffff80\n  8531: ra = u64 [sp + 0x78]\n  8534: s0 = u64 [sp + 0x70]\n  8537: s1 = u64 [sp + 0x68]\n  8540: sp = sp + 0x80\n  8544: ret\n      : @153 (gas: 1)\n  8546: trap\n      : @154 (gas: 3)\n  8547: a0 = 0\n  8549: a1 = 0\n  8551: ra = 128, jump @0\n      : @155 [@dyn 64] (gas: 6)\n  8557: i32 a1 = a0 + 0\n  8559: a0 = 0x1\n  8562: a2 = 0\n  8564: ra = 0x82\n  8568: ecalli 12 // 'seal_return'\n  8570: fallthrough\n      : @156 [@dyn 65] (gas: 9)\n  8571: a2 = u64 [a1 + 0x18]\n  8574: a3 = u64 [a1 + 0x10]\n  8577: a4 = u64 [a1 + 0x8]\n  8580: a1 = u64 [a1]\n  8582: u64 [a0 + 0x18] = a2\n  8585: u64 [a0 + 0x10] = a3\n  8588: u64 [a0 + 0x8] = a4\n  8591: u64 [a0] = a1\n  8593: ret\n      : @157 [@dyn 66] (gas: 59)\n  8595: a1 = u64 [sp + 0xa8]\n  8599: a1 = reverse a1\n  8601: a2 = u64 [sp + 0xb0]\n  8605: a2 = reverse a2\n  8607: a3 = u64 [sp + 0xb8]\n  8611: a3 = reverse a3\n  8613: a4 = a3 >> 0x38\n  8616: u8 [a0 + 0x1f] = a4\n  8619: a4 = a3 >> 0x30\n  8622: u8 [a0 + 0x1e] = a4\n  8625: a4 = a3 >> 0x28\n  8628: u8 [a0 + 0x1d] = a4\n  8631: a4 = a3 >> 0x20\n  8634: u8 [a0 + 0x1c] = a4\n  8637: a4 = a3 >> 0x18\n  8640: u8 [a0 + 0x1b] = a4\n  8643: a4 = a3 >> 0x10\n  8646: u8 [a0 + 0x1a] = a4\n  8649: a4 = a3 >> 0x8\n  8652: u8 [a0 + 0x19] = a4\n  8655: u8 [a0 + 0x18] = a3\n  8658: a3 = a2 >> 0x38\n  8661: u8 [a0 + 0x17] = a3\n  8664: a3 = a2 >> 0x30\n  8667: u8 [a0 + 0x16] = a3\n  8670: a3 = a2 >> 0x28\n  8673: u8 [a0 + 0x15] = a3\n  8676: a3 = a2 >> 0x20\n  8679: u8 [a0 + 0x14] = a3\n  8682: a3 = a2 >> 0x18\n  8685: u8 [a0 + 0x13] = a3\n  8688: a3 = a2 >> 0x10\n  8691: u8 [a0 + 0x12] = a3\n  8694: a3 = a2 >> 0x8\n  8697: u8 [a0 + 0x11] = a3\n  8700: u8 [a0 + 0x10] = a2\n  8703: a2 = a1 >> 0x38\n  8706: u8 [a0 + 0xf] = a2\n  8709: a2 = a1 >> 0x30\n  8712: u8 [a0 + 0xe] = a2\n  8715: a2 = a1 >> 0x28\n  8718: u8 [a0 + 0xd] = a2\n  8721: a2 = a1 >> 0x20\n  8724: u8 [a0 + 0xc] = a2\n  8727: u8 [a0 + 11] = 0\n  8730: u8 [a0 + 10] = 0\n  8733: u8 [a0 + 9] = 0\n  8736: u8 [a0 + 0x8] = a1\n  8739: u8 [a0 + 7] = 0\n  8742: u8 [a0 + 6] = 0\n  8745: u8 [a0 + 5] = 0\n  8748: u8 [a0 + 4] = 0\n  8751: u8 [a0 + 3] = 0\n  8754: u8 [a0 + 2] = 0\n  8757: u8 [a0 + 1] = 0\n  8760: u8 [a0 + 0] = 0\n  8762: a0 = 0x20\n  8765: a1 = 0x20\n  8768: ra = 134, jump @0\n      : @158 [@dyn 67] (gas: 35)\n  8774: u8 [a0 + 31] = 0x2\n  8778: u8 [a0 + 30] = 0\n  8781: u8 [a0 + 29] = 0\n  8784: u8 [a0 + 28] = 0\n  8787: u8 [a0 + 27] = 0\n  8790: u8 [a0 + 26] = 0\n  8793: u8 [a0 + 25] = 0\n  8796: u8 [a0 + 24] = 0\n  8799: u8 [a0 + 23] = 0\n  8802: u8 [a0 + 22] = 0\n  8805: u8 [a0 + 21] = 0\n  8808: u8 [a0 + 20] = 0\n  8811: u8 [a0 + 19] = 0\n  8814: u8 [a0 + 18] = 0\n  8817: u8 [a0 + 17] = 0\n  8820: u8 [a0 + 16] = 0\n  8823: u8 [a0 + 15] = 0\n  8826: u8 [a0 + 14] = 0\n  8829: u8 [a0 + 13] = 0\n  8832: u8 [a0 + 12] = 0\n  8835: u8 [a0 + 11] = 0\n  8838: u8 [a0 + 10] = 0\n  8841: u8 [a0 + 9] = 0\n  8844: u8 [a0 + 8] = 0\n  8847: u8 [a0 + 7] = 0\n  8850: u8 [a0 + 6] = 0\n  8853: u8 [a0 + 5] = 0\n  8856: u8 [a0 + 4] = 0\n  8859: u8 [a0 + 3] = 0\n  8862: u8 [a0 + 2] = 0\n  8865: u8 [a0 + 1] = 0\n  8868: u8 [a0 + 0] = 0\n  8870: a1 = 0x40\n  8873: a0 = 0\n  8875: ra = 136, jump @0\n      : @159 [@dyn 68] (gas: 259)\n  8881: i32 a0 = a0 + 0\n  8883: i32 a2 = sp + 0xe0\n  8887: a1 = 0x40\n  8890: ecalli 7 // 'hash_keccak_256'\n  8892: a0 = u64 [sp + 0xf8]\n  8896: a1 = u64 [sp + 0xf0]\n  8900: a2 = u64 [sp + 0xe8]\n  8904: a3 = u64 [sp + 0xe0]\n  8908: a4 = reverse a0\n  8910: u64 [sp + 0xa8] = a4\n  8914: a1 = reverse a1\n  8916: u64 [sp + 0xb0] = a1\n  8920: a2 = reverse a2\n  8922: u64 [sp + 0xa0] = a2\n  8926: a0 = reverse a3\n  8928: u64 [sp + 0xb8] = a0\n  8932: u64 [sp + 0xd8] = a0\n  8936: u64 [sp + 0xd0] = a2\n  8940: u64 [sp + 0xc8] = a1\n  8944: u64 [sp + 0xc0] = a4\n  8948: u64 [sp + 248] = 0\n  8952: u64 [sp + 240] = 0\n  8956: u64 [sp + 232] = 0\n  8960: u64 [sp + 224] = 0\n  8964: u32 [sp + 256] = 0x20\n  8969: i32 a1 = sp + 0xc0\n  8973: i32 a3 = sp + 0xe0\n  8977: i32 a4 = sp + 0x100\n  8981: a2 = 0xffffffffffffffff\n  8984: a0 = 0\n  8986: ecalli 6 // 'get_storage'\n  8988: a0 = u64 [sp + 0xa8]\n  8992: a0 = a0 + 0x1\n  8995: a1 = a0 <u 0x1\n  8998: a2 = u64 [sp + 0xb0]\n  9002: a1 = a1 + a2\n  9005: a2 = a0 | a1\n  9008: a2 = a2 <u 0x1\n  9011: a3 = u64 [sp + 0xa0]\n  9015: a2 = a2 + a3\n  9018: a3 = a2 <u a3\n  9021: a4 = u64 [sp + 0xb8]\n  9025: a3 = a3 + a4\n  9028: u64 [sp + 0xd8] = a3\n  9032: a3 = u64 [sp + 0xe0]\n  9036: u64 [sp + 0x98] = a3\n  9040: u64 [sp + 0xd0] = a2\n  9044: a2 = u64 [sp + 0xe8]\n  9048: u64 [sp + 0x90] = a2\n  9052: u64 [sp + 0xc8] = a1\n  9056: a1 = u64 [sp + 0xf0]\n  9060: u64 [sp + 0x88] = a1\n  9064: u64 [sp + 0xc0] = a0\n  9068: a0 = u64 [sp + 0xf8]\n  9072: u64 [sp + 0x80] = a0\n  9076: u64 [sp + 248] = 0\n  9080: u64 [sp + 240] = 0\n  9084: u64 [sp + 232] = 0\n  9088: u64 [sp + 224] = 0\n  9092: u32 [sp + 256] = 0x20\n  9097: i32 a1 = sp + 0xc0\n  9101: i32 a3 = sp + 0xe0\n  9105: i32 a4 = sp + 0x100\n  9109: a2 = 0xffffffffffffffff\n  9112: a0 = 0\n  9114: ecalli 6 // 'get_storage'\n  9116: a1 = u64 [sp + 0xa8]\n  9120: a0 = a1 + 0x2\n  9123: a1 = a0 <u a1\n  9126: a3 = u64 [sp + 0xb0]\n  9130: a2 = a3 + a1\n  9133: a3 = a2 <u a3\n  9136: a3 = a1 if a1 == 0\n  9139: a1 = u64 [sp + 0xa0]\n  9143: a3 = a3 + a1\n  9146: a1 = a3 <u a1\n  9149: a4 = u64 [sp + 0xb8]\n  9153: a1 = a1 + a4\n  9156: u64 [sp + 0xd8] = a1\n  9160: a1 = u64 [sp + 0xe0]\n  9164: u64 [sp + 0x78] = a1\n  9167: u64 [sp + 0xd0] = a3\n  9171: a1 = u64 [sp + 0xe8]\n  9175: u64 [sp + 0x70] = a1\n  9178: u64 [sp + 0xc8] = a2\n  9182: a1 = u64 [sp + 0xf0]\n  9186: u64 [sp + 0x68] = a1\n  9189: u64 [sp + 0xc0] = a0\n  9193: a0 = u64 [sp + 0xf8]\n  9197: u64 [sp + 0x60] = a0\n  9200: u64 [sp + 248] = 0\n  9204: u64 [sp + 240] = 0\n  9208: u64 [sp + 232] = 0\n  9212: u64 [sp + 224] = 0\n  9216: u32 [sp + 256] = 0x20\n  9221: i32 a1 = sp + 0xc0\n  9225: i32 a3 = sp + 0xe0\n  9229: i32 a4 = sp + 0x100\n  9233: a2 = 0xffffffffffffffff\n  9236: a0 = 0\n  9238: ecalli 6 // 'get_storage'\n  9240: a1 = u64 [sp + 0xa8]\n  9244: a0 = a1 + 0x3\n  9247: a1 = a0 <u a1\n  9250: a3 = u64 [sp + 0xb0]\n  9254: a2 = a3 + a1\n  9257: a3 = a2 <u a3\n  9260: a3 = a1 if a1 == 0\n  9263: a1 = u64 [sp + 0xa0]\n  9267: a3 = a3 + a1\n  9270: a1 = a3 <u a1\n  9273: a4 = u64 [sp + 0xb8]\n  9277: a1 = a1 + a4\n  9280: u64 [sp + 0xd8] = a1\n  9284: a1 = u64 [sp + 0xe0]\n  9288: u64 [sp + 0x58] = a1\n  9291: u64 [sp + 0xd0] = a3\n  9295: a1 = u64 [sp + 0xe8]\n  9299: u64 [sp + 0x50] = a1\n  9302: u64 [sp + 0xc8] = a2\n  9306: a1 = u64 [sp + 0xf0]\n  9310: u64 [sp + 0x48] = a1\n  9313: u64 [sp + 0xc0] = a0\n  9317: a0 = u64 [sp + 0xf8]\n  9321: u64 [sp + 0x40] = a0\n  9324: u64 [sp + 248] = 0\n  9328: u64 [sp + 240] = 0\n  9332: u64 [sp + 232] = 0\n  9336: u64 [sp + 224] = 0\n  9340: u32 [sp + 256] = 0x20\n  9345: i32 a1 = sp + 0xc0\n  9349: i32 a3 = sp + 0xe0\n  9353: i32 a4 = sp + 0x100\n  9357: a2 = 0xffffffffffffffff\n  9360: a0 = 0\n  9362: ecalli 6 // 'get_storage'\n  9364: a1 = u64 [sp + 0xa8]\n  9368: a0 = a1 + 0x4\n  9371: a1 = a0 <u a1\n  9374: a3 = u64 [sp + 0xb0]\n  9378: a2 = a3 + a1\n  9381: a3 = a2 <u a3\n  9384: a3 = a1 if a1 == 0\n  9387: a1 = u64 [sp + 0xa0]\n  9391: a3 = a3 + a1\n  9394: a1 = a3 <u a1\n  9397: a4 = u64 [sp + 0xb8]\n  9401: a1 = a1 + a4\n  9404: u64 [sp + 0xd8] = a1\n  9408: a1 = u64 [sp + 0xe0]\n  9412: u64 [sp + 0x38] = a1\n  9415: u64 [sp + 0xd0] = a3\n  9419: a1 = u64 [sp + 0xe8]\n  9423: u64 [sp + 0x30] = a1\n  9426: u64 [sp + 0xc8] = a2\n  9430: a1 = u64 [sp + 0xf0]\n  9434: u64 [sp + 0x28] = a1\n  9437: u64 [sp + 0xc0] = a0\n  9441: a0 = u64 [sp + 0xf8]\n  9445: u64 [sp + 0x20] = a0\n  9448: u64 [sp + 248] = 0\n  9452: u64 [sp + 240] = 0\n  9456: u64 [sp + 232] = 0\n  9460: u64 [sp + 224] = 0\n  9464: u32 [sp + 256] = 0x20\n  9469: i32 a1 = sp + 0xc0\n  9473: i32 a3 = sp + 0xe0\n  9477: i32 a4 = sp + 0x100\n  9481: a2 = 0xffffffffffffffff\n  9484: a0 = 0\n  9486: ecalli 6 // 'get_storage'\n  9488: a0 = u64 [sp + 0xe0]\n  9492: u64 [sp + 0x18] = a0\n  9495: a0 = u64 [sp + 0xe8]\n  9499: u64 [sp + 0x10] = a0\n  9502: a0 = u64 [sp + 0xf0]\n  9506: u64 [sp + 0x8] = a0\n  9509: a0 = u64 [sp + 0xf8]\n  9513: u64 [sp] = a0\n  9515: a1 = u64 [sp + 0xa8]\n  9519: a0 = a1 + 0x5\n  9522: a1 = a0 <u a1\n  9525: a3 = u64 [sp + 0xb0]\n  9529: a2 = a3 + a1\n  9532: a3 = a2 <u a3\n  9535: a3 = a1 if a1 == 0\n  9538: a1 = u64 [sp + 0xa0]\n  9542: a3 = a3 + a1\n  9545: a1 = a3 <u a1\n  9548: a4 = u64 [sp + 0xb8]\n  9552: a1 = a1 + a4\n  9555: u64 [sp + 0xd8] = a1\n  9559: u64 [sp + 0xd0] = a3\n  9563: u64 [sp + 0xc8] = a2\n  9567: u64 [sp + 0xc0] = a0\n  9571: u64 [sp + 248] = 0\n  9575: u64 [sp + 240] = 0\n  9579: u64 [sp + 232] = 0\n  9583: u64 [sp + 224] = 0\n  9587: u32 [sp + 256] = 0x20\n  9592: i32 a1 = sp + 0xc0\n  9596: i32 a3 = sp + 0xe0\n  9600: i32 a4 = sp + 0x100\n  9604: a2 = 0xffffffffffffffff\n  9607: a0 = 0\n  9609: ecalli 6 // 'get_storage'\n  9611: a0 = u32 [sp + 0xf0]\n  9615: a1 = u64 [sp + 0xe8]\n  9619: a2 = u64 [sp + 0xe0]\n  9623: u64 [s1 + 0xb0] = a0\n  9627: u64 [s1 + 0xa8] = a1\n  9631: u64 [s1 + 0xa0] = a2\n  9635: a0 = u64 [sp]\n  9637: u64 [s1 + 0x98] = a0\n  9641: a0 = u64 [sp + 0x8]\n  9644: u64 [s1 + 0x90] = a0\n  9648: a0 = u64 [sp + 0x10]\n  9651: u64 [s1 + 0x88] = a0\n  9655: a0 = u64 [sp + 0x18]\n  9658: u64 [s1 + 0x80] = a0\n  9662: a0 = u64 [sp + 0x20]\n  9665: u64 [s1 + 0x78] = a0\n  9668: a0 = u64 [sp + 0x28]\n  9671: u64 [s1 + 0x70] = a0\n  9674: a0 = u64 [sp + 0x30]\n  9677: u64 [s1 + 0x68] = a0\n  9680: a0 = u64 [sp + 0x38]\n  9683: u64 [s1 + 0x60] = a0\n  9686: a0 = u64 [sp + 0x40]\n  9689: u64 [s1 + 0x58] = a0\n  9692: a0 = u64 [sp + 0x48]\n  9695: u64 [s1 + 0x50] = a0\n  9698: a0 = u64 [sp + 0x50]\n  9701: u64 [s1 + 0x48] = a0\n  9704: a0 = u64 [sp + 0x58]\n  9707: u64 [s1 + 0x40] = a0\n  9710: a0 = u64 [sp + 0x60]\n  9713: u64 [s1 + 0x38] = a0\n  9716: a0 = u64 [sp + 0x68]\n  9719: u64 [s1 + 0x30] = a0\n  9722: a0 = u64 [sp + 0x70]\n  9725: u64 [s1 + 0x28] = a0\n  9728: a0 = u64 [sp + 0x78]\n  9731: u64 [s1 + 0x20] = a0\n  9734: a0 = u64 [sp + 0x80]\n  9738: u64 [s1 + 0x18] = a0\n  9741: a0 = u64 [sp + 0x88]\n  9745: u64 [s1 + 0x10] = a0\n  9748: a0 = u64 [sp + 0x90]\n  9752: u64 [s1 + 0x8] = a0\n  9755: a0 = u64 [sp + 0x98]\n  9759: u64 [s1] = a0\n  9761: u64 [s1 + 184] = 0\n  9765: sp = s0 + 0xfffffffffffffee0\n  9769: ra = u64 [sp + 0x118]\n  9773: s0 = u64 [sp + 0x110]\n  9777: s1 = u64 [sp + 0x108]\n  9781: sp = sp + 0x120\n  9785: ret\n      : @160 (gas: 21)\n  9787: sp = sp + 0xffffffffffffff10\n  9791: u64 [sp + 0xe8] = ra\n  9795: u64 [sp + 0xe0] = s0\n  9799: u64 [sp + 0xd8] = s1\n  9803: s1 = u64 [a1 + 0x10]\n  9806: t1 = u64 [a1 + 0x18]\n  9809: t0 = u64 [a1 + 0x8]\n  9812: s0 = u64 [a1]\n  9814: u64 [sp + 0xc8] = t0\n  9818: u64 [sp + 0xb8] = t1\n  9822: a1 = t0 | t1\n  9825: u64 [sp + 0xd0] = s0\n  9829: s0 = s0 | s1\n  9832: s0 = s0 | a1\n  9835: s0 = s0 >> 0x20\n  9838: u64 [sp + 0xb0] = s1\n  9842: a1 = a1 | s1\n  9845: a1 = a1 << 0x20\n  9848: a1 = a1 | s0\n  9851: u64 [sp + 0x38] = a0\n  9854: jump @173 if a1 != 0\n      : @161 (gas: 50)\n  9858: a0 = u64 [sp + 0xf8]\n  9862: a1 = u64 [sp + 0xf0]\n  9866: s1 = u64 [a0 + 0x10]\n  9869: u64 [sp] = s1\n  9871: s1 = u64 [a0 + 0x8]\n  9874: u64 [sp + 0x8] = s1\n  9877: a0 = u64 [a0]\n  9879: u64 [sp + 0x10] = a0\n  9882: a0 = u64 [a1 + 0x18]\n  9885: u64 [sp + 0x18] = a0\n  9888: a0 = u64 [a1 + 0x10]\n  9891: u64 [sp + 0x20] = a0\n  9894: a0 = u64 [a1 + 0x8]\n  9897: u64 [sp + 0x28] = a0\n  9900: a0 = u64 [a1]\n  9902: u64 [sp + 0x30] = a0\n  9905: a0 = u64 [a5 + 0x18]\n  9908: u64 [sp + 0x40] = a0\n  9911: a0 = u64 [a5 + 0x10]\n  9914: u64 [sp + 0x48] = a0\n  9917: a0 = u64 [a5 + 0x8]\n  9920: u64 [sp + 0x50] = a0\n  9923: a0 = u64 [a5]\n  9925: u64 [sp + 0x58] = a0\n  9928: a0 = u64 [a4 + 0x18]\n  9931: u64 [sp + 0x60] = a0\n  9934: a0 = u64 [a4 + 0x10]\n  9937: u64 [sp + 0x68] = a0\n  9940: a0 = u64 [a4 + 0x8]\n  9943: u64 [sp + 0x70] = a0\n  9946: a0 = u64 [a4]\n  9948: u64 [sp + 0x78] = a0\n  9951: a0 = u64 [a3 + 0x18]\n  9954: u64 [sp + 0x80] = a0\n  9958: a0 = u64 [a3 + 0x10]\n  9961: u64 [sp + 0x88] = a0\n  9965: a0 = u64 [a3 + 0x8]\n  9968: u64 [sp + 0x90] = a0\n  9972: a0 = u64 [a3]\n  9974: u64 [sp + 0x98] = a0\n  9978: s0 = u64 [a2 + 0x18]\n  9981: s1 = u64 [a2 + 0x10]\n  9984: a0 = u64 [a2 + 0x8]\n  9987: u64 [sp + 0xa0] = a0\n  9991: a0 = u64 [a2]\n  9993: u64 [sp + 0xa8] = a0\n  9997: a0 = i32 [sp + 0xd0]\n 10001: a1 = 0x20\n 10004: u64 [sp + 0xc0] = a0\n 10008: ra = 138, jump @0\n      : @162 [@dyn 69] (gas: 77)\n 10014: a1 = reverse s0\n 10016: a2 = reverse s1\n 10018: a3 = u64 [sp + 0xa0]\n 10022: a3 = reverse a3\n 10024: a4 = u64 [sp + 0xa8]\n 10028: a4 = reverse a4\n 10030: a5 = a4 >> 0x38\n 10033: u8 [a0 + 0x1f] = a5\n 10036: a5 = a4 >> 0x30\n 10039: u8 [a0 + 0x1e] = a5\n 10042: a5 = a4 >> 0x28\n 10045: u8 [a0 + 0x1d] = a5\n 10048: a5 = a4 >> 0x20\n 10051: u8 [a0 + 0x1c] = a5\n 10054: a5 = a4 >> 0x18\n 10057: u8 [a0 + 0x1b] = a5\n 10060: a5 = a4 >> 0x10\n 10063: u8 [a0 + 0x1a] = a5\n 10066: a5 = a4 >> 0x8\n 10069: u8 [a0 + 0x19] = a5\n 10072: u8 [a0 + 0x18] = a4\n 10075: u8 [a0 + 0x10] = a3\n 10078: a4 = a3 >> 0x38\n 10081: u8 [a0 + 0x17] = a4\n 10084: a4 = a3 >> 0x30\n 10087: u8 [a0 + 0x16] = a4\n 10090: a4 = a3 >> 0x28\n 10093: u8 [a0 + 0x15] = a4\n 10096: a4 = a3 >> 0x20\n 10099: u8 [a0 + 0x14] = a4\n 10102: a4 = a3 >> 0x18\n 10105: u8 [a0 + 0x13] = a4\n 10108: a4 = a3 >> 0x10\n 10111: u8 [a0 + 0x12] = a4\n 10114: a3 = a3 >> 0x8\n 10117: u8 [a0 + 0x11] = a3\n 10120: u8 [a0 + 0x8] = a2\n 10123: a3 = a2 >> 0x38\n 10126: u8 [a0 + 0xf] = a3\n 10129: a3 = a2 >> 0x30\n 10132: u8 [a0 + 0xe] = a3\n 10135: a3 = a2 >> 0x28\n 10138: u8 [a0 + 0xd] = a3\n 10141: a3 = a2 >> 0x20\n 10144: u8 [a0 + 0xc] = a3\n 10147: a3 = a2 >> 0x18\n 10150: u8 [a0 + 0xb] = a3\n 10153: a3 = a2 >> 0x10\n 10156: u8 [a0 + 0xa] = a3\n 10159: a2 = a2 >> 0x8\n 10162: u8 [a0 + 0x9] = a2\n 10165: u8 [a0] = a1\n 10167: a2 = a1 >> 0x38\n 10170: u8 [a0 + 0x7] = a2\n 10173: a2 = a1 >> 0x30\n 10176: u8 [a0 + 0x6] = a2\n 10179: a2 = a1 >> 0x28\n 10182: u8 [a0 + 0x5] = a2\n 10185: a2 = a1 >> 0x20\n 10188: u8 [a0 + 0x4] = a2\n 10191: a2 = a1 >> 0x18\n 10194: u8 [a0 + 0x3] = a2\n 10197: a2 = a1 >> 0x10\n 10200: u8 [a0 + 0x2] = a2\n 10203: a1 = a1 >> 0x8\n 10206: a2 = u64 [sp + 0xb0]\n 10210: a4 = u64 [sp + 0xb8]\n 10214: a4 = a4 | a2\n 10217: s0 = 0x100000000\n 10227: a2 = 0xffffffe0\n 10237: a3 = u64 [sp + 0xd0]\n 10241: a2 = a3 <u a2\n 10244: a3 = u64 [sp + 0xc8]\n 10248: a2 = 0 if a3 != 0\n 10250: a2 = 0 if a4 != 0\n 10252: u8 [a0 + 0x1] = a1\n 10255: jump @173 if a2 == 0\n      : @163 (gas: 5)\n 10259: s1 = a4\n 10261: a0 = u64 [sp + 0xc0]\n 10265: i32 a0 = a0 + 0x20\n 10268: a1 = 0x20\n 10271: ra = 140, jump @0\n      : @164 [@dyn 70] (gas: 75)\n 10277: a1 = u64 [sp + 0x80]\n 10281: a1 = reverse a1\n 10283: a2 = u64 [sp + 0x88]\n 10287: a2 = reverse a2\n 10289: a3 = u64 [sp + 0x90]\n 10293: a3 = reverse a3\n 10295: a4 = u64 [sp + 0x98]\n 10299: a4 = reverse a4\n 10301: a5 = a4 >> 0x38\n 10304: u8 [a0 + 0x1f] = a5\n 10307: a5 = a4 >> 0x30\n 10310: u8 [a0 + 0x1e] = a5\n 10313: a5 = a4 >> 0x28\n 10316: u8 [a0 + 0x1d] = a5\n 10319: a5 = a4 >> 0x20\n 10322: u8 [a0 + 0x1c] = a5\n 10325: a5 = a4 >> 0x18\n 10328: u8 [a0 + 0x1b] = a5\n 10331: a5 = a4 >> 0x10\n 10334: u8 [a0 + 0x1a] = a5\n 10337: a5 = a4 >> 0x8\n 10340: u8 [a0 + 0x19] = a5\n 10343: u8 [a0 + 0x18] = a4\n 10346: u8 [a0 + 0x10] = a3\n 10349: a4 = a3 >> 0x38\n 10352: u8 [a0 + 0x17] = a4\n 10355: a4 = a3 >> 0x30\n 10358: u8 [a0 + 0x16] = a4\n 10361: a4 = a3 >> 0x28\n 10364: u8 [a0 + 0x15] = a4\n 10367: a4 = a3 >> 0x20\n 10370: u8 [a0 + 0x14] = a4\n 10373: a4 = a3 >> 0x18\n 10376: u8 [a0 + 0x13] = a4\n 10379: a4 = a3 >> 0x10\n 10382: u8 [a0 + 0x12] = a4\n 10385: a3 = a3 >> 0x8\n 10388: u8 [a0 + 0x11] = a3\n 10391: u8 [a0 + 0x8] = a2\n 10394: a3 = a2 >> 0x38\n 10397: u8 [a0 + 0xf] = a3\n 10400: a3 = a2 >> 0x30\n 10403: u8 [a0 + 0xe] = a3\n 10406: a3 = a2 >> 0x28\n 10409: u8 [a0 + 0xd] = a3\n 10412: a3 = a2 >> 0x20\n 10415: u8 [a0 + 0xc] = a3\n 10418: a3 = a2 >> 0x18\n 10421: u8 [a0 + 0xb] = a3\n 10424: a3 = a2 >> 0x10\n 10427: u8 [a0 + 0xa] = a3\n 10430: a2 = a2 >> 0x8\n 10433: u8 [a0 + 0x9] = a2\n 10436: u8 [a0] = a1\n 10438: a2 = a1 >> 0x38\n 10441: u8 [a0 + 0x7] = a2\n 10444: a2 = a1 >> 0x30\n 10447: u8 [a0 + 0x6] = a2\n 10450: a2 = a1 >> 0x28\n 10453: u8 [a0 + 0x5] = a2\n 10456: a2 = a1 >> 0x20\n 10459: u8 [a0 + 0x4] = a2\n 10462: a2 = a1 >> 0x18\n 10465: u8 [a0 + 0x3] = a2\n 10468: a2 = a1 >> 0x10\n 10471: u8 [a0 + 0x2] = a2\n 10474: a1 = a1 >> 0x8\n 10477: a2 = s0 + 0xffffffffffffffc0\n 10480: a3 = u64 [sp + 0xd0]\n 10484: a2 = a3 <u a2\n 10487: a3 = u64 [sp + 0xc8]\n 10491: a2 = 0 if a3 != 0\n 10493: a2 = 0 if s1 != 0\n 10495: u8 [a0 + 0x1] = a1\n 10498: jump @173 if a2 == 0\n      : @165 (gas: 4)\n 10502: a0 = u64 [sp + 0xc0]\n 10506: i32 a0 = a0 + 0x40\n 10509: a1 = 0x20\n 10512: ra = 142, jump @0\n      : @166 [@dyn 71] (gas: 76)\n 10518: a1 = u64 [sp + 0x60]\n 10521: a1 = reverse a1\n 10523: a2 = u64 [sp + 0x68]\n 10526: a2 = reverse a2\n 10528: a3 = u64 [sp + 0x70]\n 10531: a3 = reverse a3\n 10533: a4 = u64 [sp + 0x78]\n 10536: a4 = reverse a4\n 10538: a5 = a4 >> 0x38\n 10541: u8 [a0 + 0x1f] = a5\n 10544: a5 = a4 >> 0x30\n 10547: u8 [a0 + 0x1e] = a5\n 10550: a5 = a4 >> 0x28\n 10553: u8 [a0 + 0x1d] = a5\n 10556: a5 = a4 >> 0x20\n 10559: u8 [a0 + 0x1c] = a5\n 10562: a5 = a4 >> 0x18\n 10565: u8 [a0 + 0x1b] = a5\n 10568: a5 = a4 >> 0x10\n 10571: u8 [a0 + 0x1a] = a5\n 10574: a5 = a4 >> 0x8\n 10577: u8 [a0 + 0x19] = a5\n 10580: u8 [a0 + 0x18] = a4\n 10583: u8 [a0 + 0x10] = a3\n 10586: a4 = a3 >> 0x38\n 10589: u8 [a0 + 0x17] = a4\n 10592: a4 = a3 >> 0x30\n 10595: u8 [a0 + 0x16] = a4\n 10598: a4 = a3 >> 0x28\n 10601: u8 [a0 + 0x15] = a4\n 10604: a4 = a3 >> 0x20\n 10607: u8 [a0 + 0x14] = a4\n 10610: a4 = a3 >> 0x18\n 10613: u8 [a0 + 0x13] = a4\n 10616: a4 = a3 >> 0x10\n 10619: u8 [a0 + 0x12] = a4\n 10622: a3 = a3 >> 0x8\n 10625: u8 [a0 + 0x11] = a3\n 10628: u8 [a0 + 0x8] = a2\n 10631: a3 = a2 >> 0x38\n 10634: u8 [a0 + 0xf] = a3\n 10637: a3 = a2 >> 0x30\n 10640: u8 [a0 + 0xe] = a3\n 10643: a3 = a2 >> 0x28\n 10646: u8 [a0 + 0xd] = a3\n 10649: a3 = a2 >> 0x20\n 10652: u8 [a0 + 0xc] = a3\n 10655: a3 = a2 >> 0x18\n 10658: u8 [a0 + 0xb] = a3\n 10661: a3 = a2 >> 0x10\n 10664: u8 [a0 + 0xa] = a3\n 10667: a2 = a2 >> 0x8\n 10670: u8 [a0 + 0x9] = a2\n 10673: u8 [a0] = a1\n 10675: a2 = a1 >> 0x38\n 10678: u8 [a0 + 0x7] = a2\n 10681: a2 = a1 >> 0x30\n 10684: u8 [a0 + 0x6] = a2\n 10687: a2 = a1 >> 0x28\n 10690: u8 [a0 + 0x5] = a2\n 10693: a2 = a1 >> 0x20\n 10696: u8 [a0 + 0x4] = a2\n 10699: a2 = a1 >> 0x18\n 10702: u8 [a0 + 0x3] = a2\n 10705: a2 = a1 >> 0x10\n 10708: u8 [a0 + 0x2] = a2\n 10711: a1 = a1 >> 0x8\n 10714: s0 = 0x100000000\n 10724: a2 = 0xffffffa0\n 10734: a3 = u64 [sp + 0xd0]\n 10738: a2 = a3 <u a2\n 10741: a3 = u64 [sp + 0xc8]\n 10745: a2 = 0 if a3 != 0\n 10747: a2 = 0 if s1 != 0\n 10749: u8 [a0 + 0x1] = a1\n 10752: jump @173 if a2 == 0\n      : @167 (gas: 4)\n 10756: a0 = u64 [sp + 0xc0]\n 10760: i32 a0 = a0 + 0x60\n 10763: a1 = 0x20\n 10766: ra = 144, jump @0\n      : @168 [@dyn 72] (gas: 75)\n 10772: a1 = u64 [sp + 0x40]\n 10775: a1 = reverse a1\n 10777: a2 = u64 [sp + 0x48]\n 10780: a2 = reverse a2\n 10782: a3 = u64 [sp + 0x50]\n 10785: a3 = reverse a3\n 10787: a4 = u64 [sp + 0x58]\n 10790: a4 = reverse a4\n 10792: a5 = a4 >> 0x38\n 10795: u8 [a0 + 0x1f] = a5\n 10798: a5 = a4 >> 0x30\n 10801: u8 [a0 + 0x1e] = a5\n 10804: a5 = a4 >> 0x28\n 10807: u8 [a0 + 0x1d] = a5\n 10810: a5 = a4 >> 0x20\n 10813: u8 [a0 + 0x1c] = a5\n 10816: a5 = a4 >> 0x18\n 10819: u8 [a0 + 0x1b] = a5\n 10822: a5 = a4 >> 0x10\n 10825: u8 [a0 + 0x1a] = a5\n 10828: a5 = a4 >> 0x8\n 10831: u8 [a0 + 0x19] = a5\n 10834: u8 [a0 + 0x18] = a4\n 10837: u8 [a0 + 0x10] = a3\n 10840: a4 = a3 >> 0x38\n 10843: u8 [a0 + 0x17] = a4\n 10846: a4 = a3 >> 0x30\n 10849: u8 [a0 + 0x16] = a4\n 10852: a4 = a3 >> 0x28\n 10855: u8 [a0 + 0x15] = a4\n 10858: a4 = a3 >> 0x20\n 10861: u8 [a0 + 0x14] = a4\n 10864: a4 = a3 >> 0x18\n 10867: u8 [a0 + 0x13] = a4\n 10870: a4 = a3 >> 0x10\n 10873: u8 [a0 + 0x12] = a4\n 10876: a3 = a3 >> 0x8\n 10879: u8 [a0 + 0x11] = a3\n 10882: u8 [a0 + 0x8] = a2\n 10885: a3 = a2 >> 0x38\n 10888: u8 [a0 + 0xf] = a3\n 10891: a3 = a2 >> 0x30\n 10894: u8 [a0 + 0xe] = a3\n 10897: a3 = a2 >> 0x28\n 10900: u8 [a0 + 0xd] = a3\n 10903: a3 = a2 >> 0x20\n 10906: u8 [a0 + 0xc] = a3\n 10909: a3 = a2 >> 0x18\n 10912: u8 [a0 + 0xb] = a3\n 10915: a3 = a2 >> 0x10\n 10918: u8 [a0 + 0xa] = a3\n 10921: a2 = a2 >> 0x8\n 10924: u8 [a0 + 0x9] = a2\n 10927: u8 [a0] = a1\n 10929: a2 = a1 >> 0x38\n 10932: u8 [a0 + 0x7] = a2\n 10935: a2 = a1 >> 0x30\n 10938: u8 [a0 + 0x6] = a2\n 10941: a2 = a1 >> 0x28\n 10944: u8 [a0 + 0x5] = a2\n 10947: a2 = a1 >> 0x20\n 10950: u8 [a0 + 0x4] = a2\n 10953: a2 = a1 >> 0x18\n 10956: u8 [a0 + 0x3] = a2\n 10959: a2 = a1 >> 0x10\n 10962: u8 [a0 + 0x2] = a2\n 10965: a1 = a1 >> 0x8\n 10968: a2 = s0 + 0xffffffffffffff80\n 10971: a3 = u64 [sp + 0xd0]\n 10975: a2 = a3 <u a2\n 10978: a3 = u64 [sp + 0xc8]\n 10982: a2 = 0 if a3 != 0\n 10984: a2 = 0 if s1 != 0\n 10986: u8 [a0 + 0x1] = a1\n 10989: jump @173 if a2 == 0\n      : @169 (gas: 4)\n 10993: a0 = u64 [sp + 0xc0]\n 10997: i32 a0 = a0 + 0x80\n 11001: a1 = 0x20\n 11004: ra = 146, jump @0\n      : @170 [@dyn 73] (gas: 75)\n 11010: a1 = u64 [sp + 0x18]\n 11013: a1 = reverse a1\n 11015: a2 = u64 [sp + 0x20]\n 11018: a2 = reverse a2\n 11020: a3 = u64 [sp + 0x28]\n 11023: a3 = reverse a3\n 11025: a4 = u64 [sp + 0x30]\n 11028: a4 = reverse a4\n 11030: a5 = a4 >> 0x38\n 11033: u8 [a0 + 0x1f] = a5\n 11036: a5 = a4 >> 0x30\n 11039: u8 [a0 + 0x1e] = a5\n 11042: a5 = a4 >> 0x28\n 11045: u8 [a0 + 0x1d] = a5\n 11048: a5 = a4 >> 0x20\n 11051: u8 [a0 + 0x1c] = a5\n 11054: a5 = a4 >> 0x18\n 11057: u8 [a0 + 0x1b] = a5\n 11060: a5 = a4 >> 0x10\n 11063: u8 [a0 + 0x1a] = a5\n 11066: a5 = a4 >> 0x8\n 11069: u8 [a0 + 0x19] = a5\n 11072: u8 [a0 + 0x18] = a4\n 11075: u8 [a0 + 0x10] = a3\n 11078: a4 = a3 >> 0x38\n 11081: u8 [a0 + 0x17] = a4\n 11084: a4 = a3 >> 0x30\n 11087: u8 [a0 + 0x16] = a4\n 11090: a4 = a3 >> 0x28\n 11093: u8 [a0 + 0x15] = a4\n 11096: a4 = a3 >> 0x20\n 11099: u8 [a0 + 0x14] = a4\n 11102: a4 = a3 >> 0x18\n 11105: u8 [a0 + 0x13] = a4\n 11108: a4 = a3 >> 0x10\n 11111: u8 [a0 + 0x12] = a4\n 11114: a3 = a3 >> 0x8\n 11117: u8 [a0 + 0x11] = a3\n 11120: u8 [a0 + 0x8] = a2\n 11123: a3 = a2 >> 0x38\n 11126: u8 [a0 + 0xf] = a3\n 11129: a3 = a2 >> 0x30\n 11132: u8 [a0 + 0xe] = a3\n 11135: a3 = a2 >> 0x28\n 11138: u8 [a0 + 0xd] = a3\n 11141: a3 = a2 >> 0x20\n 11144: u8 [a0 + 0xc] = a3\n 11147: a3 = a2 >> 0x18\n 11150: u8 [a0 + 0xb] = a3\n 11153: a3 = a2 >> 0x10\n 11156: u8 [a0 + 0xa] = a3\n 11159: a2 = a2 >> 0x8\n 11162: u8 [a0 + 0x9] = a2\n 11165: u8 [a0] = a1\n 11167: a2 = a1 >> 0x38\n 11170: u8 [a0 + 0x7] = a2\n 11173: a2 = a1 >> 0x30\n 11176: u8 [a0 + 0x6] = a2\n 11179: a2 = a1 >> 0x28\n 11182: u8 [a0 + 0x5] = a2\n 11185: a2 = a1 >> 0x20\n 11188: u8 [a0 + 0x4] = a2\n 11191: a2 = a1 >> 0x18\n 11194: u8 [a0 + 0x3] = a2\n 11197: a2 = a1 >> 0x10\n 11200: u8 [a0 + 0x2] = a2\n 11203: a1 = a1 >> 0x8\n 11206: a2 = 0xffffff60\n 11216: a3 = u64 [sp + 0xd0]\n 11220: a2 = a3 <u a2\n 11223: a3 = u64 [sp + 0xc8]\n 11227: a2 = 0 if a3 != 0\n 11229: a2 = 0 if s1 != 0\n 11231: u8 [a0 + 0x1] = a1\n 11234: jump @173 if a2 == 0\n      : @171 (gas: 22)\n 11238: a0 = u64 [sp + 0xd0]\n 11242: a1 = a0 + 0xc0\n 11246: u64 [sp + 0xa8] = a1\n 11250: a0 = a1 <u a0\n 11253: a1 = u64 [sp + 0xc8]\n 11257: a2 = a1 + a0\n 11260: u64 [sp + 0xd0] = a2\n 11264: s0 = a2 <u a1\n 11267: s0 = a0 if a0 == 0\n 11270: a0 = u64 [sp + 0xb0]\n 11274: s0 = s0 + a0\n 11277: a0 = s0 <u a0\n 11280: a1 = u64 [sp + 0xb8]\n 11284: a0 = a0 + a1\n 11287: u64 [sp + 0xc8] = a0\n 11291: a0 = u64 [sp]\n 11293: a0 = a0 << 0x20\n 11296: s1 = a0 >> 0x20\n 11299: a0 = u64 [sp + 0xc0]\n 11303: i32 a0 = a0 + 0xa0\n 11307: a1 = 0x20\n 11310: ra = 148, jump @0\n      : @172 [@dyn 74] (gas: 68)\n 11316: a1 = reverse s1\n 11318: a2 = u64 [sp + 0x8]\n 11321: a2 = reverse a2\n 11323: a3 = u64 [sp + 0x10]\n 11326: a3 = reverse a3\n 11328: a4 = a3 >> 0x38\n 11331: u8 [a0 + 0x1f] = a4\n 11334: a4 = a3 >> 0x30\n 11337: u8 [a0 + 0x1e] = a4\n 11340: a4 = a3 >> 0x28\n 11343: u8 [a0 + 0x1d] = a4\n 11346: a4 = a3 >> 0x20\n 11349: u8 [a0 + 0x1c] = a4\n 11352: a4 = a3 >> 0x18\n 11355: u8 [a0 + 0x1b] = a4\n 11358: a4 = a3 >> 0x10\n 11361: u8 [a0 + 0x1a] = a4\n 11364: a4 = a3 >> 0x8\n 11367: u8 [a0 + 0x19] = a4\n 11370: u8 [a0 + 0x18] = a3\n 11373: u8 [a0 + 0x10] = a2\n 11376: u8 [a0 + 11] = 0\n 11379: u8 [a0 + 10] = 0\n 11382: u8 [a0 + 9] = 0\n 11385: u8 [a0 + 7] = 0\n 11388: u8 [a0 + 6] = 0\n 11391: u8 [a0 + 5] = 0\n 11394: u8 [a0 + 4] = 0\n 11397: u8 [a0 + 3] = 0\n 11400: u8 [a0 + 2] = 0\n 11403: u8 [a0 + 1] = 0\n 11406: u8 [a0 + 0] = 0\n 11408: a3 = a2 >> 0x38\n 11411: u8 [a0 + 0x17] = a3\n 11414: a3 = a2 >> 0x30\n 11417: u8 [a0 + 0x16] = a3\n 11420: a3 = a2 >> 0x28\n 11423: u8 [a0 + 0x15] = a3\n 11426: a3 = a2 >> 0x20\n 11429: u8 [a0 + 0x14] = a3\n 11432: a3 = a2 >> 0x18\n 11435: u8 [a0 + 0x13] = a3\n 11438: a3 = a2 >> 0x10\n 11441: u8 [a0 + 0x12] = a3\n 11444: a2 = a2 >> 0x8\n 11447: u8 [a0 + 0x11] = a2\n 11450: u8 [a0 + 0x8] = a1\n 11453: a2 = a1 >> 0x38\n 11456: u8 [a0 + 0xf] = a2\n 11459: a2 = a1 >> 0x30\n 11462: u8 [a0 + 0xe] = a2\n 11465: a2 = a1 >> 0x28\n 11468: u8 [a0 + 0xd] = a2\n 11471: a1 = a1 >> 0x20\n 11474: u8 [a0 + 0xc] = a1\n 11477: a0 = u64 [sp + 0x38]\n 11480: a1 = u64 [sp + 0xa8]\n 11484: u64 [a0] = a1\n 11486: a1 = u64 [sp + 0xc8]\n 11490: u64 [a0 + 0x18] = a1\n 11493: a1 = u64 [sp + 0xd0]\n 11497: u64 [a0 + 0x8] = a1\n 11500: u64 [a0 + 0x10] = s0\n 11503: ra = u64 [sp + 0xe8]\n 11507: s0 = u64 [sp + 0xe0]\n 11511: s1 = u64 [sp + 0xd8]\n 11515: sp = sp + 0xf0\n 11519: ret\n      : @173 (gas: 1)\n 11521: trap\n      : @174 (gas: 8)\n 11522: a0 = u64 [sp + 0x2f0]\n 11526: a1 = u64 [sp + 0x2f8]\n 11530: a2 = u64 [sp + 0x2e8]\n 11534: a3 = u64 [sp + 0x2e0]\n 11538: a1 = a1 | a2\n 11541: a0 = a0 | a3\n 11544: a0 = a0 | a1\n 11547: jump @184 if a0 != 0\n      : @175 (gas: 2)\n 11551: a0 = i32 [0x20004]\n 11556: jump @184 if a0 <=u 35\n      : @176 (gas: 4)\n 11561: i32 a0 = sp + 0x300\n 11565: a1 = 0x4\n 11568: ecalli 2 // 'call_data_load'\n 11570: fallthrough\n      : @177 (gas: 10)\n 11571: a0 = u64 [sp + 0x310]\n 11575: a2 = u64 [sp + 0x318]\n 11579: a1 = 0x100000000\n 11589: a1 = a1 ^ a0\n 11592: a1 = a1 | a2\n 11595: a3 = a0 >> 0x20\n 11598: a3 = a3 <u 0x1\n 11601: a3 = 0 if a2 != 0\n 11603: a3 = 0 if a1 == 0\n 11605: jump @184 if a3 == 0\n      : @178 (gas: 26)\n 11609: a1 = u64 [sp + 0x308]\n 11613: a3 = u64 [sp + 0x300]\n 11617: u64 [sp + 0x208] = a1\n 11621: u64 [sp + 0x200] = a3\n 11625: u64 [sp + 0x210] = a0\n 11629: a0 = sp + 0x220\n 11633: a1 = sp + 0x200\n 11637: u64 [sp + 0x218] = a2\n 11641: ra = 0x96\n 11645: sp = sp + 0xfffffffffffffee0\n 11649: u64 [sp + 0x118] = ra\n 11653: u64 [sp + 0x110] = s0\n 11657: u64 [sp + 0x108] = s1\n 11661: s0 = sp + 0x120\n 11665: sp = sp & 0xffffffffffffffe0\n 11668: a2 = u64 [a1]\n 11670: u64 [sp + 0xb8] = a2\n 11674: a2 = u64 [a1 + 0x8]\n 11677: u64 [sp + 0xb0] = a2\n 11681: a1 = u32 [a1 + 0x10]\n 11684: u64 [sp + 0xa8] = a1\n 11688: s1 = a0\n 11690: a1 = 0x20\n 11693: a0 = 0\n 11695: ra = 0x84\n 11699: jump @0\n      : @179 [@dyn 75] (gas: 51)\n 11702: a0 = u64 [sp + 0x220]\n 11706: u64 [sp + 0xf0] = a0\n 11710: a0 = u64 [sp + 0x228]\n 11714: u64 [sp + 0xe8] = a0\n 11718: a0 = u64 [sp + 0x230]\n 11722: u64 [sp + 0xe0] = a0\n 11726: a0 = u64 [sp + 0x238]\n 11730: u64 [sp + 0xd8] = a0\n 11734: a0 = u64 [sp + 0x240]\n 11738: u64 [sp + 0xd0] = a0\n 11742: a0 = u64 [sp + 0x248]\n 11746: u64 [sp + 0xc8] = a0\n 11750: a0 = u64 [sp + 0x250]\n 11754: u64 [sp + 0xc0] = a0\n 11758: a0 = u64 [sp + 0x258]\n 11762: u64 [sp + 0xb8] = a0\n 11766: a0 = u64 [sp + 0x260]\n 11770: u64 [sp + 0xb0] = a0\n 11774: a0 = u64 [sp + 0x268]\n 11778: u64 [sp + 0xa8] = a0\n 11782: a0 = u64 [sp + 0x270]\n 11786: u64 [sp + 0xa0] = a0\n 11790: a0 = u64 [sp + 0x278]\n 11794: u64 [sp + 0x98] = a0\n 11798: a0 = u64 [sp + 0x280]\n 11802: u64 [sp + 0x90] = a0\n 11806: a0 = u64 [sp + 0x288]\n 11810: u64 [sp + 0x88] = a0\n 11814: a0 = u64 [sp + 0x290]\n 11818: u64 [sp + 0x80] = a0\n 11822: a0 = u64 [sp + 0x298]\n 11826: u64 [sp + 0x78] = a0\n 11829: a0 = u64 [sp + 0x2a0]\n 11833: u64 [sp + 0x70] = a0\n 11836: a0 = u64 [sp + 0x2a8]\n 11840: u64 [sp + 0x68] = a0\n 11843: a0 = u64 [sp + 0x2b0]\n 11847: u64 [sp + 0x60] = a0\n 11850: a0 = u64 [sp + 0x2b8]\n 11854: u64 [sp + 0x58] = a0\n 11857: a0 = u64 [sp + 0x2c0]\n 11861: u64 [sp + 0x50] = a0\n 11864: a0 = u64 [sp + 0x2c8]\n 11868: u64 [sp + 0x48] = a0\n 11871: a0 = u64 [sp + 0x2d0]\n 11875: u64 [sp + 0x40] = a0\n 11878: a0 = u64 [sp + 0x2d8]\n 11882: u64 [sp + 0x38] = a0\n 11885: a0 = 0x40\n 11888: a1 = 0x20\n 11891: ra = 152, jump @0\n      : @180 [@dyn 76] (gas: 158)\n 11897: a1 = u8 [a0 + 0x1]\n 11900: a2 = u8 [a0]\n 11902: a3 = u8 [a0 + 0x2]\n 11905: a4 = u8 [a0 + 0x3]\n 11908: a1 = a1 << 0x8\n 11911: a1 = a1 | a2\n 11914: a3 = a3 << 0x10\n 11917: a4 = a4 << 0x18\n 11920: a3 = a3 | a4\n 11923: a1 = a1 | a3\n 11926: a2 = u8 [a0 + 0x5]\n 11929: a3 = u8 [a0 + 0x4]\n 11932: a4 = u8 [a0 + 0x6]\n 11935: a5 = u8 [a0 + 0x7]\n 11938: a2 = a2 << 0x8\n 11941: a2 = a2 | a3\n 11944: a4 = a4 << 0x10\n 11947: a5 = a5 << 0x18\n 11950: a4 = a4 | a5\n 11953: a2 = a2 | a4\n 11956: a2 = a2 << 0x20\n 11959: t0 = a2 | a1\n 11962: a2 = u8 [a0 + 0x9]\n 11965: a3 = u8 [a0 + 0x8]\n 11968: a4 = u8 [a0 + 0xa]\n 11971: a5 = u8 [a0 + 0xb]\n 11974: a2 = a2 << 0x8\n 11977: a2 = a2 | a3\n 11980: a4 = a4 << 0x10\n 11983: a5 = a5 << 0x18\n 11986: a4 = a4 | a5\n 11989: a2 = a2 | a4\n 11992: a3 = u8 [a0 + 0xd]\n 11995: a4 = u8 [a0 + 0xc]\n 11998: a5 = u8 [a0 + 0xe]\n 12001: s1 = u8 [a0 + 0xf]\n 12004: a3 = a3 << 0x8\n 12007: a3 = a3 | a4\n 12010: a5 = a5 << 0x10\n 12013: s1 = s1 << 0x18\n 12016: a5 = a5 | s1\n 12019: a3 = a3 | a5\n 12022: a3 = a3 << 0x20\n 12025: a2 = a2 | a3\n 12028: a3 = u8 [a0 + 0x11]\n 12031: a4 = u8 [a0 + 0x10]\n 12034: a5 = u8 [a0 + 0x12]\n 12037: s1 = u8 [a0 + 0x13]\n 12040: a3 = a3 << 0x8\n 12043: a3 = a3 | a4\n 12046: a5 = a5 << 0x10\n 12049: s1 = s1 << 0x18\n 12052: a5 = a5 | s1\n 12055: a3 = a3 | a5\n 12058: a4 = u8 [a0 + 0x15]\n 12061: a5 = u8 [a0 + 0x14]\n 12064: s1 = u8 [a0 + 0x16]\n 12067: a1 = u8 [a0 + 0x17]\n 12070: a4 = a4 << 0x8\n 12073: a4 = a4 | a5\n 12076: s1 = s1 << 0x10\n 12079: a1 = a1 << 0x18\n 12082: a1 = a1 | s1\n 12085: a1 = a1 | a4\n 12088: a1 = a1 << 0x20\n 12091: a3 = a3 | a1\n 12094: a1 = u8 [a0 + 0x19]\n 12097: a4 = u8 [a0 + 0x18]\n 12100: a5 = u8 [a0 + 0x1a]\n 12103: s1 = u8 [a0 + 0x1b]\n 12106: a1 = a1 << 0x8\n 12109: a1 = a1 | a4\n 12112: a5 = a5 << 0x10\n 12115: s1 = s1 << 0x18\n 12118: a5 = a5 | s1\n 12121: a1 = a1 | a5\n 12124: a4 = u8 [a0 + 0x1d]\n 12127: a5 = u8 [a0 + 0x1c]\n 12130: s1 = u8 [a0 + 0x1e]\n 12133: a0 = u8 [a0 + 0x1f]\n 12136: a4 = a4 << 0x8\n 12139: a4 = a4 | a5\n 12142: s1 = s1 << 0x10\n 12145: a0 = a0 << 0x18\n 12148: a0 = a0 | s1\n 12151: a0 = a0 | a4\n 12154: a0 = a0 << 0x20\n 12157: a0 = a0 | a1\n 12160: s1 = reverse a0\n 12162: a3 = reverse a3\n 12164: u64 [sp + 0x28] = a3\n 12167: a1 = reverse a2\n 12169: u64 [sp + 0x30] = a1\n 12172: a2 = reverse t0\n 12174: u64 [sp + 0xf8] = a2\n 12178: a0 = sp + 0x100\n 12182: u64 [sp + 0x8] = a0\n 12185: a0 = sp + 0x120\n 12189: u64 [sp] = a0\n 12191: a0 = u64 [sp + 0x38]\n 12194: u64 [sp + 0x118] = a0\n 12198: a0 = u64 [sp + 0x40]\n 12201: u64 [sp + 0x110] = a0\n 12205: a0 = u64 [sp + 0x48]\n 12208: u64 [sp + 0x108] = a0\n 12212: a0 = u64 [sp + 0x50]\n 12215: u64 [sp + 0x100] = a0\n 12219: a0 = u64 [sp + 0x58]\n 12222: u64 [sp + 0x138] = a0\n 12226: a0 = u64 [sp + 0x60]\n 12229: u64 [sp + 0x130] = a0\n 12233: a0 = u64 [sp + 0x68]\n 12236: u64 [sp + 0x128] = a0\n 12240: a0 = u64 [sp + 0x70]\n 12243: u64 [sp + 0x120] = a0\n 12247: a0 = u64 [sp + 0x78]\n 12250: u64 [sp + 0x158] = a0\n 12254: a0 = u64 [sp + 0x80]\n 12258: u64 [sp + 0x150] = a0\n 12262: a0 = u64 [sp + 0x88]\n 12266: u64 [sp + 0x148] = a0\n 12270: a0 = u64 [sp + 0x90]\n 12274: u64 [sp + 0x140] = a0\n 12278: a0 = u64 [sp + 0x98]\n 12282: u64 [sp + 0x178] = a0\n 12286: a0 = u64 [sp + 0xa0]\n 12290: u64 [sp + 0x170] = a0\n 12294: a0 = u64 [sp + 0xa8]\n 12298: u64 [sp + 0x168] = a0\n 12302: a0 = u64 [sp + 0xb0]\n 12306: u64 [sp + 0x160] = a0\n 12310: a0 = u64 [sp + 0xb8]\n 12314: u64 [sp + 0x198] = a0\n 12318: a0 = u64 [sp + 0xc0]\n 12322: u64 [sp + 0x190] = a0\n 12326: a0 = u64 [sp + 0xc8]\n 12330: u64 [sp + 0x188] = a0\n 12334: a0 = u64 [sp + 0xd0]\n 12338: u64 [sp + 0x180] = a0\n 12342: a0 = u64 [sp + 0xd8]\n 12346: u64 [sp + 0x1b8] = a0\n 12350: a0 = u64 [sp + 0xe0]\n 12354: u64 [sp + 0x1b0] = a0\n 12358: a0 = u64 [sp + 0xe8]\n 12362: u64 [sp + 0x1a8] = a0\n 12366: a0 = u64 [sp + 0xf0]\n 12370: u64 [sp + 0x1a0] = a0\n 12374: u64 [sp + 0x1d8] = a2\n 12378: u64 [sp + 0x1d0] = a1\n 12382: u64 [sp + 0x1c8] = a3\n 12386: a0 = sp + 0x1e0\n 12390: a1 = sp + 0x1c0\n 12394: a2 = sp + 0x1a0\n 12398: a3 = sp + 0x180\n 12402: a4 = sp + 0x160\n 12406: a5 = sp + 0x140\n 12410: u64 [sp + 0x1c0] = s1\n 12414: ra = 154, jump @160\n      : @181 [@dyn 77] (gas: 12)\n 12420: a4 = u64 [sp + 0x28]\n 12423: a2 = s1\n 12425: a0 = u64 [sp + 0xf8]\n 12429: a0 = a0 | a4\n 12432: s1 = u64 [sp + 0x30]\n 12435: a1 = a2 | s1\n 12438: a1 = a1 | a0\n 12441: a1 = a1 >> 0x20\n 12444: a0 = a0 | s1\n 12447: a0 = a0 << 0x20\n 12450: a0 = a0 | a1\n 12453: jump @183 if a0 != 0\n      : @182 (gas: 29)\n 12456: a0 = u64 [sp + 0x1e8]\n 12460: a1 = u64 [sp + 0x1f8]\n 12464: u64 [sp + 0xf0] = a1\n 12468: t1 = u64 [sp + 0x1e0]\n 12472: a1 = u64 [sp + 0x1f0]\n 12476: t2 = a0 ^ a4\n 12479: a5 = a0 <u a4\n 12482: ra = t1 <u a2\n 12485: a5 = ra if t2 == 0\n 12488: a3 = a1 - s1\n 12491: t2 = a3 - a5\n 12494: t0 = a3 <u a5\n 12497: a3 = a1 <u s1\n 12500: a1 = u64 [sp + 0xf8]\n 12504: a5 = u64 [sp + 0xf0]\n 12508: a5 = a5 - a1\n 12511: a5 = a5 - a3\n 12514: a5 = a5 - t0\n 12517: a0 = a0 - a4\n 12520: a0 = a0 - ra\n 12523: s1 = t1 - a2\n 12526: a0 = a0 | a5\n 12529: a1 = s1 | t2\n 12532: a1 = a1 | a0\n 12535: a0 = a0 | t2\n 12538: a1 = a1 >> 0x20\n 12541: a0 = a0 << 0x20\n 12544: a0 = a0 | a1\n 12547: jump @186 if a0 == 0\n      : @183 (gas: 1)\n 12550: trap\n      : @184 (gas: 3)\n 12551: a0 = 0\n 12553: a1 = 0\n 12555: ra = 156, jump @0\n      : @185 [@dyn 78] (gas: 5)\n 12561: i32 a1 = a0 + 0\n 12563: a0 = 0x1\n 12566: a2 = 0\n 12568: ecalli 12 // 'seal_return'\n 12570: fallthrough\n      : @186 (gas: 4)\n 12571: i32 a0 = a2 + 0\n 12573: i32 s1 = s1 + 0\n 12575: a1 = s1\n 12577: ra = 158, jump @0\n      : @187 [@dyn 79] (gas: 6)\n 12583: i32 a1 = a0 + 0\n 12585: a0 = 0\n 12587: a2 = s1\n 12589: ra = 0xa0\n 12593: ecalli 12 // 'seal_return'\n 12595: fallthrough\n      : @188 [@dyn 80] (gas: 13)\n 12596: sp = sp + 0xffffffffffffffb0\n 12599: u64 [sp + 0x48] = ra\n 12602: u64 [sp + 0x40] = s0\n 12605: s0 = sp + 0x50\n 12608: sp = sp & 0xfffffffffffffff0\n 12611: u64 [sp + 48] = 0\n 12614: u64 [sp + 40] = 0\n 12617: u64 [sp + 32] = 0\n 12620: a0 = 0x4e487b7100000000\n 12630: a1 = sp + 0x20\n 12633: u64 [sp + 0x38] = a0\n 12636: a0 = 0\n 12638: ra = 162, jump @8\n      : @189 [@dyn 81] (gas: 7)\n 12644: u64 [sp + 24] = 0\n 12647: u64 [sp + 16] = 0\n 12650: u64 [sp + 0] = 0x41\n 12653: a0 = 0x4\n 12656: a1 = sp\n 12658: u64 [sp + 8] = 0\n 12661: ra = 164, jump @8\n      : @190 [@dyn 82] (gas: 3)\n 12667: a1 = 0x24\n 12670: a0 = 0\n 12672: ra = 166, jump @0\n      : @191 [@dyn 83] (gas: 6)\n 12678: i32 a1 = a0 + 0\n 12680: a0 = 0x1\n 12683: a2 = 0x24\n 12686: ra = 0xa8\n 12690: ecalli 12 // 'seal_return'\n 12692: fallthrough\n      : @192 [@dyn 84] (gas: 9)\n 12693: sp = sp + 0xffffffffffffffc0\n 12696: u64 [sp + 0x38] = ra\n 12699: u64 [sp + 0x30] = s0\n 12702: u64 [sp + 0x28] = s1\n 12705: s0 = sp + 0x40\n 12708: sp = sp & 0xffffffffffffffe0\n 12711: a0 = 0x40\n 12714: a1 = 0x20\n 12717: ra = 170, jump @0\n      : @193 [@dyn 85] (gas: 97)\n 12723: a1 = u8 [a0 + 0x11]\n 12726: a2 = u8 [a0 + 0x10]\n 12729: a3 = u8 [a0 + 0x12]\n 12732: a4 = u8 [a0 + 0x13]\n 12735: a1 = a1 << 0x8\n 12738: a1 = a1 | a2\n 12741: a3 = a3 << 0x10\n 12744: a4 = a4 << 0x18\n 12747: a3 = a3 | a4\n 12750: a1 = a1 | a3\n 12753: a2 = u8 [a0 + 0x15]\n 12756: a3 = u8 [a0 + 0x14]\n 12759: a4 = u8 [a0 + 0x16]\n 12762: a5 = u8 [a0 + 0x17]\n 12765: a2 = a2 << 0x8\n 12768: a2 = a2 | a3\n 12771: a4 = a4 << 0x10\n 12774: a5 = a5 << 0x18\n 12777: a4 = a4 | a5\n 12780: a2 = a2 | a4\n 12783: a2 = a2 << 0x20\n 12786: t0 = a2 | a1\n 12789: a2 = u8 [a0 + 0x1]\n 12792: a3 = u8 [a0]\n 12794: a4 = u8 [a0 + 0x2]\n 12797: a5 = u8 [a0 + 0x3]\n 12800: a2 = a2 << 0x8\n 12803: a2 = a2 | a3\n 12806: a4 = a4 << 0x10\n 12809: a5 = a5 << 0x18\n 12812: a4 = a4 | a5\n 12815: a2 = a2 | a4\n 12818: a3 = u8 [a0 + 0x5]\n 12821: a4 = u8 [a0 + 0x4]\n 12824: a5 = u8 [a0 + 0x6]\n 12827: s1 = u8 [a0 + 0x7]\n 12830: a3 = a3 << 0x8\n 12833: a3 = a3 | a4\n 12836: a5 = a5 << 0x10\n 12839: s1 = s1 << 0x18\n 12842: a5 = a5 | s1\n 12845: a3 = a3 | a5\n 12848: a3 = a3 << 0x20\n 12851: a2 = a2 | a3\n 12854: a3 = u8 [a0 + 0x19]\n 12857: a4 = u8 [a0 + 0x18]\n 12860: a5 = u8 [a0 + 0x1a]\n 12863: s1 = u8 [a0 + 0x1b]\n 12866: a3 = a3 << 0x8\n 12869: a3 = a3 | a4\n 12872: a5 = a5 << 0x10\n 12875: s1 = s1 << 0x18\n 12878: a5 = a5 | s1\n 12881: a3 = a3 | a5\n 12884: a4 = u8 [a0 + 0x1d]\n 12887: a5 = u8 [a0 + 0x1c]\n 12890: s1 = u8 [a0 + 0x1e]\n 12893: a1 = u8 [a0 + 0x1f]\n 12896: a4 = a4 << 0x8\n 12899: a4 = a4 | a5\n 12902: s1 = s1 << 0x10\n 12905: a1 = a1 << 0x18\n 12908: a1 = a1 | s1\n 12911: a1 = a1 | a4\n 12914: a1 = a1 << 0x20\n 12917: a3 = a3 | a1\n 12920: a1 = u8 [a0 + 0x9]\n 12923: a4 = u8 [a0 + 0x8]\n 12926: a5 = u8 [a0 + 0xa]\n 12929: s1 = u8 [a0 + 0xb]\n 12932: a1 = a1 << 0x8\n 12935: a1 = a1 | a4\n 12938: a5 = a5 << 0x10\n 12941: s1 = s1 << 0x18\n 12944: a5 = a5 | s1\n 12947: a1 = a1 | a5\n 12950: a4 = u8 [a0 + 0xd]\n 12953: a5 = u8 [a0 + 0xc]\n 12956: s1 = u8 [a0 + 0xe]\n 12959: a0 = u8 [a0 + 0xf]\n 12962: a4 = a4 << 0x8\n 12965: a4 = a4 | a5\n 12968: s1 = s1 << 0x10\n 12971: a0 = a0 << 0x18\n 12974: a0 = a0 | s1\n 12977: a0 = a0 | a4\n 12980: a0 = a0 << 0x20\n 12983: a0 = a0 | a1\n 12986: s1 = reverse a0\n 12988: a0 = reverse a3\n 12990: u64 [sp + 0x8] = a0\n 12993: a0 = reverse a2\n 12995: u64 [sp + 0x18] = a0\n 12998: a0 = reverse t0\n 13000: u64 [sp + 0x10] = a0\n 13003: ecalli 11 // 'return_data_size'\n 13005: fallthrough\n      : @194 (gas: 11)\n 13006: a3 = u64 [sp + 0x8]\n 13009: a1 = u64 [sp + 0x18]\n 13012: a2 = u64 [sp + 0x10]\n 13015: a1 = a1 | a2\n 13018: a2 = a3 | s1\n 13021: a2 = a2 | a1\n 13024: a2 = a2 >> 0x20\n 13027: a1 = a1 | s1\n 13030: a1 = a1 << 0x20\n 13033: a1 = a1 | a2\n 13036: jump @201 if a1 != 0\n      : @195 (gas: 3)\n 13039: s1 = a0\n 13041: a0 = a0 >> 0x20\n 13044: jump @201 if a0 != 0\n      : @196 (gas: 5)\n 13047: i32 a0 = a3 + 0\n 13049: i32 a1 = s1 + 0\n 13051: u64 [sp + 0x18] = a1\n 13054: u64 [sp + 0x10] = a0\n 13057: ra = 172, jump @0\n      : @197 [@dyn 86] (gas: 6)\n 13063: u32 [sp + 0x20] = s1\n 13066: i32 a0 = a0 + 0\n 13068: i32 a1 = sp + 0x20\n 13071: a2 = 0\n 13073: ecalli 10 // 'return_data_copy'\n 13075: fallthrough\n      : @198 (gas: 3)\n 13076: a0 = i32 [sp + 0x20]\n 13079: a1 = u64 [sp + 0x18]\n 13082: jump @201 if a0 <u a1\n      : @199 (gas: 2)\n 13085: ecalli 11 // 'return_data_size'\n 13087: fallthrough\n      : @200 (gas: 2)\n 13088: a1 = a0 >> 0x20\n 13091: jump @202 if a1 == 0\n      : @201 (gas: 1)\n 13094: trap\n      : @202 (gas: 4)\n 13095: i32 s1 = a0 + 0\n 13097: a0 = u64 [sp + 0x10]\n 13100: a1 = s1\n 13102: ra = 174, jump @0\n      : @203 [@dyn 87] (gas: 6)\n 13108: i32 a1 = a0 + 0\n 13110: a0 = 0x1\n 13113: a2 = s1\n 13115: ra = 0xb0\n 13119: ecalli 12 // 'seal_return'\n 13121: fallthrough\n      : @204 [@dyn 88] (gas: 9)\n 13122: a2 = u64 [a1 + 0x18]\n 13125: a3 = u64 [a1 + 0x10]\n 13128: a4 = u64 [a1 + 0x8]\n 13131: a1 = u64 [a1]\n 13133: u64 [a0 + 0x18] = a2\n 13136: u64 [a0 + 0x10] = a3\n 13139: u64 [a0 + 0x8] = a4\n 13142: u64 [a0] = a1\n 13144: ret\n      : @205 (gas: 7)\n 13146: a4 = u64 [sp + 0x218]\n 13150: a3 = u64 [sp + 0x210]\n 13154: a2 = u64 [sp + 0x208]\n 13158: a0 = a3 | a4\n 13161: a1 = a2 <u 0x1\n 13164: a1 = 0 if a0 != 0\n 13166: jump @208 if a1 == 0\n      : @206 (gas: 50)\n 13170: a0 = u64 [sp + 0x200]\n 13174: u64 [sp + 0x58] = a0\n 13177: a0 = a0 + 0x1\n 13180: a1 = a0 <u 0x1\n 13183: a1 = a1 + a2\n 13186: u64 [sp + 0x200] = a0\n 13190: a0 = a0 | a1\n 13193: u64 [sp + 0x208] = a1\n 13197: a0 = a0 <u 0x1\n 13200: a0 = a0 + a3\n 13203: u64 [sp + 0x210] = a0\n 13207: a0 = a0 <u a3\n 13210: a0 = a0 + a4\n 13213: u64 [sp + 0x218] = a0\n 13217: a0 = u64 [sp + 0x70]\n 13220: u64 [sp + 0x1e8] = a0\n 13224: a0 = u64 [sp + 0x78]\n 13227: u64 [sp + 0x1e0] = a0\n 13231: a0 = u64 [sp + 0x68]\n 13234: u64 [sp + 0x1f0] = a0\n 13238: s1 = u64 [sp + 0x60]\n 13241: u64 [sp + 0x1f8] = s1\n 13245: i32 a1 = sp + 0x1e0\n 13249: u64 [sp + 0x50] = a3\n 13252: i32 a3 = sp + 0x200\n 13256: u64 [sp + 0x48] = a2\n 13259: a2 = 0xffffffffffffffff\n 13262: u64 [sp + 0x40] = a4\n 13265: a4 = 0x20\n 13268: a0 = 0\n 13270: ecalli 14 // 'set_storage'\n 13272: a0 = u64 [sp + 0x40]\n 13275: u64 [sp + 0x158] = a0\n 13279: a0 = u64 [sp + 0x50]\n 13282: u64 [sp + 0x150] = a0\n 13286: a0 = u64 [sp + 0x48]\n 13289: u64 [sp + 0x148] = a0\n 13293: a0 = u64 [sp + 0x58]\n 13296: u64 [sp + 0x140] = a0\n 13300: u64 [sp + 0x178] = s1\n 13304: a0 = u64 [sp + 0x68]\n 13307: u64 [sp + 0x170] = a0\n 13311: a0 = u64 [sp + 0x70]\n 13314: u64 [sp + 0x168] = a0\n 13318: a0 = sp + 0x180\n 13322: a1 = sp + 0x160\n 13326: a2 = sp + 0x140\n 13330: a3 = u64 [sp + 0x78]\n 13333: u64 [sp + 0x160] = a3\n 13337: ra = 178, jump @62\n      : @207 [@dyn 89] (gas: 444)\n 13343: a0 = u64 [sp + 0x1b8]\n 13347: u64 [sp + 0x58] = a0\n 13350: a0 = u64 [sp + 0x1b0]\n 13354: u64 [sp + 0x50] = a0\n 13357: s1 = u64 [sp + 0x1a8]\n 13361: a0 = u64 [sp + 0x1a0]\n 13365: u64 [sp + 0x20] = a0\n 13368: a3 = u64 [sp + 0x198]\n 13372: u64 [sp + 0x60] = a3\n 13375: a2 = u64 [sp + 0x190]\n 13379: u64 [sp + 0x68] = a2\n 13382: a1 = u64 [sp + 0x188]\n 13386: u64 [sp + 0x70] = a1\n 13389: a0 = u64 [sp + 0x180]\n 13393: u64 [sp + 0x78] = a0\n 13396: u64 [sp + 0x1f8] = a3\n 13400: u64 [sp + 0x1f0] = a2\n 13404: u64 [sp + 0x1e8] = a1\n 13408: u64 [sp + 0x1e0] = a0\n 13412: u64 [sp + 536] = 0\n 13416: u64 [sp + 528] = 0\n 13420: u64 [sp + 520] = 0\n 13424: u64 [sp + 512] = 0\n 13428: u32 [sp + 448] = 0x20\n 13433: i32 a1 = sp + 0x1e0\n 13437: i32 a3 = sp + 0x200\n 13441: i32 a4 = sp + 0x1c0\n 13445: a2 = 0xffffffffffffffff\n 13448: a0 = 0\n 13450: ecalli 6 // 'get_storage'\n 13452: a2 = u64 [sp + 0x20]\n 13455: a0 = a2 >> 0x3d\n 13458: a1 = s1 << 0x3\n 13461: a0 = a0 | a1\n 13464: a1 = a2 << 0x3\n 13467: a1 = a1 <u 0x100\n 13471: t1 = a1 ^ 0x1\n 13474: a1 = a0 >u 0\n 13476: t1 = a1 if a0 != 0\n 13479: s1 = s1 >> 0x3d\n 13482: a1 = u64 [sp + 0x50]\n 13485: a0 = a1 << 0x3\n 13488: a0 = a0 | s1\n 13491: a1 = a1 >> 0x3d\n 13494: a3 = u64 [sp + 0x58]\n 13497: a3 = a3 << 0x3\n 13500: a1 = a1 | a3\n 13503: a3 = a1 >u 0\n 13505: a4 = a0 >u 0\n 13507: a4 = a3 if a1 != 0\n 13510: a0 = a0 | a1\n 13513: t1 = a4 if a0 != 0\n 13516: a0 = u64 [sp + 0x200]\n 13520: u64 [sp + 0x58] = a0\n 13523: a0 = u64 [sp + 0x208]\n 13527: u64 [sp + 0x50] = a0\n 13530: a0 = u64 [sp + 0x210]\n 13534: u64 [sp + 0x48] = a0\n 13537: a0 = u64 [sp + 0x218]\n 13541: u64 [sp + 0x40] = a0\n 13544: u8 [sp + 307] = 0xff\n 13550: u8 [sp + 303] = 0xff\n 13556: u8 [sp + 302] = 0xff\n 13562: u8 [sp + 301] = 0xff\n 13568: u8 [sp + 299] = 0xff\n 13574: u8 [sp + 295] = 0xff\n 13580: u8 [sp + 294] = 0xff\n 13586: u8 [sp + 293] = 0xff\n 13592: u8 [sp + 291] = 0xff\n 13598: a0 = 0xffffffff\n 13608: u8 [sp + 0x12c] = a0\n 13612: u8 [sp + 0x124] = a0\n 13616: a0 = 0xffffffffffff\n 13626: u8 [sp + 0x132] = a0\n 13630: u8 [sp + 0x12a] = a0\n 13634: u8 [sp + 0x122] = a0\n 13638: u8 [sp + 304] = 0xffffffffffffffff\n 13643: u8 [sp + 296] = 0xffffffffffffffff\n 13648: u8 [sp + 288] = 0xffffffffffffffff\n 13653: a0 = 0xffffffffffffff\n 13663: u8 [sp + 0x131] = a0\n 13667: u8 [sp + 0x129] = a0\n 13671: u8 [sp + 0x121] = a0\n 13675: u8 [sp + 319] = 0\n 13679: u8 [sp + 318] = 0\n 13683: u8 [sp + 317] = 0\n 13687: u8 [sp + 316] = 0\n 13691: u8 [sp + 315] = 0\n 13695: u8 [sp + 314] = 0\n 13699: u8 [sp + 313] = 0\n 13703: u8 [sp + 312] = 0\n 13707: u8 [sp + 311] = 0\n 13711: u8 [sp + 310] = 0\n 13715: u8 [sp + 309] = 0\n 13719: u8 [sp + 308] = 0\n 13723: u8 [sp + 287] = 0\n 13727: u8 [sp + 286] = 0\n 13731: u8 [sp + 285] = 0\n 13735: u8 [sp + 284] = 0\n 13739: u8 [sp + 283] = 0\n 13743: u8 [sp + 282] = 0\n 13747: u8 [sp + 281] = 0\n 13751: u8 [sp + 280] = 0\n 13755: u8 [sp + 279] = 0\n 13759: u8 [sp + 278] = 0\n 13763: u8 [sp + 277] = 0\n 13767: u8 [sp + 276] = 0\n 13771: u8 [sp + 275] = 0\n 13775: u8 [sp + 274] = 0\n 13779: u8 [sp + 273] = 0\n 13783: u8 [sp + 272] = 0\n 13787: u8 [sp + 271] = 0\n 13791: u8 [sp + 270] = 0\n 13795: u8 [sp + 269] = 0\n 13799: u8 [sp + 268] = 0\n 13803: u8 [sp + 267] = 0\n 13807: u8 [sp + 266] = 0\n 13811: u8 [sp + 265] = 0\n 13815: u8 [sp + 264] = 0\n 13819: u8 [sp + 263] = 0\n 13823: u8 [sp + 262] = 0\n 13827: u8 [sp + 261] = 0\n 13831: u8 [sp + 260] = 0\n 13835: u8 [sp + 259] = 0\n 13839: u8 [sp + 258] = 0\n 13843: u8 [sp + 257] = 0\n 13847: u8 [sp + 256] = 0\n 13851: a4 = a2 & 0x1f\n 13854: a3 = sp + 0x120\n 13858: a3 = a3 - a4\n 13861: a0 = u8 [a3 + 0x19]\n 13864: a1 = u8 [a3 + 0x18]\n 13867: a5 = u8 [a3 + 0x1a]\n 13870: s1 = u8 [a3 + 0x1b]\n 13873: a0 = a0 << 0x8\n 13876: a0 = a0 | a1\n 13879: a5 = a5 << 0x10\n 13882: s1 = s1 << 0x18\n 13885: a5 = a5 | s1\n 13888: t0 = a5 | a0\n 13891: a1 = u8 [a3 + 0x1d]\n 13894: a5 = u8 [a3 + 0x1c]\n 13897: s1 = u8 [a3 + 0x1e]\n 13900: a0 = u8 [a3 + 0x1f]\n 13903: a1 = a1 << 0x8\n 13906: a1 = a1 | a5\n 13909: s1 = s1 << 0x10\n 13912: a0 = a0 << 0x18\n 13915: a0 = a0 | s1\n 13918: a0 = a0 | a1\n 13921: a0 = a0 << 0x20\n 13924: a0 = a0 | t0\n 13927: u64 [sp + 0x20] = a0\n 13930: a0 = u8 [a3 + 0x11]\n 13933: a1 = u8 [a3 + 0x10]\n 13936: a5 = u8 [a3 + 0x12]\n 13939: s1 = u8 [a3 + 0x13]\n 13942: a0 = a0 << 0x8\n 13945: a0 = a0 | a1\n 13948: a5 = a5 << 0x10\n 13951: s1 = s1 << 0x18\n 13954: a5 = a5 | s1\n 13957: t0 = a5 | a0\n 13960: a1 = u8 [a3 + 0x15]\n 13963: a5 = u8 [a3 + 0x14]\n 13966: s1 = u8 [a3 + 0x16]\n 13969: a0 = u8 [a3 + 0x17]\n 13972: a1 = a1 << 0x8\n 13975: a1 = a1 | a5\n 13978: s1 = s1 << 0x10\n 13981: a0 = a0 << 0x18\n 13984: a0 = a0 | s1\n 13987: a0 = a0 | a1\n 13990: a0 = a0 << 0x20\n 13993: a0 = a0 | t0\n 13996: u64 [sp + 0x18] = a0\n 13999: a0 = u8 [a3 + 0x9]\n 14002: a1 = u8 [a3 + 0x8]\n 14005: a5 = u8 [a3 + 0xa]\n 14008: s1 = u8 [a3 + 0xb]\n 14011: a0 = a0 << 0x8\n 14014: a0 = a0 | a1\n 14017: a5 = a5 << 0x10\n 14020: s1 = s1 << 0x18\n 14023: a5 = a5 | s1\n 14026: a2 = a5 | a0\n 14029: a1 = u8 [a3 + 0xd]\n 14032: a5 = u8 [a3 + 0xc]\n 14035: s1 = u8 [a3 + 0xe]\n 14038: a0 = u8 [a3 + 0xf]\n 14041: a1 = a1 << 0x8\n 14044: a1 = a1 | a5\n 14047: s1 = s1 << 0x10\n 14050: a0 = a0 << 0x18\n 14053: a0 = a0 | s1\n 14056: a0 = a0 | a1\n 14059: a0 = a0 << 0x20\n 14062: ra = a0 | a2\n 14065: a0 = u8 [a3 + 0x1]\n 14068: a1 = u8 [a3]\n 14070: a2 = u8 [a3 + 0x2]\n 14073: s1 = u8 [a3 + 0x3]\n 14076: a0 = a0 << 0x8\n 14079: a0 = a0 | a1\n 14082: a2 = a2 << 0x10\n 14085: s1 = s1 << 0x18\n 14088: a2 = a2 | s1\n 14091: a0 = a0 | a2\n 14094: a1 = u8 [a3 + 0x5]\n 14097: a2 = u8 [a3 + 0x4]\n 14100: s1 = u8 [a3 + 0x6]\n 14103: a3 = u8 [a3 + 0x7]\n 14106: a1 = a1 << 0x8\n 14109: a1 = a1 | a2\n 14112: s1 = s1 << 0x10\n 14115: a3 = a3 << 0x18\n 14118: a3 = a3 | s1\n 14121: a1 = a1 | a3\n 14124: a1 = a1 << 0x20\n 14127: t2 = a1 | a0\n 14130: a1 = u64 [sp + 0x28]\n 14133: a0 = a1 >> 0x38\n 14136: u8 [sp + 0xe7] = a0\n 14140: a0 = a1 >> 0x30\n 14143: u8 [sp + 0xe6] = a0\n 14147: a0 = a1 >> 0x28\n 14150: u8 [sp + 0xe5] = a0\n 14154: a0 = a1 >> 0x20\n 14157: u8 [sp + 0xe4] = a0\n 14161: a0 = a1 >> 0x18\n 14164: u8 [sp + 0xe3] = a0\n 14168: a0 = a1 >> 0x10\n 14171: u8 [sp + 0xe2] = a0\n 14175: u8 [sp + 0xe0] = a1\n 14179: a0 = a1 >> 0x8\n 14182: u8 [sp + 0xe1] = a0\n 14186: a1 = u64 [sp + 0x30]\n 14189: a0 = a1 >> 0x38\n 14192: u8 [sp + 0xef] = a0\n 14196: a0 = a1 >> 0x30\n 14199: u8 [sp + 0xee] = a0\n 14203: a0 = a1 >> 0x28\n 14206: u8 [sp + 0xed] = a0\n 14210: a0 = a1 >> 0x20\n 14213: u8 [sp + 0xec] = a0\n 14217: a0 = a1 >> 0x18\n 14220: u8 [sp + 0xeb] = a0\n 14224: a0 = a1 >> 0x10\n 14227: u8 [sp + 0xea] = a0\n 14231: u8 [sp + 0xe8] = a1\n 14235: a0 = a1 >> 0x8\n 14238: u8 [sp + 0xe9] = a0\n 14242: a1 = u64 [sp + 0x38]\n 14245: a0 = a1 >> 0x18\n 14248: u8 [sp + 0xf3] = a0\n 14252: a0 = a1 >> 0x10\n 14255: u8 [sp + 0xf2] = a0\n 14259: u8 [sp + 0xf0] = a1\n 14263: a0 = a1 >> 0x8\n 14266: u8 [sp + 0xf1] = a0\n 14270: a0 = sp + 0xe0\n 14274: a4 = a0 - a4\n 14277: u8 [sp + 255] = 0\n 14281: u8 [sp + 254] = 0\n 14285: u8 [sp + 253] = 0\n 14289: u8 [sp + 252] = 0\n 14293: u8 [sp + 251] = 0\n 14297: u8 [sp + 250] = 0\n 14301: u8 [sp + 249] = 0\n 14305: u8 [sp + 248] = 0\n 14309: u8 [sp + 247] = 0\n 14313: u8 [sp + 246] = 0\n 14317: u8 [sp + 245] = 0\n 14321: u8 [sp + 244] = 0\n 14325: u8 [sp + 223] = 0\n 14329: u8 [sp + 222] = 0\n 14333: u8 [sp + 221] = 0\n 14337: u8 [sp + 220] = 0\n 14341: u8 [sp + 219] = 0\n 14345: u8 [sp + 218] = 0\n 14349: u8 [sp + 217] = 0\n 14353: u8 [sp + 216] = 0\n 14357: u8 [sp + 215] = 0\n 14361: u8 [sp + 214] = 0\n 14365: u8 [sp + 213] = 0\n 14369: u8 [sp + 212] = 0\n 14373: u8 [sp + 211] = 0\n 14377: u8 [sp + 210] = 0\n 14381: u8 [sp + 209] = 0\n 14385: u8 [sp + 208] = 0\n 14389: u8 [sp + 207] = 0\n 14393: u8 [sp + 206] = 0\n 14397: u8 [sp + 205] = 0\n 14401: u8 [sp + 204] = 0\n 14405: u8 [sp + 203] = 0\n 14409: u8 [sp + 202] = 0\n 14413: u8 [sp + 201] = 0\n 14417: u8 [sp + 200] = 0\n 14421: u8 [sp + 199] = 0\n 14425: u8 [sp + 198] = 0\n 14429: u8 [sp + 197] = 0\n 14433: u8 [sp + 196] = 0\n 14437: u8 [sp + 195] = 0\n 14441: u8 [sp + 194] = 0\n 14445: u8 [sp + 193] = 0\n 14449: u8 [sp + 192] = 0\n 14453: a0 = u8 [a4 + 0x19]\n 14456: a1 = u8 [a4 + 0x18]\n 14459: a2 = u8 [a4 + 0x1a]\n 14462: s1 = u8 [a4 + 0x1b]\n 14465: a0 = a0 << 0x8\n 14468: a0 = a0 | a1\n 14471: a2 = a2 << 0x10\n 14474: s1 = s1 << 0x18\n 14477: a2 = a2 | s1\n 14480: a3 = a2 | a0\n 14483: a1 = u8 [a4 + 0x1d]\n 14486: a2 = u8 [a4 + 0x1c]\n 14489: s1 = u8 [a4 + 0x1e]\n 14492: a0 = u8 [a4 + 0x1f]\n 14495: a1 = a1 << 0x8\n 14498: a1 = a1 | a2\n 14501: s1 = s1 << 0x10\n 14504: a0 = a0 << 0x18\n 14507: a0 = a0 | s1\n 14510: a0 = a0 | a1\n 14513: a0 = a0 << 0x20\n 14516: s1 = a0 | a3\n 14519: a0 = u8 [a4 + 0x11]\n 14522: a1 = u8 [a4 + 0x10]\n 14525: a2 = u8 [a4 + 0x12]\n 14528: a3 = u8 [a4 + 0x13]\n 14531: a0 = a0 << 0x8\n 14534: a0 = a0 | a1\n 14537: a2 = a2 << 0x10\n 14540: a3 = a3 << 0x18\n 14543: a2 = a2 | a3\n 14546: a5 = a2 | a0\n 14549: a1 = u8 [a4 + 0x15]\n 14552: a2 = u8 [a4 + 0x14]\n 14555: a3 = u8 [a4 + 0x16]\n 14558: a0 = u8 [a4 + 0x17]\n 14561: a1 = a1 << 0x8\n 14564: a1 = a1 | a2\n 14567: a3 = a3 << 0x10\n 14570: a0 = a0 << 0x18\n 14573: a0 = a0 | a3\n 14576: a0 = a0 | a1\n 14579: a0 = a0 << 0x20\n 14582: t0 = a0 | a5\n 14585: a0 = u8 [a4 + 0x9]\n 14588: a2 = u8 [a4 + 0x8]\n 14591: a3 = u8 [a4 + 0xa]\n 14594: a5 = u8 [a4 + 0xb]\n 14597: a0 = a0 << 0x8\n 14600: a0 = a0 | a2\n 14603: a3 = a3 << 0x10\n 14606: a5 = a5 << 0x18\n 14609: a3 = a3 | a5\n 14612: a1 = a3 | a0\n 14615: a2 = u8 [a4 + 0xd]\n 14618: a3 = u8 [a4 + 0xc]\n 14621: a5 = u8 [a4 + 0xe]\n 14624: a0 = u8 [a4 + 0xf]\n 14627: a2 = a2 << 0x8\n 14630: a2 = a2 | a3\n 14633: a5 = a5 << 0x10\n 14636: a0 = a0 << 0x18\n 14639: a0 = a0 | a5\n 14642: a0 = a0 | a2\n 14645: a0 = a0 << 0x20\n 14648: a0 = a0 | a1\n 14651: a1 = u8 [a4 + 0x1]\n 14654: a2 = u8 [a4]\n 14656: a3 = u8 [a4 + 0x2]\n 14659: a5 = u8 [a4 + 0x3]\n 14662: a1 = a1 << 0x8\n 14665: a1 = a1 | a2\n 14668: a3 = a3 << 0x10\n 14671: a5 = a5 << 0x18\n 14674: a3 = a3 | a5\n 14677: a1 = a1 | a3\n 14680: a2 = u8 [a4 + 0x5]\n 14683: a3 = u8 [a4 + 0x4]\n 14686: a5 = u8 [a4 + 0x6]\n 14689: a4 = u8 [a4 + 0x7]\n 14692: a2 = a2 << 0x8\n 14695: a2 = a2 | a3\n 14698: a5 = a5 << 0x10\n 14701: a4 = a4 << 0x18\n 14704: a4 = a4 | a5\n 14707: a2 = a2 | a4\n 14710: a2 = a2 << 0x20\n 14713: a4 = a2 | a1\n 14716: t2 = 0 if t1 != 0\n 14718: ra = 0 if t1 != 0\n 14720: a5 = u64 [sp + 0x18]\n 14723: a5 = 0 if t1 != 0\n 14725: a2 = u64 [sp + 0x20]\n 14728: a2 = 0 if t1 != 0\n 14730: a4 = 0 if t1 != 0\n 14732: a0 = 0 if t1 != 0\n 14734: t0 = 0 if t1 != 0\n 14736: s1 = 0 if t1 != 0\n 14738: a1 = u64 [sp + 0x40]\n 14741: t1 = a1 & ~a2\n 14744: a2 = a2 & s1\n 14747: a1 = u64 [sp + 0x48]\n 14750: a3 = a1 & ~a5\n 14753: a5 = t0 & a5\n 14756: a1 = u64 [sp + 0x50]\n 14759: s1 = a1 & ~ra\n 14762: a0 = a0 & ra\n 14765: a1 = u64 [sp + 0x58]\n 14768: a1 = a1 & ~t2\n 14771: a4 = a4 & t2\n 14774: a1 = a1 | a4\n 14777: a0 = a0 | s1\n 14780: a3 = a3 | a5\n 14783: a2 = t1 | a2\n 14786: a4 = u64 [sp + 0x60]\n 14789: u64 [sp + 0x1f8] = a4\n 14793: a4 = u64 [sp + 0x68]\n 14796: u64 [sp + 0x1f0] = a4\n 14800: a4 = u64 [sp + 0x70]\n 14803: u64 [sp + 0x1e8] = a4\n 14807: a4 = u64 [sp + 0x78]\n 14810: u64 [sp + 0x1e0] = a4\n 14814: u64 [sp + 0x218] = a2\n 14818: u64 [sp + 0x210] = a3\n 14822: u64 [sp + 0x208] = a0\n 14826: u64 [sp + 0x200] = a1\n 14830: i32 a1 = sp + 0x1e0\n 14834: i32 a3 = sp + 0x200\n 14838: a2 = 0xffffffffffffffff\n 14841: a4 = 0x20\n 14844: a0 = 0\n 14846: ecalli 14 // 'set_storage'\n 14848: sp = s0 + 0xfffffffffffffdc0\n 14852: ra = u64 [sp + 0x238]\n 14856: s0 = u64 [sp + 0x230]\n 14860: s1 = u64 [sp + 0x228]\n 14864: sp = sp + 0x240\n 14868: ret\n      : @208 (gas: 8)\n 14870: u64 [sp + 176] = 0\n 14874: u64 [sp + 168] = 0\n 14878: u64 [sp + 160] = 0\n 14882: a0 = 0x4e487b7100000000\n 14892: a1 = sp + 0xa0\n 14896: u64 [sp + 0xb8] = a0\n 14900: a0 = 0\n 14902: ra = 180, jump @8\n      : @209 [@dyn 90] (gas: 7)\n 14908: u64 [sp + 152] = 0\n 14912: u64 [sp + 144] = 0\n 14916: u64 [sp + 128] = 0x41\n 14921: a0 = 0x4\n 14924: a1 = sp + 0x80\n 14928: u64 [sp + 136] = 0\n 14932: ra = 182, jump @8\n      : @210 [@dyn 91] (gas: 3)\n 14938: a1 = 0x24\n 14941: a0 = 0\n 14943: ra = 184, jump @0\n      : @211 [@dyn 92] (gas: 6)\n 14949: i32 a1 = a0 + 0\n 14951: a0 = 0x1\n 14954: a2 = 0x24\n 14957: ra = 0xba\n 14961: ecalli 12 // 'seal_return'\n 14963: fallthrough\n      : @212 [@dyn 93] (gas: 9)\n 14964: sp = sp + 0xfffffffffffffe80\n 14968: u64 [sp + 0x178] = ra\n 14972: u64 [sp + 0x170] = s0\n 14976: u64 [sp + 0x168] = s1\n 14980: s0 = sp + 0x180\n 14984: sp = sp & 0xffffffffffffffe0\n 14987: a0 = 0x40\n 14990: a1 = 0x20\n 14993: ra = 188, jump @0\n      : @213 [@dyn 94] (gas: 97)\n 14999: a1 = u8 [a0 + 0x9]\n 15002: a2 = u8 [a0 + 0x8]\n 15005: a3 = u8 [a0 + 0xa]\n 15008: a4 = u8 [a0 + 0xb]\n 15011: a1 = a1 << 0x8\n 15014: a1 = a1 | a2\n 15017: a3 = a3 << 0x10\n 15020: a4 = a4 << 0x18\n 15023: a3 = a3 | a4\n 15026: a1 = a1 | a3\n 15029: a2 = u8 [a0 + 0xd]\n 15032: a3 = u8 [a0 + 0xc]\n 15035: a4 = u8 [a0 + 0xe]\n 15038: a5 = u8 [a0 + 0xf]\n 15041: a2 = a2 << 0x8\n 15044: a2 = a2 | a3\n 15047: a4 = a4 << 0x10\n 15050: a5 = a5 << 0x18\n 15053: a4 = a4 | a5\n 15056: a2 = a2 | a4\n 15059: a2 = a2 << 0x20\n 15062: t0 = a2 | a1\n 15065: a2 = u8 [a0 + 0x1]\n 15068: a3 = u8 [a0]\n 15070: a4 = u8 [a0 + 0x2]\n 15073: a5 = u8 [a0 + 0x3]\n 15076: a2 = a2 << 0x8\n 15079: a2 = a2 | a3\n 15082: a4 = a4 << 0x10\n 15085: a5 = a5 << 0x18\n 15088: a4 = a4 | a5\n 15091: a2 = a2 | a4\n 15094: a3 = u8 [a0 + 0x5]\n 15097: a4 = u8 [a0 + 0x4]\n 15100: a5 = u8 [a0 + 0x6]\n 15103: s1 = u8 [a0 + 0x7]\n 15106: a3 = a3 << 0x8\n 15109: a3 = a3 | a4\n 15112: a5 = a5 << 0x10\n 15115: s1 = s1 << 0x18\n 15118: a5 = a5 | s1\n 15121: a3 = a3 | a5\n 15124: a3 = a3 << 0x20\n 15127: a2 = a2 | a3\n 15130: a3 = u8 [a0 + 0x19]\n 15133: a4 = u8 [a0 + 0x18]\n 15136: a5 = u8 [a0 + 0x1a]\n 15139: s1 = u8 [a0 + 0x1b]\n 15142: a3 = a3 << 0x8\n 15145: a3 = a3 | a4\n 15148: a5 = a5 << 0x10\n 15151: s1 = s1 << 0x18\n 15154: a5 = a5 | s1\n 15157: a3 = a3 | a5\n 15160: a4 = u8 [a0 + 0x1d]\n 15163: a5 = u8 [a0 + 0x1c]\n 15166: s1 = u8 [a0 + 0x1e]\n 15169: a1 = u8 [a0 + 0x1f]\n 15172: a4 = a4 << 0x8\n 15175: a4 = a4 | a5\n 15178: s1 = s1 << 0x10\n 15181: a1 = a1 << 0x18\n 15184: a1 = a1 | s1\n 15187: a1 = a1 | a4\n 15190: a1 = a1 << 0x20\n 15193: a3 = a3 | a1\n 15196: a1 = u8 [a0 + 0x11]\n 15199: a4 = u8 [a0 + 0x10]\n 15202: a5 = u8 [a0 + 0x12]\n 15205: s1 = u8 [a0 + 0x13]\n 15208: a1 = a1 << 0x8\n 15211: a1 = a1 | a4\n 15214: a5 = a5 << 0x10\n 15217: s1 = s1 << 0x18\n 15220: a5 = a5 | s1\n 15223: a1 = a1 | a5\n 15226: a4 = u8 [a0 + 0x15]\n 15229: a5 = u8 [a0 + 0x14]\n 15232: s1 = u8 [a0 + 0x16]\n 15235: a0 = u8 [a0 + 0x17]\n 15238: a4 = a4 << 0x8\n 15241: a4 = a4 | a5\n 15244: s1 = s1 << 0x10\n 15247: a0 = a0 << 0x18\n 15250: a0 = a0 | s1\n 15253: a0 = a0 | a4\n 15256: a0 = a0 << 0x20\n 15259: a0 = a0 | a1\n 15262: a0 = reverse a0\n 15264: s1 = reverse a3\n 15266: a2 = reverse a2\n 15268: a1 = reverse t0\n 15270: a3 = a1 | a2\n 15273: a4 = s1 <u 0xffffffffffffffe0\n 15276: a4 = 0 if a0 != 0\n 15278: a4 = 0 if a3 != 0\n 15280: jump @226 if a4 == 0\n      : @214 (gas: 8)\n 15284: a3 = s1 | a1\n 15287: a0 = a0 | a2\n 15290: a3 = a3 | a0\n 15293: a3 = a3 >> 0x20\n 15296: a0 = a0 | a1\n 15299: a0 = a0 << 0x20\n 15302: a0 = a0 | a3\n 15305: jump @224 if a0 != 0\n      : @215 (gas: 4)\n 15309: i32 s1 = s1 + 0\n 15311: a1 = 0x20\n 15314: a0 = s1\n 15316: ra = 190, jump @0\n      : @216 [@dyn 95] (gas: 35)\n 15322: u8 [a0 + 31] = 0x9f\n 15327: u8 [a0 + 30] = 0x26\n 15331: u8 [a0 + 29] = 0xd1\n 15336: u8 [a0 + 28] = 0xfa\n 15341: u8 [a0 + 27] = 0xa\n 15345: u8 [a0 + 26] = 0xda\n 15350: u8 [a0 + 25] = 0xdc\n 15355: u8 [a0 + 24] = 0x46\n 15359: u8 [a0 + 23] = 0x71\n 15363: u8 [a0 + 22] = 0x12\n 15367: u8 [a0 + 21] = 0x34\n 15371: u8 [a0 + 20] = 0xdd\n 15376: u8 [a0 + 19] = 0xcd\n 15381: u8 [a0 + 18] = 0xc8\n 15386: u8 [a0 + 17] = 0xd6\n 15391: u8 [a0 + 16] = 0xa6\n 15396: u8 [a0 + 15] = 0xc9\n 15401: u8 [a0 + 14] = 0x3e\n 15405: u8 [a0 + 13] = 0x6f\n 15409: u8 [a0 + 12] = 0x6\n 15413: u8 [a0 + 11] = 0xf5\n 15418: u8 [a0 + 10] = 0xda\n 15423: u8 [a0 + 9] = 0xf\n 15427: u8 [a0 + 8] = 0xed\n 15432: u8 [a0 + 7] = 0x87\n 15437: u8 [a0 + 6] = 0x1d\n 15441: u8 [a0 + 5] = 0xbd\n 15446: u8 [a0 + 4] = 0x2b\n 15450: u8 [a0 + 3] = 0x74\n 15454: u8 [a0 + 2] = 0x22\n 15458: u8 [a0 + 1] = 0xd2\n 15463: u8 [a0 + 0] = 0x76\n 15466: a1 = 0x20\n 15469: a0 = s1\n 15471: ra = 192, jump @0\n      : @217 [@dyn 96] (gas: 31)\n 15477: u64 [sp + 216] = 0\n 15481: u64 [sp + 208] = 0\n 15485: u64 [sp + 200] = 0\n 15489: u64 [sp + 192] = 0\n 15493: u64 [sp + 248] = 0\n 15497: u64 [sp + 240] = 0\n 15501: u64 [sp + 232] = 0\n 15505: u64 [sp + 224] = 0\n 15509: u64 [sp + 280] = 0xffffffffffffffff\n 15514: u64 [sp + 272] = 0xffffffffffffffff\n 15519: u64 [sp + 264] = 0xffffffffffffffff\n 15524: u64 [sp + 256] = 0xffffffffffffffff\n 15529: a2 = sp + 0xc0\n 15533: a2 = a2 << 0x20\n 15536: a2 = a2 >> 0x20\n 15539: a3 = sp + 0x100\n 15543: a3 = a3 << 0x20\n 15546: a2 = a2 | a3\n 15549: a0 = a0 << 0x20\n 15552: a0 = a0 >> 0x20\n 15555: a3 = 0x2000000000\n 15565: a3 = a3 | a0\n 15568: a0 = sp + 0xe0\n 15572: a0 = a0 << 0x20\n 15575: a1 = 0xffffffff\n 15585: a5 = a0 | a1\n 15588: a0 = 0xffffffffffffffff\n 15591: a1 = 0xffffffffffffffff\n 15594: a4 = 0xffffffffffffffff\n 15597: ecalli 8 // 'instantiate'\n 15599: fallthrough\n      : @218 (gas: 6)\n 15600: a1 = u32 [sp + 0xf0]\n 15604: a0 = u64 [sp + 0xe0]\n 15608: a2 = u64 [sp + 0xe8]\n 15612: a3 = a0 | a1\n 15615: a3 = a3 | a2\n 15618: jump @225 if a3 == 0\n      : @219 (gas: 32)\n 15622: a2 = reverse a2\n 15624: a3 = a2 << 0x20\n 15627: a1 = reverse a1\n 15629: a1 = a1 >> 0x20\n 15632: a1 = a1 | a3\n 15635: u64 [sp + 0x38] = a1\n 15638: a0 = reverse a0\n 15640: a1 = a0 << 0x20\n 15643: a2 = a2 >> 0x20\n 15646: a1 = a1 | a2\n 15649: u64 [sp + 0x30] = a1\n 15652: a0 = a0 >> 0x20\n 15655: u64 [sp + 0x28] = a0\n 15658: i32 a0 = sp + 0x120\n 15662: ecalli 4 // 'caller'\n 15664: a0 = u64 [sp + 0x128]\n 15668: a1 = i32 [sp + 0x130]\n 15672: s1 = u64 [sp + 0x120]\n 15676: a0 = reverse a0\n 15678: a2 = a0 << 0x20\n 15681: a1 = reverse a1\n 15683: a1 = a1 >> 0x20\n 15686: a1 = a1 | a2\n 15689: u64 [sp + 0x20] = a1\n 15692: a0 = a0 >> 0x20\n 15695: a1 = reverse s1\n 15697: a1 = a1 << 0x20\n 15700: a0 = a0 | a1\n 15703: u64 [sp + 0x18] = a0\n 15706: a1 = 0x20\n 15709: a0 = 0\n 15711: ra = 194, jump @0\n      : @220 [@dyn 97] (gas: 56)\n 15717: a1 = u64 [sp + 0x18]\n 15720: a1 = reverse a1\n 15722: a2 = u64 [sp + 0x20]\n 15725: a2 = reverse a2\n 15727: a3 = s1 >> 0x18\n 15730: u8 [a0 + 0xf] = a3\n 15733: a3 = s1 >> 0x10\n 15736: u8 [a0 + 0xe] = a3\n 15739: a3 = s1 >> 0x8\n 15742: u8 [a0 + 0xd] = a3\n 15745: u8 [a0 + 0xc] = s1\n 15748: u8 [a0 + 11] = 0\n 15751: u8 [a0 + 10] = 0\n 15754: u8 [a0 + 9] = 0\n 15757: u8 [a0 + 8] = 0\n 15760: u8 [a0 + 7] = 0\n 15763: u8 [a0 + 6] = 0\n 15766: u8 [a0 + 5] = 0\n 15769: u8 [a0 + 4] = 0\n 15772: u8 [a0 + 3] = 0\n 15775: u8 [a0 + 2] = 0\n 15778: u8 [a0 + 1] = 0\n 15781: u8 [a0 + 0] = 0\n 15783: u8 [a0 + 0x18] = a2\n 15786: u8 [a0 + 0x10] = a1\n 15789: a3 = a2 >> 0x38\n 15792: u8 [a0 + 0x1f] = a3\n 15795: a3 = a2 >> 0x30\n 15798: u8 [a0 + 0x1e] = a3\n 15801: a3 = a2 >> 0x28\n 15804: u8 [a0 + 0x1d] = a3\n 15807: a3 = a2 >> 0x20\n 15810: u8 [a0 + 0x1c] = a3\n 15813: a3 = a2 >> 0x18\n 15816: u8 [a0 + 0x1b] = a3\n 15819: a3 = a2 >> 0x10\n 15822: u8 [a0 + 0x1a] = a3\n 15825: a2 = a2 >> 0x8\n 15828: u8 [a0 + 0x19] = a2\n 15831: a2 = a1 >> 0x38\n 15834: u8 [a0 + 0x17] = a2\n 15837: a2 = a1 >> 0x30\n 15840: u8 [a0 + 0x16] = a2\n 15843: a2 = a1 >> 0x28\n 15846: u8 [a0 + 0x15] = a2\n 15849: a2 = a1 >> 0x20\n 15852: u8 [a0 + 0x14] = a2\n 15855: a2 = a1 >> 0x18\n 15858: u8 [a0 + 0x13] = a2\n 15861: a2 = a1 >> 0x10\n 15864: u8 [a0 + 0x12] = a2\n 15867: a1 = a1 >> 0x8\n 15870: u8 [a0 + 0x11] = a1\n 15873: a0 = 0x20\n 15876: a1 = 0x20\n 15879: ra = 196, jump @0\n      : @221 [@dyn 98] (gas: 35)\n 15885: u8 [a0 + 31] = 0x1\n 15889: u8 [a0 + 30] = 0\n 15892: u8 [a0 + 29] = 0\n 15895: u8 [a0 + 28] = 0\n 15898: u8 [a0 + 27] = 0\n 15901: u8 [a0 + 26] = 0\n 15904: u8 [a0 + 25] = 0\n 15907: u8 [a0 + 24] = 0\n 15910: u8 [a0 + 23] = 0\n 15913: u8 [a0 + 22] = 0\n 15916: u8 [a0 + 21] = 0\n 15919: u8 [a0 + 20] = 0\n 15922: u8 [a0 + 19] = 0\n 15925: u8 [a0 + 18] = 0\n 15928: u8 [a0 + 17] = 0\n 15931: u8 [a0 + 16] = 0\n 15934: u8 [a0 + 15] = 0\n 15937: u8 [a0 + 14] = 0\n 15940: u8 [a0 + 13] = 0\n 15943: u8 [a0 + 12] = 0\n 15946: u8 [a0 + 11] = 0\n 15949: u8 [a0 + 10] = 0\n 15952: u8 [a0 + 9] = 0\n 15955: u8 [a0 + 8] = 0\n 15958: u8 [a0 + 7] = 0\n 15961: u8 [a0 + 6] = 0\n 15964: u8 [a0 + 5] = 0\n 15967: u8 [a0 + 4] = 0\n 15970: u8 [a0 + 3] = 0\n 15973: u8 [a0 + 2] = 0\n 15976: u8 [a0 + 1] = 0\n 15979: u8 [a0 + 0] = 0\n 15981: a1 = 0x40\n 15984: a0 = 0\n 15986: ra = 198, jump @0\n      : @222 [@dyn 99] (gas: 62)\n 15992: i32 a0 = a0 + 0\n 15994: i32 a2 = sp + 0x140\n 15998: a1 = 0x40\n 16001: ecalli 7 // 'hash_keccak_256'\n 16003: a0 = u64 [sp + 0x158]\n 16007: a1 = u64 [sp + 0x150]\n 16011: a2 = u64 [sp + 0x148]\n 16015: a3 = u64 [sp + 0x140]\n 16019: a4 = reverse a0\n 16021: a0 = reverse a1\n 16023: a1 = reverse a2\n 16025: a2 = reverse a3\n 16027: u64 [sp + 152] = 0\n 16031: a3 = u64 [sp + 0x28]\n 16034: u64 [sp + 0x90] = a3\n 16038: a3 = u64 [sp + 0x30]\n 16041: u64 [sp + 0x88] = a3\n 16045: a3 = u64 [sp + 0x38]\n 16048: u64 [sp + 0x80] = a3\n 16052: u64 [sp + 0xb8] = a2\n 16056: u64 [sp + 0xb0] = a1\n 16060: u64 [sp + 0xa8] = a0\n 16064: a0 = sp + 0xa0\n 16068: a1 = sp + 0x80\n 16072: u64 [sp + 0xa0] = a4\n 16076: ra = 0xc8\n 16080: sp = sp + 0xfffffffffffffdc0\n 16084: u64 [sp + 0x238] = ra\n 16088: u64 [sp + 0x230] = s0\n 16092: u64 [sp + 0x228] = s1\n 16096: s0 = sp + 0x240\n 16100: sp = sp & 0xffffffffffffffe0\n 16103: a2 = u64 [a1 + 0x10]\n 16106: u64 [sp + 0x38] = a2\n 16109: a2 = u64 [a1 + 0x8]\n 16112: u64 [sp + 0x30] = a2\n 16115: a1 = u64 [a1]\n 16117: u64 [sp + 0x28] = a1\n 16120: a3 = u64 [a0 + 0x18]\n 16123: a2 = u64 [a0 + 0x10]\n 16126: a1 = u64 [a0 + 0x8]\n 16129: a0 = u64 [a0]\n 16131: u64 [sp + 0x60] = a3\n 16134: u64 [sp + 0x1f8] = a3\n 16138: u64 [sp + 0x68] = a2\n 16141: u64 [sp + 0x1f0] = a2\n 16145: u64 [sp + 0x70] = a1\n 16148: u64 [sp + 0x1e8] = a1\n 16152: u64 [sp + 0x78] = a0\n 16155: u64 [sp + 0x1e0] = a0\n 16159: u64 [sp + 536] = 0\n 16163: u64 [sp + 528] = 0\n 16167: u64 [sp + 520] = 0\n 16171: u64 [sp + 512] = 0\n 16175: u32 [sp + 448] = 0x20\n 16180: i32 a1 = sp + 0x1e0\n 16184: i32 a3 = sp + 0x200\n 16188: i32 a4 = sp + 0x1c0\n 16192: a2 = 0xffffffffffffffff\n 16195: a0 = 0\n 16197: ecalli 6 // 'get_storage'\n 16199: jump @205\n      : @223 [@dyn 100] (gas: 6)\n 16202: sp = s0 + 0xfffffffffffffe80\n 16206: ra = u64 [sp + 0x178]\n 16210: s0 = u64 [sp + 0x170]\n 16214: s1 = u64 [sp + 0x168]\n 16218: sp = sp + 0x180\n 16222: ret\n      : @224 (gas: 1)\n 16224: trap\n      : @225 (gas: 1)\n 16225: ra = 202, jump @192\n      : @226 [@dyn 101] (gas: 8)\n 16231: u64 [sp + 112] = 0\n 16234: u64 [sp + 104] = 0\n 16237: u64 [sp + 96] = 0\n 16240: a0 = 0x4e487b7100000000\n 16250: a1 = sp + 0x60\n 16253: u64 [sp + 0x78] = a0\n 16256: a0 = 0\n 16258: ra = 204, jump @8\n      : @227 [@dyn 102] (gas: 7)\n 16264: u64 [sp + 88] = 0\n 16267: u64 [sp + 80] = 0\n 16270: u64 [sp + 64] = 0x41\n 16274: a0 = 0x4\n 16277: a1 = sp + 0x40\n 16280: u64 [sp + 72] = 0\n 16283: ra = 206, jump @8\n      : @228 [@dyn 103] (gas: 3)\n 16289: a1 = 0x24\n 16292: a0 = 0\n 16294: ra = 208, jump @0\n      : @229 [@dyn 104] (gas: 6)\n 16300: i32 a1 = a0 + 0\n 16302: a0 = 0x1\n 16305: a2 = 0x24\n 16308: ra = 0xd2\n 16312: ecalli 12 // 'seal_return'\n 16314: fallthrough\n      : @230 [@dyn 105] (gas: 20)\n 16315: sp = sp + 0xffffffffffffffb0\n 16318: u64 [sp + 0x48] = ra\n 16321: u64 [sp + 0x40] = s0\n 16324: u64 [sp + 0x38] = s1\n 16327: a4 = u64 [a1 + 0x10]\n 16330: a3 = u64 [a1 + 0x18]\n 16333: a5 = u64 [a1 + 0x8]\n 16336: s0 = u64 [a1]\n 16338: u64 [sp + 0x28] = a3\n 16341: u64 [sp + 0x20] = a5\n 16344: a1 = a5 | a3\n 16347: a3 = s0 | a4\n 16350: a3 = a3 | a1\n 16353: a3 = a3 >> 0x20\n 16356: u64 [sp + 0x30] = a4\n 16359: a1 = a1 | a4\n 16362: a1 = a1 << 0x20\n 16365: a1 = a1 | a3\n 16368: u64 [sp + 0x18] = a0\n 16371: jump @233 if a1 != 0\n      : @231 (gas: 10)\n 16375: a0 = u64 [a2 + 0x18]\n 16378: u64 [sp] = a0\n 16380: s1 = u64 [a2 + 0x10]\n 16383: a0 = u64 [a2 + 0x8]\n 16386: u64 [sp + 0x8] = a0\n 16389: a0 = u64 [a2]\n 16391: u64 [sp + 0x10] = a0\n 16394: i32 a0 = s0 + 0\n 16396: a1 = 0x20\n 16399: ra = 212, jump @0\n      : @232 [@dyn 106] (gas: 88)\n 16405: a1 = u64 [sp]\n 16407: a1 = reverse a1\n 16409: a2 = reverse s1\n 16411: a3 = u64 [sp + 0x8]\n 16414: a3 = reverse a3\n 16416: a4 = u64 [sp + 0x10]\n 16419: a4 = reverse a4\n 16421: a5 = a4 >> 0x38\n 16424: u8 [a0 + 0x1f] = a5\n 16427: a5 = a4 >> 0x30\n 16430: u8 [a0 + 0x1e] = a5\n 16433: a5 = a4 >> 0x28\n 16436: u8 [a0 + 0x1d] = a5\n 16439: a5 = a4 >> 0x20\n 16442: u8 [a0 + 0x1c] = a5\n 16445: a5 = a4 >> 0x18\n 16448: u8 [a0 + 0x1b] = a5\n 16451: a5 = a4 >> 0x10\n 16454: u8 [a0 + 0x1a] = a5\n 16457: a5 = a4 >> 0x8\n 16460: u8 [a0 + 0x19] = a5\n 16463: u8 [a0 + 0x18] = a4\n 16466: u8 [a0 + 0x10] = a3\n 16469: a4 = a3 >> 0x38\n 16472: u8 [a0 + 0x17] = a4\n 16475: a4 = a3 >> 0x30\n 16478: u8 [a0 + 0x16] = a4\n 16481: a4 = a3 >> 0x28\n 16484: u8 [a0 + 0x15] = a4\n 16487: a4 = a3 >> 0x20\n 16490: u8 [a0 + 0x14] = a4\n 16493: a4 = a3 >> 0x18\n 16496: u8 [a0 + 0x13] = a4\n 16499: a4 = a3 >> 0x10\n 16502: u8 [a0 + 0x12] = a4\n 16505: a3 = a3 >> 0x8\n 16508: u8 [a0 + 0x11] = a3\n 16511: u8 [a0 + 0x8] = a2\n 16514: a3 = a2 >> 0x38\n 16517: u8 [a0 + 0xf] = a3\n 16520: a3 = a2 >> 0x30\n 16523: u8 [a0 + 0xe] = a3\n 16526: a3 = a2 >> 0x28\n 16529: u8 [a0 + 0xd] = a3\n 16532: a3 = a2 >> 0x20\n 16535: u8 [a0 + 0xc] = a3\n 16538: a3 = a2 >> 0x18\n 16541: u8 [a0 + 0xb] = a3\n 16544: a3 = a2 >> 0x10\n 16547: u8 [a0 + 0xa] = a3\n 16550: a2 = a2 >> 0x8\n 16553: u8 [a0 + 0x9] = a2\n 16556: u8 [a0] = a1\n 16558: a2 = a1 >> 0x38\n 16561: u8 [a0 + 0x7] = a2\n 16564: a2 = a1 >> 0x30\n 16567: u8 [a0 + 0x6] = a2\n 16570: a2 = a1 >> 0x28\n 16573: u8 [a0 + 0x5] = a2\n 16576: a2 = a1 >> 0x20\n 16579: u8 [a0 + 0x4] = a2\n 16582: a2 = a1 >> 0x18\n 16585: u8 [a0 + 0x3] = a2\n 16588: a2 = a1 >> 0x10\n 16591: u8 [a0 + 0x2] = a2\n 16594: a1 = a1 >> 0x8\n 16597: u8 [a0 + 0x1] = a1\n 16600: a0 = s0 + 0x20\n 16603: a1 = a0 <u s0\n 16606: a3 = u64 [sp + 0x20]\n 16609: a2 = a3 + a1\n 16612: a3 = a2 <u a3\n 16615: a3 = a1 if a1 == 0\n 16618: a1 = u64 [sp + 0x30]\n 16621: a3 = a3 + a1\n 16624: a1 = a3 <u a1\n 16627: a4 = u64 [sp + 0x28]\n 16630: a1 = a1 + a4\n 16633: a4 = u64 [sp + 0x18]\n 16636: u64 [a4] = a0\n 16638: u64 [a4 + 0x8] = a2\n 16641: u64 [a4 + 0x10] = a3\n 16644: u64 [a4 + 0x18] = a1\n 16647: ra = u64 [sp + 0x48]\n 16650: s0 = u64 [sp + 0x40]\n 16653: s1 = u64 [sp + 0x38]\n 16656: sp = sp + 0x50\n 16659: ret\n      : @233 (gas: 1)\n 16661: trap\n      : @234 (gas: 17)\n 16662: sp = sp + 0xffffffffffffffa0\n 16665: u64 [sp + 0x58] = ra\n 16668: u64 [sp + 0x50] = s0\n 16671: u64 [sp + 0x48] = s1\n 16674: a3 = u64 [a1 + 0x18]\n 16677: a4 = u64 [a1 + 0x10]\n 16680: a5 = u64 [a1 + 0x8]\n 16683: s1 = u64 [a1]\n 16685: a1 = a5 | a3\n 16688: a2 = s1 | a4\n 16691: a2 = a2 | a1\n 16694: a2 = a2 >> 0x20\n 16697: a1 = a1 | a4\n 16700: a1 = a1 << 0x20\n 16703: a1 = a1 | a2\n 16706: u64 [sp + 0x28] = a0\n 16709: jump @241 if a1 != 0\n      : @235 (gas: 19)\n 16713: a0 = s1 + 0x20\n 16716: u64 [sp + 0x30] = a0\n 16719: a0 = a0 <u s1\n 16722: a1 = a5 + a0\n 16725: u64 [sp + 0x40] = a1\n 16728: u64 [sp + 0x8] = a5\n 16731: s0 = a1 <u a5\n 16734: s0 = a0 if a0 == 0\n 16737: s0 = s0 + a4\n 16740: u64 [sp + 0x10] = a4\n 16743: a0 = s0 <u a4\n 16746: u64 [sp + 0x18] = a3\n 16749: a0 = a0 + a3\n 16752: u64 [sp + 0x38] = a0\n 16755: u64 [sp] = s1\n 16757: i32 a0 = s1 + 0\n 16759: a1 = 0x20\n 16762: s1 = 0x20\n 16765: ra = 214, jump @0\n      : @236 [@dyn 107] (gas: 45)\n 16771: u8 [a0 + 0x1f] = s1\n 16774: a1 = u64 [sp + 0x30]\n 16777: s1 = a1\n 16779: a1 = a1 | s0\n 16782: a2 = u64 [sp + 0x40]\n 16785: a4 = u64 [sp + 0x38]\n 16788: a2 = a2 | a4\n 16791: a1 = a1 | a2\n 16794: a1 = a1 >> 0x20\n 16797: u64 [sp + 0x20] = s0\n 16800: a2 = a2 | s0\n 16803: a2 = a2 << 0x20\n 16806: a1 = a1 | a2\n 16809: u8 [a0 + 30] = 0\n 16812: u8 [a0 + 29] = 0\n 16815: u8 [a0 + 28] = 0\n 16818: u8 [a0 + 27] = 0\n 16821: u8 [a0 + 26] = 0\n 16824: u8 [a0 + 25] = 0\n 16827: u8 [a0 + 24] = 0\n 16830: u8 [a0 + 23] = 0\n 16833: u8 [a0 + 22] = 0\n 16836: u8 [a0 + 21] = 0\n 16839: u8 [a0 + 20] = 0\n 16842: u8 [a0 + 19] = 0\n 16845: u8 [a0 + 18] = 0\n 16848: u8 [a0 + 17] = 0\n 16851: u8 [a0 + 16] = 0\n 16854: u8 [a0 + 15] = 0\n 16857: u8 [a0 + 14] = 0\n 16860: u8 [a0 + 13] = 0\n 16863: u8 [a0 + 12] = 0\n 16866: u8 [a0 + 11] = 0\n 16869: u8 [a0 + 10] = 0\n 16872: u8 [a0 + 9] = 0\n 16875: u8 [a0 + 8] = 0\n 16878: u8 [a0 + 7] = 0\n 16881: u8 [a0 + 6] = 0\n 16884: u8 [a0 + 5] = 0\n 16887: u8 [a0 + 4] = 0\n 16890: u8 [a0 + 3] = 0\n 16893: u8 [a0 + 2] = 0\n 16896: u8 [a0 + 1] = 0\n 16899: u8 [a0 + 0] = 0\n 16901: jump @241 if a1 != 0\n      : @237 (gas: 4)\n 16905: i32 s0 = s1 + 0\n 16907: a1 = 0x20\n 16910: a0 = s0\n 16912: ra = 216, jump @0\n      : @238 [@dyn 108] (gas: 41)\n 16918: u8 [a0 + 31] = 0x11\n 16922: u8 [a0 + 30] = 0\n 16925: u8 [a0 + 29] = 0\n 16928: u8 [a0 + 28] = 0\n 16931: u8 [a0 + 27] = 0\n 16934: u8 [a0 + 26] = 0\n 16937: u8 [a0 + 25] = 0\n 16940: u8 [a0 + 24] = 0\n 16943: u8 [a0 + 23] = 0\n 16946: u8 [a0 + 22] = 0\n 16949: u8 [a0 + 21] = 0\n 16952: u8 [a0 + 20] = 0\n 16955: u8 [a0 + 19] = 0\n 16958: u8 [a0 + 18] = 0\n 16961: u8 [a0 + 17] = 0\n 16964: u8 [a0 + 16] = 0\n 16967: u8 [a0 + 15] = 0\n 16970: u8 [a0 + 14] = 0\n 16973: u8 [a0 + 13] = 0\n 16976: u8 [a0 + 12] = 0\n 16979: u8 [a0 + 11] = 0\n 16982: u8 [a0 + 10] = 0\n 16985: u8 [a0 + 9] = 0\n 16988: u8 [a0 + 8] = 0\n 16991: u8 [a0 + 7] = 0\n 16994: u8 [a0 + 6] = 0\n 16997: u8 [a0 + 5] = 0\n 17000: u8 [a0 + 4] = 0\n 17003: u8 [a0 + 3] = 0\n 17006: u8 [a0 + 2] = 0\n 17009: u8 [a0 + 1] = 0\n 17012: a1 = u64 [sp + 0x20]\n 17015: a2 = u64 [sp + 0x38]\n 17018: a1 = a1 | a2\n 17021: a2 = 0xffffffe0\n 17031: a2 = s1 <u a2\n 17034: a3 = u64 [sp + 0x40]\n 17037: a2 = 0 if a3 != 0\n 17039: a2 = 0 if a1 != 0\n 17041: u8 [a0 + 0] = 0\n 17043: jump @241 if a2 == 0\n      : @239 (gas: 3)\n 17047: i32 a0 = s0 + 0x20\n 17050: a1 = 0x20\n 17053: ra = 218, jump @0\n      : @240 [@dyn 109] (gas: 55)\n 17059: u8 [a0 + 31] = 0\n 17062: u8 [a0 + 30] = 0\n 17065: u8 [a0 + 29] = 0\n 17068: u8 [a0 + 28] = 0\n 17071: u8 [a0 + 27] = 0\n 17074: u8 [a0 + 26] = 0\n 17077: u8 [a0 + 25] = 0\n 17080: u8 [a0 + 24] = 0\n 17083: u8 [a0 + 23] = 0\n 17086: u8 [a0 + 22] = 0\n 17089: u8 [a0 + 21] = 0\n 17092: u8 [a0 + 20] = 0\n 17095: u8 [a0 + 19] = 0\n 17098: u8 [a0 + 18] = 0\n 17101: u8 [a0 + 17] = 0\n 17104: u8 [a0 + 16] = 0x78\n 17108: u8 [a0 + 15] = 0x65\n 17112: u8 [a0 + 14] = 0x64\n 17116: u8 [a0 + 13] = 0x6e\n 17120: u8 [a0 + 12] = 0x69\n 17124: a5 = 0x20\n 17127: u8 [a0 + 0xb] = a5\n 17130: u8 [a0 + 10] = 0x78\n 17134: u8 [a0 + 9] = 0x6f\n 17138: u8 [a0 + 8] = 0x62\n 17142: u8 [a0 + 0x7] = a5\n 17145: u8 [a0 + 6] = 0x64\n 17149: u8 [a0 + 5] = 0x69\n 17153: u8 [a0 + 4] = 0x6c\n 17157: u8 [a0 + 3] = 0x61\n 17161: u8 [a0 + 2] = 0x76\n 17165: u8 [a0 + 1] = 0x6e\n 17169: u8 [a0 + 0] = 0x49\n 17172: a1 = u64 [sp]\n 17174: a0 = a1 + 0x60\n 17177: a1 = a0 <u a1\n 17180: a3 = u64 [sp + 0x8]\n 17183: a2 = a3 + a1\n 17186: a3 = a2 <u a3\n 17189: a3 = a1 if a1 == 0\n 17192: a1 = u64 [sp + 0x10]\n 17195: a3 = a3 + a1\n 17198: a1 = a3 <u a1\n 17201: a4 = u64 [sp + 0x18]\n 17204: a1 = a1 + a4\n 17207: a4 = u64 [sp + 0x28]\n 17210: u64 [a4] = a0\n 17212: u64 [a4 + 0x8] = a2\n 17215: u64 [a4 + 0x10] = a3\n 17218: u64 [a4 + 0x18] = a1\n 17221: ra = u64 [sp + 0x58]\n 17224: s0 = u64 [sp + 0x50]\n 17227: s1 = u64 [sp + 0x48]\n 17230: sp = sp + 0x60\n 17233: ret\n      : @241 (gas: 1)\n 17235: trap\n      : @242 [@dyn 110] (gas: 6)\n 17236: i32 a1 = a0 + 0\n 17238: a0 = 0x1\n 17241: a2 = 0\n 17243: ra = 0xde\n 17247: ecalli 12 // 'seal_return'\n 17249: fallthrough\n      : @243 [@dyn 111] (gas: 18)\n 17250: a2 = u64 [a1]\n 17252: t0 = u64 [a1 + 0x18]\n 17255: a4 = u64 [a1 + 0x8]\n 17258: a1 = u64 [a1 + 0x10]\n 17261: a5 = a2 + 0x1f\n 17264: a2 = a5 <u a2\n 17267: a3 = a4 + a2\n 17270: a4 = a3 <u a4\n 17273: a4 = a2 if a2 == 0\n 17276: a4 = a4 + a1\n 17279: a1 = a4 <u a1\n 17282: a1 = a1 + t0\n 17285: a5 = a5 & 0xffffffffffffffe0\n 17288: u64 [a0] = a5\n 17290: u64 [a0 + 0x8] = a3\n 17293: u64 [a0 + 0x10] = a4\n 17296: u64 [a0 + 0x18] = a1\n 17299: ret\n      : @244 [@dyn 112] (gas: 57)\n 17301: a1 = u64 [s1 + 0x68]\n 17304: a1 = reverse a1\n 17306: a2 = u64 [s1 + 0x78]\n 17309: a2 = reverse a2\n 17311: a4 = u64 [s1 + 0x70]\n 17314: a3 = a4 >> 0x18\n 17317: u8 [a0 + 0xf] = a3\n 17320: a3 = a4 >> 0x10\n 17323: u8 [a0 + 0xe] = a3\n 17326: a3 = a4 >> 0x8\n 17329: u8 [a0 + 0xd] = a3\n 17332: u8 [a0 + 0xc] = a4\n 17335: u8 [a0 + 11] = 0\n 17338: u8 [a0 + 10] = 0\n 17341: u8 [a0 + 9] = 0\n 17344: u8 [a0 + 8] = 0\n 17347: u8 [a0 + 7] = 0\n 17350: u8 [a0 + 6] = 0\n 17353: u8 [a0 + 5] = 0\n 17356: u8 [a0 + 4] = 0\n 17359: u8 [a0 + 3] = 0\n 17362: u8 [a0 + 2] = 0\n 17365: u8 [a0 + 1] = 0\n 17368: u8 [a0 + 0] = 0\n 17370: u8 [a0 + 0x18] = a2\n 17373: u8 [a0 + 0x10] = a1\n 17376: a3 = a2 >> 0x38\n 17379: u8 [a0 + 0x1f] = a3\n 17382: a3 = a2 >> 0x30\n 17385: u8 [a0 + 0x1e] = a3\n 17388: a3 = a2 >> 0x28\n 17391: u8 [a0 + 0x1d] = a3\n 17394: a3 = a2 >> 0x20\n 17397: u8 [a0 + 0x1c] = a3\n 17400: a3 = a2 >> 0x18\n 17403: u8 [a0 + 0x1b] = a3\n 17406: a3 = a2 >> 0x10\n 17409: u8 [a0 + 0x1a] = a3\n 17412: a2 = a2 >> 0x8\n 17415: u8 [a0 + 0x19] = a2\n 17418: a2 = a1 >> 0x38\n 17421: u8 [a0 + 0x17] = a2\n 17424: a2 = a1 >> 0x30\n 17427: u8 [a0 + 0x16] = a2\n 17430: a2 = a1 >> 0x28\n 17433: u8 [a0 + 0x15] = a2\n 17436: a2 = a1 >> 0x20\n 17439: u8 [a0 + 0x14] = a2\n 17442: a2 = a1 >> 0x18\n 17445: u8 [a0 + 0x13] = a2\n 17448: a2 = a1 >> 0x10\n 17451: u8 [a0 + 0x12] = a2\n 17454: a1 = a1 >> 0x8\n 17457: u8 [a0 + 0x11] = a1\n 17460: a0 = 0x20\n 17463: a1 = 0x20\n 17466: ra = 226, jump @0\n      : @245 [@dyn 113] (gas: 35)\n 17472: u8 [a0 + 31] = 0x1\n 17476: u8 [a0 + 30] = 0\n 17479: u8 [a0 + 29] = 0\n 17482: u8 [a0 + 28] = 0\n 17485: u8 [a0 + 27] = 0\n 17488: u8 [a0 + 26] = 0\n 17491: u8 [a0 + 25] = 0\n 17494: u8 [a0 + 24] = 0\n 17497: u8 [a0 + 23] = 0\n 17500: u8 [a0 + 22] = 0\n 17503: u8 [a0 + 21] = 0\n 17506: u8 [a0 + 20] = 0\n 17509: u8 [a0 + 19] = 0\n 17512: u8 [a0 + 18] = 0\n 17515: u8 [a0 + 17] = 0\n 17518: u8 [a0 + 16] = 0\n 17521: u8 [a0 + 15] = 0\n 17524: u8 [a0 + 14] = 0\n 17527: u8 [a0 + 13] = 0\n 17530: u8 [a0 + 12] = 0\n 17533: u8 [a0 + 11] = 0\n 17536: u8 [a0 + 10] = 0\n 17539: u8 [a0 + 9] = 0\n 17542: u8 [a0 + 8] = 0\n 17545: u8 [a0 + 7] = 0\n 17548: u8 [a0 + 6] = 0\n 17551: u8 [a0 + 5] = 0\n 17554: u8 [a0 + 4] = 0\n 17557: u8 [a0 + 3] = 0\n 17560: u8 [a0 + 2] = 0\n 17563: u8 [a0 + 1] = 0\n 17566: u8 [a0 + 0] = 0\n 17568: a1 = 0x40\n 17571: a0 = 0\n 17573: ra = 228, jump @0\n      : @246 [@dyn 114] (gas: 28)\n 17579: i32 a0 = a0 + 0\n 17581: i32 a2 = s1 + 0x260\n 17585: a1 = 0x40\n 17588: ecalli 7 // 'hash_keccak_256'\n 17590: a0 = u64 [s1 + 0x278]\n 17594: a1 = u64 [s1 + 0x270]\n 17598: a2 = u64 [s1 + 0x268]\n 17602: a3 = u64 [s1 + 0x260]\n 17606: a0 = reverse a0\n 17608: a1 = reverse a1\n 17610: a2 = reverse a2\n 17612: a3 = reverse a3\n 17614: u64 [s1 + 0x258] = a3\n 17618: u64 [s1 + 0x250] = a2\n 17622: u64 [s1 + 0x248] = a1\n 17626: u64 [s1 + 0x240] = a0\n 17630: u64 [s1 + 632] = 0\n 17634: u64 [s1 + 624] = 0\n 17638: u64 [s1 + 616] = 0\n 17642: u64 [s1 + 608] = 0\n 17646: u32 [s1 + 640] = 0x20\n 17651: i32 a1 = s1 + 0x240\n 17655: i32 a3 = s1 + 0x260\n 17659: i32 a4 = s1 + 0x280\n 17663: a2 = 0xffffffffffffffff\n 17666: a0 = 0\n 17668: ecalli 6 // 'get_storage'\n 17670: fallthrough\n      : @247 (gas: 20)\n 17671: a0 = u64 [s1 + 0x278]\n 17675: t0 = u64 [s1 + 0x260]\n 17679: a2 = u64 [s1 + 0x270]\n 17683: a3 = u64 [s1 + 0x268]\n 17687: a1 = u64 [s1 + 0x80]\n 17691: a4 = a0 ^ a1\n 17694: a1 = a1 <u a0\n 17697: a0 = u64 [s1 + 0x88]\n 17701: a5 = a0 <u a2\n 17704: a5 = a1 if a4 != 0\n 17707: a1 = u64 [s1 + 0x90]\n 17711: t1 = a3 ^ a1\n 17714: a3 = a1 <u a3\n 17717: a1 = u64 [s1 + 0x98]\n 17721: a1 = a1 <u t0\n 17724: a1 = a3 if t1 != 0\n 17727: a0 = a0 ^ a2\n 17730: a0 = a0 | a4\n 17733: a1 = a5 if a0 != 0\n 17736: jump @265 if a1 == 0\n      : @248 (gas: 20)\n 17740: i32 a0 = s1 + 0x180\n 17744: ecalli 4 // 'caller'\n 17746: a0 = u64 [s1 + 0x188]\n 17750: a1 = i32 [s1 + 0x190]\n 17754: a3 = u64 [s1 + 0x180]\n 17758: u64 [s1 + 0x70] = a3\n 17761: a0 = reverse a0\n 17763: a2 = a0 << 0x20\n 17766: a1 = reverse a1\n 17768: a1 = a1 >> 0x20\n 17771: a1 = a1 | a2\n 17774: u64 [s1 + 0x78] = a1\n 17777: a0 = a0 >> 0x20\n 17780: a1 = reverse a3\n 17782: a1 = a1 << 0x20\n 17785: a0 = a0 | a1\n 17788: u64 [s1 + 0x68] = a0\n 17791: a1 = 0x20\n 17794: a0 = 0\n 17796: ra = 230, jump @0\n      : @249 [@dyn 115] (gas: 57)\n 17802: a1 = u64 [s1 + 0x68]\n 17805: a1 = reverse a1\n 17807: a2 = u64 [s1 + 0x78]\n 17810: a2 = reverse a2\n 17812: a4 = u64 [s1 + 0x70]\n 17815: a3 = a4 >> 0x18\n 17818: u8 [a0 + 0xf] = a3\n 17821: a3 = a4 >> 0x10\n 17824: u8 [a0 + 0xe] = a3\n 17827: a3 = a4 >> 0x8\n 17830: u8 [a0 + 0xd] = a3\n 17833: u8 [a0 + 0xc] = a4\n 17836: u8 [a0 + 11] = 0\n 17839: u8 [a0 + 10] = 0\n 17842: u8 [a0 + 9] = 0\n 17845: u8 [a0 + 8] = 0\n 17848: u8 [a0 + 7] = 0\n 17851: u8 [a0 + 6] = 0\n 17854: u8 [a0 + 5] = 0\n 17857: u8 [a0 + 4] = 0\n 17860: u8 [a0 + 3] = 0\n 17863: u8 [a0 + 2] = 0\n 17866: u8 [a0 + 1] = 0\n 17869: u8 [a0 + 0] = 0\n 17871: u8 [a0 + 0x18] = a2\n 17874: u8 [a0 + 0x10] = a1\n 17877: a3 = a2 >> 0x38\n 17880: u8 [a0 + 0x1f] = a3\n 17883: a3 = a2 >> 0x30\n 17886: u8 [a0 + 0x1e] = a3\n 17889: a3 = a2 >> 0x28\n 17892: u8 [a0 + 0x1d] = a3\n 17895: a3 = a2 >> 0x20\n 17898: u8 [a0 + 0x1c] = a3\n 17901: a3 = a2 >> 0x18\n 17904: u8 [a0 + 0x1b] = a3\n 17907: a3 = a2 >> 0x10\n 17910: u8 [a0 + 0x1a] = a3\n 17913: a2 = a2 >> 0x8\n 17916: u8 [a0 + 0x19] = a2\n 17919: a2 = a1 >> 0x38\n 17922: u8 [a0 + 0x17] = a2\n 17925: a2 = a1 >> 0x30\n 17928: u8 [a0 + 0x16] = a2\n 17931: a2 = a1 >> 0x28\n 17934: u8 [a0 + 0x15] = a2\n 17937: a2 = a1 >> 0x20\n 17940: u8 [a0 + 0x14] = a2\n 17943: a2 = a1 >> 0x18\n 17946: u8 [a0 + 0x13] = a2\n 17949: a2 = a1 >> 0x10\n 17952: u8 [a0 + 0x12] = a2\n 17955: a1 = a1 >> 0x8\n 17958: u8 [a0 + 0x11] = a1\n 17961: a0 = 0x20\n 17964: a1 = 0x20\n 17967: ra = 232, jump @0\n      : @250 [@dyn 116] (gas: 35)\n 17973: u8 [a0 + 31] = 0x1\n 17977: u8 [a0 + 30] = 0\n 17980: u8 [a0 + 29] = 0\n 17983: u8 [a0 + 28] = 0\n 17986: u8 [a0 + 27] = 0\n 17989: u8 [a0 + 26] = 0\n 17992: u8 [a0 + 25] = 0\n 17995: u8 [a0 + 24] = 0\n 17998: u8 [a0 + 23] = 0\n 18001: u8 [a0 + 22] = 0\n 18004: u8 [a0 + 21] = 0\n 18007: u8 [a0 + 20] = 0\n 18010: u8 [a0 + 19] = 0\n 18013: u8 [a0 + 18] = 0\n 18016: u8 [a0 + 17] = 0\n 18019: u8 [a0 + 16] = 0\n 18022: u8 [a0 + 15] = 0\n 18025: u8 [a0 + 14] = 0\n 18028: u8 [a0 + 13] = 0\n 18031: u8 [a0 + 12] = 0\n 18034: u8 [a0 + 11] = 0\n 18037: u8 [a0 + 10] = 0\n 18040: u8 [a0 + 9] = 0\n 18043: u8 [a0 + 8] = 0\n 18046: u8 [a0 + 7] = 0\n 18049: u8 [a0 + 6] = 0\n 18052: u8 [a0 + 5] = 0\n 18055: u8 [a0 + 4] = 0\n 18058: u8 [a0 + 3] = 0\n 18061: u8 [a0 + 2] = 0\n 18064: u8 [a0 + 1] = 0\n 18067: u8 [a0 + 0] = 0\n 18069: a1 = 0x40\n 18072: a0 = 0\n 18074: ra = 234, jump @0\n      : @251 [@dyn 117] (gas: 28)\n 18080: i32 a0 = a0 + 0\n 18082: i32 a2 = s1 + 0x260\n 18086: a1 = 0x40\n 18089: ecalli 7 // 'hash_keccak_256'\n 18091: a0 = u64 [s1 + 0x278]\n 18095: a1 = u64 [s1 + 0x270]\n 18099: a2 = u64 [s1 + 0x268]\n 18103: a3 = u64 [s1 + 0x260]\n 18107: a4 = reverse a0\n 18109: a0 = reverse a1\n 18111: a1 = reverse a2\n 18113: a2 = reverse a3\n 18115: a3 = u64 [s1 + 0x80]\n 18119: u64 [s1 + 0xb8] = a3\n 18123: a3 = u64 [s1 + 0x88]\n 18127: u64 [s1 + 0xb0] = a3\n 18131: a3 = u64 [s1 + 0x90]\n 18135: u64 [s1 + 0xa8] = a3\n 18139: a3 = u64 [s1 + 0x98]\n 18143: u64 [s1 + 0xa0] = a3\n 18147: u64 [s1 + 0xd8] = a2\n 18151: u64 [s1 + 0xd0] = a1\n 18155: u64 [s1 + 0xc8] = a0\n 18159: a0 = s1 + 0xe0\n 18163: a1 = s1 + 0xc0\n 18167: a2 = s1 + 0xa0\n 18171: u64 [s1 + 0xc0] = a4\n 18175: ra = 236, jump @62\n      : @252 [@dyn 118] (gas: 66)\n 18181: a0 = u64 [s1 + 0xf8]\n 18185: a1 = u64 [s1 + 0xf0]\n 18189: a2 = u64 [s1 + 0xe8]\n 18193: a3 = u64 [s1 + 0xe0]\n 18197: u64 [s1 + 0x258] = a0\n 18201: u64 [s1 + 0x250] = a1\n 18205: u64 [s1 + 0x248] = a2\n 18209: u64 [s1 + 0x240] = a3\n 18213: u64 [s1 + 632] = 0\n 18217: u64 [s1 + 624] = 0\n 18221: u64 [s1 + 616] = 0\n 18225: u64 [s1 + 608] = 0\n 18229: u32 [s1 + 640] = 0x20\n 18234: i32 a1 = s1 + 0x240\n 18238: i32 a3 = s1 + 0x260\n 18242: i32 a4 = s1 + 0x280\n 18246: a2 = 0xffffffffffffffff\n 18249: a0 = 0\n 18251: ecalli 6 // 'get_storage'\n 18253: a0 = u64 [s1 + 0x260]\n 18257: u64 [s1 + 0x98] = a0\n 18261: a0 = u64 [s1 + 0x270]\n 18265: u64 [s1 + 0x90] = a0\n 18269: a0 = u64 [s1 + 0x268]\n 18273: u64 [s1 + 0x88] = a0\n 18277: a0 = sp + 0xffffffffffffffe0\n 18280: a0 = a0 & 0xffffffffffffffe0\n 18283: u64 [s1 + 0x80] = a0\n 18287: sp = a0\n 18289: u64 [a0 + 24] = 0\n 18292: u64 [a0 + 16] = 0\n 18295: u64 [a0 + 8] = 0\n 18298: u64 [a0 + 0] = 0\n 18300: i32 a0 = a0 + 0\n 18302: ecalli 15 // 'value_transferred'\n 18304: a1 = u64 [s1 + 0x80]\n 18308: a0 = u64 [a1 + 0x18]\n 18311: u64 [s1 + 0x40] = a0\n 18314: a0 = u64 [a1 + 0x10]\n 18317: u64 [s1 + 0x68] = a0\n 18320: a0 = u64 [a1 + 0x8]\n 18323: u64 [s1 + 0x70] = a0\n 18326: a0 = u64 [a1]\n 18328: u64 [s1 + 0x78] = a0\n 18331: a0 = u64 [s1 + 0x88]\n 18335: a0 = reverse a0\n 18337: a1 = a0 << 0x20\n 18340: a2 = u64 [s1 + 0x90]\n 18344: a2 = reverse a2\n 18346: a2 = a2 >> 0x20\n 18349: a3 = a2 | a1\n 18352: a0 = a0 >> 0x20\n 18355: a1 = u64 [s1 + 0x98]\n 18359: a1 = reverse a1\n 18361: a2 = a1 << 0x20\n 18364: a0 = a0 | a2\n 18367: a1 = a1 >> 0x20\n 18370: u64 [s1 + 0x28] = a0\n 18373: u64 [s1 + 0x1a8] = a0\n 18377: u64 [s1 + 0x38] = a3\n 18380: u64 [s1 + 0x1a0] = a3\n 18384: u64 [s1 + 0x30] = a1\n 18387: u32 [s1 + 0x1b0] = a1\n 18391: i32 a0 = s1 + 0x1a0\n 18395: ecalli 5 // 'code_size'\n 18397: fallthrough\n      : @253 (gas: 1)\n 18398: jump @272 if a0 == 0\n      : @254 (gas: 3)\n 18402: a0 = 0x40\n 18405: a1 = 0x20\n 18408: ra = 238, jump @0\n      : @255 [@dyn 119] (gas: 107)\n 18414: a1 = u8 [a0 + 0x11]\n 18417: a2 = u8 [a0 + 0x10]\n 18420: a3 = u8 [a0 + 0x12]\n 18423: a4 = u8 [a0 + 0x13]\n 18426: a1 = a1 << 0x8\n 18429: a1 = a1 | a2\n 18432: a3 = a3 << 0x10\n 18435: a4 = a4 << 0x18\n 18438: a3 = a3 | a4\n 18441: a1 = a1 | a3\n 18444: a2 = u8 [a0 + 0x15]\n 18447: a3 = u8 [a0 + 0x14]\n 18450: a4 = u8 [a0 + 0x16]\n 18453: a5 = u8 [a0 + 0x17]\n 18456: a2 = a2 << 0x8\n 18459: a2 = a2 | a3\n 18462: a4 = a4 << 0x10\n 18465: a5 = a5 << 0x18\n 18468: a4 = a4 | a5\n 18471: a2 = a2 | a4\n 18474: a2 = a2 << 0x20\n 18477: t1 = a2 | a1\n 18480: a1 = u8 [a0 + 0x1]\n 18483: a2 = u8 [a0]\n 18485: a3 = u8 [a0 + 0x2]\n 18488: a4 = u8 [a0 + 0x3]\n 18491: a1 = a1 << 0x8\n 18494: a1 = a1 | a2\n 18497: a3 = a3 << 0x10\n 18500: a4 = a4 << 0x18\n 18503: a3 = a3 | a4\n 18506: a1 = a1 | a3\n 18509: a2 = u8 [a0 + 0x5]\n 18512: a3 = u8 [a0 + 0x4]\n 18515: a4 = u8 [a0 + 0x6]\n 18518: a5 = u8 [a0 + 0x7]\n 18521: a2 = a2 << 0x8\n 18524: a2 = a2 | a3\n 18527: a4 = a4 << 0x10\n 18530: a5 = a5 << 0x18\n 18533: a4 = a4 | a5\n 18536: a2 = a2 | a4\n 18539: a2 = a2 << 0x20\n 18542: t0 = a2 | a1\n 18545: a1 = u8 [a0 + 0x19]\n 18548: a2 = u8 [a0 + 0x18]\n 18551: a3 = u8 [a0 + 0x1a]\n 18554: a4 = u8 [a0 + 0x1b]\n 18557: a1 = a1 << 0x8\n 18560: a1 = a1 | a2\n 18563: a3 = a3 << 0x10\n 18566: a4 = a4 << 0x18\n 18569: a3 = a3 | a4\n 18572: a1 = a1 | a3\n 18575: a2 = u8 [a0 + 0x1d]\n 18578: a3 = u8 [a0 + 0x1c]\n 18581: a4 = u8 [a0 + 0x1e]\n 18584: a5 = u8 [a0 + 0x1f]\n 18587: a2 = a2 << 0x8\n 18590: a2 = a2 | a3\n 18593: a4 = a4 << 0x10\n 18596: a5 = a5 << 0x18\n 18599: a4 = a4 | a5\n 18602: a2 = a2 | a4\n 18605: a2 = a2 << 0x20\n 18608: a5 = a2 | a1\n 18611: a1 = u8 [a0 + 0x9]\n 18614: a2 = u8 [a0 + 0x8]\n 18617: a3 = u8 [a0 + 0xa]\n 18620: a4 = u8 [a0 + 0xb]\n 18623: a1 = a1 << 0x8\n 18626: a1 = a1 | a2\n 18629: a3 = a3 << 0x10\n 18632: a4 = a4 << 0x18\n 18635: a3 = a3 | a4\n 18638: a1 = a1 | a3\n 18641: a2 = u8 [a0 + 0xd]\n 18644: a3 = u8 [a0 + 0xc]\n 18647: a4 = u8 [a0 + 0xe]\n 18650: a0 = u8 [a0 + 0xf]\n 18653: a2 = a2 << 0x8\n 18656: a2 = a2 | a3\n 18659: a4 = a4 << 0x10\n 18662: a0 = a0 << 0x18\n 18665: a0 = a0 | a4\n 18668: a0 = a0 | a2\n 18671: a0 = a0 << 0x20\n 18674: a0 = a0 | a1\n 18677: u64 [s1] = a0\n 18679: a3 = reverse a0\n 18681: u64 [s1 + 0x8] = a5\n 18684: a2 = reverse a5\n 18686: u64 [s1 + 0x18] = t0\n 18689: a1 = reverse t0\n 18691: u64 [s1 + 0x10] = t1\n 18694: a0 = reverse t1\n 18696: u64 [s1 + 0x90] = a0\n 18700: u64 [s1 + 0x80] = a1\n 18704: a0 = a0 | a1\n 18707: a1 = a2 | a3\n 18710: a1 = a1 | a0\n 18713: a1 = a1 >> 0x20\n 18716: u64 [s1 + 0x88] = a3\n 18720: a0 = a0 | a3\n 18723: a0 = a0 << 0x20\n 18726: a0 = a0 | a1\n 18729: jump @270 if a0 != 0\n      : @256 (gas: 5)\n 18733: i32 a0 = a2 + 0\n 18735: a1 = 0x20\n 18738: u64 [s1 + 0x98] = a0\n 18742: u64 [s1 + 0x20] = a2\n 18745: ra = 240, jump @0\n      : @257 [@dyn 120] (gas: 42)\n 18751: u8 [a0 + 31] = 0\n 18754: u8 [a0 + 30] = 0\n 18757: u8 [a0 + 29] = 0\n 18760: u8 [a0 + 28] = 0\n 18763: u8 [a0 + 27] = 0\n 18766: u8 [a0 + 26] = 0\n 18769: u8 [a0 + 25] = 0\n 18772: u8 [a0 + 24] = 0\n 18775: u8 [a0 + 23] = 0\n 18778: u8 [a0 + 22] = 0\n 18781: u8 [a0 + 21] = 0\n 18784: u8 [a0 + 20] = 0\n 18787: u8 [a0 + 19] = 0\n 18790: u8 [a0 + 18] = 0\n 18793: u8 [a0 + 17] = 0\n 18796: u8 [a0 + 16] = 0\n 18799: u8 [a0 + 15] = 0\n 18802: u8 [a0 + 14] = 0\n 18805: u8 [a0 + 13] = 0\n 18808: u8 [a0 + 12] = 0\n 18811: u8 [a0 + 11] = 0\n 18814: u8 [a0 + 10] = 0\n 18817: u8 [a0 + 9] = 0\n 18820: u8 [a0 + 8] = 0\n 18823: u8 [a0 + 7] = 0\n 18826: u8 [a0 + 6] = 0\n 18829: u8 [a0 + 5] = 0\n 18832: u8 [a0 + 4] = 0\n 18835: u8 [a0 + 3] = 0x25\n 18839: u8 [a0 + 2] = 0x5f\n 18843: u8 [a0 + 1] = 0xb5\n 18848: a1 = u64 [s1 + 0x88]\n 18852: a2 = u64 [s1 + 0x80]\n 18856: a1 = a1 | a2\n 18859: a2 = 0xfffffffc\n 18869: a3 = u64 [s1 + 0x20]\n 18872: a2 = a3 <u a2\n 18875: a4 = u64 [s1 + 0x90]\n 18879: a2 = 0 if a4 != 0\n 18881: a2 = 0 if a1 != 0\n 18883: u8 [a0 + 0] = 0xb6\n 18887: jump @270 if a2 == 0\n      : @258 (gas: 4)\n 18891: a0 = u64 [s1 + 0x98]\n 18895: i32 a0 = a0 + 0x4\n 18898: a1 = 0x20\n 18901: ra = 242, jump @0\n      : @259 [@dyn 121] (gas: 86)\n 18907: a1 = u64 [s1 + 0x48]\n 18910: a1 = reverse a1\n 18912: a2 = u64 [s1 + 0x50]\n 18915: a2 = reverse a2\n 18917: a3 = u64 [s1 + 0x58]\n 18920: a3 = reverse a3\n 18922: a4 = u64 [s1 + 0x60]\n 18925: a4 = reverse a4\n 18927: a5 = a4 >> 0x38\n 18930: u8 [a0 + 0x1f] = a5\n 18933: a5 = a4 >> 0x30\n 18936: u8 [a0 + 0x1e] = a5\n 18939: a5 = a4 >> 0x28\n 18942: u8 [a0 + 0x1d] = a5\n 18945: a5 = a4 >> 0x20\n 18948: u8 [a0 + 0x1c] = a5\n 18951: a5 = a4 >> 0x18\n 18954: u8 [a0 + 0x1b] = a5\n 18957: a5 = a4 >> 0x10\n 18960: u8 [a0 + 0x1a] = a5\n 18963: a5 = a4 >> 0x8\n 18966: u8 [a0 + 0x19] = a5\n 18969: u8 [a0 + 0x18] = a4\n 18972: u8 [a0 + 0x10] = a3\n 18975: a4 = a3 >> 0x38\n 18978: u8 [a0 + 0x17] = a4\n 18981: a4 = a3 >> 0x30\n 18984: u8 [a0 + 0x16] = a4\n 18987: a4 = a3 >> 0x28\n 18990: u8 [a0 + 0x15] = a4\n 18993: a4 = a3 >> 0x20\n 18996: u8 [a0 + 0x14] = a4\n 18999: a4 = a3 >> 0x18\n 19002: u8 [a0 + 0x13] = a4\n 19005: a4 = a3 >> 0x10\n 19008: u8 [a0 + 0x12] = a4\n 19011: a3 = a3 >> 0x8\n 19014: u8 [a0 + 0x11] = a3\n 19017: u8 [a0 + 0x8] = a2\n 19020: a3 = a2 >> 0x38\n 19023: u8 [a0 + 0xf] = a3\n 19026: a3 = a2 >> 0x30\n 19029: u8 [a0 + 0xe] = a3\n 19032: a3 = a2 >> 0x28\n 19035: u8 [a0 + 0xd] = a3\n 19038: a3 = a2 >> 0x20\n 19041: u8 [a0 + 0xc] = a3\n 19044: a3 = a2 >> 0x18\n 19047: u8 [a0 + 0xb] = a3\n 19050: a3 = a2 >> 0x10\n 19053: u8 [a0 + 0xa] = a3\n 19056: a2 = a2 >> 0x8\n 19059: u8 [a0 + 0x9] = a2\n 19062: u8 [a0] = a1\n 19064: a2 = a1 >> 0x38\n 19067: u8 [a0 + 0x7] = a2\n 19070: a2 = a1 >> 0x30\n 19073: u8 [a0 + 0x6] = a2\n 19076: a2 = a1 >> 0x28\n 19079: u8 [a0 + 0x5] = a2\n 19082: a2 = a1 >> 0x20\n 19085: u8 [a0 + 0x4] = a2\n 19088: a2 = a1 >> 0x18\n 19091: u8 [a0 + 0x3] = a2\n 19094: a2 = a1 >> 0x10\n 19097: u8 [a0 + 0x2] = a2\n 19100: a1 = a1 >> 0x8\n 19103: u8 [a0 + 0x1] = a1\n 19106: ecalli 9 // 'ref_time_left'\n 19108: a0 = u64 [s1 + 0x28]\n 19111: u64 [s1 + 0x1c8] = a0\n 19115: a0 = u64 [s1 + 0x38]\n 19118: u64 [s1 + 0x1c0] = a0\n 19122: a0 = u64 [s1 + 0x30]\n 19125: u32 [s1 + 0x1d0] = a0\n 19129: a0 = u64 [s1 + 0x40]\n 19132: u64 [s1 + 0x1f8] = a0\n 19136: a0 = u64 [s1 + 0x68]\n 19139: u64 [s1 + 0x1f0] = a0\n 19143: a0 = u64 [s1 + 0x70]\n 19146: u64 [s1 + 0x1e8] = a0\n 19150: a0 = u64 [s1 + 0x78]\n 19153: u64 [s1 + 0x1e0] = a0\n 19157: a1 = 0x24\n 19160: a0 = u64 [s1 + 0x98]\n 19164: ra = 244, jump @0\n      : @260 [@dyn 122] (gas: 4)\n 19170: u64 [s1 + 0x90] = a0\n 19174: a0 = u64 [s1 + 0x98]\n 19178: a1 = 0\n 19180: ra = 246, jump @0\n      : @261 [@dyn 123] (gas: 31)\n 19186: u32 [s1 + 512] = 0\n 19190: u64 [s1 + 568] = 0xffffffffffffffff\n 19195: u64 [s1 + 560] = 0xffffffffffffffff\n 19200: u64 [s1 + 552] = 0xffffffffffffffff\n 19205: u64 [s1 + 544] = 0xffffffffffffffff\n 19210: a1 = s1 + 0x1c0\n 19214: a1 = a1 << 0x20\n 19217: a1 = a1 >> 0x20\n 19220: a2 = 0x800000000\n 19230: t0 = a1 | a2\n 19233: a1 = s1 + 0x1e0\n 19237: a1 = a1 << 0x20\n 19240: a1 = a1 >> 0x20\n 19243: a2 = s1 + 0x220\n 19247: a2 = a2 << 0x20\n 19250: a3 = a2 | a1\n 19253: a1 = u64 [s1 + 0x90]\n 19257: a1 = a1 << 0x20\n 19260: a1 = a1 >> 0x20\n 19263: a2 = 0x2400000000\n 19273: a4 = a1 | a2\n 19276: a0 = a0 << 0x20\n 19279: a0 = a0 >> 0x20\n 19282: a1 = s1 + 0x200\n 19286: a1 = a1 << 0x20\n 19289: a5 = a1 | a0\n 19292: a1 = 0xffffffffffffffff\n 19295: a2 = 0xffffffffffffffff\n 19298: a0 = t0\n 19300: ecalli 0 // 'call'\n 19301: fallthrough\n      : @262 (gas: 1)\n 19302: jump @271 if a0 != 0\n      : @263 (gas: 4)\n 19306: ecalli 11 // 'return_data_size'\n 19308: a0 = 0x40\n 19311: a1 = 0x20\n 19314: ra = 248, jump @0\n      : @264 [@dyn 124] (gas: 70)\n 19320: a3 = u64 [s1 + 0x8]\n 19323: u8 [a0 + 0x18] = a3\n 19326: a2 = u64 [s1 + 0x10]\n 19329: a1 = a2 >> 0x38\n 19332: u8 [a0 + 0x17] = a1\n 19335: a1 = a2 >> 0x30\n 19338: u8 [a0 + 0x16] = a1\n 19341: a1 = a2 >> 0x28\n 19344: u8 [a0 + 0x15] = a1\n 19347: a1 = a2 >> 0x20\n 19350: u8 [a0 + 0x14] = a1\n 19353: a1 = a2 >> 0x18\n 19356: u8 [a0 + 0x13] = a1\n 19359: a1 = a2 >> 0x10\n 19362: u8 [a0 + 0x12] = a1\n 19365: a1 = a2 >> 0x8\n 19368: u8 [a0 + 0x11] = a1\n 19371: u8 [a0 + 0x10] = a2\n 19374: a2 = u64 [s1]\n 19376: a1 = a2 >> 0x38\n 19379: u8 [a0 + 0xf] = a1\n 19382: a1 = a2 >> 0x30\n 19385: u8 [a0 + 0xe] = a1\n 19388: a1 = a2 >> 0x28\n 19391: u8 [a0 + 0xd] = a1\n 19394: a1 = a2 >> 0x20\n 19397: u8 [a0 + 0xc] = a1\n 19400: a1 = a2 >> 0x18\n 19403: u8 [a0 + 0xb] = a1\n 19406: a1 = a2 >> 0x10\n 19409: u8 [a0 + 0xa] = a1\n 19412: a1 = a2 >> 0x8\n 19415: u8 [a0 + 0x9] = a1\n 19418: u8 [a0 + 0x8] = a2\n 19421: a2 = u64 [s1 + 0x18]\n 19424: a1 = a2 >> 0x38\n 19427: u8 [a0 + 0x7] = a1\n 19430: a1 = a2 >> 0x30\n 19433: u8 [a0 + 0x6] = a1\n 19436: a1 = a2 >> 0x28\n 19439: u8 [a0 + 0x5] = a1\n 19442: a1 = a2 >> 0x20\n 19445: u8 [a0 + 0x4] = a1\n 19448: a1 = a2 >> 0x18\n 19451: u8 [a0 + 0x3] = a1\n 19454: a1 = a2 >> 0x10\n 19457: u8 [a0 + 0x2] = a1\n 19460: a1 = a2 >> 0x8\n 19463: u8 [a0 + 0x1] = a1\n 19466: u8 [a0] = a2\n 19468: a1 = a3 >> 0x38\n 19471: u8 [a0 + 0x1f] = a1\n 19474: a1 = a3 >> 0x30\n 19477: u8 [a0 + 0x1e] = a1\n 19480: a1 = a3 >> 0x28\n 19483: u8 [a0 + 0x1d] = a1\n 19486: a1 = a3 >> 0x20\n 19489: u8 [a0 + 0x1c] = a1\n 19492: a1 = a3 >> 0x18\n 19495: u8 [a0 + 0x1b] = a1\n 19498: a1 = a3 >> 0x10\n 19501: u8 [a0 + 0x1a] = a1\n 19504: a1 = a3 >> 0x8\n 19507: u8 [a0 + 0x19] = a1\n 19510: sp = s0 + 0xfffffffffffffd60\n 19514: ra = u64 [sp + 0x298]\n 19518: s0 = u64 [sp + 0x290]\n 19522: s1 = u64 [sp + 0x288]\n 19526: sp = sp + 0x2a0\n 19530: ret\n      : @265 (gas: 3)\n 19532: a0 = 0x40\n 19535: a1 = 0x20\n 19538: ra = 250, jump @0\n      : @266 [@dyn 125] (gas: 104)\n 19544: a1 = u8 [a0 + 0x11]\n 19547: a2 = u8 [a0 + 0x10]\n 19550: a3 = u8 [a0 + 0x12]\n 19553: a4 = u8 [a0 + 0x13]\n 19556: a1 = a1 << 0x8\n 19559: a1 = a1 | a2\n 19562: a3 = a3 << 0x10\n 19565: a4 = a4 << 0x18\n 19568: a3 = a3 | a4\n 19571: a1 = a1 | a3\n 19574: a2 = u8 [a0 + 0x15]\n 19577: a3 = u8 [a0 + 0x14]\n 19580: a4 = u8 [a0 + 0x16]\n 19583: a5 = u8 [a0 + 0x17]\n 19586: a2 = a2 << 0x8\n 19589: a2 = a2 | a3\n 19592: a4 = a4 << 0x10\n 19595: a5 = a5 << 0x18\n 19598: a4 = a4 | a5\n 19601: a2 = a2 | a4\n 19604: a2 = a2 << 0x20\n 19607: t0 = a2 | a1\n 19610: a2 = u8 [a0 + 0x1]\n 19613: a3 = u8 [a0]\n 19615: a4 = u8 [a0 + 0x2]\n 19618: a5 = u8 [a0 + 0x3]\n 19621: a2 = a2 << 0x8\n 19624: a2 = a2 | a3\n 19627: a4 = a4 << 0x10\n 19630: a5 = a5 << 0x18\n 19633: a4 = a4 | a5\n 19636: a2 = a2 | a4\n 19639: a3 = u8 [a0 + 0x5]\n 19642: a4 = u8 [a0 + 0x4]\n 19645: a5 = u8 [a0 + 0x6]\n 19648: a1 = u8 [a0 + 0x7]\n 19651: a3 = a3 << 0x8\n 19654: a3 = a3 | a4\n 19657: a5 = a5 << 0x10\n 19660: a1 = a1 << 0x18\n 19663: a1 = a1 | a5\n 19666: a1 = a1 | a3\n 19669: a1 = a1 << 0x20\n 19672: t1 = a1 | a2\n 19675: a1 = u8 [a0 + 0x19]\n 19678: a3 = u8 [a0 + 0x18]\n 19681: a4 = u8 [a0 + 0x1a]\n 19684: a5 = u8 [a0 + 0x1b]\n 19687: a1 = a1 << 0x8\n 19690: a1 = a1 | a3\n 19693: a4 = a4 << 0x10\n 19696: a5 = a5 << 0x18\n 19699: a4 = a4 | a5\n 19702: a1 = a1 | a4\n 19705: a3 = u8 [a0 + 0x1d]\n 19708: a4 = u8 [a0 + 0x1c]\n 19711: a5 = u8 [a0 + 0x1e]\n 19714: a2 = u8 [a0 + 0x1f]\n 19717: a3 = a3 << 0x8\n 19720: a3 = a3 | a4\n 19723: a5 = a5 << 0x10\n 19726: a2 = a2 << 0x18\n 19729: a2 = a2 | a5\n 19732: a2 = a2 | a3\n 19735: a2 = a2 << 0x20\n 19738: a3 = a2 | a1\n 19741: a1 = u8 [a0 + 0x9]\n 19744: a2 = u8 [a0 + 0x8]\n 19747: a4 = u8 [a0 + 0xa]\n 19750: a5 = u8 [a0 + 0xb]\n 19753: a1 = a1 << 0x8\n 19756: a1 = a1 | a2\n 19759: a4 = a4 << 0x10\n 19762: a5 = a5 << 0x18\n 19765: a4 = a4 | a5\n 19768: a1 = a1 | a4\n 19771: a2 = u8 [a0 + 0xd]\n 19774: a4 = u8 [a0 + 0xc]\n 19777: a5 = u8 [a0 + 0xe]\n 19780: a0 = u8 [a0 + 0xf]\n 19783: a2 = a2 << 0x8\n 19786: a2 = a2 | a4\n 19789: a5 = a5 << 0x10\n 19792: a0 = a0 << 0x18\n 19795: a0 = a0 | a5\n 19798: a0 = a0 | a2\n 19801: a0 = a0 << 0x20\n 19804: a0 = a0 | a1\n 19807: a4 = reverse a0\n 19809: a1 = reverse a3\n 19811: a2 = reverse t1\n 19813: a0 = reverse t0\n 19815: u64 [s1 + 0x98] = a0\n 19819: u64 [s1 + 0x88] = a2\n 19823: a0 = a0 | a2\n 19826: a2 = a1\n 19828: a1 = a1 | a4\n 19831: a1 = a1 | a0\n 19834: a1 = a1 >> 0x20\n 19837: u64 [s1 + 0x90] = a4\n 19841: a0 = a0 | a4\n 19844: a0 = a0 << 0x20\n 19847: a0 = a0 | a1\n 19850: jump @270 if a0 != 0\n      : @267 (gas: 5)\n 19854: u64 [s1 + 0x80] = a2\n 19858: i32 a0 = a2 + 0\n 19860: a1 = 0x20\n 19863: u64 [s1 + 0x78] = a0\n 19866: ra = 252, jump @0\n      : @268 [@dyn 126] (gas: 51)\n 19872: u8 [a0 + 31] = 0\n 19875: u8 [a0 + 30] = 0\n 19878: u8 [a0 + 29] = 0\n 19881: u8 [a0 + 28] = 0\n 19884: u8 [a0 + 27] = 0\n 19887: u8 [a0 + 26] = 0\n 19890: u8 [a0 + 25] = 0\n 19893: u8 [a0 + 24] = 0\n 19896: u8 [a0 + 23] = 0\n 19899: u8 [a0 + 22] = 0\n 19902: u8 [a0 + 21] = 0\n 19905: u8 [a0 + 20] = 0\n 19908: u8 [a0 + 19] = 0\n 19911: u8 [a0 + 18] = 0\n 19914: u8 [a0 + 17] = 0\n 19917: u8 [a0 + 16] = 0\n 19920: u8 [a0 + 15] = 0\n 19923: u8 [a0 + 14] = 0\n 19926: u8 [a0 + 13] = 0\n 19929: u8 [a0 + 12] = 0\n 19932: u8 [a0 + 11] = 0\n 19935: u8 [a0 + 10] = 0\n 19938: u8 [a0 + 9] = 0\n 19941: u8 [a0 + 8] = 0\n 19944: u8 [a0 + 7] = 0\n 19947: u8 [a0 + 6] = 0\n 19950: u8 [a0 + 5] = 0\n 19953: u8 [a0 + 4] = 0\n 19956: u8 [a0 + 3] = 0xa0\n 19961: u8 [a0 + 2] = 0x79\n 19965: u8 [a0 + 1] = 0xc3\n 19970: u8 [a0 + 0] = 0x8\n 19973: a1 = u64 [s1 + 0x80]\n 19977: a0 = a1 + 0x4\n 19980: a1 = a0 <u a1\n 19983: a3 = u64 [s1 + 0x98]\n 19987: a2 = a3 + a1\n 19990: a3 = a2 <u a3\n 19993: a3 = a1 if a1 == 0\n 19996: a1 = u64 [s1 + 0x90]\n 20000: a3 = a3 + a1\n 20003: a1 = a3 <u a1\n 20006: a4 = u64 [s1 + 0x88]\n 20010: a4 = a4 + a1\n 20013: u64 [s1 + 0x128] = a2\n 20017: u64 [s1 + 0x120] = a0\n 20021: u64 [s1 + 0x130] = a3\n 20025: a0 = s1 + 0x140\n 20029: a1 = s1 + 0x120\n 20033: u64 [s1 + 0x138] = a4\n 20037: ra = 254, jump @234\n      : @269 [@dyn 127] (gas: 31)\n 20043: a0 = u64 [s1 + 0x148]\n 20047: t0 = u64 [s1 + 0x158]\n 20051: t1 = u64 [s1 + 0x140]\n 20055: a3 = u64 [s1 + 0x150]\n 20059: a1 = u64 [s1 + 0x98]\n 20063: a4 = a0 ^ a1\n 20066: a5 = a0 <u a1\n 20069: ra = a1\n 20071: t2 = u64 [s1 + 0x80]\n 20075: a1 = t1 <u t2\n 20078: a5 = a1 if a4 == 0\n 20081: a2 = u64 [s1 + 0x90]\n 20085: a4 = a3 - a2\n 20088: a3 = a3 <u a2\n 20091: a2 = u64 [s1 + 0x88]\n 20095: a2 = t0 - a2\n 20098: a2 = a2 - a3\n 20101: a3 = a4 <u a5\n 20104: a2 = a2 - a3\n 20107: a4 = a4 - a5\n 20110: a0 = a0 - ra\n 20113: a1 = a0 - a1\n 20116: a0 = t1 - t2\n 20119: a1 = a1 | a2\n 20122: a2 = a0 | a4\n 20125: a2 = a2 | a1\n 20128: a1 = a1 | a4\n 20131: a2 = a2 >> 0x20\n 20134: a1 = a1 << 0x20\n 20137: a1 = a1 | a2\n 20140: jump @274 if a1 == 0\n      : @270 (gas: 1)\n 20143: trap\n      : @271 (gas: 1)\n 20144: ra = 256, jump @192\n      : @272 [@dyn 128] (gas: 2)\n 20150: a1 = 0\n 20152: ra = 258, jump @0\n      : @273 [@dyn 129] (gas: 5)\n 20158: i32 a1 = a0 + 0\n 20160: a0 = 0x1\n 20163: a2 = 0\n 20165: ecalli 12 // 'seal_return'\n 20167: fallthrough\n      : @274 (gas: 4)\n 20168: i32 a1 = a0 + 0\n 20170: u64 [s1 + 0x98] = a1\n 20174: a0 = u64 [s1 + 0x78]\n 20177: ra = 260, jump @0\n      : @275 [@dyn 130] (gas: 7)\n 20183: i32 a1 = a0 + 0\n 20185: a0 = 0x1\n 20188: a2 = u64 [s1 + 0x98]\n 20192: ecalli 12 // 'seal_return'\n 20194: a0 = 0\n 20196: ra = 0x106\n 20200: jump @10\n      : @276 [export #0: 'call'] (gas: 2)\n 20203: a0 = 0\n 20205: ra = 262, jump @10\n      : @277 [@dyn 131] [export #1: 'deploy'] (gas: 2)\n 20211: a0 = 0x1\n 20214: ra = 264, jump @10\n      : @278 [@dyn 132] (gas: 249)\n 20220: sp = sp + 0xffffffffffffff80\n 20223: u64 [sp + 0x78] = ra\n 20226: u64 [sp + 0x70] = s0\n 20229: u64 [sp + 0x68] = s1\n 20232: s0 = sp + 0x80\n 20236: sp = sp & 0xfffffffffffffff0\n 20239: t0 = u64 [a1]\n 20241: t1 = u64 [a1 + 0x8]\n 20244: t2 = u64 [a1 + 0x10]\n 20247: a1 = u64 [a1 + 0x18]\n 20250: a3 = u64 [a2]\n 20252: a4 = u64 [a2 + 0x8]\n 20255: a5 = u64 [a2 + 0x10]\n 20258: a2 = u64 [a2 + 0x18]\n 20261: s1 = a0\n 20263: u64 [sp + 0x18] = a2\n 20266: u64 [sp + 0x10] = a5\n 20269: u64 [sp + 0x8] = a4\n 20272: u64 [sp] = a3\n 20274: u64 [sp + 0x38] = a1\n 20277: u64 [sp + 0x30] = t2\n 20280: u64 [sp + 0x28] = t1\n 20283: a0 = sp + 0x40\n 20286: a1 = sp + 0x20\n 20289: a2 = sp\n 20291: u64 [sp + 0x20] = t0\n 20294: ra = 0x10a\n 20298: sp = sp + 0xffffffffffffff40\n 20302: u64 [sp + 0xb8] = ra\n 20306: u64 [sp + 0xb0] = s0\n 20310: u64 [sp + 0xa8] = s1\n 20314: s0 = sp + 0xc0\n 20318: sp = sp & 0xffffffffffffffe0\n 20321: u64 [sp + 0x18] = a0\n 20324: a0 = u64 [a2 + 0x18]\n 20327: u64 [sp + 0x10] = a0\n 20330: a0 = u64 [a2 + 0x10]\n 20333: u64 [sp + 0x8] = a0\n 20336: s1 = u64 [a2 + 0x8]\n 20339: a0 = u64 [a2]\n 20341: u64 [sp] = a0\n 20343: a0 = u64 [a1 + 0x18]\n 20346: a2 = u64 [a1 + 0x10]\n 20349: a3 = u64 [a1 + 0x8]\n 20352: a1 = u64 [a1]\n 20354: u64 [sp + 0x78] = a0\n 20357: u64 [sp + 0x70] = a2\n 20360: u64 [sp + 0x68] = a3\n 20363: u64 [sp + 0x60] = a1\n 20366: u64 [sp + 152] = 0\n 20370: u64 [sp + 144] = 0\n 20374: u64 [sp + 136] = 0\n 20378: u64 [sp + 128] = 0\n 20382: u32 [sp + 160] = 0x20\n 20387: i32 a1 = sp + 0x60\n 20390: i32 a3 = sp + 0x80\n 20394: i32 a4 = sp + 0xa0\n 20398: a2 = 0xffffffffffffffff\n 20401: a0 = 0\n 20403: ecalli 6 // 'get_storage'\n 20405: a1 = u64 [sp + 0x80]\n 20409: a2 = u64 [sp + 0x88]\n 20413: t1 = u64 [sp]\n 20415: a0 = t1 >> 0x3d\n 20418: a3 = s1 << 0x3\n 20421: a3 = a3 | a0\n 20424: s1 = s1 >> 0x3d\n 20427: a4 = u64 [sp + 0x8]\n 20430: a0 = a4 << 0x3\n 20433: s1 = s1 | a0\n 20436: a0 = a4 >> 0x3d\n 20439: a4 = u64 [sp + 0x10]\n 20442: a4 = a4 << 0x3\n 20445: a4 = a4 | a0\n 20448: a0 = t1 << 0x3\n 20451: a5 = a3 >u 0\n 20453: a0 = a0 <u 0x100\n 20457: t0 = a0 ^ 0x1\n 20460: t0 = a5 if a3 != 0\n 20463: a3 = a4 >u 0\n 20465: a5 = s1 >u 0\n 20467: a5 = a3 if a4 != 0\n 20470: a3 = u64 [sp + 0x90]\n 20474: s1 = s1 | a4\n 20477: a4 = u64 [sp + 0x98]\n 20481: t0 = a5 if s1 != 0\n 20484: u8 [sp + 95] = 0\n 20487: u8 [sp + 94] = 0\n 20490: u8 [sp + 93] = 0\n 20493: u8 [sp + 92] = 0\n 20496: u8 [sp + 91] = 0\n 20499: u8 [sp + 90] = 0\n 20502: u8 [sp + 89] = 0\n 20505: u8 [sp + 88] = 0\n 20508: u8 [sp + 87] = 0\n 20511: u8 [sp + 86] = 0\n 20514: u8 [sp + 85] = 0\n 20517: u8 [sp + 84] = 0\n 20520: u8 [sp + 83] = 0\n 20523: u8 [sp + 82] = 0\n 20526: u8 [sp + 81] = 0\n 20529: u8 [sp + 80] = 0\n 20532: u8 [sp + 79] = 0\n 20535: u8 [sp + 78] = 0\n 20538: u8 [sp + 77] = 0\n 20541: u8 [sp + 76] = 0\n 20544: u8 [sp + 75] = 0\n 20547: u8 [sp + 74] = 0\n 20550: u8 [sp + 73] = 0\n 20553: u8 [sp + 72] = 0\n 20556: u8 [sp + 71] = 0\n 20559: u8 [sp + 70] = 0\n 20562: u8 [sp + 69] = 0\n 20565: u8 [sp + 68] = 0\n 20568: u8 [sp + 67] = 0\n 20571: u8 [sp + 66] = 0\n 20574: u8 [sp + 65] = 0\n 20577: u8 [sp + 64] = 0\n 20580: u8 [sp + 0x38] = a4\n 20583: u8 [sp + 0x30] = a3\n 20586: u8 [sp + 0x28] = a2\n 20589: u8 [sp + 0x20] = a1\n 20592: a5 = a4 >> 0x38\n 20595: u8 [sp + 0x3f] = a5\n 20598: a5 = a4 >> 0x30\n 20601: u8 [sp + 0x3e] = a5\n 20604: a5 = a4 >> 0x28\n 20607: u8 [sp + 0x3d] = a5\n 20610: a5 = a4 >> 0x20\n 20613: u8 [sp + 0x3c] = a5\n 20616: a5 = a4 >> 0x18\n 20619: u8 [sp + 0x3b] = a5\n 20622: a5 = a4 >> 0x10\n 20625: u8 [sp + 0x3a] = a5\n 20628: a4 = a4 >> 0x8\n 20631: u8 [sp + 0x39] = a4\n 20634: a4 = a3 >> 0x38\n 20637: u8 [sp + 0x37] = a4\n 20640: a4 = a3 >> 0x30\n 20643: u8 [sp + 0x36] = a4\n 20646: a4 = a3 >> 0x28\n 20649: u8 [sp + 0x35] = a4\n 20652: a4 = a3 >> 0x20\n 20655: u8 [sp + 0x34] = a4\n 20658: a4 = a3 >> 0x18\n 20661: u8 [sp + 0x33] = a4\n 20664: a4 = a3 >> 0x10\n 20667: u8 [sp + 0x32] = a4\n 20670: a3 = a3 >> 0x8\n 20673: u8 [sp + 0x31] = a3\n 20676: a3 = a2 >> 0x38\n 20679: u8 [sp + 0x2f] = a3\n 20682: a3 = a2 >> 0x30\n 20685: u8 [sp + 0x2e] = a3\n 20688: a3 = a2 >> 0x28\n 20691: u8 [sp + 0x2d] = a3\n 20694: a3 = a2 >> 0x20\n 20697: u8 [sp + 0x2c] = a3\n 20700: a3 = a2 >> 0x18\n 20703: u8 [sp + 0x2b] = a3\n 20706: a3 = a2 >> 0x10\n 20709: u8 [sp + 0x2a] = a3\n 20712: a2 = a2 >> 0x8\n 20715: u8 [sp + 0x29] = a2\n 20718: a2 = a1 >> 0x38\n 20721: u8 [sp + 0x27] = a2\n 20724: a2 = a1 >> 0x30\n 20727: u8 [sp + 0x26] = a2\n 20730: a2 = a1 >> 0x28\n 20733: u8 [sp + 0x25] = a2\n 20736: a2 = a1 >> 0x20\n 20739: u8 [sp + 0x24] = a2\n 20742: a2 = a1 >> 0x18\n 20745: u8 [sp + 0x23] = a2\n 20748: a2 = a1 >> 0x10\n 20751: u8 [sp + 0x22] = a2\n 20754: a1 = a1 >> 0x8\n 20757: u8 [sp + 0x21] = a1\n 20760: a1 = t1 & 0x1f\n 20763: a2 = sp + 0x20\n 20766: a1 = a1 | a2\n 20769: a2 = u8 [a1 + 0x9]\n 20772: a3 = u8 [a1 + 0x8]\n 20775: a4 = u8 [a1 + 0xa]\n 20778: a5 = u8 [a1 + 0xb]\n 20781: a2 = a2 << 0x8\n 20784: a2 = a2 | a3\n 20787: a4 = a4 << 0x10\n 20790: a5 = a5 << 0x18\n 20793: a4 = a4 | a5\n 20796: a2 = a2 | a4\n 20799: a3 = u8 [a1 + 0xd]\n 20802: a4 = u8 [a1 + 0xc]\n 20805: a5 = u8 [a1 + 0xe]\n 20808: s1 = u8 [a1 + 0xf]\n 20811: a3 = a3 << 0x8\n 20814: a3 = a3 | a4\n 20817: a5 = a5 << 0x10\n 20820: s1 = s1 << 0x18\n 20823: a5 = a5 | s1\n 20826: a3 = a3 | a5\n 20829: a3 = a3 << 0x20\n 20832: a2 = a2 | a3\n 20835: a3 = u8 [a1 + 0x1]\n 20838: a4 = u8 [a1]\n 20840: a5 = u8 [a1 + 0x2]\n 20843: s1 = u8 [a1 + 0x3]\n 20846: a3 = a3 << 0x8\n 20849: a3 = a3 | a4\n 20852: a5 = a5 << 0x10\n 20855: s1 = s1 << 0x18\n 20858: a5 = a5 | s1\n 20861: a3 = a3 | a5\n 20864: a4 = u8 [a1 + 0x5]\n 20867: a5 = u8 [a1 + 0x4]\n 20870: s1 = u8 [a1 + 0x6]\n 20873: a0 = u8 [a1 + 0x7]\n 20876: a4 = a4 << 0x8\n 20879: a4 = a4 | a5\n 20882: s1 = s1 << 0x10\n 20885: a0 = a0 << 0x18\n 20888: a0 = a0 | s1\n 20891: a0 = a0 | a4\n 20894: a0 = a0 << 0x20\n 20897: a3 = a3 | a0\n 20900: a0 = u8 [a1 + 0x11]\n 20903: a4 = u8 [a1 + 0x10]\n 20906: a5 = u8 [a1 + 0x12]\n 20909: a1 = u8 [a1 + 0x13]\n 20912: a0 = a0 << 0x8\n 20915: a0 = a0 | a4\n 20918: a5 = a5 << 0x10\n 20921: a1 = a1 << 0x18\n 20924: a1 = a1 | a5\n 20927: a0 = a0 | a1\n 20930: a3 = 0 if t0 != 0\n 20932: a2 = 0 if t0 != 0\n 20934: a0 = 0 if t0 != 0\n 20936: a1 = u64 [sp + 0x18]\n 20939: u64 [a1 + 0x10] = a0\n 20942: u64 [a1 + 0x8] = a2\n 20945: u64 [a1] = a3\n 20947: u64 [a1 + 24] = 0\n 20950: sp = s0 + 0xffffffffffffff40\n 20954: ra = u64 [sp + 0xb8]\n 20958: s0 = u64 [sp + 0xb0]\n 20962: s1 = u64 [sp + 0xa8]\n 20966: sp = sp + 0xc0\n 20970: ret\n      : @279 [@dyn 133] (gas: 14)\n 20972: a0 = u64 [sp + 0x50]\n 20975: a1 = u64 [sp + 0x58]\n 20978: a2 = u64 [sp + 0x40]\n 20981: a3 = u64 [sp + 0x48]\n 20984: u64 [s1 + 0x10] = a0\n 20987: u64 [s1 + 0x18] = a1\n 20990: u64 [s1] = a2\n 20992: u64 [s1 + 0x8] = a3\n 20995: sp = s0 + 0xffffffffffffff80\n 20998: ra = u64 [sp + 0x78]\n 21001: s0 = u64 [sp + 0x70]\n 21004: s1 = u64 [sp + 0x68]\n 21007: sp = sp + 0x80\n 21011: ret\n",
						"bytecode": {
							"object": ""
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {
							"bid()": "1998aeef",
							"box()": "754215a1",
							"boxData(address)": "a4e9ea9b",
							"boxes(address,uint256)": "13b980a4",
							"createYourBox()": "328e6997",
							"depositToBox(uint256,uint256)": "5cf510f8",
							"getPrice()": "98d5fdca",
							"withdraw()": "3ccfd60b"
						}
					},
					"irOptimized": "/// @use-src 0:\"contracts/SwappBox.sol\"\nobject \"SwappyBox_191\" {\n    code {\n        {\n            /// @src 0:823:1656  \"contract SwappyBox{...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            let _1 := allocate_unbounded()\n            codecopy(_1, dataoffset(\"SwappyBox_191_deployed\"), datasize(\"SwappyBox_191_deployed\"))\n            return(_1, datasize(\"SwappyBox_191_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n    }\n    /// @use-src 0:\"contracts/SwappBox.sol\"\n    object \"SwappyBox_191_deployed\" {\n        code {\n            {\n                /// @src 0:823:1656  \"contract SwappyBox{...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let selector := shift_right_unsigned(calldataload(0))\n                    switch selector\n                    case 0x13b980a4 { external_fun_boxes() }\n                    case 0x1998aeef { external_fun_bid() }\n                    case 0x328e6997 { external_fun_createYourBox() }\n                    case 0x3ccfd60b { external_fun_withdraw() }\n                    case 0x5cf510f8 { external_fun_depositToBox() }\n                    case 0x754215a1 { external_fun_box() }\n                    case 0x98d5fdca { external_fun_getPrice() }\n                    case 0xa4e9ea9b { external_fun_boxData() }\n                    default { }\n                }\n                revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            }\n            function shift_right_unsigned(value) -> newValue\n            { newValue := shr(224, value) }\n            function allocate_unbounded() -> memPtr\n            { memPtr := mload(64) }\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            { revert(0, 0) }\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            { revert(0, 0) }\n            function cleanup_uint160(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function cleanup_address(value) -> cleaned\n            {\n                cleaned := cleanup_uint160(value)\n            }\n            function validator_revert_address(value)\n            {\n                if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n            }\n            function abi_decode_address(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_address(value)\n            }\n            function cleanup_uint256(value) -> cleaned\n            { cleaned := value }\n            function validator_revert_uint256(value)\n            {\n                if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n            }\n            function abi_decode_uint256(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_uint256(value)\n            }\n            function abi_decode_addresst_uint256(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n            }\n            function identity(value) -> ret\n            { ret := value }\n            function convert_uint160_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_uint160(value)))\n            }\n            function convert_uint160_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function mapping_index_access_mapping_address_array_address_dyn_storage_of_address(slot, key) -> dataSlot\n            {\n                mstore(0, convert_address_to_address(key))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function panic_error_0x32()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x32)\n                revert(0, 0x24)\n            }\n            function array_length_array_address_dyn_storage(value) -> length\n            { length := sload(value) }\n            function array_dataslot_array_address_dyn_storage(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function storage_array_index_access_address_dyn(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_array_address_dyn_storage(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_array_address_dyn_storage(array)\n                slot := add(dataArea, mul(index, 1))\n                offset := 0\n            }\n            function shift_right_unsigned_dynamic(bits, value) -> newValue\n            { newValue := shr(bits, value) }\n            function cleanup_from_storage_address(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function extract_from_storage_value_dynamict_address(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_address(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_address(sload(slot), offset)\n            }\n            /// @ast-id 112 @src 0:1055:1095  \"mapping(address=>address[]) public boxes\"\n            function getter_fun_boxes(key, key_1) -> ret\n            {\n                let slot := 1\n                let offset := 0\n                slot := mapping_index_access_mapping_address_array_address_dyn_storage_of_address(slot, key)\n                if iszero(lt(key_1, array_length_array_address_dyn_storage(slot))) { revert(0, 0) }\n                slot, offset := storage_array_index_access_address_dyn(slot, key_1)\n                ret := read_from_storage_split_dynamic_address(slot, offset)\n            }\n            /// @src 0:823:1656  \"contract SwappyBox{...\"\n            function abi_encode_address(value, pos)\n            {\n                mstore(pos, cleanup_address(value))\n            }\n            function abi_encode_tuple_address(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_address(value0, add(headStart, 0))\n            }\n            function external_fun_boxes()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_addresst_uint256(4, calldatasize())\n                let ret := getter_fun_boxes(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_address(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function abi_encode_tuple(headStart) -> tail\n            { tail := add(headStart, 0) }\n            function external_fun_bid()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_createYourBox()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                fun_createYourBox()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_withdraw()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_uint256t_uint256(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n            }\n            function external_fun_depositToBox()\n            {\n                let param, param_1 := abi_decode_uint256t_uint256(4, calldatasize())\n                fun_depositToBox(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function cleanup_from_storage_contract_Box(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function extract_from_storage_value_dynamict_contract_Box(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_contract_Box(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_contract_Box(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_contract_Box(sload(slot), offset)\n            }\n            /// @ast-id 94 @src 0:848:862  \"Box public box\"\n            function getter_fun_box() -> ret_address\n            {\n                let slot := 0\n                let offset := 0\n                ret_address := read_from_storage_split_dynamic_contract_Box(slot, offset)\n            }\n            /// @src 0:823:1656  \"contract SwappyBox{...\"\n            function convert_contract_Box_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function abi_encode_contract_Box(value, pos)\n            {\n                mstore(pos, convert_contract_Box_to_address(value))\n            }\n            function abi_encode_tuple_contract_Box(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_contract_Box(value0, add(headStart, 0))\n            }\n            function external_fun_box()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_box()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_contract_Box(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_getPrice()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_tuple_address(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n            }\n            function mapping_index_access_mapping_address_struct_BidTrack_storage_of_address(slot, key) -> dataSlot\n            {\n                mstore(0, convert_address_to_address(key))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function shift_right_0_unsigned(value) -> newValue\n            { newValue := shr(0, value) }\n            function cleanup_from_storage_uint256(value) -> cleaned\n            { cleaned := value }\n            function extract_from_storage_value_offset_uint256(slot_value) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_uint256(slot) -> value\n            {\n                value := extract_from_storage_value_offset_uint256(sload(slot))\n            }\n            function extract_from_storage_value_offset_address(slot_value) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_address(slot) -> value\n            {\n                value := extract_from_storage_value_offset_address(sload(slot))\n            }\n            /// @ast-id 117 @src 0:1101:1142  \"mapping(address=>BidTrack) public boxData\"\n            function getter_fun_boxData(key) -> ret, ret_1, ret_2, ret_3, ret_4, ret_5\n            {\n                let slot := 2\n                slot := mapping_index_access_mapping_address_struct_BidTrack_storage_of_address(slot, key)\n                ret := read_from_storage_split_offset_uint256(add(slot, 0))\n                ret_1 := read_from_storage_split_offset_uint256(add(slot, 1))\n                ret_2 := read_from_storage_split_offset_uint256(add(slot, 2))\n                ret_3 := read_from_storage_split_offset_uint256(add(slot, 3))\n                ret_4 := read_from_storage_split_offset_uint256(add(slot, 4))\n                ret_5 := read_from_storage_split_offset_address(add(slot, 5))\n            }\n            /// @src 0:823:1656  \"contract SwappyBox{...\"\n            function abi_encode_uint256_to_uint256(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function abi_encode_uint256_uint256_uint256_uint256_uint256_address(headStart, value0, value1, value2, value3, value4, value5) -> tail\n            {\n                tail := add(headStart, 192)\n                abi_encode_uint256_to_uint256(value0, add(headStart, 0))\n                abi_encode_uint256_to_uint256(value1, add(headStart, 32))\n                abi_encode_uint256_to_uint256(value2, add(headStart, 64))\n                abi_encode_uint256_to_uint256(value3, add(headStart, 96))\n                abi_encode_uint256_to_uint256(value4, add(headStart, 128))\n                abi_encode_address(value5, add(headStart, 160))\n            }\n            function external_fun_boxData()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_address(4, calldatasize())\n                let ret, ret_1, ret_2, ret_3, ret_4, ret_5 := getter_fun_boxData(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256_uint256_uint256_uint256_uint256_address(memPos, ret, ret_1, ret_2, ret_3, ret_4, ret_5)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            { revert(0, 0) }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function revert_forward()\n            {\n                let pos := allocate_unbounded()\n                returndatacopy(pos, 0, returndatasize())\n                revert(pos, returndatasize())\n            }\n            function convert_array_array_address_dyn_storage_to_array_address_dyn_ptr(value) -> converted\n            { converted := value }\n            function array_dataslot_array_address_dyn_storage_ptr(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function array_length_array_address_dyn_storage_ptr(value) -> length\n            { length := sload(value) }\n            function storage_array_index_access_address_dyn_ptr(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_array_address_dyn_storage_ptr(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_array_address_dyn_storage_ptr(array)\n                slot := add(dataArea, mul(index, 1))\n                offset := 0\n            }\n            function shift_left_dynamic(bits, value) -> newValue\n            { newValue := shl(bits, value) }\n            function update_byte_slice_dynamic20(value, shiftBytes, toInsert) -> result\n            {\n                let shiftBits := mul(shiftBytes, 8)\n                let mask := shift_left_dynamic(shiftBits, sub(shl(160, 1), 1))\n                toInsert := shift_left_dynamic(shiftBits, toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function prepare_store_address(value) -> ret\n            { ret := value }\n            function update_storage_value_address_to_address(slot, offset, value)\n            {\n                let convertedValue := convert_address_to_address(value)\n                sstore(slot, update_byte_slice_dynamic20(sload(slot), offset, prepare_store_address(convertedValue)))\n            }\n            function array_push_from_address_to_array_address_dyn_storage_ptr(array, value0)\n            {\n                let oldLen := sload(array)\n                if iszero(lt(oldLen, 18446744073709551616)) { panic_error_0x41() }\n                sstore(array, add(oldLen, 1))\n                let slot, offset := storage_array_index_access_address_dyn_ptr(array, oldLen)\n                update_storage_value_address_to_address(slot, offset, value0)\n            }\n            /// @ast-id 140 @src 0:1148:1261  \"function createYourBox() public {...\"\n            function fun_createYourBox()\n            {\n                /// @src 0:1199:1208  \"new Box()\"\n                let _1 := allocate_unbounded()\n                let _2 := add(_1, datasize(\"Box_91\"))\n                if or(gt(_2, 0xffffffffffffffff), lt(_2, _1)) { panic_error_0x41() }\n                datacopy(_1, dataoffset(\"Box_91\"), datasize(\"Box_91\"))\n                _2 := abi_encode_tuple(_2)\n                let expr_126_address := create(0, _1, sub(_2, _1))\n                if iszero(expr_126_address) { revert_forward() }\n                /// @src 0:1190:1208  \"Box bx = new Box()\"\n                let var_bx_address := expr_126_address\n                /// @src 0:1218:1223  \"boxes\"\n                let _slot := 0x01\n                let expr_128_slot := _slot\n                /// @src 0:1224:1234  \"msg.sender\"\n                let expr := caller()\n                /// @src 0:1218:1235  \"boxes[msg.sender]\"\n                let _3 := mapping_index_access_mapping_address_array_address_dyn_storage_of_address(expr_128_slot, expr)\n                let _5_slot := _3\n                let expr_slot := _5_slot\n                /// @src 0:1218:1240  \"boxes[msg.sender].push\"\n                let expr_self_slot := convert_array_array_address_dyn_storage_to_array_address_dyn_ptr(expr_slot)\n                /// @src 0:1249:1251  \"bx\"\n                let _address := var_bx_address\n                let expr_135_address := _address\n                /// @src 0:1241:1252  \"address(bx)\"\n                let expr_1 := convert_contract_Box_to_address(expr_135_address)\n                /// @src 0:1218:1253  \"boxes[msg.sender].push(address(bx))\"\n                array_push_from_address_to_array_address_dyn_storage_ptr(expr_self_slot, expr_1)\n            }\n            /// @src 0:823:1656  \"contract SwappyBox{...\"\n            function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function store_literal_in_memory_ebac15005998152c7868d5d3837373e86795737fa2f9ca6c69b26b94f9417814(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Invalid box index\")\n            }\n            function abi_encode_stringliteral_ebac(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 17)\n                store_literal_in_memory_ebac15005998152c7868d5d3837373e86795737fa2f9ca6c69b26b94f9417814(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_ebac(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_ebac(tail)\n            }\n            function require_helper_stringliteral_ebac(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_ebac(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function convert_uint160_to_contract_Box(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_to_contract_Box(value) -> converted\n            {\n                converted := convert_uint160_to_contract_Box(value)\n            }\n            function revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()\n            { revert(0, 0) }\n            function round_up_to_mul_of(value) -> result\n            {\n                result := and(add(value, 31), not(31))\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function shift_left(value) -> newValue\n            { newValue := shl(224, value) }\n            function abi_decode_fromMemory(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function abi_encode_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_uint256_to_uint256(value0, add(headStart, 0))\n            }\n            /// @ast-id 178 @src 0:1267:1532  \"function depositToBox(uint _index, uint _deadline) public payable {...\"\n            function fun_depositToBox(var_index, var_deadline)\n            {\n                /// @src 0:1351:1357  \"_index\"\n                let _1 := var_index\n                let expr := _1\n                /// @src 0:1360:1365  \"boxes\"\n                let _8_slot := 0x01\n                let expr_149_slot := _8_slot\n                /// @src 0:1366:1376  \"msg.sender\"\n                let expr_1 := caller()\n                /// @src 0:1360:1377  \"boxes[msg.sender]\"\n                let _2 := mapping_index_access_mapping_address_array_address_dyn_storage_of_address(expr_149_slot, expr_1)\n                let _10_slot := _2\n                let expr_152_slot := _10_slot\n                /// @src 0:1360:1384  \"boxes[msg.sender].length\"\n                let expr_2 := array_length_array_address_dyn_storage(expr_152_slot)\n                /// @src 0:1351:1384  \"_index < boxes[msg.sender].length\"\n                let expr_3 := lt(cleanup_uint256(expr), cleanup_uint256(expr_2))\n                /// @src 0:1343:1406  \"require(_index < boxes[msg.sender].length, \\\"Invalid box index\\\")\"\n                require_helper_stringliteral_ebac(expr_3)\n                /// @src 0:1438:1443  \"boxes\"\n                let _11_slot := 0x01\n                let expr_160_slot := _11_slot\n                /// @src 0:1444:1454  \"msg.sender\"\n                let expr_4 := caller()\n                /// @src 0:1438:1455  \"boxes[msg.sender]\"\n                let _3 := mapping_index_access_mapping_address_array_address_dyn_storage_of_address(expr_160_slot, expr_4)\n                let _13_slot := _3\n                let expr_163_slot := _13_slot\n                /// @src 0:1456:1462  \"_index\"\n                let _4 := var_index\n                let expr_5 := _4\n                /// @src 0:1438:1463  \"boxes[msg.sender][_index]\"\n                let _5, _6 := storage_array_index_access_address_dyn(expr_163_slot, expr_5)\n                let _7 := read_from_storage_split_dynamic_address(_5, _6)\n                let expr_6 := _7\n                /// @src 0:1417:1463  \"address boxAddress = boxes[msg.sender][_index]\"\n                let var_boxAddress := expr_6\n                /// @src 0:1477:1487  \"boxAddress\"\n                let _8 := var_boxAddress\n                let expr_7 := _8\n                /// @src 0:1473:1488  \"Box(boxAddress)\"\n                let expr_address := convert_address_to_contract_Box(expr_7)\n                /// @src 0:1473:1496  \"Box(boxAddress).deposit\"\n                let expr_170_address := convert_contract_Box_to_address(expr_address)\n                let expr_functionSelector := 0xb6b55f25\n                /// @src 0:1504:1513  \"msg.value\"\n                let expr_8 := callvalue()\n                /// @src 0:1473:1514  \"Box(boxAddress).deposit{value: msg.value}\"\n                let expr_173_address := expr_170_address\n                let expr_173_functionSelector := expr_functionSelector\n                let expr_value := expr_8\n                /// @src 0:1515:1524  \"_deadline\"\n                let _9 := var_deadline\n                let expr_9 := _9\n                /// @src 0:1473:1525  \"Box(boxAddress).deposit{value: msg.value}(_deadline)\"\n                if iszero(extcodesize(expr_173_address))\n                {\n                    revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()\n                }\n                let _10 := allocate_unbounded()\n                mstore(_10, shift_left(expr_173_functionSelector))\n                let _11 := abi_encode_uint256(add(_10, 4), expr_9)\n                let _12 := call(gas(), expr_173_address, expr_value, _10, sub(_11, _10), _10, 0)\n                if iszero(_12) { revert_forward() }\n                if _12\n                {\n                    let _13 := 0\n                    if gt(_13, returndatasize()) { _13 := returndatasize() }\n                    finalize_allocation(_10, _13)\n                    abi_decode_fromMemory(_10, add(_10, _13))\n                }\n            }\n        }\n        /// @use-src 0:\"contracts/SwappBox.sol\"\n        object \"Box_91\" {\n            code {\n                {\n                    /// @src 0:71:822  \"contract Box{...\"\n                    mstore(64, memoryguard(0x80))\n                    if callvalue()\n                    {\n                        revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                    }\n                    let _1 := allocate_unbounded()\n                    codecopy(_1, dataoffset(\"Box_91_deployed\"), datasize(\"Box_91_deployed\"))\n                    return(_1, datasize(\"Box_91_deployed\"))\n                }\n                function allocate_unbounded() -> memPtr\n                { memPtr := mload(64) }\n                function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                { revert(0, 0) }\n            }\n            /// @use-src 0:\"contracts/SwappBox.sol\"\n            object \"Box_91_deployed\" {\n                code {\n                    {\n                        /// @src 0:71:822  \"contract Box{...\"\n                        mstore(64, memoryguard(0x80))\n                        if iszero(lt(calldatasize(), 4))\n                        {\n                            let selector := shift_right_unsigned(calldataload(0))\n                            switch selector\n                            case 0x29dcb0cf { external_fun_deadline() }\n                            case 0x3ccfd60b { external_fun_withdraw() }\n                            case 0x8da5cb5b { external_fun_owner() }\n                            case 0x9ced0e9b { external_fun_initialTime() }\n                            case 0xa6f9dae1 { external_fun_changeOwner() }\n                            case 0xb6b55f25 { external_fun_deposit() }\n                            case 0xc934e08e {\n                                external_fun_isContractFunded()\n                            }\n                            default { }\n                        }\n                        revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n                    }\n                    function shift_right_unsigned(value) -> newValue\n                    { newValue := shr(224, value) }\n                    function allocate_unbounded() -> memPtr\n                    { memPtr := mload(64) }\n                    function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                    { revert(0, 0) }\n                    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                    { revert(0, 0) }\n                    function abi_decode(headStart, dataEnd)\n                    {\n                        if slt(sub(dataEnd, headStart), 0)\n                        {\n                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                        }\n                    }\n                    function shift_right_unsigned_dynamic(bits, value) -> newValue\n                    { newValue := shr(bits, value) }\n                    function cleanup_from_storage_uint256(value) -> cleaned\n                    { cleaned := value }\n                    function extract_from_storage_value_dynamict_uint256(slot_value, offset) -> value\n                    {\n                        value := cleanup_from_storage_uint256(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n                    }\n                    function read_from_storage_split_dynamic_uint256(slot, offset) -> value\n                    {\n                        value := extract_from_storage_value_dynamict_uint256(sload(slot), offset)\n                    }\n                    /// @ast-id 3 @src 0:89:109  \"uint public deadline\"\n                    function getter_fun_deadline() -> ret\n                    {\n                        let slot := 0\n                        let offset := 0\n                        ret := read_from_storage_split_dynamic_uint256(slot, offset)\n                    }\n                    /// @src 0:71:822  \"contract Box{...\"\n                    function cleanup_uint256(value) -> cleaned\n                    { cleaned := value }\n                    function abi_encode_uint256_to_uint256(value, pos)\n                    {\n                        mstore(pos, cleanup_uint256(value))\n                    }\n                    function abi_encode_uint256(headStart, value0) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        abi_encode_uint256_to_uint256(value0, add(headStart, 0))\n                    }\n                    function external_fun_deadline()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        abi_decode(4, calldatasize())\n                        let ret := getter_fun_deadline()\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_uint256(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function abi_encode_tuple(headStart) -> tail\n                    { tail := add(headStart, 0) }\n                    function external_fun_withdraw()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        abi_decode(4, calldatasize())\n                        fun_withdraw()\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_tuple(memPos)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function cleanup_from_storage_address_payable(value) -> cleaned\n                    {\n                        cleaned := and(value, sub(shl(160, 1), 1))\n                    }\n                    function extract_from_storage_value_dynamict_address_payable(slot_value, offset) -> value\n                    {\n                        value := cleanup_from_storage_address_payable(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n                    }\n                    function read_from_storage_split_dynamic_address_payable(slot, offset) -> value\n                    {\n                        value := extract_from_storage_value_dynamict_address_payable(sload(slot), offset)\n                    }\n                    /// @ast-id 9 @src 0:179:207  \"address payable public owner\"\n                    function getter_fun_owner() -> ret\n                    {\n                        let slot := 2\n                        let offset := 1\n                        ret := read_from_storage_split_dynamic_address_payable(slot, offset)\n                    }\n                    /// @src 0:71:822  \"contract Box{...\"\n                    function cleanup_uint160(value) -> cleaned\n                    {\n                        cleaned := and(value, sub(shl(160, 1), 1))\n                    }\n                    function cleanup_address_payable(value) -> cleaned\n                    {\n                        cleaned := cleanup_uint160(value)\n                    }\n                    function abi_encode_address_payable_to_address_payable(value, pos)\n                    {\n                        mstore(pos, cleanup_address_payable(value))\n                    }\n                    function abi_encode_address_payable(headStart, value0) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        abi_encode_address_payable_to_address_payable(value0, add(headStart, 0))\n                    }\n                    function external_fun_owner()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        abi_decode(4, calldatasize())\n                        let ret := getter_fun_owner()\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_address_payable(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    /// @ast-id 5 @src 0:115:138  \"uint public initialTime\"\n                    function getter_fun_initialTime() -> ret\n                    {\n                        let slot := 1\n                        let offset := 0\n                        ret := read_from_storage_split_dynamic_uint256(slot, offset)\n                    }\n                    /// @src 0:71:822  \"contract Box{...\"\n                    function external_fun_initialTime()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        abi_decode(4, calldatasize())\n                        let ret := getter_fun_initialTime()\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_uint256(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function cleanup_address(value) -> cleaned\n                    {\n                        cleaned := cleanup_uint160(value)\n                    }\n                    function validator_revert_address(value)\n                    {\n                        if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n                    }\n                    function abi_decode_address(offset, end) -> value\n                    {\n                        value := calldataload(offset)\n                        validator_revert_address(value)\n                    }\n                    function abi_decode_tuple_address(headStart, dataEnd) -> value0\n                    {\n                        if slt(sub(dataEnd, headStart), 32)\n                        {\n                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                        }\n                        let offset := 0\n                        value0 := abi_decode_address(add(headStart, offset), dataEnd)\n                    }\n                    function external_fun_changeOwner()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        let param := abi_decode_tuple_address(4, calldatasize())\n                        fun_changeOwner(param)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_tuple(memPos)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function validator_revert_uint256(value)\n                    {\n                        if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n                    }\n                    function abi_decode_uint256(offset, end) -> value\n                    {\n                        value := calldataload(offset)\n                        validator_revert_uint256(value)\n                    }\n                    function abi_decode_tuple_uint256(headStart, dataEnd) -> value0\n                    {\n                        if slt(sub(dataEnd, headStart), 32)\n                        {\n                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                        }\n                        let offset := 0\n                        value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n                    }\n                    function external_fun_deposit()\n                    {\n                        let param := abi_decode_tuple_uint256(4, calldatasize())\n                        fun_deposit(param)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_tuple(memPos)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function cleanup_from_storage_bool(value) -> cleaned\n                    { cleaned := and(value, 0xff) }\n                    function extract_from_storage_value_dynamict_bool(slot_value, offset) -> value\n                    {\n                        value := cleanup_from_storage_bool(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n                    }\n                    function read_from_storage_split_dynamic_bool(slot, offset) -> value\n                    {\n                        value := extract_from_storage_value_dynamict_bool(sload(slot), offset)\n                    }\n                    /// @ast-id 7 @src 0:144:173  \"bool public  isContractFunded\"\n                    function getter_fun_isContractFunded() -> ret\n                    {\n                        let slot := 2\n                        let offset := 0\n                        ret := read_from_storage_split_dynamic_bool(slot, offset)\n                    }\n                    /// @src 0:71:822  \"contract Box{...\"\n                    function cleanup_bool(value) -> cleaned\n                    {\n                        cleaned := iszero(iszero(value))\n                    }\n                    function abi_encode_bool_to_bool(value, pos)\n                    {\n                        mstore(pos, cleanup_bool(value))\n                    }\n                    function abi_encode_bool(headStart, value0) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        abi_encode_bool_to_bool(value0, add(headStart, 0))\n                    }\n                    function external_fun_isContractFunded()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        abi_decode(4, calldatasize())\n                        let ret := getter_fun_isContractFunded()\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_bool(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n                    { revert(0, 0) }\n                    function shift_right_8_unsigned(value) -> newValue\n                    { newValue := shr(8, value) }\n                    function extract_from_storage_value_offset_address_payable(slot_value) -> value\n                    {\n                        value := cleanup_from_storage_address_payable(shift_right_8_unsigned(slot_value))\n                    }\n                    function read_from_storage_split_offset_address_payable(slot) -> value\n                    {\n                        value := extract_from_storage_value_offset_address_payable(sload(slot))\n                    }\n                    function identity(value) -> ret\n                    { ret := value }\n                    function convert_uint160_to_uint160(value) -> converted\n                    {\n                        converted := cleanup_uint160(identity(cleanup_uint160(value)))\n                    }\n                    function convert_uint160_to_address(value) -> converted\n                    {\n                        converted := convert_uint160_to_uint160(value)\n                    }\n                    function convert_address_payable_to_address(value) -> converted\n                    {\n                        converted := convert_uint160_to_address(value)\n                    }\n                    function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n                    {\n                        mstore(pos, length)\n                        updated_pos := add(pos, 0x20)\n                    }\n                    function store_literal_in_memory_978897ed65b2e5af5d002526b7872b151fa7174b4e2fd1e87ff9808e2d24c95e(memPtr)\n                    {\n                        mstore(add(memPtr, 0), \"you are not owner\")\n                    }\n                    function abi_encode_stringliteral_978897ed65b2e5af5d002526b7872b151fa7174b4e2fd1e87ff9808e2d24c95e(pos) -> end\n                    {\n                        pos := array_storeLengthForEncoding_string(pos, 17)\n                        store_literal_in_memory_978897ed65b2e5af5d002526b7872b151fa7174b4e2fd1e87ff9808e2d24c95e(pos)\n                        end := add(pos, 32)\n                    }\n                    function abi_encode_stringliteral(headStart) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        mstore(add(headStart, 0), sub(tail, headStart))\n                        tail := abi_encode_stringliteral_978897ed65b2e5af5d002526b7872b151fa7174b4e2fd1e87ff9808e2d24c95e(tail)\n                    }\n                    function require_helper_stringliteral(condition)\n                    {\n                        if iszero(condition)\n                        {\n                            let memPtr := allocate_unbounded()\n                            mstore(memPtr, shl(229, 4594637))\n                            let end := abi_encode_stringliteral(add(memPtr, 4))\n                            revert(memPtr, sub(end, memPtr))\n                        }\n                    }\n                    function convert_contract_Box_to_address(value) -> converted\n                    {\n                        converted := convert_uint160_to_address(value)\n                    }\n                    function array_storeLengthForEncoding_bytes_nonPadded_inplace(pos, length) -> updated_pos\n                    { updated_pos := pos }\n                    function abi_encode_stringliteral_c5d2(pos) -> end\n                    {\n                        pos := array_storeLengthForEncoding_bytes_nonPadded_inplace(pos, 0)\n                        end := add(pos, 0)\n                    }\n                    function abi_encode_packed_stringliteral_c5d2(pos) -> end\n                    {\n                        pos := abi_encode_stringliteral_c5d2(pos)\n                        end := pos\n                    }\n                    function round_up_to_mul_of(value) -> result\n                    {\n                        result := and(add(value, 31), not(31))\n                    }\n                    function panic_error_0x41()\n                    {\n                        mstore(0, shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(0, 0x24)\n                    }\n                    function finalize_allocation(memPtr, size)\n                    {\n                        let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                        mstore(64, newFreePtr)\n                    }\n                    function allocate_memory(size) -> memPtr\n                    {\n                        memPtr := allocate_unbounded()\n                        finalize_allocation(memPtr, size)\n                    }\n                    function array_allocation_size_bytes(length) -> size\n                    {\n                        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                        size := round_up_to_mul_of(length)\n                        size := add(size, 0x20)\n                    }\n                    function allocate_memory_array_bytes(length) -> memPtr\n                    {\n                        let allocSize := array_allocation_size_bytes(length)\n                        memPtr := allocate_memory(allocSize)\n                        mstore(memPtr, length)\n                    }\n                    function zero_value_for_split_bytes() -> ret\n                    { ret := 96 }\n                    function extract_returndata() -> data\n                    {\n                        switch returndatasize()\n                        case 0 {\n                            data := zero_value_for_split_bytes()\n                        }\n                        default {\n                            data := allocate_memory_array_bytes(returndatasize())\n                            returndatacopy(add(data, 0x20), 0, returndatasize())\n                        }\n                    }\n                    function store_literal_in_memory_213aa065932c4e20e48a20823f0c33d5b1c95a5f89892b1b61c3181e9ee210f1(memPtr)\n                    {\n                        mstore(add(memPtr, 0), \"withdraw failed!\")\n                    }\n                    function abi_encode_stringliteral_213aa065932c4e20e48a20823f0c33d5b1c95a5f89892b1b61c3181e9ee210f1(pos) -> end\n                    {\n                        pos := array_storeLengthForEncoding_string(pos, 16)\n                        store_literal_in_memory_213aa065932c4e20e48a20823f0c33d5b1c95a5f89892b1b61c3181e9ee210f1(pos)\n                        end := add(pos, 32)\n                    }\n                    function abi_encode_stringliteral_213a(headStart) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        mstore(add(headStart, 0), sub(tail, headStart))\n                        tail := abi_encode_stringliteral_213aa065932c4e20e48a20823f0c33d5b1c95a5f89892b1b61c3181e9ee210f1(tail)\n                    }\n                    function require_helper_stringliteral_213a(condition)\n                    {\n                        if iszero(condition)\n                        {\n                            let memPtr := allocate_unbounded()\n                            mstore(memPtr, shl(229, 4594637))\n                            let end := abi_encode_stringliteral_213a(add(memPtr, 4))\n                            revert(memPtr, sub(end, memPtr))\n                        }\n                    }\n                    /// @ast-id 77 @src 0:483:725  \"function withdraw() public {...\"\n                    function fun_withdraw()\n                    {\n                        /// @src 0:528:533  \"owner\"\n                        let _1 := read_from_storage_split_offset_address_payable(0x02)\n                        let expr := _1\n                        /// @src 0:537:547  \"msg.sender\"\n                        let expr_1 := caller()\n                        /// @src 0:528:547  \"owner == msg.sender\"\n                        let expr_2 := eq(convert_address_payable_to_address(expr), cleanup_address(expr_1))\n                        /// @src 0:520:568  \"require(owner == msg.sender,\\\"you are not owner\\\")\"\n                        require_helper_stringliteral(expr_2)\n                        /// @src 0:603:607  \"this\"\n                        let expr_address := address()\n                        /// @src 0:595:608  \"address(this)\"\n                        let expr_3 := convert_contract_Box_to_address(expr_address)\n                        /// @src 0:595:616  \"address(this).balance\"\n                        let expr_4 := balance(expr_3)\n                        /// @src 0:578:616  \"uint256 amount = address(this).balance\"\n                        let var_amount := expr_4\n                        /// @src 0:644:649  \"owner\"\n                        let _2 := read_from_storage_split_offset_address_payable(0x02)\n                        let expr_5 := _2\n                        /// @src 0:644:654  \"owner.call\"\n                        let expr_65_address := convert_address_payable_to_address(expr_5)\n                        /// @src 0:661:667  \"amount\"\n                        let _3 := var_amount\n                        let expr_6 := _3\n                        /// @src 0:644:668  \"owner.call{value:amount}\"\n                        let expr_67_address := expr_65_address\n                        let expr_value := expr_6\n                        /// @src 0:644:672  \"owner.call{value:amount}(\\\"\\\")\"\n                        let _4 := allocate_unbounded()\n                        let _5 := sub(abi_encode_packed_stringliteral_c5d2(_4), _4)\n                        let expr_component := call(gas(), expr_67_address, expr_value, _4, _5, 0, 0)\n                        pop(extract_returndata())\n                        /// @src 0:626:672  \"(bool success,) = owner.call{value:amount}(\\\"\\\")\"\n                        let var_success := expr_component\n                        /// @src 0:690:697  \"success\"\n                        let _6 := var_success\n                        let expr_7 := _6\n                        /// @src 0:682:717  \"require(success,\\\"withdraw failed!\\\")\"\n                        require_helper_stringliteral_213a(expr_7)\n                    }\n                    /// @src 0:71:822  \"contract Box{...\"\n                    function convert_uint160_to_address_payable(value) -> converted\n                    {\n                        converted := convert_uint160_to_uint160(value)\n                    }\n                    function convert_address_to_address_payable(value) -> converted\n                    {\n                        converted := convert_uint160_to_address_payable(value)\n                    }\n                    function shift_left(value) -> newValue\n                    { newValue := shl(8, value) }\n                    function update_byte_slice_shift_1(value, toInsert) -> result\n                    {\n                        let mask := sub(shl(168, 1), 256)\n                        toInsert := shift_left(toInsert)\n                        value := and(value, not(mask))\n                        result := or(value, and(toInsert, mask))\n                    }\n                    function convert_address_payable_to_address_payable(value) -> converted\n                    {\n                        converted := convert_uint160_to_address_payable(value)\n                    }\n                    function prepare_store_address_payable(value) -> ret\n                    { ret := value }\n                    function update_storage_value_offset_address_payable_to_address_payable(slot, value)\n                    {\n                        let convertedValue := convert_address_payable_to_address_payable(value)\n                        sstore(slot, update_byte_slice_shift_1(sload(slot), prepare_store_address_payable(convertedValue)))\n                    }\n                    /// @ast-id 90 @src 0:731:820  \"function changeOwner(address _newOwner)public {...\"\n                    function fun_changeOwner(var_newOwner)\n                    {\n                        /// @src 0:803:812  \"_newOwner\"\n                        let _1 := var_newOwner\n                        let expr := _1\n                        /// @src 0:795:813  \"payable(_newOwner)\"\n                        let expr_1 := convert_address_to_address_payable(expr)\n                        /// @src 0:787:813  \"owner = payable(_newOwner)\"\n                        update_storage_value_offset_address_payable_to_address_payable(0x02, expr_1)\n                    }\n                    /// @src 0:71:822  \"contract Box{...\"\n                    function shift_right_0_unsigned(value) -> newValue\n                    { newValue := shr(0, value) }\n                    function extract_from_storage_value_offset_bool(slot_value) -> value\n                    {\n                        value := cleanup_from_storage_bool(shift_right_0_unsigned(slot_value))\n                    }\n                    function read_from_storage_split_offset_bool(slot) -> value\n                    {\n                        value := extract_from_storage_value_offset_bool(sload(slot))\n                    }\n                    function store_literal_in_memory_c57a6ec4b9927c9dd7e51ad04ae0100f64df778f4f50c469bf1e8ebedc5ceb97(memPtr)\n                    {\n                        mstore(add(memPtr, 0), \"contract already funded\")\n                    }\n                    function abi_encode_stringliteral_c57a6ec4b9927c9dd7e51ad04ae0100f64df778f4f50c469bf1e8ebedc5ceb97(pos) -> end\n                    {\n                        pos := array_storeLengthForEncoding_string(pos, 23)\n                        store_literal_in_memory_c57a6ec4b9927c9dd7e51ad04ae0100f64df778f4f50c469bf1e8ebedc5ceb97(pos)\n                        end := add(pos, 32)\n                    }\n                    function abi_encode_stringliteral_c57a(headStart) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        mstore(add(headStart, 0), sub(tail, headStart))\n                        tail := abi_encode_stringliteral_c57a6ec4b9927c9dd7e51ad04ae0100f64df778f4f50c469bf1e8ebedc5ceb97(tail)\n                    }\n                    function require_helper_stringliteral_c57a(condition)\n                    {\n                        if iszero(condition)\n                        {\n                            let memPtr := allocate_unbounded()\n                            mstore(memPtr, shl(229, 4594637))\n                            let end := abi_encode_stringliteral_c57a(add(memPtr, 4))\n                            revert(memPtr, sub(end, memPtr))\n                        }\n                    }\n                    function shift_left_0(value) -> newValue\n                    { newValue := shl(0, value) }\n                    function update_byte_slice_shift(value, toInsert) -> result\n                    {\n                        let mask := not(0)\n                        toInsert := shift_left_0(toInsert)\n                        value := and(value, not(mask))\n                        result := or(value, and(toInsert, mask))\n                    }\n                    function convert_uint256_to_uint256(value) -> converted\n                    {\n                        converted := cleanup_uint256(identity(cleanup_uint256(value)))\n                    }\n                    function prepare_store_uint256(value) -> ret\n                    { ret := value }\n                    function update_storage_value_offset_uint256_to_uint256(slot, value)\n                    {\n                        let convertedValue := convert_uint256_to_uint256(value)\n                        sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n                    }\n                    function update_byte_slice_shift_0(value, toInsert) -> result\n                    {\n                        let mask := 255\n                        toInsert := shift_left_0(toInsert)\n                        value := and(value, not(mask))\n                        result := or(value, and(toInsert, mask))\n                    }\n                    function convert_bool_to_bool(value) -> converted\n                    {\n                        converted := cleanup_bool(value)\n                    }\n                    function prepare_store_bool(value) -> ret\n                    { ret := value }\n                    function update_storage_value_offset_bool_to_bool(slot, value)\n                    {\n                        let convertedValue := convert_bool_to_bool(value)\n                        sstore(slot, update_byte_slice_shift_0(sload(slot), prepare_store_bool(convertedValue)))\n                    }\n                    /// @ast-id 43 @src 0:214:477  \"function deposit(uint _deadline) payable public{...\"\n                    function fun_deposit(var_deadline)\n                    {\n                        /// @src 0:279:295  \"isContractFunded\"\n                        let _1 := read_from_storage_split_offset_bool(0x02)\n                        let expr := _1\n                        /// @src 0:299:304  \"false\"\n                        let expr_1 := 0x00\n                        /// @src 0:279:304  \"isContractFunded == false\"\n                        let expr_2 := eq(cleanup_bool(expr), cleanup_bool(expr_1))\n                        /// @src 0:271:331  \"require(isContractFunded == false,\\\"contract already funded\\\")\"\n                        require_helper_stringliteral_c57a(expr_2)\n                        /// @src 0:355:370  \"block.timestamp\"\n                        let expr_3 := timestamp()\n                        /// @src 0:341:370  \"initialTime = block.timestamp\"\n                        update_storage_value_offset_uint256_to_uint256(0x01, expr_3)\n                        /// @src 0:391:400  \"_deadline\"\n                        let _2 := var_deadline\n                        let expr_4 := _2\n                        /// @src 0:380:400  \"deadline = _deadline\"\n                        update_storage_value_offset_uint256_to_uint256(0x00, expr_4)\n                        /// @src 0:429:433  \"true\"\n                        let expr_5 := 0x01\n                        /// @src 0:410:433  \"isContractFunded = true\"\n                        update_storage_value_offset_bool_to_bool(0x02, expr_5)\n                        /// @src 0:459:469  \"msg.sender\"\n                        let expr_6 := caller()\n                        /// @src 0:451:470  \"payable(msg.sender)\"\n                        let expr_7 := convert_address_to_address_payable(expr_6)\n                        /// @src 0:443:470  \"owner = payable(msg.sender)\"\n                        update_storage_value_offset_address_payable_to_address_payable(0x02, expr_7)\n                    }\n                }\n                data \".metadata\" hex\"a2646970667358221220b1c8c47a15b582e0f1ded151c785262c0437fd26b8fd951c5a4bb25687ca880864736f6c634300081c0033\"\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220a6a6a9fc38ee7b208644e7d39d7230f8c92f2cc2ca75b4bb609d393d63723b1764736f6c634300081c0033\"\n    }\n}\n",
					"hash": "71c35045cce563340e5588a6934c6dfe89f1940bc77cc31bc72e783d27012f55",
					"factoryDependencies": {
						"76d222742bbd1d87ed0fdaf5066f3ec9a6d6c8cddd34127146dcda0afad1269f": "contracts/SwappBox.sol:Box"
					}
				}
			}
		},
		"sources": {
			"contracts/SwappBox.sol": {
				"id": 0,
				"ast": {
					"absolutePath": "contracts/SwappBox.sol",
					"exportedSymbols": {
						"Box": [
							91
						],
						"SwappyBox": [
							191
						]
					},
					"id": 192,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".2",
								"<",
								"0.9",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "37:31:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Box",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 91,
							"linearizedBaseContracts": [
								91
							],
							"name": "Box",
							"nameLocation": "80:3:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "29dcb0cf",
									"id": 3,
									"mutability": "mutable",
									"name": "deadline",
									"nameLocation": "101:8:0",
									"nodeType": "VariableDeclaration",
									"scope": 91,
									"src": "89:20:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "89:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "9ced0e9b",
									"id": 5,
									"mutability": "mutable",
									"name": "initialTime",
									"nameLocation": "127:11:0",
									"nodeType": "VariableDeclaration",
									"scope": 91,
									"src": "115:23:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 4,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "115:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "c934e08e",
									"id": 7,
									"mutability": "mutable",
									"name": "isContractFunded",
									"nameLocation": "157:16:0",
									"nodeType": "VariableDeclaration",
									"scope": 91,
									"src": "144:29:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 6,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "144:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8da5cb5b",
									"id": 9,
									"mutability": "mutable",
									"name": "owner",
									"nameLocation": "202:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 91,
									"src": "179:28:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address_payable",
										"typeString": "address payable"
									},
									"typeName": {
										"id": 8,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "179:15:0",
										"stateMutability": "payable",
										"typeDescriptions": {
											"typeIdentifier": "t_address_payable",
											"typeString": "address payable"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 42,
										"nodeType": "Block",
										"src": "261:216:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 17,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 15,
																"name": "isContractFunded",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "279:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "66616c7365",
																"id": 16,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "299:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"src": "279:25:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "636f6e747261637420616c72656164792066756e646564",
															"id": 18,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "305:25:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c57a6ec4b9927c9dd7e51ad04ae0100f64df778f4f50c469bf1e8ebedc5ceb97",
																"typeString": "literal_string \"contract already funded\""
															},
															"value": "contract already funded"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c57a6ec4b9927c9dd7e51ad04ae0100f64df778f4f50c469bf1e8ebedc5ceb97",
																"typeString": "literal_string \"contract already funded\""
															}
														],
														"id": 14,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "271:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 19,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "271:60:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 20,
												"nodeType": "ExpressionStatement",
												"src": "271:60:0"
											},
											{
												"expression": {
													"id": 24,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 21,
														"name": "initialTime",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 5,
														"src": "341:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 22,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "355:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 23,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "361:9:0",
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "355:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "341:29:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 25,
												"nodeType": "ExpressionStatement",
												"src": "341:29:0"
											},
											{
												"expression": {
													"id": 28,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 26,
														"name": "deadline",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3,
														"src": "380:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 27,
														"name": "_deadline",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 11,
														"src": "391:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "380:20:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 29,
												"nodeType": "ExpressionStatement",
												"src": "380:20:0"
											},
											{
												"expression": {
													"id": 32,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 30,
														"name": "isContractFunded",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "410:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 31,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "429:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "410:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 33,
												"nodeType": "ExpressionStatement",
												"src": "410:23:0"
											},
											{
												"expression": {
													"id": 40,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 34,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 9,
														"src": "443:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"id": 37,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "459:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 38,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "463:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "459:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 36,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "451:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_payable_$",
																"typeString": "type(address payable)"
															},
															"typeName": {
																"id": 35,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "451:8:0",
																"stateMutability": "payable",
																"typeDescriptions": {}
															}
														},
														"id": 39,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "451:19:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "443:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"id": 41,
												"nodeType": "ExpressionStatement",
												"src": "443:27:0"
											}
										]
									},
									"functionSelector": "b6b55f25",
									"id": 43,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "deposit",
									"nameLocation": "223:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 11,
												"mutability": "mutable",
												"name": "_deadline",
												"nameLocation": "236:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 43,
												"src": "231:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 10,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "231:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "230:16:0"
									},
									"returnParameters": {
										"id": 13,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "261:0:0"
									},
									"scope": 91,
									"src": "214:263:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 76,
										"nodeType": "Block",
										"src": "510:215:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 50,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 47,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 9,
																"src": "528:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 48,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "537:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 49,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "541:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "537:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "528:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "796f7520617265206e6f74206f776e6572",
															"id": 51,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "548:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_978897ed65b2e5af5d002526b7872b151fa7174b4e2fd1e87ff9808e2d24c95e",
																"typeString": "literal_string \"you are not owner\""
															},
															"value": "you are not owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_978897ed65b2e5af5d002526b7872b151fa7174b4e2fd1e87ff9808e2d24c95e",
																"typeString": "literal_string \"you are not owner\""
															}
														],
														"id": 46,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "520:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 52,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "520:48:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 53,
												"nodeType": "ExpressionStatement",
												"src": "520:48:0"
											},
											{
												"assignments": [
													55
												],
												"declarations": [
													{
														"constant": false,
														"id": 55,
														"mutability": "mutable",
														"name": "amount",
														"nameLocation": "586:6:0",
														"nodeType": "VariableDeclaration",
														"scope": 76,
														"src": "578:14:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 54,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "578:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 61,
												"initialValue": {
													"expression": {
														"arguments": [
															{
																"id": 58,
																"name": "this",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967268,
																"src": "603:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_Box_$91",
																	"typeString": "contract Box"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_Box_$91",
																	"typeString": "contract Box"
																}
															],
															"id": 57,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "595:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 56,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "595:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 59,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "595:13:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 60,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "609:7:0",
													"memberName": "balance",
													"nodeType": "MemberAccess",
													"src": "595:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "578:38:0"
											},
											{
												"assignments": [
													63,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 63,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "632:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 76,
														"src": "627:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 62,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "627:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 70,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 68,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "669:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 64,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 9,
																"src": "644:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 65,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "650:4:0",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "644:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 67,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 66,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 55,
																"src": "661:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "644:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 69,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "644:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "626:46:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 72,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 63,
															"src": "690:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "7769746864726177206661696c656421",
															"id": 73,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "698:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_213aa065932c4e20e48a20823f0c33d5b1c95a5f89892b1b61c3181e9ee210f1",
																"typeString": "literal_string \"withdraw failed!\""
															},
															"value": "withdraw failed!"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_213aa065932c4e20e48a20823f0c33d5b1c95a5f89892b1b61c3181e9ee210f1",
																"typeString": "literal_string \"withdraw failed!\""
															}
														],
														"id": 71,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "682:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 74,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "682:35:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 75,
												"nodeType": "ExpressionStatement",
												"src": "682:35:0"
											}
										]
									},
									"functionSelector": "3ccfd60b",
									"id": 77,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "withdraw",
									"nameLocation": "492:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 44,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "500:2:0"
									},
									"returnParameters": {
										"id": 45,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "510:0:0"
									},
									"scope": 91,
									"src": "483:242:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 89,
										"nodeType": "Block",
										"src": "777:43:0",
										"statements": [
											{
												"expression": {
													"id": 87,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 82,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 9,
														"src": "787:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 85,
																"name": "_newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 79,
																"src": "803:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 84,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "795:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_payable_$",
																"typeString": "type(address payable)"
															},
															"typeName": {
																"id": 83,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "795:8:0",
																"stateMutability": "payable",
																"typeDescriptions": {}
															}
														},
														"id": 86,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "795:18:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "787:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"id": 88,
												"nodeType": "ExpressionStatement",
												"src": "787:26:0"
											}
										]
									},
									"functionSelector": "a6f9dae1",
									"id": 90,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "changeOwner",
									"nameLocation": "740:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 80,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 79,
												"mutability": "mutable",
												"name": "_newOwner",
												"nameLocation": "760:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 90,
												"src": "752:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 78,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "752:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "751:19:0"
									},
									"returnParameters": {
										"id": 81,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "777:0:0"
									},
									"scope": 91,
									"src": "731:89:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 192,
							"src": "71:751:0",
							"usedErrors": [],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SwappyBox",
							"contractDependencies": [
								91
							],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 191,
							"linearizedBaseContracts": [
								191
							],
							"name": "SwappyBox",
							"nameLocation": "832:9:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "754215a1",
									"id": 94,
									"mutability": "mutable",
									"name": "box",
									"nameLocation": "859:3:0",
									"nodeType": "VariableDeclaration",
									"scope": 191,
									"src": "848:14:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_Box_$91",
										"typeString": "contract Box"
									},
									"typeName": {
										"id": 93,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 92,
											"name": "Box",
											"nameLocations": [
												"848:3:0"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 91,
											"src": "848:3:0"
										},
										"referencedDeclaration": 91,
										"src": "848:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Box_$91",
											"typeString": "contract Box"
										}
									},
									"visibility": "public"
								},
								{
									"canonicalName": "SwappyBox.BidTrack",
									"id": 107,
									"members": [
										{
											"constant": false,
											"id": 96,
											"mutability": "mutable",
											"name": "bidInitialTime",
											"nameLocation": "898:14:0",
											"nodeType": "VariableDeclaration",
											"scope": 107,
											"src": "893:19:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 95,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "893:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 98,
											"mutability": "mutable",
											"name": "bidEndTime",
											"nameLocation": "927:10:0",
											"nodeType": "VariableDeclaration",
											"scope": 107,
											"src": "922:15:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 97,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "922:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 100,
											"mutability": "mutable",
											"name": "totalBid",
											"nameLocation": "952:8:0",
											"nodeType": "VariableDeclaration",
											"scope": 107,
											"src": "947:13:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 99,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "947:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 102,
											"mutability": "mutable",
											"name": "basePrice",
											"nameLocation": "975:9:0",
											"nodeType": "VariableDeclaration",
											"scope": 107,
											"src": "970:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 101,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "970:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 104,
											"mutability": "mutable",
											"name": "lastPrice",
											"nameLocation": "999:9:0",
											"nodeType": "VariableDeclaration",
											"scope": 107,
											"src": "994:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 103,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "994:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 106,
											"mutability": "mutable",
											"name": "currentWinner",
											"nameLocation": "1026:13:0",
											"nodeType": "VariableDeclaration",
											"scope": 107,
											"src": "1018:21:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 105,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1018:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "BidTrack",
									"nameLocation": "875:8:0",
									"nodeType": "StructDefinition",
									"scope": 191,
									"src": "868:178:0",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "13b980a4",
									"id": 112,
									"mutability": "mutable",
									"name": "boxes",
									"nameLocation": "1090:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 191,
									"src": "1055:40:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$",
										"typeString": "mapping(address => address[])"
									},
									"typeName": {
										"id": 111,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 108,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1063:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1055:27:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$",
											"typeString": "mapping(address => address[])"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"baseType": {
												"id": 109,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1072:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"id": 110,
											"nodeType": "ArrayTypeName",
											"src": "1072:9:0",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
												"typeString": "address[]"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "a4e9ea9b",
									"id": 117,
									"mutability": "mutable",
									"name": "boxData",
									"nameLocation": "1135:7:0",
									"nodeType": "VariableDeclaration",
									"scope": 191,
									"src": "1101:41:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_BidTrack_$107_storage_$",
										"typeString": "mapping(address => struct SwappyBox.BidTrack)"
									},
									"typeName": {
										"id": 116,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 113,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1109:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1101:26:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_BidTrack_$107_storage_$",
											"typeString": "mapping(address => struct SwappyBox.BidTrack)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 115,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 114,
												"name": "BidTrack",
												"nameLocations": [
													"1118:8:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 107,
												"src": "1118:8:0"
											},
											"referencedDeclaration": 107,
											"src": "1118:8:0",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_BidTrack_$107_storage_ptr",
												"typeString": "struct SwappyBox.BidTrack"
											}
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 139,
										"nodeType": "Block",
										"src": "1180:81:0",
										"statements": [
											{
												"assignments": [
													122
												],
												"declarations": [
													{
														"constant": false,
														"id": 122,
														"mutability": "mutable",
														"name": "bx",
														"nameLocation": "1194:2:0",
														"nodeType": "VariableDeclaration",
														"scope": 139,
														"src": "1190:6:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_Box_$91",
															"typeString": "contract Box"
														},
														"typeName": {
															"id": 121,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 120,
																"name": "Box",
																"nameLocations": [
																	"1190:3:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 91,
																"src": "1190:3:0"
															},
															"referencedDeclaration": 91,
															"src": "1190:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_Box_$91",
																"typeString": "contract Box"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 127,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 125,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "1199:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_creation_nonpayable$__$returns$_t_contract$_Box_$91_$",
															"typeString": "function () returns (contract Box)"
														},
														"typeName": {
															"id": 124,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 123,
																"name": "Box",
																"nameLocations": [
																	"1203:3:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 91,
																"src": "1203:3:0"
															},
															"referencedDeclaration": 91,
															"src": "1203:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_Box_$91",
																"typeString": "contract Box"
															}
														}
													},
													"id": 126,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1199:9:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_Box_$91",
														"typeString": "contract Box"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1190:18:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 135,
																	"name": "bx",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 122,
																	"src": "1249:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Box_$91",
																		"typeString": "contract Box"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Box_$91",
																		"typeString": "contract Box"
																	}
																],
																"id": 134,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1241:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 133,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1241:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 136,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1241:11:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"baseExpression": {
																"id": 128,
																"name": "boxes",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 112,
																"src": "1218:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$",
																	"typeString": "mapping(address => address[] storage ref)"
																}
															},
															"id": 131,
															"indexExpression": {
																"expression": {
																	"id": 129,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1224:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 130,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1228:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1224:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "1218:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															}
														},
														"id": 132,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1236:4:0",
														"memberName": "push",
														"nodeType": "MemberAccess",
														"src": "1218:22:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$attached_to$_t_array$_t_address_$dyn_storage_ptr_$",
															"typeString": "function (address[] storage pointer,address)"
														}
													},
													"id": 137,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1218:35:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 138,
												"nodeType": "ExpressionStatement",
												"src": "1218:35:0"
											}
										]
									},
									"functionSelector": "328e6997",
									"id": 140,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "createYourBox",
									"nameLocation": "1157:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 118,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1170:2:0"
									},
									"returnParameters": {
										"id": 119,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1180:0:0"
									},
									"scope": 191,
									"src": "1148:113:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 177,
										"nodeType": "Block",
										"src": "1333:199:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 154,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 148,
																"name": "_index",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 142,
																"src": "1351:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 149,
																		"name": "boxes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 112,
																		"src": "1360:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$",
																			"typeString": "mapping(address => address[] storage ref)"
																		}
																	},
																	"id": 152,
																	"indexExpression": {
																		"expression": {
																			"id": 150,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "1366:3:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 151,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1370:6:0",
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "1366:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1360:17:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_address_$dyn_storage",
																		"typeString": "address[] storage ref"
																	}
																},
																"id": 153,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1378:6:0",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "1360:24:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1351:33:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c696420626f7820696e646578",
															"id": 155,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1386:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebac15005998152c7868d5d3837373e86795737fa2f9ca6c69b26b94f9417814",
																"typeString": "literal_string \"Invalid box index\""
															},
															"value": "Invalid box index"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebac15005998152c7868d5d3837373e86795737fa2f9ca6c69b26b94f9417814",
																"typeString": "literal_string \"Invalid box index\""
															}
														],
														"id": 147,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1343:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 156,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1343:63:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 157,
												"nodeType": "ExpressionStatement",
												"src": "1343:63:0"
											},
											{
												"assignments": [
													159
												],
												"declarations": [
													{
														"constant": false,
														"id": 159,
														"mutability": "mutable",
														"name": "boxAddress",
														"nameLocation": "1425:10:0",
														"nodeType": "VariableDeclaration",
														"scope": 177,
														"src": "1417:18:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 158,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "1417:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 166,
												"initialValue": {
													"baseExpression": {
														"baseExpression": {
															"id": 160,
															"name": "boxes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 112,
															"src": "1438:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$",
																"typeString": "mapping(address => address[] storage ref)"
															}
														},
														"id": 163,
														"indexExpression": {
															"expression": {
																"id": 161,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1444:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 162,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1448:6:0",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1444:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "1438:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_storage",
															"typeString": "address[] storage ref"
														}
													},
													"id": 165,
													"indexExpression": {
														"id": 164,
														"name": "_index",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 142,
														"src": "1456:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "1438:25:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1417:46:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 174,
															"name": "_deadline",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 144,
															"src": "1515:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"id": 168,
																		"name": "boxAddress",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 159,
																		"src": "1477:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 167,
																	"name": "Box",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 91,
																	"src": "1473:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Box_$91_$",
																		"typeString": "type(contract Box)"
																	}
																},
																"id": 169,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1473:15:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_Box_$91",
																	"typeString": "contract Box"
																}
															},
															"id": 170,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1489:7:0",
															"memberName": "deposit",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 43,
															"src": "1473:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_payable$_t_uint256_$returns$__$",
																"typeString": "function (uint256) payable external"
															}
														},
														"id": 173,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"expression": {
																	"id": 171,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1504:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 172,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1508:5:0",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "1504:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "1473:41:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_payable$_t_uint256_$returns$__$value",
															"typeString": "function (uint256) payable external"
														}
													},
													"id": 175,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1473:52:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 176,
												"nodeType": "ExpressionStatement",
												"src": "1473:52:0"
											}
										]
									},
									"functionSelector": "5cf510f8",
									"id": 178,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "depositToBox",
									"nameLocation": "1276:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 145,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "_index",
												"nameLocation": "1294:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "1289:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 141,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1289:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 144,
												"mutability": "mutable",
												"name": "_deadline",
												"nameLocation": "1307:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "1302:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 143,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1302:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1288:29:0"
									},
									"returnParameters": {
										"id": 146,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1333:0:0"
									},
									"scope": 191,
									"src": "1267:265:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 181,
										"nodeType": "Block",
										"src": "1564:8:0",
										"statements": []
									},
									"functionSelector": "3ccfd60b",
									"id": 182,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "withdraw",
									"nameLocation": "1547:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 179,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1555:2:0"
									},
									"returnParameters": {
										"id": 180,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1564:0:0"
									},
									"scope": 191,
									"src": "1538:34:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 185,
										"nodeType": "Block",
										"src": "1599:8:0",
										"statements": []
									},
									"functionSelector": "1998aeef",
									"id": 186,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "bid",
									"nameLocation": "1587:3:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 183,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1590:2:0"
									},
									"returnParameters": {
										"id": 184,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1599:0:0"
									},
									"scope": 191,
									"src": "1578:29:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 189,
										"nodeType": "Block",
										"src": "1639:8:0",
										"statements": []
									},
									"functionSelector": "98d5fdca",
									"id": 190,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getPrice",
									"nameLocation": "1622:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 187,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1630:2:0"
									},
									"returnParameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1639:0:0"
									},
									"scope": 191,
									"src": "1613:34:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 192,
							"src": "823:833:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "37:1621:0"
				}
			}
		},
		"errors": [],
		"version": "0.8.28",
		"long_version": "0.8.28+commit.7893614a.Emscripten.clang",
		"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8"
	}
}