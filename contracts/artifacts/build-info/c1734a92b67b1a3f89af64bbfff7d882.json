{
	"id": "c1734a92b67b1a3f89af64bbfff7d882",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.28",
	"solcLongVersion": "0.8.28+commit.7893614a",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/3_Ballot.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.7.0 <0.9.0;\n\n/** \n * @title Ballot\n * @dev Implements voting process along with vote delegation\n */\ncontract Ballot {\n\n    struct Voter {\n        uint weight; // weight is accumulated by delegation\n        bool voted;  // if true, that person already voted\n        address delegate; // person delegated to\n        uint vote;   // index of the voted proposal\n    }\n\n    struct Proposal {\n        // If you can limit the length to a certain number of bytes, \n        // always use one of bytes1 to bytes32 because they are much cheaper\n        bytes32 name;   // short name (up to 32 bytes)\n        uint voteCount; // number of accumulated votes\n    }\n\n    address public chairperson;\n\n    mapping(address => Voter) public voters;\n\n    Proposal[] public proposals;\n\n    /** \n     * @dev Create a new ballot to choose one of 'proposalNames'.\n     * @param proposalNames names of proposals\n     */\n    constructor(bytes32[] memory proposalNames) {\n        chairperson = msg.sender;\n        voters[chairperson].weight = 1;\n\n        for (uint i = 0; i < proposalNames.length; i++) {\n            // 'Proposal({...})' creates a temporary\n            // Proposal object and 'proposals.push(...)'\n            // appends it to the end of 'proposals'.\n            proposals.push(Proposal({\n                name: proposalNames[i],\n                voteCount: 0\n            }));\n        }\n    }\n\n    /** \n     * @dev Give 'voter' the right to vote on this ballot. May only be called by 'chairperson'.\n     * @param voter address of voter\n     */\n    function giveRightToVote(address voter) public {\n        require(\n            msg.sender == chairperson,\n            \"Only chairperson can give right to vote.\"\n        );\n        require(\n            !voters[voter].voted,\n            \"The voter already voted.\"\n        );\n        require(voters[voter].weight == 0);\n        voters[voter].weight = 1;\n    }\n\n    /**\n     * @dev Delegate your vote to the voter 'to'.\n     * @param to address to which vote is delegated\n     */\n    function delegate(address to) public {\n        Voter storage sender = voters[msg.sender];\n        require(!sender.voted, \"You already voted.\");\n        require(to != msg.sender, \"Self-delegation is disallowed.\");\n\n        while (voters[to].delegate != address(0)) {\n            to = voters[to].delegate;\n\n            // We found a loop in the delegation, not allowed.\n            require(to != msg.sender, \"Found loop in delegation.\");\n        }\n        sender.voted = true;\n        sender.delegate = to;\n        Voter storage delegate_ = voters[to];\n        if (delegate_.voted) {\n            // If the delegate already voted,\n            // directly add to the number of votes\n            proposals[delegate_.vote].voteCount += sender.weight;\n        } else {\n            // If the delegate did not vote yet,\n            // add to her weight.\n            delegate_.weight += sender.weight;\n        }\n    }\n\n    /**\n     * @dev Give your vote (including votes delegated to you) to proposal 'proposals[proposal].name'.\n     * @param proposal index of proposal in the proposals array\n     */\n    function vote(uint proposal) public {\n        Voter storage sender = voters[msg.sender];\n        require(sender.weight != 0, \"Has no right to vote\");\n        require(!sender.voted, \"Already voted.\");\n        sender.voted = true;\n        sender.vote = proposal;\n\n        // If 'proposal' is out of the range of the array,\n        // this will throw automatically and revert all\n        // changes.\n        proposals[proposal].voteCount += sender.weight;\n    }\n\n    /** \n     * @dev Computes the winning proposal taking all previous votes into account.\n     * @return winningProposal_ index of winning proposal in the proposals array\n     */\n    function winningProposal() public view\n            returns (uint winningProposal_)\n    {\n        uint winningVoteCount = 0;\n        for (uint p = 0; p < proposals.length; p++) {\n            if (proposals[p].voteCount > winningVoteCount) {\n                winningVoteCount = proposals[p].voteCount;\n                winningProposal_ = p;\n            }\n        }\n    }\n\n    /** \n     * @dev Calls winningProposal() function to get the index of the winner contained in the proposals array and then\n     * @return winnerName_ the name of the winner\n     */\n    function winnerName() public view\n            returns (bytes32 winnerName_)\n    {\n        winnerName_ = proposals[winningProposal()].name;\n    }\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.deployedBytecode",
						"evm.methodIdentifiers"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"contracts/3_Ballot.sol": {
				"Ballot": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes32[]",
									"name": "proposalNames",
									"type": "bytes32[]"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "chairperson",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "delegate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "voter",
									"type": "address"
								}
							],
							"name": "giveRightToVote",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "proposals",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "name",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "voteCount",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "proposal",
									"type": "uint256"
								}
							],
							"name": "vote",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "voters",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "weight",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "voted",
									"type": "bool"
								},
								{
									"internalType": "address",
									"name": "delegate",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "vote",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "winnerName",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "winnerName_",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "winningProposal",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "winningProposal_",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"metadata": {
						"optimizer_settings": {
							"is_debug_logging_enabled": false,
							"is_fallback_to_size_enabled": false,
							"is_verify_each_enabled": false,
							"level_back_end": "Aggressive",
							"level_middle_end": "Aggressive",
							"level_middle_end_size": "Zero"
						},
						"revive_pallet_version": null,
						"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8",
						"solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proposalNames\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"chairperson\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"giveRightToVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposal\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"voted\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnerName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"winnerName_\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winningProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"winningProposal_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implements voting process along with vote delegation\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Create a new ballot to choose one of 'proposalNames'.\",\"params\":{\"proposalNames\":\"names of proposals\"}},\"delegate(address)\":{\"details\":\"Delegate your vote to the voter 'to'.\",\"params\":{\"to\":\"address to which vote is delegated\"}},\"giveRightToVote(address)\":{\"details\":\"Give 'voter' the right to vote on this ballot. May only be called by 'chairperson'.\",\"params\":{\"voter\":\"address of voter\"}},\"vote(uint256)\":{\"details\":\"Give your vote (including votes delegated to you) to proposal 'proposals[proposal].name'.\",\"params\":{\"proposal\":\"index of proposal in the proposals array\"}},\"winnerName()\":{\"details\":\"Calls winningProposal() function to get the index of the winner contained in the proposals array and then\",\"returns\":{\"winnerName_\":\"the name of the winner\"}},\"winningProposal()\":{\"details\":\"Computes the winning proposal taking all previous votes into account.\",\"returns\":{\"winningProposal_\":\"index of winning proposal in the proposals array\"}}},\"title\":\"Ballot\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/3_Ballot.sol\":\"Ballot\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/3_Ballot.sol\":{\"keccak256\":\"0x83fe6b367c140a5c7678c420da454c8c3866ccae12da149c5da3ce6568d29b6c\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://5902f2f468a1f776b8f2cb9d584371af88e181954298af92402fca01d0dba3e7\",\"dweb:/ipfs/QmSUodhSvoorFL5m5CNqve8YvmuBpjCq17NbTf4GUX8ydw\"]}},\"version\":1}",
						"solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
					},
					"devdoc": {
						"details": "Implements voting process along with vote delegation",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Create a new ballot to choose one of 'proposalNames'.",
								"params": {
									"proposalNames": "names of proposals"
								}
							},
							"delegate(address)": {
								"details": "Delegate your vote to the voter 'to'.",
								"params": {
									"to": "address to which vote is delegated"
								}
							},
							"giveRightToVote(address)": {
								"details": "Give 'voter' the right to vote on this ballot. May only be called by 'chairperson'.",
								"params": {
									"voter": "address of voter"
								}
							},
							"vote(uint256)": {
								"details": "Give your vote (including votes delegated to you) to proposal 'proposals[proposal].name'.",
								"params": {
									"proposal": "index of proposal in the proposals array"
								}
							},
							"winnerName()": {
								"details": "Calls winningProposal() function to get the index of the winner contained in the proposals array and then",
								"returns": {
									"winnerName_": "the name of the winner"
								}
							},
							"winningProposal()": {
								"details": "Computes the winning proposal taking all previous votes into account.",
								"returns": {
									"winningProposal_": "index of winning proposal in the proposals array"
								}
							}
						},
						"title": "Ballot",
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					},
					"storageLayout": {
						"storage": [
							{
								"astId": 18,
								"contract": "contracts/3_Ballot.sol:Ballot",
								"label": "chairperson",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 23,
								"contract": "contracts/3_Ballot.sol:Ballot",
								"label": "voters",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_struct(Voter)11_storage)"
							},
							{
								"astId": 27,
								"contract": "contracts/3_Ballot.sol:Ballot",
								"label": "proposals",
								"offset": 0,
								"slot": "2",
								"type": "t_array(t_struct(Proposal)16_storage)dyn_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_struct(Proposal)16_storage)dyn_storage": {
								"base": "t_struct(Proposal)16_storage",
								"encoding": "dynamic_array",
								"label": "struct Ballot.Proposal[]",
								"numberOfBytes": "32"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_mapping(t_address,t_struct(Voter)11_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct Ballot.Voter)",
								"numberOfBytes": "32",
								"value": "t_struct(Voter)11_storage"
							},
							"t_struct(Proposal)16_storage": {
								"encoding": "inplace",
								"label": "struct Ballot.Proposal",
								"members": [
									{
										"astId": 13,
										"contract": "contracts/3_Ballot.sol:Ballot",
										"label": "name",
										"offset": 0,
										"slot": "0",
										"type": "t_bytes32"
									},
									{
										"astId": 15,
										"contract": "contracts/3_Ballot.sol:Ballot",
										"label": "voteCount",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "64"
							},
							"t_struct(Voter)11_storage": {
								"encoding": "inplace",
								"label": "struct Ballot.Voter",
								"members": [
									{
										"astId": 4,
										"contract": "contracts/3_Ballot.sol:Ballot",
										"label": "weight",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 6,
										"contract": "contracts/3_Ballot.sol:Ballot",
										"label": "voted",
										"offset": 0,
										"slot": "1",
										"type": "t_bool"
									},
									{
										"astId": 8,
										"contract": "contracts/3_Ballot.sol:Ballot",
										"label": "delegate",
										"offset": 1,
										"slot": "1",
										"type": "t_address"
									},
									{
										"astId": 10,
										"contract": "contracts/3_Ballot.sol:Ballot",
										"label": "vote",
										"offset": 0,
										"slot": "2",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "96"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"evm": {
						"assembly": "// RO data = 0/0 bytes\n// RW data = 0/65552 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 11882\n// Code size = 37566 bytes\n\n      : @0 (gas: 2)\n     0: i32 a2 = a0 >> 0x10\n     3: jump @6 if a2 != 0\n      : @1 (gas: 2)\n     6: a2 = 0x10001\n    11: jump @6 if a1 >=u a2\n      : @2 (gas: 4)\n    14: a1 = a1 + a0\n    17: i32 a1 = a1 + 0x1f\n    20: a1 = a1 & 0xffffffffffffffe0\n    23: jump @7 if a1 >=u 65537\n      : @3 (gas: 2)\n    29: a3 = i32 [0x20000]\n    34: jump @5 if a3 >=u a1\n      : @4 (gas: 4)\n    37: u32 [0x20000] = a1\n    42: a1 = 0x20010\n    47: a0 = a0 + a1\n    50: ret\n      : @5 (gas: 3)\n    52: a1 = 0x20010\n    57: a0 = a0 + a1\n    60: ret\n      : @6 (gas: 1)\n    62: trap\n      : @7 (gas: 1)\n    63: trap\n      : @8 (gas: 13)\n    64: sp = sp + 0xffffffffffffffd8\n    67: u64 [sp + 0x20] = ra\n    70: u64 [sp + 0x18] = s0\n    73: u64 [sp + 0x10] = s1\n    76: a2 = u64 [a1]\n    78: u64 [sp + 0x8] = a2\n    81: a2 = u64 [a1 + 0x8]\n    84: u64 [sp] = a2\n    86: s0 = u64 [a1 + 0x10]\n    89: s1 = u64 [a1 + 0x18]\n    92: i32 a0 = a0 + 0\n    94: a1 = 0x20\n    97: ra = 2, jump @0\n      : @9 [@dyn 1] (gas: 71)\n   101: a1 = reverse s1\n   103: a2 = reverse s0\n   105: a3 = u64 [sp]\n   107: a3 = reverse a3\n   109: a4 = u64 [sp + 0x8]\n   112: a4 = reverse a4\n   114: u8 [a0 + 0x18] = a4\n   117: u8 [a0 + 0x10] = a3\n   120: u8 [a0 + 0x8] = a2\n   123: u8 [a0] = a1\n   125: a5 = a4 >> 0x38\n   128: u8 [a0 + 0x1f] = a5\n   131: a5 = a4 >> 0x30\n   134: u8 [a0 + 0x1e] = a5\n   137: a5 = a4 >> 0x28\n   140: u8 [a0 + 0x1d] = a5\n   143: a5 = a4 >> 0x20\n   146: u8 [a0 + 0x1c] = a5\n   149: a5 = a4 >> 0x18\n   152: u8 [a0 + 0x1b] = a5\n   155: a5 = a4 >> 0x10\n   158: u8 [a0 + 0x1a] = a5\n   161: a4 = a4 >> 0x8\n   164: u8 [a0 + 0x19] = a4\n   167: a4 = a3 >> 0x38\n   170: u8 [a0 + 0x17] = a4\n   173: a4 = a3 >> 0x30\n   176: u8 [a0 + 0x16] = a4\n   179: a4 = a3 >> 0x28\n   182: u8 [a0 + 0x15] = a4\n   185: a4 = a3 >> 0x20\n   188: u8 [a0 + 0x14] = a4\n   191: a4 = a3 >> 0x18\n   194: u8 [a0 + 0x13] = a4\n   197: a4 = a3 >> 0x10\n   200: u8 [a0 + 0x12] = a4\n   203: a3 = a3 >> 0x8\n   206: u8 [a0 + 0x11] = a3\n   209: a3 = a2 >> 0x38\n   212: u8 [a0 + 0xf] = a3\n   215: a3 = a2 >> 0x30\n   218: u8 [a0 + 0xe] = a3\n   221: a3 = a2 >> 0x28\n   224: u8 [a0 + 0xd] = a3\n   227: a3 = a2 >> 0x20\n   230: u8 [a0 + 0xc] = a3\n   233: a3 = a2 >> 0x18\n   236: u8 [a0 + 0xb] = a3\n   239: a3 = a2 >> 0x10\n   242: u8 [a0 + 0xa] = a3\n   245: a2 = a2 >> 0x8\n   248: u8 [a0 + 0x9] = a2\n   251: a2 = a1 >> 0x38\n   254: u8 [a0 + 0x7] = a2\n   257: a2 = a1 >> 0x30\n   260: u8 [a0 + 0x6] = a2\n   263: a2 = a1 >> 0x28\n   266: u8 [a0 + 0x5] = a2\n   269: a2 = a1 >> 0x20\n   272: u8 [a0 + 0x4] = a2\n   275: a2 = a1 >> 0x18\n   278: u8 [a0 + 0x3] = a2\n   281: a2 = a1 >> 0x10\n   284: u8 [a0 + 0x2] = a2\n   287: a1 = a1 >> 0x8\n   290: u8 [a0 + 0x1] = a1\n   293: ra = u64 [sp + 0x20]\n   296: s0 = u64 [sp + 0x18]\n   299: s1 = u64 [sp + 0x10]\n   302: sp = sp + 0x28\n   305: ret\n      : @10 (gas: 6)\n   307: sp = sp + 0xfffffffffffffff0\n   310: u64 [sp + 0x8] = ra\n   313: u64 [sp] = s0\n   315: s0 = a0 & 0x1\n   318: ecalli 2 // 'call_data_size'\n   320: fallthrough\n      : @11 (gas: 2)\n   321: u32 [0x20004] = a0\n   326: jump @13 if s0 == 0\n      : @12 (gas: 1)\n   329: ra = 4, jump @14\n      : @13 [@dyn 2] (gas: 1)\n   333: ra = 6, jump @33\n      : @14 [@dyn 3] (gas: 9)\n   338: sp = sp + 0xfffffffffffffec0\n   342: u64 [sp + 0x138] = ra\n   346: u64 [sp + 0x130] = s0\n   350: u64 [sp + 0x128] = s1\n   354: s0 = sp + 0x140\n   358: sp = sp & 0xffffffffffffffe0\n   361: a0 = 0x40\n   364: a1 = 0x20\n   367: ra = 8, jump @0\n      : @15 [@dyn 4] (gas: 39)\n   372: u8 [a0 + 31] = 0x80\n   377: u8 [a0 + 30] = 0\n   380: u8 [a0 + 29] = 0\n   383: u8 [a0 + 28] = 0\n   386: u8 [a0 + 27] = 0\n   389: u8 [a0 + 26] = 0\n   392: u8 [a0 + 25] = 0\n   395: u8 [a0 + 24] = 0\n   398: u8 [a0 + 23] = 0\n   401: u8 [a0 + 22] = 0\n   404: u8 [a0 + 21] = 0\n   407: u8 [a0 + 20] = 0\n   410: u8 [a0 + 19] = 0\n   413: u8 [a0 + 18] = 0\n   416: u8 [a0 + 17] = 0\n   419: u8 [a0 + 16] = 0\n   422: u8 [a0 + 15] = 0\n   425: u8 [a0 + 14] = 0\n   428: u8 [a0 + 13] = 0\n   431: u8 [a0 + 12] = 0\n   434: u8 [a0 + 11] = 0\n   437: u8 [a0 + 10] = 0\n   440: u8 [a0 + 9] = 0\n   443: u8 [a0 + 8] = 0\n   446: u8 [a0 + 7] = 0\n   449: u8 [a0 + 6] = 0\n   452: u8 [a0 + 5] = 0\n   455: u8 [a0 + 4] = 0\n   458: u8 [a0 + 3] = 0\n   461: u8 [a0 + 2] = 0\n   464: u8 [a0 + 1] = 0\n   467: u8 [a0 + 0] = 0\n   469: u64 [sp + 280] = 0\n   473: u64 [sp + 256] = 0\n   477: u64 [sp + 264] = 0\n   481: u64 [sp + 272] = 0\n   485: i32 a0 = sp + 0x100\n   489: ecalli 9 // 'value_transferred'\n   491: fallthrough\n      : @16 (gas: 8)\n   492: a0 = u64 [sp + 0x110]\n   496: a1 = u64 [sp + 0x118]\n   500: a2 = u64 [sp + 0x108]\n   504: a3 = u64 [sp + 0x100]\n   508: a1 = a1 | a2\n   511: a0 = a0 | a3\n   514: a0 = a0 | a1\n   517: jump @25 if a0 != 0\n      : @17 (gas: 12)\n   521: a0 = i32 [0x20004]\n   526: u64 [sp + 0x38] = a0\n   529: a0 = a0 << 0x20\n   532: a2 = a0 >> 0x20\n   535: u64 [sp + 216] = 0\n   539: u64 [sp + 208] = 0\n   543: u64 [sp + 200] = 0\n   547: a0 = sp + 0xe0\n   551: a1 = sp + 0xc0\n   555: u64 [sp + 0x30] = a2\n   558: u64 [sp + 0xc0] = a2\n   562: ra = 10, jump @58\n      : @18 [@dyn 5] (gas: 12)\n   567: a4 = u64 [sp + 0xf8]\n   571: s1 = u64 [sp + 0xf0]\n   575: a3 = u64 [sp + 0xe8]\n   579: a2 = u64 [sp + 0xe0]\n   583: a0 = a3 | a4\n   586: a1 = a2 | s1\n   589: a1 = a1 | a0\n   592: a1 = a1 >> 0x20\n   595: a0 = a0 | s1\n   598: a0 = a0 << 0x20\n   601: a0 = a0 | a1\n   604: jump @24 if a0 != 0\n      : @19 (gas: 6)\n   608: i32 a0 = a2 + 0\n   610: a1 = u64 [sp + 0x38]\n   613: u64 [sp + 0x18] = a2\n   616: u64 [sp + 0x20] = a3\n   619: u64 [sp + 0x28] = a4\n   622: ra = 12, jump @0\n      : @20 [@dyn 6] (gas: 29)\n   627: i32 a0 = a0 + 0\n   629: a1 = u64 [sp + 0x38]\n   632: a2 = 0\n   634: ecalli 0 // 'call_data_copy'\n   635: a0 = u64 [sp + 0x30]\n   638: a2 = u64 [sp + 0x18]\n   641: a0 = a0 + a2\n   644: a1 = a0 <u a2\n   647: t1 = a2\n   649: a4 = u64 [sp + 0x20]\n   652: a2 = a4 + a1\n   655: a3 = a2 <u a4\n   658: a3 = a1 if a1 == 0\n   661: a3 = a3 + s1\n   664: a1 = a3 <u s1\n   667: a5 = u64 [sp + 0x28]\n   670: t0 = a5 + a1\n   673: u64 [sp + 0x68] = a2\n   676: u64 [sp + 0x60] = a0\n   679: u64 [sp + 0x98] = a5\n   683: u64 [sp + 0x90] = s1\n   687: u64 [sp + 0x88] = a4\n   691: u64 [sp + 0x80] = t1\n   695: u64 [sp + 0x70] = a3\n   698: a0 = sp + 0xa0\n   702: a1 = sp + 0x80\n   706: a2 = sp + 0x60\n   709: u64 [sp + 0x78] = t0\n   712: ra = 14, jump @104\n      : @21 [@dyn 7] (gas: 10)\n   717: a1 = u64 [sp + 0xa0]\n   721: a0 = u64 [sp + 0xa8]\n   725: a2 = u64 [sp + 0xb0]\n   729: a3 = u64 [sp + 0xb8]\n   733: u64 [sp + 0x58] = a3\n   736: u64 [sp + 0x50] = a2\n   739: u64 [sp + 0x48] = a0\n   742: a0 = sp + 0x40\n   745: u64 [sp + 0x40] = a1\n   748: ra = 16, jump @145\n      : @22 [@dyn 8] (gas: 3)\n   753: a0 = 0x40\n   756: a1 = 0x20\n   759: ra = 18, jump @0\n      : @23 [@dyn 9] (gas: 100)\n   764: a1 = u8 [a0 + 0x11]\n   767: a2 = u8 [a0 + 0x10]\n   770: a3 = u8 [a0 + 0x12]\n   773: a4 = u8 [a0 + 0x13]\n   776: a1 = a1 << 0x8\n   779: a1 = a1 | a2\n   782: a3 = a3 << 0x10\n   785: a4 = a4 << 0x18\n   788: a3 = a3 | a4\n   791: a1 = a1 | a3\n   794: a2 = u8 [a0 + 0x15]\n   797: a3 = u8 [a0 + 0x14]\n   800: a4 = u8 [a0 + 0x16]\n   803: a5 = u8 [a0 + 0x17]\n   806: a2 = a2 << 0x8\n   809: a2 = a2 | a3\n   812: a4 = a4 << 0x10\n   815: a5 = a5 << 0x18\n   818: a4 = a4 | a5\n   821: a2 = a2 | a4\n   824: a2 = a2 << 0x20\n   827: t0 = a2 | a1\n   830: a2 = u8 [a0 + 0x1]\n   833: a3 = u8 [a0]\n   835: a4 = u8 [a0 + 0x2]\n   838: a5 = u8 [a0 + 0x3]\n   841: a2 = a2 << 0x8\n   844: a2 = a2 | a3\n   847: a4 = a4 << 0x10\n   850: a5 = a5 << 0x18\n   853: a4 = a4 | a5\n   856: a2 = a2 | a4\n   859: a3 = u8 [a0 + 0x5]\n   862: a4 = u8 [a0 + 0x4]\n   865: a5 = u8 [a0 + 0x6]\n   868: s1 = u8 [a0 + 0x7]\n   871: a3 = a3 << 0x8\n   874: a3 = a3 | a4\n   877: a5 = a5 << 0x10\n   880: s1 = s1 << 0x18\n   883: a5 = a5 | s1\n   886: a3 = a3 | a5\n   889: a3 = a3 << 0x20\n   892: a2 = a2 | a3\n   895: a3 = u8 [a0 + 0x19]\n   898: a4 = u8 [a0 + 0x18]\n   901: a5 = u8 [a0 + 0x1a]\n   904: s1 = u8 [a0 + 0x1b]\n   907: a3 = a3 << 0x8\n   910: a3 = a3 | a4\n   913: a5 = a5 << 0x10\n   916: s1 = s1 << 0x18\n   919: a5 = a5 | s1\n   922: a3 = a3 | a5\n   925: a4 = u8 [a0 + 0x1d]\n   928: a5 = u8 [a0 + 0x1c]\n   931: s1 = u8 [a0 + 0x1e]\n   934: a1 = u8 [a0 + 0x1f]\n   937: a4 = a4 << 0x8\n   940: a4 = a4 | a5\n   943: s1 = s1 << 0x10\n   946: a1 = a1 << 0x18\n   949: a1 = a1 | s1\n   952: a1 = a1 | a4\n   955: a1 = a1 << 0x20\n   958: a3 = a3 | a1\n   961: a1 = u8 [a0 + 0x9]\n   964: a4 = u8 [a0 + 0x8]\n   967: a5 = u8 [a0 + 0xa]\n   970: s1 = u8 [a0 + 0xb]\n   973: a1 = a1 << 0x8\n   976: a1 = a1 | a4\n   979: a5 = a5 << 0x10\n   982: s1 = s1 << 0x18\n   985: a5 = a5 | s1\n   988: a1 = a1 | a5\n   991: a4 = u8 [a0 + 0xd]\n   994: a5 = u8 [a0 + 0xc]\n   997: s1 = u8 [a0 + 0xe]\n  1000: a0 = u8 [a0 + 0xf]\n  1003: a4 = a4 << 0x8\n  1006: a4 = a4 | a5\n  1009: s1 = s1 << 0x10\n  1012: a0 = a0 << 0x18\n  1015: a0 = a0 | s1\n  1018: a0 = a0 | a4\n  1021: a0 = a0 << 0x20\n  1024: a0 = a0 | a1\n  1027: a0 = reverse a0\n  1029: s1 = reverse a3\n  1031: a1 = reverse a2\n  1033: a2 = reverse t0\n  1035: a1 = a1 | a2\n  1038: a2 = s1 | a0\n  1041: a2 = a2 | a1\n  1044: a2 = a2 >> 0x20\n  1047: a0 = a0 | a1\n  1050: a0 = a0 << 0x20\n  1053: a0 = a0 | a2\n  1056: jump @27 if a0 == 0\n      : @24 (gas: 1)\n  1059: trap\n      : @25 (gas: 3)\n  1060: a0 = 0\n  1062: a1 = 0\n  1064: ra = 20, jump @0\n      : @26 [@dyn 10] (gas: 5)\n  1069: i32 a1 = a0 + 0\n  1071: a0 = 0x1\n  1074: a2 = 0\n  1076: ecalli 6 // 'seal_return'\n  1078: fallthrough\n      : @27 (gas: 4)\n  1079: i32 s1 = s1 + 0\n  1081: a0 = s1\n  1083: a1 = 0\n  1085: ra = 22, jump @0\n      : @28 [@dyn 11] (gas: 5)\n  1090: i32 a0 = a0 + 0\n  1092: a1 = 0\n  1094: a2 = 0\n  1096: ecalli 0 // 'call_data_copy'\n  1097: fallthrough\n      : @29 (gas: 2)\n  1098: a1 = i32 [0x20008]\n  1103: jump @31 if a1 == 0\n      : @30 (gas: 4)\n  1106: a0 = 0x30010\n  1111: i32 a0 = a0 + 0\n  1113: ecalli 7 // 'set_immutable_data'\n  1115: fallthrough\n      : @31 (gas: 3)\n  1116: a0 = s1\n  1118: a1 = 0\n  1120: ra = 24, jump @0\n      : @32 [@dyn 12] (gas: 6)\n  1125: i32 a1 = a0 + 0\n  1127: a0 = 0\n  1129: a2 = 0\n  1131: ra = 0x1a\n  1134: ecalli 6 // 'seal_return'\n  1136: fallthrough\n      : @33 [@dyn 13] (gas: 8)\n  1137: sp = sp + 0xffffffffffffffc0\n  1140: u64 [sp + 0x38] = ra\n  1143: u64 [sp + 0x30] = s0\n  1146: s0 = sp + 0x40\n  1149: sp = sp & 0xffffffffffffffe0\n  1152: a0 = 0x40\n  1155: a1 = 0x20\n  1158: ra = 28, jump @0\n      : @34 [@dyn 14] (gas: 34)\n  1163: u8 [a0 + 31] = 0x80\n  1168: u8 [a0 + 30] = 0\n  1171: u8 [a0 + 29] = 0\n  1174: u8 [a0 + 28] = 0\n  1177: u8 [a0 + 27] = 0\n  1180: u8 [a0 + 26] = 0\n  1183: u8 [a0 + 25] = 0\n  1186: u8 [a0 + 24] = 0\n  1189: u8 [a0 + 23] = 0\n  1192: u8 [a0 + 22] = 0\n  1195: u8 [a0 + 21] = 0\n  1198: u8 [a0 + 20] = 0\n  1201: u8 [a0 + 19] = 0\n  1204: u8 [a0 + 18] = 0\n  1207: u8 [a0 + 17] = 0\n  1210: u8 [a0 + 16] = 0\n  1213: u8 [a0 + 15] = 0\n  1216: u8 [a0 + 14] = 0\n  1219: u8 [a0 + 13] = 0\n  1222: u8 [a0 + 12] = 0\n  1225: u8 [a0 + 11] = 0\n  1228: u8 [a0 + 10] = 0\n  1231: u8 [a0 + 9] = 0\n  1234: u8 [a0 + 8] = 0\n  1237: u8 [a0 + 7] = 0\n  1240: u8 [a0 + 3] = 0\n  1243: u8 [a0 + 2] = 0\n  1246: u8 [a0 + 1] = 0\n  1249: u8 [a0 + 0] = 0\n  1251: a1 = i32 [0x20004]\n  1256: u8 [a0 + 6] = 0\n  1259: u8 [a0 + 5] = 0\n  1262: u8 [a0 + 4] = 0\n  1265: jump @51 if a1 <u 4\n      : @35 (gas: 4)\n  1270: i32 a0 = sp + 0\n  1272: a1 = 0\n  1274: ecalli 1 // 'call_data_load'\n  1276: fallthrough\n      : @36 (gas: 2)\n  1277: a0 = i32 [sp + 0x1c]\n  1280: jump @41 if a0 >s 20770954\n      : @37 (gas: 2)\n  1287: a1 = 0xffffffffe2ba5000\n  1293: jump @45 if a0 >s 3803861999\n      : @38 (gas: 1)\n  1301: jump @52 if a0 == 2658897249\n      : @39 (gas: 1)\n  1309: jump @51 if a0 != 2750157709\n      : @40 (gas: 14)\n  1317: ra = 0x1e\n  1320: sp = sp + 0xfffffffffffffe60\n  1324: u64 [sp + 0x198] = ra\n  1328: u64 [sp + 0x190] = s0\n  1332: u64 [sp + 0x188] = s1\n  1336: s0 = sp + 0x1a0\n  1340: sp = sp & 0xffffffffffffffe0\n  1343: u64 [sp + 344] = 0\n  1347: u64 [sp + 336] = 0\n  1351: u64 [sp + 328] = 0\n  1355: u64 [sp + 320] = 0\n  1359: i32 a0 = sp + 0x140\n  1363: ecalli 9 // 'value_transferred'\n  1365: jump @286\n      : @41 [@dyn 15] (gas: 2)\n  1368: a1 = 0x5c19b000\n  1374: jump @48 if a0 >s 1545185627\n      : @42 (gas: 1)\n  1381: jump @53 if a0 == 20770955\n      : @43 (gas: 1)\n  1389: jump @51 if a0 != 776042191\n      : @44 (gas: 14)\n  1396: ra = 0x20\n  1399: sp = sp + 0xffffffffffffff60\n  1403: u64 [sp + 0x98] = ra\n  1407: u64 [sp + 0x90] = s0\n  1411: u64 [sp + 0x88] = s1\n  1415: s0 = sp + 0xa0\n  1419: sp = sp & 0xffffffffffffffe0\n  1422: u64 [sp + 56] = 0\n  1425: u64 [sp + 48] = 0\n  1428: u64 [sp + 40] = 0\n  1431: u64 [sp + 32] = 0\n  1434: i32 a0 = sp + 0x20\n  1437: ecalli 9 // 'value_transferred'\n  1439: jump @215\n      : @45 [@dyn 16] (gas: 2)\n  1442: i32 a1 = a1 + 0x3f0\n  1446: jump @54 if a0 == a1\n      : @46 (gas: 1)\n  1450: jump @51 if a0 != 18987327\n      : @47 (gas: 13)\n  1457: ra = 0x22\n  1460: sp = sp + 0xffffffffffffff80\n  1463: u64 [sp + 0x78] = ra\n  1466: u64 [sp + 0x70] = s0\n  1469: s0 = sp + 0x80\n  1473: sp = sp & 0xffffffffffffffe0\n  1476: u64 [sp + 56] = 0\n  1479: u64 [sp + 48] = 0\n  1482: u64 [sp + 40] = 0\n  1485: u64 [sp + 32] = 0\n  1488: i32 a0 = sp + 0x20\n  1491: ecalli 9 // 'value_transferred'\n  1493: jump @170\n      : @48 [@dyn 17] (gas: 2)\n  1496: i32 a1 = a1 + 0xfffffffffffff95c\n  1500: jump @55 if a0 == a1\n      : @49 (gas: 1)\n  1503: jump @51 if a0 != 1621094845\n      : @50 (gas: 1)\n  1510: ra = 36, jump @257\n      : @51 [@dyn 18] (gas: 1)\n  1515: ra = 38, jump @67\n      : @52 [@dyn 19] (gas: 1)\n  1520: ra = 40, jump @269\n      : @53 [@dyn 20] (gas: 14)\n  1525: ra = 0x2a\n  1528: sp = sp + 0xfffffffffffffee0\n  1532: u64 [sp + 0x118] = ra\n  1536: u64 [sp + 0x110] = s0\n  1540: u64 [sp + 0x108] = s1\n  1544: s0 = sp + 0x120\n  1548: sp = sp & 0xffffffffffffffe0\n  1551: u64 [sp + 216] = 0\n  1555: u64 [sp + 208] = 0\n  1559: u64 [sp + 200] = 0\n  1563: u64 [sp + 192] = 0\n  1567: i32 a0 = sp + 0xc0\n  1571: ecalli 9 // 'value_transferred'\n  1573: jump @197\n      : @54 [@dyn 21] (gas: 14)\n  1576: ra = 0x2c\n  1579: sp = sp + 0xfffffffffffffec0\n  1583: u64 [sp + 0x138] = ra\n  1587: u64 [sp + 0x130] = s0\n  1591: u64 [sp + 0x128] = s1\n  1595: s0 = sp + 0x140\n  1599: sp = sp & 0xffffffffffffffe0\n  1602: u64 [sp + 216] = 0\n  1606: u64 [sp + 208] = 0\n  1610: u64 [sp + 200] = 0\n  1614: u64 [sp + 192] = 0\n  1618: i32 a0 = sp + 0xc0\n  1622: ecalli 9 // 'value_transferred'\n  1624: jump @309\n      : @55 [@dyn 22] (gas: 1)\n  1627: ra = 46, jump @244\n      : @56 [@dyn 23] (gas: 7)\n  1632: sp = sp + 0xfffffffffffffff0\n  1635: u64 [sp + 0x8] = ra\n  1638: u64 [sp] = s0\n  1640: s0 = a0\n  1642: a0 = 0x40\n  1645: a1 = 0x20\n  1648: ra = 48, jump @0\n      : @57 [@dyn 24] (gas: 100)\n  1653: a1 = u8 [a0 + 0x1]\n  1656: a2 = u8 [a0]\n  1658: a3 = u8 [a0 + 0x2]\n  1661: a4 = u8 [a0 + 0x3]\n  1664: a1 = a1 << 0x8\n  1667: a1 = a1 | a2\n  1670: a3 = a3 << 0x10\n  1673: a4 = a4 << 0x18\n  1676: a3 = a3 | a4\n  1679: a1 = a1 | a3\n  1682: a2 = u8 [a0 + 0x5]\n  1685: a3 = u8 [a0 + 0x4]\n  1688: a4 = u8 [a0 + 0x6]\n  1691: a5 = u8 [a0 + 0x7]\n  1694: a2 = a2 << 0x8\n  1697: a2 = a2 | a3\n  1700: a4 = a4 << 0x10\n  1703: a5 = a5 << 0x18\n  1706: a4 = a4 | a5\n  1709: a2 = a2 | a4\n  1712: a2 = a2 << 0x20\n  1715: t0 = a2 | a1\n  1718: a2 = u8 [a0 + 0x9]\n  1721: a3 = u8 [a0 + 0x8]\n  1724: a4 = u8 [a0 + 0xa]\n  1727: a5 = u8 [a0 + 0xb]\n  1730: a2 = a2 << 0x8\n  1733: a2 = a2 | a3\n  1736: a4 = a4 << 0x10\n  1739: a5 = a5 << 0x18\n  1742: a4 = a4 | a5\n  1745: a2 = a2 | a4\n  1748: a3 = u8 [a0 + 0xd]\n  1751: a4 = u8 [a0 + 0xc]\n  1754: a5 = u8 [a0 + 0xe]\n  1757: a1 = u8 [a0 + 0xf]\n  1760: a3 = a3 << 0x8\n  1763: a3 = a3 | a4\n  1766: a5 = a5 << 0x10\n  1769: a1 = a1 << 0x18\n  1772: a1 = a1 | a5\n  1775: a1 = a1 | a3\n  1778: a1 = a1 << 0x20\n  1781: t1 = a1 | a2\n  1784: a1 = u8 [a0 + 0x11]\n  1787: a3 = u8 [a0 + 0x10]\n  1790: a4 = u8 [a0 + 0x12]\n  1793: a5 = u8 [a0 + 0x13]\n  1796: a1 = a1 << 0x8\n  1799: a1 = a1 | a3\n  1802: a4 = a4 << 0x10\n  1805: a5 = a5 << 0x18\n  1808: a4 = a4 | a5\n  1811: a1 = a1 | a4\n  1814: a3 = u8 [a0 + 0x15]\n  1817: a4 = u8 [a0 + 0x14]\n  1820: a5 = u8 [a0 + 0x16]\n  1823: a2 = u8 [a0 + 0x17]\n  1826: a3 = a3 << 0x8\n  1829: a3 = a3 | a4\n  1832: a5 = a5 << 0x10\n  1835: a2 = a2 << 0x18\n  1838: a2 = a2 | a5\n  1841: a2 = a2 | a3\n  1844: a2 = a2 << 0x20\n  1847: a3 = a2 | a1\n  1850: a1 = u8 [a0 + 0x19]\n  1853: a2 = u8 [a0 + 0x18]\n  1856: a4 = u8 [a0 + 0x1a]\n  1859: a5 = u8 [a0 + 0x1b]\n  1862: a1 = a1 << 0x8\n  1865: a1 = a1 | a2\n  1868: a4 = a4 << 0x10\n  1871: a5 = a5 << 0x18\n  1874: a4 = a4 | a5\n  1877: a1 = a1 | a4\n  1880: a2 = u8 [a0 + 0x1d]\n  1883: a4 = u8 [a0 + 0x1c]\n  1886: a5 = u8 [a0 + 0x1e]\n  1889: a0 = u8 [a0 + 0x1f]\n  1892: a2 = a2 << 0x8\n  1895: a2 = a2 | a4\n  1898: a5 = a5 << 0x10\n  1901: a0 = a0 << 0x18\n  1904: a0 = a0 | a5\n  1907: a0 = a0 | a2\n  1910: a0 = a0 << 0x20\n  1913: a0 = a0 | a1\n  1916: a0 = reverse a0\n  1918: a1 = reverse a3\n  1920: a2 = reverse t1\n  1922: a3 = reverse t0\n  1924: u64 [s0 + 0x18] = a3\n  1927: u64 [s0 + 0x10] = a2\n  1930: u64 [s0 + 0x8] = a1\n  1933: u64 [s0] = a0\n  1935: ra = u64 [sp + 0x8]\n  1938: s0 = u64 [sp]\n  1940: sp = sp + 0x10\n  1943: ret\n      : @58 (gas: 18)\n  1945: sp = sp + 0xffffffffffffff60\n  1949: u64 [sp + 0x98] = ra\n  1953: u64 [sp + 0x90] = s0\n  1957: u64 [sp + 0x88] = s1\n  1961: s0 = sp + 0xa0\n  1965: sp = sp & 0xfffffffffffffff0\n  1968: a2 = u64 [a1 + 0x18]\n  1971: u64 [sp + 0x30] = a2\n  1974: a2 = u64 [a1 + 0x10]\n  1977: u64 [sp + 0x28] = a2\n  1980: a2 = u64 [a1 + 0x8]\n  1983: u64 [sp + 0x20] = a2\n  1986: a1 = u64 [a1]\n  1988: u64 [sp + 0x18] = a1\n  1991: u64 [sp + 0x38] = a0\n  1994: a0 = 0x40\n  1997: a1 = 0x20\n  2000: ra = 50, jump @0\n      : @59 [@dyn 25] (gas: 130)\n  2005: a1 = u8 [a0 + 0x19]\n  2008: a2 = u8 [a0 + 0x18]\n  2011: a3 = u8 [a0 + 0x1a]\n  2014: a4 = u8 [a0 + 0x1b]\n  2017: a1 = a1 << 0x8\n  2020: a1 = a1 | a2\n  2023: a3 = a3 << 0x10\n  2026: a4 = a4 << 0x18\n  2029: a3 = a3 | a4\n  2032: a1 = a1 | a3\n  2035: a2 = u8 [a0 + 0x1d]\n  2038: a3 = u8 [a0 + 0x1c]\n  2041: a4 = u8 [a0 + 0x1e]\n  2044: a5 = u8 [a0 + 0x1f]\n  2047: a2 = a2 << 0x8\n  2050: a2 = a2 | a3\n  2053: a4 = a4 << 0x10\n  2056: a5 = a5 << 0x18\n  2059: a4 = a4 | a5\n  2062: a2 = a2 | a4\n  2065: a2 = a2 << 0x20\n  2068: t0 = a2 | a1\n  2071: a2 = u8 [a0 + 0x11]\n  2074: a3 = u8 [a0 + 0x10]\n  2077: a4 = u8 [a0 + 0x12]\n  2080: a5 = u8 [a0 + 0x13]\n  2083: a2 = a2 << 0x8\n  2086: a2 = a2 | a3\n  2089: a4 = a4 << 0x10\n  2092: a5 = a5 << 0x18\n  2095: a4 = a4 | a5\n  2098: a2 = a2 | a4\n  2101: a3 = u8 [a0 + 0x15]\n  2104: a4 = u8 [a0 + 0x14]\n  2107: a5 = u8 [a0 + 0x16]\n  2110: s1 = u8 [a0 + 0x17]\n  2113: a3 = a3 << 0x8\n  2116: a3 = a3 | a4\n  2119: a5 = a5 << 0x10\n  2122: s1 = s1 << 0x18\n  2125: a5 = a5 | s1\n  2128: a3 = a3 | a5\n  2131: a3 = a3 << 0x20\n  2134: a2 = a2 | a3\n  2137: a3 = u8 [a0 + 0x9]\n  2140: a4 = u8 [a0 + 0x8]\n  2143: a5 = u8 [a0 + 0xa]\n  2146: s1 = u8 [a0 + 0xb]\n  2149: a3 = a3 << 0x8\n  2152: a3 = a3 | a4\n  2155: a5 = a5 << 0x10\n  2158: s1 = s1 << 0x18\n  2161: a5 = a5 | s1\n  2164: a3 = a3 | a5\n  2167: a4 = u8 [a0 + 0xd]\n  2170: a5 = u8 [a0 + 0xc]\n  2173: s1 = u8 [a0 + 0xe]\n  2176: a1 = u8 [a0 + 0xf]\n  2179: a4 = a4 << 0x8\n  2182: a4 = a4 | a5\n  2185: s1 = s1 << 0x10\n  2188: a1 = a1 << 0x18\n  2191: a1 = a1 | s1\n  2194: a1 = a1 | a4\n  2197: a1 = a1 << 0x20\n  2200: a3 = a3 | a1\n  2203: a1 = u8 [a0 + 0x1]\n  2206: a4 = u8 [a0]\n  2208: a5 = u8 [a0 + 0x2]\n  2211: s1 = u8 [a0 + 0x3]\n  2214: a1 = a1 << 0x8\n  2217: a1 = a1 | a4\n  2220: a5 = a5 << 0x10\n  2223: s1 = s1 << 0x18\n  2226: a5 = a5 | s1\n  2229: a1 = a1 | a5\n  2232: a4 = u8 [a0 + 0x5]\n  2235: a5 = u8 [a0 + 0x4]\n  2238: s1 = u8 [a0 + 0x6]\n  2241: a0 = u8 [a0 + 0x7]\n  2244: a4 = a4 << 0x8\n  2247: a4 = a4 | a5\n  2250: s1 = s1 << 0x10\n  2253: a0 = a0 << 0x18\n  2256: a0 = a0 | s1\n  2259: a0 = a0 | a4\n  2262: a0 = a0 << 0x20\n  2265: a0 = a0 | a1\n  2268: t1 = reverse a0\n  2270: t2 = reverse a3\n  2272: s1 = reverse a2\n  2274: a5 = reverse t0\n  2276: a1 = u64 [sp + 0x18]\n  2279: a0 = a1 + 0x1f\n  2282: a1 = a0 <u a1\n  2285: a3 = u64 [sp + 0x20]\n  2288: a2 = a3 + a1\n  2291: a3 = a2 <u a3\n  2294: a3 = a1 if a1 == 0\n  2297: a1 = u64 [sp + 0x28]\n  2300: a3 = a3 + a1\n  2303: a1 = a3 <u a1\n  2306: a4 = u64 [sp + 0x30]\n  2309: a1 = a1 + a4\n  2312: a0 = a0 & 0xffffffffffffffe0\n  2315: a0 = a0 + a5\n  2318: u64 [sp + 0x28] = a5\n  2321: u64 [sp + 0x10] = a0\n  2324: a4 = a0 <u a5\n  2327: a2 = a2 + s1\n  2330: a5 = a2 + a4\n  2333: a2 = a5 ^ s1\n  2336: u64 [sp + 0x30] = s1\n  2339: a0 = a5 <u s1\n  2342: a0 = a4 if a2 == 0\n  2345: a3 = a3 + t2\n  2348: a4 = a3 + a0\n  2351: s1 = a4 <u a3\n  2354: a2 = a3 <u t2\n  2357: a1 = a1 + t1\n  2360: a1 = a1 + a2\n  2363: s1 = s1 + a1\n  2366: a1 = a4 >u 0\n  2368: a2 = s1 >u 0\n  2370: a2 = a1 if s1 == 0\n  2373: a1 = a4 | s1\n  2376: u64 [sp + 0x8] = a5\n  2379: a3 = a5 >u 0\n  2381: a3 = a2 if a1 != 0\n  2384: jump @63 if a3 != 0\n      : @60 (gas: 8)\n  2388: a1 = a4 <u t2\n  2391: a2 = s1 ^ t1\n  2394: a3 = s1 <u t1\n  2397: a3 = a1 if a2 == 0\n  2400: a1 = a4 ^ t2\n  2403: a1 = a1 | a2\n  2406: a0 = a3 if a1 != 0\n  2409: jump @63 if a0 != 0\n      : @61 (gas: 6)\n  2413: a0 = 0x40\n  2416: a1 = 0x20\n  2419: u64 [sp + 0x20] = t2\n  2422: u64 [sp + 0x18] = t1\n  2425: u64 [sp] = a4\n  2427: ra = 52, jump @0\n      : @62 [@dyn 26] (gas: 82)\n  2432: a1 = reverse s1\n  2434: a2 = u64 [sp]\n  2436: a2 = reverse a2\n  2438: a3 = u64 [sp + 0x8]\n  2441: a3 = reverse a3\n  2443: a4 = u64 [sp + 0x10]\n  2446: a4 = reverse a4\n  2448: u8 [a0 + 0x18] = a4\n  2451: a5 = a4 >> 0x38\n  2454: u8 [a0 + 0x1f] = a5\n  2457: a5 = a4 >> 0x30\n  2460: u8 [a0 + 0x1e] = a5\n  2463: a5 = a4 >> 0x28\n  2466: u8 [a0 + 0x1d] = a5\n  2469: a5 = a4 >> 0x20\n  2472: u8 [a0 + 0x1c] = a5\n  2475: a5 = a4 >> 0x18\n  2478: u8 [a0 + 0x1b] = a5\n  2481: a5 = a4 >> 0x10\n  2484: u8 [a0 + 0x1a] = a5\n  2487: a4 = a4 >> 0x8\n  2490: u8 [a0 + 0x19] = a4\n  2493: u8 [a0 + 0x10] = a3\n  2496: a4 = a3 >> 0x38\n  2499: u8 [a0 + 0x17] = a4\n  2502: a4 = a3 >> 0x30\n  2505: u8 [a0 + 0x16] = a4\n  2508: a4 = a3 >> 0x28\n  2511: u8 [a0 + 0x15] = a4\n  2514: a4 = a3 >> 0x20\n  2517: u8 [a0 + 0x14] = a4\n  2520: a4 = a3 >> 0x18\n  2523: u8 [a0 + 0x13] = a4\n  2526: a4 = a3 >> 0x10\n  2529: u8 [a0 + 0x12] = a4\n  2532: a3 = a3 >> 0x8\n  2535: u8 [a0 + 0x11] = a3\n  2538: u8 [a0 + 0x8] = a2\n  2541: a3 = a2 >> 0x38\n  2544: u8 [a0 + 0xf] = a3\n  2547: a3 = a2 >> 0x30\n  2550: u8 [a0 + 0xe] = a3\n  2553: a3 = a2 >> 0x28\n  2556: u8 [a0 + 0xd] = a3\n  2559: a3 = a2 >> 0x20\n  2562: u8 [a0 + 0xc] = a3\n  2565: a3 = a2 >> 0x18\n  2568: u8 [a0 + 0xb] = a3\n  2571: a3 = a2 >> 0x10\n  2574: u8 [a0 + 0xa] = a3\n  2577: a2 = a2 >> 0x8\n  2580: u8 [a0 + 0x9] = a2\n  2583: u8 [a0] = a1\n  2585: a2 = a1 >> 0x38\n  2588: u8 [a0 + 0x7] = a2\n  2591: a2 = a1 >> 0x30\n  2594: u8 [a0 + 0x6] = a2\n  2597: a2 = a1 >> 0x28\n  2600: u8 [a0 + 0x5] = a2\n  2603: a2 = a1 >> 0x20\n  2606: u8 [a0 + 0x4] = a2\n  2609: a2 = a1 >> 0x18\n  2612: u8 [a0 + 0x3] = a2\n  2615: a2 = a1 >> 0x10\n  2618: u8 [a0 + 0x2] = a2\n  2621: a1 = a1 >> 0x8\n  2624: u8 [a0 + 0x1] = a1\n  2627: a0 = u64 [sp + 0x38]\n  2630: a1 = u64 [sp + 0x28]\n  2633: u64 [a0] = a1\n  2635: a1 = u64 [sp + 0x18]\n  2638: u64 [a0 + 0x18] = a1\n  2641: a1 = u64 [sp + 0x30]\n  2644: u64 [a0 + 0x8] = a1\n  2647: a1 = u64 [sp + 0x20]\n  2650: u64 [a0 + 0x10] = a1\n  2653: sp = s0 + 0xffffffffffffff60\n  2657: ra = u64 [sp + 0x98]\n  2661: s0 = u64 [sp + 0x90]\n  2665: s1 = u64 [sp + 0x88]\n  2669: sp = sp + 0xa0\n  2673: ret\n      : @63 (gas: 8)\n  2675: u64 [sp + 112] = 0\n  2678: u64 [sp + 104] = 0\n  2681: u64 [sp + 96] = 0\n  2684: a0 = 0x4e487b7100000000\n  2694: a1 = sp + 0x60\n  2697: u64 [sp + 0x78] = a0\n  2700: a0 = 0\n  2702: ra = 54, jump @8\n      : @64 [@dyn 27] (gas: 7)\n  2707: u64 [sp + 88] = 0\n  2710: u64 [sp + 80] = 0\n  2713: u64 [sp + 64] = 0x41\n  2717: a0 = 0x4\n  2720: a1 = sp + 0x40\n  2723: u64 [sp + 72] = 0\n  2726: ra = 56, jump @8\n      : @65 [@dyn 28] (gas: 3)\n  2731: a1 = 0x24\n  2734: a0 = 0\n  2736: ra = 58, jump @0\n      : @66 [@dyn 29] (gas: 6)\n  2741: i32 a1 = a0 + 0\n  2743: a0 = 0x1\n  2746: a2 = 0x24\n  2749: ra = 0x3c\n  2752: ecalli 6 // 'seal_return'\n  2754: fallthrough\n      : @67 [@dyn 30] (gas: 5)\n  2755: sp = sp + 0xfffffffffffffff8\n  2758: u64 [sp] = ra\n  2760: a0 = 0\n  2762: a1 = 0\n  2764: ra = 62, jump @0\n      : @68 [@dyn 31] (gas: 6)\n  2769: i32 a1 = a0 + 0\n  2771: a0 = 0x1\n  2774: a2 = 0\n  2776: ra = 0x40\n  2779: ecalli 6 // 'seal_return'\n  2781: fallthrough\n      : @69 [@dyn 32] (gas: 7)\n  2782: a4 = u64 [a1 + 0x18]\n  2785: a3 = u64 [a1 + 0x10]\n  2788: a2 = u64 [a1 + 0x8]\n  2791: t0 = a3 | a4\n  2794: a5 = a2 <u 0x1\n  2797: a5 = 0 if t0 != 0\n  2799: jump @71 if a5 == 0\n      : @70 (gas: 24)\n  2802: a1 = u64 [a1]\n  2804: a5 = a3 >> 0x3b\n  2807: a4 = a4 << 0x5\n  2810: t0 = a4 | a5\n  2813: a5 = a2 >> 0x3b\n  2816: a3 = a3 << 0x5\n  2819: a3 = a3 | a5\n  2822: a5 = a1 >> 0x3b\n  2825: a2 = a2 << 0x5\n  2828: a2 = a2 | a5\n  2831: a1 = a1 << 0x5\n  2834: a5 = a1 + 0x20\n  2837: a1 = a5 <u a1\n  2840: a4 = a2 + a1\n  2843: a2 = a4 <u a2\n  2846: a2 = a1 if a1 == 0\n  2849: a2 = a2 + a3\n  2852: a1 = a2 <u a3\n  2855: a1 = a1 + t0\n  2858: u64 [a0] = a5\n  2860: u64 [a0 + 0x8] = a4\n  2863: u64 [a0 + 0x10] = a2\n  2866: u64 [a0 + 0x18] = a1\n  2869: ret\n      : @71 (gas: 13)\n  2871: sp = sp + 0xffffffffffffffb0\n  2874: u64 [sp + 0x48] = ra\n  2877: u64 [sp + 0x40] = s0\n  2880: s0 = sp + 0x50\n  2883: sp = sp & 0xfffffffffffffff0\n  2886: u64 [sp + 48] = 0\n  2889: u64 [sp + 40] = 0\n  2892: u64 [sp + 32] = 0\n  2895: a0 = 0x4e487b7100000000\n  2905: a1 = sp + 0x20\n  2908: u64 [sp + 0x38] = a0\n  2911: a0 = 0\n  2913: ra = 66, jump @8\n      : @72 [@dyn 33] (gas: 7)\n  2918: u64 [sp + 24] = 0\n  2921: u64 [sp + 16] = 0\n  2924: u64 [sp + 0] = 0x41\n  2927: a0 = 0x4\n  2930: a1 = sp\n  2932: u64 [sp + 8] = 0\n  2935: ra = 68, jump @8\n      : @73 [@dyn 34] (gas: 3)\n  2940: a1 = 0x24\n  2943: a0 = 0\n  2945: ra = 70, jump @0\n      : @74 [@dyn 35] (gas: 6)\n  2950: i32 a1 = a0 + 0\n  2952: a0 = 0x1\n  2955: a2 = 0x24\n  2958: ra = 0x48\n  2961: ecalli 6 // 'seal_return'\n  2963: fallthrough\n      : @75 [@dyn 36] (gas: 9)\n  2964: a2 = u64 [a1 + 0x18]\n  2967: a3 = u64 [a1 + 0x10]\n  2970: a4 = u64 [a1 + 0x8]\n  2973: a1 = u64 [a1]\n  2975: u64 [a0 + 0x18] = a2\n  2978: u64 [a0 + 0x10] = a3\n  2981: u64 [a0 + 0x8] = a4\n  2984: u64 [a0] = a1\n  2986: ret\n      : @76 (gas: 14)\n  2988: sp = sp + 0xfffffffffffffdd0\n  2992: u64 [sp + 0x228] = ra\n  2996: u64 [sp + 0x220] = s0\n  3000: u64 [sp + 0x218] = s1\n  3004: s0 = sp + 0x230\n  3008: sp = sp & 0xfffffffffffffff0\n  3011: t1 = u64 [a2 + 0x18]\n  3014: a4 = u64 [a2 + 0x10]\n  3017: s1 = u64 [a2 + 0x8]\n  3020: t0 = a4 | t1\n  3023: a5 = s1 <u 0x1\n  3026: a5 = 0 if t0 != 0\n  3028: u64 [sp] = a0\n  3030: jump @90 if a5 == 0\n      : @77 (gas: 50)\n  3034: a5 = u64 [a2]\n  3036: a0 = a4 >> 0x3b\n  3039: u64 [sp + 0x168] = t1\n  3043: a2 = t1 << 0x5\n  3046: t0 = a2 | a0\n  3049: a0 = s1 >> 0x3b\n  3052: u64 [sp + 0x160] = a4\n  3056: a2 = a4 << 0x5\n  3059: a0 = a0 | a2\n  3062: a2 = a5 >> 0x3b\n  3065: u64 [sp + 0x158] = s1\n  3069: s1 = s1 << 0x5\n  3072: a2 = a2 | s1\n  3075: u64 [sp + 0x150] = a5\n  3079: a5 = a5 << 0x5\n  3082: t1 = a5 + 0x20\n  3085: u64 [sp + 0x110] = a5\n  3089: a4 = t1 <u a5\n  3092: s1 = a2 + a4\n  3095: u64 [sp + 0x118] = a2\n  3099: a5 = s1 <u a2\n  3102: a5 = a4 if a4 == 0\n  3105: a2 = u64 [a3 + 0x18]\n  3108: u64 [sp + 0x130] = a2\n  3112: a2 = u64 [a3 + 0x10]\n  3115: u64 [sp + 0x138] = a2\n  3119: a2 = u64 [a3 + 0x8]\n  3122: u64 [sp + 0x120] = a2\n  3126: a2 = u64 [a3]\n  3128: u64 [sp + 0x128] = a2\n  3132: a2 = u64 [a1 + 0x18]\n  3135: u64 [sp + 0x178] = a2\n  3139: a2 = u64 [a1 + 0x10]\n  3142: u64 [sp + 0x170] = a2\n  3146: a2 = u64 [a1 + 0x8]\n  3149: u64 [sp + 0x188] = a2\n  3153: a1 = u64 [a1]\n  3155: u64 [sp + 0x180] = a1\n  3159: a5 = a5 + a0\n  3162: u64 [sp + 0x140] = a0\n  3166: a1 = a5 <u a0\n  3169: u64 [sp + 0x148] = t0\n  3173: a2 = t0 + a1\n  3176: u64 [sp + 0x1d0] = t1\n  3180: u64 [sp + 0x1d8] = s1\n  3184: u64 [sp + 0x1e0] = a5\n  3188: a0 = sp + 0x1f0\n  3192: a1 = sp + 0x1d0\n  3196: u64 [sp + 0x1e8] = a2\n  3200: ra = 74, jump @58\n      : @78 [@dyn 37] (gas: 15)\n  3205: a0 = u64 [sp + 0x208]\n  3209: a2 = u64 [sp + 0x200]\n  3213: a1 = u64 [sp + 0x1f8]\n  3217: a3 = u64 [sp + 0x1f0]\n  3221: u64 [sp + 0x20] = a0\n  3224: u64 [sp + 0x10] = a1\n  3227: a0 = a0 | a1\n  3230: a1 = a3 | a2\n  3233: a1 = a1 | a0\n  3236: a1 = a1 >> 0x20\n  3239: u64 [sp + 0x18] = a2\n  3242: a0 = a0 | a2\n  3245: a0 = a0 << 0x20\n  3248: a0 = a0 | a1\n  3251: jump @89 if a0 != 0\n      : @79 (gas: 4)\n  3255: u64 [sp + 0x8] = a3\n  3258: i32 a0 = a3 + 0\n  3260: a1 = 0x20\n  3263: ra = 76, jump @0\n      : @80 [@dyn 38] (gas: 111)\n  3268: a1 = u64 [sp + 0x110]\n  3272: a5 = u64 [sp + 0x180]\n  3276: a5 = a5 + a1\n  3279: a1 = a5 <u a1\n  3282: a4 = u64 [sp + 0x118]\n  3286: a2 = u64 [sp + 0x188]\n  3290: a2 = a2 + a4\n  3293: ra = a2 + a1\n  3296: a3 = ra ^ a4\n  3299: a2 = ra <u a4\n  3302: a2 = a1 if a3 == 0\n  3305: a1 = u64 [sp + 0x120]\n  3309: a3 = ra ^ a1\n  3312: a4 = a1 <u ra\n  3315: u64 [sp + 0x48] = a5\n  3318: a1 = u64 [sp + 0x128]\n  3322: a1 = a1 <u a5\n  3325: a1 = a4 if a3 != 0\n  3328: t1 = u64 [sp + 0x170]\n  3332: a4 = u64 [sp + 0x140]\n  3336: a3 = a4 + t1\n  3339: a4 = a3 <u a4\n  3342: t0 = u64 [sp + 0x178]\n  3346: a5 = u64 [sp + 0x148]\n  3350: a5 = a5 + t0\n  3353: a4 = a4 + a5\n  3356: s1 = a3 + a2\n  3359: a2 = s1 <u a3\n  3362: t2 = a4 + a2\n  3365: a3 = u64 [sp + 0x130]\n  3369: a2 = t2 ^ a3\n  3372: a3 = a3 <u t2\n  3375: a5 = u64 [sp + 0x138]\n  3379: a4 = a5 <u s1\n  3382: a3 = a4 if a2 == 0\n  3385: a4 = s1 ^ a5\n  3388: a2 = a2 | a4\n  3391: a1 = a3 if a2 != 0\n  3394: a2 = u64 [sp + 0x150]\n  3398: a2 = reverse a2\n  3400: a3 = a2 >> 0x38\n  3403: u8 [a0 + 0x1f] = a3\n  3406: a3 = a2 >> 0x30\n  3409: u8 [a0 + 0x1e] = a3\n  3412: a3 = a2 >> 0x28\n  3415: u8 [a0 + 0x1d] = a3\n  3418: a3 = a2 >> 0x20\n  3421: u8 [a0 + 0x1c] = a3\n  3424: a3 = a2 >> 0x18\n  3427: u8 [a0 + 0x1b] = a3\n  3430: a3 = a2 >> 0x10\n  3433: u8 [a0 + 0x1a] = a3\n  3436: a3 = a2 >> 0x8\n  3439: u8 [a0 + 0x19] = a3\n  3442: a3 = u64 [sp + 0x158]\n  3446: a3 = reverse a3\n  3448: u8 [a0 + 0x18] = a2\n  3451: a2 = a3 >> 0x38\n  3454: u8 [a0 + 0x17] = a2\n  3457: a2 = a3 >> 0x30\n  3460: u8 [a0 + 0x16] = a2\n  3463: a2 = a3 >> 0x28\n  3466: u8 [a0 + 0x15] = a2\n  3469: a2 = a3 >> 0x20\n  3472: u8 [a0 + 0x14] = a2\n  3475: a2 = a3 >> 0x18\n  3478: u8 [a0 + 0x13] = a2\n  3481: a2 = a3 >> 0x10\n  3484: u8 [a0 + 0x12] = a2\n  3487: a2 = u64 [sp + 0x160]\n  3491: a2 = reverse a2\n  3493: u8 [a0 + 0x10] = a3\n  3496: a3 = a3 >> 0x8\n  3499: u8 [a0 + 0x11] = a3\n  3502: a3 = a2 >> 0x38\n  3505: u8 [a0 + 0xf] = a3\n  3508: a3 = a2 >> 0x30\n  3511: u8 [a0 + 0xe] = a3\n  3514: a3 = a2 >> 0x28\n  3517: u8 [a0 + 0xd] = a3\n  3520: a3 = a2 >> 0x20\n  3523: u8 [a0 + 0xc] = a3\n  3526: a3 = a2 >> 0x18\n  3529: u8 [a0 + 0xb] = a3\n  3532: a3 = a2 >> 0x10\n  3535: u8 [a0 + 0xa] = a3\n  3538: a3 = u64 [sp + 0x168]\n  3542: a3 = reverse a3\n  3544: u8 [a0 + 0x8] = a2\n  3547: a2 = a2 >> 0x8\n  3550: u8 [a0 + 0x9] = a2\n  3553: a2 = a3 >> 0x38\n  3556: u8 [a0 + 0x7] = a2\n  3559: a2 = a3 >> 0x30\n  3562: u8 [a0 + 0x6] = a2\n  3565: a2 = a3 >> 0x28\n  3568: u8 [a0 + 0x5] = a2\n  3571: a2 = a3 >> 0x20\n  3574: u8 [a0 + 0x4] = a2\n  3577: a2 = a3 >> 0x18\n  3580: u8 [a0 + 0x3] = a2\n  3583: a2 = a3 >> 0x10\n  3586: u8 [a0 + 0x2] = a2\n  3589: u8 [a0] = a3\n  3591: a3 = a3 >> 0x8\n  3594: u8 [a0 + 0x1] = a3\n  3597: a2 = t0\n  3599: a5 = t1\n  3601: t1 = u64 [sp + 0x188]\n  3605: t0 = u64 [sp + 0x180]\n  3609: jump @94 if a1 != 0\n      : @81 (gas: 15)\n  3613: a0 = u64 [sp + 0x48]\n  3616: a0 = t0 <u a0\n  3619: a1 = ra ^ t1\n  3622: a4 = t1 <u ra\n  3625: a4 = a0 if a1 == 0\n  3628: a0 = a5 <u s1\n  3631: a1 = t2 ^ a2\n  3634: u64 [sp + 0x38] = t2\n  3637: a3 = a2 <u t2\n  3640: a3 = a0 if a1 == 0\n  3643: u64 [sp + 0x40] = s1\n  3646: a0 = s1 ^ a5\n  3649: a0 = a0 | a1\n  3652: a3 = a4 if a0 == 0\n  3655: jump @88 if a3 == 0\n      : @82 (gas: 9)\n  3659: a0 = 0xffffffe0\n  3669: u64 [sp + 0x30] = a0\n  3672: a1 = u64 [sp + 0x8]\n  3675: a4 = u64 [sp + 0x10]\n  3678: s1 = u64 [sp + 0x18]\n  3681: a0 = u64 [sp + 0x20]\n  3684: u64 [sp + 0x168] = a0\n  3688: u64 [sp + 0x28] = ra\n  3691: fallthrough\n      : @83 (gas: 13)\n  3692: u64 [sp + 0x158] = a4\n  3696: u64 [sp + 0x160] = a1\n  3700: a0 = t0 | a5\n  3703: u64 [sp + 0x178] = a2\n  3707: u64 [sp + 0x188] = t1\n  3711: a1 = t1 | a2\n  3714: a0 = a0 | a1\n  3717: a0 = a0 >> 0x20\n  3720: u64 [sp + 0x170] = a5\n  3724: a1 = a1 | a5\n  3727: a1 = a1 << 0x20\n  3730: a0 = a0 | a1\n  3733: jump @89 if a0 != 0\n      : @84 (gas: 4)\n  3737: i32 a0 = t0 + 0\n  3739: a1 = 0x20\n  3742: u64 [sp + 0x180] = t0\n  3746: ra = 78, jump @0\n      : @85 [@dyn 39] (gas: 10)\n  3751: a3 = u64 [sp + 0x168]\n  3755: a5 = s1\n  3757: s1 = s1 | a3\n  3760: a2 = u64 [sp + 0x30]\n  3763: a4 = u64 [sp + 0x160]\n  3767: a2 = a4 <u a2\n  3770: a1 = u64 [sp + 0x158]\n  3774: a2 = 0 if a1 != 0\n  3776: a2 = 0 if s1 != 0\n  3778: jump @89 if a2 == 0\n      : @86 (gas: 80)\n  3782: a2 = a4 + 0x20\n  3785: s1 = a2 <u a4\n  3788: a4 = a2\n  3790: u64 [sp + 0xc0] = a2\n  3794: a2 = a1 + s1\n  3797: u64 [sp + 0x160] = a2\n  3801: a1 = a2 <u a1\n  3804: a1 = s1 if s1 == 0\n  3807: a2 = u8 [a0]\n  3809: u64 [sp + 0x158] = a2\n  3813: a2 = u8 [a0 + 0x1]\n  3816: u64 [sp + 0x150] = a2\n  3820: a2 = u8 [a0 + 0x2]\n  3823: u64 [sp + 0x148] = a2\n  3827: a2 = u8 [a0 + 0x3]\n  3830: u64 [sp + 0x140] = a2\n  3834: a2 = u8 [a0 + 0x4]\n  3837: u64 [sp + 0x138] = a2\n  3841: a2 = u8 [a0 + 0x5]\n  3844: u64 [sp + 0x130] = a2\n  3848: a2 = u8 [a0 + 0x6]\n  3851: u64 [sp + 0x128] = a2\n  3855: a2 = u8 [a0 + 0x7]\n  3858: u64 [sp + 0x120] = a2\n  3862: a2 = u8 [a0 + 0x8]\n  3865: u64 [sp + 0x118] = a2\n  3869: a2 = u8 [a0 + 0x9]\n  3872: u64 [sp + 0x110] = a2\n  3876: a2 = u8 [a0 + 0xa]\n  3879: u64 [sp + 0x108] = a2\n  3883: a2 = u8 [a0 + 0xb]\n  3886: u64 [sp + 0x100] = a2\n  3890: a2 = u8 [a0 + 0xc]\n  3893: u64 [sp + 0xf8] = a2\n  3897: a2 = u8 [a0 + 0xd]\n  3900: u64 [sp + 0xf0] = a2\n  3904: a2 = u8 [a0 + 0xe]\n  3907: u64 [sp + 0xe8] = a2\n  3911: a2 = u8 [a0 + 0xf]\n  3914: u64 [sp + 0xe0] = a2\n  3918: a2 = u8 [a0 + 0x10]\n  3921: u64 [sp + 0xd0] = a2\n  3925: a2 = u8 [a0 + 0x11]\n  3928: u64 [sp + 0xc8] = a2\n  3932: a2 = u8 [a0 + 0x12]\n  3935: u64 [sp + 0xb8] = a2\n  3939: a2 = u8 [a0 + 0x13]\n  3942: u64 [sp + 0xb0] = a2\n  3946: a2 = u8 [a0 + 0x14]\n  3949: u64 [sp + 0xa8] = a2\n  3953: a2 = u8 [a0 + 0x15]\n  3956: u64 [sp + 0xa0] = a2\n  3960: a2 = u8 [a0 + 0x16]\n  3963: u64 [sp + 0x98] = a2\n  3967: a2 = u8 [a0 + 0x17]\n  3970: u64 [sp + 0x90] = a2\n  3974: a2 = u8 [a0 + 0x18]\n  3977: u64 [sp + 0x88] = a2\n  3981: a2 = u8 [a0 + 0x19]\n  3984: u64 [sp + 0x80] = a2\n  3988: a2 = u8 [a0 + 0x1a]\n  3991: u64 [sp + 0x78] = a2\n  3994: a2 = u8 [a0 + 0x1b]\n  3997: u64 [sp + 0x70] = a2\n  4000: a2 = u8 [a0 + 0x1c]\n  4003: u64 [sp + 0x68] = a2\n  4006: a2 = u8 [a0 + 0x1d]\n  4009: u64 [sp + 0x60] = a2\n  4012: a2 = u8 [a0 + 0x1e]\n  4015: u64 [sp + 0x58] = a2\n  4018: a0 = u8 [a0 + 0x1f]\n  4021: u64 [sp + 0x50] = a0\n  4024: a1 = a1 + a5\n  4027: u64 [sp + 0xd8] = a1\n  4031: a0 = a1 <u a5\n  4034: a3 = a3 + a0\n  4037: u64 [sp + 0x168] = a3\n  4041: i32 a0 = a4 + 0\n  4043: a1 = 0x20\n  4046: ra = 80, jump @0\n      : @87 [@dyn 40] (gas: 96)\n  4051: a1 = u64 [sp + 0x180]\n  4055: t0 = a1 + 0x20\n  4058: a4 = t0 <u a1\n  4061: a1 = u64 [sp + 0x188]\n  4065: t1 = a1 + a4\n  4068: a2 = u64 [sp + 0x48]\n  4071: a5 = t0 <u a2\n  4074: a2 = u64 [sp + 0x28]\n  4077: s1 = t1 ^ a2\n  4080: a3 = t1 <u a2\n  4083: a3 = a5 if s1 == 0\n  4086: a5 = t1 <u a1\n  4089: a5 = a4 if a4 == 0\n  4092: a1 = u64 [sp + 0x170]\n  4096: ra = a1 + a5\n  4099: a5 = ra <u a1\n  4102: a2 = u64 [sp + 0x178]\n  4106: a2 = a2 + a5\n  4109: a5 = u64 [sp + 0x40]\n  4112: t2 = ra <u a5\n  4115: a1 = u64 [sp + 0x38]\n  4118: s1 = a2 ^ a1\n  4121: a1 = a2 <u a1\n  4124: a1 = t2 if s1 == 0\n  4127: a5 = ra ^ a5\n  4130: a5 = a5 | s1\n  4133: a3 = a1 if a5 != 0\n  4136: a1 = u64 [sp + 0x50]\n  4139: u8 [a0 + 0x1f] = a1\n  4142: a1 = u64 [sp + 0x58]\n  4145: u8 [a0 + 0x1e] = a1\n  4148: a1 = u64 [sp + 0x60]\n  4151: u8 [a0 + 0x1d] = a1\n  4154: a1 = u64 [sp + 0x68]\n  4157: u8 [a0 + 0x1c] = a1\n  4160: a1 = u64 [sp + 0x70]\n  4163: u8 [a0 + 0x1b] = a1\n  4166: a1 = u64 [sp + 0x78]\n  4169: u8 [a0 + 0x1a] = a1\n  4172: a1 = u64 [sp + 0x80]\n  4176: u8 [a0 + 0x19] = a1\n  4179: a1 = u64 [sp + 0x88]\n  4183: u8 [a0 + 0x18] = a1\n  4186: a1 = u64 [sp + 0x90]\n  4190: u8 [a0 + 0x17] = a1\n  4193: a1 = u64 [sp + 0x98]\n  4197: u8 [a0 + 0x16] = a1\n  4200: a1 = u64 [sp + 0xa0]\n  4204: u8 [a0 + 0x15] = a1\n  4207: a1 = u64 [sp + 0xa8]\n  4211: u8 [a0 + 0x14] = a1\n  4214: a1 = u64 [sp + 0xb0]\n  4218: u8 [a0 + 0x13] = a1\n  4221: a1 = u64 [sp + 0xb8]\n  4225: u8 [a0 + 0x12] = a1\n  4228: a1 = u64 [sp + 0xc8]\n  4232: u8 [a0 + 0x11] = a1\n  4235: a1 = u64 [sp + 0xd0]\n  4239: u8 [a0 + 0x10] = a1\n  4242: a1 = u64 [sp + 0xe0]\n  4246: u8 [a0 + 0xf] = a1\n  4249: a1 = u64 [sp + 0xe8]\n  4253: u8 [a0 + 0xe] = a1\n  4256: a1 = u64 [sp + 0xf0]\n  4260: u8 [a0 + 0xd] = a1\n  4263: a1 = u64 [sp + 0xf8]\n  4267: u8 [a0 + 0xc] = a1\n  4270: a1 = u64 [sp + 0x100]\n  4274: u8 [a0 + 0xb] = a1\n  4277: a1 = u64 [sp + 0x108]\n  4281: u8 [a0 + 0xa] = a1\n  4284: a1 = u64 [sp + 0x110]\n  4288: u8 [a0 + 0x9] = a1\n  4291: a1 = u64 [sp + 0x118]\n  4295: u8 [a0 + 0x8] = a1\n  4298: a1 = u64 [sp + 0x120]\n  4302: u8 [a0 + 0x7] = a1\n  4305: a1 = u64 [sp + 0x128]\n  4309: u8 [a0 + 0x6] = a1\n  4312: a1 = u64 [sp + 0x130]\n  4316: u8 [a0 + 0x5] = a1\n  4319: a1 = u64 [sp + 0x138]\n  4323: u8 [a0 + 0x4] = a1\n  4326: a1 = u64 [sp + 0x140]\n  4330: u8 [a0 + 0x3] = a1\n  4333: a1 = u64 [sp + 0x148]\n  4337: u8 [a0 + 0x2] = a1\n  4340: a1 = u64 [sp + 0x150]\n  4344: u8 [a0 + 0x1] = a1\n  4347: a1 = u64 [sp + 0x158]\n  4351: u8 [a0] = a1\n  4353: a1 = u64 [sp + 0xc0]\n  4357: a4 = u64 [sp + 0x160]\n  4361: s1 = u64 [sp + 0xd8]\n  4365: a5 = ra\n  4367: jump @83 if a3 != 0\n      : @88 (gas: 15)\n  4371: a0 = u64 [sp]\n  4373: a1 = u64 [sp + 0x8]\n  4376: u64 [a0] = a1\n  4378: a1 = u64 [sp + 0x10]\n  4381: u64 [a0 + 0x8] = a1\n  4384: a1 = u64 [sp + 0x18]\n  4387: u64 [a0 + 0x10] = a1\n  4390: a1 = u64 [sp + 0x20]\n  4393: u64 [a0 + 0x18] = a1\n  4396: sp = s0 + 0xfffffffffffffdd0\n  4400: ra = u64 [sp + 0x228]\n  4404: s0 = u64 [sp + 0x220]\n  4408: s1 = u64 [sp + 0x218]\n  4412: sp = sp + 0x230\n  4416: ret\n      : @89 (gas: 1)\n  4418: trap\n      : @90 (gas: 8)\n  4419: u64 [sp + 448] = 0\n  4423: u64 [sp + 440] = 0\n  4427: u64 [sp + 432] = 0\n  4431: a0 = 0x4e487b7100000000\n  4441: a1 = sp + 0x1b0\n  4445: u64 [sp + 0x1c8] = a0\n  4449: a0 = 0\n  4451: ra = 82, jump @8\n      : @91 [@dyn 41] (gas: 7)\n  4456: u64 [sp + 424] = 0\n  4460: u64 [sp + 416] = 0\n  4464: u64 [sp + 400] = 0x41\n  4469: a0 = 0x4\n  4472: a1 = sp + 0x190\n  4476: u64 [sp + 408] = 0\n  4480: ra = 84, jump @8\n      : @92 [@dyn 42] (gas: 3)\n  4485: a1 = 0x24\n  4488: a0 = 0\n  4490: ra = 86, jump @0\n      : @93 [@dyn 43] (gas: 5)\n  4495: i32 a1 = a0 + 0\n  4497: a0 = 0x1\n  4500: a2 = 0x24\n  4503: ecalli 6 // 'seal_return'\n  4505: fallthrough\n      : @94 (gas: 3)\n  4506: a0 = 0\n  4508: a1 = 0\n  4510: ra = 88, jump @0\n      : @95 [@dyn 44] (gas: 6)\n  4515: i32 a1 = a0 + 0\n  4517: a0 = 0x1\n  4520: a2 = 0\n  4522: ra = 0x5a\n  4525: ecalli 6 // 'seal_return'\n  4527: fallthrough\n      : @96 [@dyn 45] (gas: 37)\n  4528: sp = sp + 0xffffffffffffff20\n  4532: u64 [sp + 0xd8] = ra\n  4536: u64 [sp + 0xd0] = s0\n  4540: u64 [sp + 0xc8] = s1\n  4544: s0 = sp + 0xe0\n  4548: sp = sp & 0xfffffffffffffff0\n  4551: ra = u64 [a1]\n  4553: t1 = u64 [a2 + 0x8]\n  4556: t2 = u64 [a1 + 0x8]\n  4559: a4 = u64 [a2]\n  4561: a3 = ra + 0x1f\n  4564: t0 = a3 <u ra\n  4567: a5 = t2 + t0\n  4570: u64 [sp + 0x20] = a4\n  4573: a3 = a3 <u a4\n  4576: s1 = a5 ^ t1\n  4579: a4 = a5 <u t1\n  4582: a4 = a3 if s1 == 0\n  4585: s1 = u64 [a1 + 0x10]\n  4588: u64 [sp + 0x38] = t2\n  4591: a3 = a5 <u t2\n  4594: a3 = t0 if t0 == 0\n  4597: t0 = u64 [a2 + 0x18]\n  4600: a5 = u64 [a1 + 0x18]\n  4603: t2 = u64 [a2 + 0x10]\n  4606: a3 = a3 + s1\n  4609: a1 = a3 <u s1\n  4612: u64 [sp + 0x30] = a5\n  4615: a1 = a1 + a5\n  4618: a2 = a1 ^ t0\n  4621: a1 = a1 <s t0\n  4624: a5 = a3 <u t2\n  4627: a1 = a5 if a2 == 0\n  4630: a3 = a3 ^ t2\n  4633: a2 = a2 | a3\n  4636: a4 = a1 if a2 != 0\n  4639: jump @102 if a4 == 0\n      : @97 (gas: 15)\n  4643: u64 [sp] = t2\n  4645: u64 [sp + 0x8] = t0\n  4648: u64 [sp + 0x18] = a0\n  4651: u64 [sp + 0x28] = t1\n  4654: a0 = ra | s1\n  4657: a1 = u64 [sp + 0x38]\n  4660: a2 = u64 [sp + 0x30]\n  4663: a1 = a1 | a2\n  4666: a0 = a0 | a1\n  4669: a0 = a0 >> 0x20\n  4672: u64 [sp + 0x10] = s1\n  4675: a1 = a1 | s1\n  4678: a1 = a1 << 0x20\n  4681: a0 = a0 | a1\n  4684: jump @101 if a0 != 0\n      : @98 (gas: 4)\n  4688: i32 a0 = ra + 0\n  4690: a1 = 0x20\n  4693: s1 = ra\n  4695: ra = 92, jump @0\n      : @99 [@dyn 46] (gas: 124)\n  4700: a1 = u8 [a0 + 0x1]\n  4703: a2 = u8 [a0]\n  4705: a3 = u8 [a0 + 0x2]\n  4708: a4 = u8 [a0 + 0x3]\n  4711: a1 = a1 << 0x8\n  4714: a1 = a1 | a2\n  4717: a3 = a3 << 0x10\n  4720: a4 = a4 << 0x18\n  4723: a3 = a3 | a4\n  4726: a1 = a1 | a3\n  4729: a2 = u8 [a0 + 0x5]\n  4732: a3 = u8 [a0 + 0x4]\n  4735: a4 = u8 [a0 + 0x6]\n  4738: a5 = u8 [a0 + 0x7]\n  4741: a2 = a2 << 0x8\n  4744: a2 = a2 | a3\n  4747: a4 = a4 << 0x10\n  4750: a5 = a5 << 0x18\n  4753: a4 = a4 | a5\n  4756: a2 = a2 | a4\n  4759: a2 = a2 << 0x20\n  4762: t0 = a2 | a1\n  4765: a2 = u8 [a0 + 0x9]\n  4768: a3 = u8 [a0 + 0x8]\n  4771: a4 = u8 [a0 + 0xa]\n  4774: a5 = u8 [a0 + 0xb]\n  4777: a2 = a2 << 0x8\n  4780: a2 = a2 | a3\n  4783: a4 = a4 << 0x10\n  4786: a5 = a5 << 0x18\n  4789: a4 = a4 | a5\n  4792: a2 = a2 | a4\n  4795: a3 = u8 [a0 + 0xd]\n  4798: a4 = u8 [a0 + 0xc]\n  4801: a5 = u8 [a0 + 0xe]\n  4804: a1 = u8 [a0 + 0xf]\n  4807: a3 = a3 << 0x8\n  4810: a3 = a3 | a4\n  4813: a5 = a5 << 0x10\n  4816: a1 = a1 << 0x18\n  4819: a1 = a1 | a5\n  4822: a1 = a1 | a3\n  4825: a1 = a1 << 0x20\n  4828: t1 = a1 | a2\n  4831: a1 = u8 [a0 + 0x11]\n  4834: a3 = u8 [a0 + 0x10]\n  4837: a4 = u8 [a0 + 0x12]\n  4840: a5 = u8 [a0 + 0x13]\n  4843: a1 = a1 << 0x8\n  4846: a1 = a1 | a3\n  4849: a4 = a4 << 0x10\n  4852: a5 = a5 << 0x18\n  4855: a4 = a4 | a5\n  4858: a1 = a1 | a4\n  4861: a3 = u8 [a0 + 0x15]\n  4864: a4 = u8 [a0 + 0x14]\n  4867: a5 = u8 [a0 + 0x16]\n  4870: a2 = u8 [a0 + 0x17]\n  4873: a3 = a3 << 0x8\n  4876: a3 = a3 | a4\n  4879: a5 = a5 << 0x10\n  4882: a2 = a2 << 0x18\n  4885: a2 = a2 | a5\n  4888: a2 = a2 | a3\n  4891: a2 = a2 << 0x20\n  4894: a3 = a2 | a1\n  4897: a1 = u8 [a0 + 0x19]\n  4900: a2 = u8 [a0 + 0x18]\n  4903: a4 = u8 [a0 + 0x1a]\n  4906: a5 = u8 [a0 + 0x1b]\n  4909: a1 = a1 << 0x8\n  4912: a1 = a1 | a2\n  4915: a4 = a4 << 0x10\n  4918: a5 = a5 << 0x18\n  4921: a4 = a4 | a5\n  4924: a1 = a1 | a4\n  4927: a2 = u8 [a0 + 0x1d]\n  4930: a4 = u8 [a0 + 0x1c]\n  4933: a5 = u8 [a0 + 0x1e]\n  4936: a0 = u8 [a0 + 0x1f]\n  4939: a2 = a2 << 0x8\n  4942: a2 = a2 | a4\n  4945: a5 = a5 << 0x10\n  4948: a0 = a0 << 0x18\n  4951: a0 = a0 | a5\n  4954: a0 = a0 | a2\n  4957: a0 = a0 << 0x20\n  4960: a0 = a0 | a1\n  4963: t2 = reverse a0\n  4965: ra = reverse a3\n  4967: a1 = reverse t1\n  4969: a2 = reverse t0\n  4971: a3 = s1 + 0x20\n  4974: a5 = a3 <u s1\n  4977: a0 = u64 [sp + 0x38]\n  4980: a4 = a0 + a5\n  4983: s1 = a4 <u a0\n  4986: s1 = a5 if a5 == 0\n  4989: a0 = u64 [sp + 0x10]\n  4992: s1 = s1 + a0\n  4995: a5 = s1 <u a0\n  4998: a0 = u64 [sp + 0x30]\n  5001: a5 = a5 + a0\n  5004: a0 = u64 [sp + 0x8]\n  5007: u64 [sp + 0x58] = a0\n  5010: a0 = u64 [sp]\n  5012: u64 [sp + 0x50] = a0\n  5015: a0 = u64 [sp + 0x28]\n  5018: u64 [sp + 0x48] = a0\n  5021: a0 = u64 [sp + 0x20]\n  5024: u64 [sp + 0x40] = a0\n  5027: u64 [sp + 0x88] = a4\n  5031: u64 [sp + 0x80] = a3\n  5035: u64 [sp + 0x90] = s1\n  5039: u64 [sp + 0x98] = a5\n  5043: u64 [sp + 0x78] = a2\n  5046: u64 [sp + 0x70] = a1\n  5049: u64 [sp + 0x68] = ra\n  5052: a0 = sp + 0xa0\n  5056: a1 = sp + 0x80\n  5060: a2 = sp + 0x60\n  5063: a3 = sp + 0x40\n  5066: u64 [sp + 0x60] = t2\n  5069: ra = 94, jump @76\n      : @100 [@dyn 47] (gas: 15)\n  5074: a0 = u64 [sp + 0xb0]\n  5078: a1 = u64 [sp + 0xb8]\n  5082: a2 = u64 [sp + 0xa0]\n  5086: a3 = u64 [sp + 0xa8]\n  5090: a4 = u64 [sp + 0x18]\n  5093: u64 [a4 + 0x10] = a0\n  5096: u64 [a4 + 0x18] = a1\n  5099: u64 [a4] = a2\n  5101: u64 [a4 + 0x8] = a3\n  5104: sp = s0 + 0xffffffffffffff20\n  5108: ra = u64 [sp + 0xd8]\n  5112: s0 = u64 [sp + 0xd0]\n  5116: s1 = u64 [sp + 0xc8]\n  5120: sp = sp + 0xe0\n  5124: ret\n      : @101 (gas: 1)\n  5126: trap\n      : @102 (gas: 3)\n  5127: a0 = 0\n  5129: a1 = 0\n  5131: ra = 96, jump @0\n      : @103 [@dyn 48] (gas: 6)\n  5136: i32 a1 = a0 + 0\n  5138: a0 = 0x1\n  5141: a2 = 0\n  5143: ra = 0x62\n  5146: ecalli 6 // 'seal_return'\n  5148: fallthrough\n      : @104 [@dyn 49] (gas: 42)\n  5149: sp = sp + 0xffffffffffffff10\n  5153: u64 [sp + 0xe8] = ra\n  5157: u64 [sp + 0xe0] = s0\n  5161: u64 [sp + 0xd8] = s1\n  5165: s0 = sp + 0xf0\n  5169: sp = sp & 0xfffffffffffffff0\n  5172: s1 = u64 [a2 + 0x8]\n  5175: t2 = u64 [a1 + 0x8]\n  5178: a5 = u64 [a2]\n  5180: ra = u64 [a1]\n  5182: t1 = u64 [a2 + 0x10]\n  5185: a4 = s1 ^ t2\n  5188: a3 = s1 <u t2\n  5191: t0 = a5 <u ra\n  5194: a3 = t0 if a4 == 0\n  5197: u64 [sp + 0x48] = s1\n  5200: a4 = s1 - t2\n  5203: a4 = a4 - t0\n  5206: u64 [sp + 0x40] = a5\n  5209: a5 = a5 - ra\n  5212: a5 = a5 <u 0x20\n  5215: a5 = a5 ^ 0x1\n  5218: t0 = u64 [a1 + 0x10]\n  5221: s1 = a4 >u 0\n  5223: a5 = s1 if a4 != 0\n  5226: a4 = u64 [a2 + 0x18]\n  5229: s1 = u64 [a1 + 0x18]\n  5232: a1 = t1 - t0\n  5235: a2 = a1 - a3\n  5238: a1 = a1 <u a3\n  5241: u64 [sp + 0x38] = t1\n  5244: a3 = t1 <u t0\n  5247: u64 [sp + 0x30] = a4\n  5250: a4 = a4 - s1\n  5253: a4 = a4 - a3\n  5256: a4 = a4 - a1\n  5259: a1 = a4 >s 0\n  5261: a3 = a2 >u 0\n  5263: a3 = a1 if a4 != 0\n  5266: a2 = a2 | a4\n  5269: a5 = a3 if a2 != 0\n  5272: jump @114 if a5 == 0\n      : @105 (gas: 12)\n  5276: u64 [sp + 0x10] = a0\n  5279: a0 = ra | t0\n  5282: u64 [sp + 0x28] = t2\n  5285: u64 [sp + 0x18] = s1\n  5288: a1 = t2 | s1\n  5291: a0 = a0 | a1\n  5294: a0 = a0 >> 0x20\n  5297: u64 [sp + 0x20] = t0\n  5300: a1 = a1 | t0\n  5303: a1 = a1 << 0x20\n  5306: a0 = a0 | a1\n  5309: jump @113 if a0 != 0\n      : @106 (gas: 4)\n  5313: u64 [sp + 0x8] = ra\n  5316: i32 a0 = ra + 0\n  5318: a1 = 0x20\n  5321: ra = 100, jump @0\n      : @107 [@dyn 50] (gas: 73)\n  5326: a1 = u8 [a0 + 0x9]\n  5329: a2 = u8 [a0 + 0x8]\n  5332: a3 = u8 [a0 + 0xa]\n  5335: a4 = u8 [a0 + 0xb]\n  5338: a1 = a1 << 0x8\n  5341: a1 = a1 | a2\n  5344: a3 = a3 << 0x10\n  5347: a4 = a4 << 0x18\n  5350: a3 = a3 | a4\n  5353: a1 = a1 | a3\n  5356: a2 = u8 [a0 + 0xd]\n  5359: a3 = u8 [a0 + 0xc]\n  5362: a4 = u8 [a0 + 0xe]\n  5365: a5 = u8 [a0 + 0xf]\n  5368: a2 = a2 << 0x8\n  5371: a2 = a2 | a3\n  5374: a4 = a4 << 0x10\n  5377: a5 = a5 << 0x18\n  5380: a4 = a4 | a5\n  5383: a2 = a2 | a4\n  5386: a2 = a2 << 0x20\n  5389: t0 = a2 | a1\n  5392: a2 = u8 [a0 + 0x1]\n  5395: a3 = u8 [a0]\n  5397: a4 = u8 [a0 + 0x2]\n  5400: a5 = u8 [a0 + 0x3]\n  5403: a2 = a2 << 0x8\n  5406: a2 = a2 | a3\n  5409: a4 = a4 << 0x10\n  5412: a5 = a5 << 0x18\n  5415: a4 = a4 | a5\n  5418: a2 = a2 | a4\n  5421: a3 = u8 [a0 + 0x5]\n  5424: a4 = u8 [a0 + 0x4]\n  5427: a5 = u8 [a0 + 0x6]\n  5430: s1 = u8 [a0 + 0x7]\n  5433: a3 = a3 << 0x8\n  5436: a3 = a3 | a4\n  5439: a5 = a5 << 0x10\n  5442: s1 = s1 << 0x18\n  5445: a5 = a5 | s1\n  5448: a3 = a3 | a5\n  5451: a3 = a3 << 0x20\n  5454: a2 = a2 | a3\n  5457: a3 = u8 [a0 + 0x11]\n  5460: a4 = u8 [a0 + 0x10]\n  5463: a5 = u8 [a0 + 0x12]\n  5466: s1 = u8 [a0 + 0x13]\n  5469: a3 = a3 << 0x8\n  5472: a3 = a3 | a4\n  5475: a5 = a5 << 0x10\n  5478: s1 = s1 << 0x18\n  5481: a5 = a5 | s1\n  5484: a3 = a3 | a5\n  5487: a4 = u8 [a0 + 0x15]\n  5490: a5 = u8 [a0 + 0x14]\n  5493: s1 = u8 [a0 + 0x16]\n  5496: a1 = u8 [a0 + 0x17]\n  5499: a4 = a4 << 0x8\n  5502: a4 = a4 | a5\n  5505: s1 = s1 << 0x10\n  5508: a1 = a1 << 0x18\n  5511: a1 = a1 | s1\n  5514: a1 = a1 | a4\n  5517: a1 = a1 << 0x20\n  5520: a1 = a1 | a3\n  5523: a3 = reverse a1\n  5525: t1 = reverse a2\n  5527: a1 = reverse t0\n  5529: a4 = a1 | t1\n  5532: a5 = a3 <u 0x1\n  5535: a5 = 0 if a4 != 0\n  5537: jump @114 if a5 == 0\n      : @108 (gas: 65)\n  5541: a4 = u8 [a0 + 0x19]\n  5544: a5 = u8 [a0 + 0x18]\n  5547: s1 = u8 [a0 + 0x1a]\n  5550: a2 = u8 [a0 + 0x1b]\n  5553: a4 = a4 << 0x8\n  5556: a4 = a4 | a5\n  5559: s1 = s1 << 0x10\n  5562: a2 = a2 << 0x18\n  5565: a2 = a2 | s1\n  5568: a2 = a2 | a4\n  5571: a4 = u8 [a0 + 0x1d]\n  5574: a5 = u8 [a0 + 0x1c]\n  5577: s1 = u8 [a0 + 0x1e]\n  5580: a0 = u8 [a0 + 0x1f]\n  5583: a4 = a4 << 0x8\n  5586: a4 = a4 | a5\n  5589: s1 = s1 << 0x10\n  5592: a0 = a0 << 0x18\n  5595: a0 = a0 | s1\n  5598: a0 = a0 | a4\n  5601: a0 = a0 << 0x20\n  5604: a0 = a0 | a2\n  5607: a0 = reverse a0\n  5609: a2 = u64 [sp + 0x8]\n  5612: t0 = a0 + a2\n  5615: a0 = t0 <u a0\n  5618: a2 = u64 [sp + 0x28]\n  5621: a2 = a2 + a3\n  5624: t2 = a2 + a0\n  5627: a2 = t2 ^ a3\n  5630: s1 = t2 <u a3\n  5633: s1 = a0 if a2 == 0\n  5636: a0 = u64 [sp + 0x20]\n  5639: a0 = a0 + a1\n  5642: s1 = s1 + a0\n  5645: a2 = s1 <u a0\n  5648: a0 = a0 <u a1\n  5651: a1 = u64 [sp + 0x18]\n  5654: t1 = t1 + a1\n  5657: a0 = a0 + t1\n  5660: ra = a0 + a2\n  5663: a0 = t0 + 0x1f\n  5666: a1 = a0 <u t0\n  5669: a2 = t2 + a1\n  5672: a3 = a2 <u t2\n  5675: a3 = a1 if a1 == 0\n  5678: t1 = s1 + a3\n  5681: a1 = t1 <u s1\n  5684: a1 = a1 + ra\n  5687: a5 = u64 [sp + 0x48]\n  5690: a4 = a2 ^ a5\n  5693: a2 = a2 <u a5\n  5696: a5 = u64 [sp + 0x40]\n  5699: a0 = a0 <u a5\n  5702: a0 = a2 if a4 != 0\n  5705: a5 = u64 [sp + 0x38]\n  5708: a2 = t1 <u a5\n  5711: a4 = u64 [sp + 0x30]\n  5714: a3 = a1 ^ a4\n  5717: a1 = a1 <s a4\n  5720: a1 = a2 if a3 == 0\n  5723: a2 = t1 ^ a5\n  5726: a2 = a2 | a3\n  5729: a0 = a1 if a2 != 0\n  5732: jump @115 if a0 == 0\n      : @109 (gas: 11)\n  5736: a0 = t0 | s1\n  5739: u64 [sp + 0x28] = t2\n  5742: u64 [sp + 0x18] = ra\n  5745: a1 = t2 | ra\n  5748: a0 = a0 | a1\n  5751: a0 = a0 >> 0x20\n  5754: u64 [sp + 0x20] = s1\n  5757: a1 = a1 | s1\n  5760: a1 = a1 << 0x20\n  5763: a0 = a0 | a1\n  5766: jump @113 if a0 != 0\n      : @110 (gas: 4)\n  5770: i32 a0 = t0 + 0\n  5772: a1 = 0x20\n  5775: s1 = t0\n  5777: ra = 102, jump @0\n      : @111 [@dyn 51] (gas: 124)\n  5782: a1 = u8 [a0 + 0x1]\n  5785: a2 = u8 [a0]\n  5787: a3 = u8 [a0 + 0x2]\n  5790: a4 = u8 [a0 + 0x3]\n  5793: a1 = a1 << 0x8\n  5796: a1 = a1 | a2\n  5799: a3 = a3 << 0x10\n  5802: a4 = a4 << 0x18\n  5805: a3 = a3 | a4\n  5808: a1 = a1 | a3\n  5811: a2 = u8 [a0 + 0x5]\n  5814: a3 = u8 [a0 + 0x4]\n  5817: a4 = u8 [a0 + 0x6]\n  5820: a5 = u8 [a0 + 0x7]\n  5823: a2 = a2 << 0x8\n  5826: a2 = a2 | a3\n  5829: a4 = a4 << 0x10\n  5832: a5 = a5 << 0x18\n  5835: a4 = a4 | a5\n  5838: a2 = a2 | a4\n  5841: a2 = a2 << 0x20\n  5844: t0 = a2 | a1\n  5847: a2 = u8 [a0 + 0x9]\n  5850: a3 = u8 [a0 + 0x8]\n  5853: a4 = u8 [a0 + 0xa]\n  5856: a5 = u8 [a0 + 0xb]\n  5859: a2 = a2 << 0x8\n  5862: a2 = a2 | a3\n  5865: a4 = a4 << 0x10\n  5868: a5 = a5 << 0x18\n  5871: a4 = a4 | a5\n  5874: a2 = a2 | a4\n  5877: a3 = u8 [a0 + 0xd]\n  5880: a4 = u8 [a0 + 0xc]\n  5883: a5 = u8 [a0 + 0xe]\n  5886: a1 = u8 [a0 + 0xf]\n  5889: a3 = a3 << 0x8\n  5892: a3 = a3 | a4\n  5895: a5 = a5 << 0x10\n  5898: a1 = a1 << 0x18\n  5901: a1 = a1 | a5\n  5904: a1 = a1 | a3\n  5907: a1 = a1 << 0x20\n  5910: t1 = a1 | a2\n  5913: a1 = u8 [a0 + 0x11]\n  5916: a3 = u8 [a0 + 0x10]\n  5919: a4 = u8 [a0 + 0x12]\n  5922: a5 = u8 [a0 + 0x13]\n  5925: a1 = a1 << 0x8\n  5928: a1 = a1 | a3\n  5931: a4 = a4 << 0x10\n  5934: a5 = a5 << 0x18\n  5937: a4 = a4 | a5\n  5940: a1 = a1 | a4\n  5943: a3 = u8 [a0 + 0x15]\n  5946: a4 = u8 [a0 + 0x14]\n  5949: a5 = u8 [a0 + 0x16]\n  5952: a2 = u8 [a0 + 0x17]\n  5955: a3 = a3 << 0x8\n  5958: a3 = a3 | a4\n  5961: a5 = a5 << 0x10\n  5964: a2 = a2 << 0x18\n  5967: a2 = a2 | a5\n  5970: a2 = a2 | a3\n  5973: a2 = a2 << 0x20\n  5976: a3 = a2 | a1\n  5979: a1 = u8 [a0 + 0x19]\n  5982: a2 = u8 [a0 + 0x18]\n  5985: a4 = u8 [a0 + 0x1a]\n  5988: a5 = u8 [a0 + 0x1b]\n  5991: a1 = a1 << 0x8\n  5994: a1 = a1 | a2\n  5997: a4 = a4 << 0x10\n  6000: a5 = a5 << 0x18\n  6003: a4 = a4 | a5\n  6006: a1 = a1 | a4\n  6009: a2 = u8 [a0 + 0x1d]\n  6012: a4 = u8 [a0 + 0x1c]\n  6015: a5 = u8 [a0 + 0x1e]\n  6018: a0 = u8 [a0 + 0x1f]\n  6021: a2 = a2 << 0x8\n  6024: a2 = a2 | a4\n  6027: a5 = a5 << 0x10\n  6030: a0 = a0 << 0x18\n  6033: a0 = a0 | a5\n  6036: a0 = a0 | a2\n  6039: a0 = a0 << 0x20\n  6042: a0 = a0 | a1\n  6045: t2 = reverse a0\n  6047: ra = reverse a3\n  6049: a1 = reverse t1\n  6051: a2 = reverse t0\n  6053: a3 = s1 + 0x20\n  6056: a5 = a3 <u s1\n  6059: a0 = u64 [sp + 0x28]\n  6062: a4 = a0 + a5\n  6065: s1 = a4 <u a0\n  6068: s1 = a5 if a5 == 0\n  6071: a0 = u64 [sp + 0x20]\n  6074: s1 = s1 + a0\n  6077: a5 = s1 <u a0\n  6080: a0 = u64 [sp + 0x18]\n  6083: a5 = a5 + a0\n  6086: a0 = u64 [sp + 0x30]\n  6089: u64 [sp + 0x68] = a0\n  6092: a0 = u64 [sp + 0x38]\n  6095: u64 [sp + 0x60] = a0\n  6098: a0 = u64 [sp + 0x48]\n  6101: u64 [sp + 0x58] = a0\n  6104: a0 = u64 [sp + 0x40]\n  6107: u64 [sp + 0x50] = a0\n  6110: u64 [sp + 0x98] = a4\n  6114: u64 [sp + 0x90] = a3\n  6118: u64 [sp + 0xa0] = s1\n  6122: u64 [sp + 0xa8] = a5\n  6126: u64 [sp + 0x88] = a2\n  6130: u64 [sp + 0x80] = a1\n  6134: u64 [sp + 0x78] = ra\n  6137: a0 = sp + 0xb0\n  6141: a1 = sp + 0x90\n  6145: a2 = sp + 0x70\n  6148: a3 = sp + 0x50\n  6151: u64 [sp + 0x70] = t2\n  6154: ra = 104, jump @76\n      : @112 [@dyn 52] (gas: 15)\n  6159: a0 = u64 [sp + 0xc0]\n  6163: a1 = u64 [sp + 0xc8]\n  6167: a2 = u64 [sp + 0xb0]\n  6171: a3 = u64 [sp + 0xb8]\n  6175: a4 = u64 [sp + 0x10]\n  6178: u64 [a4 + 0x10] = a0\n  6181: u64 [a4 + 0x18] = a1\n  6184: u64 [a4] = a2\n  6186: u64 [a4 + 0x8] = a3\n  6189: sp = s0 + 0xffffffffffffff10\n  6193: ra = u64 [sp + 0xe8]\n  6197: s0 = u64 [sp + 0xe0]\n  6201: s1 = u64 [sp + 0xd8]\n  6205: sp = sp + 0xf0\n  6209: ret\n      : @113 (gas: 1)\n  6211: trap\n      : @114 (gas: 4)\n  6212: a0 = 0\n  6214: a1 = 0\n  6216: ra = 0x6a\n  6219: jump @0\n      : @115 (gas: 2)\n  6222: a1 = 0\n  6224: ra = 106, jump @0\n      : @116 [@dyn 53] (gas: 6)\n  6229: i32 a1 = a0 + 0\n  6231: a0 = 0x1\n  6234: a2 = 0\n  6236: ra = 0x6c\n  6239: ecalli 6 // 'seal_return'\n  6241: fallthrough\n      : @117 [@dyn 54] (gas: 19)\n  6242: sp = sp + 0xffffffffffffff10\n  6246: u64 [sp + 0xe8] = ra\n  6250: u64 [sp + 0xe0] = s0\n  6254: u64 [sp + 0xd8] = s1\n  6258: s0 = sp + 0xf0\n  6262: sp = sp & 0xfffffffffffffff0\n  6265: a1 = i32 [0x20004]\n  6270: u64 [sp + 0x28] = a0\n  6273: s1 = a1\n  6275: a0 = a1 << 0x20\n  6278: a2 = a0 >> 0x20\n  6281: u64 [sp + 168] = 0\n  6285: u64 [sp + 160] = 0\n  6289: u64 [sp + 152] = 0\n  6293: a0 = sp + 0xb0\n  6297: a1 = sp + 0x90\n  6301: u64 [sp + 0x20] = a2\n  6304: u64 [sp + 0x90] = a2\n  6308: ra = 110, jump @58\n      : @118 [@dyn 55] (gas: 15)\n  6313: a1 = u64 [sp + 0xc8]\n  6317: a3 = u64 [sp + 0xc0]\n  6321: a0 = u64 [sp + 0xb8]\n  6325: a2 = u64 [sp + 0xb0]\n  6329: u64 [sp + 0x18] = a0\n  6332: u64 [sp + 0x8] = a1\n  6335: a0 = a0 | a1\n  6338: a1 = a2 | a3\n  6341: a1 = a1 | a0\n  6344: a1 = a1 >> 0x20\n  6347: u64 [sp + 0x10] = a3\n  6350: a0 = a0 | a3\n  6353: a0 = a0 << 0x20\n  6356: a0 = a0 | a1\n  6359: jump @122 if a0 != 0\n      : @119 (gas: 4)\n  6363: i32 a0 = a2 + 0\n  6365: a1 = s1\n  6367: u64 [sp] = a2\n  6369: ra = 112, jump @0\n      : @120 [@dyn 56] (gas: 30)\n  6374: i32 a0 = a0 + 0\n  6376: a1 = s1\n  6378: a2 = 0\n  6380: ecalli 0 // 'call_data_copy'\n  6381: a0 = u64 [sp + 0x20]\n  6384: a2 = u64 [sp]\n  6386: a0 = a0 + a2\n  6389: a1 = a0 <u a2\n  6392: t1 = a2\n  6394: a5 = u64 [sp + 0x18]\n  6397: a2 = a5 + a1\n  6400: a3 = a2 <u a5\n  6403: a3 = a1 if a1 == 0\n  6406: s1 = u64 [sp + 0x10]\n  6409: a3 = a3 + s1\n  6412: a1 = a3 <u s1\n  6415: a4 = u64 [sp + 0x8]\n  6418: t0 = a4 + a1\n  6421: u64 [sp + 0x38] = a2\n  6424: u64 [sp + 0x30] = a0\n  6427: u64 [sp + 0x68] = a4\n  6430: u64 [sp + 0x60] = s1\n  6433: u64 [sp + 0x58] = a5\n  6436: u64 [sp + 0x50] = t1\n  6439: u64 [sp + 0x40] = a3\n  6442: a0 = sp + 0x70\n  6445: a1 = sp + 0x50\n  6448: a2 = sp + 0x30\n  6451: u64 [sp + 0x48] = t0\n  6454: ra = 114, jump @104\n      : @121 [@dyn 57] (gas: 15)\n  6459: a0 = u64 [sp + 0x80]\n  6463: a1 = u64 [sp + 0x88]\n  6467: a2 = u64 [sp + 0x70]\n  6470: a3 = u64 [sp + 0x78]\n  6473: a4 = u64 [sp + 0x28]\n  6476: u64 [a4 + 0x10] = a0\n  6479: u64 [a4 + 0x18] = a1\n  6482: u64 [a4] = a2\n  6484: u64 [a4 + 0x8] = a3\n  6487: sp = s0 + 0xffffffffffffff10\n  6491: ra = u64 [sp + 0xe8]\n  6495: s0 = u64 [sp + 0xe0]\n  6499: s1 = u64 [sp + 0xd8]\n  6503: sp = sp + 0xf0\n  6507: ret\n      : @122 (gas: 1)\n  6509: trap\n      : @123 (gas: 12)\n  6510: a2 = u64 [a1 + 0x10]\n  6513: a3 = u64 [a1 + 0x18]\n  6516: a4 = u64 [a1 + 0x8]\n  6519: a1 = u64 [a1]\n  6521: a3 = a3 | a4\n  6524: a4 = a1 | a2\n  6527: a4 = a4 | a3\n  6530: a4 = a4 >> 0x20\n  6533: a2 = a2 | a3\n  6536: a2 = a2 << 0x20\n  6539: a2 = a2 | a4\n  6542: jump @126 if a2 != 0\n      : @124 (gas: 7)\n  6546: sp = sp + 0xfffffffffffffff0\n  6549: u64 [sp + 0x8] = ra\n  6552: u64 [sp] = s0\n  6554: s0 = a0\n  6556: i32 a0 = a1 + 0\n  6558: a1 = 0x20\n  6561: ra = 116, jump @0\n      : @125 [@dyn 58] (gas: 100)\n  6566: a1 = u8 [a0 + 0x1]\n  6569: a2 = u8 [a0]\n  6571: a3 = u8 [a0 + 0x2]\n  6574: a4 = u8 [a0 + 0x3]\n  6577: a1 = a1 << 0x8\n  6580: a1 = a1 | a2\n  6583: a3 = a3 << 0x10\n  6586: a4 = a4 << 0x18\n  6589: a3 = a3 | a4\n  6592: a1 = a1 | a3\n  6595: a2 = u8 [a0 + 0x5]\n  6598: a3 = u8 [a0 + 0x4]\n  6601: a4 = u8 [a0 + 0x6]\n  6604: a5 = u8 [a0 + 0x7]\n  6607: a2 = a2 << 0x8\n  6610: a2 = a2 | a3\n  6613: a4 = a4 << 0x10\n  6616: a5 = a5 << 0x18\n  6619: a4 = a4 | a5\n  6622: a2 = a2 | a4\n  6625: a2 = a2 << 0x20\n  6628: t0 = a2 | a1\n  6631: a2 = u8 [a0 + 0x9]\n  6634: a3 = u8 [a0 + 0x8]\n  6637: a4 = u8 [a0 + 0xa]\n  6640: a5 = u8 [a0 + 0xb]\n  6643: a2 = a2 << 0x8\n  6646: a2 = a2 | a3\n  6649: a4 = a4 << 0x10\n  6652: a5 = a5 << 0x18\n  6655: a4 = a4 | a5\n  6658: a2 = a2 | a4\n  6661: a3 = u8 [a0 + 0xd]\n  6664: a4 = u8 [a0 + 0xc]\n  6667: a5 = u8 [a0 + 0xe]\n  6670: a1 = u8 [a0 + 0xf]\n  6673: a3 = a3 << 0x8\n  6676: a3 = a3 | a4\n  6679: a5 = a5 << 0x10\n  6682: a1 = a1 << 0x18\n  6685: a1 = a1 | a5\n  6688: a1 = a1 | a3\n  6691: a1 = a1 << 0x20\n  6694: t1 = a1 | a2\n  6697: a1 = u8 [a0 + 0x11]\n  6700: a3 = u8 [a0 + 0x10]\n  6703: a4 = u8 [a0 + 0x12]\n  6706: a5 = u8 [a0 + 0x13]\n  6709: a1 = a1 << 0x8\n  6712: a1 = a1 | a3\n  6715: a4 = a4 << 0x10\n  6718: a5 = a5 << 0x18\n  6721: a4 = a4 | a5\n  6724: a1 = a1 | a4\n  6727: a3 = u8 [a0 + 0x15]\n  6730: a4 = u8 [a0 + 0x14]\n  6733: a5 = u8 [a0 + 0x16]\n  6736: a2 = u8 [a0 + 0x17]\n  6739: a3 = a3 << 0x8\n  6742: a3 = a3 | a4\n  6745: a5 = a5 << 0x10\n  6748: a2 = a2 << 0x18\n  6751: a2 = a2 | a5\n  6754: a2 = a2 | a3\n  6757: a2 = a2 << 0x20\n  6760: a3 = a2 | a1\n  6763: a1 = u8 [a0 + 0x19]\n  6766: a2 = u8 [a0 + 0x18]\n  6769: a4 = u8 [a0 + 0x1a]\n  6772: a5 = u8 [a0 + 0x1b]\n  6775: a1 = a1 << 0x8\n  6778: a1 = a1 | a2\n  6781: a4 = a4 << 0x10\n  6784: a5 = a5 << 0x18\n  6787: a4 = a4 | a5\n  6790: a1 = a1 | a4\n  6793: a2 = u8 [a0 + 0x1d]\n  6796: a4 = u8 [a0 + 0x1c]\n  6799: a5 = u8 [a0 + 0x1e]\n  6802: a0 = u8 [a0 + 0x1f]\n  6805: a2 = a2 << 0x8\n  6808: a2 = a2 | a4\n  6811: a5 = a5 << 0x10\n  6814: a0 = a0 << 0x18\n  6817: a0 = a0 | a5\n  6820: a0 = a0 | a2\n  6823: a0 = a0 << 0x20\n  6826: a0 = a0 | a1\n  6829: a0 = reverse a0\n  6831: a1 = reverse a3\n  6833: a2 = reverse t1\n  6835: a3 = reverse t0\n  6837: u64 [s0 + 0x18] = a3\n  6840: u64 [s0 + 0x10] = a2\n  6843: u64 [s0 + 0x8] = a1\n  6846: u64 [s0] = a0\n  6848: ra = u64 [sp + 0x8]\n  6851: s0 = u64 [sp]\n  6853: sp = sp + 0x10\n  6856: ret\n      : @126 (gas: 1)\n  6858: trap\n      : @127 (gas: 21)\n  6859: sp = sp + 0xffffffffffffff00\n  6863: u64 [sp + 0xf8] = ra\n  6867: u64 [sp + 0xf0] = s0\n  6871: u64 [sp + 0xe8] = s1\n  6875: s0 = sp + 0x100\n  6879: sp = sp & 0xffffffffffffffe0\n  6882: a4 = u64 [a1 + 0x10]\n  6885: a5 = u64 [a1 + 0x18]\n  6888: a2 = u64 [a1 + 0x8]\n  6891: a3 = u64 [a1]\n  6893: u64 [sp + 0x58] = a2\n  6896: u64 [sp + 0x48] = a5\n  6899: a1 = a2 | a5\n  6902: a2 = a3 | a4\n  6905: a2 = a2 | a1\n  6908: a2 = a2 >> 0x20\n  6911: u64 [sp + 0x50] = a4\n  6914: a1 = a1 | a4\n  6917: a1 = a1 << 0x20\n  6920: a1 = a1 | a2\n  6923: jump @133 if a1 != 0\n      : @128 (gas: 13)\n  6927: a1 = u64 [a0 + 0x18]\n  6930: u64 [sp + 0x60] = a1\n  6933: a1 = u64 [a0 + 0x10]\n  6936: u64 [sp + 0x78] = a1\n  6939: a1 = u64 [a0 + 0x8]\n  6942: u64 [sp + 0x70] = a1\n  6945: a0 = u64 [a0]\n  6947: u64 [sp + 0x68] = a0\n  6950: i32 a0 = a3 + 0\n  6952: a1 = 0x20\n  6955: u64 [sp + 0x18] = a0\n  6958: u64 [sp + 0x40] = a3\n  6961: ra = 118, jump @0\n      : @129 [@dyn 59] (gas: 137)\n  6966: a1 = u8 [a0 + 0x1]\n  6969: a2 = u8 [a0]\n  6971: a3 = u8 [a0 + 0x2]\n  6974: a4 = u8 [a0 + 0x3]\n  6977: a1 = a1 << 0x8\n  6980: a1 = a1 | a2\n  6983: a3 = a3 << 0x10\n  6986: a4 = a4 << 0x18\n  6989: a3 = a3 | a4\n  6992: a1 = a1 | a3\n  6995: a2 = u8 [a0 + 0x5]\n  6998: a3 = u8 [a0 + 0x4]\n  7001: a4 = u8 [a0 + 0x6]\n  7004: a5 = u8 [a0 + 0x7]\n  7007: a2 = a2 << 0x8\n  7010: a2 = a2 | a3\n  7013: a4 = a4 << 0x10\n  7016: a5 = a5 << 0x18\n  7019: a4 = a4 | a5\n  7022: a2 = a2 | a4\n  7025: a2 = a2 << 0x20\n  7028: t0 = a2 | a1\n  7031: a2 = u8 [a0 + 0x9]\n  7034: a3 = u8 [a0 + 0x8]\n  7037: a4 = u8 [a0 + 0xa]\n  7040: a5 = u8 [a0 + 0xb]\n  7043: a2 = a2 << 0x8\n  7046: a2 = a2 | a3\n  7049: a4 = a4 << 0x10\n  7052: a5 = a5 << 0x18\n  7055: a4 = a4 | a5\n  7058: a2 = a2 | a4\n  7061: a3 = u8 [a0 + 0xd]\n  7064: a4 = u8 [a0 + 0xc]\n  7067: a5 = u8 [a0 + 0xe]\n  7070: s1 = u8 [a0 + 0xf]\n  7073: a3 = a3 << 0x8\n  7076: a3 = a3 | a4\n  7079: a5 = a5 << 0x10\n  7082: s1 = s1 << 0x18\n  7085: a5 = a5 | s1\n  7088: a3 = a3 | a5\n  7091: a3 = a3 << 0x20\n  7094: a2 = a2 | a3\n  7097: a3 = u8 [a0 + 0x11]\n  7100: a4 = u8 [a0 + 0x10]\n  7103: a5 = u8 [a0 + 0x12]\n  7106: s1 = u8 [a0 + 0x13]\n  7109: a3 = a3 << 0x8\n  7112: a3 = a3 | a4\n  7115: a5 = a5 << 0x10\n  7118: s1 = s1 << 0x18\n  7121: a5 = a5 | s1\n  7124: a3 = a3 | a5\n  7127: a4 = u8 [a0 + 0x15]\n  7130: a5 = u8 [a0 + 0x14]\n  7133: s1 = u8 [a0 + 0x16]\n  7136: a1 = u8 [a0 + 0x17]\n  7139: a4 = a4 << 0x8\n  7142: a4 = a4 | a5\n  7145: s1 = s1 << 0x10\n  7148: a1 = a1 << 0x18\n  7151: a1 = a1 | s1\n  7154: a1 = a1 | a4\n  7157: a1 = a1 << 0x20\n  7160: a3 = a3 | a1\n  7163: a1 = u8 [a0 + 0x19]\n  7166: a4 = u8 [a0 + 0x18]\n  7169: a5 = u8 [a0 + 0x1a]\n  7172: s1 = u8 [a0 + 0x1b]\n  7175: a1 = a1 << 0x8\n  7178: a1 = a1 | a4\n  7181: a5 = a5 << 0x10\n  7184: s1 = s1 << 0x18\n  7187: a5 = a5 | s1\n  7190: a1 = a1 | a5\n  7193: a4 = u8 [a0 + 0x1d]\n  7196: a5 = u8 [a0 + 0x1c]\n  7199: s1 = u8 [a0 + 0x1e]\n  7202: a0 = u8 [a0 + 0x1f]\n  7205: a4 = a4 << 0x8\n  7208: a4 = a4 | a5\n  7211: s1 = s1 << 0x10\n  7214: a0 = a0 << 0x18\n  7217: a0 = a0 | s1\n  7220: a0 = a0 | a4\n  7223: a0 = a0 << 0x20\n  7226: a0 = a0 | a1\n  7229: a0 = reverse a0\n  7231: u64 [sp + 0x38] = a0\n  7234: a0 = reverse a3\n  7236: u64 [sp + 0x30] = a0\n  7239: a0 = reverse a2\n  7241: u64 [sp + 0x28] = a0\n  7244: a0 = reverse t0\n  7246: u64 [sp + 0x20] = a0\n  7249: s1 = u64 [sp + 0x60]\n  7252: u64 [sp + 0xb8] = s1\n  7256: a0 = u64 [sp + 0x78]\n  7259: u64 [sp + 0xb0] = a0\n  7263: a0 = u64 [sp + 0x70]\n  7266: u64 [sp + 0xa8] = a0\n  7270: a0 = u64 [sp + 0x68]\n  7273: u64 [sp + 0xa0] = a0\n  7277: u64 [sp + 216] = 0\n  7281: u64 [sp + 208] = 0\n  7285: u64 [sp + 200] = 0\n  7289: u64 [sp + 192] = 0\n  7293: u32 [sp + 128] = 0x20\n  7298: i32 a1 = sp + 0xa0\n  7302: i32 a3 = sp + 0xc0\n  7306: i32 a4 = sp + 0x80\n  7310: a2 = 0xffffffffffffffff\n  7313: a0 = 0\n  7315: ecalli 4 // 'get_storage'\n  7317: u64 [sp + 0xb8] = s1\n  7321: a0 = u64 [sp + 0x78]\n  7324: u64 [sp + 0xb0] = a0\n  7328: a0 = u64 [sp + 0x70]\n  7331: u64 [sp + 0xa8] = a0\n  7335: a0 = u64 [sp + 0x68]\n  7338: u64 [sp + 0xa0] = a0\n  7342: a0 = u64 [sp + 0x20]\n  7345: u64 [sp + 0xd8] = a0\n  7349: a0 = u64 [sp + 0x28]\n  7352: u64 [sp + 0xd0] = a0\n  7356: a0 = u64 [sp + 0x30]\n  7359: u64 [sp + 0xc8] = a0\n  7363: a0 = u64 [sp + 0x38]\n  7366: u64 [sp + 0xc0] = a0\n  7370: i32 a1 = sp + 0xa0\n  7374: i32 a3 = sp + 0xc0\n  7378: a2 = 0xffffffffffffffff\n  7381: a4 = 0x20\n  7384: a0 = 0\n  7386: ecalli 8 // 'set_storage'\n  7388: fallthrough\n      : @130 (gas: 10)\n  7389: a0 = u64 [sp + 0x50]\n  7392: a1 = u64 [sp + 0x48]\n  7395: a0 = a0 | a1\n  7398: a1 = 0xffffffe0\n  7408: a2 = u64 [sp + 0x40]\n  7411: a1 = a2 <u a1\n  7414: a2 = u64 [sp + 0x58]\n  7417: a1 = 0 if a2 != 0\n  7419: a1 = 0 if a0 != 0\n  7421: jump @133 if a1 == 0\n      : @131 (gas: 20)\n  7425: a0 = u64 [sp + 0x68]\n  7428: a2 = a0 + 0x1\n  7431: u64 [sp + 0x58] = a2\n  7434: a0 = a2 <u 0x1\n  7437: a1 = u64 [sp + 0x70]\n  7440: a0 = a0 + a1\n  7443: u64 [sp + 0x70] = a0\n  7446: a0 = a0 | a2\n  7449: a0 = a0 <u 0x1\n  7452: a1 = u64 [sp + 0x78]\n  7455: a0 = a0 + a1\n  7458: u64 [sp + 0x68] = a0\n  7461: a0 = a0 <u a1\n  7464: a1 = u64 [sp + 0x60]\n  7467: a0 = a0 + a1\n  7470: u64 [sp + 0x78] = a0\n  7473: a0 = u64 [sp + 0x18]\n  7476: i32 a0 = a0 + 0x20\n  7479: a1 = 0x20\n  7482: ra = 120, jump @0\n      : @132 [@dyn 60] (gas: 142)\n  7487: a1 = u8 [a0 + 0x1]\n  7490: a2 = u8 [a0]\n  7492: a3 = u8 [a0 + 0x2]\n  7495: a4 = u8 [a0 + 0x3]\n  7498: a1 = a1 << 0x8\n  7501: a1 = a1 | a2\n  7504: a3 = a3 << 0x10\n  7507: a4 = a4 << 0x18\n  7510: a3 = a3 | a4\n  7513: a1 = a1 | a3\n  7516: a2 = u8 [a0 + 0x5]\n  7519: a3 = u8 [a0 + 0x4]\n  7522: a4 = u8 [a0 + 0x6]\n  7525: a5 = u8 [a0 + 0x7]\n  7528: a2 = a2 << 0x8\n  7531: a2 = a2 | a3\n  7534: a4 = a4 << 0x10\n  7537: a5 = a5 << 0x18\n  7540: a4 = a4 | a5\n  7543: a2 = a2 | a4\n  7546: a2 = a2 << 0x20\n  7549: t0 = a2 | a1\n  7552: a2 = u8 [a0 + 0x9]\n  7555: a3 = u8 [a0 + 0x8]\n  7558: a4 = u8 [a0 + 0xa]\n  7561: a5 = u8 [a0 + 0xb]\n  7564: a2 = a2 << 0x8\n  7567: a2 = a2 | a3\n  7570: a4 = a4 << 0x10\n  7573: a5 = a5 << 0x18\n  7576: a4 = a4 | a5\n  7579: a2 = a2 | a4\n  7582: a3 = u8 [a0 + 0xd]\n  7585: a4 = u8 [a0 + 0xc]\n  7588: a5 = u8 [a0 + 0xe]\n  7591: s1 = u8 [a0 + 0xf]\n  7594: a3 = a3 << 0x8\n  7597: a3 = a3 | a4\n  7600: a5 = a5 << 0x10\n  7603: s1 = s1 << 0x18\n  7606: a5 = a5 | s1\n  7609: a3 = a3 | a5\n  7612: a3 = a3 << 0x20\n  7615: a2 = a2 | a3\n  7618: a3 = u8 [a0 + 0x11]\n  7621: a4 = u8 [a0 + 0x10]\n  7624: a5 = u8 [a0 + 0x12]\n  7627: s1 = u8 [a0 + 0x13]\n  7630: a3 = a3 << 0x8\n  7633: a3 = a3 | a4\n  7636: a5 = a5 << 0x10\n  7639: s1 = s1 << 0x18\n  7642: a5 = a5 | s1\n  7645: a3 = a3 | a5\n  7648: a4 = u8 [a0 + 0x15]\n  7651: a5 = u8 [a0 + 0x14]\n  7654: s1 = u8 [a0 + 0x16]\n  7657: a1 = u8 [a0 + 0x17]\n  7660: a4 = a4 << 0x8\n  7663: a4 = a4 | a5\n  7666: s1 = s1 << 0x10\n  7669: a1 = a1 << 0x18\n  7672: a1 = a1 | s1\n  7675: a1 = a1 | a4\n  7678: a1 = a1 << 0x20\n  7681: a3 = a3 | a1\n  7684: a1 = u8 [a0 + 0x19]\n  7687: a4 = u8 [a0 + 0x18]\n  7690: a5 = u8 [a0 + 0x1a]\n  7693: s1 = u8 [a0 + 0x1b]\n  7696: a1 = a1 << 0x8\n  7699: a1 = a1 | a4\n  7702: a5 = a5 << 0x10\n  7705: s1 = s1 << 0x18\n  7708: a5 = a5 | s1\n  7711: a1 = a1 | a5\n  7714: a4 = u8 [a0 + 0x1d]\n  7717: a5 = u8 [a0 + 0x1c]\n  7720: s1 = u8 [a0 + 0x1e]\n  7723: a0 = u8 [a0 + 0x1f]\n  7726: a4 = a4 << 0x8\n  7729: a4 = a4 | a5\n  7732: s1 = s1 << 0x10\n  7735: a0 = a0 << 0x18\n  7738: a0 = a0 | s1\n  7741: a0 = a0 | a4\n  7744: a0 = a0 << 0x20\n  7747: a0 = a0 | a1\n  7750: u32 [sp + 128] = 0x20\n  7755: a0 = reverse a0\n  7757: u64 [sp + 0x60] = a0\n  7760: a0 = reverse a3\n  7762: u64 [sp + 0x50] = a0\n  7765: a0 = reverse a2\n  7767: u64 [sp + 0x48] = a0\n  7770: a0 = reverse t0\n  7772: u64 [sp + 0x40] = a0\n  7775: a0 = u64 [sp + 0x68]\n  7778: u64 [sp + 0xb0] = a0\n  7782: a0 = u64 [sp + 0x70]\n  7785: u64 [sp + 0xa8] = a0\n  7789: a0 = u64 [sp + 0x58]\n  7792: u64 [sp + 0xa0] = a0\n  7796: s1 = u64 [sp + 0x78]\n  7799: u64 [sp + 0xb8] = s1\n  7803: u64 [sp + 216] = 0\n  7807: u64 [sp + 208] = 0\n  7811: u64 [sp + 200] = 0\n  7815: u64 [sp + 192] = 0\n  7819: i32 a1 = sp + 0xa0\n  7823: i32 a3 = sp + 0xc0\n  7827: i32 a4 = sp + 0x80\n  7831: a2 = 0xffffffffffffffff\n  7834: a0 = 0\n  7836: ecalli 4 // 'get_storage'\n  7838: u64 [sp + 0xb8] = s1\n  7842: a0 = u64 [sp + 0x68]\n  7845: u64 [sp + 0xb0] = a0\n  7849: a0 = u64 [sp + 0x70]\n  7852: u64 [sp + 0xa8] = a0\n  7856: a0 = u64 [sp + 0x58]\n  7859: u64 [sp + 0xa0] = a0\n  7863: a0 = u64 [sp + 0x40]\n  7866: u64 [sp + 0xd8] = a0\n  7870: a0 = u64 [sp + 0x48]\n  7873: u64 [sp + 0xd0] = a0\n  7877: a0 = u64 [sp + 0x50]\n  7880: u64 [sp + 0xc8] = a0\n  7884: a0 = u64 [sp + 0x60]\n  7887: u64 [sp + 0xc0] = a0\n  7891: i32 a1 = sp + 0xa0\n  7895: i32 a3 = sp + 0xc0\n  7899: a2 = 0xffffffffffffffff\n  7902: a4 = 0x20\n  7905: a0 = 0\n  7907: ecalli 8 // 'set_storage'\n  7909: sp = s0 + 0xffffffffffffff00\n  7913: ra = u64 [sp + 0xf8]\n  7917: s0 = u64 [sp + 0xf0]\n  7921: s1 = u64 [sp + 0xe8]\n  7925: sp = sp + 0x100\n  7929: ret\n      : @133 (gas: 1)\n  7931: trap\n      : @134 (gas: 7)\n  7932: a3 = u64 [sp + 0x1f8]\n  7936: s1 = u64 [sp + 0x1f0]\n  7940: a2 = u64 [sp + 0x1e8]\n  7944: a0 = s1 | a3\n  7947: a1 = a2 <u 0x1\n  7950: a1 = 0 if a0 != 0\n  7952: jump @139 if a1 == 0\n      : @135 (gas: 49)\n  7956: a0 = u64 [sp + 0x1e0]\n  7960: u64 [sp + 0x18] = a0\n  7963: a0 = a0 + 0x1\n  7966: a1 = a0 <u 0x1\n  7969: a1 = a1 + a2\n  7972: u64 [sp + 0x1e0] = a0\n  7976: a0 = a0 | a1\n  7979: u64 [sp + 0x1e8] = a1\n  7983: a0 = a0 <u 0x1\n  7986: a0 = a0 + s1\n  7989: u64 [sp + 0x1f0] = a0\n  7993: a0 = a0 <u s1\n  7996: a0 = a0 + a3\n  7999: u64 [sp + 0x1f8] = a0\n  8003: a0 = u64 [sp + 0x50]\n  8006: u64 [sp + 0x1c8] = a0\n  8010: a0 = u64 [sp + 0x58]\n  8013: u64 [sp + 0x1c0] = a0\n  8017: a0 = u64 [sp + 0x48]\n  8020: u64 [sp + 0x1d0] = a0\n  8024: a0 = u64 [sp + 0x40]\n  8027: u64 [sp + 0x1d8] = a0\n  8031: i32 a1 = sp + 0x1c0\n  8035: u64 [sp + 0x10] = a3\n  8038: i32 a3 = sp + 0x1e0\n  8042: u64 [sp + 0x8] = a2\n  8045: a2 = 0xffffffffffffffff\n  8048: a4 = 0x20\n  8051: a0 = 0\n  8053: ecalli 8 // 'set_storage'\n  8055: a0 = u64 [sp + 0x10]\n  8058: u64 [sp + 0x138] = a0\n  8062: u64 [sp + 0x130] = s1\n  8066: a0 = u64 [sp + 0x8]\n  8069: u64 [sp + 0x128] = a0\n  8073: a0 = u64 [sp + 0x18]\n  8076: u64 [sp + 0x120] = a0\n  8080: a0 = u64 [sp + 0x40]\n  8083: u64 [sp + 0x158] = a0\n  8087: a0 = u64 [sp + 0x48]\n  8090: u64 [sp + 0x150] = a0\n  8094: a0 = u64 [sp + 0x50]\n  8097: u64 [sp + 0x148] = a0\n  8101: a0 = sp + 0x160\n  8105: a1 = sp + 0x140\n  8109: a2 = sp + 0x120\n  8113: a3 = u64 [sp + 0x58]\n  8116: u64 [sp + 0x140] = a3\n  8120: ra = 122, jump @181\n      : @136 [@dyn 61] (gas: 8)\n  8125: a0 = u64 [sp + 0x198]\n  8129: a1 = u64 [sp + 0x190]\n  8133: a2 = u64 [sp + 0x188]\n  8137: a3 = u64 [sp + 0x180]\n  8141: a0 = a0 | a2\n  8144: a1 = a1 | a3\n  8147: a0 = a0 | a1\n  8150: jump @141 if a0 != 0\n      : @137 (gas: 19)\n  8154: a2 = u64 [sp + 0x178]\n  8158: a0 = u64 [sp + 0x170]\n  8162: a1 = u64 [sp + 0x168]\n  8166: a3 = u64 [sp + 0x160]\n  8170: a4 = u64 [sp + 0x20]\n  8173: u64 [sp + 0xa0] = a4\n  8177: u64 [sp + 0xc0] = a3\n  8181: a3 = u64 [sp + 0x28]\n  8184: u64 [sp + 0xa8] = a3\n  8188: u64 [sp + 0xc8] = a1\n  8192: a1 = u64 [sp + 0x30]\n  8195: u64 [sp + 0xb0] = a1\n  8199: u64 [sp + 0xd0] = a0\n  8203: a0 = u64 [sp + 0x38]\n  8206: u64 [sp + 0xb8] = a0\n  8210: a0 = sp + 0xc0\n  8214: a1 = sp + 0xa0\n  8218: u64 [sp + 0xd8] = a2\n  8222: ra = 124, jump @127\n      : @138 [@dyn 62] (gas: 6)\n  8227: sp = s0 + 0xfffffffffffffde0\n  8231: ra = u64 [sp + 0x218]\n  8235: s0 = u64 [sp + 0x210]\n  8239: s1 = u64 [sp + 0x208]\n  8243: sp = sp + 0x220\n  8247: ret\n      : @139 (gas: 8)\n  8249: u64 [sp + 144] = 0\n  8253: u64 [sp + 136] = 0\n  8257: u64 [sp + 128] = 0\n  8261: a0 = 0x4e487b7100000000\n  8271: a1 = sp + 0x80\n  8275: u64 [sp + 0x98] = a0\n  8279: a0 = 0\n  8281: ra = 126, jump @8\n      : @140 [@dyn 63] (gas: 8)\n  8286: u64 [sp + 120] = 0\n  8289: u64 [sp + 112] = 0\n  8292: u64 [sp + 96] = 0x41\n  8296: a0 = 0x4\n  8299: a1 = sp + 0x60\n  8302: u64 [sp + 104] = 0\n  8305: ra = 0x82\n  8309: jump @8\n      : @141 (gas: 8)\n  8312: u64 [sp + 272] = 0\n  8316: u64 [sp + 264] = 0\n  8320: u64 [sp + 256] = 0\n  8324: a0 = 0x4e487b7100000000\n  8334: a1 = sp + 0x100\n  8338: u64 [sp + 0x118] = a0\n  8342: a0 = 0\n  8344: ra = 128, jump @8\n      : @142 [@dyn 64] (gas: 7)\n  8350: u64 [sp + 248] = 0\n  8354: u64 [sp + 240] = 0\n  8358: u64 [sp + 232] = 0\n  8362: a0 = 0x4\n  8365: a1 = sp + 0xe0\n  8369: u64 [sp + 224] = 0\n  8373: ra = 130, jump @8\n      : @143 [@dyn 65] (gas: 3)\n  8379: a1 = 0x24\n  8382: a0 = 0\n  8384: ra = 132, jump @0\n      : @144 [@dyn 66] (gas: 6)\n  8390: i32 a1 = a0 + 0\n  8392: a0 = 0x1\n  8395: a2 = 0x24\n  8398: ra = 0x86\n  8402: ecalli 6 // 'seal_return'\n  8404: fallthrough\n      : @145 [@dyn 67] (gas: 89)\n  8405: sp = sp + 0xfffffffffffffd20\n  8409: u64 [sp + 0x2d8] = ra\n  8413: u64 [sp + 0x2d0] = s0\n  8417: u64 [sp + 0x2c8] = s1\n  8421: s0 = sp + 0x2e0\n  8425: sp = sp & 0xffffffffffffffe0\n  8428: a1 = u64 [a0 + 0x10]\n  8431: u64 [sp + 0x158] = a1\n  8435: a1 = u64 [a0]\n  8437: u64 [sp + 0x150] = a1\n  8441: a1 = u64 [a0 + 0x18]\n  8444: u64 [sp + 0x148] = a1\n  8448: a0 = u64 [a0 + 0x8]\n  8451: u64 [sp + 0x140] = a0\n  8455: i32 a0 = sp + 0x240\n  8459: ecalli 3 // 'caller'\n  8461: a0 = u64 [sp + 0x248]\n  8465: a1 = i32 [sp + 0x250]\n  8469: a2 = u64 [sp + 0x240]\n  8473: a0 = reverse a0\n  8475: a3 = a0 << 0x20\n  8478: a1 = reverse a1\n  8480: a1 = a1 >> 0x20\n  8483: a1 = a1 | a3\n  8486: u64 [sp + 0x178] = a1\n  8490: a0 = a0 >> 0x20\n  8493: s1 = reverse a2\n  8495: a1 = s1 << 0x20\n  8498: a0 = a0 | a1\n  8501: u64 [sp + 0x170] = a0\n  8505: s1 = s1 >> 0x20\n  8508: u64 [sp + 664] = 0\n  8512: u64 [sp + 656] = 0\n  8516: u64 [sp + 648] = 0\n  8520: u64 [sp + 640] = 0\n  8524: u64 [sp + 696] = 0\n  8528: u64 [sp + 688] = 0\n  8532: u64 [sp + 680] = 0\n  8536: u64 [sp + 672] = 0\n  8540: u32 [sp + 608] = 0x20\n  8545: i32 a1 = sp + 0x280\n  8549: i32 a3 = sp + 0x2a0\n  8553: i32 a4 = sp + 0x260\n  8557: a2 = 0xffffffffffffffff\n  8560: a0 = 0\n  8562: ecalli 4 // 'get_storage'\n  8564: a0 = u32 [sp + 0x2b4]\n  8568: a0 = a0 << 0x20\n  8571: a1 = u64 [sp + 0x2b8]\n  8575: a0 = a0 | s1\n  8578: u64 [sp + 664] = 0\n  8582: u64 [sp + 656] = 0\n  8586: u64 [sp + 648] = 0\n  8590: u64 [sp + 640] = 0\n  8594: u64 [sp + 0x2b8] = a1\n  8598: u64 [sp + 0x2b0] = a0\n  8602: a0 = u64 [sp + 0x170]\n  8606: u64 [sp + 0x2a8] = a0\n  8610: a0 = u64 [sp + 0x178]\n  8614: u64 [sp + 0x2a0] = a0\n  8618: i32 a1 = sp + 0x280\n  8622: i32 a3 = sp + 0x2a0\n  8626: a2 = 0xffffffffffffffff\n  8629: a4 = 0x20\n  8632: a0 = 0\n  8634: ecalli 8 // 'set_storage'\n  8636: u64 [sp + 664] = 0\n  8640: u64 [sp + 656] = 0\n  8644: u64 [sp + 648] = 0\n  8648: u64 [sp + 640] = 0\n  8652: u64 [sp + 696] = 0\n  8656: u64 [sp + 688] = 0\n  8660: u64 [sp + 680] = 0\n  8664: u64 [sp + 672] = 0\n  8668: u32 [sp + 608] = 0x20\n  8673: i32 a1 = sp + 0x280\n  8677: i32 a3 = sp + 0x2a0\n  8681: i32 a4 = sp + 0x260\n  8685: a2 = 0xffffffffffffffff\n  8688: a0 = 0\n  8690: ecalli 4 // 'get_storage'\n  8692: a0 = u64 [sp + 0x2a0]\n  8696: u64 [sp + 0x178] = a0\n  8700: a0 = u64 [sp + 0x2a8]\n  8704: u64 [sp + 0x170] = a0\n  8708: s1 = u32 [sp + 0x2b0]\n  8712: a1 = 0x20\n  8715: a0 = 0\n  8717: ra = 136, jump @0\n      : @146 [@dyn 68] (gas: 58)\n  8723: a1 = reverse s1\n  8725: a2 = u64 [sp + 0x170]\n  8729: a2 = reverse a2\n  8731: a3 = u64 [sp + 0x178]\n  8735: a3 = reverse a3\n  8737: a4 = a3 >> 0x38\n  8740: u8 [a0 + 0x1f] = a4\n  8743: a4 = a3 >> 0x30\n  8746: u8 [a0 + 0x1e] = a4\n  8749: a4 = a3 >> 0x28\n  8752: u8 [a0 + 0x1d] = a4\n  8755: a4 = a3 >> 0x20\n  8758: u8 [a0 + 0x1c] = a4\n  8761: a4 = a3 >> 0x18\n  8764: u8 [a0 + 0x1b] = a4\n  8767: a4 = a3 >> 0x10\n  8770: u8 [a0 + 0x1a] = a4\n  8773: a4 = a3 >> 0x8\n  8776: u8 [a0 + 0x19] = a4\n  8779: u8 [a0 + 0x18] = a3\n  8782: a3 = a2 >> 0x38\n  8785: u8 [a0 + 0x17] = a3\n  8788: a3 = a2 >> 0x30\n  8791: u8 [a0 + 0x16] = a3\n  8794: a3 = a2 >> 0x28\n  8797: u8 [a0 + 0x15] = a3\n  8800: a3 = a2 >> 0x20\n  8803: u8 [a0 + 0x14] = a3\n  8806: a3 = a2 >> 0x18\n  8809: u8 [a0 + 0x13] = a3\n  8812: a3 = a2 >> 0x10\n  8815: u8 [a0 + 0x12] = a3\n  8818: a3 = a2 >> 0x8\n  8821: u8 [a0 + 0x11] = a3\n  8824: u8 [a0 + 0x10] = a2\n  8827: a2 = a1 >> 0x38\n  8830: u8 [a0 + 0xf] = a2\n  8833: a2 = a1 >> 0x30\n  8836: u8 [a0 + 0xe] = a2\n  8839: a2 = a1 >> 0x28\n  8842: u8 [a0 + 0xd] = a2\n  8845: a2 = a1 >> 0x20\n  8848: u8 [a0 + 0xc] = a2\n  8851: u8 [a0 + 11] = 0\n  8854: u8 [a0 + 10] = 0\n  8857: u8 [a0 + 9] = 0\n  8860: u8 [a0 + 0x8] = a1\n  8863: u8 [a0 + 7] = 0\n  8866: u8 [a0 + 6] = 0\n  8869: u8 [a0 + 5] = 0\n  8872: u8 [a0 + 4] = 0\n  8875: u8 [a0 + 3] = 0\n  8878: u8 [a0 + 2] = 0\n  8881: u8 [a0 + 1] = 0\n  8884: u8 [a0 + 0] = 0\n  8886: a0 = 0x20\n  8889: a1 = 0x20\n  8892: ra = 138, jump @0\n      : @147 [@dyn 69] (gas: 35)\n  8898: u8 [a0 + 31] = 0x1\n  8902: u8 [a0 + 30] = 0\n  8905: u8 [a0 + 29] = 0\n  8908: u8 [a0 + 28] = 0\n  8911: u8 [a0 + 27] = 0\n  8914: u8 [a0 + 26] = 0\n  8917: u8 [a0 + 25] = 0\n  8920: u8 [a0 + 24] = 0\n  8923: u8 [a0 + 23] = 0\n  8926: u8 [a0 + 22] = 0\n  8929: u8 [a0 + 21] = 0\n  8932: u8 [a0 + 20] = 0\n  8935: u8 [a0 + 19] = 0\n  8938: u8 [a0 + 18] = 0\n  8941: u8 [a0 + 17] = 0\n  8944: u8 [a0 + 16] = 0\n  8947: u8 [a0 + 15] = 0\n  8950: u8 [a0 + 14] = 0\n  8953: u8 [a0 + 13] = 0\n  8956: u8 [a0 + 12] = 0\n  8959: u8 [a0 + 11] = 0\n  8962: u8 [a0 + 10] = 0\n  8965: u8 [a0 + 9] = 0\n  8968: u8 [a0 + 8] = 0\n  8971: u8 [a0 + 7] = 0\n  8974: u8 [a0 + 6] = 0\n  8977: u8 [a0 + 5] = 0\n  8980: u8 [a0 + 4] = 0\n  8983: u8 [a0 + 3] = 0\n  8986: u8 [a0 + 2] = 0\n  8989: u8 [a0 + 1] = 0\n  8992: u8 [a0 + 0] = 0\n  8994: a1 = 0x40\n  8997: a0 = 0\n  8999: ra = 140, jump @0\n      : @148 [@dyn 70] (gas: 49)\n  9005: i32 a0 = a0 + 0\n  9007: i32 a2 = sp + 0x2a0\n  9011: a1 = 0x40\n  9014: ecalli 5 // 'hash_keccak_256'\n  9016: a0 = u64 [sp + 0x2b8]\n  9020: a1 = u64 [sp + 0x2b0]\n  9024: a2 = u64 [sp + 0x2a8]\n  9028: a3 = u64 [sp + 0x2a0]\n  9032: a0 = reverse a0\n  9034: u64 [sp + 0x178] = a0\n  9038: a1 = reverse a1\n  9040: u64 [sp + 0x170] = a1\n  9044: a2 = reverse a2\n  9046: u64 [sp + 0x168] = a2\n  9050: s1 = reverse a3\n  9052: u64 [sp + 0x298] = s1\n  9056: u64 [sp + 0x290] = a2\n  9060: u64 [sp + 0x288] = a1\n  9064: u64 [sp + 0x280] = a0\n  9068: u64 [sp + 696] = 0\n  9072: u64 [sp + 688] = 0\n  9076: u64 [sp + 680] = 0\n  9080: u64 [sp + 672] = 0\n  9084: u32 [sp + 608] = 0x20\n  9089: i32 a1 = sp + 0x280\n  9093: i32 a3 = sp + 0x2a0\n  9097: i32 a4 = sp + 0x260\n  9101: a2 = 0xffffffffffffffff\n  9104: a0 = 0\n  9106: ecalli 4 // 'get_storage'\n  9108: u64 [sp + 0x298] = s1\n  9112: s1 = 0x1\n  9115: a0 = u64 [sp + 0x168]\n  9119: u64 [sp + 0x290] = a0\n  9123: a0 = u64 [sp + 0x170]\n  9127: u64 [sp + 0x288] = a0\n  9131: a0 = u64 [sp + 0x178]\n  9135: u64 [sp + 0x280] = a0\n  9139: u64 [sp + 696] = 0\n  9143: u64 [sp + 688] = 0\n  9147: u64 [sp + 680] = 0\n  9151: u64 [sp + 0x2a0] = s1\n  9155: i32 a1 = sp + 0x280\n  9159: i32 a3 = sp + 0x2a0\n  9163: a2 = 0xffffffffffffffff\n  9166: a4 = 0x20\n  9169: a0 = 0\n  9171: ecalli 8 // 'set_storage'\n  9173: fallthrough\n      : @149 (gas: 12)\n  9174: a5 = u64 [sp + 0x140]\n  9178: a4 = u64 [sp + 0x150]\n  9182: a3 = u64 [sp + 0x148]\n  9186: a2 = u64 [sp + 0x158]\n  9190: a0 = a5 | a3\n  9193: a1 = a4 | a2\n  9196: a1 = a1 | a0\n  9199: a1 = a1 >> 0x20\n  9202: a0 = a0 | a2\n  9205: a0 = a0 << 0x20\n  9208: a0 = a0 | a1\n  9211: jump @164 if a0 != 0\n      : @150 (gas: 22)\n  9215: u64 [sp + 376] = 0\n  9219: u64 [sp + 368] = 0\n  9223: u64 [sp + 352] = 0\n  9227: u64 [sp + 360] = 0\n  9231: a0 = a4 + 0x20\n  9234: u64 [sp + 0x38] = a0\n  9237: a0 = a0 <u a4\n  9240: a1 = a5 + a0\n  9243: u64 [sp + 0x30] = a1\n  9246: a1 = a1 <u a5\n  9249: a1 = a0 if a0 == 0\n  9252: i32 a0 = a4 + 0\n  9254: a1 = a1 + a2\n  9257: u64 [sp + 0x28] = a1\n  9260: a1 = a1 <u a2\n  9263: a1 = a1 + a3\n  9266: u64 [sp + 0x20] = a1\n  9269: a1 = 0xffffffe0\n  9279: u64 [sp + 0x18] = a1\n  9282: u64 [sp + 0x140] = a0\n  9286: a1 = 0x20\n  9289: ra = 142, jump @0\n      : @151 [@dyn 71] (gas: 108)\n  9295: a1 = u8 [a0 + 0x1]\n  9298: a2 = u8 [a0]\n  9300: a3 = u8 [a0 + 0x2]\n  9303: a4 = u8 [a0 + 0x3]\n  9306: a1 = a1 << 0x8\n  9309: a1 = a1 | a2\n  9312: a3 = a3 << 0x10\n  9315: a4 = a4 << 0x18\n  9318: a3 = a3 | a4\n  9321: a1 = a1 | a3\n  9324: a2 = u8 [a0 + 0x5]\n  9327: a3 = u8 [a0 + 0x4]\n  9330: a4 = u8 [a0 + 0x6]\n  9333: a5 = u8 [a0 + 0x7]\n  9336: a2 = a2 << 0x8\n  9339: a2 = a2 | a3\n  9342: a4 = a4 << 0x10\n  9345: a5 = a5 << 0x18\n  9348: a4 = a4 | a5\n  9351: a2 = a2 | a4\n  9354: a2 = a2 << 0x20\n  9357: t0 = a2 | a1\n  9360: a2 = u8 [a0 + 0x9]\n  9363: a3 = u8 [a0 + 0x8]\n  9366: a4 = u8 [a0 + 0xa]\n  9369: a5 = u8 [a0 + 0xb]\n  9372: a2 = a2 << 0x8\n  9375: a2 = a2 | a3\n  9378: a4 = a4 << 0x10\n  9381: a5 = a5 << 0x18\n  9384: a4 = a4 | a5\n  9387: a2 = a2 | a4\n  9390: a3 = u8 [a0 + 0xd]\n  9393: a4 = u8 [a0 + 0xc]\n  9396: a5 = u8 [a0 + 0xe]\n  9399: s1 = u8 [a0 + 0xf]\n  9402: a3 = a3 << 0x8\n  9405: a3 = a3 | a4\n  9408: a5 = a5 << 0x10\n  9411: s1 = s1 << 0x18\n  9414: a5 = a5 | s1\n  9417: a3 = a3 | a5\n  9420: a3 = a3 << 0x20\n  9423: a2 = a2 | a3\n  9426: a3 = u8 [a0 + 0x11]\n  9429: a4 = u8 [a0 + 0x10]\n  9432: a5 = u8 [a0 + 0x12]\n  9435: s1 = u8 [a0 + 0x13]\n  9438: a3 = a3 << 0x8\n  9441: a3 = a3 | a4\n  9444: a5 = a5 << 0x10\n  9447: s1 = s1 << 0x18\n  9450: a5 = a5 | s1\n  9453: a3 = a3 | a5\n  9456: a4 = u8 [a0 + 0x15]\n  9459: a5 = u8 [a0 + 0x14]\n  9462: s1 = u8 [a0 + 0x16]\n  9465: a1 = u8 [a0 + 0x17]\n  9468: a4 = a4 << 0x8\n  9471: a4 = a4 | a5\n  9474: s1 = s1 << 0x10\n  9477: a1 = a1 << 0x18\n  9480: a1 = a1 | s1\n  9483: a1 = a1 | a4\n  9486: a1 = a1 << 0x20\n  9489: a3 = a3 | a1\n  9492: a1 = u8 [a0 + 0x19]\n  9495: a4 = u8 [a0 + 0x18]\n  9498: a5 = u8 [a0 + 0x1a]\n  9501: s1 = u8 [a0 + 0x1b]\n  9504: a1 = a1 << 0x8\n  9507: a1 = a1 | a4\n  9510: a5 = a5 << 0x10\n  9513: s1 = s1 << 0x18\n  9516: a5 = a5 | s1\n  9519: a1 = a1 | a5\n  9522: a4 = u8 [a0 + 0x1d]\n  9525: a5 = u8 [a0 + 0x1c]\n  9528: s1 = u8 [a0 + 0x1e]\n  9531: a0 = u8 [a0 + 0x1f]\n  9534: a4 = a4 << 0x8\n  9537: a4 = a4 | a5\n  9540: s1 = s1 << 0x10\n  9543: a0 = a0 << 0x18\n  9546: a0 = a0 | s1\n  9549: a0 = a0 | a4\n  9552: a0 = a0 << 0x20\n  9555: a0 = a0 | a1\n  9558: a0 = reverse a0\n  9560: a1 = reverse a3\n  9562: t1 = reverse a2\n  9564: a3 = reverse t0\n  9566: a4 = u64 [sp + 0x168]\n  9570: a2 = a4 ^ a3\n  9573: a3 = a4 <u a3\n  9576: a4 = u64 [sp + 0x160]\n  9580: a5 = a4 <u t1\n  9583: a5 = a3 if a2 != 0\n  9586: a3 = u64 [sp + 0x170]\n  9590: t0 = a3 ^ a1\n  9593: a1 = a3 <u a1\n  9596: s1 = u64 [sp + 0x178]\n  9600: a0 = s1 <u a0\n  9603: a0 = a1 if t0 != 0\n  9606: a1 = a4 ^ t1\n  9609: a1 = a1 | a2\n  9612: a0 = a5 if a1 != 0\n  9615: jump @163 if a0 == 0\n      : @152 (gas: 3)\n  9619: a1 = 0x20\n  9622: a0 = u64 [sp + 0x140]\n  9626: ra = 144, jump @0\n      : @153 [@dyn 72] (gas: 108)\n  9632: ra = u64 [sp + 0x160]\n  9636: t2 = u64 [sp + 0x168]\n  9640: a1 = u8 [a0 + 0x1]\n  9643: a2 = u8 [a0]\n  9645: a3 = u8 [a0 + 0x2]\n  9648: a4 = u8 [a0 + 0x3]\n  9651: a1 = a1 << 0x8\n  9654: a1 = a1 | a2\n  9657: a3 = a3 << 0x10\n  9660: a4 = a4 << 0x18\n  9663: a3 = a3 | a4\n  9666: a1 = a1 | a3\n  9669: a2 = u8 [a0 + 0x5]\n  9672: a3 = u8 [a0 + 0x4]\n  9675: a4 = u8 [a0 + 0x6]\n  9678: a5 = u8 [a0 + 0x7]\n  9681: a2 = a2 << 0x8\n  9684: a2 = a2 | a3\n  9687: a4 = a4 << 0x10\n  9690: a5 = a5 << 0x18\n  9693: a4 = a4 | a5\n  9696: a2 = a2 | a4\n  9699: a2 = a2 << 0x20\n  9702: t0 = a2 | a1\n  9705: a2 = u8 [a0 + 0x9]\n  9708: a3 = u8 [a0 + 0x8]\n  9711: a4 = u8 [a0 + 0xa]\n  9714: a5 = u8 [a0 + 0xb]\n  9717: a2 = a2 << 0x8\n  9720: a2 = a2 | a3\n  9723: a4 = a4 << 0x10\n  9726: a5 = a5 << 0x18\n  9729: a4 = a4 | a5\n  9732: a2 = a2 | a4\n  9735: a3 = u8 [a0 + 0xd]\n  9738: a4 = u8 [a0 + 0xc]\n  9741: a5 = u8 [a0 + 0xe]\n  9744: s1 = u8 [a0 + 0xf]\n  9747: a3 = a3 << 0x8\n  9750: a3 = a3 | a4\n  9753: a5 = a5 << 0x10\n  9756: s1 = s1 << 0x18\n  9759: a5 = a5 | s1\n  9762: a3 = a3 | a5\n  9765: a3 = a3 << 0x20\n  9768: a2 = a2 | a3\n  9771: a3 = u8 [a0 + 0x11]\n  9774: a4 = u8 [a0 + 0x10]\n  9777: a5 = u8 [a0 + 0x12]\n  9780: s1 = u8 [a0 + 0x13]\n  9783: a3 = a3 << 0x8\n  9786: a3 = a3 | a4\n  9789: a5 = a5 << 0x10\n  9792: s1 = s1 << 0x18\n  9795: a5 = a5 | s1\n  9798: a3 = a3 | a5\n  9801: a4 = u8 [a0 + 0x15]\n  9804: a5 = u8 [a0 + 0x14]\n  9807: s1 = u8 [a0 + 0x16]\n  9810: a1 = u8 [a0 + 0x17]\n  9813: a4 = a4 << 0x8\n  9816: a4 = a4 | a5\n  9819: s1 = s1 << 0x10\n  9822: a1 = a1 << 0x18\n  9825: a1 = a1 | s1\n  9828: a1 = a1 | a4\n  9831: a1 = a1 << 0x20\n  9834: a3 = a3 | a1\n  9837: a1 = u8 [a0 + 0x19]\n  9840: a4 = u8 [a0 + 0x18]\n  9843: a5 = u8 [a0 + 0x1a]\n  9846: s1 = u8 [a0 + 0x1b]\n  9849: a1 = a1 << 0x8\n  9852: a1 = a1 | a4\n  9855: a5 = a5 << 0x10\n  9858: s1 = s1 << 0x18\n  9861: a5 = a5 | s1\n  9864: a1 = a1 | a5\n  9867: a4 = u8 [a0 + 0x1d]\n  9870: a5 = u8 [a0 + 0x1c]\n  9873: s1 = u8 [a0 + 0x1e]\n  9876: a0 = u8 [a0 + 0x1f]\n  9879: a4 = a4 << 0x8\n  9882: a4 = a4 | a5\n  9885: s1 = s1 << 0x10\n  9888: a0 = a0 << 0x18\n  9891: a0 = a0 | s1\n  9894: a0 = a0 | a4\n  9897: a0 = a0 << 0x20\n  9900: a0 = a0 | a1\n  9903: t1 = reverse a0\n  9905: a1 = reverse a3\n  9907: a2 = reverse a2\n  9909: a5 = reverse t0\n  9911: a3 = u64 [sp + 0x170]\n  9915: s1 = u64 [sp + 0x178]\n  9919: a4 = a5 ^ t2\n  9922: a0 = t2 <u a5\n  9925: a5 = ra <u a2\n  9928: a5 = a0 if a4 != 0\n  9931: t0 = a1 ^ a3\n  9934: a1 = a3 <u a1\n  9937: a0 = s1 <u t1\n  9940: a0 = a1 if t0 != 0\n  9943: a1 = a2 ^ ra\n  9946: a1 = a1 | a4\n  9949: a0 = a5 if a1 != 0\n  9952: jump @165 if a0 == 0\n      : @154 (gas: 36)\n  9956: a0 = ra >> 0x3b\n  9959: a1 = t2 << 0x5\n  9962: t0 = a1 | a0\n  9965: a0 = s1 >> 0x3b\n  9968: a2 = a3 << 0x5\n  9971: a2 = a2 | a0\n  9974: a0 = s1 << 0x5\n  9977: a4 = u64 [sp + 0x38]\n  9980: a0 = a0 + a4\n  9983: s1 = a0 <u a4\n  9986: a5 = u64 [sp + 0x30]\n  9989: a2 = a2 + a5\n  9992: a2 = a2 + s1\n  9995: a4 = a2 ^ a5\n  9998: a5 = a2 <u a5\n 10001: a5 = s1 if a4 == 0\n 10004: a3 = a3 >> 0x3b\n 10007: a4 = ra << 0x5\n 10010: a3 = a3 | a4\n 10013: a4 = u64 [sp + 0x28]\n 10016: a3 = a3 + a4\n 10019: a4 = a3 <u a4\n 10022: a1 = u64 [sp + 0x20]\n 10025: a1 = a1 + t0\n 10028: a1 = a1 + a4\n 10031: a5 = a5 + a3\n 10034: a3 = a5 <u a3\n 10037: a1 = a1 + a3\n 10040: a1 = a1 | a2\n 10043: a2 = a0 | a5\n 10046: a2 = a2 | a1\n 10049: a1 = a1 | a5\n 10052: a2 = a2 >> 0x20\n 10055: a1 = a1 << 0x20\n 10058: a1 = a1 | a2\n 10061: jump @164 if a1 != 0\n      : @155 (gas: 3)\n 10065: i32 a0 = a0 + 0\n 10067: a1 = 0x20\n 10070: ra = 146, jump @0\n      : @156 [@dyn 73] (gas: 70)\n 10076: a1 = u8 [a0 + 0x18]\n 10079: u64 [sp + 0x58] = a1\n 10082: s1 = u8 [a0 + 0x19]\n 10085: a1 = u8 [a0 + 0x1a]\n 10088: u64 [sp + 0x48] = a1\n 10091: a1 = u8 [a0 + 0x1b]\n 10094: u64 [sp + 0x40] = a1\n 10097: a1 = u8 [a0 + 0x1c]\n 10100: u64 [sp + 0x70] = a1\n 10103: a1 = u8 [a0 + 0x1d]\n 10106: u64 [sp + 0x50] = a1\n 10109: a1 = u8 [a0 + 0x1e]\n 10112: u64 [sp + 0x68] = a1\n 10115: a1 = u8 [a0 + 0x1f]\n 10118: u64 [sp + 0x60] = a1\n 10121: a1 = u8 [a0 + 0x10]\n 10124: u64 [sp + 0x98] = a1\n 10128: a1 = u8 [a0 + 0x11]\n 10131: u64 [sp + 0x78] = a1\n 10134: a1 = u8 [a0 + 0x12]\n 10137: u64 [sp + 0x88] = a1\n 10141: a1 = u8 [a0 + 0x13]\n 10144: u64 [sp + 0x80] = a1\n 10148: a1 = u8 [a0 + 0x14]\n 10151: u64 [sp + 0xb0] = a1\n 10155: a1 = u8 [a0 + 0x15]\n 10158: u64 [sp + 0x90] = a1\n 10162: a1 = u8 [a0 + 0x16]\n 10165: u64 [sp + 0xa8] = a1\n 10169: a1 = u8 [a0 + 0x17]\n 10172: u64 [sp + 0xa0] = a1\n 10176: a1 = u8 [a0 + 0x8]\n 10179: u64 [sp + 0xd8] = a1\n 10183: a1 = u8 [a0 + 0x9]\n 10186: u64 [sp + 0xb8] = a1\n 10190: a1 = u8 [a0 + 0xa]\n 10193: u64 [sp + 0xc8] = a1\n 10197: a1 = u8 [a0 + 0xb]\n 10200: u64 [sp + 0xc0] = a1\n 10204: a1 = u8 [a0 + 0xc]\n 10207: u64 [sp + 0xf0] = a1\n 10211: a1 = u8 [a0 + 0xd]\n 10214: u64 [sp + 0xd0] = a1\n 10218: a1 = u8 [a0 + 0xe]\n 10221: u64 [sp + 0xe8] = a1\n 10225: a1 = u8 [a0 + 0xf]\n 10228: u64 [sp + 0xe0] = a1\n 10232: a1 = u8 [a0]\n 10234: u64 [sp + 0x118] = a1\n 10238: a1 = u8 [a0 + 0x1]\n 10241: u64 [sp + 0xf8] = a1\n 10245: a1 = u8 [a0 + 0x2]\n 10248: u64 [sp + 0x108] = a1\n 10252: a1 = u8 [a0 + 0x3]\n 10255: u64 [sp + 0x100] = a1\n 10259: a1 = u8 [a0 + 0x4]\n 10262: u64 [sp + 0x130] = a1\n 10266: a1 = u8 [a0 + 0x5]\n 10269: u64 [sp + 0x110] = a1\n 10273: a1 = u8 [a0 + 0x6]\n 10276: u64 [sp + 0x128] = a1\n 10280: a0 = u8 [a0 + 0x7]\n 10283: u64 [sp + 0x120] = a0\n 10287: u64 [sp + 472] = 0\n 10291: u64 [sp + 464] = 0\n 10295: u64 [sp + 456] = 0\n 10299: a0 = sp + 0x1e0\n 10303: a1 = sp + 0x1c0\n 10307: u64 [sp + 448] = 0x40\n 10312: ra = 148, jump @58\n      : @157 [@dyn 74] (gas: 16)\n 10318: a3 = u64 [sp + 0x1f8]\n 10322: a2 = u64 [sp + 0x1f0]\n 10326: a0 = u64 [sp + 0x1e8]\n 10330: a1 = u64 [sp + 0x1e0]\n 10334: u64 [sp + 0x138] = a0\n 10338: u64 [sp + 0x148] = a3\n 10342: a0 = a0 | a3\n 10345: u64 [sp + 0x158] = a1\n 10349: a1 = a1 | a2\n 10352: a1 = a1 | a0\n 10355: a1 = a1 >> 0x20\n 10358: u64 [sp + 0x150] = a2\n 10362: a0 = a0 | a2\n 10365: a0 = a0 << 0x20\n 10368: a0 = a0 | a1\n 10371: jump @164 if a0 != 0\n      : @158 (gas: 94)\n 10375: s1 = s1 << 0x8\n 10378: a0 = u64 [sp + 0x58]\n 10381: a0 = a0 | s1\n 10384: a1 = u64 [sp + 0x48]\n 10387: a1 = a1 << 0x10\n 10390: a2 = u64 [sp + 0x40]\n 10393: a2 = a2 << 0x18\n 10396: a1 = a1 | a2\n 10399: a0 = a0 | a1\n 10402: a1 = u64 [sp + 0x50]\n 10405: a1 = a1 << 0x8\n 10408: a2 = u64 [sp + 0x70]\n 10411: a1 = a1 | a2\n 10414: a2 = u64 [sp + 0x68]\n 10417: a2 = a2 << 0x10\n 10420: a3 = u64 [sp + 0x60]\n 10423: a3 = a3 << 0x18\n 10426: a2 = a2 | a3\n 10429: a1 = a1 | a2\n 10432: a1 = a1 << 0x20\n 10435: a0 = a0 | a1\n 10438: u64 [sp + 0x70] = a0\n 10441: a0 = u64 [sp + 0x78]\n 10444: a0 = a0 << 0x8\n 10447: a1 = u64 [sp + 0x98]\n 10451: a0 = a0 | a1\n 10454: a1 = u64 [sp + 0x88]\n 10458: a1 = a1 << 0x10\n 10461: a2 = u64 [sp + 0x80]\n 10465: a2 = a2 << 0x18\n 10468: a1 = a1 | a2\n 10471: a0 = a0 | a1\n 10474: a1 = u64 [sp + 0x90]\n 10478: a1 = a1 << 0x8\n 10481: a2 = u64 [sp + 0xb0]\n 10485: a1 = a1 | a2\n 10488: a2 = u64 [sp + 0xa8]\n 10492: a2 = a2 << 0x10\n 10495: a3 = u64 [sp + 0xa0]\n 10499: a3 = a3 << 0x18\n 10502: a2 = a2 | a3\n 10505: a1 = a1 | a2\n 10508: a1 = a1 << 0x20\n 10511: a0 = a0 | a1\n 10514: u64 [sp + 0xb0] = a0\n 10518: a0 = u64 [sp + 0xb8]\n 10522: a0 = a0 << 0x8\n 10525: a1 = u64 [sp + 0xd8]\n 10529: a0 = a0 | a1\n 10532: a1 = u64 [sp + 0xc8]\n 10536: a1 = a1 << 0x10\n 10539: a2 = u64 [sp + 0xc0]\n 10543: a2 = a2 << 0x18\n 10546: a1 = a1 | a2\n 10549: a0 = a0 | a1\n 10552: a1 = u64 [sp + 0xd0]\n 10556: a1 = a1 << 0x8\n 10559: a2 = u64 [sp + 0xf0]\n 10563: a1 = a1 | a2\n 10566: a2 = u64 [sp + 0xe8]\n 10570: a2 = a2 << 0x10\n 10573: a3 = u64 [sp + 0xe0]\n 10577: a3 = a3 << 0x18\n 10580: a2 = a2 | a3\n 10583: a1 = a1 | a2\n 10586: a1 = a1 << 0x20\n 10589: s1 = a1 | a0\n 10592: a0 = u64 [sp + 0xf8]\n 10596: a0 = a0 << 0x8\n 10599: a1 = u64 [sp + 0x118]\n 10603: a0 = a0 | a1\n 10606: a1 = u64 [sp + 0x108]\n 10610: a1 = a1 << 0x10\n 10613: a2 = u64 [sp + 0x100]\n 10617: a2 = a2 << 0x18\n 10620: a1 = a1 | a2\n 10623: a0 = a0 | a1\n 10626: a1 = u64 [sp + 0x110]\n 10630: a1 = a1 << 0x8\n 10633: a2 = u64 [sp + 0x130]\n 10637: a1 = a1 | a2\n 10640: a2 = u64 [sp + 0x128]\n 10644: a2 = a2 << 0x10\n 10647: a3 = u64 [sp + 0x120]\n 10651: a3 = a3 << 0x18\n 10654: a2 = a2 | a3\n 10657: a1 = a1 | a2\n 10660: a1 = a1 << 0x20\n 10663: a0 = a0 | a1\n 10666: u64 [sp + 0x130] = a0\n 10670: a0 = i32 [sp + 0x158]\n 10674: a1 = 0x20\n 10677: u64 [sp + 0x128] = a0\n 10681: ra = 150, jump @0\n      : @159 [@dyn 75] (gas: 73)\n 10687: a3 = u64 [sp + 0xb0]\n 10691: u8 [a0 + 0x10] = a3\n 10694: a1 = s1 >> 0x38\n 10697: u8 [a0 + 0xf] = a1\n 10700: a1 = s1 >> 0x30\n 10703: u8 [a0 + 0xe] = a1\n 10706: a1 = s1 >> 0x28\n 10709: u8 [a0 + 0xd] = a1\n 10712: a1 = s1 >> 0x20\n 10715: u8 [a0 + 0xc] = a1\n 10718: a1 = s1 >> 0x18\n 10721: u8 [a0 + 0xb] = a1\n 10724: a1 = s1 >> 0x10\n 10727: u8 [a0 + 0xa] = a1\n 10730: a1 = s1 >> 0x8\n 10733: u8 [a0 + 0x9] = a1\n 10736: u8 [a0 + 0x8] = s1\n 10739: a2 = u64 [sp + 0x130]\n 10743: a1 = a2 >> 0x38\n 10746: u8 [a0 + 0x7] = a1\n 10749: a1 = a2 >> 0x30\n 10752: u8 [a0 + 0x6] = a1\n 10755: a1 = a2 >> 0x28\n 10758: u8 [a0 + 0x5] = a1\n 10761: a1 = a2 >> 0x20\n 10764: u8 [a0 + 0x4] = a1\n 10767: a1 = a2 >> 0x18\n 10770: u8 [a0 + 0x3] = a1\n 10773: a1 = a2 >> 0x10\n 10776: u8 [a0 + 0x2] = a1\n 10779: a1 = a2 >> 0x8\n 10782: u8 [a0 + 0x1] = a1\n 10785: u8 [a0] = a2\n 10787: a2 = u64 [sp + 0x70]\n 10790: u8 [a0 + 0x18] = a2\n 10793: a1 = a3 >> 0x38\n 10796: u8 [a0 + 0x17] = a1\n 10799: a1 = a3 >> 0x30\n 10802: u8 [a0 + 0x16] = a1\n 10805: a1 = a3 >> 0x28\n 10808: u8 [a0 + 0x15] = a1\n 10811: a1 = a3 >> 0x20\n 10814: u8 [a0 + 0x14] = a1\n 10817: a1 = a3 >> 0x18\n 10820: u8 [a0 + 0x13] = a1\n 10823: a1 = a3 >> 0x10\n 10826: u8 [a0 + 0x12] = a1\n 10829: a1 = a3 >> 0x8\n 10832: u8 [a0 + 0x11] = a1\n 10835: a1 = a2 >> 0x38\n 10838: u8 [a0 + 0x1f] = a1\n 10841: a1 = a2 >> 0x30\n 10844: u8 [a0 + 0x1e] = a1\n 10847: a1 = a2 >> 0x28\n 10850: u8 [a0 + 0x1d] = a1\n 10853: a1 = a2 >> 0x20\n 10856: u8 [a0 + 0x1c] = a1\n 10859: a1 = a2 >> 0x18\n 10862: u8 [a0 + 0x1b] = a1\n 10865: a1 = a2 >> 0x10\n 10868: u8 [a0 + 0x1a] = a1\n 10871: a1 = a2 >> 0x8\n 10874: a2 = u64 [sp + 0x150]\n 10878: a3 = u64 [sp + 0x148]\n 10882: a2 = a2 | a3\n 10885: a3 = u64 [sp + 0x18]\n 10888: a4 = u64 [sp + 0x158]\n 10892: a3 = a4 <u a3\n 10895: s1 = u64 [sp + 0x138]\n 10899: a3 = 0 if s1 != 0\n 10901: a3 = 0 if a2 != 0\n 10903: u8 [a0 + 0x19] = a1\n 10906: jump @164 if a3 == 0\n      : @160 (gas: 4)\n 10910: a0 = u64 [sp + 0x128]\n 10914: i32 a0 = a0 + 0x20\n 10917: a1 = 0x20\n 10920: ra = 152, jump @0\n      : @161 [@dyn 76] (gas: 84)\n 10926: u8 [a0 + 31] = 0\n 10929: u8 [a0 + 30] = 0\n 10932: u8 [a0 + 29] = 0\n 10935: u8 [a0 + 28] = 0\n 10938: u8 [a0 + 27] = 0\n 10941: u8 [a0 + 26] = 0\n 10944: u8 [a0 + 25] = 0\n 10947: u8 [a0 + 24] = 0\n 10950: u8 [a0 + 23] = 0\n 10953: u8 [a0 + 22] = 0\n 10956: u8 [a0 + 21] = 0\n 10959: u8 [a0 + 20] = 0\n 10962: u8 [a0 + 19] = 0\n 10965: u8 [a0 + 18] = 0\n 10968: u8 [a0 + 17] = 0\n 10971: u8 [a0 + 16] = 0\n 10974: u8 [a0 + 15] = 0\n 10977: u8 [a0 + 14] = 0\n 10980: u8 [a0 + 13] = 0\n 10983: u8 [a0 + 12] = 0\n 10986: u8 [a0 + 11] = 0\n 10989: u8 [a0 + 10] = 0\n 10992: u8 [a0 + 9] = 0\n 10995: u8 [a0 + 8] = 0\n 10998: u8 [a0 + 7] = 0\n 11001: u8 [a0 + 6] = 0\n 11004: u8 [a0 + 5] = 0\n 11007: u8 [a0 + 4] = 0\n 11010: u8 [a0 + 3] = 0\n 11013: u8 [a0 + 2] = 0\n 11016: u8 [a0 + 1] = 0\n 11019: u8 [a0 + 0] = 0\n 11021: a0 = u64 [sp + 0x148]\n 11025: u64 [sp + 0x198] = a0\n 11029: a0 = u64 [sp + 0x150]\n 11033: u64 [sp + 0x190] = a0\n 11037: u64 [sp + 0x188] = s1\n 11041: a0 = u64 [sp + 0x158]\n 11045: u64 [sp + 0x180] = a0\n 11049: u64 [sp + 440] = 0\n 11053: u64 [sp + 432] = 0\n 11057: u64 [sp + 424] = 0\n 11061: a0 = sp + 0x1a0\n 11065: a1 = sp + 0x180\n 11069: u64 [sp + 416] = 0x2\n 11074: ra = 0x9a\n 11078: sp = sp + 0xfffffffffffffde0\n 11082: u64 [sp + 0x218] = ra\n 11086: u64 [sp + 0x210] = s0\n 11090: u64 [sp + 0x208] = s1\n 11094: s0 = sp + 0x220\n 11098: sp = sp & 0xffffffffffffffe0\n 11101: a2 = u64 [a1 + 0x18]\n 11104: u64 [sp + 0x38] = a2\n 11107: a2 = u64 [a1 + 0x10]\n 11110: u64 [sp + 0x30] = a2\n 11113: a2 = u64 [a1 + 0x8]\n 11116: u64 [sp + 0x28] = a2\n 11119: a1 = u64 [a1]\n 11121: u64 [sp + 0x20] = a1\n 11124: a3 = u64 [a0 + 0x18]\n 11127: a2 = u64 [a0 + 0x10]\n 11130: a1 = u64 [a0 + 0x8]\n 11133: a0 = u64 [a0]\n 11135: u64 [sp + 0x40] = a3\n 11138: u64 [sp + 0x1d8] = a3\n 11142: u64 [sp + 0x48] = a2\n 11145: u64 [sp + 0x1d0] = a2\n 11149: u64 [sp + 0x50] = a1\n 11152: u64 [sp + 0x1c8] = a1\n 11156: u64 [sp + 0x58] = a0\n 11159: u64 [sp + 0x1c0] = a0\n 11163: u64 [sp + 504] = 0\n 11167: u64 [sp + 496] = 0\n 11171: u64 [sp + 488] = 0\n 11175: u64 [sp + 480] = 0\n 11179: u32 [sp + 416] = 0x20\n 11184: i32 a1 = sp + 0x1c0\n 11188: i32 a3 = sp + 0x1e0\n 11192: i32 a4 = sp + 0x1a0\n 11196: a2 = 0xffffffffffffffff\n 11199: a0 = 0\n 11201: ecalli 4 // 'get_storage'\n 11203: jump @134\n      : @162 [@dyn 77] (gas: 20)\n 11206: a1 = u64 [sp + 0x178]\n 11210: a1 = a1 + 0x1\n 11213: a0 = a1 <u 0x1\n 11216: a2 = u64 [sp + 0x170]\n 11220: a2 = a2 + a0\n 11223: u64 [sp + 0x178] = a1\n 11227: u64 [sp + 0x170] = a2\n 11231: a0 = a1 | a2\n 11234: a0 = a0 <u 0x1\n 11237: a1 = u64 [sp + 0x160]\n 11241: a0 = a0 + a1\n 11244: a1 = a0 <u a1\n 11247: a2 = u64 [sp + 0x168]\n 11251: a2 = a2 + a1\n 11254: u64 [sp + 0x168] = a2\n 11258: u64 [sp + 0x160] = a0\n 11262: a0 = u64 [sp + 0x140]\n 11266: a1 = 0x20\n 11269: ra = 0x8e\n 11273: jump @0\n      : @163 (gas: 6)\n 11276: sp = s0 + 0xfffffffffffffd20\n 11280: ra = u64 [sp + 0x2d8]\n 11284: s0 = u64 [sp + 0x2d0]\n 11288: s1 = u64 [sp + 0x2c8]\n 11292: sp = sp + 0x2e0\n 11296: ret\n      : @164 (gas: 1)\n 11298: trap\n      : @165 (gas: 8)\n 11299: u64 [sp + 560] = 0\n 11303: u64 [sp + 552] = 0\n 11307: u64 [sp + 544] = 0\n 11311: a0 = 0x4e487b7100000000\n 11321: a1 = sp + 0x220\n 11325: u64 [sp + 0x238] = a0\n 11329: a0 = 0\n 11331: ra = 156, jump @8\n      : @166 [@dyn 78] (gas: 7)\n 11337: u64 [sp + 536] = 0\n 11341: u64 [sp + 528] = 0\n 11345: u64 [sp + 512] = 0x32\n 11350: a0 = 0x4\n 11353: a1 = sp + 0x200\n 11357: u64 [sp + 520] = 0\n 11361: ra = 158, jump @8\n      : @167 [@dyn 79] (gas: 3)\n 11367: a1 = 0x24\n 11370: a0 = 0\n 11372: ra = 160, jump @0\n      : @168 [@dyn 80] (gas: 6)\n 11378: i32 a1 = a0 + 0\n 11380: a0 = 0x1\n 11383: a2 = 0x24\n 11386: ra = 0xa2\n 11390: ecalli 6 // 'seal_return'\n 11392: fallthrough\n      : @169 [@dyn 81] (gas: 6)\n 11393: a1 = u32 [a1 + 0x1c]\n 11396: u64 [a0 + 24] = 0\n 11399: u64 [a0 + 16] = 0\n 11402: u64 [a0 + 8] = 0\n 11405: u64 [a0] = a1\n 11407: ret\n      : @170 (gas: 8)\n 11409: a0 = u64 [sp + 0x30]\n 11412: a1 = u64 [sp + 0x38]\n 11415: a2 = u64 [sp + 0x28]\n 11418: a3 = u64 [sp + 0x20]\n 11421: a1 = a1 | a2\n 11424: a0 = a0 | a3\n 11427: a0 = a0 | a1\n 11430: jump @176 if a0 != 0\n      : @171 (gas: 2)\n 11434: a0 = i32 [0x20004]\n 11439: jump @176 if a0 <=u 35\n      : @172 (gas: 47)\n 11444: i32 a0 = sp + 0x40\n 11447: a1 = 0x4\n 11450: ecalli 1 // 'call_data_load'\n 11452: a1 = u64 [sp + 0x40]\n 11455: a0 = u64 [sp + 0x48]\n 11458: a2 = u64 [sp + 0x50]\n 11461: a3 = u64 [sp + 0x58]\n 11464: u64 [sp + 0x18] = a3\n 11467: u64 [sp + 0x10] = a2\n 11470: u64 [sp + 0x8] = a0\n 11473: a0 = sp\n 11475: u64 [sp] = a1\n 11477: ra = 0xa4\n 11481: sp = sp + 0xfffffffffffffdc0\n 11485: u64 [sp + 0x238] = ra\n 11489: u64 [sp + 0x230] = s0\n 11493: u64 [sp + 0x228] = s1\n 11497: s0 = sp + 0x240\n 11501: sp = sp & 0xffffffffffffffe0\n 11504: a1 = u64 [a0 + 0x18]\n 11507: u64 [sp + 0x30] = a1\n 11510: a1 = u64 [a0 + 0x10]\n 11513: u64 [sp + 0x38] = a1\n 11516: a1 = u64 [a0 + 0x8]\n 11519: u64 [sp + 0x40] = a1\n 11522: a0 = u64 [a0]\n 11524: u64 [sp + 0x8] = a0\n 11527: i32 a0 = sp + 0x1a0\n 11531: ecalli 3 // 'caller'\n 11533: a0 = u64 [sp + 0x1a8]\n 11537: a1 = i32 [sp + 0x1b0]\n 11541: s1 = u64 [sp + 0x1a0]\n 11545: a0 = reverse a0\n 11547: a2 = a0 << 0x20\n 11550: a1 = reverse a1\n 11552: a1 = a1 >> 0x20\n 11555: a1 = a1 | a2\n 11558: u64 [sp + 0x58] = a1\n 11561: a0 = a0 >> 0x20\n 11564: a1 = reverse s1\n 11566: a1 = a1 << 0x20\n 11569: a0 = a0 | a1\n 11572: u64 [sp + 0x50] = a0\n 11575: a1 = 0x20\n 11578: a0 = 0\n 11580: ra = 0x13c\n 11584: jump @0\n      : @173 [@dyn 82] (gas: 3)\n 11587: a0 = 0x40\n 11590: a1 = 0x20\n 11593: ra = 166, jump @0\n      : @174 [@dyn 83] (gas: 100)\n 11599: a1 = u8 [a0 + 0x11]\n 11602: a2 = u8 [a0 + 0x10]\n 11605: a3 = u8 [a0 + 0x12]\n 11608: a4 = u8 [a0 + 0x13]\n 11611: a1 = a1 << 0x8\n 11614: a1 = a1 | a2\n 11617: a3 = a3 << 0x10\n 11620: a4 = a4 << 0x18\n 11623: a3 = a3 | a4\n 11626: a1 = a1 | a3\n 11629: a2 = u8 [a0 + 0x15]\n 11632: a3 = u8 [a0 + 0x14]\n 11635: a4 = u8 [a0 + 0x16]\n 11638: a5 = u8 [a0 + 0x17]\n 11641: a2 = a2 << 0x8\n 11644: a2 = a2 | a3\n 11647: a4 = a4 << 0x10\n 11650: a5 = a5 << 0x18\n 11653: a4 = a4 | a5\n 11656: a2 = a2 | a4\n 11659: a2 = a2 << 0x20\n 11662: t0 = a2 | a1\n 11665: a2 = u8 [a0 + 0x1]\n 11668: a3 = u8 [a0]\n 11670: a4 = u8 [a0 + 0x2]\n 11673: a5 = u8 [a0 + 0x3]\n 11676: a2 = a2 << 0x8\n 11679: a2 = a2 | a3\n 11682: a4 = a4 << 0x10\n 11685: a5 = a5 << 0x18\n 11688: a4 = a4 | a5\n 11691: a2 = a2 | a4\n 11694: a3 = u8 [a0 + 0x5]\n 11697: a4 = u8 [a0 + 0x4]\n 11700: a5 = u8 [a0 + 0x6]\n 11703: a1 = u8 [a0 + 0x7]\n 11706: a3 = a3 << 0x8\n 11709: a3 = a3 | a4\n 11712: a5 = a5 << 0x10\n 11715: a1 = a1 << 0x18\n 11718: a1 = a1 | a5\n 11721: a1 = a1 | a3\n 11724: a1 = a1 << 0x20\n 11727: t1 = a1 | a2\n 11730: a1 = u8 [a0 + 0x19]\n 11733: a3 = u8 [a0 + 0x18]\n 11736: a4 = u8 [a0 + 0x1a]\n 11739: a5 = u8 [a0 + 0x1b]\n 11742: a1 = a1 << 0x8\n 11745: a1 = a1 | a3\n 11748: a4 = a4 << 0x10\n 11751: a5 = a5 << 0x18\n 11754: a4 = a4 | a5\n 11757: a1 = a1 | a4\n 11760: a3 = u8 [a0 + 0x1d]\n 11763: a4 = u8 [a0 + 0x1c]\n 11766: a5 = u8 [a0 + 0x1e]\n 11769: a2 = u8 [a0 + 0x1f]\n 11772: a3 = a3 << 0x8\n 11775: a3 = a3 | a4\n 11778: a5 = a5 << 0x10\n 11781: a2 = a2 << 0x18\n 11784: a2 = a2 | a5\n 11787: a2 = a2 | a3\n 11790: a2 = a2 << 0x20\n 11793: a3 = a2 | a1\n 11796: a1 = u8 [a0 + 0x9]\n 11799: a2 = u8 [a0 + 0x8]\n 11802: a4 = u8 [a0 + 0xa]\n 11805: a5 = u8 [a0 + 0xb]\n 11808: a1 = a1 << 0x8\n 11811: a1 = a1 | a2\n 11814: a4 = a4 << 0x10\n 11817: a5 = a5 << 0x18\n 11820: a4 = a4 | a5\n 11823: a1 = a1 | a4\n 11826: a2 = u8 [a0 + 0xd]\n 11829: a4 = u8 [a0 + 0xc]\n 11832: a5 = u8 [a0 + 0xe]\n 11835: a0 = u8 [a0 + 0xf]\n 11838: a2 = a2 << 0x8\n 11841: a2 = a2 | a4\n 11844: a5 = a5 << 0x10\n 11847: a0 = a0 << 0x18\n 11850: a0 = a0 | a5\n 11853: a0 = a0 | a2\n 11856: a0 = a0 << 0x20\n 11859: a0 = a0 | a1\n 11862: a1 = reverse a0\n 11864: a0 = reverse a3\n 11866: a2 = reverse t1\n 11868: a3 = reverse t0\n 11870: a2 = a2 | a3\n 11873: a3 = a0 | a1\n 11876: a3 = a3 | a2\n 11879: a3 = a3 >> 0x20\n 11882: a1 = a1 | a2\n 11885: a1 = a1 << 0x20\n 11888: a1 = a1 | a3\n 11891: jump @178 if a1 == 0\n      : @175 (gas: 1)\n 11894: trap\n      : @176 (gas: 3)\n 11895: a0 = 0\n 11897: a1 = 0\n 11899: ra = 168, jump @0\n      : @177 [@dyn 84] (gas: 7)\n 11905: i32 a1 = a0 + 0\n 11907: a0 = 0x1\n 11910: a2 = 0\n 11912: ecalli 6 // 'seal_return'\n 11914: i32 a0 = a0 + 0\n 11916: ra = 0xaa\n 11920: jump @0\n      : @178 (gas: 2)\n 11923: i32 a0 = a0 + 0\n 11925: ra = 170, jump @0\n      : @179 [@dyn 85] (gas: 6)\n 11931: i32 a1 = a0 + 0\n 11933: a0 = 0\n 11935: a2 = 0\n 11937: ra = 0xac\n 11941: ecalli 6 // 'seal_return'\n 11943: fallthrough\n      : @180 [@dyn 86] (gas: 40)\n 11944: sp = sp + 0xffffffffffffffa0\n 11947: u64 [sp + 0x58] = ra\n 11950: u64 [sp + 0x50] = s0\n 11953: u64 [sp + 0x48] = s1\n 11956: s0 = sp + 0x60\n 11959: sp = sp & 0xffffffffffffffe0\n 11962: s1 = a0\n 11964: a0 = u64 [a1 + 0x18]\n 11967: a2 = u64 [a1 + 0x10]\n 11970: a3 = u64 [a1 + 0x8]\n 11973: a1 = u64 [a1]\n 11975: u64 [sp + 0x18] = a0\n 11978: u64 [sp + 0x10] = a2\n 11981: u64 [sp + 0x8] = a3\n 11984: u64 [sp] = a1\n 11986: u64 [sp + 56] = 0\n 11989: u64 [sp + 48] = 0\n 11992: u64 [sp + 40] = 0\n 11995: u64 [sp + 32] = 0\n 11998: u32 [sp + 64] = 0x20\n 12002: i32 a1 = sp + 0\n 12004: i32 a3 = sp + 0x20\n 12007: i32 a4 = sp + 0x40\n 12010: a2 = 0xffffffffffffffff\n 12013: a0 = 0\n 12015: ecalli 4 // 'get_storage'\n 12017: a0 = u64 [sp + 0x38]\n 12020: a1 = u64 [sp + 0x30]\n 12023: a2 = u64 [sp + 0x28]\n 12026: a3 = u64 [sp + 0x20]\n 12029: u64 [s1 + 0x18] = a0\n 12032: u64 [s1 + 0x10] = a1\n 12035: u64 [s1 + 0x8] = a2\n 12038: u64 [s1] = a3\n 12040: sp = s0 + 0xffffffffffffffa0\n 12043: ra = u64 [sp + 0x58]\n 12046: s0 = u64 [sp + 0x50]\n 12049: s1 = u64 [sp + 0x48]\n 12052: sp = sp + 0x60\n 12055: ret\n      : @181 (gas: 38)\n 12057: sp = sp + 0xfffffffffffffee0\n 12061: u64 [sp + 0x118] = ra\n 12065: u64 [sp + 0x110] = s0\n 12069: u64 [sp + 0x108] = s1\n 12073: s0 = sp + 0x120\n 12077: sp = sp & 0xffffffffffffffe0\n 12080: u64 [sp + 0x40] = a0\n 12083: a0 = u64 [a2]\n 12085: u64 [sp + 0x50] = a0\n 12088: a0 = u64 [a2 + 0x8]\n 12091: u64 [sp + 0x58] = a0\n 12094: a0 = u64 [a2 + 0x10]\n 12097: u64 [sp + 0x48] = a0\n 12100: s1 = u64 [a2 + 0x18]\n 12103: a4 = u64 [a1 + 0x18]\n 12106: a3 = u64 [a1 + 0x10]\n 12109: a2 = u64 [a1 + 0x8]\n 12112: a0 = u64 [a1]\n 12114: u64 [sp + 0x18] = a4\n 12117: u64 [sp + 0xb8] = a4\n 12121: u64 [sp + 0x20] = a3\n 12124: u64 [sp + 0xb0] = a3\n 12128: u64 [sp + 0x28] = a2\n 12131: u64 [sp + 0xa8] = a2\n 12135: u64 [sp + 0x30] = a0\n 12138: u64 [sp + 0xa0] = a0\n 12142: u64 [sp + 248] = 0\n 12146: u64 [sp + 240] = 0\n 12150: u64 [sp + 232] = 0\n 12154: u64 [sp + 224] = 0\n 12158: u32 [sp + 192] = 0x20\n 12163: i32 a1 = sp + 0xa0\n 12167: i32 a3 = sp + 0xe0\n 12171: i32 a4 = sp + 0xc0\n 12175: a2 = 0xffffffffffffffff\n 12178: a0 = 0\n 12180: ecalli 4 // 'get_storage'\n 12182: fallthrough\n      : @182 (gas: 20)\n 12183: a0 = u64 [sp + 0xf8]\n 12187: t0 = u64 [sp + 0xe0]\n 12191: a2 = u64 [sp + 0xf0]\n 12195: a3 = u64 [sp + 0xe8]\n 12199: a4 = a0 ^ s1\n 12202: u64 [sp + 0x38] = s1\n 12205: a0 = s1 <u a0\n 12208: s1 = u64 [sp + 0x48]\n 12211: a5 = s1 <u a2\n 12214: a5 = a0 if a4 != 0\n 12217: a1 = u64 [sp + 0x58]\n 12220: a0 = a3 ^ a1\n 12223: a3 = a1 <u a3\n 12226: a1 = u64 [sp + 0x50]\n 12229: a1 = a1 <u t0\n 12232: a1 = a3 if a0 != 0\n 12235: a0 = a2 ^ s1\n 12238: a0 = a0 | a4\n 12241: a1 = a5 if a0 != 0\n 12244: jump @186 if a1 == 0\n      : @183 (gas: 3)\n 12248: a1 = 0x20\n 12251: a0 = 0\n 12253: ra = 174, jump @0\n      : @184 [@dyn 87] (gas: 71)\n 12259: a1 = u64 [sp + 0x18]\n 12262: a1 = reverse a1\n 12264: a2 = u64 [sp + 0x20]\n 12267: a2 = reverse a2\n 12269: a3 = u64 [sp + 0x28]\n 12272: a3 = reverse a3\n 12274: a4 = u64 [sp + 0x30]\n 12277: a4 = reverse a4\n 12279: a5 = a4 >> 0x38\n 12282: u8 [a0 + 0x1f] = a5\n 12285: a5 = a4 >> 0x30\n 12288: u8 [a0 + 0x1e] = a5\n 12291: a5 = a4 >> 0x28\n 12294: u8 [a0 + 0x1d] = a5\n 12297: a5 = a4 >> 0x20\n 12300: u8 [a0 + 0x1c] = a5\n 12303: a5 = a4 >> 0x18\n 12306: u8 [a0 + 0x1b] = a5\n 12309: a5 = a4 >> 0x10\n 12312: u8 [a0 + 0x1a] = a5\n 12315: a5 = a4 >> 0x8\n 12318: u8 [a0 + 0x19] = a5\n 12321: u8 [a0 + 0x18] = a4\n 12324: u8 [a0 + 0x10] = a3\n 12327: a4 = a3 >> 0x38\n 12330: u8 [a0 + 0x17] = a4\n 12333: a4 = a3 >> 0x30\n 12336: u8 [a0 + 0x16] = a4\n 12339: a4 = a3 >> 0x28\n 12342: u8 [a0 + 0x15] = a4\n 12345: a4 = a3 >> 0x20\n 12348: u8 [a0 + 0x14] = a4\n 12351: a4 = a3 >> 0x18\n 12354: u8 [a0 + 0x13] = a4\n 12357: a4 = a3 >> 0x10\n 12360: u8 [a0 + 0x12] = a4\n 12363: a3 = a3 >> 0x8\n 12366: u8 [a0 + 0x11] = a3\n 12369: u8 [a0 + 0x8] = a2\n 12372: a3 = a2 >> 0x38\n 12375: u8 [a0 + 0xf] = a3\n 12378: a3 = a2 >> 0x30\n 12381: u8 [a0 + 0xe] = a3\n 12384: a3 = a2 >> 0x28\n 12387: u8 [a0 + 0xd] = a3\n 12390: a3 = a2 >> 0x20\n 12393: u8 [a0 + 0xc] = a3\n 12396: a3 = a2 >> 0x18\n 12399: u8 [a0 + 0xb] = a3\n 12402: a3 = a2 >> 0x10\n 12405: u8 [a0 + 0xa] = a3\n 12408: a2 = a2 >> 0x8\n 12411: u8 [a0 + 0x9] = a2\n 12414: u8 [a0] = a1\n 12416: a2 = a1 >> 0x38\n 12419: u8 [a0 + 0x7] = a2\n 12422: a2 = a1 >> 0x30\n 12425: u8 [a0 + 0x6] = a2\n 12428: a2 = a1 >> 0x28\n 12431: u8 [a0 + 0x5] = a2\n 12434: a2 = a1 >> 0x20\n 12437: u8 [a0 + 0x4] = a2\n 12440: a2 = a1 >> 0x18\n 12443: u8 [a0 + 0x3] = a2\n 12446: a2 = a1 >> 0x10\n 12449: u8 [a0 + 0x2] = a2\n 12452: a1 = a1 >> 0x8\n 12455: u8 [a0 + 0x1] = a1\n 12458: a1 = 0x20\n 12461: a0 = 0\n 12463: ra = 176, jump @0\n      : @185 [@dyn 88] (gas: 55)\n 12469: i32 a0 = a0 + 0\n 12471: i32 a2 = sp + 0xe0\n 12475: a1 = 0x20\n 12478: ecalli 5 // 'hash_keccak_256'\n 12480: a0 = u64 [sp + 0xe0]\n 12484: a1 = u64 [sp + 0xe8]\n 12488: a2 = u64 [sp + 0xf8]\n 12492: a3 = u64 [sp + 0xf0]\n 12496: t0 = reverse a0\n 12498: a1 = reverse a1\n 12500: a2 = reverse a2\n 12502: a3 = reverse a3\n 12504: s1 = u64 [sp + 0x48]\n 12507: a4 = s1 >> 0x3f\n 12510: a5 = u64 [sp + 0x38]\n 12513: a5 = a5 << 0x1\n 12516: t1 = a5 | a4\n 12519: a5 = u64 [sp + 0x58]\n 12522: a4 = a5 >> 0x3f\n 12525: a0 = s1 << 0x1\n 12528: t2 = a0 | a4\n 12531: a4 = u64 [sp + 0x50]\n 12534: a0 = a4 >> 0x3f\n 12537: s1 = a5 << 0x1\n 12540: a5 = s1 | a0\n 12543: s1 = a4 << 0x1\n 12546: a5 = a5 + a3\n 12549: s1 = s1 + a2\n 12552: a2 = s1 <u a2\n 12555: a5 = a5 + a2\n 12558: a4 = a5 ^ a3\n 12561: a3 = a5 <u a3\n 12564: a3 = a2 if a4 == 0\n 12567: a0 = a1 + t2\n 12570: a3 = a3 + a0\n 12573: a2 = a3 <u a0\n 12576: t0 = t0 + t1\n 12579: a0 = a0 <u a1\n 12582: a0 = a0 + t0\n 12585: a0 = a0 + a2\n 12588: a1 = u64 [sp + 0x40]\n 12591: u64 [a1 + 56] = 0\n 12594: u64 [a1 + 48] = 0\n 12597: u64 [a1 + 40] = 0\n 12600: u64 [a1 + 32] = 0\n 12603: u64 [a1] = s1\n 12605: u64 [a1 + 0x8] = a5\n 12608: u64 [a1 + 0x10] = a3\n 12611: u64 [a1 + 0x18] = a0\n 12614: sp = s0 + 0xfffffffffffffee0\n 12618: ra = u64 [sp + 0x118]\n 12622: s0 = u64 [sp + 0x110]\n 12626: s1 = u64 [sp + 0x108]\n 12630: sp = sp + 0x120\n 12634: ret\n      : @186 (gas: 8)\n 12636: u64 [sp + 144] = 0\n 12640: u64 [sp + 136] = 0\n 12644: u64 [sp + 128] = 0\n 12648: a0 = 0x4e487b7100000000\n 12658: a1 = sp + 0x80\n 12662: u64 [sp + 0x98] = a0\n 12666: a0 = 0\n 12668: ra = 178, jump @8\n      : @187 [@dyn 89] (gas: 7)\n 12674: u64 [sp + 120] = 0\n 12677: u64 [sp + 112] = 0\n 12680: u64 [sp + 96] = 0x32\n 12684: a0 = 0x4\n 12687: a1 = sp + 0x60\n 12690: u64 [sp + 104] = 0\n 12693: ra = 180, jump @8\n      : @188 [@dyn 90] (gas: 3)\n 12699: a1 = 0x24\n 12702: a0 = 0\n 12704: ra = 182, jump @0\n      : @189 [@dyn 91] (gas: 6)\n 12710: i32 a1 = a0 + 0\n 12712: a0 = 0x1\n 12715: a2 = 0x24\n 12718: ra = 0xb8\n 12722: ecalli 6 // 'seal_return'\n 12724: fallthrough\n      : @190 [@dyn 92] (gas: 9)\n 12725: a2 = u64 [a1 + 0x18]\n 12728: a3 = u64 [a1 + 0x10]\n 12731: a4 = u64 [a1 + 0x8]\n 12734: a1 = u64 [a1]\n 12736: u64 [a0 + 0x18] = a2\n 12739: u64 [a0 + 0x10] = a3\n 12742: u64 [a0 + 0x8] = a4\n 12745: u64 [a0] = a1\n 12747: ret\n      : @191 (gas: 20)\n 12749: t1 = u64 [sp + 0x28]\n 12752: t0 = s1\n 12754: t2 = u64 [sp + 0x20]\n 12757: a0 = u64 [sp + 0xf8]\n 12761: a1 = u64 [sp + 0xe0]\n 12765: s1 = u64 [sp + 0xf0]\n 12769: a3 = u64 [sp + 0xe8]\n 12773: a4 = a0 ^ t0\n 12776: a0 = t0 <u a0\n 12779: a2 = u64 [sp + 0x30]\n 12782: a5 = a2 <u s1\n 12785: a5 = a0 if a4 != 0\n 12788: a0 = a3 ^ t2\n 12791: a3 = t2 <u a3\n 12794: a1 = t1 <u a1\n 12797: a1 = a3 if a0 != 0\n 12800: a0 = s1 ^ a2\n 12803: a0 = a0 | a4\n 12806: a1 = a5 if a0 != 0\n 12809: jump @194 if a1 == 0\n      : @192 (gas: 12)\n 12813: u64 [sp + 0x40] = t1\n 12816: u64 [sp + 120] = 0\n 12819: u64 [sp + 112] = 0\n 12822: u64 [sp + 104] = 0\n 12825: u64 [sp + 96] = 0x2\n 12829: u64 [sp + 0x48] = t2\n 12832: u64 [sp + 0x50] = a2\n 12835: a0 = sp + 0x80\n 12839: a1 = sp + 0x60\n 12842: a2 = sp + 0x40\n 12845: u64 [sp + 0x58] = t0\n 12848: ra = 186, jump @181\n      : @193 [@dyn 93] (gas: 79)\n 12854: a0 = u64 [sp + 0x98]\n 12858: u64 [sp + 0x10] = a0\n 12861: s1 = u64 [sp + 0x90]\n 12865: a1 = u64 [sp + 0x88]\n 12869: u64 [sp + 0x8] = a1\n 12872: a2 = u64 [sp + 0x80]\n 12876: u64 [sp] = a2\n 12878: u64 [sp + 0xd8] = a0\n 12882: u64 [sp + 0xd0] = s1\n 12886: u64 [sp + 0xc8] = a1\n 12890: u64 [sp + 0xc0] = a2\n 12894: u64 [sp + 248] = 0\n 12898: u64 [sp + 240] = 0\n 12902: u64 [sp + 232] = 0\n 12906: u64 [sp + 224] = 0\n 12910: u32 [sp + 256] = 0x20\n 12915: i32 a1 = sp + 0xc0\n 12919: i32 a3 = sp + 0xe0\n 12923: i32 a4 = sp + 0x100\n 12927: a2 = 0xffffffffffffffff\n 12930: a0 = 0\n 12932: ecalli 4 // 'get_storage'\n 12934: a0 = u64 [sp + 0xe0]\n 12938: u64 [sp + 0x30] = a0\n 12941: a0 = u64 [sp + 0xe8]\n 12945: u64 [sp + 0x28] = a0\n 12948: a0 = u64 [sp + 0xf0]\n 12952: u64 [sp + 0x20] = a0\n 12955: a0 = u64 [sp + 0xf8]\n 12959: u64 [sp + 0x18] = a0\n 12962: a0 = u64 [sp]\n 12964: a0 = a0 + 0x1\n 12967: a1 = a0 <u 0x1\n 12970: a2 = u64 [sp + 0x8]\n 12973: a1 = a1 + a2\n 12976: a2 = a0 | a1\n 12979: a2 = a2 <u 0x1\n 12982: a2 = a2 + s1\n 12985: a3 = a2 <u s1\n 12988: a4 = u64 [sp + 0x10]\n 12991: a3 = a3 + a4\n 12994: u64 [sp + 0xd8] = a3\n 12998: u64 [sp + 0xd0] = a2\n 13002: u64 [sp + 0xc8] = a1\n 13006: u64 [sp + 0xc0] = a0\n 13010: u64 [sp + 248] = 0\n 13014: u64 [sp + 240] = 0\n 13018: u64 [sp + 232] = 0\n 13022: u64 [sp + 224] = 0\n 13026: u32 [sp + 256] = 0x20\n 13031: i32 a1 = sp + 0xc0\n 13035: i32 a3 = sp + 0xe0\n 13039: i32 a4 = sp + 0x100\n 13043: a2 = 0xffffffffffffffff\n 13046: a0 = 0\n 13048: ecalli 4 // 'get_storage'\n 13050: a0 = u64 [sp + 0xf8]\n 13054: a1 = u64 [sp + 0xf0]\n 13058: a2 = u64 [sp + 0xe8]\n 13062: a3 = u64 [sp + 0xe0]\n 13066: a4 = u64 [sp + 0x38]\n 13069: u64 [a4 + 0x38] = a0\n 13072: u64 [a4 + 0x30] = a1\n 13075: u64 [a4 + 0x28] = a2\n 13078: u64 [a4 + 0x20] = a3\n 13081: a0 = u64 [sp + 0x18]\n 13084: u64 [a4 + 0x18] = a0\n 13087: a0 = u64 [sp + 0x20]\n 13090: u64 [a4 + 0x10] = a0\n 13093: a0 = u64 [sp + 0x28]\n 13096: u64 [a4 + 0x8] = a0\n 13099: a0 = u64 [sp + 0x30]\n 13102: u64 [a4] = a0\n 13104: sp = s0 + 0xfffffffffffffee0\n 13108: ra = u64 [sp + 0x118]\n 13112: s0 = u64 [sp + 0x110]\n 13116: s1 = u64 [sp + 0x108]\n 13120: sp = sp + 0x120\n 13124: ret\n      : @194 (gas: 2)\n 13126: a0 = 0\n 13128: ra = 188, jump @0\n      : @195 [@dyn 94] (gas: 6)\n 13134: i32 a1 = a0 + 0\n 13136: a0 = 0x1\n 13139: a2 = 0\n 13141: ra = 0xbe\n 13145: ecalli 6 // 'seal_return'\n 13147: fallthrough\n      : @196 [@dyn 95] (gas: 9)\n 13148: a2 = u64 [a1 + 0x18]\n 13151: a3 = u64 [a1 + 0x10]\n 13154: a4 = u64 [a1 + 0x8]\n 13157: a1 = u64 [a1]\n 13159: u64 [a0 + 0x18] = a2\n 13162: u64 [a0 + 0x10] = a3\n 13165: u64 [a0 + 0x8] = a4\n 13168: u64 [a0] = a1\n 13170: ret\n      : @197 (gas: 8)\n 13172: a0 = u64 [sp + 0xd0]\n 13176: a1 = u64 [sp + 0xd8]\n 13180: a2 = u64 [sp + 0xc8]\n 13184: a3 = u64 [sp + 0xc0]\n 13188: a1 = a1 | a2\n 13191: a0 = a0 | a3\n 13194: a0 = a0 | a1\n 13197: jump @205 if a0 != 0\n      : @198 (gas: 2)\n 13201: a0 = i32 [0x20004]\n 13206: jump @205 if a0 <=u 35\n      : @199 (gas: 44)\n 13211: i32 a0 = sp + 0xe0\n 13215: a1 = 0x4\n 13218: ecalli 1 // 'call_data_load'\n 13220: a2 = u64 [sp + 0xe0]\n 13224: a0 = u64 [sp + 0xe8]\n 13228: a1 = u64 [sp + 0xf0]\n 13232: a3 = u64 [sp + 0xf8]\n 13236: u64 [sp + 0x78] = a3\n 13239: u64 [sp + 0x70] = a1\n 13242: u64 [sp + 0x68] = a0\n 13245: a0 = sp + 0x80\n 13249: a1 = sp + 0x60\n 13252: u64 [sp + 0x60] = a2\n 13255: ra = 0xc0\n 13259: sp = sp + 0xfffffffffffffee0\n 13263: u64 [sp + 0x118] = ra\n 13267: u64 [sp + 0x110] = s0\n 13271: u64 [sp + 0x108] = s1\n 13275: s0 = sp + 0x120\n 13279: sp = sp & 0xffffffffffffffe0\n 13282: u64 [sp + 0x38] = a0\n 13285: a0 = u64 [a1]\n 13287: u64 [sp + 0x28] = a0\n 13290: a0 = u64 [a1 + 0x8]\n 13293: u64 [sp + 0x20] = a0\n 13296: a0 = u64 [a1 + 0x10]\n 13299: u64 [sp + 0x30] = a0\n 13302: s1 = u64 [a1 + 0x18]\n 13305: u64 [sp + 216] = 0\n 13309: u64 [sp + 208] = 0\n 13313: u64 [sp + 200] = 0\n 13317: u64 [sp + 192] = 0x2\n 13322: u64 [sp + 248] = 0\n 13326: u64 [sp + 240] = 0\n 13330: u64 [sp + 232] = 0\n 13334: u64 [sp + 224] = 0\n 13338: u32 [sp + 256] = 0x20\n 13343: i32 a1 = sp + 0xc0\n 13347: i32 a3 = sp + 0xe0\n 13351: i32 a4 = sp + 0x100\n 13355: a2 = 0xffffffffffffffff\n 13358: a0 = 0\n 13360: ecalli 4 // 'get_storage'\n 13362: jump @191\n      : @200 [@dyn 96] (gas: 19)\n 13365: a0 = u64 [sp + 0xb8]\n 13369: u64 [sp + 0x20] = a0\n 13372: a0 = u64 [sp + 0xb0]\n 13376: u64 [sp + 0x28] = a0\n 13379: a0 = u64 [sp + 0xa8]\n 13383: u64 [sp + 0x30] = a0\n 13386: a0 = u64 [sp + 0xa0]\n 13390: u64 [sp + 0x38] = a0\n 13393: a0 = u64 [sp + 0x98]\n 13397: u64 [sp + 0x40] = a0\n 13400: a0 = u64 [sp + 0x90]\n 13404: u64 [sp + 0x48] = a0\n 13407: a0 = u64 [sp + 0x88]\n 13411: u64 [sp + 0x50] = a0\n 13414: a0 = u64 [sp + 0x80]\n 13418: u64 [sp + 0x58] = a0\n 13421: a0 = 0x40\n 13424: a1 = 0x20\n 13427: ra = 194, jump @0\n      : @201 [@dyn 97] (gas: 100)\n 13433: a1 = u8 [a0 + 0x11]\n 13436: a2 = u8 [a0 + 0x10]\n 13439: a3 = u8 [a0 + 0x12]\n 13442: a4 = u8 [a0 + 0x13]\n 13445: a1 = a1 << 0x8\n 13448: a1 = a1 | a2\n 13451: a3 = a3 << 0x10\n 13454: a4 = a4 << 0x18\n 13457: a3 = a3 | a4\n 13460: a1 = a1 | a3\n 13463: a2 = u8 [a0 + 0x15]\n 13466: a3 = u8 [a0 + 0x14]\n 13469: a4 = u8 [a0 + 0x16]\n 13472: a5 = u8 [a0 + 0x17]\n 13475: a2 = a2 << 0x8\n 13478: a2 = a2 | a3\n 13481: a4 = a4 << 0x10\n 13484: a5 = a5 << 0x18\n 13487: a4 = a4 | a5\n 13490: a2 = a2 | a4\n 13493: a2 = a2 << 0x20\n 13496: t0 = a2 | a1\n 13499: a2 = u8 [a0 + 0x1]\n 13502: a3 = u8 [a0]\n 13504: a4 = u8 [a0 + 0x2]\n 13507: a5 = u8 [a0 + 0x3]\n 13510: a2 = a2 << 0x8\n 13513: a2 = a2 | a3\n 13516: a4 = a4 << 0x10\n 13519: a5 = a5 << 0x18\n 13522: a4 = a4 | a5\n 13525: a2 = a2 | a4\n 13528: a3 = u8 [a0 + 0x5]\n 13531: a4 = u8 [a0 + 0x4]\n 13534: a5 = u8 [a0 + 0x6]\n 13537: s1 = u8 [a0 + 0x7]\n 13540: a3 = a3 << 0x8\n 13543: a3 = a3 | a4\n 13546: a5 = a5 << 0x10\n 13549: s1 = s1 << 0x18\n 13552: a5 = a5 | s1\n 13555: a3 = a3 | a5\n 13558: a3 = a3 << 0x20\n 13561: a2 = a2 | a3\n 13564: a3 = u8 [a0 + 0x19]\n 13567: a4 = u8 [a0 + 0x18]\n 13570: a5 = u8 [a0 + 0x1a]\n 13573: s1 = u8 [a0 + 0x1b]\n 13576: a3 = a3 << 0x8\n 13579: a3 = a3 | a4\n 13582: a5 = a5 << 0x10\n 13585: s1 = s1 << 0x18\n 13588: a5 = a5 | s1\n 13591: a3 = a3 | a5\n 13594: a4 = u8 [a0 + 0x1d]\n 13597: a5 = u8 [a0 + 0x1c]\n 13600: s1 = u8 [a0 + 0x1e]\n 13603: a1 = u8 [a0 + 0x1f]\n 13606: a4 = a4 << 0x8\n 13609: a4 = a4 | a5\n 13612: s1 = s1 << 0x10\n 13615: a1 = a1 << 0x18\n 13618: a1 = a1 | s1\n 13621: a1 = a1 | a4\n 13624: a1 = a1 << 0x20\n 13627: a3 = a3 | a1\n 13630: a1 = u8 [a0 + 0x9]\n 13633: a4 = u8 [a0 + 0x8]\n 13636: a5 = u8 [a0 + 0xa]\n 13639: s1 = u8 [a0 + 0xb]\n 13642: a1 = a1 << 0x8\n 13645: a1 = a1 | a4\n 13648: a5 = a5 << 0x10\n 13651: s1 = s1 << 0x18\n 13654: a5 = a5 | s1\n 13657: a1 = a1 | a5\n 13660: a4 = u8 [a0 + 0xd]\n 13663: a5 = u8 [a0 + 0xc]\n 13666: s1 = u8 [a0 + 0xe]\n 13669: a0 = u8 [a0 + 0xf]\n 13672: a4 = a4 << 0x8\n 13675: a4 = a4 | a5\n 13678: s1 = s1 << 0x10\n 13681: a0 = a0 << 0x18\n 13684: a0 = a0 | s1\n 13687: a0 = a0 | a4\n 13690: a0 = a0 << 0x20\n 13693: a0 = a0 | a1\n 13696: s1 = reverse a0\n 13698: a3 = reverse a3\n 13700: a4 = reverse a2\n 13702: a2 = reverse t0\n 13704: a0 = a2 | a4\n 13707: a1 = a3 | s1\n 13710: a1 = a1 | a0\n 13713: a1 = a1 >> 0x20\n 13716: a0 = a0 | s1\n 13719: a0 = a0 << 0x20\n 13722: a0 = a0 | a1\n 13725: jump @204 if a0 != 0\n      : @202 (gas: 7)\n 13729: i32 a0 = a3 + 0\n 13731: a1 = 0x20\n 13734: u64 [sp] = a0\n 13736: u64 [sp + 0x10] = a3\n 13739: u64 [sp + 0x18] = a2\n 13742: u64 [sp + 0x8] = a4\n 13745: ra = 196, jump @0\n      : @203 [@dyn 98] (gas: 77)\n 13751: a1 = u64 [sp + 0x40]\n 13754: a1 = reverse a1\n 13756: a2 = u64 [sp + 0x48]\n 13759: a2 = reverse a2\n 13761: a3 = u64 [sp + 0x50]\n 13764: a3 = reverse a3\n 13766: a4 = u64 [sp + 0x58]\n 13769: a4 = reverse a4\n 13771: a5 = a4 >> 0x38\n 13774: u8 [a0 + 0x1f] = a5\n 13777: a5 = a4 >> 0x30\n 13780: u8 [a0 + 0x1e] = a5\n 13783: a5 = a4 >> 0x28\n 13786: u8 [a0 + 0x1d] = a5\n 13789: a5 = a4 >> 0x20\n 13792: u8 [a0 + 0x1c] = a5\n 13795: a5 = a4 >> 0x18\n 13798: u8 [a0 + 0x1b] = a5\n 13801: a5 = a4 >> 0x10\n 13804: u8 [a0 + 0x1a] = a5\n 13807: a5 = a4 >> 0x8\n 13810: u8 [a0 + 0x19] = a5\n 13813: u8 [a0 + 0x18] = a4\n 13816: u8 [a0 + 0x10] = a3\n 13819: a4 = a3 >> 0x38\n 13822: u8 [a0 + 0x17] = a4\n 13825: a4 = a3 >> 0x30\n 13828: u8 [a0 + 0x16] = a4\n 13831: a4 = a3 >> 0x28\n 13834: u8 [a0 + 0x15] = a4\n 13837: a4 = a3 >> 0x20\n 13840: u8 [a0 + 0x14] = a4\n 13843: a4 = a3 >> 0x18\n 13846: u8 [a0 + 0x13] = a4\n 13849: a4 = a3 >> 0x10\n 13852: u8 [a0 + 0x12] = a4\n 13855: a3 = a3 >> 0x8\n 13858: u8 [a0 + 0x11] = a3\n 13861: u8 [a0 + 0x8] = a2\n 13864: a3 = a2 >> 0x38\n 13867: u8 [a0 + 0xf] = a3\n 13870: a3 = a2 >> 0x30\n 13873: u8 [a0 + 0xe] = a3\n 13876: a3 = a2 >> 0x28\n 13879: u8 [a0 + 0xd] = a3\n 13882: a3 = a2 >> 0x20\n 13885: u8 [a0 + 0xc] = a3\n 13888: a3 = a2 >> 0x18\n 13891: u8 [a0 + 0xb] = a3\n 13894: a3 = a2 >> 0x10\n 13897: u8 [a0 + 0xa] = a3\n 13900: a2 = a2 >> 0x8\n 13903: u8 [a0 + 0x9] = a2\n 13906: u8 [a0] = a1\n 13908: a2 = a1 >> 0x38\n 13911: u8 [a0 + 0x7] = a2\n 13914: a2 = a1 >> 0x30\n 13917: u8 [a0 + 0x6] = a2\n 13920: a2 = a1 >> 0x28\n 13923: u8 [a0 + 0x5] = a2\n 13926: a2 = a1 >> 0x20\n 13929: u8 [a0 + 0x4] = a2\n 13932: a2 = a1 >> 0x18\n 13935: u8 [a0 + 0x3] = a2\n 13938: a2 = a1 >> 0x10\n 13941: u8 [a0 + 0x2] = a2\n 13944: a1 = a1 >> 0x8\n 13947: a2 = u64 [sp + 0x8]\n 13950: a2 = a2 | s1\n 13953: a3 = 0xffffffe0\n 13963: a4 = u64 [sp + 0x10]\n 13966: a3 = a4 <u a3\n 13969: a4 = u64 [sp + 0x18]\n 13972: a3 = 0 if a4 != 0\n 13974: a3 = 0 if a2 != 0\n 13976: u8 [a0 + 0x1] = a1\n 13979: jump @207 if a3 != 0\n      : @204 (gas: 1)\n 13982: trap\n      : @205 (gas: 3)\n 13983: a0 = 0\n 13985: a1 = 0\n 13987: ra = 198, jump @0\n      : @206 [@dyn 99] (gas: 5)\n 13993: i32 a1 = a0 + 0\n 13995: a0 = 0x1\n 13998: a2 = 0\n 14000: ecalli 6 // 'seal_return'\n 14002: fallthrough\n      : @207 (gas: 4)\n 14003: s1 = u64 [sp]\n 14005: i32 a0 = s1 + 0x20\n 14008: a1 = 0x20\n 14011: ra = 200, jump @0\n      : @208 [@dyn 100] (gas: 71)\n 14017: a1 = u64 [sp + 0x20]\n 14020: a1 = reverse a1\n 14022: a2 = u64 [sp + 0x28]\n 14025: a2 = reverse a2\n 14027: a3 = u64 [sp + 0x30]\n 14030: a3 = reverse a3\n 14032: a4 = u64 [sp + 0x38]\n 14035: a4 = reverse a4\n 14037: u8 [a0 + 0x18] = a4\n 14040: a5 = a4 >> 0x38\n 14043: u8 [a0 + 0x1f] = a5\n 14046: a5 = a4 >> 0x30\n 14049: u8 [a0 + 0x1e] = a5\n 14052: a5 = a4 >> 0x28\n 14055: u8 [a0 + 0x1d] = a5\n 14058: a5 = a4 >> 0x20\n 14061: u8 [a0 + 0x1c] = a5\n 14064: a5 = a4 >> 0x18\n 14067: u8 [a0 + 0x1b] = a5\n 14070: a5 = a4 >> 0x10\n 14073: u8 [a0 + 0x1a] = a5\n 14076: a4 = a4 >> 0x8\n 14079: u8 [a0 + 0x19] = a4\n 14082: u8 [a0 + 0x10] = a3\n 14085: a4 = a3 >> 0x38\n 14088: u8 [a0 + 0x17] = a4\n 14091: a4 = a3 >> 0x30\n 14094: u8 [a0 + 0x16] = a4\n 14097: a4 = a3 >> 0x28\n 14100: u8 [a0 + 0x15] = a4\n 14103: a4 = a3 >> 0x20\n 14106: u8 [a0 + 0x14] = a4\n 14109: a4 = a3 >> 0x18\n 14112: u8 [a0 + 0x13] = a4\n 14115: a4 = a3 >> 0x10\n 14118: u8 [a0 + 0x12] = a4\n 14121: a3 = a3 >> 0x8\n 14124: u8 [a0 + 0x11] = a3\n 14127: u8 [a0 + 0x8] = a2\n 14130: a3 = a2 >> 0x38\n 14133: u8 [a0 + 0xf] = a3\n 14136: a3 = a2 >> 0x30\n 14139: u8 [a0 + 0xe] = a3\n 14142: a3 = a2 >> 0x28\n 14145: u8 [a0 + 0xd] = a3\n 14148: a3 = a2 >> 0x20\n 14151: u8 [a0 + 0xc] = a3\n 14154: a3 = a2 >> 0x18\n 14157: u8 [a0 + 0xb] = a3\n 14160: a3 = a2 >> 0x10\n 14163: u8 [a0 + 0xa] = a3\n 14166: a2 = a2 >> 0x8\n 14169: u8 [a0 + 0x9] = a2\n 14172: u8 [a0] = a1\n 14174: a2 = a1 >> 0x38\n 14177: u8 [a0 + 0x7] = a2\n 14180: a2 = a1 >> 0x30\n 14183: u8 [a0 + 0x6] = a2\n 14186: a2 = a1 >> 0x28\n 14189: u8 [a0 + 0x5] = a2\n 14192: a2 = a1 >> 0x20\n 14195: u8 [a0 + 0x4] = a2\n 14198: a2 = a1 >> 0x18\n 14201: u8 [a0 + 0x3] = a2\n 14204: a2 = a1 >> 0x10\n 14207: u8 [a0 + 0x2] = a2\n 14210: a1 = a1 >> 0x8\n 14213: u8 [a0 + 0x1] = a1\n 14216: a1 = 0x40\n 14219: a0 = s1\n 14221: ra = 202, jump @0\n      : @209 [@dyn 101] (gas: 6)\n 14227: i32 a1 = a0 + 0\n 14229: a2 = 0x40\n 14232: a0 = 0\n 14234: ra = 0xcc\n 14238: ecalli 6 // 'seal_return'\n 14240: fallthrough\n      : @210 [@dyn 102] (gas: 19)\n 14241: t0 = u64 [a0 + 0x18]\n 14244: t1 = u64 [a1 + 0x18]\n 14247: a4 = u64 [a0 + 0x10]\n 14250: a5 = u64 [a0 + 0x8]\n 14253: a2 = u64 [a1 + 0x8]\n 14256: t2 = u64 [a0]\n 14258: a3 = u64 [a1]\n 14260: a1 = u64 [a1 + 0x10]\n 14263: a0 = a2 ^ a5\n 14266: a2 = a2 <u a5\n 14269: a3 = a3 <u t2\n 14272: a3 = a2 if a0 != 0\n 14275: a0 = a1 - a4\n 14278: a0 = a0 <u a3\n 14281: a1 = a1 <u a4\n 14284: a2 = t1 - t0\n 14287: a2 = a2 - a1\n 14290: a2 = a2 - a0\n 14293: jump @212 if a2 <s 0\n      : @211 (gas: 1)\n 14296: ret\n      : @212 (gas: 5)\n 14298: sp = sp + 0xfffffffffffffff8\n 14301: u64 [sp] = ra\n 14303: a0 = 0\n 14305: a1 = 0\n 14307: ra = 206, jump @0\n      : @213 [@dyn 103] (gas: 6)\n 14313: i32 a1 = a0 + 0\n 14315: a0 = 0x1\n 14318: a2 = 0\n 14320: ra = 0xd0\n 14324: ecalli 6 // 'seal_return'\n 14326: fallthrough\n      : @214 [@dyn 104] (gas: 236)\n 14327: sp = sp + 0xffffffffffffffa0\n 14330: u64 [sp + 0x58] = ra\n 14333: u64 [sp + 0x50] = s0\n 14336: u64 [sp + 0x48] = s1\n 14339: u64 [sp] = a0\n 14341: t0 = u64 [a1]\n 14343: t1 = u64 [a2]\n 14345: a0 = u64 [a2 + 0x8]\n 14348: a3 = u64 [a2 + 0x10]\n 14351: a4 = u64 [a1 + 0x18]\n 14354: s0 = u64 [a1 + 0x10]\n 14357: a2 = u64 [a2 + 0x18]\n 14360: a1 = u64 [a1 + 0x8]\n 14363: t2 = a4 >u 0\n 14365: s1 = s0 >u 0\n 14367: s1 = t2 if a4 != 0\n 14370: ra = a1 >u 0\n 14372: a5 = t0 <u 0x100\n 14376: t2 = a5 ^ 0x1\n 14379: t2 = ra if a1 != 0\n 14382: a4 = a4 | s0\n 14385: t2 = s1 if a4 != 0\n 14388: u8 [sp + 71] = 0\n 14391: u8 [sp + 70] = 0\n 14394: u8 [sp + 69] = 0\n 14397: u8 [sp + 68] = 0\n 14400: u8 [sp + 67] = 0\n 14403: u8 [sp + 66] = 0\n 14406: u8 [sp + 65] = 0\n 14409: u8 [sp + 64] = 0\n 14412: u8 [sp + 63] = 0\n 14415: u8 [sp + 62] = 0\n 14418: u8 [sp + 61] = 0\n 14421: u8 [sp + 60] = 0\n 14424: u8 [sp + 59] = 0\n 14427: u8 [sp + 58] = 0\n 14430: u8 [sp + 57] = 0\n 14433: u8 [sp + 56] = 0\n 14436: u8 [sp + 55] = 0\n 14439: u8 [sp + 54] = 0\n 14442: u8 [sp + 53] = 0\n 14445: u8 [sp + 52] = 0\n 14448: u8 [sp + 51] = 0\n 14451: u8 [sp + 50] = 0\n 14454: u8 [sp + 49] = 0\n 14457: u8 [sp + 48] = 0\n 14460: u8 [sp + 47] = 0\n 14463: u8 [sp + 46] = 0\n 14466: u8 [sp + 45] = 0\n 14469: u8 [sp + 44] = 0\n 14472: u8 [sp + 43] = 0\n 14475: u8 [sp + 42] = 0\n 14478: u8 [sp + 41] = 0\n 14481: u8 [sp + 40] = 0\n 14484: u8 [sp + 0x20] = a2\n 14487: u8 [sp + 0x18] = a3\n 14490: u8 [sp + 0x10] = a0\n 14493: u8 [sp + 0x8] = t1\n 14496: a1 = a2 >> 0x38\n 14499: u8 [sp + 0x27] = a1\n 14502: a1 = a2 >> 0x30\n 14505: u8 [sp + 0x26] = a1\n 14508: a1 = a2 >> 0x28\n 14511: u8 [sp + 0x25] = a1\n 14514: a1 = a2 >> 0x20\n 14517: u8 [sp + 0x24] = a1\n 14520: a1 = a2 >> 0x18\n 14523: u8 [sp + 0x23] = a1\n 14526: a1 = a2 >> 0x10\n 14529: u8 [sp + 0x22] = a1\n 14532: a2 = a2 >> 0x8\n 14535: u8 [sp + 0x21] = a2\n 14538: a1 = a3 >> 0x38\n 14541: u8 [sp + 0x1f] = a1\n 14544: a1 = a3 >> 0x30\n 14547: u8 [sp + 0x1e] = a1\n 14550: a1 = a3 >> 0x28\n 14553: u8 [sp + 0x1d] = a1\n 14556: a1 = a3 >> 0x20\n 14559: u8 [sp + 0x1c] = a1\n 14562: a1 = a3 >> 0x18\n 14565: u8 [sp + 0x1b] = a1\n 14568: a1 = a3 >> 0x10\n 14571: u8 [sp + 0x1a] = a1\n 14574: a3 = a3 >> 0x8\n 14577: u8 [sp + 0x19] = a3\n 14580: a1 = a0 >> 0x38\n 14583: u8 [sp + 0x17] = a1\n 14586: a1 = a0 >> 0x30\n 14589: u8 [sp + 0x16] = a1\n 14592: a1 = a0 >> 0x28\n 14595: u8 [sp + 0x15] = a1\n 14598: a1 = a0 >> 0x20\n 14601: u8 [sp + 0x14] = a1\n 14604: a1 = a0 >> 0x18\n 14607: u8 [sp + 0x13] = a1\n 14610: a1 = a0 >> 0x10\n 14613: u8 [sp + 0x12] = a1\n 14616: a0 = a0 >> 0x8\n 14619: u8 [sp + 0x11] = a0\n 14622: a0 = t1 >> 0x38\n 14625: u8 [sp + 0xf] = a0\n 14628: a0 = t1 >> 0x30\n 14631: u8 [sp + 0xe] = a0\n 14634: a0 = t1 >> 0x28\n 14637: u8 [sp + 0xd] = a0\n 14640: a0 = t1 >> 0x20\n 14643: u8 [sp + 0xc] = a0\n 14646: a0 = t1 >> 0x18\n 14649: u8 [sp + 0xb] = a0\n 14652: a0 = t1 >> 0x10\n 14655: u8 [sp + 0xa] = a0\n 14658: a0 = t1 >> 0x8\n 14661: u8 [sp + 0x9] = a0\n 14664: a0 = t0 << 0x38\n 14667: a0 = a0 >> 0x3b\n 14670: a2 = sp + 0x8\n 14673: a2 = a2 + a0\n 14676: a0 = u8 [a2 + 0x11]\n 14679: a1 = u8 [a2 + 0x10]\n 14682: a3 = u8 [a2 + 0x12]\n 14685: a4 = u8 [a2 + 0x13]\n 14688: a0 = a0 << 0x8\n 14691: a0 = a0 | a1\n 14694: a3 = a3 << 0x10\n 14697: a4 = a4 << 0x18\n 14700: a3 = a3 | a4\n 14703: a0 = a0 | a3\n 14706: a1 = u8 [a2 + 0x15]\n 14709: a3 = u8 [a2 + 0x14]\n 14712: a4 = u8 [a2 + 0x16]\n 14715: a5 = u8 [a2 + 0x17]\n 14718: a1 = a1 << 0x8\n 14721: a1 = a1 | a3\n 14724: a4 = a4 << 0x10\n 14727: a5 = a5 << 0x18\n 14730: a4 = a4 | a5\n 14733: a1 = a1 | a4\n 14736: a1 = a1 << 0x20\n 14739: ra = a1 | a0\n 14742: a3 = t0 & 0x7\n 14745: a1 = ra >> a3\n 14748: a0 = u8 [a2 + 0x19]\n 14751: a4 = u8 [a2 + 0x18]\n 14754: s1 = u8 [a2 + 0x1a]\n 14757: s0 = u8 [a2 + 0x1b]\n 14760: a0 = a0 << 0x8\n 14763: a0 = a0 | a4\n 14766: s1 = s1 << 0x10\n 14769: s0 = s0 << 0x18\n 14772: s0 = s0 | s1\n 14775: a0 = a0 | s0\n 14778: a4 = u8 [a2 + 0x1d]\n 14781: s1 = u8 [a2 + 0x1c]\n 14784: s0 = u8 [a2 + 0x1e]\n 14787: a5 = u8 [a2 + 0x1f]\n 14790: a4 = a4 << 0x8\n 14793: a4 = a4 | s1\n 14796: s0 = s0 << 0x10\n 14799: a5 = a5 << 0x18\n 14802: a5 = a5 | s0\n 14805: a4 = a4 | a5\n 14808: a4 = a4 << 0x20\n 14811: t0 = a4 | a0\n 14814: a0 = t0 << 0x1\n 14817: t1 = a3 ^ 0x3f\n 14820: a4 = a0 << t1\n 14823: a4 = a4 | a1\n 14826: a0 = u8 [a2 + 0x9]\n 14829: a1 = u8 [a2 + 0x8]\n 14832: a5 = u8 [a2 + 0xa]\n 14835: s0 = u8 [a2 + 0xb]\n 14838: a0 = a0 << 0x8\n 14841: a0 = a0 | a1\n 14844: a5 = a5 << 0x10\n 14847: s0 = s0 << 0x18\n 14850: a5 = a5 | s0\n 14853: a0 = a0 | a5\n 14856: a1 = u8 [a2 + 0xd]\n 14859: a5 = u8 [a2 + 0xc]\n 14862: s0 = u8 [a2 + 0xe]\n 14865: s1 = u8 [a2 + 0xf]\n 14868: a1 = a1 << 0x8\n 14871: a1 = a1 | a5\n 14874: s0 = s0 << 0x10\n 14877: s1 = s1 << 0x18\n 14880: s0 = s0 | s1\n 14883: a1 = a1 | s0\n 14886: a1 = a1 << 0x20\n 14889: a1 = a1 | a0\n 14892: a0 = a1 >> a3\n 14895: ra = ra << 0x1\n 14898: a5 = a3 ^ 0xffffffffffffffff\n 14901: a5 = ra << a5\n 14904: ra = a0 | a5\n 14907: a0 = u8 [a2 + 0x1]\n 14910: s0 = u8 [a2]\n 14912: s1 = u8 [a2 + 0x2]\n 14915: a5 = u8 [a2 + 0x3]\n 14918: a0 = a0 << 0x8\n 14921: a0 = a0 | s0\n 14924: s1 = s1 << 0x10\n 14927: a5 = a5 << 0x18\n 14930: a5 = a5 | s1\n 14933: a0 = a0 | a5\n 14936: a5 = u8 [a2 + 0x5]\n 14939: s0 = u8 [a2 + 0x4]\n 14942: s1 = u8 [a2 + 0x6]\n 14945: a2 = u8 [a2 + 0x7]\n 14948: a5 = a5 << 0x8\n 14951: a5 = a5 | s0\n 14954: s1 = s1 << 0x10\n 14957: a2 = a2 << 0x18\n 14960: a2 = a2 | s1\n 14963: a2 = a2 | a5\n 14966: a2 = a2 << 0x20\n 14969: a0 = a0 | a2\n 14972: a0 = a0 >> a3\n 14975: a1 = a1 << 0x1\n 14978: a1 = a1 << t1\n 14981: a0 = a0 | a1\n 14984: a1 = t0 >> a3\n 14987: a0 = 0 if t2 != 0\n 14989: ra = 0 if t2 != 0\n 14991: a4 = 0 if t2 != 0\n 14993: a1 = 0 if t2 != 0\n 14995: a2 = u64 [sp]\n 14997: u64 [a2 + 0x18] = a1\n 15000: u64 [a2 + 0x10] = a4\n 15003: u64 [a2 + 0x8] = ra\n 15006: u64 [a2] = a0\n 15008: ra = u64 [sp + 0x58]\n 15011: s0 = u64 [sp + 0x50]\n 15014: s1 = u64 [sp + 0x48]\n 15017: sp = sp + 0x60\n 15020: ret\n      : @215 (gas: 8)\n 15022: a0 = u64 [sp + 0x30]\n 15025: a1 = u64 [sp + 0x38]\n 15028: a2 = u64 [sp + 0x28]\n 15031: a3 = u64 [sp + 0x20]\n 15034: a1 = a1 | a2\n 15037: a0 = a0 | a3\n 15040: a0 = a0 | a1\n 15043: jump @220 if a0 != 0\n      : @216 (gas: 2)\n 15047: a0 = i32 [0x20004]\n 15052: jump @220 if a0 <=u 3\n      : @217 (gas: 24)\n 15057: u64 [sp + 88] = 0\n 15060: u64 [sp + 80] = 0\n 15063: u64 [sp + 72] = 0\n 15066: u64 [sp + 64] = 0\n 15069: u64 [sp + 120] = 0\n 15072: u64 [sp + 112] = 0\n 15075: u64 [sp + 104] = 0\n 15078: u64 [sp + 96] = 0\n 15081: u32 [sp + 128] = 0x20\n 15086: i32 a1 = sp + 0x40\n 15089: i32 a3 = sp + 0x60\n 15092: i32 a4 = sp + 0x80\n 15096: a2 = 0xffffffffffffffff\n 15099: a0 = 0\n 15101: ecalli 4 // 'get_storage'\n 15103: a0 = u64 [sp + 0x70]\n 15106: u64 [sp + 0x8] = a0\n 15109: a0 = u64 [sp + 0x68]\n 15112: u64 [sp + 0x10] = a0\n 15115: a0 = u64 [sp + 0x60]\n 15118: u64 [sp + 0x18] = a0\n 15121: a0 = 0x40\n 15124: a1 = 0x20\n 15127: ra = 210, jump @0\n      : @218 [@dyn 105] (gas: 100)\n 15133: a1 = u8 [a0 + 0x11]\n 15136: a2 = u8 [a0 + 0x10]\n 15139: a3 = u8 [a0 + 0x12]\n 15142: a4 = u8 [a0 + 0x13]\n 15145: a1 = a1 << 0x8\n 15148: a1 = a1 | a2\n 15151: a3 = a3 << 0x10\n 15154: a4 = a4 << 0x18\n 15157: a3 = a3 | a4\n 15160: a1 = a1 | a3\n 15163: a2 = u8 [a0 + 0x15]\n 15166: a3 = u8 [a0 + 0x14]\n 15169: a4 = u8 [a0 + 0x16]\n 15172: a5 = u8 [a0 + 0x17]\n 15175: a2 = a2 << 0x8\n 15178: a2 = a2 | a3\n 15181: a4 = a4 << 0x10\n 15184: a5 = a5 << 0x18\n 15187: a4 = a4 | a5\n 15190: a2 = a2 | a4\n 15193: a2 = a2 << 0x20\n 15196: t0 = a2 | a1\n 15199: a2 = u8 [a0 + 0x1]\n 15202: a3 = u8 [a0]\n 15204: a4 = u8 [a0 + 0x2]\n 15207: a5 = u8 [a0 + 0x3]\n 15210: a2 = a2 << 0x8\n 15213: a2 = a2 | a3\n 15216: a4 = a4 << 0x10\n 15219: a5 = a5 << 0x18\n 15222: a4 = a4 | a5\n 15225: a2 = a2 | a4\n 15228: a3 = u8 [a0 + 0x5]\n 15231: a4 = u8 [a0 + 0x4]\n 15234: a5 = u8 [a0 + 0x6]\n 15237: s1 = u8 [a0 + 0x7]\n 15240: a3 = a3 << 0x8\n 15243: a3 = a3 | a4\n 15246: a5 = a5 << 0x10\n 15249: s1 = s1 << 0x18\n 15252: a5 = a5 | s1\n 15255: a3 = a3 | a5\n 15258: a3 = a3 << 0x20\n 15261: a2 = a2 | a3\n 15264: a3 = u8 [a0 + 0x19]\n 15267: a4 = u8 [a0 + 0x18]\n 15270: a5 = u8 [a0 + 0x1a]\n 15273: s1 = u8 [a0 + 0x1b]\n 15276: a3 = a3 << 0x8\n 15279: a3 = a3 | a4\n 15282: a5 = a5 << 0x10\n 15285: s1 = s1 << 0x18\n 15288: a5 = a5 | s1\n 15291: a3 = a3 | a5\n 15294: a4 = u8 [a0 + 0x1d]\n 15297: a5 = u8 [a0 + 0x1c]\n 15300: s1 = u8 [a0 + 0x1e]\n 15303: a1 = u8 [a0 + 0x1f]\n 15306: a4 = a4 << 0x8\n 15309: a4 = a4 | a5\n 15312: s1 = s1 << 0x10\n 15315: a1 = a1 << 0x18\n 15318: a1 = a1 | s1\n 15321: a1 = a1 | a4\n 15324: a1 = a1 << 0x20\n 15327: a3 = a3 | a1\n 15330: a1 = u8 [a0 + 0x9]\n 15333: a4 = u8 [a0 + 0x8]\n 15336: a5 = u8 [a0 + 0xa]\n 15339: s1 = u8 [a0 + 0xb]\n 15342: a1 = a1 << 0x8\n 15345: a1 = a1 | a4\n 15348: a5 = a5 << 0x10\n 15351: s1 = s1 << 0x18\n 15354: a5 = a5 | s1\n 15357: a1 = a1 | a5\n 15360: a4 = u8 [a0 + 0xd]\n 15363: a5 = u8 [a0 + 0xc]\n 15366: s1 = u8 [a0 + 0xe]\n 15369: a0 = u8 [a0 + 0xf]\n 15372: a4 = a4 << 0x8\n 15375: a4 = a4 | a5\n 15378: s1 = s1 << 0x10\n 15381: a0 = a0 << 0x18\n 15384: a0 = a0 | s1\n 15387: a0 = a0 | a4\n 15390: a0 = a0 << 0x20\n 15393: a0 = a0 | a1\n 15396: a1 = reverse a0\n 15398: a0 = reverse a3\n 15400: a2 = reverse a2\n 15402: a3 = reverse t0\n 15404: a2 = a2 | a3\n 15407: a3 = a0 | a1\n 15410: a3 = a3 | a2\n 15413: a3 = a3 >> 0x20\n 15416: a1 = a1 | a2\n 15419: a1 = a1 << 0x20\n 15422: a1 = a1 | a3\n 15425: jump @222 if a1 == 0\n      : @219 (gas: 1)\n 15428: trap\n      : @220 (gas: 3)\n 15429: a0 = 0\n 15431: a1 = 0\n 15433: ra = 212, jump @0\n      : @221 [@dyn 106] (gas: 5)\n 15439: i32 a1 = a0 + 0\n 15441: a0 = 0x1\n 15444: a2 = 0\n 15446: ecalli 6 // 'seal_return'\n 15448: fallthrough\n      : @222 (gas: 7)\n 15449: a1 = u64 [sp + 0x8]\n 15452: a1 = a1 << 0x20\n 15455: s1 = a1 >> 0x20\n 15458: i32 a0 = a0 + 0\n 15460: u64 [sp + 0x8] = a0\n 15463: a1 = 0x20\n 15466: ra = 214, jump @0\n      : @223 [@dyn 107] (gas: 58)\n 15472: a1 = reverse s1\n 15474: a2 = u64 [sp + 0x10]\n 15477: a2 = reverse a2\n 15479: a3 = u64 [sp + 0x18]\n 15482: a3 = reverse a3\n 15484: a4 = a3 >> 0x38\n 15487: u8 [a0 + 0x1f] = a4\n 15490: a4 = a3 >> 0x30\n 15493: u8 [a0 + 0x1e] = a4\n 15496: a4 = a3 >> 0x28\n 15499: u8 [a0 + 0x1d] = a4\n 15502: a4 = a3 >> 0x20\n 15505: u8 [a0 + 0x1c] = a4\n 15508: a4 = a3 >> 0x18\n 15511: u8 [a0 + 0x1b] = a4\n 15514: a4 = a3 >> 0x10\n 15517: u8 [a0 + 0x1a] = a4\n 15520: a4 = a3 >> 0x8\n 15523: u8 [a0 + 0x19] = a4\n 15526: u8 [a0 + 0x18] = a3\n 15529: u8 [a0 + 0x10] = a2\n 15532: u8 [a0 + 11] = 0\n 15535: u8 [a0 + 10] = 0\n 15538: u8 [a0 + 9] = 0\n 15541: u8 [a0 + 7] = 0\n 15544: u8 [a0 + 6] = 0\n 15547: u8 [a0 + 5] = 0\n 15550: u8 [a0 + 4] = 0\n 15553: u8 [a0 + 3] = 0\n 15556: u8 [a0 + 2] = 0\n 15559: u8 [a0 + 1] = 0\n 15562: u8 [a0 + 0] = 0\n 15564: a3 = a2 >> 0x38\n 15567: u8 [a0 + 0x17] = a3\n 15570: a3 = a2 >> 0x30\n 15573: u8 [a0 + 0x16] = a3\n 15576: a3 = a2 >> 0x28\n 15579: u8 [a0 + 0x15] = a3\n 15582: a3 = a2 >> 0x20\n 15585: u8 [a0 + 0x14] = a3\n 15588: a3 = a2 >> 0x18\n 15591: u8 [a0 + 0x13] = a3\n 15594: a3 = a2 >> 0x10\n 15597: u8 [a0 + 0x12] = a3\n 15600: a2 = a2 >> 0x8\n 15603: u8 [a0 + 0x11] = a2\n 15606: u8 [a0 + 0x8] = a1\n 15609: a2 = a1 >> 0x38\n 15612: u8 [a0 + 0xf] = a2\n 15615: a2 = a1 >> 0x30\n 15618: u8 [a0 + 0xe] = a2\n 15621: a2 = a1 >> 0x28\n 15624: u8 [a0 + 0xd] = a2\n 15627: a1 = a1 >> 0x20\n 15630: u8 [a0 + 0xc] = a1\n 15633: a1 = 0x20\n 15636: a0 = u64 [sp + 0x8]\n 15639: ra = 216, jump @0\n      : @224 [@dyn 108] (gas: 6)\n 15645: i32 a1 = a0 + 0\n 15647: a2 = 0x20\n 15650: a0 = 0\n 15652: ra = 0xda\n 15656: ecalli 6 // 'seal_return'\n 15658: fallthrough\n      : @225 [@dyn 109] (gas: 10)\n 15659: a1 = u64 [a0 + 0x10]\n 15662: a0 = u64 [a0 + 0x18]\n 15665: a2 = 0x100000000\n 15675: a2 = a2 ^ a1\n 15678: a2 = a2 | a0\n 15681: a1 = a1 >> 0x20\n 15684: a1 = a1 <u 0x1\n 15687: a1 = 0 if a0 != 0\n 15689: a1 = 0 if a2 == 0\n 15691: jump @227 if a1 == 0\n      : @226 (gas: 1)\n 15694: ret\n      : @227 (gas: 4)\n 15696: sp = sp + 0xfffffffffffffff8\n 15699: u64 [sp] = ra\n 15701: a0 = 0\n 15703: ra = 220, jump @0\n      : @228 [@dyn 110] (gas: 6)\n 15709: i32 a1 = a0 + 0\n 15711: a0 = 0x1\n 15714: a2 = 0\n 15716: ra = 0xde\n 15720: ecalli 6 // 'seal_return'\n 15722: fallthrough\n      : @229 [@dyn 111] (gas: 18)\n 15723: sp = sp + 0xffffffffffffffc0\n 15726: u64 [sp + 0x38] = ra\n 15729: u64 [sp + 0x30] = s0\n 15732: u64 [sp + 0x28] = s1\n 15735: s0 = sp + 0x40\n 15738: sp = sp & 0xffffffffffffffe0\n 15741: a2 = u64 [a1 + 0x10]\n 15744: a3 = u64 [a1 + 0x18]\n 15747: a4 = u64 [a1 + 0x8]\n 15750: a1 = u64 [a1]\n 15752: a3 = a3 | a4\n 15755: a4 = a1 | a2\n 15758: a4 = a4 | a3\n 15761: a4 = a4 >> 0x20\n 15764: a2 = a2 | a3\n 15767: a2 = a2 << 0x20\n 15770: a2 = a2 | a4\n 15773: jump @233 if a2 != 0\n      : @230 (gas: 5)\n 15776: s1 = a0\n 15778: i32 a1 = a1 + 0\n 15780: i32 a0 = sp + 0\n 15782: ecalli 1 // 'call_data_load'\n 15784: fallthrough\n      : @231 (gas: 10)\n 15785: a0 = u64 [sp + 0x10]\n 15788: a1 = u64 [sp + 0x18]\n 15791: a2 = 0x100000000\n 15801: a2 = a2 ^ a0\n 15804: a2 = a2 | a1\n 15807: a3 = a0 >> 0x20\n 15810: a3 = a3 <u 0x1\n 15813: a3 = 0 if a1 != 0\n 15815: a3 = 0 if a2 == 0\n 15817: jump @234 if a3 == 0\n      : @232 (gas: 12)\n 15820: a2 = u64 [sp]\n 15822: a3 = u64 [sp + 0x8]\n 15825: u64 [s1] = a2\n 15827: u64 [s1 + 0x8] = a3\n 15830: u64 [s1 + 0x10] = a0\n 15833: u64 [s1 + 0x18] = a1\n 15836: sp = s0 + 0xffffffffffffffc0\n 15839: ra = u64 [sp + 0x38]\n 15842: s0 = u64 [sp + 0x30]\n 15845: s1 = u64 [sp + 0x28]\n 15848: sp = sp + 0x40\n 15851: ret\n      : @233 (gas: 1)\n 15853: trap\n      : @234 (gas: 3)\n 15854: a0 = 0\n 15856: a1 = 0\n 15858: ra = 224, jump @0\n      : @235 [@dyn 112] (gas: 6)\n 15864: i32 a1 = a0 + 0\n 15866: a0 = 0x1\n 15869: a2 = 0\n 15871: ra = 0xe2\n 15875: ecalli 6 // 'seal_return'\n 15877: fallthrough\n      : @236 [@dyn 113] (gas: 52)\n 15878: sp = sp + 0xffffffffffffff80\n 15881: u64 [sp + 0x78] = ra\n 15884: u64 [sp + 0x70] = s0\n 15887: u64 [sp + 0x68] = s1\n 15890: s0 = sp + 0x80\n 15894: sp = sp & 0xffffffffffffffe0\n 15897: t2 = u64 [a1 + 0x10]\n 15900: a5 = u64 [a1 + 0x8]\n 15903: t0 = u64 [a2 + 0x8]\n 15906: s1 = u64 [a1]\n 15908: u64 [sp + 0x10] = s1\n 15911: a4 = u64 [a2]\n 15913: u64 [sp + 0x18] = a4\n 15916: ra = u64 [a2 + 0x10]\n 15919: a3 = t0 ^ a5\n 15922: u64 [sp + 0x38] = a3\n 15925: a3 = t0 <u a5\n 15928: a4 = a4 <u s1\n 15931: t1 = u64 [sp + 0x38]\n 15934: a3 = a4 if t1 == 0\n 15937: t1 = a4\n 15939: a1 = u64 [a1 + 0x18]\n 15942: u64 [sp + 0x38] = a1\n 15945: a1 = u64 [a2 + 0x18]\n 15948: u64 [sp + 0x20] = a1\n 15951: a1 = ra - t2\n 15954: a2 = a1 - a3\n 15957: u64 [sp + 0x28] = a2\n 15960: a2 = a1 <u a3\n 15963: u64 [sp + 0x30] = t2\n 15966: a3 = ra <u t2\n 15969: a1 = u64 [sp + 0x38]\n 15972: a4 = u64 [sp + 0x20]\n 15975: a1 = a4 - a1\n 15978: a1 = a1 - a3\n 15981: t2 = a1 - a2\n 15984: s1 = t0 - a5\n 15987: a2 = s1 - t1\n 15990: t0 = u64 [sp + 0x10]\n 15993: a1 = u64 [sp + 0x18]\n 15996: a3 = a1 - t0\n 15999: a4 = a2 >u 0\n 16001: a3 = a3 <u 0x20\n 16004: a3 = a3 ^ 0x1\n 16007: a3 = a4 if a2 != 0\n 16010: a2 = t2 >s 0\n 16012: a1 = u64 [sp + 0x28]\n 16015: a4 = a1 >u 0\n 16017: a4 = a2 if t2 != 0\n 16020: a1 = a1 | t2\n 16023: a3 = a4 if a1 != 0\n 16026: jump @242 if a3 == 0\n      : @237 (gas: 11)\n 16029: s1 = a0\n 16031: a2 = u64 [sp + 0x30]\n 16034: a0 = t0 | a2\n 16037: a1 = u64 [sp + 0x38]\n 16040: a1 = a1 | a5\n 16043: a0 = a0 | a1\n 16046: a0 = a0 >> 0x20\n 16049: a1 = a1 | a2\n 16052: a1 = a1 << 0x20\n 16055: a0 = a0 | a1\n 16058: jump @241 if a0 != 0\n      : @238 (gas: 4)\n 16061: i32 a1 = t0 + 0\n 16063: i32 a0 = sp + 0x40\n 16066: ecalli 1 // 'call_data_load'\n 16068: fallthrough\n      : @239 (gas: 10)\n 16069: a0 = u64 [sp + 0x50]\n 16072: a1 = u64 [sp + 0x58]\n 16075: a2 = 0x100000000\n 16085: a2 = a2 ^ a0\n 16088: a2 = a2 | a1\n 16091: a3 = a0 >> 0x20\n 16094: a3 = a3 <u 0x1\n 16097: a3 = 0 if a1 != 0\n 16099: a3 = 0 if a2 == 0\n 16101: jump @242 if a3 == 0\n      : @240 (gas: 12)\n 16104: a2 = u64 [sp + 0x48]\n 16107: a3 = u64 [sp + 0x40]\n 16110: u64 [s1 + 0x8] = a2\n 16113: u64 [s1] = a3\n 16115: u64 [s1 + 0x10] = a0\n 16118: u64 [s1 + 0x18] = a1\n 16121: sp = s0 + 0xffffffffffffff80\n 16124: ra = u64 [sp + 0x78]\n 16127: s0 = u64 [sp + 0x70]\n 16130: s1 = u64 [sp + 0x68]\n 16133: sp = sp + 0x80\n 16137: ret\n      : @241 (gas: 1)\n 16139: trap\n      : @242 (gas: 3)\n 16140: a0 = 0\n 16142: a1 = 0\n 16144: ra = 228, jump @0\n      : @243 [@dyn 114] (gas: 6)\n 16150: i32 a1 = a0 + 0\n 16152: a0 = 0x1\n 16155: a2 = 0\n 16157: ra = 0xe6\n 16161: ecalli 6 // 'seal_return'\n 16163: fallthrough\n      : @244 [@dyn 115] (gas: 12)\n 16164: sp = sp + 0xffffffffffffff80\n 16167: u64 [sp + 0x78] = ra\n 16170: u64 [sp + 0x70] = s0\n 16173: s0 = sp + 0x80\n 16177: sp = sp & 0xffffffffffffffe0\n 16180: u64 [sp + 56] = 0\n 16183: u64 [sp + 48] = 0\n 16186: u64 [sp + 40] = 0\n 16189: u64 [sp + 32] = 0\n 16192: i32 a0 = sp + 0x20\n 16195: ecalli 9 // 'value_transferred'\n 16197: fallthrough\n      : @245 (gas: 8)\n 16198: a0 = u64 [sp + 0x30]\n 16201: a1 = u64 [sp + 0x38]\n 16204: a2 = u64 [sp + 0x28]\n 16207: a3 = u64 [sp + 0x20]\n 16210: a1 = a1 | a2\n 16213: a0 = a0 | a3\n 16216: a0 = a0 | a1\n 16219: jump @253 if a0 != 0\n      : @246 (gas: 2)\n 16223: a0 = i32 [0x20004]\n 16228: jump @253 if a0 <=u 35\n      : @247 (gas: 4)\n 16233: i32 a0 = sp + 0x40\n 16236: a1 = 0x4\n 16239: ecalli 1 // 'call_data_load'\n 16241: fallthrough\n      : @248 (gas: 10)\n 16242: a0 = u64 [sp + 0x50]\n 16245: a1 = u64 [sp + 0x58]\n 16248: a2 = 0x100000000\n 16258: a2 = a2 ^ a0\n 16261: a2 = a2 | a1\n 16264: a3 = a0 >> 0x20\n 16267: a3 = a3 <u 0x1\n 16270: a3 = 0 if a1 != 0\n 16272: a3 = 0 if a2 == 0\n 16274: jump @253 if a3 == 0\n      : @249 (gas: 40)\n 16278: a2 = u64 [sp + 0x48]\n 16281: a3 = u64 [sp + 0x40]\n 16284: u64 [sp + 0x8] = a2\n 16287: u64 [sp] = a3\n 16289: u64 [sp + 0x10] = a0\n 16292: a0 = sp\n 16294: u64 [sp + 0x18] = a1\n 16297: ra = 0xe8\n 16301: sp = sp + 0xfffffffffffffc20\n 16305: u64 [sp + 0x3d8] = ra\n 16309: u64 [sp + 0x3d0] = s0\n 16313: u64 [sp + 0x3c8] = s1\n 16317: s0 = sp + 0x3e0\n 16321: sp = sp & 0xffffffffffffffe0\n 16324: a1 = u64 [a0 + 0x10]\n 16327: u64 [sp + 0x130] = a1\n 16331: a1 = u64 [a0 + 0x8]\n 16334: u64 [sp + 0x138] = a1\n 16338: a0 = u64 [a0]\n 16340: u64 [sp + 0x50] = a0\n 16343: i32 a0 = sp + 0x300\n 16347: ecalli 3 // 'caller'\n 16349: a0 = u64 [sp + 0x308]\n 16353: a1 = i32 [sp + 0x310]\n 16357: s1 = u64 [sp + 0x300]\n 16361: a0 = reverse a0\n 16363: a2 = a0 << 0x20\n 16366: a1 = reverse a1\n 16368: a1 = a1 >> 0x20\n 16371: a1 = a1 | a2\n 16374: u64 [sp + 0x128] = a1\n 16378: a0 = a0 >> 0x20\n 16381: a1 = reverse s1\n 16383: a1 = a1 << 0x20\n 16386: a0 = a0 | a1\n 16389: u64 [sp + 0x120] = a0\n 16393: a1 = 0x20\n 16396: a0 = 0\n 16398: ra = 0x16e\n 16402: jump @0\n      : @250 [@dyn 116] (gas: 3)\n 16405: a0 = 0x40\n 16408: a1 = 0x20\n 16411: ra = 234, jump @0\n      : @251 [@dyn 117] (gas: 100)\n 16417: a1 = u8 [a0 + 0x11]\n 16420: a2 = u8 [a0 + 0x10]\n 16423: a3 = u8 [a0 + 0x12]\n 16426: a4 = u8 [a0 + 0x13]\n 16429: a1 = a1 << 0x8\n 16432: a1 = a1 | a2\n 16435: a3 = a3 << 0x10\n 16438: a4 = a4 << 0x18\n 16441: a3 = a3 | a4\n 16444: a1 = a1 | a3\n 16447: a2 = u8 [a0 + 0x15]\n 16450: a3 = u8 [a0 + 0x14]\n 16453: a4 = u8 [a0 + 0x16]\n 16456: a5 = u8 [a0 + 0x17]\n 16459: a2 = a2 << 0x8\n 16462: a2 = a2 | a3\n 16465: a4 = a4 << 0x10\n 16468: a5 = a5 << 0x18\n 16471: a4 = a4 | a5\n 16474: a2 = a2 | a4\n 16477: a2 = a2 << 0x20\n 16480: t0 = a2 | a1\n 16483: a2 = u8 [a0 + 0x1]\n 16486: a3 = u8 [a0]\n 16488: a4 = u8 [a0 + 0x2]\n 16491: a5 = u8 [a0 + 0x3]\n 16494: a2 = a2 << 0x8\n 16497: a2 = a2 | a3\n 16500: a4 = a4 << 0x10\n 16503: a5 = a5 << 0x18\n 16506: a4 = a4 | a5\n 16509: a2 = a2 | a4\n 16512: a3 = u8 [a0 + 0x5]\n 16515: a4 = u8 [a0 + 0x4]\n 16518: a5 = u8 [a0 + 0x6]\n 16521: a1 = u8 [a0 + 0x7]\n 16524: a3 = a3 << 0x8\n 16527: a3 = a3 | a4\n 16530: a5 = a5 << 0x10\n 16533: a1 = a1 << 0x18\n 16536: a1 = a1 | a5\n 16539: a1 = a1 | a3\n 16542: a1 = a1 << 0x20\n 16545: t1 = a1 | a2\n 16548: a1 = u8 [a0 + 0x19]\n 16551: a3 = u8 [a0 + 0x18]\n 16554: a4 = u8 [a0 + 0x1a]\n 16557: a5 = u8 [a0 + 0x1b]\n 16560: a1 = a1 << 0x8\n 16563: a1 = a1 | a3\n 16566: a4 = a4 << 0x10\n 16569: a5 = a5 << 0x18\n 16572: a4 = a4 | a5\n 16575: a1 = a1 | a4\n 16578: a3 = u8 [a0 + 0x1d]\n 16581: a4 = u8 [a0 + 0x1c]\n 16584: a5 = u8 [a0 + 0x1e]\n 16587: a2 = u8 [a0 + 0x1f]\n 16590: a3 = a3 << 0x8\n 16593: a3 = a3 | a4\n 16596: a5 = a5 << 0x10\n 16599: a2 = a2 << 0x18\n 16602: a2 = a2 | a5\n 16605: a2 = a2 | a3\n 16608: a2 = a2 << 0x20\n 16611: a3 = a2 | a1\n 16614: a1 = u8 [a0 + 0x9]\n 16617: a2 = u8 [a0 + 0x8]\n 16620: a4 = u8 [a0 + 0xa]\n 16623: a5 = u8 [a0 + 0xb]\n 16626: a1 = a1 << 0x8\n 16629: a1 = a1 | a2\n 16632: a4 = a4 << 0x10\n 16635: a5 = a5 << 0x18\n 16638: a4 = a4 | a5\n 16641: a1 = a1 | a4\n 16644: a2 = u8 [a0 + 0xd]\n 16647: a4 = u8 [a0 + 0xc]\n 16650: a5 = u8 [a0 + 0xe]\n 16653: a0 = u8 [a0 + 0xf]\n 16656: a2 = a2 << 0x8\n 16659: a2 = a2 | a4\n 16662: a5 = a5 << 0x10\n 16665: a0 = a0 << 0x18\n 16668: a0 = a0 | a5\n 16671: a0 = a0 | a2\n 16674: a0 = a0 << 0x20\n 16677: a0 = a0 | a1\n 16680: a1 = reverse a0\n 16682: a0 = reverse a3\n 16684: a2 = reverse t1\n 16686: a3 = reverse t0\n 16688: a2 = a2 | a3\n 16691: a3 = a0 | a1\n 16694: a3 = a3 | a2\n 16697: a3 = a3 >> 0x20\n 16700: a1 = a1 | a2\n 16703: a1 = a1 << 0x20\n 16706: a1 = a1 | a3\n 16709: jump @255 if a1 == 0\n      : @252 (gas: 1)\n 16712: trap\n      : @253 (gas: 3)\n 16713: a0 = 0\n 16715: a1 = 0\n 16717: ra = 236, jump @0\n      : @254 [@dyn 118] (gas: 7)\n 16723: i32 a1 = a0 + 0\n 16725: a0 = 0x1\n 16728: a2 = 0\n 16730: ecalli 6 // 'seal_return'\n 16732: i32 a0 = a0 + 0\n 16734: ra = 0xee\n 16738: jump @0\n      : @255 (gas: 2)\n 16741: i32 a0 = a0 + 0\n 16743: ra = 238, jump @0\n      : @256 [@dyn 119] (gas: 6)\n 16749: i32 a1 = a0 + 0\n 16751: a0 = 0\n 16753: a2 = 0\n 16755: ra = 0xf0\n 16759: ecalli 6 // 'seal_return'\n 16761: fallthrough\n      : @257 [@dyn 120] (gas: 13)\n 16762: sp = sp + 0xffffffffffffff80\n 16765: u64 [sp + 0x78] = ra\n 16768: u64 [sp + 0x70] = s0\n 16771: u64 [sp + 0x68] = s1\n 16774: s0 = sp + 0x80\n 16778: sp = sp & 0xffffffffffffffe0\n 16781: u64 [sp + 88] = 0\n 16784: u64 [sp + 80] = 0\n 16787: u64 [sp + 72] = 0\n 16790: u64 [sp + 64] = 0\n 16793: i32 a0 = sp + 0x40\n 16796: ecalli 9 // 'value_transferred'\n 16798: fallthrough\n      : @258 (gas: 8)\n 16799: a0 = u64 [sp + 0x50]\n 16802: a1 = u64 [sp + 0x58]\n 16805: a2 = u64 [sp + 0x48]\n 16808: a3 = u64 [sp + 0x40]\n 16811: a1 = a1 | a2\n 16814: a0 = a0 | a3\n 16817: a0 = a0 | a1\n 16820: jump @264 if a0 != 0\n      : @259 (gas: 2)\n 16824: a0 = i32 [0x20004]\n 16829: jump @264 if a0 <=u 3\n      : @260 (gas: 2)\n 16834: a0 = sp + 0x20\n 16837: ra = 242, jump @451\n      : @261 [@dyn 121] (gas: 11)\n 16843: a0 = u64 [sp + 0x38]\n 16846: u64 [sp] = a0\n 16848: a0 = u64 [sp + 0x30]\n 16851: u64 [sp + 0x8] = a0\n 16854: a0 = u64 [sp + 0x28]\n 16857: u64 [sp + 0x10] = a0\n 16860: a0 = u64 [sp + 0x20]\n 16863: u64 [sp + 0x18] = a0\n 16866: a0 = 0x40\n 16869: a1 = 0x20\n 16872: ra = 244, jump @0\n      : @262 [@dyn 122] (gas: 100)\n 16878: a1 = u8 [a0 + 0x11]\n 16881: a2 = u8 [a0 + 0x10]\n 16884: a3 = u8 [a0 + 0x12]\n 16887: a4 = u8 [a0 + 0x13]\n 16890: a1 = a1 << 0x8\n 16893: a1 = a1 | a2\n 16896: a3 = a3 << 0x10\n 16899: a4 = a4 << 0x18\n 16902: a3 = a3 | a4\n 16905: a1 = a1 | a3\n 16908: a2 = u8 [a0 + 0x15]\n 16911: a3 = u8 [a0 + 0x14]\n 16914: a4 = u8 [a0 + 0x16]\n 16917: a5 = u8 [a0 + 0x17]\n 16920: a2 = a2 << 0x8\n 16923: a2 = a2 | a3\n 16926: a4 = a4 << 0x10\n 16929: a5 = a5 << 0x18\n 16932: a4 = a4 | a5\n 16935: a2 = a2 | a4\n 16938: a2 = a2 << 0x20\n 16941: t0 = a2 | a1\n 16944: a2 = u8 [a0 + 0x1]\n 16947: a3 = u8 [a0]\n 16949: a4 = u8 [a0 + 0x2]\n 16952: a5 = u8 [a0 + 0x3]\n 16955: a2 = a2 << 0x8\n 16958: a2 = a2 | a3\n 16961: a4 = a4 << 0x10\n 16964: a5 = a5 << 0x18\n 16967: a4 = a4 | a5\n 16970: a2 = a2 | a4\n 16973: a3 = u8 [a0 + 0x5]\n 16976: a4 = u8 [a0 + 0x4]\n 16979: a5 = u8 [a0 + 0x6]\n 16982: s1 = u8 [a0 + 0x7]\n 16985: a3 = a3 << 0x8\n 16988: a3 = a3 | a4\n 16991: a5 = a5 << 0x10\n 16994: s1 = s1 << 0x18\n 16997: a5 = a5 | s1\n 17000: a3 = a3 | a5\n 17003: a3 = a3 << 0x20\n 17006: a2 = a2 | a3\n 17009: a3 = u8 [a0 + 0x19]\n 17012: a4 = u8 [a0 + 0x18]\n 17015: a5 = u8 [a0 + 0x1a]\n 17018: s1 = u8 [a0 + 0x1b]\n 17021: a3 = a3 << 0x8\n 17024: a3 = a3 | a4\n 17027: a5 = a5 << 0x10\n 17030: s1 = s1 << 0x18\n 17033: a5 = a5 | s1\n 17036: a3 = a3 | a5\n 17039: a4 = u8 [a0 + 0x1d]\n 17042: a5 = u8 [a0 + 0x1c]\n 17045: s1 = u8 [a0 + 0x1e]\n 17048: a1 = u8 [a0 + 0x1f]\n 17051: a4 = a4 << 0x8\n 17054: a4 = a4 | a5\n 17057: s1 = s1 << 0x10\n 17060: a1 = a1 << 0x18\n 17063: a1 = a1 | s1\n 17066: a1 = a1 | a4\n 17069: a1 = a1 << 0x20\n 17072: a3 = a3 | a1\n 17075: a1 = u8 [a0 + 0x9]\n 17078: a4 = u8 [a0 + 0x8]\n 17081: a5 = u8 [a0 + 0xa]\n 17084: s1 = u8 [a0 + 0xb]\n 17087: a1 = a1 << 0x8\n 17090: a1 = a1 | a4\n 17093: a5 = a5 << 0x10\n 17096: s1 = s1 << 0x18\n 17099: a5 = a5 | s1\n 17102: a1 = a1 | a5\n 17105: a4 = u8 [a0 + 0xd]\n 17108: a5 = u8 [a0 + 0xc]\n 17111: s1 = u8 [a0 + 0xe]\n 17114: a0 = u8 [a0 + 0xf]\n 17117: a4 = a4 << 0x8\n 17120: a4 = a4 | a5\n 17123: s1 = s1 << 0x10\n 17126: a0 = a0 << 0x18\n 17129: a0 = a0 | s1\n 17132: a0 = a0 | a4\n 17135: a0 = a0 << 0x20\n 17138: a0 = a0 | a1\n 17141: a1 = reverse a0\n 17143: a0 = reverse a3\n 17145: a2 = reverse a2\n 17147: a3 = reverse t0\n 17149: a2 = a2 | a3\n 17152: a3 = a0 | a1\n 17155: a3 = a3 | a2\n 17158: a3 = a3 >> 0x20\n 17161: a1 = a1 | a2\n 17164: a1 = a1 << 0x20\n 17167: a1 = a1 | a3\n 17170: jump @266 if a1 == 0\n      : @263 (gas: 1)\n 17173: trap\n      : @264 (gas: 3)\n 17174: a0 = 0\n 17176: a1 = 0\n 17178: ra = 246, jump @0\n      : @265 [@dyn 123] (gas: 5)\n 17184: i32 a1 = a0 + 0\n 17186: a0 = 0x1\n 17189: a2 = 0\n 17191: ecalli 6 // 'seal_return'\n 17193: fallthrough\n      : @266 (gas: 4)\n 17194: i32 s1 = a0 + 0\n 17196: a1 = 0x20\n 17199: a0 = s1\n 17201: ra = 248, jump @0\n      : @267 [@dyn 124] (gas: 71)\n 17207: a1 = u64 [sp]\n 17209: a1 = reverse a1\n 17211: a2 = u64 [sp + 0x8]\n 17214: a2 = reverse a2\n 17216: a3 = u64 [sp + 0x10]\n 17219: a3 = reverse a3\n 17221: a4 = u64 [sp + 0x18]\n 17224: a4 = reverse a4\n 17226: a5 = a4 >> 0x38\n 17229: u8 [a0 + 0x1f] = a5\n 17232: a5 = a4 >> 0x30\n 17235: u8 [a0 + 0x1e] = a5\n 17238: a5 = a4 >> 0x28\n 17241: u8 [a0 + 0x1d] = a5\n 17244: a5 = a4 >> 0x20\n 17247: u8 [a0 + 0x1c] = a5\n 17250: a5 = a4 >> 0x18\n 17253: u8 [a0 + 0x1b] = a5\n 17256: a5 = a4 >> 0x10\n 17259: u8 [a0 + 0x1a] = a5\n 17262: a5 = a4 >> 0x8\n 17265: u8 [a0 + 0x19] = a5\n 17268: u8 [a0 + 0x18] = a4\n 17271: u8 [a0 + 0x10] = a3\n 17274: a4 = a3 >> 0x38\n 17277: u8 [a0 + 0x17] = a4\n 17280: a4 = a3 >> 0x30\n 17283: u8 [a0 + 0x16] = a4\n 17286: a4 = a3 >> 0x28\n 17289: u8 [a0 + 0x15] = a4\n 17292: a4 = a3 >> 0x20\n 17295: u8 [a0 + 0x14] = a4\n 17298: a4 = a3 >> 0x18\n 17301: u8 [a0 + 0x13] = a4\n 17304: a4 = a3 >> 0x10\n 17307: u8 [a0 + 0x12] = a4\n 17310: a3 = a3 >> 0x8\n 17313: u8 [a0 + 0x11] = a3\n 17316: u8 [a0 + 0x8] = a2\n 17319: a3 = a2 >> 0x38\n 17322: u8 [a0 + 0xf] = a3\n 17325: a3 = a2 >> 0x30\n 17328: u8 [a0 + 0xe] = a3\n 17331: a3 = a2 >> 0x28\n 17334: u8 [a0 + 0xd] = a3\n 17337: a3 = a2 >> 0x20\n 17340: u8 [a0 + 0xc] = a3\n 17343: a3 = a2 >> 0x18\n 17346: u8 [a0 + 0xb] = a3\n 17349: a3 = a2 >> 0x10\n 17352: u8 [a0 + 0xa] = a3\n 17355: a2 = a2 >> 0x8\n 17358: u8 [a0 + 0x9] = a2\n 17361: u8 [a0] = a1\n 17363: a2 = a1 >> 0x38\n 17366: u8 [a0 + 0x7] = a2\n 17369: a2 = a1 >> 0x30\n 17372: u8 [a0 + 0x6] = a2\n 17375: a2 = a1 >> 0x28\n 17378: u8 [a0 + 0x5] = a2\n 17381: a2 = a1 >> 0x20\n 17384: u8 [a0 + 0x4] = a2\n 17387: a2 = a1 >> 0x18\n 17390: u8 [a0 + 0x3] = a2\n 17393: a2 = a1 >> 0x10\n 17396: u8 [a0 + 0x2] = a2\n 17399: a1 = a1 >> 0x8\n 17402: u8 [a0 + 0x1] = a1\n 17405: a1 = 0x20\n 17408: a0 = s1\n 17410: ra = 250, jump @0\n      : @268 [@dyn 125] (gas: 6)\n 17416: i32 a1 = a0 + 0\n 17418: a2 = 0x20\n 17421: a0 = 0\n 17423: ra = 0xfc\n 17427: ecalli 6 // 'seal_return'\n 17429: fallthrough\n      : @269 [@dyn 126] (gas: 12)\n 17430: sp = sp + 0xffffffffffffff80\n 17433: u64 [sp + 0x78] = ra\n 17436: u64 [sp + 0x70] = s0\n 17439: s0 = sp + 0x80\n 17443: sp = sp & 0xffffffffffffffe0\n 17446: u64 [sp + 56] = 0\n 17449: u64 [sp + 48] = 0\n 17452: u64 [sp + 40] = 0\n 17455: u64 [sp + 32] = 0\n 17458: i32 a0 = sp + 0x20\n 17461: ecalli 9 // 'value_transferred'\n 17463: fallthrough\n      : @270 (gas: 8)\n 17464: a0 = u64 [sp + 0x30]\n 17467: a1 = u64 [sp + 0x38]\n 17470: a2 = u64 [sp + 0x28]\n 17473: a3 = u64 [sp + 0x20]\n 17476: a1 = a1 | a2\n 17479: a0 = a0 | a3\n 17482: a0 = a0 | a1\n 17485: jump @278 if a0 != 0\n      : @271 (gas: 2)\n 17489: a0 = i32 [0x20004]\n 17494: jump @278 if a0 <=u 35\n      : @272 (gas: 4)\n 17499: i32 a0 = sp + 0x40\n 17502: a1 = 0x4\n 17505: ecalli 1 // 'call_data_load'\n 17507: fallthrough\n      : @273 (gas: 10)\n 17508: a0 = u64 [sp + 0x50]\n 17511: a1 = u64 [sp + 0x58]\n 17514: a2 = 0x100000000\n 17524: a2 = a2 ^ a0\n 17527: a2 = a2 | a1\n 17530: a3 = a0 >> 0x20\n 17533: a3 = a3 <u 0x1\n 17536: a3 = 0 if a1 != 0\n 17538: a3 = 0 if a2 == 0\n 17540: jump @278 if a3 == 0\n      : @274 (gas: 53)\n 17544: a2 = u64 [sp + 0x48]\n 17547: a3 = u64 [sp + 0x40]\n 17550: u64 [sp + 0x8] = a2\n 17553: u64 [sp] = a3\n 17555: u64 [sp + 0x10] = a0\n 17558: a0 = sp\n 17560: u64 [sp + 0x18] = a1\n 17563: ra = 0xfe\n 17567: sp = sp + 0xfffffffffffffe20\n 17571: u64 [sp + 0x1d8] = ra\n 17575: u64 [sp + 0x1d0] = s0\n 17579: u64 [sp + 0x1c8] = s1\n 17583: s0 = sp + 0x1e0\n 17587: sp = sp & 0xffffffffffffffe0\n 17590: a1 = u64 [a0 + 0x10]\n 17593: u64 [sp + 0x98] = a1\n 17597: a1 = u64 [a0 + 0x8]\n 17600: u64 [sp + 0xa0] = a1\n 17604: a0 = u64 [a0]\n 17606: u64 [sp + 0xa8] = a0\n 17610: i32 a0 = sp + 0x140\n 17614: ecalli 3 // 'caller'\n 17616: a0 = u64 [sp + 0x148]\n 17620: a1 = u64 [sp + 0x140]\n 17624: a2 = i32 [sp + 0x150]\n 17628: a0 = reverse a0\n 17630: a3 = a0 >> 0x20\n 17633: s1 = reverse a1\n 17635: a1 = s1 << 0x20\n 17638: a1 = a1 | a3\n 17641: u64 [sp + 0xb8] = a1\n 17645: a0 = a0 << 0x20\n 17648: a1 = reverse a2\n 17650: a1 = a1 >> 0x20\n 17653: a0 = a0 | a1\n 17656: u64 [sp + 0xb0] = a0\n 17660: s1 = s1 >> 0x20\n 17663: u64 [sp + 408] = 0\n 17667: u64 [sp + 400] = 0\n 17671: u64 [sp + 392] = 0\n 17675: u64 [sp + 384] = 0\n 17679: u64 [sp + 440] = 0\n 17683: u64 [sp + 432] = 0\n 17687: u64 [sp + 424] = 0\n 17691: u64 [sp + 416] = 0\n 17695: u32 [sp + 352] = 0x20\n 17700: i32 a1 = sp + 0x180\n 17704: i32 a3 = sp + 0x1a0\n 17708: i32 a4 = sp + 0x160\n 17712: a2 = 0xffffffffffffffff\n 17715: a0 = 0\n 17717: ecalli 4 // 'get_storage'\n 17719: jump @479\n      : @275 [@dyn 127] (gas: 3)\n 17722: a0 = 0x40\n 17725: a1 = 0x20\n 17728: ra = 256, jump @0\n      : @276 [@dyn 128] (gas: 100)\n 17734: a1 = u8 [a0 + 0x11]\n 17737: a2 = u8 [a0 + 0x10]\n 17740: a3 = u8 [a0 + 0x12]\n 17743: a4 = u8 [a0 + 0x13]\n 17746: a1 = a1 << 0x8\n 17749: a1 = a1 | a2\n 17752: a3 = a3 << 0x10\n 17755: a4 = a4 << 0x18\n 17758: a3 = a3 | a4\n 17761: a1 = a1 | a3\n 17764: a2 = u8 [a0 + 0x15]\n 17767: a3 = u8 [a0 + 0x14]\n 17770: a4 = u8 [a0 + 0x16]\n 17773: a5 = u8 [a0 + 0x17]\n 17776: a2 = a2 << 0x8\n 17779: a2 = a2 | a3\n 17782: a4 = a4 << 0x10\n 17785: a5 = a5 << 0x18\n 17788: a4 = a4 | a5\n 17791: a2 = a2 | a4\n 17794: a2 = a2 << 0x20\n 17797: t0 = a2 | a1\n 17800: a2 = u8 [a0 + 0x1]\n 17803: a3 = u8 [a0]\n 17805: a4 = u8 [a0 + 0x2]\n 17808: a5 = u8 [a0 + 0x3]\n 17811: a2 = a2 << 0x8\n 17814: a2 = a2 | a3\n 17817: a4 = a4 << 0x10\n 17820: a5 = a5 << 0x18\n 17823: a4 = a4 | a5\n 17826: a2 = a2 | a4\n 17829: a3 = u8 [a0 + 0x5]\n 17832: a4 = u8 [a0 + 0x4]\n 17835: a5 = u8 [a0 + 0x6]\n 17838: a1 = u8 [a0 + 0x7]\n 17841: a3 = a3 << 0x8\n 17844: a3 = a3 | a4\n 17847: a5 = a5 << 0x10\n 17850: a1 = a1 << 0x18\n 17853: a1 = a1 | a5\n 17856: a1 = a1 | a3\n 17859: a1 = a1 << 0x20\n 17862: t1 = a1 | a2\n 17865: a1 = u8 [a0 + 0x19]\n 17868: a3 = u8 [a0 + 0x18]\n 17871: a4 = u8 [a0 + 0x1a]\n 17874: a5 = u8 [a0 + 0x1b]\n 17877: a1 = a1 << 0x8\n 17880: a1 = a1 | a3\n 17883: a4 = a4 << 0x10\n 17886: a5 = a5 << 0x18\n 17889: a4 = a4 | a5\n 17892: a1 = a1 | a4\n 17895: a3 = u8 [a0 + 0x1d]\n 17898: a4 = u8 [a0 + 0x1c]\n 17901: a5 = u8 [a0 + 0x1e]\n 17904: a2 = u8 [a0 + 0x1f]\n 17907: a3 = a3 << 0x8\n 17910: a3 = a3 | a4\n 17913: a5 = a5 << 0x10\n 17916: a2 = a2 << 0x18\n 17919: a2 = a2 | a5\n 17922: a2 = a2 | a3\n 17925: a2 = a2 << 0x20\n 17928: a3 = a2 | a1\n 17931: a1 = u8 [a0 + 0x9]\n 17934: a2 = u8 [a0 + 0x8]\n 17937: a4 = u8 [a0 + 0xa]\n 17940: a5 = u8 [a0 + 0xb]\n 17943: a1 = a1 << 0x8\n 17946: a1 = a1 | a2\n 17949: a4 = a4 << 0x10\n 17952: a5 = a5 << 0x18\n 17955: a4 = a4 | a5\n 17958: a1 = a1 | a4\n 17961: a2 = u8 [a0 + 0xd]\n 17964: a4 = u8 [a0 + 0xc]\n 17967: a5 = u8 [a0 + 0xe]\n 17970: a0 = u8 [a0 + 0xf]\n 17973: a2 = a2 << 0x8\n 17976: a2 = a2 | a4\n 17979: a5 = a5 << 0x10\n 17982: a0 = a0 << 0x18\n 17985: a0 = a0 | a5\n 17988: a0 = a0 | a2\n 17991: a0 = a0 << 0x20\n 17994: a0 = a0 | a1\n 17997: a1 = reverse a0\n 17999: a0 = reverse a3\n 18001: a2 = reverse t1\n 18003: a3 = reverse t0\n 18005: a2 = a2 | a3\n 18008: a3 = a0 | a1\n 18011: a3 = a3 | a2\n 18014: a3 = a3 >> 0x20\n 18017: a1 = a1 | a2\n 18020: a1 = a1 << 0x20\n 18023: a1 = a1 | a3\n 18026: jump @280 if a1 == 0\n      : @277 (gas: 1)\n 18029: trap\n      : @278 (gas: 3)\n 18030: a0 = 0\n 18032: a1 = 0\n 18034: ra = 258, jump @0\n      : @279 [@dyn 129] (gas: 7)\n 18040: i32 a1 = a0 + 0\n 18042: a0 = 0x1\n 18045: a2 = 0\n 18047: ecalli 6 // 'seal_return'\n 18049: i32 a0 = a0 + 0\n 18051: ra = 0x104\n 18055: jump @0\n      : @280 (gas: 2)\n 18058: i32 a0 = a0 + 0\n 18060: ra = 260, jump @0\n      : @281 [@dyn 130] (gas: 6)\n 18066: i32 a1 = a0 + 0\n 18068: a0 = 0\n 18070: a2 = 0\n 18072: ra = 0x106\n 18076: ecalli 6 // 'seal_return'\n 18078: fallthrough\n      : @282 [@dyn 131] (gas: 9)\n 18079: a2 = u64 [a1 + 0x18]\n 18082: a3 = u64 [a1 + 0x10]\n 18085: a4 = u64 [a1 + 0x8]\n 18088: a1 = u64 [a1]\n 18090: u64 [a0 + 0x18] = a2\n 18093: u64 [a0 + 0x10] = a3\n 18096: u64 [a0 + 0x8] = a4\n 18099: u64 [a0] = a1\n 18101: ret\n      : @283 [@dyn 132] (gas: 58)\n 18103: a1 = reverse s1\n 18105: a2 = u64 [sp + 0x70]\n 18108: a2 = reverse a2\n 18110: a3 = u64 [sp + 0x78]\n 18113: a3 = reverse a3\n 18115: a4 = a3 >> 0x38\n 18118: u8 [a0 + 0x1f] = a4\n 18121: a4 = a3 >> 0x30\n 18124: u8 [a0 + 0x1e] = a4\n 18127: a4 = a3 >> 0x28\n 18130: u8 [a0 + 0x1d] = a4\n 18133: a4 = a3 >> 0x20\n 18136: u8 [a0 + 0x1c] = a4\n 18139: a4 = a3 >> 0x18\n 18142: u8 [a0 + 0x1b] = a4\n 18145: a4 = a3 >> 0x10\n 18148: u8 [a0 + 0x1a] = a4\n 18151: a4 = a3 >> 0x8\n 18154: u8 [a0 + 0x19] = a4\n 18157: u8 [a0 + 0x18] = a3\n 18160: a3 = a2 >> 0x38\n 18163: u8 [a0 + 0x17] = a3\n 18166: a3 = a2 >> 0x30\n 18169: u8 [a0 + 0x16] = a3\n 18172: a3 = a2 >> 0x28\n 18175: u8 [a0 + 0x15] = a3\n 18178: a3 = a2 >> 0x20\n 18181: u8 [a0 + 0x14] = a3\n 18184: a3 = a2 >> 0x18\n 18187: u8 [a0 + 0x13] = a3\n 18190: a3 = a2 >> 0x10\n 18193: u8 [a0 + 0x12] = a3\n 18196: a3 = a2 >> 0x8\n 18199: u8 [a0 + 0x11] = a3\n 18202: u8 [a0 + 0x10] = a2\n 18205: a2 = a1 >> 0x38\n 18208: u8 [a0 + 0xf] = a2\n 18211: a2 = a1 >> 0x30\n 18214: u8 [a0 + 0xe] = a2\n 18217: a2 = a1 >> 0x28\n 18220: u8 [a0 + 0xd] = a2\n 18223: a2 = a1 >> 0x20\n 18226: u8 [a0 + 0xc] = a2\n 18229: u8 [a0 + 11] = 0\n 18232: u8 [a0 + 10] = 0\n 18235: u8 [a0 + 9] = 0\n 18238: u8 [a0 + 0x8] = a1\n 18241: u8 [a0 + 7] = 0\n 18244: u8 [a0 + 6] = 0\n 18247: u8 [a0 + 5] = 0\n 18250: u8 [a0 + 4] = 0\n 18253: u8 [a0 + 3] = 0\n 18256: u8 [a0 + 2] = 0\n 18259: u8 [a0 + 1] = 0\n 18262: u8 [a0 + 0] = 0\n 18264: a0 = 0x20\n 18267: a1 = 0x20\n 18270: ra = 266, jump @0\n      : @284 [@dyn 133] (gas: 35)\n 18276: u8 [a0 + 31] = 0x1\n 18280: u8 [a0 + 30] = 0\n 18283: u8 [a0 + 29] = 0\n 18286: u8 [a0 + 28] = 0\n 18289: u8 [a0 + 27] = 0\n 18292: u8 [a0 + 26] = 0\n 18295: u8 [a0 + 25] = 0\n 18298: u8 [a0 + 24] = 0\n 18301: u8 [a0 + 23] = 0\n 18304: u8 [a0 + 22] = 0\n 18307: u8 [a0 + 21] = 0\n 18310: u8 [a0 + 20] = 0\n 18313: u8 [a0 + 19] = 0\n 18316: u8 [a0 + 18] = 0\n 18319: u8 [a0 + 17] = 0\n 18322: u8 [a0 + 16] = 0\n 18325: u8 [a0 + 15] = 0\n 18328: u8 [a0 + 14] = 0\n 18331: u8 [a0 + 13] = 0\n 18334: u8 [a0 + 12] = 0\n 18337: u8 [a0 + 11] = 0\n 18340: u8 [a0 + 10] = 0\n 18343: u8 [a0 + 9] = 0\n 18346: u8 [a0 + 8] = 0\n 18349: u8 [a0 + 7] = 0\n 18352: u8 [a0 + 6] = 0\n 18355: u8 [a0 + 5] = 0\n 18358: u8 [a0 + 4] = 0\n 18361: u8 [a0 + 3] = 0\n 18364: u8 [a0 + 2] = 0\n 18367: u8 [a0 + 1] = 0\n 18370: u8 [a0 + 0] = 0\n 18372: a1 = 0x40\n 18375: a0 = 0\n 18377: ra = 268, jump @0\n      : @285 [@dyn 134] (gas: 165)\n 18383: i32 a0 = a0 + 0\n 18385: i32 a2 = sp + 0xa0\n 18389: a1 = 0x40\n 18392: ecalli 5 // 'hash_keccak_256'\n 18394: a0 = u64 [sp + 0xb8]\n 18398: a1 = u64 [sp + 0xb0]\n 18402: a2 = u64 [sp + 0xa8]\n 18406: a3 = u64 [sp + 0xa0]\n 18410: a4 = reverse a0\n 18412: u64 [sp + 0x68] = a4\n 18415: a1 = reverse a1\n 18417: u64 [sp + 0x70] = a1\n 18420: a2 = reverse a2\n 18422: u64 [sp + 0x60] = a2\n 18425: a0 = reverse a3\n 18427: u64 [sp + 0x78] = a0\n 18430: u64 [sp + 0x98] = a0\n 18434: u64 [sp + 0x90] = a2\n 18438: u64 [sp + 0x88] = a1\n 18442: u64 [sp + 0x80] = a4\n 18446: u64 [sp + 184] = 0\n 18450: u64 [sp + 176] = 0\n 18454: u64 [sp + 168] = 0\n 18458: u64 [sp + 160] = 0\n 18462: u32 [sp + 192] = 0x20\n 18467: i32 a1 = sp + 0x80\n 18471: i32 a3 = sp + 0xa0\n 18475: i32 a4 = sp + 0xc0\n 18479: a2 = 0xffffffffffffffff\n 18482: a0 = 0\n 18484: ecalli 4 // 'get_storage'\n 18486: a0 = u64 [sp + 0xa0]\n 18490: u64 [sp + 0x50] = a0\n 18493: a0 = u64 [sp + 0xa8]\n 18497: u64 [sp + 0x48] = a0\n 18500: a0 = u64 [sp + 0xb0]\n 18504: u64 [sp + 0x40] = a0\n 18507: a0 = u64 [sp + 0xb8]\n 18511: u64 [sp + 0x38] = a0\n 18514: s1 = u64 [sp + 0x68]\n 18517: s1 = s1 + 0x1\n 18520: a0 = s1 <u 0x1\n 18523: a1 = u64 [sp + 0x70]\n 18526: a2 = a1 + a0\n 18529: u64 [sp + 0x28] = a2\n 18532: a0 = s1 | a2\n 18535: a0 = a0 <u 0x1\n 18538: a1 = u64 [sp + 0x60]\n 18541: a3 = a1 + a0\n 18544: u64 [sp + 0x20] = a3\n 18547: a0 = a3 <u a1\n 18550: a1 = u64 [sp + 0x78]\n 18553: a0 = a0 + a1\n 18556: u64 [sp + 0x18] = a0\n 18559: u64 [sp + 0x98] = a0\n 18563: u64 [sp + 0x90] = a3\n 18567: u64 [sp + 0x88] = a2\n 18571: u64 [sp + 0x80] = s1\n 18575: u64 [sp + 184] = 0\n 18579: u64 [sp + 176] = 0\n 18583: u64 [sp + 168] = 0\n 18587: u64 [sp + 160] = 0\n 18591: u32 [sp + 192] = 0x20\n 18596: i32 a1 = sp + 0x80\n 18600: i32 a3 = sp + 0xa0\n 18604: i32 a4 = sp + 0xc0\n 18608: a2 = 0xffffffffffffffff\n 18611: a0 = 0\n 18613: ecalli 4 // 'get_storage'\n 18615: a0 = u8 [sp + 0xa0]\n 18619: u64 [sp + 0x30] = a0\n 18622: a0 = u64 [sp + 0x18]\n 18625: u64 [sp + 0x98] = a0\n 18629: a0 = u64 [sp + 0x20]\n 18632: u64 [sp + 0x90] = a0\n 18636: a0 = u64 [sp + 0x28]\n 18639: u64 [sp + 0x88] = a0\n 18643: u64 [sp + 0x80] = s1\n 18647: u64 [sp + 184] = 0\n 18651: u64 [sp + 176] = 0\n 18655: u64 [sp + 168] = 0\n 18659: u64 [sp + 160] = 0\n 18663: u32 [sp + 192] = 0x20\n 18668: i32 a1 = sp + 0x80\n 18672: i32 a3 = sp + 0xa0\n 18676: i32 a4 = sp + 0xc0\n 18680: a2 = 0xffffffffffffffff\n 18683: a0 = 0\n 18685: ecalli 4 // 'get_storage'\n 18687: a0 = u64 [sp + 0xa8]\n 18691: a1 = u64 [sp + 0xa0]\n 18695: a2 = u64 [sp + 0xb0]\n 18699: a3 = a0 << 0x38\n 18702: a1 = a1 >> 0x8\n 18705: a1 = a1 | a3\n 18708: u64 [sp + 0x28] = a1\n 18711: a1 = a2 << 0x38\n 18714: a0 = a0 >> 0x8\n 18717: a0 = a0 | a1\n 18720: u64 [sp + 0x20] = a0\n 18723: a2 = a2 << 0x18\n 18726: a2 = a2 >> 0x20\n 18729: u64 [sp + 0x18] = a2\n 18732: a1 = u64 [sp + 0x68]\n 18735: a0 = a1 + 0x2\n 18738: a1 = a0 <u a1\n 18741: a3 = u64 [sp + 0x70]\n 18744: a2 = a3 + a1\n 18747: a3 = a2 <u a3\n 18750: a3 = a1 if a1 == 0\n 18753: a1 = u64 [sp + 0x60]\n 18756: a3 = a3 + a1\n 18759: a1 = a3 <u a1\n 18762: a4 = u64 [sp + 0x78]\n 18765: a1 = a1 + a4\n 18768: u64 [sp + 0x98] = a1\n 18772: u64 [sp + 0x90] = a3\n 18776: u64 [sp + 0x88] = a2\n 18780: u64 [sp + 0x80] = a0\n 18784: u64 [sp + 184] = 0\n 18788: u64 [sp + 176] = 0\n 18792: u64 [sp + 168] = 0\n 18796: u64 [sp + 160] = 0\n 18800: u32 [sp + 192] = 0x20\n 18805: i32 a1 = sp + 0x80\n 18809: i32 a3 = sp + 0xa0\n 18813: i32 a4 = sp + 0xc0\n 18817: a2 = 0xffffffffffffffff\n 18820: a0 = 0\n 18822: ecalli 4 // 'get_storage'\n 18824: a0 = u64 [sp + 0xb8]\n 18828: a1 = u64 [sp + 0xb0]\n 18832: a2 = u64 [sp + 0xa8]\n 18836: a3 = u64 [sp + 0xa0]\n 18840: a4 = u64 [sp + 0x58]\n 18843: u64 [a4 + 0x78] = a0\n 18846: u64 [a4 + 0x70] = a1\n 18849: u64 [a4 + 0x68] = a2\n 18852: u64 [a4 + 0x60] = a3\n 18855: a0 = u64 [sp + 0x18]\n 18858: u64 [a4 + 0x50] = a0\n 18861: a0 = u64 [sp + 0x20]\n 18864: u64 [a4 + 0x48] = a0\n 18867: a0 = u64 [sp + 0x28]\n 18870: u64 [a4 + 0x40] = a0\n 18873: a0 = u64 [sp + 0x30]\n 18876: u64 [a4 + 0x20] = a0\n 18879: a0 = u64 [sp + 0x38]\n 18882: u64 [a4 + 0x18] = a0\n 18885: a0 = u64 [sp + 0x40]\n 18888: u64 [a4 + 0x10] = a0\n 18891: a0 = u64 [sp + 0x48]\n 18894: u64 [a4 + 0x8] = a0\n 18897: a0 = u64 [sp + 0x50]\n 18900: u64 [a4] = a0\n 18902: u64 [a4 + 88] = 0\n 18905: u64 [a4 + 56] = 0\n 18908: u64 [a4 + 48] = 0\n 18911: u64 [a4 + 40] = 0\n 18914: sp = s0 + 0xffffffffffffff20\n 18918: ra = u64 [sp + 0xd8]\n 18922: s0 = u64 [sp + 0xd0]\n 18926: s1 = u64 [sp + 0xc8]\n 18930: sp = sp + 0xe0\n 18934: ret\n      : @286 (gas: 8)\n 18936: a0 = u64 [sp + 0x150]\n 18940: a1 = u64 [sp + 0x158]\n 18944: a2 = u64 [sp + 0x148]\n 18948: a3 = u64 [sp + 0x140]\n 18952: a1 = a1 | a2\n 18955: a0 = a0 | a3\n 18958: a0 = a0 | a1\n 18961: jump @300 if a0 != 0\n      : @287 (gas: 2)\n 18965: a0 = i32 [0x20004]\n 18970: jump @300 if a0 <=u 35\n      : @288 (gas: 4)\n 18975: i32 a0 = sp + 0x160\n 18979: a1 = 0x4\n 18982: ecalli 1 // 'call_data_load'\n 18984: fallthrough\n      : @289 (gas: 10)\n 18985: a0 = u64 [sp + 0x170]\n 18989: a2 = u64 [sp + 0x178]\n 18993: a1 = 0x100000000\n 19003: a1 = a1 ^ a0\n 19006: a1 = a1 | a2\n 19009: a3 = a0 >> 0x20\n 19012: a3 = a3 <u 0x1\n 19015: a3 = 0 if a2 != 0\n 19017: a3 = 0 if a1 == 0\n 19019: jump @300 if a3 == 0\n      : @290 (gas: 25)\n 19023: a1 = u64 [sp + 0x168]\n 19027: a3 = u64 [sp + 0x160]\n 19031: u64 [sp + 0xa8] = a1\n 19035: u64 [sp + 0xa0] = a3\n 19039: u64 [sp + 0xb0] = a0\n 19043: a0 = sp + 0xc0\n 19047: a1 = sp + 0xa0\n 19051: u64 [sp + 0xb8] = a2\n 19055: ra = 0x10e\n 19059: sp = sp + 0xffffffffffffff20\n 19063: u64 [sp + 0xd8] = ra\n 19067: u64 [sp + 0xd0] = s0\n 19071: u64 [sp + 0xc8] = s1\n 19075: s0 = sp + 0xe0\n 19079: sp = sp & 0xffffffffffffffe0\n 19082: a2 = u64 [a1]\n 19084: u64 [sp + 0x78] = a2\n 19087: a2 = u64 [a1 + 0x8]\n 19090: u64 [sp + 0x70] = a2\n 19093: s1 = u32 [a1 + 0x10]\n 19096: u64 [sp + 0x58] = a0\n 19099: a1 = 0x20\n 19102: a0 = 0\n 19104: ra = 0x108\n 19108: jump @0\n      : @291 [@dyn 135] (gas: 33)\n 19111: a0 = u64 [sp + 0x138]\n 19115: u64 [sp + 0x18] = a0\n 19118: a0 = u64 [sp + 0x130]\n 19122: u64 [sp + 0x20] = a0\n 19125: a0 = u64 [sp + 0x128]\n 19129: u64 [sp + 0x28] = a0\n 19132: a0 = u64 [sp + 0x120]\n 19136: u64 [sp + 0x30] = a0\n 19139: a0 = u64 [sp + 0x110]\n 19143: u64 [sp + 0x38] = a0\n 19146: a0 = u64 [sp + 0x108]\n 19150: u64 [sp + 0x40] = a0\n 19153: a0 = u64 [sp + 0x100]\n 19157: u64 [sp + 0x48] = a0\n 19160: a0 = u64 [sp + 0xf8]\n 19164: u64 [sp + 0x68] = a0\n 19167: a0 = u64 [sp + 0xf0]\n 19171: u64 [sp + 0x58] = a0\n 19174: a0 = u64 [sp + 0xe8]\n 19178: u64 [sp + 0x60] = a0\n 19181: a0 = u64 [sp + 0xe0]\n 19185: u64 [sp + 0x50] = a0\n 19188: a0 = u64 [sp + 0xd8]\n 19192: u64 [sp + 0x80] = a0\n 19196: a0 = u64 [sp + 0xd0]\n 19200: u64 [sp + 0x88] = a0\n 19204: a0 = u64 [sp + 0xc8]\n 19208: u64 [sp + 0x90] = a0\n 19212: a0 = u64 [sp + 0xc0]\n 19216: u64 [sp + 0x98] = a0\n 19220: a0 = 0x40\n 19223: a1 = 0x20\n 19226: ra = 272, jump @0\n      : @292 [@dyn 136] (gas: 100)\n 19232: a1 = u8 [a0 + 0x11]\n 19235: a2 = u8 [a0 + 0x10]\n 19238: a3 = u8 [a0 + 0x12]\n 19241: a4 = u8 [a0 + 0x13]\n 19244: a1 = a1 << 0x8\n 19247: a1 = a1 | a2\n 19250: a3 = a3 << 0x10\n 19253: a4 = a4 << 0x18\n 19256: a3 = a3 | a4\n 19259: a1 = a1 | a3\n 19262: a2 = u8 [a0 + 0x15]\n 19265: a3 = u8 [a0 + 0x14]\n 19268: a4 = u8 [a0 + 0x16]\n 19271: a5 = u8 [a0 + 0x17]\n 19274: a2 = a2 << 0x8\n 19277: a2 = a2 | a3\n 19280: a4 = a4 << 0x10\n 19283: a5 = a5 << 0x18\n 19286: a4 = a4 | a5\n 19289: a2 = a2 | a4\n 19292: a2 = a2 << 0x20\n 19295: t0 = a2 | a1\n 19298: a2 = u8 [a0 + 0x1]\n 19301: a3 = u8 [a0]\n 19303: a4 = u8 [a0 + 0x2]\n 19306: a5 = u8 [a0 + 0x3]\n 19309: a2 = a2 << 0x8\n 19312: a2 = a2 | a3\n 19315: a4 = a4 << 0x10\n 19318: a5 = a5 << 0x18\n 19321: a4 = a4 | a5\n 19324: a2 = a2 | a4\n 19327: a3 = u8 [a0 + 0x5]\n 19330: a4 = u8 [a0 + 0x4]\n 19333: a5 = u8 [a0 + 0x6]\n 19336: s1 = u8 [a0 + 0x7]\n 19339: a3 = a3 << 0x8\n 19342: a3 = a3 | a4\n 19345: a5 = a5 << 0x10\n 19348: s1 = s1 << 0x18\n 19351: a5 = a5 | s1\n 19354: a3 = a3 | a5\n 19357: a3 = a3 << 0x20\n 19360: a2 = a2 | a3\n 19363: a3 = u8 [a0 + 0x19]\n 19366: a4 = u8 [a0 + 0x18]\n 19369: a5 = u8 [a0 + 0x1a]\n 19372: s1 = u8 [a0 + 0x1b]\n 19375: a3 = a3 << 0x8\n 19378: a3 = a3 | a4\n 19381: a5 = a5 << 0x10\n 19384: s1 = s1 << 0x18\n 19387: a5 = a5 | s1\n 19390: a3 = a3 | a5\n 19393: a4 = u8 [a0 + 0x1d]\n 19396: a5 = u8 [a0 + 0x1c]\n 19399: s1 = u8 [a0 + 0x1e]\n 19402: a1 = u8 [a0 + 0x1f]\n 19405: a4 = a4 << 0x8\n 19408: a4 = a4 | a5\n 19411: s1 = s1 << 0x10\n 19414: a1 = a1 << 0x18\n 19417: a1 = a1 | s1\n 19420: a1 = a1 | a4\n 19423: a1 = a1 << 0x20\n 19426: a3 = a3 | a1\n 19429: a1 = u8 [a0 + 0x9]\n 19432: a4 = u8 [a0 + 0x8]\n 19435: a5 = u8 [a0 + 0xa]\n 19438: s1 = u8 [a0 + 0xb]\n 19441: a1 = a1 << 0x8\n 19444: a1 = a1 | a4\n 19447: a5 = a5 << 0x10\n 19450: s1 = s1 << 0x18\n 19453: a5 = a5 | s1\n 19456: a1 = a1 | a5\n 19459: a4 = u8 [a0 + 0xd]\n 19462: a5 = u8 [a0 + 0xc]\n 19465: s1 = u8 [a0 + 0xe]\n 19468: a0 = u8 [a0 + 0xf]\n 19471: a4 = a4 << 0x8\n 19474: a4 = a4 | a5\n 19477: s1 = s1 << 0x10\n 19480: a0 = a0 << 0x18\n 19483: a0 = a0 | s1\n 19486: a0 = a0 | a4\n 19489: a0 = a0 << 0x20\n 19492: a0 = a0 | a1\n 19495: s1 = reverse a0\n 19497: a3 = reverse a3\n 19499: a4 = reverse a2\n 19501: a2 = reverse t0\n 19503: a0 = a2 | a4\n 19506: a1 = a3 | s1\n 19509: a1 = a1 | a0\n 19512: a1 = a1 >> 0x20\n 19515: a0 = a0 | s1\n 19518: a0 = a0 << 0x20\n 19521: a0 = a0 | a1\n 19524: jump @299 if a0 != 0\n      : @293 (gas: 7)\n 19528: i32 a0 = a3 + 0\n 19530: a1 = 0x20\n 19533: u64 [sp + 0x8] = a0\n 19536: u64 [sp + 0x78] = a3\n 19539: u64 [sp + 0x70] = a2\n 19542: u64 [sp + 0x10] = a4\n 19545: ra = 274, jump @0\n      : @294 [@dyn 137] (gas: 78)\n 19551: a1 = u64 [sp + 0x80]\n 19555: a1 = reverse a1\n 19557: a2 = u64 [sp + 0x88]\n 19561: a2 = reverse a2\n 19563: a3 = u64 [sp + 0x90]\n 19567: a3 = reverse a3\n 19569: a4 = u64 [sp + 0x98]\n 19573: a4 = reverse a4\n 19575: a5 = a4 >> 0x38\n 19578: u8 [a0 + 0x1f] = a5\n 19581: a5 = a4 >> 0x30\n 19584: u8 [a0 + 0x1e] = a5\n 19587: a5 = a4 >> 0x28\n 19590: u8 [a0 + 0x1d] = a5\n 19593: a5 = a4 >> 0x20\n 19596: u8 [a0 + 0x1c] = a5\n 19599: a5 = a4 >> 0x18\n 19602: u8 [a0 + 0x1b] = a5\n 19605: a5 = a4 >> 0x10\n 19608: u8 [a0 + 0x1a] = a5\n 19611: a5 = a4 >> 0x8\n 19614: u8 [a0 + 0x19] = a5\n 19617: u8 [a0 + 0x18] = a4\n 19620: u8 [a0 + 0x10] = a3\n 19623: a4 = a3 >> 0x38\n 19626: u8 [a0 + 0x17] = a4\n 19629: a4 = a3 >> 0x30\n 19632: u8 [a0 + 0x16] = a4\n 19635: a4 = a3 >> 0x28\n 19638: u8 [a0 + 0x15] = a4\n 19641: a4 = a3 >> 0x20\n 19644: u8 [a0 + 0x14] = a4\n 19647: a4 = a3 >> 0x18\n 19650: u8 [a0 + 0x13] = a4\n 19653: a4 = a3 >> 0x10\n 19656: u8 [a0 + 0x12] = a4\n 19659: a3 = a3 >> 0x8\n 19662: u8 [a0 + 0x11] = a3\n 19665: u8 [a0 + 0x8] = a2\n 19668: a3 = a2 >> 0x38\n 19671: u8 [a0 + 0xf] = a3\n 19674: a3 = a2 >> 0x30\n 19677: u8 [a0 + 0xe] = a3\n 19680: a3 = a2 >> 0x28\n 19683: u8 [a0 + 0xd] = a3\n 19686: a3 = a2 >> 0x20\n 19689: u8 [a0 + 0xc] = a3\n 19692: a3 = a2 >> 0x18\n 19695: u8 [a0 + 0xb] = a3\n 19698: a3 = a2 >> 0x10\n 19701: u8 [a0 + 0xa] = a3\n 19704: a2 = a2 >> 0x8\n 19707: u8 [a0 + 0x9] = a2\n 19710: u8 [a0] = a1\n 19712: a2 = a1 >> 0x38\n 19715: u8 [a0 + 0x7] = a2\n 19718: a2 = a1 >> 0x30\n 19721: u8 [a0 + 0x6] = a2\n 19724: a2 = a1 >> 0x28\n 19727: u8 [a0 + 0x5] = a2\n 19730: a2 = a1 >> 0x20\n 19733: u8 [a0 + 0x4] = a2\n 19736: a2 = a1 >> 0x18\n 19739: u8 [a0 + 0x3] = a2\n 19742: a2 = a1 >> 0x10\n 19745: u8 [a0 + 0x2] = a2\n 19748: a1 = a1 >> 0x8\n 19751: a4 = u64 [sp + 0x10]\n 19754: a4 = a4 | s1\n 19757: s1 = 0x100000000\n 19767: a2 = 0xffffffe0\n 19777: a3 = u64 [sp + 0x78]\n 19780: a2 = a3 <u a2\n 19783: a3 = u64 [sp + 0x70]\n 19786: a2 = 0 if a3 != 0\n 19788: a2 = 0 if a4 != 0\n 19790: u8 [a0 + 0x1] = a1\n 19793: jump @299 if a2 == 0\n      : @295 (gas: 15)\n 19797: a0 = u64 [sp + 0x58]\n 19800: a1 = u64 [sp + 0x50]\n 19803: a0 = a0 | a1\n 19806: a1 = u64 [sp + 0x68]\n 19809: a2 = u64 [sp + 0x60]\n 19812: a1 = a1 | a2\n 19815: a0 = a0 | a1\n 19818: a0 = a0 >u 0\n 19820: u64 [sp + 0x98] = a0\n 19824: a0 = u64 [sp + 0x8]\n 19827: i32 a0 = a0 + 0x20\n 19830: a1 = 0x20\n 19833: u64 [sp + 0x90] = s1\n 19837: s1 = a4\n 19839: ra = 276, jump @0\n      : @296 [@dyn 138] (gas: 41)\n 19845: a3 = u64 [sp + 0x70]\n 19848: a2 = u64 [sp + 0x78]\n 19851: u8 [a0 + 30] = 0\n 19854: u8 [a0 + 29] = 0\n 19857: u8 [a0 + 28] = 0\n 19860: u8 [a0 + 27] = 0\n 19863: u8 [a0 + 26] = 0\n 19866: u8 [a0 + 25] = 0\n 19869: u8 [a0 + 24] = 0\n 19872: u8 [a0 + 23] = 0\n 19875: u8 [a0 + 22] = 0\n 19878: u8 [a0 + 21] = 0\n 19881: u8 [a0 + 20] = 0\n 19884: u8 [a0 + 19] = 0\n 19887: u8 [a0 + 18] = 0\n 19890: u8 [a0 + 17] = 0\n 19893: u8 [a0 + 16] = 0\n 19896: u8 [a0 + 15] = 0\n 19899: u8 [a0 + 14] = 0\n 19902: u8 [a0 + 13] = 0\n 19905: u8 [a0 + 12] = 0\n 19908: u8 [a0 + 11] = 0\n 19911: u8 [a0 + 10] = 0\n 19914: u8 [a0 + 9] = 0\n 19917: u8 [a0 + 8] = 0\n 19920: u8 [a0 + 7] = 0\n 19923: u8 [a0 + 6] = 0\n 19926: u8 [a0 + 5] = 0\n 19929: u8 [a0 + 4] = 0\n 19932: u8 [a0 + 3] = 0\n 19935: u8 [a0 + 2] = 0\n 19938: u8 [a0 + 1] = 0\n 19941: u8 [a0 + 0] = 0\n 19943: a1 = u64 [sp + 0x90]\n 19947: a1 = a1 + 0xffffffffffffffc0\n 19950: a1 = a2 <u a1\n 19953: a1 = 0 if a3 != 0\n 19955: a1 = 0 if s1 != 0\n 19957: a5 = u64 [sp + 0x98]\n 19961: u8 [a0 + 0x1f] = a5\n 19964: jump @299 if a1 == 0\n      : @297 (gas: 9)\n 19968: a4 = s1\n 19970: a0 = u64 [sp + 0x38]\n 19973: a0 = a0 << 0x20\n 19976: s1 = a0 >> 0x20\n 19979: a0 = u64 [sp + 0x8]\n 19982: i32 a0 = a0 + 0x40\n 19985: a1 = 0x20\n 19988: u64 [sp + 0x98] = a4\n 19992: ra = 278, jump @0\n      : @298 [@dyn 139] (gas: 63)\n 19998: a1 = reverse s1\n 20000: a2 = u64 [sp + 0x40]\n 20003: a2 = reverse a2\n 20005: a3 = u64 [sp + 0x48]\n 20008: a3 = reverse a3\n 20010: a4 = a3 >> 0x38\n 20013: u8 [a0 + 0x1f] = a4\n 20016: a4 = a3 >> 0x30\n 20019: u8 [a0 + 0x1e] = a4\n 20022: a4 = a3 >> 0x28\n 20025: u8 [a0 + 0x1d] = a4\n 20028: a4 = a3 >> 0x20\n 20031: u8 [a0 + 0x1c] = a4\n 20034: a4 = a3 >> 0x18\n 20037: u8 [a0 + 0x1b] = a4\n 20040: a4 = a3 >> 0x10\n 20043: u8 [a0 + 0x1a] = a4\n 20046: a4 = a3 >> 0x8\n 20049: u8 [a0 + 0x19] = a4\n 20052: u8 [a0 + 0x18] = a3\n 20055: u8 [a0 + 0x10] = a2\n 20058: u8 [a0 + 11] = 0\n 20061: u8 [a0 + 10] = 0\n 20064: u8 [a0 + 9] = 0\n 20067: u8 [a0 + 7] = 0\n 20070: u8 [a0 + 6] = 0\n 20073: u8 [a0 + 5] = 0\n 20076: u8 [a0 + 4] = 0\n 20079: u8 [a0 + 3] = 0\n 20082: u8 [a0 + 2] = 0\n 20085: u8 [a0 + 1] = 0\n 20088: u8 [a0 + 0] = 0\n 20090: a3 = a2 >> 0x38\n 20093: u8 [a0 + 0x17] = a3\n 20096: a3 = a2 >> 0x30\n 20099: u8 [a0 + 0x16] = a3\n 20102: a3 = a2 >> 0x28\n 20105: u8 [a0 + 0x15] = a3\n 20108: a3 = a2 >> 0x20\n 20111: u8 [a0 + 0x14] = a3\n 20114: a3 = a2 >> 0x18\n 20117: u8 [a0 + 0x13] = a3\n 20120: a3 = a2 >> 0x10\n 20123: u8 [a0 + 0x12] = a3\n 20126: a2 = a2 >> 0x8\n 20129: u8 [a0 + 0x11] = a2\n 20132: u8 [a0 + 0x8] = a1\n 20135: a2 = a1 >> 0x38\n 20138: u8 [a0 + 0xf] = a2\n 20141: a2 = a1 >> 0x30\n 20144: u8 [a0 + 0xe] = a2\n 20147: a2 = a1 >> 0x28\n 20150: u8 [a0 + 0xd] = a2\n 20153: a1 = a1 >> 0x20\n 20156: a2 = 0xffffffa0\n 20166: a3 = u64 [sp + 0x78]\n 20169: a2 = a3 <u a2\n 20172: a3 = u64 [sp + 0x70]\n 20175: a2 = 0 if a3 != 0\n 20177: a3 = u64 [sp + 0x98]\n 20181: a2 = 0 if a3 != 0\n 20183: u8 [a0 + 0xc] = a1\n 20186: jump @302 if a2 != 0\n      : @299 (gas: 1)\n 20189: trap\n      : @300 (gas: 3)\n 20190: a0 = 0\n 20192: a1 = 0\n 20194: ra = 280, jump @0\n      : @301 [@dyn 140] (gas: 5)\n 20200: i32 a1 = a0 + 0\n 20202: a0 = 0x1\n 20205: a2 = 0\n 20207: ecalli 6 // 'seal_return'\n 20209: fallthrough\n      : @302 (gas: 4)\n 20210: s1 = u64 [sp + 0x8]\n 20213: i32 a0 = s1 + 0x60\n 20216: a1 = 0x20\n 20219: ra = 282, jump @0\n      : @303 [@dyn 141] (gas: 71)\n 20225: a1 = u64 [sp + 0x18]\n 20228: a1 = reverse a1\n 20230: a2 = u64 [sp + 0x20]\n 20233: a2 = reverse a2\n 20235: a3 = u64 [sp + 0x28]\n 20238: a3 = reverse a3\n 20240: a4 = u64 [sp + 0x30]\n 20243: a4 = reverse a4\n 20245: u8 [a0 + 0x18] = a4\n 20248: a5 = a4 >> 0x38\n 20251: u8 [a0 + 0x1f] = a5\n 20254: a5 = a4 >> 0x30\n 20257: u8 [a0 + 0x1e] = a5\n 20260: a5 = a4 >> 0x28\n 20263: u8 [a0 + 0x1d] = a5\n 20266: a5 = a4 >> 0x20\n 20269: u8 [a0 + 0x1c] = a5\n 20272: a5 = a4 >> 0x18\n 20275: u8 [a0 + 0x1b] = a5\n 20278: a5 = a4 >> 0x10\n 20281: u8 [a0 + 0x1a] = a5\n 20284: a4 = a4 >> 0x8\n 20287: u8 [a0 + 0x19] = a4\n 20290: u8 [a0 + 0x10] = a3\n 20293: a4 = a3 >> 0x38\n 20296: u8 [a0 + 0x17] = a4\n 20299: a4 = a3 >> 0x30\n 20302: u8 [a0 + 0x16] = a4\n 20305: a4 = a3 >> 0x28\n 20308: u8 [a0 + 0x15] = a4\n 20311: a4 = a3 >> 0x20\n 20314: u8 [a0 + 0x14] = a4\n 20317: a4 = a3 >> 0x18\n 20320: u8 [a0 + 0x13] = a4\n 20323: a4 = a3 >> 0x10\n 20326: u8 [a0 + 0x12] = a4\n 20329: a3 = a3 >> 0x8\n 20332: u8 [a0 + 0x11] = a3\n 20335: u8 [a0 + 0x8] = a2\n 20338: a3 = a2 >> 0x38\n 20341: u8 [a0 + 0xf] = a3\n 20344: a3 = a2 >> 0x30\n 20347: u8 [a0 + 0xe] = a3\n 20350: a3 = a2 >> 0x28\n 20353: u8 [a0 + 0xd] = a3\n 20356: a3 = a2 >> 0x20\n 20359: u8 [a0 + 0xc] = a3\n 20362: a3 = a2 >> 0x18\n 20365: u8 [a0 + 0xb] = a3\n 20368: a3 = a2 >> 0x10\n 20371: u8 [a0 + 0xa] = a3\n 20374: a2 = a2 >> 0x8\n 20377: u8 [a0 + 0x9] = a2\n 20380: u8 [a0] = a1\n 20382: a2 = a1 >> 0x38\n 20385: u8 [a0 + 0x7] = a2\n 20388: a2 = a1 >> 0x30\n 20391: u8 [a0 + 0x6] = a2\n 20394: a2 = a1 >> 0x28\n 20397: u8 [a0 + 0x5] = a2\n 20400: a2 = a1 >> 0x20\n 20403: u8 [a0 + 0x4] = a2\n 20406: a2 = a1 >> 0x18\n 20409: u8 [a0 + 0x3] = a2\n 20412: a2 = a1 >> 0x10\n 20415: u8 [a0 + 0x2] = a2\n 20418: a1 = a1 >> 0x8\n 20421: u8 [a0 + 0x1] = a1\n 20424: a1 = 0x80\n 20428: a0 = s1\n 20430: ra = 284, jump @0\n      : @304 [@dyn 142] (gas: 6)\n 20436: i32 a1 = a0 + 0\n 20438: a2 = 0x80\n 20442: a0 = 0\n 20444: ra = 0x11e\n 20448: ecalli 6 // 'seal_return'\n 20450: fallthrough\n      : @305 [@dyn 143] (gas: 17)\n 20451: sp = sp + 0xffffffffffffffa8\n 20454: u64 [sp + 0x50] = ra\n 20457: u64 [sp + 0x48] = s0\n 20460: u64 [sp + 0x40] = s1\n 20463: a3 = u64 [a1 + 0x10]\n 20466: s1 = u64 [a1 + 0x18]\n 20469: a5 = u64 [a1 + 0x8]\n 20472: s0 = u64 [a1]\n 20474: a4 = a5 | s1\n 20477: a1 = s0 | a3\n 20480: a1 = a1 | a4\n 20483: a1 = a1 >> 0x20\n 20486: a4 = a4 | a3\n 20489: a4 = a4 << 0x20\n 20492: a1 = a1 | a4\n 20495: u64 [sp + 0x38] = a0\n 20498: jump @308 if a1 != 0\n      : @306 (gas: 22)\n 20502: a0 = u64 [a2 + 0x18]\n 20505: u64 [sp] = a0\n 20507: a0 = u64 [a2 + 0x10]\n 20510: u64 [sp + 0x8] = a0\n 20513: a0 = u64 [a2 + 0x8]\n 20516: u64 [sp + 0x10] = a0\n 20519: a0 = u64 [a2]\n 20521: u64 [sp + 0x18] = a0\n 20524: a0 = s0 + 0x20\n 20527: u64 [sp + 0x30] = a0\n 20530: a0 = a0 <u s0\n 20533: a1 = a5 + a0\n 20536: u64 [sp + 0x28] = a1\n 20539: a1 = a1 <u a5\n 20542: a1 = a0 if a0 == 0\n 20545: a1 = a1 + a3\n 20548: u64 [sp + 0x20] = a1\n 20551: a0 = a1 <u a3\n 20554: s1 = s1 + a0\n 20557: i32 a0 = s0 + 0\n 20559: a1 = 0x20\n 20562: ra = 288, jump @0\n      : @307 [@dyn 144] (gas: 81)\n 20568: a1 = u64 [sp]\n 20570: a1 = reverse a1\n 20572: a2 = u64 [sp + 0x8]\n 20575: a2 = reverse a2\n 20577: a3 = u64 [sp + 0x10]\n 20580: a3 = reverse a3\n 20582: a4 = u64 [sp + 0x18]\n 20585: a4 = reverse a4\n 20587: a5 = a4 >> 0x38\n 20590: u8 [a0 + 0x1f] = a5\n 20593: a5 = a4 >> 0x30\n 20596: u8 [a0 + 0x1e] = a5\n 20599: a5 = a4 >> 0x28\n 20602: u8 [a0 + 0x1d] = a5\n 20605: a5 = a4 >> 0x20\n 20608: u8 [a0 + 0x1c] = a5\n 20611: a5 = a4 >> 0x18\n 20614: u8 [a0 + 0x1b] = a5\n 20617: a5 = a4 >> 0x10\n 20620: u8 [a0 + 0x1a] = a5\n 20623: a5 = a4 >> 0x8\n 20626: u8 [a0 + 0x19] = a5\n 20629: u8 [a0 + 0x18] = a4\n 20632: u8 [a0 + 0x10] = a3\n 20635: a4 = a3 >> 0x38\n 20638: u8 [a0 + 0x17] = a4\n 20641: a4 = a3 >> 0x30\n 20644: u8 [a0 + 0x16] = a4\n 20647: a4 = a3 >> 0x28\n 20650: u8 [a0 + 0x15] = a4\n 20653: a4 = a3 >> 0x20\n 20656: u8 [a0 + 0x14] = a4\n 20659: a4 = a3 >> 0x18\n 20662: u8 [a0 + 0x13] = a4\n 20665: a4 = a3 >> 0x10\n 20668: u8 [a0 + 0x12] = a4\n 20671: a3 = a3 >> 0x8\n 20674: u8 [a0 + 0x11] = a3\n 20677: u8 [a0 + 0x8] = a2\n 20680: a3 = a2 >> 0x38\n 20683: u8 [a0 + 0xf] = a3\n 20686: a3 = a2 >> 0x30\n 20689: u8 [a0 + 0xe] = a3\n 20692: a3 = a2 >> 0x28\n 20695: u8 [a0 + 0xd] = a3\n 20698: a3 = a2 >> 0x20\n 20701: u8 [a0 + 0xc] = a3\n 20704: a3 = a2 >> 0x18\n 20707: u8 [a0 + 0xb] = a3\n 20710: a3 = a2 >> 0x10\n 20713: u8 [a0 + 0xa] = a3\n 20716: a2 = a2 >> 0x8\n 20719: u8 [a0 + 0x9] = a2\n 20722: u8 [a0] = a1\n 20724: a2 = a1 >> 0x38\n 20727: u8 [a0 + 0x7] = a2\n 20730: a2 = a1 >> 0x30\n 20733: u8 [a0 + 0x6] = a2\n 20736: a2 = a1 >> 0x28\n 20739: u8 [a0 + 0x5] = a2\n 20742: a2 = a1 >> 0x20\n 20745: u8 [a0 + 0x4] = a2\n 20748: a2 = a1 >> 0x18\n 20751: u8 [a0 + 0x3] = a2\n 20754: a2 = a1 >> 0x10\n 20757: u8 [a0 + 0x2] = a2\n 20760: a1 = a1 >> 0x8\n 20763: u8 [a0 + 0x1] = a1\n 20766: a0 = u64 [sp + 0x38]\n 20769: a1 = u64 [sp + 0x30]\n 20772: u64 [a0] = a1\n 20774: a1 = u64 [sp + 0x28]\n 20777: u64 [a0 + 0x8] = a1\n 20780: a1 = u64 [sp + 0x20]\n 20783: u64 [a0 + 0x10] = a1\n 20786: u64 [a0 + 0x18] = s1\n 20789: ra = u64 [sp + 0x50]\n 20792: s0 = u64 [sp + 0x48]\n 20795: s1 = u64 [sp + 0x40]\n 20798: sp = sp + 0x58\n 20801: ret\n      : @308 (gas: 1)\n 20803: trap\n      : @309 (gas: 8)\n 20804: a0 = u64 [sp + 0xd0]\n 20808: a1 = u64 [sp + 0xd8]\n 20812: a2 = u64 [sp + 0xc8]\n 20816: a3 = u64 [sp + 0xc0]\n 20820: a1 = a1 | a2\n 20823: a0 = a0 | a3\n 20826: a0 = a0 | a1\n 20829: jump @316 if a0 != 0\n      : @310 (gas: 2)\n 20833: a0 = i32 [0x20004]\n 20838: jump @316 if a0 <=u 3\n      : @311 (gas: 2)\n 20843: a0 = sp + 0xa0\n 20847: ra = 290, jump @451\n      : @312 [@dyn 145] (gas: 16)\n 20853: a0 = u64 [sp + 0xa0]\n 20857: a1 = u64 [sp + 0xa8]\n 20861: a2 = u64 [sp + 0xb0]\n 20865: a3 = u64 [sp + 0xb8]\n 20869: u64 [sp + 0x38] = a3\n 20872: u64 [sp + 0x30] = a2\n 20875: u64 [sp + 0x28] = a1\n 20878: u64 [sp + 0x20] = a0\n 20881: u64 [sp + 88] = 0\n 20884: u64 [sp + 80] = 0\n 20887: u64 [sp + 72] = 0\n 20890: a0 = sp + 0x60\n 20893: a1 = sp + 0x40\n 20896: a2 = sp + 0x20\n 20899: u64 [sp + 64] = 0x2\n 20903: ra = 292, jump @181\n      : @313 [@dyn 146] (gas: 30)\n 20909: a0 = u64 [sp + 0x78]\n 20912: a1 = u64 [sp + 0x70]\n 20915: a2 = u64 [sp + 0x68]\n 20918: a3 = u64 [sp + 0x60]\n 20921: u64 [sp + 0xf8] = a0\n 20925: u64 [sp + 0xf0] = a1\n 20929: u64 [sp + 0xe8] = a2\n 20933: u64 [sp + 0xe0] = a3\n 20937: u64 [sp + 280] = 0\n 20941: u64 [sp + 272] = 0\n 20945: u64 [sp + 264] = 0\n 20949: u64 [sp + 256] = 0\n 20953: u32 [sp + 288] = 0x20\n 20958: i32 a1 = sp + 0xe0\n 20962: i32 a3 = sp + 0x100\n 20966: i32 a4 = sp + 0x120\n 20970: a2 = 0xffffffffffffffff\n 20973: a0 = 0\n 20975: ecalli 4 // 'get_storage'\n 20977: a0 = u64 [sp + 0x118]\n 20981: u64 [sp] = a0\n 20983: a0 = u64 [sp + 0x110]\n 20987: u64 [sp + 0x8] = a0\n 20990: a0 = u64 [sp + 0x108]\n 20994: u64 [sp + 0x10] = a0\n 20997: a0 = u64 [sp + 0x100]\n 21001: u64 [sp + 0x18] = a0\n 21004: a0 = 0x40\n 21007: a1 = 0x20\n 21010: ra = 294, jump @0\n      : @314 [@dyn 147] (gas: 100)\n 21016: a1 = u8 [a0 + 0x11]\n 21019: a2 = u8 [a0 + 0x10]\n 21022: a3 = u8 [a0 + 0x12]\n 21025: a4 = u8 [a0 + 0x13]\n 21028: a1 = a1 << 0x8\n 21031: a1 = a1 | a2\n 21034: a3 = a3 << 0x10\n 21037: a4 = a4 << 0x18\n 21040: a3 = a3 | a4\n 21043: a1 = a1 | a3\n 21046: a2 = u8 [a0 + 0x15]\n 21049: a3 = u8 [a0 + 0x14]\n 21052: a4 = u8 [a0 + 0x16]\n 21055: a5 = u8 [a0 + 0x17]\n 21058: a2 = a2 << 0x8\n 21061: a2 = a2 | a3\n 21064: a4 = a4 << 0x10\n 21067: a5 = a5 << 0x18\n 21070: a4 = a4 | a5\n 21073: a2 = a2 | a4\n 21076: a2 = a2 << 0x20\n 21079: t0 = a2 | a1\n 21082: a2 = u8 [a0 + 0x1]\n 21085: a3 = u8 [a0]\n 21087: a4 = u8 [a0 + 0x2]\n 21090: a5 = u8 [a0 + 0x3]\n 21093: a2 = a2 << 0x8\n 21096: a2 = a2 | a3\n 21099: a4 = a4 << 0x10\n 21102: a5 = a5 << 0x18\n 21105: a4 = a4 | a5\n 21108: a2 = a2 | a4\n 21111: a3 = u8 [a0 + 0x5]\n 21114: a4 = u8 [a0 + 0x4]\n 21117: a5 = u8 [a0 + 0x6]\n 21120: s1 = u8 [a0 + 0x7]\n 21123: a3 = a3 << 0x8\n 21126: a3 = a3 | a4\n 21129: a5 = a5 << 0x10\n 21132: s1 = s1 << 0x18\n 21135: a5 = a5 | s1\n 21138: a3 = a3 | a5\n 21141: a3 = a3 << 0x20\n 21144: a2 = a2 | a3\n 21147: a3 = u8 [a0 + 0x19]\n 21150: a4 = u8 [a0 + 0x18]\n 21153: a5 = u8 [a0 + 0x1a]\n 21156: s1 = u8 [a0 + 0x1b]\n 21159: a3 = a3 << 0x8\n 21162: a3 = a3 | a4\n 21165: a5 = a5 << 0x10\n 21168: s1 = s1 << 0x18\n 21171: a5 = a5 | s1\n 21174: a3 = a3 | a5\n 21177: a4 = u8 [a0 + 0x1d]\n 21180: a5 = u8 [a0 + 0x1c]\n 21183: s1 = u8 [a0 + 0x1e]\n 21186: a1 = u8 [a0 + 0x1f]\n 21189: a4 = a4 << 0x8\n 21192: a4 = a4 | a5\n 21195: s1 = s1 << 0x10\n 21198: a1 = a1 << 0x18\n 21201: a1 = a1 | s1\n 21204: a1 = a1 | a4\n 21207: a1 = a1 << 0x20\n 21210: a3 = a3 | a1\n 21213: a1 = u8 [a0 + 0x9]\n 21216: a4 = u8 [a0 + 0x8]\n 21219: a5 = u8 [a0 + 0xa]\n 21222: s1 = u8 [a0 + 0xb]\n 21225: a1 = a1 << 0x8\n 21228: a1 = a1 | a4\n 21231: a5 = a5 << 0x10\n 21234: s1 = s1 << 0x18\n 21237: a5 = a5 | s1\n 21240: a1 = a1 | a5\n 21243: a4 = u8 [a0 + 0xd]\n 21246: a5 = u8 [a0 + 0xc]\n 21249: s1 = u8 [a0 + 0xe]\n 21252: a0 = u8 [a0 + 0xf]\n 21255: a4 = a4 << 0x8\n 21258: a4 = a4 | a5\n 21261: s1 = s1 << 0x10\n 21264: a0 = a0 << 0x18\n 21267: a0 = a0 | s1\n 21270: a0 = a0 | a4\n 21273: a0 = a0 << 0x20\n 21276: a0 = a0 | a1\n 21279: a1 = reverse a0\n 21281: a0 = reverse a3\n 21283: a2 = reverse a2\n 21285: a3 = reverse t0\n 21287: a2 = a2 | a3\n 21290: a3 = a0 | a1\n 21293: a3 = a3 | a2\n 21296: a3 = a3 >> 0x20\n 21299: a1 = a1 | a2\n 21302: a1 = a1 << 0x20\n 21305: a1 = a1 | a3\n 21308: jump @318 if a1 == 0\n      : @315 (gas: 1)\n 21311: trap\n      : @316 (gas: 3)\n 21312: a0 = 0\n 21314: a1 = 0\n 21316: ra = 296, jump @0\n      : @317 [@dyn 148] (gas: 5)\n 21322: i32 a1 = a0 + 0\n 21324: a0 = 0x1\n 21327: a2 = 0\n 21329: ecalli 6 // 'seal_return'\n 21331: fallthrough\n      : @318 (gas: 4)\n 21332: i32 s1 = a0 + 0\n 21334: a1 = 0x20\n 21337: a0 = s1\n 21339: ra = 298, jump @0\n      : @319 [@dyn 149] (gas: 71)\n 21345: a1 = u64 [sp]\n 21347: a1 = reverse a1\n 21349: a2 = u64 [sp + 0x8]\n 21352: a2 = reverse a2\n 21354: a3 = u64 [sp + 0x10]\n 21357: a3 = reverse a3\n 21359: a4 = u64 [sp + 0x18]\n 21362: a4 = reverse a4\n 21364: a5 = a4 >> 0x38\n 21367: u8 [a0 + 0x1f] = a5\n 21370: a5 = a4 >> 0x30\n 21373: u8 [a0 + 0x1e] = a5\n 21376: a5 = a4 >> 0x28\n 21379: u8 [a0 + 0x1d] = a5\n 21382: a5 = a4 >> 0x20\n 21385: u8 [a0 + 0x1c] = a5\n 21388: a5 = a4 >> 0x18\n 21391: u8 [a0 + 0x1b] = a5\n 21394: a5 = a4 >> 0x10\n 21397: u8 [a0 + 0x1a] = a5\n 21400: a5 = a4 >> 0x8\n 21403: u8 [a0 + 0x19] = a5\n 21406: u8 [a0 + 0x18] = a4\n 21409: u8 [a0 + 0x10] = a3\n 21412: a4 = a3 >> 0x38\n 21415: u8 [a0 + 0x17] = a4\n 21418: a4 = a3 >> 0x30\n 21421: u8 [a0 + 0x16] = a4\n 21424: a4 = a3 >> 0x28\n 21427: u8 [a0 + 0x15] = a4\n 21430: a4 = a3 >> 0x20\n 21433: u8 [a0 + 0x14] = a4\n 21436: a4 = a3 >> 0x18\n 21439: u8 [a0 + 0x13] = a4\n 21442: a4 = a3 >> 0x10\n 21445: u8 [a0 + 0x12] = a4\n 21448: a3 = a3 >> 0x8\n 21451: u8 [a0 + 0x11] = a3\n 21454: u8 [a0 + 0x8] = a2\n 21457: a3 = a2 >> 0x38\n 21460: u8 [a0 + 0xf] = a3\n 21463: a3 = a2 >> 0x30\n 21466: u8 [a0 + 0xe] = a3\n 21469: a3 = a2 >> 0x28\n 21472: u8 [a0 + 0xd] = a3\n 21475: a3 = a2 >> 0x20\n 21478: u8 [a0 + 0xc] = a3\n 21481: a3 = a2 >> 0x18\n 21484: u8 [a0 + 0xb] = a3\n 21487: a3 = a2 >> 0x10\n 21490: u8 [a0 + 0xa] = a3\n 21493: a2 = a2 >> 0x8\n 21496: u8 [a0 + 0x9] = a2\n 21499: u8 [a0] = a1\n 21501: a2 = a1 >> 0x38\n 21504: u8 [a0 + 0x7] = a2\n 21507: a2 = a1 >> 0x30\n 21510: u8 [a0 + 0x6] = a2\n 21513: a2 = a1 >> 0x28\n 21516: u8 [a0 + 0x5] = a2\n 21519: a2 = a1 >> 0x20\n 21522: u8 [a0 + 0x4] = a2\n 21525: a2 = a1 >> 0x18\n 21528: u8 [a0 + 0x3] = a2\n 21531: a2 = a1 >> 0x10\n 21534: u8 [a0 + 0x2] = a2\n 21537: a1 = a1 >> 0x8\n 21540: u8 [a0 + 0x1] = a1\n 21543: a1 = 0x20\n 21546: a0 = s1\n 21548: ra = 300, jump @0\n      : @320 [@dyn 150] (gas: 6)\n 21554: i32 a1 = a0 + 0\n 21556: a2 = 0x20\n 21559: a0 = 0\n 21561: ra = 0x12e\n 21565: ecalli 6 // 'seal_return'\n 21567: fallthrough\n      : @321 [@dyn 151] (gas: 9)\n 21568: a2 = u64 [a1 + 0x18]\n 21571: a3 = u64 [a1 + 0x10]\n 21574: a4 = u64 [a1 + 0x8]\n 21577: a1 = u64 [a1]\n 21579: u64 [a0 + 0x18] = a2\n 21582: u64 [a0 + 0x10] = a3\n 21585: u64 [a0 + 0x8] = a4\n 21588: u64 [a0] = a1\n 21590: ret\n      : @322 (gas: 17)\n 21592: sp = sp + 0xffffffffffffffa0\n 21595: u64 [sp + 0x58] = ra\n 21598: u64 [sp + 0x50] = s0\n 21601: u64 [sp + 0x48] = s1\n 21604: a3 = u64 [a1 + 0x18]\n 21607: a4 = u64 [a1 + 0x10]\n 21610: a5 = u64 [a1 + 0x8]\n 21613: s1 = u64 [a1]\n 21615: a1 = a5 | a3\n 21618: a2 = s1 | a4\n 21621: a2 = a2 | a1\n 21624: a2 = a2 >> 0x20\n 21627: a1 = a1 | a4\n 21630: a1 = a1 << 0x20\n 21633: a1 = a1 | a2\n 21636: u64 [sp + 0x28] = a0\n 21639: jump @329 if a1 != 0\n      : @323 (gas: 19)\n 21643: a0 = s1 + 0x20\n 21646: u64 [sp + 0x30] = a0\n 21649: a0 = a0 <u s1\n 21652: a1 = a5 + a0\n 21655: u64 [sp + 0x40] = a1\n 21658: u64 [sp + 0x8] = a5\n 21661: s0 = a1 <u a5\n 21664: s0 = a0 if a0 == 0\n 21667: s0 = s0 + a4\n 21670: u64 [sp + 0x10] = a4\n 21673: a0 = s0 <u a4\n 21676: u64 [sp + 0x18] = a3\n 21679: a0 = a0 + a3\n 21682: u64 [sp + 0x38] = a0\n 21685: u64 [sp] = s1\n 21687: i32 a0 = s1 + 0\n 21689: a1 = 0x20\n 21692: s1 = 0x20\n 21695: ra = 304, jump @0\n      : @324 [@dyn 152] (gas: 45)\n 21701: u8 [a0 + 0x1f] = s1\n 21704: a1 = u64 [sp + 0x30]\n 21707: s1 = a1\n 21709: a1 = a1 | s0\n 21712: a2 = u64 [sp + 0x40]\n 21715: a4 = u64 [sp + 0x38]\n 21718: a2 = a2 | a4\n 21721: a1 = a1 | a2\n 21724: a1 = a1 >> 0x20\n 21727: u64 [sp + 0x20] = s0\n 21730: a2 = a2 | s0\n 21733: a2 = a2 << 0x20\n 21736: a1 = a1 | a2\n 21739: u8 [a0 + 30] = 0\n 21742: u8 [a0 + 29] = 0\n 21745: u8 [a0 + 28] = 0\n 21748: u8 [a0 + 27] = 0\n 21751: u8 [a0 + 26] = 0\n 21754: u8 [a0 + 25] = 0\n 21757: u8 [a0 + 24] = 0\n 21760: u8 [a0 + 23] = 0\n 21763: u8 [a0 + 22] = 0\n 21766: u8 [a0 + 21] = 0\n 21769: u8 [a0 + 20] = 0\n 21772: u8 [a0 + 19] = 0\n 21775: u8 [a0 + 18] = 0\n 21778: u8 [a0 + 17] = 0\n 21781: u8 [a0 + 16] = 0\n 21784: u8 [a0 + 15] = 0\n 21787: u8 [a0 + 14] = 0\n 21790: u8 [a0 + 13] = 0\n 21793: u8 [a0 + 12] = 0\n 21796: u8 [a0 + 11] = 0\n 21799: u8 [a0 + 10] = 0\n 21802: u8 [a0 + 9] = 0\n 21805: u8 [a0 + 8] = 0\n 21808: u8 [a0 + 7] = 0\n 21811: u8 [a0 + 6] = 0\n 21814: u8 [a0 + 5] = 0\n 21817: u8 [a0 + 4] = 0\n 21820: u8 [a0 + 3] = 0\n 21823: u8 [a0 + 2] = 0\n 21826: u8 [a0 + 1] = 0\n 21829: u8 [a0 + 0] = 0\n 21831: jump @329 if a1 != 0\n      : @325 (gas: 4)\n 21835: i32 s0 = s1 + 0\n 21837: a1 = 0x20\n 21840: a0 = s0\n 21842: ra = 306, jump @0\n      : @326 [@dyn 153] (gas: 41)\n 21848: u8 [a0 + 31] = 0x14\n 21852: u8 [a0 + 30] = 0\n 21855: u8 [a0 + 29] = 0\n 21858: u8 [a0 + 28] = 0\n 21861: u8 [a0 + 27] = 0\n 21864: u8 [a0 + 26] = 0\n 21867: u8 [a0 + 25] = 0\n 21870: u8 [a0 + 24] = 0\n 21873: u8 [a0 + 23] = 0\n 21876: u8 [a0 + 22] = 0\n 21879: u8 [a0 + 21] = 0\n 21882: u8 [a0 + 20] = 0\n 21885: u8 [a0 + 19] = 0\n 21888: u8 [a0 + 18] = 0\n 21891: u8 [a0 + 17] = 0\n 21894: u8 [a0 + 16] = 0\n 21897: u8 [a0 + 15] = 0\n 21900: u8 [a0 + 14] = 0\n 21903: u8 [a0 + 13] = 0\n 21906: u8 [a0 + 12] = 0\n 21909: u8 [a0 + 11] = 0\n 21912: u8 [a0 + 10] = 0\n 21915: u8 [a0 + 9] = 0\n 21918: u8 [a0 + 8] = 0\n 21921: u8 [a0 + 7] = 0\n 21924: u8 [a0 + 6] = 0\n 21927: u8 [a0 + 5] = 0\n 21930: u8 [a0 + 4] = 0\n 21933: u8 [a0 + 3] = 0\n 21936: u8 [a0 + 2] = 0\n 21939: u8 [a0 + 1] = 0\n 21942: a1 = u64 [sp + 0x20]\n 21945: a2 = u64 [sp + 0x38]\n 21948: a1 = a1 | a2\n 21951: a2 = 0xffffffe0\n 21961: a2 = s1 <u a2\n 21964: a3 = u64 [sp + 0x40]\n 21967: a2 = 0 if a3 != 0\n 21969: a2 = 0 if a1 != 0\n 21971: u8 [a0 + 0] = 0\n 21973: jump @329 if a2 == 0\n      : @327 (gas: 3)\n 21977: i32 a0 = s0 + 0x20\n 21980: a1 = 0x20\n 21983: ra = 308, jump @0\n      : @328 [@dyn 154] (gas: 54)\n 21989: u8 [a0 + 31] = 0\n 21992: u8 [a0 + 30] = 0\n 21995: u8 [a0 + 29] = 0\n 21998: u8 [a0 + 28] = 0\n 22001: u8 [a0 + 27] = 0\n 22004: u8 [a0 + 26] = 0\n 22007: u8 [a0 + 25] = 0\n 22010: u8 [a0 + 24] = 0\n 22013: u8 [a0 + 23] = 0\n 22016: u8 [a0 + 22] = 0\n 22019: u8 [a0 + 21] = 0\n 22022: u8 [a0 + 20] = 0\n 22025: u8 [a0 + 19] = 0x65\n 22029: u8 [a0 + 18] = 0x74\n 22033: u8 [a0 + 17] = 0x6f\n 22037: u8 [a0 + 16] = 0x76\n 22041: u8 [a0 + 15] = 0x20\n 22045: u8 [a0 + 14] = 0x6f\n 22049: u8 [a0 + 13] = 0x74\n 22053: u8 [a0 + 12] = 0x20\n 22057: u8 [a0 + 11] = 0x74\n 22061: u8 [a0 + 10] = 0x68\n 22065: u8 [a0 + 9] = 0x67\n 22069: u8 [a0 + 8] = 0x69\n 22073: u8 [a0 + 7] = 0x72\n 22077: u8 [a0 + 6] = 0x20\n 22081: u8 [a0 + 5] = 0x6f\n 22085: u8 [a0 + 4] = 0x6e\n 22089: u8 [a0 + 3] = 0x20\n 22093: u8 [a0 + 2] = 0x73\n 22097: u8 [a0 + 1] = 0x61\n 22101: u8 [a0 + 0] = 0x48\n 22104: a1 = u64 [sp]\n 22106: a0 = a1 + 0x60\n 22109: a1 = a0 <u a1\n 22112: a3 = u64 [sp + 0x8]\n 22115: a2 = a3 + a1\n 22118: a3 = a2 <u a3\n 22121: a3 = a1 if a1 == 0\n 22124: a1 = u64 [sp + 0x10]\n 22127: a3 = a3 + a1\n 22130: a1 = a3 <u a1\n 22133: a4 = u64 [sp + 0x18]\n 22136: a1 = a1 + a4\n 22139: a4 = u64 [sp + 0x28]\n 22142: u64 [a4] = a0\n 22144: u64 [a4 + 0x8] = a2\n 22147: u64 [a4 + 0x10] = a3\n 22150: u64 [a4 + 0x18] = a1\n 22153: ra = u64 [sp + 0x58]\n 22156: s0 = u64 [sp + 0x50]\n 22159: s1 = u64 [sp + 0x48]\n 22162: sp = sp + 0x60\n 22165: ret\n      : @329 (gas: 1)\n 22167: trap\n      : @330 (gas: 17)\n 22168: sp = sp + 0xffffffffffffffa0\n 22171: u64 [sp + 0x58] = ra\n 22174: u64 [sp + 0x50] = s0\n 22177: u64 [sp + 0x48] = s1\n 22180: a3 = u64 [a1 + 0x18]\n 22183: a4 = u64 [a1 + 0x10]\n 22186: a5 = u64 [a1 + 0x8]\n 22189: s1 = u64 [a1]\n 22191: a1 = a5 | a3\n 22194: a2 = s1 | a4\n 22197: a2 = a2 | a1\n 22200: a2 = a2 >> 0x20\n 22203: a1 = a1 | a4\n 22206: a1 = a1 << 0x20\n 22209: a1 = a1 | a2\n 22212: u64 [sp + 0x28] = a0\n 22215: jump @337 if a1 != 0\n      : @331 (gas: 19)\n 22219: a0 = s1 + 0x20\n 22222: u64 [sp + 0x30] = a0\n 22225: a0 = a0 <u s1\n 22228: a1 = a5 + a0\n 22231: u64 [sp + 0x40] = a1\n 22234: u64 [sp + 0x8] = a5\n 22237: s0 = a1 <u a5\n 22240: s0 = a0 if a0 == 0\n 22243: s0 = s0 + a4\n 22246: u64 [sp + 0x10] = a4\n 22249: a0 = s0 <u a4\n 22252: u64 [sp + 0x18] = a3\n 22255: a0 = a0 + a3\n 22258: u64 [sp + 0x38] = a0\n 22261: u64 [sp] = s1\n 22263: i32 a0 = s1 + 0\n 22265: a1 = 0x20\n 22268: s1 = 0x20\n 22271: ra = 310, jump @0\n      : @332 [@dyn 155] (gas: 45)\n 22277: u8 [a0 + 0x1f] = s1\n 22280: a1 = u64 [sp + 0x30]\n 22283: s1 = a1\n 22285: a1 = a1 | s0\n 22288: a2 = u64 [sp + 0x40]\n 22291: a4 = u64 [sp + 0x38]\n 22294: a2 = a2 | a4\n 22297: a1 = a1 | a2\n 22300: a1 = a1 >> 0x20\n 22303: u64 [sp + 0x20] = s0\n 22306: a2 = a2 | s0\n 22309: a2 = a2 << 0x20\n 22312: a1 = a1 | a2\n 22315: u8 [a0 + 30] = 0\n 22318: u8 [a0 + 29] = 0\n 22321: u8 [a0 + 28] = 0\n 22324: u8 [a0 + 27] = 0\n 22327: u8 [a0 + 26] = 0\n 22330: u8 [a0 + 25] = 0\n 22333: u8 [a0 + 24] = 0\n 22336: u8 [a0 + 23] = 0\n 22339: u8 [a0 + 22] = 0\n 22342: u8 [a0 + 21] = 0\n 22345: u8 [a0 + 20] = 0\n 22348: u8 [a0 + 19] = 0\n 22351: u8 [a0 + 18] = 0\n 22354: u8 [a0 + 17] = 0\n 22357: u8 [a0 + 16] = 0\n 22360: u8 [a0 + 15] = 0\n 22363: u8 [a0 + 14] = 0\n 22366: u8 [a0 + 13] = 0\n 22369: u8 [a0 + 12] = 0\n 22372: u8 [a0 + 11] = 0\n 22375: u8 [a0 + 10] = 0\n 22378: u8 [a0 + 9] = 0\n 22381: u8 [a0 + 8] = 0\n 22384: u8 [a0 + 7] = 0\n 22387: u8 [a0 + 6] = 0\n 22390: u8 [a0 + 5] = 0\n 22393: u8 [a0 + 4] = 0\n 22396: u8 [a0 + 3] = 0\n 22399: u8 [a0 + 2] = 0\n 22402: u8 [a0 + 1] = 0\n 22405: u8 [a0 + 0] = 0\n 22407: jump @337 if a1 != 0\n      : @333 (gas: 4)\n 22411: i32 s0 = s1 + 0\n 22413: a1 = 0x20\n 22416: a0 = s0\n 22418: ra = 312, jump @0\n      : @334 [@dyn 156] (gas: 41)\n 22424: u8 [a0 + 31] = 0xe\n 22428: u8 [a0 + 30] = 0\n 22431: u8 [a0 + 29] = 0\n 22434: u8 [a0 + 28] = 0\n 22437: u8 [a0 + 27] = 0\n 22440: u8 [a0 + 26] = 0\n 22443: u8 [a0 + 25] = 0\n 22446: u8 [a0 + 24] = 0\n 22449: u8 [a0 + 23] = 0\n 22452: u8 [a0 + 22] = 0\n 22455: u8 [a0 + 21] = 0\n 22458: u8 [a0 + 20] = 0\n 22461: u8 [a0 + 19] = 0\n 22464: u8 [a0 + 18] = 0\n 22467: u8 [a0 + 17] = 0\n 22470: u8 [a0 + 16] = 0\n 22473: u8 [a0 + 15] = 0\n 22476: u8 [a0 + 14] = 0\n 22479: u8 [a0 + 13] = 0\n 22482: u8 [a0 + 12] = 0\n 22485: u8 [a0 + 11] = 0\n 22488: u8 [a0 + 10] = 0\n 22491: u8 [a0 + 9] = 0\n 22494: u8 [a0 + 8] = 0\n 22497: u8 [a0 + 7] = 0\n 22500: u8 [a0 + 6] = 0\n 22503: u8 [a0 + 5] = 0\n 22506: u8 [a0 + 4] = 0\n 22509: u8 [a0 + 3] = 0\n 22512: u8 [a0 + 2] = 0\n 22515: u8 [a0 + 1] = 0\n 22518: a1 = u64 [sp + 0x20]\n 22521: a2 = u64 [sp + 0x38]\n 22524: a1 = a1 | a2\n 22527: a2 = 0xffffffe0\n 22537: a2 = s1 <u a2\n 22540: a3 = u64 [sp + 0x40]\n 22543: a2 = 0 if a3 != 0\n 22545: a2 = 0 if a1 != 0\n 22547: u8 [a0 + 0] = 0\n 22549: jump @337 if a2 == 0\n      : @335 (gas: 3)\n 22553: i32 a0 = s0 + 0x20\n 22556: a1 = 0x20\n 22559: ra = 314, jump @0\n      : @336 [@dyn 157] (gas: 54)\n 22565: u8 [a0 + 31] = 0\n 22568: u8 [a0 + 30] = 0\n 22571: u8 [a0 + 29] = 0\n 22574: u8 [a0 + 28] = 0\n 22577: u8 [a0 + 27] = 0\n 22580: u8 [a0 + 26] = 0\n 22583: u8 [a0 + 25] = 0\n 22586: u8 [a0 + 24] = 0\n 22589: u8 [a0 + 23] = 0\n 22592: u8 [a0 + 22] = 0\n 22595: u8 [a0 + 21] = 0\n 22598: u8 [a0 + 20] = 0\n 22601: u8 [a0 + 19] = 0\n 22604: u8 [a0 + 18] = 0\n 22607: u8 [a0 + 17] = 0\n 22610: u8 [a0 + 16] = 0\n 22613: u8 [a0 + 15] = 0\n 22616: u8 [a0 + 14] = 0\n 22619: u8 [a0 + 13] = 0x2e\n 22623: u8 [a0 + 12] = 0x64\n 22627: u8 [a0 + 11] = 0x65\n 22631: u8 [a0 + 10] = 0x74\n 22635: u8 [a0 + 9] = 0x6f\n 22639: u8 [a0 + 8] = 0x76\n 22643: u8 [a0 + 7] = 0x20\n 22647: u8 [a0 + 6] = 0x79\n 22651: u8 [a0 + 5] = 0x64\n 22655: u8 [a0 + 4] = 0x61\n 22659: u8 [a0 + 3] = 0x65\n 22663: u8 [a0 + 2] = 0x72\n 22667: u8 [a0 + 1] = 0x6c\n 22671: u8 [a0 + 0] = 0x41\n 22674: a1 = u64 [sp]\n 22676: a0 = a1 + 0x60\n 22679: a1 = a0 <u a1\n 22682: a3 = u64 [sp + 0x8]\n 22685: a2 = a3 + a1\n 22688: a3 = a2 <u a3\n 22691: a3 = a1 if a1 == 0\n 22694: a1 = u64 [sp + 0x10]\n 22697: a3 = a3 + a1\n 22700: a1 = a3 <u a1\n 22703: a4 = u64 [sp + 0x18]\n 22706: a1 = a1 + a4\n 22709: a4 = u64 [sp + 0x28]\n 22712: u64 [a4] = a0\n 22714: u64 [a4 + 0x8] = a2\n 22717: u64 [a4 + 0x10] = a3\n 22720: u64 [a4 + 0x18] = a1\n 22723: ra = u64 [sp + 0x58]\n 22726: s0 = u64 [sp + 0x50]\n 22729: s1 = u64 [sp + 0x48]\n 22732: sp = sp + 0x60\n 22735: ret\n      : @337 (gas: 1)\n 22737: trap\n      : @338 [@dyn 158] (gas: 56)\n 22738: a1 = u64 [sp + 0x50]\n 22741: a1 = reverse a1\n 22743: a2 = u64 [sp + 0x58]\n 22746: a2 = reverse a2\n 22748: a3 = s1 >> 0x18\n 22751: u8 [a0 + 0xf] = a3\n 22754: a3 = s1 >> 0x10\n 22757: u8 [a0 + 0xe] = a3\n 22760: a3 = s1 >> 0x8\n 22763: u8 [a0 + 0xd] = a3\n 22766: u8 [a0 + 0xc] = s1\n 22769: u8 [a0 + 11] = 0\n 22772: u8 [a0 + 10] = 0\n 22775: u8 [a0 + 9] = 0\n 22778: u8 [a0 + 8] = 0\n 22781: u8 [a0 + 7] = 0\n 22784: u8 [a0 + 6] = 0\n 22787: u8 [a0 + 5] = 0\n 22790: u8 [a0 + 4] = 0\n 22793: u8 [a0 + 3] = 0\n 22796: u8 [a0 + 2] = 0\n 22799: u8 [a0 + 1] = 0\n 22802: u8 [a0 + 0] = 0\n 22804: u8 [a0 + 0x18] = a2\n 22807: u8 [a0 + 0x10] = a1\n 22810: a3 = a2 >> 0x38\n 22813: u8 [a0 + 0x1f] = a3\n 22816: a3 = a2 >> 0x30\n 22819: u8 [a0 + 0x1e] = a3\n 22822: a3 = a2 >> 0x28\n 22825: u8 [a0 + 0x1d] = a3\n 22828: a3 = a2 >> 0x20\n 22831: u8 [a0 + 0x1c] = a3\n 22834: a3 = a2 >> 0x18\n 22837: u8 [a0 + 0x1b] = a3\n 22840: a3 = a2 >> 0x10\n 22843: u8 [a0 + 0x1a] = a3\n 22846: a2 = a2 >> 0x8\n 22849: u8 [a0 + 0x19] = a2\n 22852: a2 = a1 >> 0x38\n 22855: u8 [a0 + 0x17] = a2\n 22858: a2 = a1 >> 0x30\n 22861: u8 [a0 + 0x16] = a2\n 22864: a2 = a1 >> 0x28\n 22867: u8 [a0 + 0x15] = a2\n 22870: a2 = a1 >> 0x20\n 22873: u8 [a0 + 0x14] = a2\n 22876: a2 = a1 >> 0x18\n 22879: u8 [a0 + 0x13] = a2\n 22882: a2 = a1 >> 0x10\n 22885: u8 [a0 + 0x12] = a2\n 22888: a1 = a1 >> 0x8\n 22891: u8 [a0 + 0x11] = a1\n 22894: a0 = 0x20\n 22897: a1 = 0x20\n 22900: ra = 318, jump @0\n      : @339 [@dyn 159] (gas: 35)\n 22906: u8 [a0 + 31] = 0x1\n 22910: u8 [a0 + 30] = 0\n 22913: u8 [a0 + 29] = 0\n 22916: u8 [a0 + 28] = 0\n 22919: u8 [a0 + 27] = 0\n 22922: u8 [a0 + 26] = 0\n 22925: u8 [a0 + 25] = 0\n 22928: u8 [a0 + 24] = 0\n 22931: u8 [a0 + 23] = 0\n 22934: u8 [a0 + 22] = 0\n 22937: u8 [a0 + 21] = 0\n 22940: u8 [a0 + 20] = 0\n 22943: u8 [a0 + 19] = 0\n 22946: u8 [a0 + 18] = 0\n 22949: u8 [a0 + 17] = 0\n 22952: u8 [a0 + 16] = 0\n 22955: u8 [a0 + 15] = 0\n 22958: u8 [a0 + 14] = 0\n 22961: u8 [a0 + 13] = 0\n 22964: u8 [a0 + 12] = 0\n 22967: u8 [a0 + 11] = 0\n 22970: u8 [a0 + 10] = 0\n 22973: u8 [a0 + 9] = 0\n 22976: u8 [a0 + 8] = 0\n 22979: u8 [a0 + 7] = 0\n 22982: u8 [a0 + 6] = 0\n 22985: u8 [a0 + 5] = 0\n 22988: u8 [a0 + 4] = 0\n 22991: u8 [a0 + 3] = 0\n 22994: u8 [a0 + 2] = 0\n 22997: u8 [a0 + 1] = 0\n 23000: u8 [a0 + 0] = 0\n 23002: a1 = 0x40\n 23005: a0 = 0\n 23007: ra = 320, jump @0\n      : @340 [@dyn 160] (gas: 31)\n 23013: i32 a0 = a0 + 0\n 23015: i32 a2 = sp + 0x200\n 23019: a1 = 0x40\n 23022: ecalli 5 // 'hash_keccak_256'\n 23024: a0 = u64 [sp + 0x218]\n 23028: a1 = u64 [sp + 0x210]\n 23032: a2 = u64 [sp + 0x208]\n 23036: a3 = u64 [sp + 0x200]\n 23040: s1 = reverse a0\n 23042: a0 = reverse a1\n 23044: a1 = reverse a2\n 23046: a2 = reverse a3\n 23048: u64 [sp + 0x48] = a2\n 23051: u64 [sp + 0x1f8] = a2\n 23055: u64 [sp + 0x50] = a1\n 23058: u64 [sp + 0x1f0] = a1\n 23062: u64 [sp + 0x58] = a0\n 23065: u64 [sp + 0x1e8] = a0\n 23069: u64 [sp + 0x1e0] = s1\n 23073: u64 [sp + 536] = 0\n 23077: u64 [sp + 528] = 0\n 23081: u64 [sp + 520] = 0\n 23085: u64 [sp + 512] = 0\n 23089: u32 [sp + 448] = 0x20\n 23094: i32 a1 = sp + 0x1e0\n 23098: i32 a3 = sp + 0x200\n 23102: i32 a4 = sp + 0x1c0\n 23106: a2 = 0xffffffffffffffff\n 23109: a0 = 0\n 23111: ecalli 4 // 'get_storage'\n 23113: fallthrough\n      : @341 (gas: 8)\n 23114: a0 = u64 [sp + 0x210]\n 23118: a1 = u64 [sp + 0x218]\n 23122: a2 = u64 [sp + 0x208]\n 23126: a3 = u64 [sp + 0x200]\n 23130: a1 = a1 | a2\n 23133: a0 = a0 | a3\n 23136: a0 = a0 | a1\n 23139: jump @348 if a0 == 0\n      : @342 (gas: 31)\n 23143: u64 [sp + 0x28] = s1\n 23146: s1 = s1 + 0x1\n 23149: a0 = s1 <u 0x1\n 23152: a1 = u64 [sp + 0x58]\n 23155: a2 = a1 + a0\n 23158: a0 = s1 | a2\n 23161: a0 = a0 <u 0x1\n 23164: a1 = u64 [sp + 0x50]\n 23167: a3 = a1 + a0\n 23170: a0 = a3 <u a1\n 23173: a1 = u64 [sp + 0x48]\n 23176: a0 = a0 + a1\n 23179: u64 [sp + 0x1e0] = s1\n 23183: u64 [sp + 0x20] = a2\n 23186: u64 [sp + 0x1e8] = a2\n 23190: u64 [sp + 0x18] = a3\n 23193: u64 [sp + 0x1f0] = a3\n 23197: u64 [sp + 0x10] = a0\n 23200: u64 [sp + 0x1f8] = a0\n 23204: u64 [sp + 536] = 0\n 23208: u64 [sp + 528] = 0\n 23212: u64 [sp + 520] = 0\n 23216: u64 [sp + 512] = 0\n 23220: u32 [sp + 448] = 0x20\n 23225: i32 a1 = sp + 0x1e0\n 23229: i32 a3 = sp + 0x200\n 23233: i32 a4 = sp + 0x1c0\n 23237: a2 = 0xffffffffffffffff\n 23240: a0 = 0\n 23242: ecalli 4 // 'get_storage'\n 23244: fallthrough\n      : @343 (gas: 2)\n 23245: a0 = u8 [sp + 0x200]\n 23249: jump @353 if a0 != 0\n      : @344 (gas: 135)\n 23253: a0 = u64 [sp + 0x18]\n 23256: u64 [sp + 0x1f0] = a0\n 23260: a0 = u64 [sp + 0x20]\n 23263: u64 [sp + 0x1e8] = a0\n 23267: u64 [sp + 0x1e0] = s1\n 23271: a0 = u64 [sp + 0x10]\n 23274: u64 [sp + 0x1f8] = a0\n 23278: u64 [sp + 536] = 0\n 23282: u64 [sp + 528] = 0\n 23286: u64 [sp + 520] = 0\n 23290: u64 [sp + 512] = 0\n 23294: u32 [sp + 448] = 0x20\n 23299: i32 a1 = sp + 0x1e0\n 23303: i32 a3 = sp + 0x200\n 23307: i32 a4 = sp + 0x1c0\n 23311: a2 = 0xffffffffffffffff\n 23314: a0 = 0\n 23316: ecalli 4 // 'get_storage'\n 23318: a0 = u64 [sp + 0x200]\n 23322: a1 = u64 [sp + 0x208]\n 23326: a2 = u64 [sp + 0x210]\n 23330: a3 = u64 [sp + 0x218]\n 23334: a0 = a0 & 0xffffffffffffff00\n 23338: a0 = a0 | 0x1\n 23341: a4 = u64 [sp + 0x10]\n 23344: u64 [sp + 0x1f8] = a4\n 23348: a4 = u64 [sp + 0x18]\n 23351: u64 [sp + 0x1f0] = a4\n 23355: a4 = u64 [sp + 0x20]\n 23358: u64 [sp + 0x1e8] = a4\n 23362: u64 [sp + 0x1e0] = s1\n 23366: u64 [sp + 0x218] = a3\n 23370: u64 [sp + 0x210] = a2\n 23374: u64 [sp + 0x208] = a1\n 23378: u64 [sp + 0x200] = a0\n 23382: i32 a1 = sp + 0x1e0\n 23386: i32 a3 = sp + 0x200\n 23390: a2 = 0xffffffffffffffff\n 23393: a4 = 0x20\n 23396: a0 = 0\n 23398: ecalli 8 // 'set_storage'\n 23400: a0 = u64 [sp + 0x28]\n 23403: a1 = a0 + 0x2\n 23406: a0 = a1 <u a0\n 23409: a2 = a1\n 23411: u64 [sp + 0x20] = a1\n 23414: a1 = u64 [sp + 0x58]\n 23417: a3 = a1 + a0\n 23420: u64 [sp + 0x18] = a3\n 23423: s1 = a3 <u a1\n 23426: s1 = a0 if a0 == 0\n 23429: a0 = u64 [sp + 0x50]\n 23432: s1 = s1 + a0\n 23435: a0 = s1 <u a0\n 23438: a1 = u64 [sp + 0x48]\n 23441: a0 = a0 + a1\n 23444: u64 [sp + 0x10] = a0\n 23447: u64 [sp + 0x1f8] = a0\n 23451: u64 [sp + 0x1f0] = s1\n 23455: u64 [sp + 0x1e8] = a3\n 23459: u64 [sp + 0x1e0] = a2\n 23463: u64 [sp + 536] = 0\n 23467: u64 [sp + 528] = 0\n 23471: u64 [sp + 520] = 0\n 23475: u64 [sp + 512] = 0\n 23479: u32 [sp + 448] = 0x20\n 23484: i32 a1 = sp + 0x1e0\n 23488: i32 a3 = sp + 0x200\n 23492: i32 a4 = sp + 0x1c0\n 23496: a2 = 0xffffffffffffffff\n 23499: a0 = 0\n 23501: ecalli 4 // 'get_storage'\n 23503: a0 = u64 [sp + 0x10]\n 23506: u64 [sp + 0x1f8] = a0\n 23510: u64 [sp + 0x1f0] = s1\n 23514: a0 = u64 [sp + 0x18]\n 23517: u64 [sp + 0x1e8] = a0\n 23521: a0 = u64 [sp + 0x20]\n 23524: u64 [sp + 0x1e0] = a0\n 23528: a0 = u64 [sp + 0x30]\n 23531: u64 [sp + 0x218] = a0\n 23535: a0 = u64 [sp + 0x38]\n 23538: u64 [sp + 0x210] = a0\n 23542: a0 = u64 [sp + 0x40]\n 23545: u64 [sp + 0x208] = a0\n 23549: s1 = u64 [sp + 0x8]\n 23552: u64 [sp + 0x200] = s1\n 23556: i32 a1 = sp + 0x1e0\n 23560: i32 a3 = sp + 0x200\n 23564: a2 = 0xffffffffffffffff\n 23567: a4 = 0x20\n 23570: a0 = 0\n 23572: ecalli 8 // 'set_storage'\n 23574: a0 = u64 [sp + 0x48]\n 23577: u64 [sp + 0x1f8] = a0\n 23581: a0 = u64 [sp + 0x50]\n 23584: u64 [sp + 0x1f0] = a0\n 23588: a0 = u64 [sp + 0x58]\n 23591: u64 [sp + 0x1e8] = a0\n 23595: a0 = u64 [sp + 0x28]\n 23598: u64 [sp + 0x1e0] = a0\n 23602: u64 [sp + 536] = 0\n 23606: u64 [sp + 528] = 0\n 23610: u64 [sp + 520] = 0\n 23614: u64 [sp + 512] = 0\n 23618: u32 [sp + 448] = 0x20\n 23623: i32 a1 = sp + 0x1e0\n 23627: i32 a3 = sp + 0x200\n 23631: i32 a4 = sp + 0x1c0\n 23635: a2 = 0xffffffffffffffff\n 23638: a0 = 0\n 23640: ecalli 4 // 'get_storage'\n 23642: a0 = u64 [sp + 0x218]\n 23646: u64 [sp + 0x28] = a0\n 23649: a0 = u64 [sp + 0x210]\n 23653: u64 [sp + 0x20] = a0\n 23656: a0 = u64 [sp + 0x200]\n 23660: u64 [sp + 0x18] = a0\n 23663: a0 = u64 [sp + 0x208]\n 23667: u64 [sp + 0x10] = a0\n 23670: a0 = u64 [sp + 0x30]\n 23673: u64 [sp + 0xf8] = a0\n 23677: a0 = u64 [sp + 0x38]\n 23680: u64 [sp + 0xf0] = a0\n 23684: a0 = u64 [sp + 0x40]\n 23687: u64 [sp + 0xe8] = a0\n 23691: u64 [sp + 0xe0] = s1\n 23695: u64 [sp + 280] = 0\n 23699: u64 [sp + 272] = 0\n 23703: u64 [sp + 264] = 0\n 23707: a0 = sp + 0x120\n 23711: a1 = sp + 0x100\n 23715: a2 = sp + 0xe0\n 23719: u64 [sp + 256] = 0x2\n 23724: ra = 322, jump @181\n      : @345 [@dyn 161] (gas: 32)\n 23730: a0 = u64 [sp + 0x120]\n 23734: a1 = u64 [sp + 0x138]\n 23738: a2 = u64 [sp + 0x128]\n 23742: a3 = u64 [sp + 0x130]\n 23746: a4 = a0 + 0x1\n 23749: a0 = a4 <u 0x1\n 23752: a2 = a2 + a0\n 23755: a0 = a4 | a2\n 23758: a0 = a0 <u 0x1\n 23761: a5 = a3 + a0\n 23764: a0 = a5 <u a3\n 23767: a0 = a0 + a1\n 23770: u64 [sp + 0x50] = a2\n 23773: u64 [sp + 0x1e8] = a2\n 23777: u64 [sp + 0x58] = a4\n 23780: u64 [sp + 0x1e0] = a4\n 23784: u64 [sp + 0x48] = a5\n 23787: u64 [sp + 0x1f0] = a5\n 23791: u64 [sp + 0x40] = a0\n 23794: u64 [sp + 0x1f8] = a0\n 23798: u64 [sp + 536] = 0\n 23802: u64 [sp + 528] = 0\n 23806: u64 [sp + 520] = 0\n 23810: u64 [sp + 512] = 0\n 23814: u32 [sp + 448] = 0x20\n 23819: i32 a1 = sp + 0x1e0\n 23823: i32 a3 = sp + 0x200\n 23827: i32 a4 = sp + 0x1c0\n 23831: a2 = 0xffffffffffffffff\n 23834: a0 = 0\n 23836: ecalli 4 // 'get_storage'\n 23838: fallthrough\n      : @346 (gas: 37)\n 23839: a3 = u64 [sp + 0x208]\n 23843: a1 = u64 [sp + 0x200]\n 23847: t0 = u64 [sp + 0x218]\n 23851: a2 = u64 [sp + 0x210]\n 23855: a5 = u64 [sp + 0x10]\n 23858: a5 = a5 + a3\n 23861: a0 = u64 [sp + 0x18]\n 23864: a0 = a0 + a1\n 23867: u64 [sp + 0x38] = a0\n 23870: a4 = a0 <u a1\n 23873: a5 = a5 + a4\n 23876: t1 = a5 ^ a3\n 23879: u64 [sp + 0x30] = a5\n 23882: a3 = a5 <u a3\n 23885: a5 = a4 ^ 0x1\n 23888: a4 = a3 if t1 != 0\n 23891: a0 = u64 [sp + 0x20]\n 23894: a0 = a0 + a2\n 23897: s1 = a0 + a4\n 23900: a4 = s1 <u a0\n 23903: a1 = u64 [sp + 0x28]\n 23906: a1 = a1 + t0\n 23909: a0 = a0 <u a2\n 23912: a0 = a0 + a1\n 23915: a4 = a4 + a0\n 23918: a0 = s1 <u a2\n 23921: a1 = a4 ^ t0\n 23924: u64 [sp + 0x28] = a4\n 23927: a4 = a4 <u t0\n 23930: a4 = a0 if a1 == 0\n 23933: a0 = a4 ^ 0x1\n 23936: a2 = a2 ^ s1\n 23939: a1 = a1 | a2\n 23942: a2 = a3 ^ 0x1\n 23945: a5 = a2 if t1 != 0\n 23948: a5 = a0 if a1 != 0\n 23951: jump @360 if a5 == 0\n      : @347 (gas: 46)\n 23955: a0 = u64 [sp + 0x48]\n 23958: u64 [sp + 0x1f0] = a0\n 23962: a0 = u64 [sp + 0x50]\n 23965: u64 [sp + 0x1e8] = a0\n 23969: a0 = u64 [sp + 0x58]\n 23972: u64 [sp + 0x1e0] = a0\n 23976: a0 = u64 [sp + 0x40]\n 23979: u64 [sp + 0x1f8] = a0\n 23983: u64 [sp + 536] = 0\n 23987: u64 [sp + 528] = 0\n 23991: u64 [sp + 520] = 0\n 23995: u64 [sp + 512] = 0\n 23999: u32 [sp + 448] = 0x20\n 24004: i32 a1 = sp + 0x1e0\n 24008: i32 a3 = sp + 0x200\n 24012: i32 a4 = sp + 0x1c0\n 24016: a2 = 0xffffffffffffffff\n 24019: a0 = 0\n 24021: ecalli 4 // 'get_storage'\n 24023: a0 = u64 [sp + 0x40]\n 24026: u64 [sp + 0x1f8] = a0\n 24030: a0 = u64 [sp + 0x48]\n 24033: u64 [sp + 0x1f0] = a0\n 24037: a0 = u64 [sp + 0x50]\n 24040: u64 [sp + 0x1e8] = a0\n 24044: a0 = u64 [sp + 0x58]\n 24047: u64 [sp + 0x1e0] = a0\n 24051: a0 = u64 [sp + 0x28]\n 24054: u64 [sp + 0x218] = a0\n 24058: u64 [sp + 0x210] = s1\n 24062: a0 = u64 [sp + 0x30]\n 24065: u64 [sp + 0x208] = a0\n 24069: a0 = u64 [sp + 0x38]\n 24072: u64 [sp + 0x200] = a0\n 24076: i32 a1 = sp + 0x1e0\n 24080: i32 a3 = sp + 0x200\n 24084: a2 = 0xffffffffffffffff\n 24087: a4 = 0x20\n 24090: a0 = 0\n 24092: ecalli 8 // 'set_storage'\n 24094: sp = s0 + 0xfffffffffffffdc0\n 24098: ra = u64 [sp + 0x238]\n 24102: s0 = u64 [sp + 0x230]\n 24106: s1 = u64 [sp + 0x228]\n 24110: sp = sp + 0x240\n 24114: ret\n      : @348 (gas: 3)\n 24116: a0 = 0x40\n 24119: a1 = 0x20\n 24122: ra = 324, jump @0\n      : @349 [@dyn 162] (gas: 103)\n 24128: a1 = u8 [a0 + 0x11]\n 24131: a2 = u8 [a0 + 0x10]\n 24134: a3 = u8 [a0 + 0x12]\n 24137: a4 = u8 [a0 + 0x13]\n 24140: a1 = a1 << 0x8\n 24143: a1 = a1 | a2\n 24146: a3 = a3 << 0x10\n 24149: a4 = a4 << 0x18\n 24152: a3 = a3 | a4\n 24155: a1 = a1 | a3\n 24158: a2 = u8 [a0 + 0x15]\n 24161: a3 = u8 [a0 + 0x14]\n 24164: a4 = u8 [a0 + 0x16]\n 24167: a5 = u8 [a0 + 0x17]\n 24170: a2 = a2 << 0x8\n 24173: a2 = a2 | a3\n 24176: a4 = a4 << 0x10\n 24179: a5 = a5 << 0x18\n 24182: a4 = a4 | a5\n 24185: a2 = a2 | a4\n 24188: a2 = a2 << 0x20\n 24191: t0 = a2 | a1\n 24194: a2 = u8 [a0 + 0x1]\n 24197: a3 = u8 [a0]\n 24199: a4 = u8 [a0 + 0x2]\n 24202: a5 = u8 [a0 + 0x3]\n 24205: a2 = a2 << 0x8\n 24208: a2 = a2 | a3\n 24211: a4 = a4 << 0x10\n 24214: a5 = a5 << 0x18\n 24217: a4 = a4 | a5\n 24220: a2 = a2 | a4\n 24223: a3 = u8 [a0 + 0x5]\n 24226: a4 = u8 [a0 + 0x4]\n 24229: a5 = u8 [a0 + 0x6]\n 24232: s1 = u8 [a0 + 0x7]\n 24235: a3 = a3 << 0x8\n 24238: a3 = a3 | a4\n 24241: a5 = a5 << 0x10\n 24244: s1 = s1 << 0x18\n 24247: a5 = a5 | s1\n 24250: a3 = a3 | a5\n 24253: a3 = a3 << 0x20\n 24256: a2 = a2 | a3\n 24259: a3 = u8 [a0 + 0x19]\n 24262: a4 = u8 [a0 + 0x18]\n 24265: a5 = u8 [a0 + 0x1a]\n 24268: s1 = u8 [a0 + 0x1b]\n 24271: a3 = a3 << 0x8\n 24274: a3 = a3 | a4\n 24277: a5 = a5 << 0x10\n 24280: s1 = s1 << 0x18\n 24283: a5 = a5 | s1\n 24286: a3 = a3 | a5\n 24289: a4 = u8 [a0 + 0x1d]\n 24292: a5 = u8 [a0 + 0x1c]\n 24295: s1 = u8 [a0 + 0x1e]\n 24298: a1 = u8 [a0 + 0x1f]\n 24301: a4 = a4 << 0x8\n 24304: a4 = a4 | a5\n 24307: s1 = s1 << 0x10\n 24310: a1 = a1 << 0x18\n 24313: a1 = a1 | s1\n 24316: a1 = a1 | a4\n 24319: a1 = a1 << 0x20\n 24322: a3 = a3 | a1\n 24325: a1 = u8 [a0 + 0x9]\n 24328: a4 = u8 [a0 + 0x8]\n 24331: a5 = u8 [a0 + 0xa]\n 24334: s1 = u8 [a0 + 0xb]\n 24337: a1 = a1 << 0x8\n 24340: a1 = a1 | a4\n 24343: a5 = a5 << 0x10\n 24346: s1 = s1 << 0x18\n 24349: a5 = a5 | s1\n 24352: a1 = a1 | a5\n 24355: a4 = u8 [a0 + 0xd]\n 24358: a5 = u8 [a0 + 0xc]\n 24361: s1 = u8 [a0 + 0xe]\n 24364: a0 = u8 [a0 + 0xf]\n 24367: a4 = a4 << 0x8\n 24370: a4 = a4 | a5\n 24373: s1 = s1 << 0x10\n 24376: a0 = a0 << 0x18\n 24379: a0 = a0 | s1\n 24382: a0 = a0 | a4\n 24385: a0 = a0 << 0x20\n 24388: a0 = a0 | a1\n 24391: s1 = reverse a0\n 24393: a1 = reverse a3\n 24395: a2 = reverse a2\n 24397: a0 = reverse t0\n 24399: u64 [sp + 0x58] = a0\n 24402: u64 [sp + 0x50] = a2\n 24405: a0 = a0 | a2\n 24408: a2 = a1\n 24410: a1 = a1 | s1\n 24413: a1 = a1 | a0\n 24416: a1 = a1 >> 0x20\n 24419: a0 = a0 | s1\n 24422: a0 = a0 << 0x20\n 24425: a0 = a0 | a1\n 24428: jump @359 if a0 != 0\n      : @350 (gas: 5)\n 24432: u64 [sp + 0x48] = a2\n 24435: i32 a0 = a2 + 0\n 24437: a1 = 0x20\n 24440: u64 [sp + 0x40] = a0\n 24443: ra = 326, jump @0\n      : @351 [@dyn 163] (gas: 50)\n 24449: u8 [a0 + 31] = 0\n 24452: u8 [a0 + 30] = 0\n 24455: u8 [a0 + 29] = 0\n 24458: u8 [a0 + 28] = 0\n 24461: u8 [a0 + 27] = 0\n 24464: u8 [a0 + 26] = 0\n 24467: u8 [a0 + 25] = 0\n 24470: u8 [a0 + 24] = 0\n 24473: u8 [a0 + 23] = 0\n 24476: u8 [a0 + 22] = 0\n 24479: u8 [a0 + 21] = 0\n 24482: u8 [a0 + 20] = 0\n 24485: u8 [a0 + 19] = 0\n 24488: u8 [a0 + 18] = 0\n 24491: u8 [a0 + 17] = 0\n 24494: u8 [a0 + 16] = 0\n 24497: u8 [a0 + 15] = 0\n 24500: u8 [a0 + 14] = 0\n 24503: u8 [a0 + 13] = 0\n 24506: u8 [a0 + 12] = 0\n 24509: u8 [a0 + 11] = 0\n 24512: u8 [a0 + 10] = 0\n 24515: u8 [a0 + 9] = 0\n 24518: u8 [a0 + 8] = 0\n 24521: u8 [a0 + 7] = 0\n 24524: u8 [a0 + 6] = 0\n 24527: u8 [a0 + 5] = 0\n 24530: u8 [a0 + 4] = 0\n 24533: u8 [a0 + 3] = 0xa0\n 24538: u8 [a0 + 2] = 0x79\n 24542: u8 [a0 + 1] = 0xc3\n 24547: u8 [a0 + 0] = 0x8\n 24550: a1 = u64 [sp + 0x48]\n 24553: a0 = a1 + 0x4\n 24556: a1 = a0 <u a1\n 24559: a3 = u64 [sp + 0x58]\n 24562: a2 = a3 + a1\n 24565: a3 = a2 <u a3\n 24568: a3 = a1 if a1 == 0\n 24571: a3 = a3 + s1\n 24574: a1 = a3 <u s1\n 24577: a4 = u64 [sp + 0x50]\n 24580: a4 = a4 + a1\n 24583: u64 [sp + 0x68] = a2\n 24586: u64 [sp + 0x60] = a0\n 24589: u64 [sp + 0x70] = a3\n 24592: a0 = sp + 0x80\n 24596: a1 = sp + 0x60\n 24599: u64 [sp + 0x78] = a4\n 24602: ra = 328, jump @322\n      : @352 [@dyn 164] (gas: 5)\n 24608: a0 = u64 [sp + 0x88]\n 24612: t0 = u64 [sp + 0x98]\n 24616: t1 = u64 [sp + 0x80]\n 24620: a3 = u64 [sp + 0x90]\n 24624: jump @358\n      : @353 (gas: 3)\n 24627: a0 = 0x40\n 24630: a1 = 0x20\n 24633: ra = 330, jump @0\n      : @354 [@dyn 165] (gas: 103)\n 24639: a1 = u8 [a0 + 0x11]\n 24642: a2 = u8 [a0 + 0x10]\n 24645: a3 = u8 [a0 + 0x12]\n 24648: a4 = u8 [a0 + 0x13]\n 24651: a1 = a1 << 0x8\n 24654: a1 = a1 | a2\n 24657: a3 = a3 << 0x10\n 24660: a4 = a4 << 0x18\n 24663: a3 = a3 | a4\n 24666: a1 = a1 | a3\n 24669: a2 = u8 [a0 + 0x15]\n 24672: a3 = u8 [a0 + 0x14]\n 24675: a4 = u8 [a0 + 0x16]\n 24678: a5 = u8 [a0 + 0x17]\n 24681: a2 = a2 << 0x8\n 24684: a2 = a2 | a3\n 24687: a4 = a4 << 0x10\n 24690: a5 = a5 << 0x18\n 24693: a4 = a4 | a5\n 24696: a2 = a2 | a4\n 24699: a2 = a2 << 0x20\n 24702: t0 = a2 | a1\n 24705: a2 = u8 [a0 + 0x1]\n 24708: a3 = u8 [a0]\n 24710: a4 = u8 [a0 + 0x2]\n 24713: a5 = u8 [a0 + 0x3]\n 24716: a2 = a2 << 0x8\n 24719: a2 = a2 | a3\n 24722: a4 = a4 << 0x10\n 24725: a5 = a5 << 0x18\n 24728: a4 = a4 | a5\n 24731: a2 = a2 | a4\n 24734: a3 = u8 [a0 + 0x5]\n 24737: a4 = u8 [a0 + 0x4]\n 24740: a5 = u8 [a0 + 0x6]\n 24743: s1 = u8 [a0 + 0x7]\n 24746: a3 = a3 << 0x8\n 24749: a3 = a3 | a4\n 24752: a5 = a5 << 0x10\n 24755: s1 = s1 << 0x18\n 24758: a5 = a5 | s1\n 24761: a3 = a3 | a5\n 24764: a3 = a3 << 0x20\n 24767: a2 = a2 | a3\n 24770: a3 = u8 [a0 + 0x19]\n 24773: a4 = u8 [a0 + 0x18]\n 24776: a5 = u8 [a0 + 0x1a]\n 24779: s1 = u8 [a0 + 0x1b]\n 24782: a3 = a3 << 0x8\n 24785: a3 = a3 | a4\n 24788: a5 = a5 << 0x10\n 24791: s1 = s1 << 0x18\n 24794: a5 = a5 | s1\n 24797: a3 = a3 | a5\n 24800: a4 = u8 [a0 + 0x1d]\n 24803: a5 = u8 [a0 + 0x1c]\n 24806: s1 = u8 [a0 + 0x1e]\n 24809: a1 = u8 [a0 + 0x1f]\n 24812: a4 = a4 << 0x8\n 24815: a4 = a4 | a5\n 24818: s1 = s1 << 0x10\n 24821: a1 = a1 << 0x18\n 24824: a1 = a1 | s1\n 24827: a1 = a1 | a4\n 24830: a1 = a1 << 0x20\n 24833: a3 = a3 | a1\n 24836: a1 = u8 [a0 + 0x9]\n 24839: a4 = u8 [a0 + 0x8]\n 24842: a5 = u8 [a0 + 0xa]\n 24845: s1 = u8 [a0 + 0xb]\n 24848: a1 = a1 << 0x8\n 24851: a1 = a1 | a4\n 24854: a5 = a5 << 0x10\n 24857: s1 = s1 << 0x18\n 24860: a5 = a5 | s1\n 24863: a1 = a1 | a5\n 24866: a4 = u8 [a0 + 0xd]\n 24869: a5 = u8 [a0 + 0xc]\n 24872: s1 = u8 [a0 + 0xe]\n 24875: a0 = u8 [a0 + 0xf]\n 24878: a4 = a4 << 0x8\n 24881: a4 = a4 | a5\n 24884: s1 = s1 << 0x10\n 24887: a0 = a0 << 0x18\n 24890: a0 = a0 | s1\n 24893: a0 = a0 | a4\n 24896: a0 = a0 << 0x20\n 24899: a0 = a0 | a1\n 24902: s1 = reverse a0\n 24904: a1 = reverse a3\n 24906: a2 = reverse a2\n 24908: a0 = reverse t0\n 24910: u64 [sp + 0x58] = a0\n 24913: u64 [sp + 0x50] = a2\n 24916: a0 = a0 | a2\n 24919: a2 = a1\n 24921: a1 = a1 | s1\n 24924: a1 = a1 | a0\n 24927: a1 = a1 >> 0x20\n 24930: a0 = a0 | s1\n 24933: a0 = a0 << 0x20\n 24936: a0 = a0 | a1\n 24939: jump @359 if a0 != 0\n      : @355 (gas: 5)\n 24943: u64 [sp + 0x48] = a2\n 24946: i32 a0 = a2 + 0\n 24948: a1 = 0x20\n 24951: u64 [sp + 0x40] = a0\n 24954: ra = 332, jump @0\n      : @356 [@dyn 166] (gas: 50)\n 24960: u8 [a0 + 31] = 0\n 24963: u8 [a0 + 30] = 0\n 24966: u8 [a0 + 29] = 0\n 24969: u8 [a0 + 28] = 0\n 24972: u8 [a0 + 27] = 0\n 24975: u8 [a0 + 26] = 0\n 24978: u8 [a0 + 25] = 0\n 24981: u8 [a0 + 24] = 0\n 24984: u8 [a0 + 23] = 0\n 24987: u8 [a0 + 22] = 0\n 24990: u8 [a0 + 21] = 0\n 24993: u8 [a0 + 20] = 0\n 24996: u8 [a0 + 19] = 0\n 24999: u8 [a0 + 18] = 0\n 25002: u8 [a0 + 17] = 0\n 25005: u8 [a0 + 16] = 0\n 25008: u8 [a0 + 15] = 0\n 25011: u8 [a0 + 14] = 0\n 25014: u8 [a0 + 13] = 0\n 25017: u8 [a0 + 12] = 0\n 25020: u8 [a0 + 11] = 0\n 25023: u8 [a0 + 10] = 0\n 25026: u8 [a0 + 9] = 0\n 25029: u8 [a0 + 8] = 0\n 25032: u8 [a0 + 7] = 0\n 25035: u8 [a0 + 6] = 0\n 25038: u8 [a0 + 5] = 0\n 25041: u8 [a0 + 4] = 0\n 25044: u8 [a0 + 3] = 0xa0\n 25049: u8 [a0 + 2] = 0x79\n 25053: u8 [a0 + 1] = 0xc3\n 25058: u8 [a0 + 0] = 0x8\n 25061: a1 = u64 [sp + 0x48]\n 25064: a0 = a1 + 0x4\n 25067: a1 = a0 <u a1\n 25070: a3 = u64 [sp + 0x58]\n 25073: a2 = a3 + a1\n 25076: a3 = a2 <u a3\n 25079: a3 = a1 if a1 == 0\n 25082: a3 = a3 + s1\n 25085: a1 = a3 <u s1\n 25088: a4 = u64 [sp + 0x50]\n 25091: a4 = a4 + a1\n 25094: u64 [sp + 0x168] = a2\n 25098: u64 [sp + 0x160] = a0\n 25102: u64 [sp + 0x170] = a3\n 25106: a0 = sp + 0x180\n 25110: a1 = sp + 0x160\n 25114: u64 [sp + 0x178] = a4\n 25118: ra = 334, jump @330\n      : @357 [@dyn 167] (gas: 5)\n 25124: a0 = u64 [sp + 0x188]\n 25128: t0 = u64 [sp + 0x198]\n 25132: t1 = u64 [sp + 0x180]\n 25136: a3 = u64 [sp + 0x190]\n 25140: fallthrough\n      : @358 (gas: 26)\n 25141: a1 = u64 [sp + 0x58]\n 25144: a4 = a0 ^ a1\n 25147: a5 = a0 <u a1\n 25150: t2 = a1\n 25152: a2 = u64 [sp + 0x48]\n 25155: a1 = t1 <u a2\n 25158: a5 = a1 if a4 == 0\n 25161: a4 = a3 - s1\n 25164: a3 = a3 <u s1\n 25167: s1 = u64 [sp + 0x50]\n 25170: s1 = t0 - s1\n 25173: s1 = s1 - a3\n 25176: a3 = a4 <u a5\n 25179: s1 = s1 - a3\n 25182: a4 = a4 - a5\n 25185: a0 = a0 - t2\n 25188: a1 = a0 - a1\n 25191: a0 = t1 - a2\n 25194: a1 = a1 | s1\n 25197: a2 = a0 | a4\n 25200: a2 = a2 | a1\n 25203: a1 = a1 | a4\n 25206: a2 = a2 >> 0x20\n 25209: a1 = a1 << 0x20\n 25212: a1 = a1 | a2\n 25215: jump @364 if a1 == 0\n      : @359 (gas: 1)\n 25218: trap\n      : @360 (gas: 8)\n 25219: u64 [sp + 208] = 0\n 25223: u64 [sp + 200] = 0\n 25227: u64 [sp + 192] = 0\n 25231: a0 = 0x4e487b7100000000\n 25241: a1 = sp + 0xc0\n 25245: u64 [sp + 0xd8] = a0\n 25249: a0 = 0\n 25251: ra = 336, jump @8\n      : @361 [@dyn 168] (gas: 7)\n 25257: u64 [sp + 184] = 0\n 25261: u64 [sp + 176] = 0\n 25265: u64 [sp + 160] = 0x11\n 25270: a0 = 0x4\n 25273: a1 = sp + 0xa0\n 25277: u64 [sp + 168] = 0\n 25281: ra = 338, jump @8\n      : @362 [@dyn 169] (gas: 3)\n 25287: a1 = 0x24\n 25290: a0 = 0\n 25292: ra = 340, jump @0\n      : @363 [@dyn 170] (gas: 5)\n 25298: i32 a1 = a0 + 0\n 25300: a0 = 0x1\n 25303: a2 = 0x24\n 25306: ecalli 6 // 'seal_return'\n 25308: fallthrough\n      : @364 (gas: 4)\n 25309: i32 s1 = a0 + 0\n 25311: a0 = u64 [sp + 0x40]\n 25314: a1 = s1\n 25316: ra = 342, jump @0\n      : @365 [@dyn 171] (gas: 6)\n 25322: i32 a1 = a0 + 0\n 25324: a0 = 0x1\n 25327: a2 = s1\n 25329: ra = 0x158\n 25333: ecalli 6 // 'seal_return'\n 25335: fallthrough\n      : @366 [@dyn 172] (gas: 12)\n 25336: a1 = u64 [a0 + 0x10]\n 25339: a2 = u64 [a0 + 0x18]\n 25342: a3 = u64 [a0 + 0x8]\n 25345: a0 = u64 [a0]\n 25347: a2 = a2 | a3\n 25350: a3 = a0 | a1\n 25353: a3 = a3 | a2\n 25356: a3 = a3 >> 0x20\n 25359: a1 = a1 | a2\n 25362: a1 = a1 << 0x20\n 25365: a1 = a1 | a3\n 25368: jump @369 if a1 != 0\n      : @367 (gas: 7)\n 25372: sp = sp + 0xfffffffffffffff0\n 25375: u64 [sp + 0x8] = ra\n 25378: u64 [sp] = s0\n 25380: i32 a0 = a0 + 0\n 25382: a1 = 0x20\n 25385: s0 = 0x20\n 25388: ra = 346, jump @0\n      : @368 [@dyn 173] (gas: 40)\n 25394: u8 [a0 + 31] = 0\n 25397: u8 [a0 + 30] = 0\n 25400: u8 [a0 + 29] = 0\n 25403: u8 [a0 + 28] = 0\n 25406: u8 [a0 + 27] = 0\n 25409: u8 [a0 + 26] = 0\n 25412: u8 [a0 + 25] = 0\n 25415: u8 [a0 + 24] = 0\n 25418: u8 [a0 + 23] = 0\n 25421: u8 [a0 + 22] = 0\n 25424: u8 [a0 + 21] = 0\n 25427: u8 [a0 + 20] = 0\n 25430: u8 [a0 + 19] = 0\n 25433: u8 [a0 + 18] = 0\n 25436: u8 [a0 + 17] = 0x2e\n 25440: u8 [a0 + 16] = 0x64\n 25444: u8 [a0 + 15] = 0x65\n 25448: u8 [a0 + 14] = 0x74\n 25452: a3 = 0x6f\n 25455: u8 [a0 + 0xd] = a3\n 25458: u8 [a0 + 12] = 0x76\n 25462: u8 [a0 + 0xb] = s0\n 25465: a4 = 0x79\n 25468: u8 [a0 + 0xa] = a4\n 25471: u8 [a0 + 9] = 0x64\n 25475: u8 [a0 + 8] = 0x61\n 25479: u8 [a0 + 7] = 0x65\n 25483: u8 [a0 + 6] = 0x72\n 25487: a2 = 0x6c\n 25490: u8 [a0 + 0x5] = a2\n 25493: u8 [a0 + 4] = 0x61\n 25497: u8 [a0 + 0x3] = s0\n 25500: u8 [a0 + 2] = 0x75\n 25504: u8 [a0 + 0x1] = a3\n 25507: a1 = 0x59\n 25510: u8 [a0] = a1\n 25512: ra = u64 [sp + 0x8]\n 25515: s0 = u64 [sp]\n 25517: sp = sp + 0x10\n 25520: ret\n      : @369 (gas: 1)\n 25522: trap\n      : @370 (gas: 17)\n 25523: sp = sp + 0xffffffffffffffa0\n 25526: u64 [sp + 0x58] = ra\n 25529: u64 [sp + 0x50] = s0\n 25532: u64 [sp + 0x48] = s1\n 25535: a3 = u64 [a1 + 0x18]\n 25538: a4 = u64 [a1 + 0x10]\n 25541: a5 = u64 [a1 + 0x8]\n 25544: s1 = u64 [a1]\n 25546: a1 = a5 | a3\n 25549: a2 = s1 | a4\n 25552: a2 = a2 | a1\n 25555: a2 = a2 >> 0x20\n 25558: a1 = a1 | a4\n 25561: a1 = a1 << 0x20\n 25564: a1 = a1 | a2\n 25567: u64 [sp + 0x28] = a0\n 25570: jump @377 if a1 != 0\n      : @371 (gas: 19)\n 25574: a0 = s1 + 0x20\n 25577: u64 [sp + 0x30] = a0\n 25580: a0 = a0 <u s1\n 25583: a1 = a5 + a0\n 25586: u64 [sp + 0x40] = a1\n 25589: u64 [sp + 0x8] = a5\n 25592: s0 = a1 <u a5\n 25595: s0 = a0 if a0 == 0\n 25598: s0 = s0 + a4\n 25601: u64 [sp + 0x10] = a4\n 25604: a0 = s0 <u a4\n 25607: u64 [sp + 0x18] = a3\n 25610: a0 = a0 + a3\n 25613: u64 [sp + 0x38] = a0\n 25616: u64 [sp] = s1\n 25618: i32 a0 = s1 + 0\n 25620: a1 = 0x20\n 25623: s1 = 0x20\n 25626: ra = 348, jump @0\n      : @372 [@dyn 174] (gas: 45)\n 25632: u8 [a0 + 0x1f] = s1\n 25635: a1 = u64 [sp + 0x30]\n 25638: s1 = a1\n 25640: a1 = a1 | s0\n 25643: a2 = u64 [sp + 0x40]\n 25646: a4 = u64 [sp + 0x38]\n 25649: a2 = a2 | a4\n 25652: a1 = a1 | a2\n 25655: a1 = a1 >> 0x20\n 25658: u64 [sp + 0x20] = s0\n 25661: a2 = a2 | s0\n 25664: a2 = a2 << 0x20\n 25667: a1 = a1 | a2\n 25670: u8 [a0 + 30] = 0\n 25673: u8 [a0 + 29] = 0\n 25676: u8 [a0 + 28] = 0\n 25679: u8 [a0 + 27] = 0\n 25682: u8 [a0 + 26] = 0\n 25685: u8 [a0 + 25] = 0\n 25688: u8 [a0 + 24] = 0\n 25691: u8 [a0 + 23] = 0\n 25694: u8 [a0 + 22] = 0\n 25697: u8 [a0 + 21] = 0\n 25700: u8 [a0 + 20] = 0\n 25703: u8 [a0 + 19] = 0\n 25706: u8 [a0 + 18] = 0\n 25709: u8 [a0 + 17] = 0\n 25712: u8 [a0 + 16] = 0\n 25715: u8 [a0 + 15] = 0\n 25718: u8 [a0 + 14] = 0\n 25721: u8 [a0 + 13] = 0\n 25724: u8 [a0 + 12] = 0\n 25727: u8 [a0 + 11] = 0\n 25730: u8 [a0 + 10] = 0\n 25733: u8 [a0 + 9] = 0\n 25736: u8 [a0 + 8] = 0\n 25739: u8 [a0 + 7] = 0\n 25742: u8 [a0 + 6] = 0\n 25745: u8 [a0 + 5] = 0\n 25748: u8 [a0 + 4] = 0\n 25751: u8 [a0 + 3] = 0\n 25754: u8 [a0 + 2] = 0\n 25757: u8 [a0 + 1] = 0\n 25760: u8 [a0 + 0] = 0\n 25762: jump @377 if a1 != 0\n      : @373 (gas: 4)\n 25766: i32 s0 = s1 + 0\n 25768: a1 = 0x20\n 25771: a0 = s0\n 25773: ra = 350, jump @0\n      : @374 [@dyn 175] (gas: 41)\n 25779: u8 [a0 + 31] = 0x12\n 25783: u8 [a0 + 30] = 0\n 25786: u8 [a0 + 29] = 0\n 25789: u8 [a0 + 28] = 0\n 25792: u8 [a0 + 27] = 0\n 25795: u8 [a0 + 26] = 0\n 25798: u8 [a0 + 25] = 0\n 25801: u8 [a0 + 24] = 0\n 25804: u8 [a0 + 23] = 0\n 25807: u8 [a0 + 22] = 0\n 25810: u8 [a0 + 21] = 0\n 25813: u8 [a0 + 20] = 0\n 25816: u8 [a0 + 19] = 0\n 25819: u8 [a0 + 18] = 0\n 25822: u8 [a0 + 17] = 0\n 25825: u8 [a0 + 16] = 0\n 25828: u8 [a0 + 15] = 0\n 25831: u8 [a0 + 14] = 0\n 25834: u8 [a0 + 13] = 0\n 25837: u8 [a0 + 12] = 0\n 25840: u8 [a0 + 11] = 0\n 25843: u8 [a0 + 10] = 0\n 25846: u8 [a0 + 9] = 0\n 25849: u8 [a0 + 8] = 0\n 25852: u8 [a0 + 7] = 0\n 25855: u8 [a0 + 6] = 0\n 25858: u8 [a0 + 5] = 0\n 25861: u8 [a0 + 4] = 0\n 25864: u8 [a0 + 3] = 0\n 25867: u8 [a0 + 2] = 0\n 25870: u8 [a0 + 1] = 0\n 25873: a1 = u64 [sp + 0x20]\n 25876: a2 = u64 [sp + 0x38]\n 25879: a1 = a1 | a2\n 25882: a2 = 0xffffffe0\n 25892: a2 = s1 <u a2\n 25895: a3 = u64 [sp + 0x40]\n 25898: a2 = 0 if a3 != 0\n 25900: a2 = 0 if a1 != 0\n 25902: u8 [a0 + 0] = 0\n 25904: jump @377 if a2 == 0\n      : @375 (gas: 3)\n 25908: i32 a0 = s0 + 0x20\n 25911: a1 = 0x20\n 25914: ra = 352, jump @0\n      : @376 [@dyn 176] (gas: 55)\n 25920: u8 [a0 + 31] = 0\n 25923: u8 [a0 + 30] = 0\n 25926: u8 [a0 + 29] = 0\n 25929: u8 [a0 + 28] = 0\n 25932: u8 [a0 + 27] = 0\n 25935: u8 [a0 + 26] = 0\n 25938: u8 [a0 + 25] = 0\n 25941: u8 [a0 + 24] = 0\n 25944: u8 [a0 + 23] = 0\n 25947: u8 [a0 + 22] = 0\n 25950: u8 [a0 + 21] = 0\n 25953: u8 [a0 + 20] = 0\n 25956: u8 [a0 + 19] = 0\n 25959: u8 [a0 + 18] = 0\n 25962: u8 [a0 + 17] = 0x2e\n 25966: u8 [a0 + 16] = 0x64\n 25970: u8 [a0 + 15] = 0x65\n 25974: u8 [a0 + 14] = 0x74\n 25978: u8 [a0 + 13] = 0x6f\n 25982: u8 [a0 + 12] = 0x76\n 25986: a5 = 0x20\n 25989: u8 [a0 + 0xb] = a5\n 25992: u8 [a0 + 10] = 0x79\n 25996: u8 [a0 + 9] = 0x64\n 26000: u8 [a0 + 8] = 0x61\n 26004: u8 [a0 + 7] = 0x65\n 26008: u8 [a0 + 6] = 0x72\n 26012: u8 [a0 + 5] = 0x6c\n 26016: u8 [a0 + 4] = 0x61\n 26020: u8 [a0 + 0x3] = a5\n 26023: u8 [a0 + 2] = 0x75\n 26027: u8 [a0 + 1] = 0x6f\n 26031: u8 [a0 + 0] = 0x59\n 26034: a1 = u64 [sp]\n 26036: a0 = a1 + 0x60\n 26039: a1 = a0 <u a1\n 26042: a3 = u64 [sp + 0x8]\n 26045: a2 = a3 + a1\n 26048: a3 = a2 <u a3\n 26051: a3 = a1 if a1 == 0\n 26054: a1 = u64 [sp + 0x10]\n 26057: a3 = a3 + a1\n 26060: a1 = a3 <u a1\n 26063: a4 = u64 [sp + 0x18]\n 26066: a1 = a1 + a4\n 26069: a4 = u64 [sp + 0x28]\n 26072: u64 [a4] = a0\n 26074: u64 [a4 + 0x8] = a2\n 26077: u64 [a4 + 0x10] = a3\n 26080: u64 [a4 + 0x18] = a1\n 26083: ra = u64 [sp + 0x58]\n 26086: s0 = u64 [sp + 0x50]\n 26089: s1 = u64 [sp + 0x48]\n 26092: sp = sp + 0x60\n 26095: ret\n      : @377 (gas: 1)\n 26097: trap\n      : @378 (gas: 17)\n 26098: sp = sp + 0xffffffffffffffa0\n 26101: u64 [sp + 0x58] = ra\n 26104: u64 [sp + 0x50] = s0\n 26107: u64 [sp + 0x48] = s1\n 26110: a3 = u64 [a1 + 0x18]\n 26113: a4 = u64 [a1 + 0x10]\n 26116: a5 = u64 [a1 + 0x8]\n 26119: s1 = u64 [a1]\n 26121: a1 = a5 | a3\n 26124: a2 = s1 | a4\n 26127: a2 = a2 | a1\n 26130: a2 = a2 >> 0x20\n 26133: a1 = a1 | a4\n 26136: a1 = a1 << 0x20\n 26139: a1 = a1 | a2\n 26142: u64 [sp + 0x28] = a0\n 26145: jump @385 if a1 != 0\n      : @379 (gas: 19)\n 26149: a0 = s1 + 0x20\n 26152: u64 [sp + 0x30] = a0\n 26155: a0 = a0 <u s1\n 26158: a1 = a5 + a0\n 26161: u64 [sp + 0x40] = a1\n 26164: u64 [sp + 0x8] = a5\n 26167: s0 = a1 <u a5\n 26170: s0 = a0 if a0 == 0\n 26173: s0 = s0 + a4\n 26176: u64 [sp + 0x10] = a4\n 26179: a0 = s0 <u a4\n 26182: u64 [sp + 0x18] = a3\n 26185: a0 = a0 + a3\n 26188: u64 [sp + 0x38] = a0\n 26191: u64 [sp] = s1\n 26193: i32 a0 = s1 + 0\n 26195: a1 = 0x20\n 26198: s1 = 0x20\n 26201: ra = 354, jump @0\n      : @380 [@dyn 177] (gas: 45)\n 26207: u8 [a0 + 0x1f] = s1\n 26210: a1 = u64 [sp + 0x30]\n 26213: s1 = a1\n 26215: a1 = a1 | s0\n 26218: a2 = u64 [sp + 0x40]\n 26221: a4 = u64 [sp + 0x38]\n 26224: a2 = a2 | a4\n 26227: a1 = a1 | a2\n 26230: a1 = a1 >> 0x20\n 26233: u64 [sp + 0x20] = s0\n 26236: a2 = a2 | s0\n 26239: a2 = a2 << 0x20\n 26242: a1 = a1 | a2\n 26245: u8 [a0 + 30] = 0\n 26248: u8 [a0 + 29] = 0\n 26251: u8 [a0 + 28] = 0\n 26254: u8 [a0 + 27] = 0\n 26257: u8 [a0 + 26] = 0\n 26260: u8 [a0 + 25] = 0\n 26263: u8 [a0 + 24] = 0\n 26266: u8 [a0 + 23] = 0\n 26269: u8 [a0 + 22] = 0\n 26272: u8 [a0 + 21] = 0\n 26275: u8 [a0 + 20] = 0\n 26278: u8 [a0 + 19] = 0\n 26281: u8 [a0 + 18] = 0\n 26284: u8 [a0 + 17] = 0\n 26287: u8 [a0 + 16] = 0\n 26290: u8 [a0 + 15] = 0\n 26293: u8 [a0 + 14] = 0\n 26296: u8 [a0 + 13] = 0\n 26299: u8 [a0 + 12] = 0\n 26302: u8 [a0 + 11] = 0\n 26305: u8 [a0 + 10] = 0\n 26308: u8 [a0 + 9] = 0\n 26311: u8 [a0 + 8] = 0\n 26314: u8 [a0 + 7] = 0\n 26317: u8 [a0 + 6] = 0\n 26320: u8 [a0 + 5] = 0\n 26323: u8 [a0 + 4] = 0\n 26326: u8 [a0 + 3] = 0\n 26329: u8 [a0 + 2] = 0\n 26332: u8 [a0 + 1] = 0\n 26335: u8 [a0 + 0] = 0\n 26337: jump @385 if a1 != 0\n      : @381 (gas: 4)\n 26341: i32 s0 = s1 + 0\n 26343: a1 = 0x20\n 26346: a0 = s0\n 26348: ra = 356, jump @0\n      : @382 [@dyn 178] (gas: 41)\n 26354: u8 [a0 + 31] = 0x1e\n 26358: u8 [a0 + 30] = 0\n 26361: u8 [a0 + 29] = 0\n 26364: u8 [a0 + 28] = 0\n 26367: u8 [a0 + 27] = 0\n 26370: u8 [a0 + 26] = 0\n 26373: u8 [a0 + 25] = 0\n 26376: u8 [a0 + 24] = 0\n 26379: u8 [a0 + 23] = 0\n 26382: u8 [a0 + 22] = 0\n 26385: u8 [a0 + 21] = 0\n 26388: u8 [a0 + 20] = 0\n 26391: u8 [a0 + 19] = 0\n 26394: u8 [a0 + 18] = 0\n 26397: u8 [a0 + 17] = 0\n 26400: u8 [a0 + 16] = 0\n 26403: u8 [a0 + 15] = 0\n 26406: u8 [a0 + 14] = 0\n 26409: u8 [a0 + 13] = 0\n 26412: u8 [a0 + 12] = 0\n 26415: u8 [a0 + 11] = 0\n 26418: u8 [a0 + 10] = 0\n 26421: u8 [a0 + 9] = 0\n 26424: u8 [a0 + 8] = 0\n 26427: u8 [a0 + 7] = 0\n 26430: u8 [a0 + 6] = 0\n 26433: u8 [a0 + 5] = 0\n 26436: u8 [a0 + 4] = 0\n 26439: u8 [a0 + 3] = 0\n 26442: u8 [a0 + 2] = 0\n 26445: u8 [a0 + 1] = 0\n 26448: a1 = u64 [sp + 0x20]\n 26451: a2 = u64 [sp + 0x38]\n 26454: a1 = a1 | a2\n 26457: a2 = 0xffffffe0\n 26467: a2 = s1 <u a2\n 26470: a3 = u64 [sp + 0x40]\n 26473: a2 = 0 if a3 != 0\n 26475: a2 = 0 if a1 != 0\n 26477: u8 [a0 + 0] = 0\n 26479: jump @385 if a2 == 0\n      : @383 (gas: 3)\n 26483: i32 a0 = s0 + 0x20\n 26486: a1 = 0x20\n 26489: ra = 358, jump @0\n      : @384 [@dyn 179] (gas: 54)\n 26495: u8 [a0 + 29] = 0x2e\n 26499: u8 [a0 + 26] = 0x77\n 26503: u8 [a0 + 21] = 0x73\n 26507: u8 [a0 + 17] = 0x73\n 26511: u8 [a0 + 31] = 0\n 26514: u8 [a0 + 30] = 0\n 26517: u8 [a0 + 18] = 0x20\n 26521: u8 [a0 + 15] = 0x20\n 26525: u8 [a0 + 14] = 0x6e\n 26529: u8 [a0 + 25] = 0x6f\n 26533: u8 [a0 + 13] = 0x6f\n 26537: u8 [a0 + 20] = 0x69\n 26541: u8 [a0 + 16] = 0x69\n 26545: u8 [a0 + 12] = 0x69\n 26549: u8 [a0 + 11] = 0x74\n 26553: u8 [a0 + 22] = 0x61\n 26557: u8 [a0 + 10] = 0x61\n 26561: u8 [a0 + 9] = 0x67\n 26565: u8 [a0 + 28] = 0x64\n 26569: u8 [a0 + 19] = 0x64\n 26573: u8 [a0 + 5] = 0x64\n 26577: u8 [a0 + 4] = 0x2d\n 26581: u8 [a0 + 3] = 0x66\n 26585: u8 [a0 + 24] = 0x6c\n 26589: u8 [a0 + 23] = 0x6c\n 26593: u8 [a0 + 7] = 0x6c\n 26597: u8 [a0 + 2] = 0x6c\n 26601: u8 [a0 + 27] = 0x65\n 26605: u8 [a0 + 8] = 0x65\n 26609: u8 [a0 + 6] = 0x65\n 26613: u8 [a0 + 1] = 0x65\n 26617: u8 [a0 + 0] = 0x53\n 26620: a1 = u64 [sp]\n 26622: a0 = a1 + 0x60\n 26625: a1 = a0 <u a1\n 26628: a3 = u64 [sp + 0x8]\n 26631: a2 = a3 + a1\n 26634: a3 = a2 <u a3\n 26637: a3 = a1 if a1 == 0\n 26640: a1 = u64 [sp + 0x10]\n 26643: a3 = a3 + a1\n 26646: a1 = a3 <u a1\n 26649: a4 = u64 [sp + 0x18]\n 26652: a1 = a1 + a4\n 26655: a4 = u64 [sp + 0x28]\n 26658: u64 [a4] = a0\n 26660: u64 [a4 + 0x8] = a2\n 26663: u64 [a4 + 0x10] = a3\n 26666: u64 [a4 + 0x18] = a1\n 26669: ra = u64 [sp + 0x58]\n 26672: s0 = u64 [sp + 0x50]\n 26675: s1 = u64 [sp + 0x48]\n 26678: sp = sp + 0x60\n 26681: ret\n      : @385 (gas: 1)\n 26683: trap\n      : @386 (gas: 17)\n 26684: sp = sp + 0xffffffffffffffa0\n 26687: u64 [sp + 0x58] = ra\n 26690: u64 [sp + 0x50] = s0\n 26693: u64 [sp + 0x48] = s1\n 26696: a3 = u64 [a1 + 0x18]\n 26699: a4 = u64 [a1 + 0x10]\n 26702: a5 = u64 [a1 + 0x8]\n 26705: s1 = u64 [a1]\n 26707: a1 = a5 | a3\n 26710: a2 = s1 | a4\n 26713: a2 = a2 | a1\n 26716: a2 = a2 >> 0x20\n 26719: a1 = a1 | a4\n 26722: a1 = a1 << 0x20\n 26725: a1 = a1 | a2\n 26728: u64 [sp + 0x28] = a0\n 26731: jump @393 if a1 != 0\n      : @387 (gas: 19)\n 26735: a0 = s1 + 0x20\n 26738: u64 [sp + 0x30] = a0\n 26741: a0 = a0 <u s1\n 26744: a1 = a5 + a0\n 26747: u64 [sp + 0x40] = a1\n 26750: u64 [sp + 0x8] = a5\n 26753: s0 = a1 <u a5\n 26756: s0 = a0 if a0 == 0\n 26759: s0 = s0 + a4\n 26762: u64 [sp + 0x10] = a4\n 26765: a0 = s0 <u a4\n 26768: u64 [sp + 0x18] = a3\n 26771: a0 = a0 + a3\n 26774: u64 [sp + 0x38] = a0\n 26777: u64 [sp] = s1\n 26779: i32 a0 = s1 + 0\n 26781: a1 = 0x20\n 26784: s1 = 0x20\n 26787: ra = 360, jump @0\n      : @388 [@dyn 180] (gas: 45)\n 26793: u8 [a0 + 0x1f] = s1\n 26796: a1 = u64 [sp + 0x30]\n 26799: s1 = a1\n 26801: a1 = a1 | s0\n 26804: a2 = u64 [sp + 0x40]\n 26807: a4 = u64 [sp + 0x38]\n 26810: a2 = a2 | a4\n 26813: a1 = a1 | a2\n 26816: a1 = a1 >> 0x20\n 26819: u64 [sp + 0x20] = s0\n 26822: a2 = a2 | s0\n 26825: a2 = a2 << 0x20\n 26828: a1 = a1 | a2\n 26831: u8 [a0 + 30] = 0\n 26834: u8 [a0 + 29] = 0\n 26837: u8 [a0 + 28] = 0\n 26840: u8 [a0 + 27] = 0\n 26843: u8 [a0 + 26] = 0\n 26846: u8 [a0 + 25] = 0\n 26849: u8 [a0 + 24] = 0\n 26852: u8 [a0 + 23] = 0\n 26855: u8 [a0 + 22] = 0\n 26858: u8 [a0 + 21] = 0\n 26861: u8 [a0 + 20] = 0\n 26864: u8 [a0 + 19] = 0\n 26867: u8 [a0 + 18] = 0\n 26870: u8 [a0 + 17] = 0\n 26873: u8 [a0 + 16] = 0\n 26876: u8 [a0 + 15] = 0\n 26879: u8 [a0 + 14] = 0\n 26882: u8 [a0 + 13] = 0\n 26885: u8 [a0 + 12] = 0\n 26888: u8 [a0 + 11] = 0\n 26891: u8 [a0 + 10] = 0\n 26894: u8 [a0 + 9] = 0\n 26897: u8 [a0 + 8] = 0\n 26900: u8 [a0 + 7] = 0\n 26903: u8 [a0 + 6] = 0\n 26906: u8 [a0 + 5] = 0\n 26909: u8 [a0 + 4] = 0\n 26912: u8 [a0 + 3] = 0\n 26915: u8 [a0 + 2] = 0\n 26918: u8 [a0 + 1] = 0\n 26921: u8 [a0 + 0] = 0\n 26923: jump @393 if a1 != 0\n      : @389 (gas: 4)\n 26927: i32 s0 = s1 + 0\n 26929: a1 = 0x20\n 26932: a0 = s0\n 26934: ra = 362, jump @0\n      : @390 [@dyn 181] (gas: 41)\n 26940: u8 [a0 + 31] = 0x19\n 26944: u8 [a0 + 30] = 0\n 26947: u8 [a0 + 29] = 0\n 26950: u8 [a0 + 28] = 0\n 26953: u8 [a0 + 27] = 0\n 26956: u8 [a0 + 26] = 0\n 26959: u8 [a0 + 25] = 0\n 26962: u8 [a0 + 24] = 0\n 26965: u8 [a0 + 23] = 0\n 26968: u8 [a0 + 22] = 0\n 26971: u8 [a0 + 21] = 0\n 26974: u8 [a0 + 20] = 0\n 26977: u8 [a0 + 19] = 0\n 26980: u8 [a0 + 18] = 0\n 26983: u8 [a0 + 17] = 0\n 26986: u8 [a0 + 16] = 0\n 26989: u8 [a0 + 15] = 0\n 26992: u8 [a0 + 14] = 0\n 26995: u8 [a0 + 13] = 0\n 26998: u8 [a0 + 12] = 0\n 27001: u8 [a0 + 11] = 0\n 27004: u8 [a0 + 10] = 0\n 27007: u8 [a0 + 9] = 0\n 27010: u8 [a0 + 8] = 0\n 27013: u8 [a0 + 7] = 0\n 27016: u8 [a0 + 6] = 0\n 27019: u8 [a0 + 5] = 0\n 27022: u8 [a0 + 4] = 0\n 27025: u8 [a0 + 3] = 0\n 27028: u8 [a0 + 2] = 0\n 27031: u8 [a0 + 1] = 0\n 27034: a1 = u64 [sp + 0x20]\n 27037: a2 = u64 [sp + 0x38]\n 27040: a1 = a1 | a2\n 27043: a2 = 0xffffffe0\n 27053: a2 = s1 <u a2\n 27056: a3 = u64 [sp + 0x40]\n 27059: a2 = 0 if a3 != 0\n 27061: a2 = 0 if a1 != 0\n 27063: u8 [a0 + 0] = 0\n 27065: jump @393 if a2 == 0\n      : @391 (gas: 3)\n 27069: i32 a0 = s0 + 0x20\n 27072: a1 = 0x20\n 27075: ra = 364, jump @0\n      : @392 [@dyn 182] (gas: 55)\n 27081: u8 [a0 + 31] = 0\n 27084: u8 [a0 + 30] = 0\n 27087: u8 [a0 + 29] = 0\n 27090: u8 [a0 + 28] = 0\n 27093: u8 [a0 + 27] = 0\n 27096: u8 [a0 + 26] = 0\n 27099: u8 [a0 + 25] = 0\n 27102: u8 [a0 + 24] = 0x2e\n 27106: u8 [a0 + 23] = 0x6e\n 27110: u8 [a0 + 22] = 0x6f\n 27114: u8 [a0 + 21] = 0x69\n 27118: u8 [a0 + 20] = 0x74\n 27122: u8 [a0 + 19] = 0x61\n 27126: u8 [a0 + 18] = 0x67\n 27130: u8 [a0 + 17] = 0x65\n 27134: a5 = 0x6c\n 27137: u8 [a0 + 0x10] = a5\n 27140: u8 [a0 + 15] = 0x65\n 27144: u8 [a0 + 14] = 0x64\n 27148: u8 [a0 + 13] = 0x20\n 27152: u8 [a0 + 12] = 0x6e\n 27156: u8 [a0 + 11] = 0x69\n 27160: u8 [a0 + 10] = 0x20\n 27164: u8 [a0 + 9] = 0x70\n 27168: u8 [a0 + 8] = 0x6f\n 27172: u8 [a0 + 7] = 0x6f\n 27176: u8 [a0 + 0x6] = a5\n 27179: u8 [a0 + 5] = 0x20\n 27183: u8 [a0 + 4] = 0x64\n 27187: u8 [a0 + 3] = 0x6e\n 27191: u8 [a0 + 2] = 0x75\n 27195: u8 [a0 + 1] = 0x6f\n 27199: u8 [a0 + 0] = 0x46\n 27202: a1 = u64 [sp]\n 27204: a0 = a1 + 0x60\n 27207: a1 = a0 <u a1\n 27210: a3 = u64 [sp + 0x8]\n 27213: a2 = a3 + a1\n 27216: a3 = a2 <u a3\n 27219: a3 = a1 if a1 == 0\n 27222: a1 = u64 [sp + 0x10]\n 27225: a3 = a3 + a1\n 27228: a1 = a3 <u a1\n 27231: a4 = u64 [sp + 0x18]\n 27234: a1 = a1 + a4\n 27237: a4 = u64 [sp + 0x28]\n 27240: u64 [a4] = a0\n 27242: u64 [a4 + 0x8] = a2\n 27245: u64 [a4 + 0x10] = a3\n 27248: u64 [a4 + 0x18] = a1\n 27251: ra = u64 [sp + 0x58]\n 27254: s0 = u64 [sp + 0x50]\n 27257: s1 = u64 [sp + 0x48]\n 27260: sp = sp + 0x60\n 27263: ret\n      : @393 (gas: 1)\n 27265: trap\n      : @394 [@dyn 183] (gas: 56)\n 27266: a1 = u64 [sp + 0x120]\n 27270: a1 = reverse a1\n 27272: a2 = u64 [sp + 0x128]\n 27276: a2 = reverse a2\n 27278: a3 = s1 >> 0x18\n 27281: u8 [a0 + 0xf] = a3\n 27284: a3 = s1 >> 0x10\n 27287: u8 [a0 + 0xe] = a3\n 27290: a3 = s1 >> 0x8\n 27293: u8 [a0 + 0xd] = a3\n 27296: u8 [a0 + 0xc] = s1\n 27299: u8 [a0 + 11] = 0\n 27302: u8 [a0 + 10] = 0\n 27305: u8 [a0 + 9] = 0\n 27308: u8 [a0 + 8] = 0\n 27311: u8 [a0 + 7] = 0\n 27314: u8 [a0 + 6] = 0\n 27317: u8 [a0 + 5] = 0\n 27320: u8 [a0 + 4] = 0\n 27323: u8 [a0 + 3] = 0\n 27326: u8 [a0 + 2] = 0\n 27329: u8 [a0 + 1] = 0\n 27332: u8 [a0 + 0] = 0\n 27334: u8 [a0 + 0x18] = a2\n 27337: u8 [a0 + 0x10] = a1\n 27340: a3 = a2 >> 0x38\n 27343: u8 [a0 + 0x1f] = a3\n 27346: a3 = a2 >> 0x30\n 27349: u8 [a0 + 0x1e] = a3\n 27352: a3 = a2 >> 0x28\n 27355: u8 [a0 + 0x1d] = a3\n 27358: a3 = a2 >> 0x20\n 27361: u8 [a0 + 0x1c] = a3\n 27364: a3 = a2 >> 0x18\n 27367: u8 [a0 + 0x1b] = a3\n 27370: a3 = a2 >> 0x10\n 27373: u8 [a0 + 0x1a] = a3\n 27376: a2 = a2 >> 0x8\n 27379: u8 [a0 + 0x19] = a2\n 27382: a2 = a1 >> 0x38\n 27385: u8 [a0 + 0x17] = a2\n 27388: a2 = a1 >> 0x30\n 27391: u8 [a0 + 0x16] = a2\n 27394: a2 = a1 >> 0x28\n 27397: u8 [a0 + 0x15] = a2\n 27400: a2 = a1 >> 0x20\n 27403: u8 [a0 + 0x14] = a2\n 27406: a2 = a1 >> 0x18\n 27409: u8 [a0 + 0x13] = a2\n 27412: a2 = a1 >> 0x10\n 27415: u8 [a0 + 0x12] = a2\n 27418: a1 = a1 >> 0x8\n 27421: u8 [a0 + 0x11] = a1\n 27424: a0 = 0x20\n 27427: a1 = 0x20\n 27430: ra = 368, jump @0\n      : @395 [@dyn 184] (gas: 35)\n 27436: u8 [a0 + 31] = 0x1\n 27440: u8 [a0 + 30] = 0\n 27443: u8 [a0 + 29] = 0\n 27446: u8 [a0 + 28] = 0\n 27449: u8 [a0 + 27] = 0\n 27452: u8 [a0 + 26] = 0\n 27455: u8 [a0 + 25] = 0\n 27458: u8 [a0 + 24] = 0\n 27461: u8 [a0 + 23] = 0\n 27464: u8 [a0 + 22] = 0\n 27467: u8 [a0 + 21] = 0\n 27470: u8 [a0 + 20] = 0\n 27473: u8 [a0 + 19] = 0\n 27476: u8 [a0 + 18] = 0\n 27479: u8 [a0 + 17] = 0\n 27482: u8 [a0 + 16] = 0\n 27485: u8 [a0 + 15] = 0\n 27488: u8 [a0 + 14] = 0\n 27491: u8 [a0 + 13] = 0\n 27494: u8 [a0 + 12] = 0\n 27497: u8 [a0 + 11] = 0\n 27500: u8 [a0 + 10] = 0\n 27503: u8 [a0 + 9] = 0\n 27506: u8 [a0 + 8] = 0\n 27509: u8 [a0 + 7] = 0\n 27512: u8 [a0 + 6] = 0\n 27515: u8 [a0 + 5] = 0\n 27518: u8 [a0 + 4] = 0\n 27521: u8 [a0 + 3] = 0\n 27524: u8 [a0 + 2] = 0\n 27527: u8 [a0 + 1] = 0\n 27530: u8 [a0 + 0] = 0\n 27532: a1 = 0x40\n 27535: a0 = 0\n 27537: ra = 370, jump @0\n      : @396 [@dyn 185] (gas: 43)\n 27543: i32 a0 = a0 + 0\n 27545: i32 a2 = sp + 0x3a0\n 27549: a1 = 0x40\n 27552: ecalli 5 // 'hash_keccak_256'\n 27554: a0 = u64 [sp + 0x3a0]\n 27558: a1 = u64 [sp + 0x3a8]\n 27562: a2 = u64 [sp + 0x3b0]\n 27566: a3 = u64 [sp + 0x3b8]\n 27570: s1 = reverse a0\n 27572: a4 = reverse a1\n 27574: a1 = reverse a2\n 27576: a0 = reverse a3\n 27578: u64 [sp + 0x18] = a0\n 27581: a2 = a0 + 0x1\n 27584: a0 = a2 <u 0x1\n 27587: u64 [sp + 0x10] = a1\n 27590: a1 = a1 + a0\n 27593: a0 = a2 | a1\n 27596: a0 = a0 <u 0x1\n 27599: a3 = a4 + a0\n 27602: u64 [sp + 0x8] = a4\n 27605: a0 = a3 <u a4\n 27608: a0 = a0 + s1\n 27611: u64 [sp + 0x30] = a1\n 27614: u64 [sp + 0x388] = a1\n 27618: u64 [sp + 0x38] = a2\n 27621: u64 [sp + 0x380] = a2\n 27625: u64 [sp + 0x28] = a3\n 27628: u64 [sp + 0x390] = a3\n 27632: u64 [sp + 0x20] = a0\n 27635: u64 [sp + 0x398] = a0\n 27639: u64 [sp + 952] = 0\n 27643: u64 [sp + 944] = 0\n 27647: u64 [sp + 936] = 0\n 27651: u64 [sp + 928] = 0\n 27655: u32 [sp + 864] = 0x20\n 27660: i32 a1 = sp + 0x380\n 27664: i32 a3 = sp + 0x3a0\n 27668: i32 a4 = sp + 0x360\n 27672: a2 = 0xffffffffffffffff\n 27675: a0 = 0\n 27677: ecalli 4 // 'get_storage'\n 27679: fallthrough\n      : @397 (gas: 2)\n 27680: a0 = u8 [sp + 0x3a0]\n 27684: jump @432 if a0 != 0\n      : @398 (gas: 3)\n 27688: i32 a0 = sp + 0x320\n 27692: ecalli 3 // 'caller'\n 27694: fallthrough\n      : @399 (gas: 24)\n 27695: a0 = u64 [sp + 0x328]\n 27699: a1 = u64 [sp + 0x320]\n 27703: a2 = i32 [sp + 0x330]\n 27707: a0 = reverse a0\n 27709: a3 = a0 >> 0x20\n 27712: a1 = reverse a1\n 27714: a4 = a1 << 0x20\n 27717: a3 = a3 | a4\n 27720: a0 = a0 << 0x20\n 27723: a2 = reverse a2\n 27725: a2 = a2 >> 0x20\n 27728: a0 = a0 | a2\n 27731: a1 = a1 >> 0x20\n 27734: a5 = u64 [sp + 0x130]\n 27738: a2 = a5 << 0x20\n 27741: a2 = a2 >> 0x20\n 27744: a1 = a1 ^ a2\n 27747: a4 = u64 [sp + 0x50]\n 27750: a0 = a0 ^ a4\n 27753: a0 = a0 | a1\n 27756: a2 = u64 [sp + 0x138]\n 27760: a1 = a3 ^ a2\n 27763: a0 = a0 | a1\n 27766: jump @401 if a0 != 0\n      : @400 (gas: 1)\n 27769: jump @437\n      : @401 (gas: 14)\n 27772: u64 [sp] = s1\n 27774: a1 = 0xffffffffff\n 27784: u64 [sp + 0x48] = a1\n 27787: a0 = 0xffffffff\n 27797: u64 [sp + 0x120] = a0\n 27801: i32 a0 = sp + 0x3a0\n 27805: u64 [sp + 0x128] = a0\n 27809: i32 a0 = sp + 0x380\n 27813: u64 [sp + 0x118] = a0\n 27817: i32 a0 = sp + 0x360\n 27821: u64 [sp + 0x110] = a0\n 27825: i32 a0 = sp + 0x340\n 27829: u64 [sp + 0x40] = a0\n 27832: fallthrough\n      : @402 (gas: 12)\n 27833: u64 [sp + 0x130] = a5\n 27837: u64 [sp + 0x138] = a2\n 27841: u64 [sp + 0x50] = a4\n 27844: a4 = a4 & 0xffffffffffffffff\n 27847: u64 [sp + 0x108] = a4\n 27851: a0 = a2 & 0xffffffffffffffff\n 27854: u64 [sp + 0x100] = a0\n 27858: s1 = u64 [sp + 0x120]\n 27862: s1 = s1 & a5\n 27865: a1 = 0x20\n 27868: a0 = 0\n 27870: ra = 372, jump @0\n      : @403 [@dyn 186] (gas: 78)\n 27876: s1 = reverse s1\n 27878: a1 = u64 [sp + 0x100]\n 27882: a2 = reverse a1\n 27884: a1 = u64 [sp + 0x108]\n 27888: a1 = reverse a1\n 27890: u8 [a0 + 0x18] = a1\n 27893: u8 [a0 + 11] = 0\n 27896: u8 [a0 + 10] = 0\n 27899: u8 [a0 + 9] = 0\n 27902: u8 [a0 + 7] = 0\n 27905: u8 [a0 + 6] = 0\n 27908: u8 [a0 + 5] = 0\n 27911: u8 [a0 + 4] = 0\n 27914: u8 [a0 + 3] = 0\n 27917: u8 [a0 + 2] = 0\n 27920: u8 [a0 + 1] = 0\n 27923: u8 [a0 + 0] = 0\n 27925: a3 = a1 >> 0x38\n 27928: u64 [sp + 0xf0] = a3\n 27932: u8 [a0 + 0x1f] = a3\n 27935: a3 = a1 >> 0x30\n 27938: u64 [sp + 0xe8] = a3\n 27942: u8 [a0 + 0x1e] = a3\n 27945: a3 = a1 >> 0x28\n 27948: u64 [sp + 0xe0] = a3\n 27952: u8 [a0 + 0x1d] = a3\n 27955: a3 = a1 >> 0x20\n 27958: u64 [sp + 0xd8] = a3\n 27962: u8 [a0 + 0x1c] = a3\n 27965: a3 = a1 >> 0x18\n 27968: u64 [sp + 0xd0] = a3\n 27972: u8 [a0 + 0x1b] = a3\n 27975: a3 = a1 >> 0x10\n 27978: u64 [sp + 0xc8] = a3\n 27982: u8 [a0 + 0x1a] = a3\n 27985: u64 [sp + 0x100] = a1\n 27989: a1 = a1 >> 0x8\n 27992: u64 [sp + 0xc0] = a1\n 27996: u8 [a0 + 0x19] = a1\n 27999: u8 [a0 + 0x10] = a2\n 28002: a1 = a2 >> 0x38\n 28005: u64 [sp + 0xb8] = a1\n 28009: u8 [a0 + 0x17] = a1\n 28012: a1 = a2 >> 0x30\n 28015: u64 [sp + 0xb0] = a1\n 28019: u8 [a0 + 0x16] = a1\n 28022: a1 = a2 >> 0x28\n 28025: u64 [sp + 0xa8] = a1\n 28029: u8 [a0 + 0x15] = a1\n 28032: a1 = a2 >> 0x20\n 28035: u64 [sp + 0xa0] = a1\n 28039: u8 [a0 + 0x14] = a1\n 28042: a1 = a2 >> 0x18\n 28045: u64 [sp + 0x98] = a1\n 28049: u8 [a0 + 0x13] = a1\n 28052: a1 = a2 >> 0x10\n 28055: u64 [sp + 0x90] = a1\n 28059: u8 [a0 + 0x12] = a1\n 28062: u64 [sp + 0xf8] = a2\n 28066: a2 = a2 >> 0x8\n 28069: u64 [sp + 0x88] = a2\n 28073: u8 [a0 + 0x11] = a2\n 28076: u8 [a0 + 0x8] = s1\n 28079: a1 = s1 >> 0x38\n 28082: u64 [sp + 0x80] = a1\n 28086: u8 [a0 + 0xf] = a1\n 28089: a1 = s1 >> 0x30\n 28092: u64 [sp + 0x78] = a1\n 28095: u8 [a0 + 0xe] = a1\n 28098: a1 = s1 >> 0x28\n 28101: u64 [sp + 0x70] = a1\n 28104: u8 [a0 + 0xd] = a1\n 28107: a1 = s1 >> 0x20\n 28110: u64 [sp + 0x68] = a1\n 28113: u8 [a0 + 0xc] = a1\n 28116: a0 = 0x20\n 28119: a1 = 0x20\n 28122: ra = 374, jump @0\n      : @404 [@dyn 187] (gas: 35)\n 28128: u8 [a0 + 31] = 0x1\n 28132: u8 [a0 + 30] = 0\n 28135: u8 [a0 + 29] = 0\n 28138: u8 [a0 + 28] = 0\n 28141: u8 [a0 + 27] = 0\n 28144: u8 [a0 + 26] = 0\n 28147: u8 [a0 + 25] = 0\n 28150: u8 [a0 + 24] = 0\n 28153: u8 [a0 + 23] = 0\n 28156: u8 [a0 + 22] = 0\n 28159: u8 [a0 + 21] = 0\n 28162: u8 [a0 + 20] = 0\n 28165: u8 [a0 + 19] = 0\n 28168: u8 [a0 + 18] = 0\n 28171: u8 [a0 + 17] = 0\n 28174: u8 [a0 + 16] = 0\n 28177: u8 [a0 + 15] = 0\n 28180: u8 [a0 + 14] = 0\n 28183: u8 [a0 + 13] = 0\n 28186: u8 [a0 + 12] = 0\n 28189: u8 [a0 + 11] = 0\n 28192: u8 [a0 + 10] = 0\n 28195: u8 [a0 + 9] = 0\n 28198: u8 [a0 + 8] = 0\n 28201: u8 [a0 + 7] = 0\n 28204: u8 [a0 + 6] = 0\n 28207: u8 [a0 + 5] = 0\n 28210: u8 [a0 + 4] = 0\n 28213: u8 [a0 + 3] = 0\n 28216: u8 [a0 + 2] = 0\n 28219: u8 [a0 + 1] = 0\n 28222: u8 [a0 + 0] = 0\n 28224: a1 = 0x40\n 28227: a0 = 0\n 28229: ra = 376, jump @0\n      : @405 [@dyn 188] (gas: 36)\n 28235: i32 a0 = a0 + 0\n 28237: a1 = 0x40\n 28240: a2 = u64 [sp + 0x128]\n 28244: ecalli 5 // 'hash_keccak_256'\n 28246: a0 = u64 [sp + 0x3a0]\n 28250: a1 = u64 [sp + 0x3a8]\n 28254: a2 = u64 [sp + 0x3b0]\n 28258: a3 = u64 [sp + 0x3b8]\n 28262: a0 = reverse a0\n 28264: a1 = reverse a1\n 28266: a2 = reverse a2\n 28268: a3 = reverse a3\n 28270: a3 = a3 + 0x1\n 28273: a4 = a3 <u 0x1\n 28276: a2 = a2 + a4\n 28279: a4 = a3 | a2\n 28282: a4 = a4 <u 0x1\n 28285: a4 = a4 + a1\n 28288: a1 = a4 <u a1\n 28291: a0 = a0 + a1\n 28294: u64 [sp + 0x388] = a2\n 28298: u64 [sp + 0x380] = a3\n 28302: u64 [sp + 0x390] = a4\n 28306: u64 [sp + 0x398] = a0\n 28310: u64 [sp + 952] = 0\n 28314: u64 [sp + 944] = 0\n 28318: u64 [sp + 936] = 0\n 28322: u64 [sp + 928] = 0\n 28326: u32 [sp + 864] = 0x20\n 28331: a2 = 0xffffffffffffffff\n 28334: a0 = 0\n 28336: a1 = u64 [sp + 0x118]\n 28340: a3 = u64 [sp + 0x128]\n 28344: a4 = u64 [sp + 0x110]\n 28348: ecalli 4 // 'get_storage'\n 28350: fallthrough\n      : @406 (gas: 16)\n 28351: a0 = u64 [sp + 0x3a8]\n 28355: a1 = u64 [sp + 0x3b0]\n 28359: a2 = u64 [sp + 0x3a0]\n 28363: a0 = a0 & 0xffffffffffffffff\n 28366: a3 = u64 [sp + 0x48]\n 28369: a1 = a1 & a3\n 28372: a2 = a2 & 0xffffffffffffff00\n 28376: a1 = a1 | a2\n 28379: a0 = a0 | a1\n 28382: a1 = s1 >> 0x18\n 28385: u64 [sp + 0x58] = a1\n 28388: a1 = s1 >> 0x10\n 28391: u64 [sp + 0x60] = a1\n 28394: u64 [sp + 0x108] = s1\n 28398: s1 = s1 >> 0x8\n 28401: jump @419 if a0 == 0\n      : @407 (gas: 3)\n 28405: a1 = 0x20\n 28408: a0 = 0\n 28410: ra = 378, jump @0\n      : @408 [@dyn 189] (gas: 58)\n 28416: a1 = u64 [sp + 0xf8]\n 28420: u8 [a0 + 0x10] = a1\n 28423: a1 = u64 [sp + 0x80]\n 28427: u8 [a0 + 0xf] = a1\n 28430: a1 = u64 [sp + 0x78]\n 28433: u8 [a0 + 0xe] = a1\n 28436: a1 = u64 [sp + 0x70]\n 28439: u8 [a0 + 0xd] = a1\n 28442: a1 = u64 [sp + 0x68]\n 28445: u8 [a0 + 0xc] = a1\n 28448: a1 = u64 [sp + 0x58]\n 28451: u8 [a0 + 0xb] = a1\n 28454: a1 = u64 [sp + 0x60]\n 28457: u8 [a0 + 0xa] = a1\n 28460: u8 [a0 + 0x9] = s1\n 28463: a1 = u64 [sp + 0x108]\n 28467: u8 [a0 + 0x8] = a1\n 28470: a1 = u64 [sp + 0x100]\n 28474: u8 [a0 + 0x18] = a1\n 28477: a1 = u64 [sp + 0xb8]\n 28481: u8 [a0 + 0x17] = a1\n 28484: a1 = u64 [sp + 0xb0]\n 28488: u8 [a0 + 0x16] = a1\n 28491: a1 = u64 [sp + 0xa8]\n 28495: u8 [a0 + 0x15] = a1\n 28498: a1 = u64 [sp + 0xa0]\n 28502: u8 [a0 + 0x14] = a1\n 28505: a1 = u64 [sp + 0x98]\n 28509: u8 [a0 + 0x13] = a1\n 28512: a1 = u64 [sp + 0x90]\n 28516: u8 [a0 + 0x12] = a1\n 28519: a1 = u64 [sp + 0x88]\n 28523: u8 [a0 + 0x11] = a1\n 28526: a1 = u64 [sp + 0xf0]\n 28530: u8 [a0 + 0x1f] = a1\n 28533: a1 = u64 [sp + 0xe8]\n 28537: u8 [a0 + 0x1e] = a1\n 28540: a1 = u64 [sp + 0xe0]\n 28544: u8 [a0 + 0x1d] = a1\n 28547: a1 = u64 [sp + 0xd8]\n 28551: u8 [a0 + 0x1c] = a1\n 28554: a1 = u64 [sp + 0xd0]\n 28558: u8 [a0 + 0x1b] = a1\n 28561: a1 = u64 [sp + 0xc8]\n 28565: u8 [a0 + 0x1a] = a1\n 28568: a1 = u64 [sp + 0xc0]\n 28572: u8 [a0 + 0x19] = a1\n 28575: u8 [a0 + 7] = 0\n 28578: u8 [a0 + 6] = 0\n 28581: u8 [a0 + 5] = 0\n 28584: u8 [a0 + 4] = 0\n 28587: u8 [a0 + 3] = 0\n 28590: u8 [a0 + 2] = 0\n 28593: u8 [a0 + 1] = 0\n 28596: u8 [a0 + 0] = 0\n 28598: a0 = 0x20\n 28601: a1 = 0x20\n 28604: ra = 380, jump @0\n      : @409 [@dyn 190] (gas: 35)\n 28610: u8 [a0 + 31] = 0x1\n 28614: u8 [a0 + 30] = 0\n 28617: u8 [a0 + 29] = 0\n 28620: u8 [a0 + 28] = 0\n 28623: u8 [a0 + 27] = 0\n 28626: u8 [a0 + 26] = 0\n 28629: u8 [a0 + 25] = 0\n 28632: u8 [a0 + 24] = 0\n 28635: u8 [a0 + 23] = 0\n 28638: u8 [a0 + 22] = 0\n 28641: u8 [a0 + 21] = 0\n 28644: u8 [a0 + 20] = 0\n 28647: u8 [a0 + 19] = 0\n 28650: u8 [a0 + 18] = 0\n 28653: u8 [a0 + 17] = 0\n 28656: u8 [a0 + 16] = 0\n 28659: u8 [a0 + 15] = 0\n 28662: u8 [a0 + 14] = 0\n 28665: u8 [a0 + 13] = 0\n 28668: u8 [a0 + 12] = 0\n 28671: u8 [a0 + 11] = 0\n 28674: u8 [a0 + 10] = 0\n 28677: u8 [a0 + 9] = 0\n 28680: u8 [a0 + 8] = 0\n 28683: u8 [a0 + 7] = 0\n 28686: u8 [a0 + 6] = 0\n 28689: u8 [a0 + 5] = 0\n 28692: u8 [a0 + 4] = 0\n 28695: u8 [a0 + 3] = 0\n 28698: u8 [a0 + 2] = 0\n 28701: u8 [a0 + 1] = 0\n 28704: u8 [a0 + 0] = 0\n 28706: a1 = 0x40\n 28709: a0 = 0\n 28711: ra = 382, jump @0\n      : @410 [@dyn 191] (gas: 61)\n 28717: i32 a0 = a0 + 0\n 28719: a1 = 0x40\n 28722: s1 = u64 [sp + 0x128]\n 28726: a2 = s1\n 28728: ecalli 5 // 'hash_keccak_256'\n 28730: a0 = u64 [sp + 0x3a0]\n 28734: a1 = u64 [sp + 0x3a8]\n 28738: a2 = u64 [sp + 0x3b0]\n 28742: a3 = u64 [sp + 0x3b8]\n 28746: a0 = reverse a0\n 28748: a1 = reverse a1\n 28750: a2 = reverse a2\n 28752: a3 = reverse a3\n 28754: a3 = a3 + 0x1\n 28757: a4 = a3 <u 0x1\n 28760: a2 = a2 + a4\n 28763: a4 = a3 | a2\n 28766: a4 = a4 <u 0x1\n 28769: a4 = a4 + a1\n 28772: a1 = a4 <u a1\n 28775: a0 = a0 + a1\n 28778: u64 [sp + 0x388] = a2\n 28782: u64 [sp + 0x380] = a3\n 28786: u64 [sp + 0x390] = a4\n 28790: u64 [sp + 0x398] = a0\n 28794: u64 [sp + 952] = 0\n 28798: u64 [sp + 944] = 0\n 28802: u64 [sp + 936] = 0\n 28806: u64 [sp + 928] = 0\n 28810: u32 [sp + 864] = 0x20\n 28815: a2 = 0xffffffffffffffff\n 28818: a0 = 0\n 28820: a1 = u64 [sp + 0x118]\n 28824: a3 = s1\n 28826: a4 = u64 [sp + 0x110]\n 28830: ecalli 4 // 'get_storage'\n 28832: a0 = u64 [sp + 0x3a8]\n 28836: a1 = u64 [sp + 0x3a0]\n 28840: a2 = u64 [sp + 0x3b8]\n 28844: a3 = u64 [sp + 0x3b0]\n 28848: a4 = a0 << 0x38\n 28851: a1 = a1 >> 0x8\n 28854: a4 = a4 | a1\n 28857: u64 [sp + 0x108] = a4\n 28861: a1 = a3 << 0x38\n 28864: a0 = a0 >> 0x8\n 28867: a1 = a1 | a0\n 28870: u64 [sp + 0x100] = a1\n 28874: a2 = a2 << 0x38\n 28877: a3 = a3 >> 0x8\n 28880: a2 = a2 | a3\n 28883: u64 [sp + 0xf8] = a2\n 28887: a0 = u64 [sp + 0x120]\n 28891: a0 = a0 & a2\n 28894: u64 [sp + 0x130] = a0\n 28898: a1 = a1 & 0xffffffffffffffff\n 28901: u64 [sp + 0x138] = a1\n 28905: s1 = a4 & 0xffffffffffffffff\n 28908: a0 = u64 [sp + 0x40]\n 28911: ecalli 3 // 'caller'\n 28913: fallthrough\n      : @411 (gas: 27)\n 28914: a5 = u64 [sp + 0x130]\n 28918: a4 = s1\n 28920: a0 = u64 [sp + 0x348]\n 28924: a1 = i32 [sp + 0x350]\n 28928: a2 = u64 [sp + 0x340]\n 28932: a0 = reverse a0\n 28934: a3 = a0 << 0x20\n 28937: a1 = reverse a1\n 28939: a1 = a1 >> 0x20\n 28942: a1 = a1 | a3\n 28945: a0 = a0 >> 0x20\n 28948: a2 = reverse a2\n 28950: a3 = a2 << 0x20\n 28953: a0 = a0 | a3\n 28956: a2 = a2 >> 0x20\n 28959: s1 = u64 [sp + 0xf8]\n 28963: s1 = s1 << 0x20\n 28966: s1 = s1 >> 0x20\n 28969: a3 = u64 [sp + 0x100]\n 28973: a0 = a0 ^ a3\n 28976: a3 = u64 [sp + 0x108]\n 28980: a1 = a1 ^ a3\n 28983: a2 = a2 ^ s1\n 28986: a0 = a0 | a1\n 28989: a0 = a0 | a2\n 28992: a2 = u64 [sp + 0x138]\n 28996: jump @402 if a0 != 0\n      : @412 (gas: 3)\n 29000: a0 = 0x40\n 29003: a1 = 0x20\n 29006: ra = 384, jump @0\n      : @413 [@dyn 192] (gas: 103)\n 29012: a1 = u8 [a0 + 0x11]\n 29015: a2 = u8 [a0 + 0x10]\n 29018: a3 = u8 [a0 + 0x12]\n 29021: a4 = u8 [a0 + 0x13]\n 29024: a1 = a1 << 0x8\n 29027: a1 = a1 | a2\n 29030: a3 = a3 << 0x10\n 29033: a4 = a4 << 0x18\n 29036: a3 = a3 | a4\n 29039: a1 = a1 | a3\n 29042: a2 = u8 [a0 + 0x15]\n 29045: a3 = u8 [a0 + 0x14]\n 29048: a4 = u8 [a0 + 0x16]\n 29051: a5 = u8 [a0 + 0x17]\n 29054: a2 = a2 << 0x8\n 29057: a2 = a2 | a3\n 29060: a4 = a4 << 0x10\n 29063: a5 = a5 << 0x18\n 29066: a4 = a4 | a5\n 29069: a2 = a2 | a4\n 29072: a2 = a2 << 0x20\n 29075: t0 = a2 | a1\n 29078: a2 = u8 [a0 + 0x1]\n 29081: a3 = u8 [a0]\n 29083: a4 = u8 [a0 + 0x2]\n 29086: a5 = u8 [a0 + 0x3]\n 29089: a2 = a2 << 0x8\n 29092: a2 = a2 | a3\n 29095: a4 = a4 << 0x10\n 29098: a5 = a5 << 0x18\n 29101: a4 = a4 | a5\n 29104: a2 = a2 | a4\n 29107: a3 = u8 [a0 + 0x5]\n 29110: a4 = u8 [a0 + 0x4]\n 29113: a5 = u8 [a0 + 0x6]\n 29116: s1 = u8 [a0 + 0x7]\n 29119: a3 = a3 << 0x8\n 29122: a3 = a3 | a4\n 29125: a5 = a5 << 0x10\n 29128: s1 = s1 << 0x18\n 29131: a5 = a5 | s1\n 29134: a3 = a3 | a5\n 29137: a3 = a3 << 0x20\n 29140: a2 = a2 | a3\n 29143: a3 = u8 [a0 + 0x19]\n 29146: a4 = u8 [a0 + 0x18]\n 29149: a5 = u8 [a0 + 0x1a]\n 29152: s1 = u8 [a0 + 0x1b]\n 29155: a3 = a3 << 0x8\n 29158: a3 = a3 | a4\n 29161: a5 = a5 << 0x10\n 29164: s1 = s1 << 0x18\n 29167: a5 = a5 | s1\n 29170: a3 = a3 | a5\n 29173: a4 = u8 [a0 + 0x1d]\n 29176: a5 = u8 [a0 + 0x1c]\n 29179: s1 = u8 [a0 + 0x1e]\n 29182: a1 = u8 [a0 + 0x1f]\n 29185: a4 = a4 << 0x8\n 29188: a4 = a4 | a5\n 29191: s1 = s1 << 0x10\n 29194: a1 = a1 << 0x18\n 29197: a1 = a1 | s1\n 29200: a1 = a1 | a4\n 29203: a1 = a1 << 0x20\n 29206: a3 = a3 | a1\n 29209: a1 = u8 [a0 + 0x9]\n 29212: a4 = u8 [a0 + 0x8]\n 29215: a5 = u8 [a0 + 0xa]\n 29218: s1 = u8 [a0 + 0xb]\n 29221: a1 = a1 << 0x8\n 29224: a1 = a1 | a4\n 29227: a5 = a5 << 0x10\n 29230: s1 = s1 << 0x18\n 29233: a5 = a5 | s1\n 29236: a1 = a1 | a5\n 29239: a4 = u8 [a0 + 0xd]\n 29242: a5 = u8 [a0 + 0xc]\n 29245: s1 = u8 [a0 + 0xe]\n 29248: a0 = u8 [a0 + 0xf]\n 29251: a4 = a4 << 0x8\n 29254: a4 = a4 | a5\n 29257: s1 = s1 << 0x10\n 29260: a0 = a0 << 0x18\n 29263: a0 = a0 | s1\n 29266: a0 = a0 | a4\n 29269: a0 = a0 << 0x20\n 29272: a0 = a0 | a1\n 29275: s1 = reverse a0\n 29277: a1 = reverse a3\n 29279: a2 = reverse a2\n 29281: a0 = reverse t0\n 29283: u64 [sp + 0x138] = a0\n 29287: u64 [sp + 0x130] = a2\n 29291: a0 = a0 | a2\n 29294: a2 = a1\n 29296: a1 = a1 | s1\n 29299: a1 = a1 | a0\n 29302: a1 = a1 >> 0x20\n 29305: a0 = a0 | s1\n 29308: a0 = a0 << 0x20\n 29311: a0 = a0 | a1\n 29314: jump @418 if a0 != 0\n      : @414 (gas: 5)\n 29318: u64 [sp + 0x128] = a2\n 29322: i32 a0 = a2 + 0\n 29324: a1 = 0x20\n 29327: u64 [sp + 0x120] = a0\n 29331: ra = 386, jump @0\n      : @415 [@dyn 193] (gas: 50)\n 29337: u8 [a0 + 31] = 0\n 29340: u8 [a0 + 30] = 0\n 29343: u8 [a0 + 29] = 0\n 29346: u8 [a0 + 28] = 0\n 29349: u8 [a0 + 27] = 0\n 29352: u8 [a0 + 26] = 0\n 29355: u8 [a0 + 25] = 0\n 29358: u8 [a0 + 24] = 0\n 29361: u8 [a0 + 23] = 0\n 29364: u8 [a0 + 22] = 0\n 29367: u8 [a0 + 21] = 0\n 29370: u8 [a0 + 20] = 0\n 29373: u8 [a0 + 19] = 0\n 29376: u8 [a0 + 18] = 0\n 29379: u8 [a0 + 17] = 0\n 29382: u8 [a0 + 16] = 0\n 29385: u8 [a0 + 15] = 0\n 29388: u8 [a0 + 14] = 0\n 29391: u8 [a0 + 13] = 0\n 29394: u8 [a0 + 12] = 0\n 29397: u8 [a0 + 11] = 0\n 29400: u8 [a0 + 10] = 0\n 29403: u8 [a0 + 9] = 0\n 29406: u8 [a0 + 8] = 0\n 29409: u8 [a0 + 7] = 0\n 29412: u8 [a0 + 6] = 0\n 29415: u8 [a0 + 5] = 0\n 29418: u8 [a0 + 4] = 0\n 29421: u8 [a0 + 3] = 0xa0\n 29426: u8 [a0 + 2] = 0x79\n 29430: u8 [a0 + 1] = 0xc3\n 29435: u8 [a0 + 0] = 0x8\n 29438: a1 = u64 [sp + 0x128]\n 29442: a0 = a1 + 0x4\n 29445: a1 = a0 <u a1\n 29448: a3 = u64 [sp + 0x138]\n 29452: a2 = a3 + a1\n 29455: a3 = a2 <u a3\n 29458: a3 = a1 if a1 == 0\n 29461: a3 = a3 + s1\n 29464: a1 = a3 <u s1\n 29467: a4 = u64 [sp + 0x130]\n 29471: a4 = a4 + a1\n 29474: u64 [sp + 0x288] = a2\n 29478: u64 [sp + 0x280] = a0\n 29482: u64 [sp + 0x290] = a3\n 29486: a0 = sp + 0x2a0\n 29490: a1 = sp + 0x280\n 29494: u64 [sp + 0x298] = a4\n 29498: ra = 388, jump @386\n      : @416 [@dyn 194] (gas: 5)\n 29504: a0 = u64 [sp + 0x2a8]\n 29508: t0 = u64 [sp + 0x2b8]\n 29512: t1 = u64 [sp + 0x2a0]\n 29516: a3 = u64 [sp + 0x2b0]\n 29520: fallthrough\n      : @417 (gas: 26)\n 29521: a1 = u64 [sp + 0x138]\n 29525: a4 = a0 ^ a1\n 29528: a5 = a0 <u a1\n 29531: t2 = a1\n 29533: a2 = u64 [sp + 0x128]\n 29537: a1 = t1 <u a2\n 29540: a5 = a1 if a4 == 0\n 29543: a4 = a3 - s1\n 29546: a3 = a3 <u s1\n 29549: s1 = u64 [sp + 0x130]\n 29553: s1 = t0 - s1\n 29556: s1 = s1 - a3\n 29559: a3 = a4 <u a5\n 29562: s1 = s1 - a3\n 29565: a4 = a4 - a5\n 29568: a0 = a0 - t2\n 29571: a1 = a0 - a1\n 29574: a0 = t1 - a2\n 29577: a1 = a1 | s1\n 29580: a2 = a0 | a4\n 29583: a2 = a2 | a1\n 29586: a1 = a1 | a4\n 29589: a2 = a2 >> 0x20\n 29592: a1 = a1 << 0x20\n 29595: a1 = a1 | a2\n 29598: jump @448 if a1 == 0\n      : @418 (gas: 1)\n 29602: trap\n      : @419 (gas: 104)\n 29603: a0 = u64 [sp + 0x28]\n 29606: u64 [sp + 0x390] = a0\n 29610: a0 = u64 [sp + 0x30]\n 29613: u64 [sp + 0x388] = a0\n 29617: a0 = u64 [sp + 0x38]\n 29620: u64 [sp + 0x380] = a0\n 29624: a0 = u64 [sp + 0x20]\n 29627: u64 [sp + 0x398] = a0\n 29631: u64 [sp + 952] = 0\n 29635: u64 [sp + 944] = 0\n 29639: u64 [sp + 936] = 0\n 29643: u64 [sp + 928] = 0\n 29647: u32 [sp + 864] = 0x20\n 29652: i32 a1 = sp + 0x380\n 29656: i32 a3 = sp + 0x3a0\n 29660: i32 a4 = sp + 0x360\n 29664: a2 = 0xffffffffffffffff\n 29667: a0 = 0\n 29669: ecalli 4 // 'get_storage'\n 29671: a0 = u64 [sp + 0x3a0]\n 29675: a1 = u64 [sp + 0x3a8]\n 29679: a2 = u64 [sp + 0x3b0]\n 29683: a3 = u64 [sp + 0x3b8]\n 29687: a0 = a0 & 0xffffffffffffff00\n 29691: a0 = a0 | 0x1\n 29694: a4 = u64 [sp + 0x20]\n 29697: u64 [sp + 0x398] = a4\n 29701: a4 = u64 [sp + 0x28]\n 29704: u64 [sp + 0x390] = a4\n 29708: a4 = u64 [sp + 0x30]\n 29711: u64 [sp + 0x388] = a4\n 29715: a4 = u64 [sp + 0x38]\n 29718: u64 [sp + 0x380] = a4\n 29722: u64 [sp + 0x3b8] = a3\n 29726: u64 [sp + 0x3b0] = a2\n 29730: u64 [sp + 0x3a8] = a1\n 29734: u64 [sp + 0x3a0] = a0\n 29738: i32 a1 = sp + 0x380\n 29742: i32 a3 = sp + 0x3a0\n 29746: a2 = 0xffffffffffffffff\n 29749: a4 = 0x20\n 29752: a0 = 0\n 29754: ecalli 8 // 'set_storage'\n 29756: a0 = u64 [sp + 0x20]\n 29759: u64 [sp + 0x398] = a0\n 29763: a0 = u64 [sp + 0x28]\n 29766: u64 [sp + 0x390] = a0\n 29770: a0 = u64 [sp + 0x30]\n 29773: u64 [sp + 0x388] = a0\n 29777: a0 = u64 [sp + 0x38]\n 29780: u64 [sp + 0x380] = a0\n 29784: u64 [sp + 952] = 0\n 29788: u64 [sp + 944] = 0\n 29792: u64 [sp + 936] = 0\n 29796: u64 [sp + 928] = 0\n 29800: u32 [sp + 864] = 0x20\n 29805: i32 a1 = sp + 0x380\n 29809: i32 a3 = sp + 0x3a0\n 29813: i32 a4 = sp + 0x360\n 29817: a2 = 0xffffffffffffffff\n 29820: a0 = 0\n 29822: ecalli 4 // 'get_storage'\n 29824: a2 = u64 [sp + 0x138]\n 29828: a0 = a2 >> 0x38\n 29831: a1 = u64 [sp + 0x130]\n 29835: a1 = a1 << 0x8\n 29838: a0 = a0 | a1\n 29841: a4 = u64 [sp + 0x50]\n 29844: a1 = a4 >> 0x38\n 29847: a2 = a2 << 0x8\n 29850: a1 = a1 | a2\n 29853: a1 = a1 & 0xffffffffffffffff\n 29856: a2 = u8 [sp + 0x3a0]\n 29860: a3 = u64 [sp + 0x48]\n 29863: a0 = a0 & a3\n 29866: a3 = u64 [sp + 0x3b0]\n 29870: a4 = a4 << 0x8\n 29873: a4 = a4 & 0xffffffffffffff00\n 29877: a2 = a2 | a4\n 29880: a3 = a3 >> 0x28\n 29883: a3 = a3 << 0x28\n 29886: a0 = a0 | a3\n 29889: a3 = u64 [sp + 0x20]\n 29892: u64 [sp + 0x398] = a3\n 29896: a3 = u64 [sp + 0x3b8]\n 29900: a4 = u64 [sp + 0x28]\n 29903: u64 [sp + 0x390] = a4\n 29907: a4 = u64 [sp + 0x30]\n 29910: u64 [sp + 0x388] = a4\n 29914: a4 = u64 [sp + 0x38]\n 29917: u64 [sp + 0x380] = a4\n 29921: u64 [sp + 0x3b8] = a3\n 29925: u64 [sp + 0x3b0] = a0\n 29929: u64 [sp + 0x3a8] = a1\n 29933: u64 [sp + 0x3a0] = a2\n 29937: i32 a1 = sp + 0x380\n 29941: i32 a3 = sp + 0x3a0\n 29945: a2 = 0xffffffffffffffff\n 29948: a4 = 0x20\n 29951: a0 = 0\n 29953: ecalli 8 // 'set_storage'\n 29955: a1 = 0x20\n 29958: a0 = 0\n 29960: ra = 390, jump @0\n      : @420 [@dyn 195] (gas: 58)\n 29966: a1 = u64 [sp + 0xf0]\n 29970: u8 [a0 + 0x1f] = a1\n 29973: a1 = u64 [sp + 0xe8]\n 29977: u8 [a0 + 0x1e] = a1\n 29980: a1 = u64 [sp + 0xe0]\n 29984: u8 [a0 + 0x1d] = a1\n 29987: a1 = u64 [sp + 0xd8]\n 29991: u8 [a0 + 0x1c] = a1\n 29994: a1 = u64 [sp + 0xd0]\n 29998: u8 [a0 + 0x1b] = a1\n 30001: a1 = u64 [sp + 0xc8]\n 30005: u8 [a0 + 0x1a] = a1\n 30008: a1 = u64 [sp + 0xc0]\n 30012: u8 [a0 + 0x19] = a1\n 30015: a1 = u64 [sp + 0x100]\n 30019: u8 [a0 + 0x18] = a1\n 30022: a1 = u64 [sp + 0xb8]\n 30026: u8 [a0 + 0x17] = a1\n 30029: a1 = u64 [sp + 0xb0]\n 30033: u8 [a0 + 0x16] = a1\n 30036: a1 = u64 [sp + 0xa8]\n 30040: u8 [a0 + 0x15] = a1\n 30043: a1 = u64 [sp + 0xa0]\n 30047: u8 [a0 + 0x14] = a1\n 30050: a1 = u64 [sp + 0x98]\n 30054: u8 [a0 + 0x13] = a1\n 30057: a1 = u64 [sp + 0x90]\n 30061: u8 [a0 + 0x12] = a1\n 30064: a1 = u64 [sp + 0x88]\n 30068: u8 [a0 + 0x11] = a1\n 30071: a1 = u64 [sp + 0xf8]\n 30075: u8 [a0 + 0x10] = a1\n 30078: a1 = u64 [sp + 0x80]\n 30082: u8 [a0 + 0xf] = a1\n 30085: a1 = u64 [sp + 0x78]\n 30088: u8 [a0 + 0xe] = a1\n 30091: a1 = u64 [sp + 0x70]\n 30094: u8 [a0 + 0xd] = a1\n 30097: a1 = u64 [sp + 0x68]\n 30100: u8 [a0 + 0xc] = a1\n 30103: a1 = u64 [sp + 0x58]\n 30106: u8 [a0 + 0xb] = a1\n 30109: a1 = u64 [sp + 0x60]\n 30112: u8 [a0 + 0xa] = a1\n 30115: u8 [a0 + 0x9] = s1\n 30118: a1 = u64 [sp + 0x108]\n 30122: u8 [a0 + 0x8] = a1\n 30125: u8 [a0 + 7] = 0\n 30128: u8 [a0 + 6] = 0\n 30131: u8 [a0 + 5] = 0\n 30134: u8 [a0 + 4] = 0\n 30137: u8 [a0 + 3] = 0\n 30140: u8 [a0 + 2] = 0\n 30143: u8 [a0 + 1] = 0\n 30146: u8 [a0 + 0] = 0\n 30148: a0 = 0x20\n 30151: a1 = 0x20\n 30154: ra = 392, jump @0\n      : @421 [@dyn 196] (gas: 35)\n 30160: u8 [a0 + 31] = 0x1\n 30164: u8 [a0 + 30] = 0\n 30167: u8 [a0 + 29] = 0\n 30170: u8 [a0 + 28] = 0\n 30173: u8 [a0 + 27] = 0\n 30176: u8 [a0 + 26] = 0\n 30179: u8 [a0 + 25] = 0\n 30182: u8 [a0 + 24] = 0\n 30185: u8 [a0 + 23] = 0\n 30188: u8 [a0 + 22] = 0\n 30191: u8 [a0 + 21] = 0\n 30194: u8 [a0 + 20] = 0\n 30197: u8 [a0 + 19] = 0\n 30200: u8 [a0 + 18] = 0\n 30203: u8 [a0 + 17] = 0\n 30206: u8 [a0 + 16] = 0\n 30209: u8 [a0 + 15] = 0\n 30212: u8 [a0 + 14] = 0\n 30215: u8 [a0 + 13] = 0\n 30218: u8 [a0 + 12] = 0\n 30221: u8 [a0 + 11] = 0\n 30224: u8 [a0 + 10] = 0\n 30227: u8 [a0 + 9] = 0\n 30230: u8 [a0 + 8] = 0\n 30233: u8 [a0 + 7] = 0\n 30236: u8 [a0 + 6] = 0\n 30239: u8 [a0 + 5] = 0\n 30242: u8 [a0 + 4] = 0\n 30245: u8 [a0 + 3] = 0\n 30248: u8 [a0 + 2] = 0\n 30251: u8 [a0 + 1] = 0\n 30254: u8 [a0 + 0] = 0\n 30256: a1 = 0x40\n 30259: a0 = 0\n 30261: ra = 394, jump @0\n      : @422 [@dyn 197] (gas: 40)\n 30267: i32 a0 = a0 + 0\n 30269: i32 a2 = sp + 0x3a0\n 30273: a1 = 0x40\n 30276: ecalli 5 // 'hash_keccak_256'\n 30278: a0 = u64 [sp + 0x3a0]\n 30282: a1 = u64 [sp + 0x3a8]\n 30286: a2 = u64 [sp + 0x3b0]\n 30290: a3 = u64 [sp + 0x3b8]\n 30294: a4 = reverse a0\n 30296: a5 = reverse a1\n 30298: a2 = reverse a2\n 30300: a0 = reverse a3\n 30302: u64 [sp + 0x120] = a0\n 30306: a0 = a0 + 0x1\n 30309: a1 = a0 <u 0x1\n 30312: u64 [sp + 0x128] = a2\n 30316: a1 = a1 + a2\n 30319: a2 = a0 | a1\n 30322: a2 = a2 <u 0x1\n 30325: a2 = a2 + a5\n 30328: u64 [sp + 0x130] = a5\n 30332: a3 = a2 <u a5\n 30335: u64 [sp + 0x138] = a4\n 30339: a3 = a3 + a4\n 30342: u64 [sp + 0x388] = a1\n 30346: u64 [sp + 0x380] = a0\n 30350: u64 [sp + 0x390] = a2\n 30354: u64 [sp + 0x398] = a3\n 30358: u64 [sp + 952] = 0\n 30362: u64 [sp + 944] = 0\n 30366: u64 [sp + 936] = 0\n 30370: u64 [sp + 928] = 0\n 30374: u32 [sp + 864] = 0x20\n 30379: i32 a1 = sp + 0x380\n 30383: i32 a3 = sp + 0x3a0\n 30387: i32 a4 = sp + 0x360\n 30391: a2 = 0xffffffffffffffff\n 30394: a0 = 0\n 30396: ecalli 4 // 'get_storage'\n 30398: fallthrough\n      : @423 (gas: 2)\n 30399: a0 = u8 [sp + 0x3a0]\n 30403: jump @428 if a0 == 0\n      : @424 (gas: 71)\n 30407: a0 = u64 [sp + 0x8]\n 30410: u64 [sp + 0x390] = a0\n 30414: a0 = u64 [sp + 0x10]\n 30417: u64 [sp + 0x388] = a0\n 30421: a0 = u64 [sp + 0x18]\n 30424: u64 [sp + 0x380] = a0\n 30428: a0 = u64 [sp]\n 30430: u64 [sp + 0x398] = a0\n 30434: u64 [sp + 952] = 0\n 30438: u64 [sp + 944] = 0\n 30442: u64 [sp + 936] = 0\n 30446: u64 [sp + 928] = 0\n 30450: s1 = 0x20\n 30453: u32 [sp + 0x360] = s1\n 30457: i32 a1 = sp + 0x380\n 30461: i32 a3 = sp + 0x3a0\n 30465: i32 a4 = sp + 0x360\n 30469: a2 = 0xffffffffffffffff\n 30472: a0 = 0\n 30474: ecalli 4 // 'get_storage'\n 30476: a0 = u64 [sp + 0x3b8]\n 30480: u64 [sp + 0x118] = a0\n 30484: a0 = u64 [sp + 0x3b0]\n 30488: u64 [sp + 0x110] = a0\n 30492: a0 = u64 [sp + 0x3a0]\n 30496: u64 [sp + 0x108] = a0\n 30500: a0 = u64 [sp + 0x3a8]\n 30504: u64 [sp + 0x100] = a0\n 30508: a1 = u64 [sp + 0x120]\n 30512: a0 = a1 + 0x2\n 30515: a1 = a0 <u a1\n 30518: a3 = u64 [sp + 0x128]\n 30522: a2 = a3 + a1\n 30525: a3 = a2 <u a3\n 30528: a3 = a1 if a1 == 0\n 30531: a1 = u64 [sp + 0x130]\n 30535: a3 = a3 + a1\n 30538: a1 = a3 <u a1\n 30541: a4 = u64 [sp + 0x138]\n 30545: a1 = a1 + a4\n 30548: u64 [sp + 0x398] = a1\n 30552: u64 [sp + 0x390] = a3\n 30556: u64 [sp + 0x388] = a2\n 30560: u64 [sp + 0x380] = a0\n 30564: u64 [sp + 952] = 0\n 30568: u64 [sp + 944] = 0\n 30572: u64 [sp + 936] = 0\n 30576: u64 [sp + 928] = 0\n 30580: u32 [sp + 0x360] = s1\n 30584: i32 a1 = sp + 0x380\n 30588: i32 a3 = sp + 0x3a0\n 30592: i32 a4 = sp + 0x360\n 30596: a2 = 0xffffffffffffffff\n 30599: a0 = 0\n 30601: ecalli 4 // 'get_storage'\n 30603: a0 = u64 [sp + 0x3a0]\n 30607: a1 = u64 [sp + 0x3a8]\n 30611: a2 = u64 [sp + 0x3b0]\n 30615: a3 = u64 [sp + 0x3b8]\n 30619: u64 [sp + 0x218] = a3\n 30623: u64 [sp + 0x210] = a2\n 30627: u64 [sp + 0x208] = a1\n 30631: u64 [sp + 0x200] = a0\n 30635: u64 [sp + 568] = 0\n 30639: u64 [sp + 560] = 0\n 30643: u64 [sp + 552] = 0\n 30647: a0 = sp + 0x240\n 30651: a1 = sp + 0x220\n 30655: a2 = sp + 0x200\n 30659: u64 [sp + 544] = 0x2\n 30664: ra = 396, jump @181\n      : @425 [@dyn 198] (gas: 32)\n 30670: a0 = u64 [sp + 0x240]\n 30674: a1 = u64 [sp + 0x258]\n 30678: a2 = u64 [sp + 0x248]\n 30682: a3 = u64 [sp + 0x250]\n 30686: a4 = a0 + 0x1\n 30689: a0 = a4 <u 0x1\n 30692: a2 = a2 + a0\n 30695: a0 = a4 | a2\n 30698: a0 = a0 <u 0x1\n 30701: a5 = a3 + a0\n 30704: a0 = a5 <u a3\n 30707: a0 = a0 + a1\n 30710: u64 [sp + 0x130] = a2\n 30714: u64 [sp + 0x388] = a2\n 30718: u64 [sp + 0x138] = a4\n 30722: u64 [sp + 0x380] = a4\n 30726: u64 [sp + 0x128] = a5\n 30730: u64 [sp + 0x390] = a5\n 30734: u64 [sp + 0x120] = a0\n 30738: u64 [sp + 0x398] = a0\n 30742: u64 [sp + 952] = 0\n 30746: u64 [sp + 944] = 0\n 30750: u64 [sp + 936] = 0\n 30754: u64 [sp + 928] = 0\n 30758: u32 [sp + 0x360] = s1\n 30762: i32 a1 = sp + 0x380\n 30766: i32 a3 = sp + 0x3a0\n 30770: i32 a4 = sp + 0x360\n 30774: a2 = 0xffffffffffffffff\n 30777: a0 = 0\n 30779: ecalli 4 // 'get_storage'\n 30781: fallthrough\n      : @426 (gas: 37)\n 30782: a3 = u64 [sp + 0x3a8]\n 30786: a1 = u64 [sp + 0x3a0]\n 30790: t0 = u64 [sp + 0x3b8]\n 30794: a2 = u64 [sp + 0x3b0]\n 30798: a5 = u64 [sp + 0x100]\n 30802: a5 = a5 + a3\n 30805: a0 = u64 [sp + 0x108]\n 30809: a0 = a0 + a1\n 30812: u64 [sp + 0x108] = a0\n 30816: a4 = a0 <u a1\n 30819: a5 = a5 + a4\n 30822: t1 = a5 ^ a3\n 30825: u64 [sp + 0x100] = a5\n 30829: a3 = a5 <u a3\n 30832: a5 = a4 ^ 0x1\n 30835: a4 = a3 if t1 != 0\n 30838: a0 = u64 [sp + 0x110]\n 30842: a0 = a0 + a2\n 30845: s1 = a0 + a4\n 30848: a4 = s1 <u a0\n 30851: a1 = u64 [sp + 0x118]\n 30855: a1 = a1 + t0\n 30858: a0 = a0 <u a2\n 30861: a0 = a0 + a1\n 30864: a4 = a4 + a0\n 30867: a0 = s1 <u a2\n 30870: a1 = a4 ^ t0\n 30873: u64 [sp + 0x118] = a4\n 30877: a4 = a4 <u t0\n 30880: a4 = a0 if a1 == 0\n 30883: a0 = a4 ^ 0x1\n 30886: a2 = a2 ^ s1\n 30889: a1 = a1 | a2\n 30892: a2 = a3 ^ 0x1\n 30895: a5 = a2 if t1 != 0\n 30898: a5 = a0 if a1 != 0\n 30901: jump @442 if a5 == 0\n      : @427 (gas: 34)\n 30905: a0 = u64 [sp + 0x128]\n 30909: u64 [sp + 0x390] = a0\n 30913: a0 = u64 [sp + 0x130]\n 30917: u64 [sp + 0x388] = a0\n 30921: a0 = u64 [sp + 0x138]\n 30925: u64 [sp + 0x380] = a0\n 30929: a0 = u64 [sp + 0x120]\n 30933: u64 [sp + 0x398] = a0\n 30937: u64 [sp + 952] = 0\n 30941: u64 [sp + 944] = 0\n 30945: u64 [sp + 936] = 0\n 30949: u64 [sp + 928] = 0\n 30953: u32 [sp + 864] = 0x20\n 30958: i32 a1 = sp + 0x380\n 30962: i32 a3 = sp + 0x3a0\n 30966: i32 a4 = sp + 0x360\n 30970: a2 = 0xffffffffffffffff\n 30973: a0 = 0\n 30975: ecalli 4 // 'get_storage'\n 30977: a0 = u64 [sp + 0x120]\n 30981: u64 [sp + 0x398] = a0\n 30985: a0 = u64 [sp + 0x128]\n 30989: u64 [sp + 0x390] = a0\n 30993: a0 = u64 [sp + 0x130]\n 30997: u64 [sp + 0x388] = a0\n 31001: a0 = u64 [sp + 0x138]\n 31005: u64 [sp + 0x380] = a0\n 31009: a0 = u64 [sp + 0x118]\n 31013: u64 [sp + 0x3b8] = a0\n 31017: u64 [sp + 0x3b0] = s1\n 31021: a0 = u64 [sp + 0x100]\n 31025: u64 [sp + 0x3a8] = a0\n 31029: a0 = u64 [sp + 0x108]\n 31033: jump @431\n      : @428 (gas: 46)\n 31036: a0 = u64 [sp + 0x8]\n 31039: u64 [sp + 0x390] = a0\n 31043: a0 = u64 [sp + 0x10]\n 31046: u64 [sp + 0x388] = a0\n 31050: a0 = u64 [sp + 0x18]\n 31053: u64 [sp + 0x380] = a0\n 31057: a0 = u64 [sp]\n 31059: u64 [sp + 0x398] = a0\n 31063: u64 [sp + 952] = 0\n 31067: u64 [sp + 944] = 0\n 31071: u64 [sp + 936] = 0\n 31075: u64 [sp + 928] = 0\n 31079: u32 [sp + 864] = 0x20\n 31084: i32 a1 = sp + 0x380\n 31088: i32 a3 = sp + 0x3a0\n 31092: i32 a4 = sp + 0x360\n 31096: a2 = 0xffffffffffffffff\n 31099: a0 = 0\n 31101: ecalli 4 // 'get_storage'\n 31103: a0 = u64 [sp + 0x3b8]\n 31107: u64 [sp + 0x108] = a0\n 31111: a0 = u64 [sp + 0x3b0]\n 31115: u64 [sp + 0x100] = a0\n 31119: a0 = u64 [sp + 0x3a0]\n 31123: u64 [sp + 0x118] = a0\n 31127: s1 = u64 [sp + 0x3a8]\n 31131: a1 = u64 [sp + 0x138]\n 31135: u64 [sp + 0x398] = a1\n 31139: a1 = u64 [sp + 0x130]\n 31143: u64 [sp + 0x390] = a1\n 31147: a1 = u64 [sp + 0x128]\n 31151: u64 [sp + 0x388] = a1\n 31155: a1 = u64 [sp + 0x120]\n 31159: u64 [sp + 0x380] = a1\n 31163: u64 [sp + 952] = 0\n 31167: u64 [sp + 944] = 0\n 31171: u64 [sp + 936] = 0\n 31175: u64 [sp + 928] = 0\n 31179: u32 [sp + 864] = 0x20\n 31184: i32 a1 = sp + 0x380\n 31188: i32 a3 = sp + 0x3a0\n 31192: i32 a4 = sp + 0x360\n 31196: a2 = 0xffffffffffffffff\n 31199: a0 = 0\n 31201: ecalli 4 // 'get_storage'\n 31203: fallthrough\n      : @429 (gas: 36)\n 31204: a3 = u64 [sp + 0x3a8]\n 31208: a1 = u64 [sp + 0x3a0]\n 31212: t0 = u64 [sp + 0x3b8]\n 31216: a2 = u64 [sp + 0x3b0]\n 31220: s1 = s1 + a3\n 31223: a0 = u64 [sp + 0x118]\n 31227: a0 = a0 + a1\n 31230: u64 [sp + 0x118] = a0\n 31234: a4 = a0 <u a1\n 31237: s1 = s1 + a4\n 31240: t1 = s1 ^ a3\n 31243: u64 [sp + 0x110] = s1\n 31247: a3 = s1 <u a3\n 31250: a5 = a4 ^ 0x1\n 31253: a4 = a3 if t1 != 0\n 31256: a0 = u64 [sp + 0x100]\n 31260: a0 = a0 + a2\n 31263: s1 = a0 + a4\n 31266: a4 = s1 <u a0\n 31269: a1 = u64 [sp + 0x108]\n 31273: a1 = a1 + t0\n 31276: a0 = a0 <u a2\n 31279: a0 = a0 + a1\n 31282: a4 = a4 + a0\n 31285: a0 = s1 <u a2\n 31288: a1 = a4 ^ t0\n 31291: u64 [sp + 0x108] = a4\n 31295: a4 = a4 <u t0\n 31298: a4 = a0 if a1 == 0\n 31301: a0 = a4 ^ 0x1\n 31304: a2 = a2 ^ s1\n 31307: a1 = a1 | a2\n 31310: a2 = a3 ^ 0x1\n 31313: a5 = a2 if t1 != 0\n 31316: a5 = a0 if a1 != 0\n 31319: jump @444 if a5 == 0\n      : @430 (gas: 34)\n 31323: a0 = u64 [sp + 0x130]\n 31327: u64 [sp + 0x390] = a0\n 31331: a0 = u64 [sp + 0x128]\n 31335: u64 [sp + 0x388] = a0\n 31339: a0 = u64 [sp + 0x120]\n 31343: u64 [sp + 0x380] = a0\n 31347: a0 = u64 [sp + 0x138]\n 31351: u64 [sp + 0x398] = a0\n 31355: u64 [sp + 952] = 0\n 31359: u64 [sp + 944] = 0\n 31363: u64 [sp + 936] = 0\n 31367: u64 [sp + 928] = 0\n 31371: u32 [sp + 864] = 0x20\n 31376: i32 a1 = sp + 0x380\n 31380: i32 a3 = sp + 0x3a0\n 31384: i32 a4 = sp + 0x360\n 31388: a2 = 0xffffffffffffffff\n 31391: a0 = 0\n 31393: ecalli 4 // 'get_storage'\n 31395: a0 = u64 [sp + 0x138]\n 31399: u64 [sp + 0x398] = a0\n 31403: a0 = u64 [sp + 0x130]\n 31407: u64 [sp + 0x390] = a0\n 31411: a0 = u64 [sp + 0x128]\n 31415: u64 [sp + 0x388] = a0\n 31419: a0 = u64 [sp + 0x120]\n 31423: u64 [sp + 0x380] = a0\n 31427: a0 = u64 [sp + 0x108]\n 31431: u64 [sp + 0x3b8] = a0\n 31435: u64 [sp + 0x3b0] = s1\n 31439: a0 = u64 [sp + 0x110]\n 31443: u64 [sp + 0x3a8] = a0\n 31447: a0 = u64 [sp + 0x118]\n 31451: fallthrough\n      : @431 (gas: 13)\n 31452: u64 [sp + 0x3a0] = a0\n 31456: i32 a1 = sp + 0x380\n 31460: i32 a3 = sp + 0x3a0\n 31464: a2 = 0xffffffffffffffff\n 31467: a4 = 0x20\n 31470: a0 = 0\n 31472: ecalli 8 // 'set_storage'\n 31474: sp = s0 + 0xfffffffffffffc20\n 31478: ra = u64 [sp + 0x3d8]\n 31482: s0 = u64 [sp + 0x3d0]\n 31486: s1 = u64 [sp + 0x3c8]\n 31490: sp = sp + 0x3e0\n 31494: ret\n      : @432 (gas: 3)\n 31496: a0 = 0x40\n 31499: a1 = 0x20\n 31502: ra = 398, jump @0\n      : @433 [@dyn 199] (gas: 103)\n 31508: a1 = u8 [a0 + 0x11]\n 31511: a2 = u8 [a0 + 0x10]\n 31514: a3 = u8 [a0 + 0x12]\n 31517: a4 = u8 [a0 + 0x13]\n 31520: a1 = a1 << 0x8\n 31523: a1 = a1 | a2\n 31526: a3 = a3 << 0x10\n 31529: a4 = a4 << 0x18\n 31532: a3 = a3 | a4\n 31535: a1 = a1 | a3\n 31538: a2 = u8 [a0 + 0x15]\n 31541: a3 = u8 [a0 + 0x14]\n 31544: a4 = u8 [a0 + 0x16]\n 31547: a5 = u8 [a0 + 0x17]\n 31550: a2 = a2 << 0x8\n 31553: a2 = a2 | a3\n 31556: a4 = a4 << 0x10\n 31559: a5 = a5 << 0x18\n 31562: a4 = a4 | a5\n 31565: a2 = a2 | a4\n 31568: a2 = a2 << 0x20\n 31571: t0 = a2 | a1\n 31574: a2 = u8 [a0 + 0x1]\n 31577: a3 = u8 [a0]\n 31579: a4 = u8 [a0 + 0x2]\n 31582: a5 = u8 [a0 + 0x3]\n 31585: a2 = a2 << 0x8\n 31588: a2 = a2 | a3\n 31591: a4 = a4 << 0x10\n 31594: a5 = a5 << 0x18\n 31597: a4 = a4 | a5\n 31600: a2 = a2 | a4\n 31603: a3 = u8 [a0 + 0x5]\n 31606: a4 = u8 [a0 + 0x4]\n 31609: a5 = u8 [a0 + 0x6]\n 31612: s1 = u8 [a0 + 0x7]\n 31615: a3 = a3 << 0x8\n 31618: a3 = a3 | a4\n 31621: a5 = a5 << 0x10\n 31624: s1 = s1 << 0x18\n 31627: a5 = a5 | s1\n 31630: a3 = a3 | a5\n 31633: a3 = a3 << 0x20\n 31636: a2 = a2 | a3\n 31639: a3 = u8 [a0 + 0x19]\n 31642: a4 = u8 [a0 + 0x18]\n 31645: a5 = u8 [a0 + 0x1a]\n 31648: s1 = u8 [a0 + 0x1b]\n 31651: a3 = a3 << 0x8\n 31654: a3 = a3 | a4\n 31657: a5 = a5 << 0x10\n 31660: s1 = s1 << 0x18\n 31663: a5 = a5 | s1\n 31666: a3 = a3 | a5\n 31669: a4 = u8 [a0 + 0x1d]\n 31672: a5 = u8 [a0 + 0x1c]\n 31675: s1 = u8 [a0 + 0x1e]\n 31678: a1 = u8 [a0 + 0x1f]\n 31681: a4 = a4 << 0x8\n 31684: a4 = a4 | a5\n 31687: s1 = s1 << 0x10\n 31690: a1 = a1 << 0x18\n 31693: a1 = a1 | s1\n 31696: a1 = a1 | a4\n 31699: a1 = a1 << 0x20\n 31702: a3 = a3 | a1\n 31705: a1 = u8 [a0 + 0x9]\n 31708: a4 = u8 [a0 + 0x8]\n 31711: a5 = u8 [a0 + 0xa]\n 31714: s1 = u8 [a0 + 0xb]\n 31717: a1 = a1 << 0x8\n 31720: a1 = a1 | a4\n 31723: a5 = a5 << 0x10\n 31726: s1 = s1 << 0x18\n 31729: a5 = a5 | s1\n 31732: a1 = a1 | a5\n 31735: a4 = u8 [a0 + 0xd]\n 31738: a5 = u8 [a0 + 0xc]\n 31741: s1 = u8 [a0 + 0xe]\n 31744: a0 = u8 [a0 + 0xf]\n 31747: a4 = a4 << 0x8\n 31750: a4 = a4 | a5\n 31753: s1 = s1 << 0x10\n 31756: a0 = a0 << 0x18\n 31759: a0 = a0 | s1\n 31762: a0 = a0 | a4\n 31765: a0 = a0 << 0x20\n 31768: a0 = a0 | a1\n 31771: s1 = reverse a0\n 31773: a1 = reverse a3\n 31775: a2 = reverse a2\n 31777: a0 = reverse t0\n 31779: u64 [sp + 0x138] = a0\n 31783: u64 [sp + 0x130] = a2\n 31787: a0 = a0 | a2\n 31790: a2 = a1\n 31792: a1 = a1 | s1\n 31795: a1 = a1 | a0\n 31798: a1 = a1 >> 0x20\n 31801: a0 = a0 | s1\n 31804: a0 = a0 << 0x20\n 31807: a0 = a0 | a1\n 31810: jump @418 if a0 != 0\n      : @434 (gas: 5)\n 31814: u64 [sp + 0x128] = a2\n 31818: i32 a0 = a2 + 0\n 31820: a1 = 0x20\n 31823: u64 [sp + 0x120] = a0\n 31827: ra = 400, jump @0\n      : @435 [@dyn 200] (gas: 50)\n 31833: u8 [a0 + 31] = 0\n 31836: u8 [a0 + 30] = 0\n 31839: u8 [a0 + 29] = 0\n 31842: u8 [a0 + 28] = 0\n 31845: u8 [a0 + 27] = 0\n 31848: u8 [a0 + 26] = 0\n 31851: u8 [a0 + 25] = 0\n 31854: u8 [a0 + 24] = 0\n 31857: u8 [a0 + 23] = 0\n 31860: u8 [a0 + 22] = 0\n 31863: u8 [a0 + 21] = 0\n 31866: u8 [a0 + 20] = 0\n 31869: u8 [a0 + 19] = 0\n 31872: u8 [a0 + 18] = 0\n 31875: u8 [a0 + 17] = 0\n 31878: u8 [a0 + 16] = 0\n 31881: u8 [a0 + 15] = 0\n 31884: u8 [a0 + 14] = 0\n 31887: u8 [a0 + 13] = 0\n 31890: u8 [a0 + 12] = 0\n 31893: u8 [a0 + 11] = 0\n 31896: u8 [a0 + 10] = 0\n 31899: u8 [a0 + 9] = 0\n 31902: u8 [a0 + 8] = 0\n 31905: u8 [a0 + 7] = 0\n 31908: u8 [a0 + 6] = 0\n 31911: u8 [a0 + 5] = 0\n 31914: u8 [a0 + 4] = 0\n 31917: u8 [a0 + 3] = 0xa0\n 31922: u8 [a0 + 2] = 0x79\n 31926: u8 [a0 + 1] = 0xc3\n 31931: u8 [a0 + 0] = 0x8\n 31934: a1 = u64 [sp + 0x128]\n 31938: a0 = a1 + 0x4\n 31941: a1 = a0 <u a1\n 31944: a3 = u64 [sp + 0x138]\n 31948: a2 = a3 + a1\n 31951: a3 = a2 <u a3\n 31954: a3 = a1 if a1 == 0\n 31957: a3 = a3 + s1\n 31960: a1 = a3 <u s1\n 31963: a4 = u64 [sp + 0x130]\n 31967: a4 = a4 + a1\n 31970: u64 [sp + 0x2c8] = a2\n 31974: u64 [sp + 0x2c0] = a0\n 31978: u64 [sp + 0x2d0] = a3\n 31982: a0 = sp + 0x2e0\n 31986: a1 = sp + 0x2c0\n 31990: u64 [sp + 0x2d8] = a4\n 31994: ra = 402, jump @370\n      : @436 [@dyn 201] (gas: 5)\n 32000: a0 = u64 [sp + 0x2e8]\n 32004: t0 = u64 [sp + 0x2f8]\n 32008: t1 = u64 [sp + 0x2e0]\n 32012: a3 = u64 [sp + 0x2f0]\n 32016: jump @417\n      : @437 (gas: 3)\n 32019: a0 = 0x40\n 32022: a1 = 0x20\n 32025: ra = 404, jump @0\n      : @438 [@dyn 202] (gas: 103)\n 32031: a1 = u8 [a0 + 0x11]\n 32034: a2 = u8 [a0 + 0x10]\n 32037: a3 = u8 [a0 + 0x12]\n 32040: a4 = u8 [a0 + 0x13]\n 32043: a1 = a1 << 0x8\n 32046: a1 = a1 | a2\n 32049: a3 = a3 << 0x10\n 32052: a4 = a4 << 0x18\n 32055: a3 = a3 | a4\n 32058: a1 = a1 | a3\n 32061: a2 = u8 [a0 + 0x15]\n 32064: a3 = u8 [a0 + 0x14]\n 32067: a4 = u8 [a0 + 0x16]\n 32070: a5 = u8 [a0 + 0x17]\n 32073: a2 = a2 << 0x8\n 32076: a2 = a2 | a3\n 32079: a4 = a4 << 0x10\n 32082: a5 = a5 << 0x18\n 32085: a4 = a4 | a5\n 32088: a2 = a2 | a4\n 32091: a2 = a2 << 0x20\n 32094: t0 = a2 | a1\n 32097: a2 = u8 [a0 + 0x1]\n 32100: a3 = u8 [a0]\n 32102: a4 = u8 [a0 + 0x2]\n 32105: a5 = u8 [a0 + 0x3]\n 32108: a2 = a2 << 0x8\n 32111: a2 = a2 | a3\n 32114: a4 = a4 << 0x10\n 32117: a5 = a5 << 0x18\n 32120: a4 = a4 | a5\n 32123: a2 = a2 | a4\n 32126: a3 = u8 [a0 + 0x5]\n 32129: a4 = u8 [a0 + 0x4]\n 32132: a5 = u8 [a0 + 0x6]\n 32135: s1 = u8 [a0 + 0x7]\n 32138: a3 = a3 << 0x8\n 32141: a3 = a3 | a4\n 32144: a5 = a5 << 0x10\n 32147: s1 = s1 << 0x18\n 32150: a5 = a5 | s1\n 32153: a3 = a3 | a5\n 32156: a3 = a3 << 0x20\n 32159: a2 = a2 | a3\n 32162: a3 = u8 [a0 + 0x19]\n 32165: a4 = u8 [a0 + 0x18]\n 32168: a5 = u8 [a0 + 0x1a]\n 32171: s1 = u8 [a0 + 0x1b]\n 32174: a3 = a3 << 0x8\n 32177: a3 = a3 | a4\n 32180: a5 = a5 << 0x10\n 32183: s1 = s1 << 0x18\n 32186: a5 = a5 | s1\n 32189: a3 = a3 | a5\n 32192: a4 = u8 [a0 + 0x1d]\n 32195: a5 = u8 [a0 + 0x1c]\n 32198: s1 = u8 [a0 + 0x1e]\n 32201: a1 = u8 [a0 + 0x1f]\n 32204: a4 = a4 << 0x8\n 32207: a4 = a4 | a5\n 32210: s1 = s1 << 0x10\n 32213: a1 = a1 << 0x18\n 32216: a1 = a1 | s1\n 32219: a1 = a1 | a4\n 32222: a1 = a1 << 0x20\n 32225: a3 = a3 | a1\n 32228: a1 = u8 [a0 + 0x9]\n 32231: a4 = u8 [a0 + 0x8]\n 32234: a5 = u8 [a0 + 0xa]\n 32237: s1 = u8 [a0 + 0xb]\n 32240: a1 = a1 << 0x8\n 32243: a1 = a1 | a4\n 32246: a5 = a5 << 0x10\n 32249: s1 = s1 << 0x18\n 32252: a5 = a5 | s1\n 32255: a1 = a1 | a5\n 32258: a4 = u8 [a0 + 0xd]\n 32261: a5 = u8 [a0 + 0xc]\n 32264: s1 = u8 [a0 + 0xe]\n 32267: a0 = u8 [a0 + 0xf]\n 32270: a4 = a4 << 0x8\n 32273: a4 = a4 | a5\n 32276: s1 = s1 << 0x10\n 32279: a0 = a0 << 0x18\n 32282: a0 = a0 | s1\n 32285: a0 = a0 | a4\n 32288: a0 = a0 << 0x20\n 32291: a0 = a0 | a1\n 32294: s1 = reverse a0\n 32296: a1 = reverse a3\n 32298: a2 = reverse a2\n 32300: a0 = reverse t0\n 32302: u64 [sp + 0x138] = a0\n 32306: u64 [sp + 0x130] = a2\n 32310: a0 = a0 | a2\n 32313: a2 = a1\n 32315: a1 = a1 | s1\n 32318: a1 = a1 | a0\n 32321: a1 = a1 >> 0x20\n 32324: a0 = a0 | s1\n 32327: a0 = a0 << 0x20\n 32330: a0 = a0 | a1\n 32333: jump @418 if a0 != 0\n      : @439 (gas: 5)\n 32337: u64 [sp + 0x128] = a2\n 32341: i32 a0 = a2 + 0\n 32343: a1 = 0x20\n 32346: u64 [sp + 0x120] = a0\n 32350: ra = 406, jump @0\n      : @440 [@dyn 203] (gas: 50)\n 32356: u8 [a0 + 31] = 0\n 32359: u8 [a0 + 30] = 0\n 32362: u8 [a0 + 29] = 0\n 32365: u8 [a0 + 28] = 0\n 32368: u8 [a0 + 27] = 0\n 32371: u8 [a0 + 26] = 0\n 32374: u8 [a0 + 25] = 0\n 32377: u8 [a0 + 24] = 0\n 32380: u8 [a0 + 23] = 0\n 32383: u8 [a0 + 22] = 0\n 32386: u8 [a0 + 21] = 0\n 32389: u8 [a0 + 20] = 0\n 32392: u8 [a0 + 19] = 0\n 32395: u8 [a0 + 18] = 0\n 32398: u8 [a0 + 17] = 0\n 32401: u8 [a0 + 16] = 0\n 32404: u8 [a0 + 15] = 0\n 32407: u8 [a0 + 14] = 0\n 32410: u8 [a0 + 13] = 0\n 32413: u8 [a0 + 12] = 0\n 32416: u8 [a0 + 11] = 0\n 32419: u8 [a0 + 10] = 0\n 32422: u8 [a0 + 9] = 0\n 32425: u8 [a0 + 8] = 0\n 32428: u8 [a0 + 7] = 0\n 32431: u8 [a0 + 6] = 0\n 32434: u8 [a0 + 5] = 0\n 32437: u8 [a0 + 4] = 0\n 32440: u8 [a0 + 3] = 0xa0\n 32445: u8 [a0 + 2] = 0x79\n 32449: u8 [a0 + 1] = 0xc3\n 32454: u8 [a0 + 0] = 0x8\n 32457: a1 = u64 [sp + 0x128]\n 32461: a0 = a1 + 0x4\n 32464: a1 = a0 <u a1\n 32467: a3 = u64 [sp + 0x138]\n 32471: a2 = a3 + a1\n 32474: a3 = a2 <u a3\n 32477: a3 = a1 if a1 == 0\n 32480: a3 = a3 + s1\n 32483: a1 = a3 <u s1\n 32486: a4 = u64 [sp + 0x130]\n 32490: a4 = a4 + a1\n 32493: u64 [sp + 0x148] = a2\n 32497: u64 [sp + 0x140] = a0\n 32501: u64 [sp + 0x150] = a3\n 32505: a0 = sp + 0x160\n 32509: a1 = sp + 0x140\n 32513: u64 [sp + 0x158] = a4\n 32517: ra = 408, jump @378\n      : @441 [@dyn 204] (gas: 5)\n 32523: a0 = u64 [sp + 0x168]\n 32527: t0 = u64 [sp + 0x178]\n 32531: t1 = u64 [sp + 0x160]\n 32535: a3 = u64 [sp + 0x170]\n 32539: jump @417\n      : @442 (gas: 8)\n 32542: u64 [sp + 496] = 0\n 32546: u64 [sp + 488] = 0\n 32550: u64 [sp + 480] = 0\n 32554: a0 = 0x4e487b7100000000\n 32564: a1 = sp + 0x1e0\n 32568: u64 [sp + 0x1f8] = a0\n 32572: a0 = 0\n 32574: ra = 410, jump @8\n      : @443 [@dyn 205] (gas: 8)\n 32580: u64 [sp + 472] = 0\n 32584: u64 [sp + 464] = 0\n 32588: u64 [sp + 448] = 0x11\n 32593: a0 = 0x4\n 32596: a1 = sp + 0x1c0\n 32600: u64 [sp + 456] = 0\n 32604: ra = 0x19e\n 32608: jump @8\n      : @444 (gas: 8)\n 32611: u64 [sp + 432] = 0\n 32615: u64 [sp + 424] = 0\n 32619: u64 [sp + 416] = 0\n 32623: a0 = 0x4e487b7100000000\n 32633: a1 = sp + 0x1a0\n 32637: u64 [sp + 0x1b8] = a0\n 32641: a0 = 0\n 32643: ra = 412, jump @8\n      : @445 [@dyn 206] (gas: 7)\n 32649: u64 [sp + 408] = 0\n 32653: u64 [sp + 400] = 0\n 32657: u64 [sp + 384] = 0x11\n 32662: a0 = 0x4\n 32665: a1 = sp + 0x180\n 32669: u64 [sp + 392] = 0\n 32673: ra = 414, jump @8\n      : @446 [@dyn 207] (gas: 3)\n 32679: a1 = 0x24\n 32682: a0 = 0\n 32684: ra = 416, jump @0\n      : @447 [@dyn 208] (gas: 5)\n 32690: i32 a1 = a0 + 0\n 32692: a0 = 0x1\n 32695: a2 = 0x24\n 32698: ecalli 6 // 'seal_return'\n 32700: fallthrough\n      : @448 (gas: 4)\n 32701: i32 s1 = a0 + 0\n 32703: a0 = u64 [sp + 0x120]\n 32707: a1 = s1\n 32709: ra = 418, jump @0\n      : @449 [@dyn 209] (gas: 6)\n 32715: i32 a1 = a0 + 0\n 32717: a0 = 0x1\n 32720: a2 = s1\n 32722: ra = 0x1a4\n 32726: ecalli 6 // 'seal_return'\n 32728: fallthrough\n      : @450 [@dyn 210] (gas: 5)\n 32729: u64 [a0 + 24] = 0\n 32732: u64 [a0 + 16] = 0\n 32735: u64 [a0 + 8] = 0\n 32738: u64 [a0 + 0] = 0\n 32740: ret\n      : @451 (gas: 26)\n 32742: sp = sp + 0xfffffffffffffe20\n 32746: u64 [sp + 0x1d8] = ra\n 32750: u64 [sp + 0x1d0] = s0\n 32754: u64 [sp + 0x1c8] = s1\n 32758: s0 = sp + 0x1e0\n 32762: sp = sp & 0xffffffffffffffe0\n 32765: u64 [sp] = a0\n 32767: u64 [sp + 64] = 0\n 32770: u64 [sp + 56] = 0\n 32773: u64 [sp + 48] = 0\n 32776: u64 [sp + 40] = 0\n 32779: u64 [sp + 32] = 0\n 32782: u64 [sp + 24] = 0\n 32785: u64 [sp + 16] = 0\n 32788: u64 [sp + 8] = 0\n 32791: u64 [sp + 120] = 0\n 32794: s1 = 0\n 32796: u64 [sp + 104] = 0\n 32799: u64 [sp + 112] = 0\n 32802: i32 a1 = sp + 0x180\n 32806: i32 a3 = sp + 0x1a0\n 32810: i32 a4 = sp + 0x1c0\n 32814: u64 [sp + 0x58] = a1\n 32817: u64 [sp + 0x50] = a3\n 32820: u64 [sp + 0x48] = a4\n 32823: jump @453\n      : @452 (gas: 20)\n 32825: a1 = u64 [sp + 0x78]\n 32828: a1 = a1 + 0x1\n 32831: a0 = a1 <u 0x1\n 32834: a2 = u64 [sp + 0x60]\n 32837: a2 = a2 + a0\n 32840: u64 [sp + 0x78] = a1\n 32843: s1 = a2\n 32845: a0 = a1 | a2\n 32848: a0 = a0 <u 0x1\n 32851: a1 = u64 [sp + 0x68]\n 32854: a0 = a0 + a1\n 32857: a1 = a0 <u a1\n 32860: a2 = u64 [sp + 0x70]\n 32863: a2 = a2 + a1\n 32866: u64 [sp + 0x70] = a2\n 32869: u64 [sp + 0x68] = a0\n 32872: a1 = u64 [sp + 0x58]\n 32875: a3 = u64 [sp + 0x50]\n 32878: a4 = u64 [sp + 0x48]\n 32881: fallthrough\n      : @453 (gas: 13)\n 32882: u64 [sp + 408] = 0\n 32886: u64 [sp + 400] = 0\n 32890: u64 [sp + 392] = 0\n 32894: u64 [sp + 384] = 0x2\n 32899: u64 [sp + 440] = 0\n 32903: u64 [sp + 432] = 0\n 32907: u64 [sp + 424] = 0\n 32911: u64 [sp + 416] = 0\n 32915: u32 [sp + 448] = 0x20\n 32920: a2 = 0xffffffffffffffff\n 32923: a0 = 0\n 32925: ecalli 4 // 'get_storage'\n 32927: fallthrough\n      : @454 (gas: 21)\n 32928: a0 = u64 [sp + 0x1b8]\n 32932: a1 = u64 [sp + 0x1a0]\n 32936: t1 = u64 [sp + 0x1b0]\n 32940: a3 = u64 [sp + 0x1a8]\n 32944: a4 = u64 [sp + 0x70]\n 32947: t0 = a4 ^ a0\n 32950: a0 = a4 <u a0\n 32953: a2 = u64 [sp + 0x68]\n 32956: a5 = a2 <u t1\n 32959: a5 = a0 if t0 != 0\n 32962: a4 = s1\n 32964: a0 = s1 ^ a3\n 32967: t2 = s1\n 32969: a3 = s1 <u a3\n 32972: s1 = u64 [sp + 0x78]\n 32975: a1 = s1 <u a1\n 32978: a1 = a3 if a0 != 0\n 32981: a2 = a2 ^ t1\n 32984: a2 = a2 | t0\n 32987: a1 = a5 if a2 != 0\n 32990: jump @460 if a1 == 0\n      : @455 (gas: 16)\n 32994: a0 = u64 [sp + 0x78]\n 32997: u64 [sp + 0x100] = a0\n 33001: u64 [sp + 312] = 0\n 33005: u64 [sp + 304] = 0\n 33009: u64 [sp + 296] = 0\n 33013: u64 [sp + 288] = 0x2\n 33018: u64 [sp + 0x60] = t2\n 33021: u64 [sp + 0x108] = t2\n 33025: a0 = u64 [sp + 0x68]\n 33028: u64 [sp + 0x110] = a0\n 33032: a0 = sp + 0x140\n 33036: a1 = sp + 0x120\n 33040: a2 = sp + 0x100\n 33044: a3 = u64 [sp + 0x70]\n 33047: u64 [sp + 0x118] = a3\n 33051: ra = 422, jump @181\n      : @456 [@dyn 211] (gas: 28)\n 33057: a0 = u64 [sp + 0x140]\n 33061: a1 = u64 [sp + 0x158]\n 33065: a2 = u64 [sp + 0x148]\n 33069: a3 = u64 [sp + 0x150]\n 33073: a0 = a0 + 0x1\n 33076: a4 = a0 <u 0x1\n 33079: a2 = a2 + a4\n 33082: a4 = a0 | a2\n 33085: a4 = a4 <u 0x1\n 33088: a4 = a4 + a3\n 33091: a3 = a4 <u a3\n 33094: a1 = a1 + a3\n 33097: u64 [sp + 0x188] = a2\n 33101: u64 [sp + 0x180] = a0\n 33105: u64 [sp + 0x190] = a4\n 33109: u64 [sp + 0x198] = a1\n 33113: u64 [sp + 440] = 0\n 33117: u64 [sp + 432] = 0\n 33121: u64 [sp + 424] = 0\n 33125: u64 [sp + 416] = 0\n 33129: u32 [sp + 448] = 0x20\n 33134: a2 = 0xffffffffffffffff\n 33137: a0 = 0\n 33139: a1 = u64 [sp + 0x58]\n 33142: a3 = u64 [sp + 0x50]\n 33145: a4 = u64 [sp + 0x48]\n 33148: ecalli 4 // 'get_storage'\n 33150: fallthrough\n      : @457 (gas: 20)\n 33151: a0 = u64 [sp + 0x1b8]\n 33155: a1 = u64 [sp + 0x1a0]\n 33159: t1 = u64 [sp + 0x1b0]\n 33163: a3 = u64 [sp + 0x1a8]\n 33167: a2 = u64 [sp + 0x28]\n 33170: a4 = a0 ^ a2\n 33173: a0 = a2 <u a0\n 33176: a2 = u64 [sp + 0x30]\n 33179: a5 = a2 <u t1\n 33182: a5 = a0 if a4 != 0\n 33185: a0 = u64 [sp + 0x38]\n 33188: t0 = a3 ^ a0\n 33191: a3 = a0 <u a3\n 33194: s1 = u64 [sp + 0x40]\n 33197: a1 = s1 <u a1\n 33200: a1 = a3 if t0 != 0\n 33203: a0 = t1 ^ a2\n 33206: a0 = a0 | a4\n 33209: a1 = a5 if a0 != 0\n 33212: jump @452 if a1 == 0\n      : @458 (gas: 16)\n 33216: a0 = u64 [sp + 0x78]\n 33219: u64 [sp + 0x80] = a0\n 33223: u64 [sp + 184] = 0\n 33227: u64 [sp + 176] = 0\n 33231: u64 [sp + 168] = 0\n 33235: u64 [sp + 160] = 0x2\n 33240: s1 = u64 [sp + 0x60]\n 33243: u64 [sp + 0x88] = s1\n 33247: a0 = u64 [sp + 0x68]\n 33250: u64 [sp + 0x90] = a0\n 33254: a0 = sp + 0xc0\n 33258: a1 = sp + 0xa0\n 33262: a2 = sp + 0x80\n 33266: a3 = u64 [sp + 0x70]\n 33269: u64 [sp + 0x98] = a3\n 33273: ra = 424, jump @181\n      : @459 [@dyn 212] (gas: 43)\n 33279: a0 = u64 [sp + 0xc0]\n 33283: a1 = u64 [sp + 0xd8]\n 33287: a2 = u64 [sp + 0xc8]\n 33291: a3 = u64 [sp + 0xd0]\n 33295: a0 = a0 + 0x1\n 33298: a4 = a0 <u 0x1\n 33301: a2 = a2 + a4\n 33304: a4 = a0 | a2\n 33307: a4 = a4 <u 0x1\n 33310: a4 = a4 + a3\n 33313: a3 = a4 <u a3\n 33316: a1 = a1 + a3\n 33319: u64 [sp + 0x188] = a2\n 33323: u64 [sp + 0x180] = a0\n 33327: u64 [sp + 0x190] = a4\n 33331: u64 [sp + 0x198] = a1\n 33335: u64 [sp + 440] = 0\n 33339: u64 [sp + 432] = 0\n 33343: u64 [sp + 424] = 0\n 33347: u64 [sp + 416] = 0\n 33351: u32 [sp + 448] = 0x20\n 33356: i32 a1 = sp + 0x180\n 33360: i32 a3 = sp + 0x1a0\n 33364: i32 a4 = sp + 0x1c0\n 33368: a2 = 0xffffffffffffffff\n 33371: a0 = 0\n 33373: ecalli 4 // 'get_storage'\n 33375: a0 = u64 [sp + 0x1b8]\n 33379: u64 [sp + 0x28] = a0\n 33382: a0 = u64 [sp + 0x1b0]\n 33386: u64 [sp + 0x30] = a0\n 33389: a0 = u64 [sp + 0x1a8]\n 33393: u64 [sp + 0x38] = a0\n 33396: a0 = u64 [sp + 0x1a0]\n 33400: u64 [sp + 0x40] = a0\n 33403: a0 = u64 [sp + 0x78]\n 33406: u64 [sp + 0x20] = a0\n 33409: u64 [sp + 0x18] = s1\n 33412: a0 = u64 [sp + 0x68]\n 33415: u64 [sp + 0x10] = a0\n 33418: a0 = u64 [sp + 0x70]\n 33421: u64 [sp + 0x8] = a0\n 33424: jump @452\n      : @460 (gas: 15)\n 33427: a0 = u64 [sp]\n 33429: a1 = u64 [sp + 0x20]\n 33432: u64 [a0] = a1\n 33434: a1 = u64 [sp + 0x18]\n 33437: u64 [a0 + 0x8] = a1\n 33440: a1 = u64 [sp + 0x10]\n 33443: u64 [a0 + 0x10] = a1\n 33446: a1 = u64 [sp + 0x8]\n 33449: u64 [a0 + 0x18] = a1\n 33452: sp = s0 + 0xfffffffffffffe20\n 33456: ra = u64 [sp + 0x1d8]\n 33460: s0 = u64 [sp + 0x1d0]\n 33464: s1 = u64 [sp + 0x1c8]\n 33468: sp = sp + 0x1e0\n 33472: ret\n      : @461 (gas: 17)\n 33474: sp = sp + 0xffffffffffffffa0\n 33477: u64 [sp + 0x58] = ra\n 33480: u64 [sp + 0x50] = s0\n 33483: u64 [sp + 0x48] = s1\n 33486: a3 = u64 [a1 + 0x18]\n 33489: a4 = u64 [a1 + 0x10]\n 33492: a5 = u64 [a1 + 0x8]\n 33495: s1 = u64 [a1]\n 33497: a1 = a5 | a3\n 33500: a2 = s1 | a4\n 33503: a2 = a2 | a1\n 33506: a2 = a2 >> 0x20\n 33509: a1 = a1 | a4\n 33512: a1 = a1 << 0x20\n 33515: a1 = a1 | a2\n 33518: u64 [sp + 0x20] = a0\n 33521: jump @470 if a1 != 0\n      : @462 (gas: 19)\n 33525: a0 = s1 + 0x20\n 33528: u64 [sp + 0x38] = a0\n 33531: a0 = a0 <u s1\n 33534: a1 = a5 + a0\n 33537: u64 [sp + 0x40] = a1\n 33540: u64 [sp + 0x8] = a5\n 33543: s0 = a1 <u a5\n 33546: s0 = a0 if a0 == 0\n 33549: s0 = s0 + a4\n 33552: u64 [sp + 0x10] = a4\n 33555: a0 = s0 <u a4\n 33558: u64 [sp + 0x18] = a3\n 33561: a0 = a0 + a3\n 33564: u64 [sp + 0x30] = a0\n 33567: u64 [sp] = s1\n 33569: i32 a0 = s1 + 0\n 33571: a1 = 0x20\n 33574: s1 = 0x20\n 33577: ra = 426, jump @0\n      : @463 [@dyn 213] (gas: 43)\n 33584: u8 [a0 + 0x1f] = s1\n 33587: a1 = u64 [sp + 0x38]\n 33590: a1 = a1 | s0\n 33593: a2 = u64 [sp + 0x40]\n 33596: a3 = u64 [sp + 0x30]\n 33599: a2 = a2 | a3\n 33602: a1 = a1 | a2\n 33605: a1 = a1 >> 0x20\n 33608: a2 = a2 | s0\n 33611: a2 = a2 << 0x20\n 33614: a1 = a1 | a2\n 33617: u8 [a0 + 30] = 0\n 33620: u8 [a0 + 29] = 0\n 33623: u8 [a0 + 28] = 0\n 33626: u8 [a0 + 27] = 0\n 33629: u8 [a0 + 26] = 0\n 33632: u8 [a0 + 25] = 0\n 33635: u8 [a0 + 24] = 0\n 33638: u8 [a0 + 23] = 0\n 33641: u8 [a0 + 22] = 0\n 33644: u8 [a0 + 21] = 0\n 33647: u8 [a0 + 20] = 0\n 33650: u8 [a0 + 19] = 0\n 33653: u8 [a0 + 18] = 0\n 33656: u8 [a0 + 17] = 0\n 33659: u8 [a0 + 16] = 0\n 33662: u8 [a0 + 15] = 0\n 33665: u8 [a0 + 14] = 0\n 33668: u8 [a0 + 13] = 0\n 33671: u8 [a0 + 12] = 0\n 33674: u8 [a0 + 11] = 0\n 33677: u8 [a0 + 10] = 0\n 33680: u8 [a0 + 9] = 0\n 33683: u8 [a0 + 8] = 0\n 33686: u8 [a0 + 7] = 0\n 33689: u8 [a0 + 6] = 0\n 33692: u8 [a0 + 5] = 0\n 33695: u8 [a0 + 4] = 0\n 33698: u8 [a0 + 3] = 0\n 33701: u8 [a0 + 2] = 0\n 33704: u8 [a0 + 1] = 0\n 33707: u8 [a0 + 0] = 0\n 33709: jump @470 if a1 != 0\n      : @464 (gas: 6)\n 33713: s1 = s0\n 33715: s0 = u64 [sp + 0x38]\n 33718: i32 a0 = s0 + 0\n 33720: a1 = 0x20\n 33723: u64 [sp + 0x28] = a0\n 33726: ra = 428, jump @0\n      : @465 [@dyn 214] (gas: 42)\n 33733: u8 [a0 + 31] = 0x28\n 33737: u8 [a0 + 30] = 0\n 33740: u8 [a0 + 29] = 0\n 33743: u8 [a0 + 28] = 0\n 33746: u8 [a0 + 27] = 0\n 33749: u8 [a0 + 26] = 0\n 33752: u8 [a0 + 25] = 0\n 33755: u8 [a0 + 24] = 0\n 33758: u8 [a0 + 23] = 0\n 33761: u8 [a0 + 22] = 0\n 33764: u8 [a0 + 21] = 0\n 33767: u8 [a0 + 20] = 0\n 33770: u8 [a0 + 19] = 0\n 33773: u8 [a0 + 18] = 0\n 33776: u8 [a0 + 17] = 0\n 33779: u8 [a0 + 16] = 0\n 33782: u8 [a0 + 15] = 0\n 33785: u8 [a0 + 14] = 0\n 33788: u8 [a0 + 13] = 0\n 33791: u8 [a0 + 12] = 0\n 33794: u8 [a0 + 11] = 0\n 33797: u8 [a0 + 10] = 0\n 33800: u8 [a0 + 9] = 0\n 33803: u8 [a0 + 8] = 0\n 33806: u8 [a0 + 7] = 0\n 33809: u8 [a0 + 6] = 0\n 33812: u8 [a0 + 5] = 0\n 33815: u8 [a0 + 4] = 0\n 33818: u8 [a0 + 3] = 0\n 33821: u8 [a0 + 2] = 0\n 33824: u8 [a0 + 1] = 0\n 33827: a1 = u64 [sp + 0x30]\n 33830: a2 = s1 | a1\n 33833: s1 = 0x100000000\n 33843: a1 = 0xffffffe0\n 33853: a1 = s0 <u a1\n 33856: s0 = a2\n 33858: a2 = u64 [sp + 0x40]\n 33861: a1 = 0 if a2 != 0\n 33863: a1 = 0 if s0 != 0\n 33865: u8 [a0 + 0] = 0\n 33867: jump @470 if a1 == 0\n      : @466 (gas: 4)\n 33871: a0 = u64 [sp + 0x28]\n 33874: i32 a0 = a0 + 0x20\n 33877: a1 = 0x20\n 33880: ra = 430, jump @0\n      : @467 [@dyn 215] (gas: 41)\n 33887: u8 [a0 + 28] = 0x67\n 33891: u8 [a0 + 21] = 0x67\n 33895: u8 [a0 + 13] = 0x73\n 33899: u8 [a0 + 10] = 0x70\n 33903: u8 [a0 + 26] = 0x72\n 33907: u8 [a0 + 12] = 0x72\n 33911: u8 [a0 + 9] = 0x72\n 33915: u8 [a0 + 27] = 0x69\n 33919: u8 [a0 + 22] = 0x69\n 33923: u8 [a0 + 8] = 0x69\n 33927: u8 [a0 + 18] = 0x61\n 33931: u8 [a0 + 7] = 0x61\n 33935: u8 [a0 + 29] = 0x68\n 33939: u8 [a0 + 6] = 0x68\n 33943: u8 [a0 + 17] = 0x63\n 33947: u8 [a0 + 5] = 0x63\n 33951: u8 [a0 + 31] = 0x20\n 33955: u8 [a0 + 25] = 0x20\n 33959: u8 [a0 + 20] = 0x20\n 33963: u8 [a0 + 16] = 0x20\n 33967: u8 [a0 + 4] = 0x20\n 33971: u8 [a0 + 3] = 0x79\n 33975: u8 [a0 + 2] = 0x6c\n 33979: u8 [a0 + 19] = 0x6e\n 33983: u8 [a0 + 15] = 0x6e\n 33987: u8 [a0 + 1] = 0x6e\n 33991: u8 [a0 + 0] = 0x4f\n 33994: u8 [a0 + 30] = 0x74\n 33998: a1 = s1 + 0xffffffffffffffc0\n 34001: a2 = u64 [sp + 0x38]\n 34004: a1 = a2 <u a1\n 34007: s1 = 0x65\n 34010: u8 [a0 + 0x18] = s1\n 34013: a2 = u64 [sp + 0x40]\n 34016: a1 = 0 if a2 != 0\n 34018: u8 [a0 + 23] = 0x76\n 34022: a1 = 0 if s0 != 0\n 34024: s0 = 0x6f\n 34027: u8 [a0 + 0xe] = s0\n 34030: u8 [a0 + 0xb] = s1\n 34033: jump @470 if a1 == 0\n      : @468 (gas: 4)\n 34037: a0 = u64 [sp + 0x28]\n 34040: i32 a0 = a0 + 0x40\n 34043: a1 = 0x20\n 34046: ra = 432, jump @0\n      : @469 [@dyn 216] (gas: 54)\n 34053: u8 [a0 + 31] = 0\n 34056: u8 [a0 + 30] = 0\n 34059: u8 [a0 + 29] = 0\n 34062: u8 [a0 + 28] = 0\n 34065: u8 [a0 + 27] = 0\n 34068: u8 [a0 + 26] = 0\n 34071: u8 [a0 + 25] = 0\n 34074: u8 [a0 + 24] = 0\n 34077: u8 [a0 + 23] = 0\n 34080: u8 [a0 + 22] = 0\n 34083: u8 [a0 + 21] = 0\n 34086: u8 [a0 + 20] = 0\n 34089: u8 [a0 + 19] = 0\n 34092: u8 [a0 + 18] = 0\n 34095: u8 [a0 + 17] = 0\n 34098: u8 [a0 + 16] = 0\n 34101: u8 [a0 + 15] = 0\n 34104: u8 [a0 + 14] = 0\n 34107: u8 [a0 + 13] = 0\n 34110: u8 [a0 + 12] = 0\n 34113: u8 [a0 + 11] = 0\n 34116: u8 [a0 + 10] = 0\n 34119: u8 [a0 + 9] = 0\n 34122: u8 [a0 + 8] = 0\n 34125: u8 [a0 + 7] = 0x2e\n 34129: u8 [a0 + 0x6] = s1\n 34132: u8 [a0 + 5] = 0x74\n 34136: u8 [a0 + 0x4] = s0\n 34139: u8 [a0 + 3] = 0x76\n 34143: u8 [a0 + 2] = 0x20\n 34147: u8 [a0 + 0x1] = s0\n 34150: u8 [a0 + 0] = 0x74\n 34153: a1 = u64 [sp]\n 34155: a0 = a1 + 0x80\n 34159: a1 = a0 <u a1\n 34162: a3 = u64 [sp + 0x8]\n 34165: a2 = a3 + a1\n 34168: a3 = a2 <u a3\n 34171: a3 = a1 if a1 == 0\n 34174: a1 = u64 [sp + 0x10]\n 34177: a3 = a3 + a1\n 34180: a1 = a3 <u a1\n 34183: a4 = u64 [sp + 0x18]\n 34186: a1 = a1 + a4\n 34189: a4 = u64 [sp + 0x20]\n 34192: u64 [a4] = a0\n 34194: u64 [a4 + 0x8] = a2\n 34197: u64 [a4 + 0x10] = a3\n 34200: u64 [a4 + 0x18] = a1\n 34203: ra = u64 [sp + 0x58]\n 34206: s0 = u64 [sp + 0x50]\n 34209: s1 = u64 [sp + 0x48]\n 34212: sp = sp + 0x60\n 34215: ret\n      : @470 (gas: 1)\n 34217: trap\n      : @471 (gas: 17)\n 34218: sp = sp + 0xffffffffffffffa0\n 34221: u64 [sp + 0x58] = ra\n 34224: u64 [sp + 0x50] = s0\n 34227: u64 [sp + 0x48] = s1\n 34230: a3 = u64 [a1 + 0x18]\n 34233: a4 = u64 [a1 + 0x10]\n 34236: a5 = u64 [a1 + 0x8]\n 34239: s1 = u64 [a1]\n 34241: a1 = a5 | a3\n 34244: a2 = s1 | a4\n 34247: a2 = a2 | a1\n 34250: a2 = a2 >> 0x20\n 34253: a1 = a1 | a4\n 34256: a1 = a1 << 0x20\n 34259: a1 = a1 | a2\n 34262: u64 [sp + 0x28] = a0\n 34265: jump @478 if a1 != 0\n      : @472 (gas: 19)\n 34269: a0 = s1 + 0x20\n 34272: u64 [sp + 0x30] = a0\n 34275: a0 = a0 <u s1\n 34278: a1 = a5 + a0\n 34281: u64 [sp + 0x40] = a1\n 34284: u64 [sp + 0x8] = a5\n 34287: s0 = a1 <u a5\n 34290: s0 = a0 if a0 == 0\n 34293: s0 = s0 + a4\n 34296: u64 [sp + 0x10] = a4\n 34299: a0 = s0 <u a4\n 34302: u64 [sp + 0x18] = a3\n 34305: a0 = a0 + a3\n 34308: u64 [sp + 0x38] = a0\n 34311: u64 [sp] = s1\n 34313: i32 a0 = s1 + 0\n 34315: a1 = 0x20\n 34318: s1 = 0x20\n 34321: ra = 434, jump @0\n      : @473 [@dyn 217] (gas: 45)\n 34328: u8 [a0 + 0x1f] = s1\n 34331: a1 = u64 [sp + 0x30]\n 34334: s1 = a1\n 34336: a1 = a1 | s0\n 34339: a2 = u64 [sp + 0x40]\n 34342: a4 = u64 [sp + 0x38]\n 34345: a2 = a2 | a4\n 34348: a1 = a1 | a2\n 34351: a1 = a1 >> 0x20\n 34354: u64 [sp + 0x20] = s0\n 34357: a2 = a2 | s0\n 34360: a2 = a2 << 0x20\n 34363: a1 = a1 | a2\n 34366: u8 [a0 + 30] = 0\n 34369: u8 [a0 + 29] = 0\n 34372: u8 [a0 + 28] = 0\n 34375: u8 [a0 + 27] = 0\n 34378: u8 [a0 + 26] = 0\n 34381: u8 [a0 + 25] = 0\n 34384: u8 [a0 + 24] = 0\n 34387: u8 [a0 + 23] = 0\n 34390: u8 [a0 + 22] = 0\n 34393: u8 [a0 + 21] = 0\n 34396: u8 [a0 + 20] = 0\n 34399: u8 [a0 + 19] = 0\n 34402: u8 [a0 + 18] = 0\n 34405: u8 [a0 + 17] = 0\n 34408: u8 [a0 + 16] = 0\n 34411: u8 [a0 + 15] = 0\n 34414: u8 [a0 + 14] = 0\n 34417: u8 [a0 + 13] = 0\n 34420: u8 [a0 + 12] = 0\n 34423: u8 [a0 + 11] = 0\n 34426: u8 [a0 + 10] = 0\n 34429: u8 [a0 + 9] = 0\n 34432: u8 [a0 + 8] = 0\n 34435: u8 [a0 + 7] = 0\n 34438: u8 [a0 + 6] = 0\n 34441: u8 [a0 + 5] = 0\n 34444: u8 [a0 + 4] = 0\n 34447: u8 [a0 + 3] = 0\n 34450: u8 [a0 + 2] = 0\n 34453: u8 [a0 + 1] = 0\n 34456: u8 [a0 + 0] = 0\n 34458: jump @478 if a1 != 0\n      : @474 (gas: 4)\n 34462: i32 s0 = s1 + 0\n 34464: a1 = 0x20\n 34467: a0 = s0\n 34469: ra = 436, jump @0\n      : @475 [@dyn 218] (gas: 41)\n 34476: u8 [a0 + 31] = 0x18\n 34480: u8 [a0 + 30] = 0\n 34483: u8 [a0 + 29] = 0\n 34486: u8 [a0 + 28] = 0\n 34489: u8 [a0 + 27] = 0\n 34492: u8 [a0 + 26] = 0\n 34495: u8 [a0 + 25] = 0\n 34498: u8 [a0 + 24] = 0\n 34501: u8 [a0 + 23] = 0\n 34504: u8 [a0 + 22] = 0\n 34507: u8 [a0 + 21] = 0\n 34510: u8 [a0 + 20] = 0\n 34513: u8 [a0 + 19] = 0\n 34516: u8 [a0 + 18] = 0\n 34519: u8 [a0 + 17] = 0\n 34522: u8 [a0 + 16] = 0\n 34525: u8 [a0 + 15] = 0\n 34528: u8 [a0 + 14] = 0\n 34531: u8 [a0 + 13] = 0\n 34534: u8 [a0 + 12] = 0\n 34537: u8 [a0 + 11] = 0\n 34540: u8 [a0 + 10] = 0\n 34543: u8 [a0 + 9] = 0\n 34546: u8 [a0 + 8] = 0\n 34549: u8 [a0 + 7] = 0\n 34552: u8 [a0 + 6] = 0\n 34555: u8 [a0 + 5] = 0\n 34558: u8 [a0 + 4] = 0\n 34561: u8 [a0 + 3] = 0\n 34564: u8 [a0 + 2] = 0\n 34567: u8 [a0 + 1] = 0\n 34570: a1 = u64 [sp + 0x20]\n 34573: a2 = u64 [sp + 0x38]\n 34576: a1 = a1 | a2\n 34579: a2 = 0xffffffe0\n 34589: a2 = s1 <u a2\n 34592: a3 = u64 [sp + 0x40]\n 34595: a2 = 0 if a3 != 0\n 34597: a2 = 0 if a1 != 0\n 34599: u8 [a0 + 0] = 0\n 34601: jump @478 if a2 == 0\n      : @476 (gas: 3)\n 34605: i32 a0 = s0 + 0x20\n 34608: a1 = 0x20\n 34611: ra = 438, jump @0\n      : @477 [@dyn 219] (gas: 54)\n 34618: u8 [a0 + 23] = 0x2e\n 34622: u8 [a0 + 16] = 0x79\n 34626: u8 [a0 + 22] = 0x64\n 34630: u8 [a0 + 15] = 0x64\n 34634: u8 [a0 + 11] = 0x6c\n 34638: u8 [a0 + 14] = 0x61\n 34642: u8 [a0 + 10] = 0x61\n 34646: u8 [a0 + 12] = 0x72\n 34650: u8 [a0 + 8] = 0x72\n 34654: u8 [a0 + 20] = 0x74\n 34658: u8 [a0 + 6] = 0x74\n 34662: u8 [a0 + 19] = 0x6f\n 34666: u8 [a0 + 5] = 0x6f\n 34670: u8 [a0 + 18] = 0x76\n 34674: u8 [a0 + 4] = 0x76\n 34678: u8 [a0 + 31] = 0\n 34681: u8 [a0 + 30] = 0\n 34684: u8 [a0 + 29] = 0\n 34687: u8 [a0 + 28] = 0\n 34690: u8 [a0 + 27] = 0\n 34693: u8 [a0 + 26] = 0\n 34696: u8 [a0 + 25] = 0\n 34699: u8 [a0 + 24] = 0\n 34702: u8 [a0 + 17] = 0x20\n 34706: u8 [a0 + 9] = 0x20\n 34710: u8 [a0 + 3] = 0x20\n 34714: u8 [a0 + 21] = 0x65\n 34718: u8 [a0 + 13] = 0x65\n 34722: u8 [a0 + 7] = 0x65\n 34726: u8 [a0 + 2] = 0x65\n 34730: u8 [a0 + 1] = 0x68\n 34734: u8 [a0 + 0] = 0x54\n 34737: a1 = u64 [sp]\n 34739: a0 = a1 + 0x60\n 34742: a1 = a0 <u a1\n 34745: a3 = u64 [sp + 0x8]\n 34748: a2 = a3 + a1\n 34751: a3 = a2 <u a3\n 34754: a3 = a1 if a1 == 0\n 34757: a1 = u64 [sp + 0x10]\n 34760: a3 = a3 + a1\n 34763: a1 = a3 <u a1\n 34766: a4 = u64 [sp + 0x18]\n 34769: a1 = a1 + a4\n 34772: a4 = u64 [sp + 0x28]\n 34775: u64 [a4] = a0\n 34777: u64 [a4 + 0x8] = a2\n 34780: u64 [a4 + 0x10] = a3\n 34783: u64 [a4 + 0x18] = a1\n 34786: ra = u64 [sp + 0x58]\n 34789: s0 = u64 [sp + 0x50]\n 34792: s1 = u64 [sp + 0x48]\n 34795: sp = sp + 0x60\n 34798: ret\n      : @478 (gas: 1)\n 34800: trap\n      : @479 (gas: 11)\n 34801: a0 = u32 [sp + 0x1b0]\n 34805: a1 = u64 [sp + 0x1a0]\n 34809: a2 = u64 [sp + 0x1a8]\n 34813: a0 = a0 ^ s1\n 34816: a3 = u64 [sp + 0xb0]\n 34820: a1 = a1 ^ a3\n 34823: a0 = a0 | a1\n 34826: a1 = u64 [sp + 0xb8]\n 34830: a1 = a1 ^ a2\n 34833: a0 = a0 | a1\n 34836: jump @494 if a0 != 0\n      : @480 (gas: 6)\n 34840: a0 = u64 [sp + 0x98]\n 34844: a0 = a0 << 0x20\n 34847: s1 = a0 >> 0x20\n 34850: a1 = 0x20\n 34853: a0 = 0\n 34855: ra = 440, jump @0\n      : @481 [@dyn 220] (gas: 78)\n 34862: a3 = reverse s1\n 34864: a1 = u64 [sp + 0xa0]\n 34868: s1 = reverse a1\n 34870: a1 = u64 [sp + 0xa8]\n 34874: a2 = reverse a1\n 34876: a1 = a2 >> 0x38\n 34879: u64 [sp + 0xb8] = a1\n 34883: u8 [a0 + 0x1f] = a1\n 34886: a1 = a2 >> 0x30\n 34889: u64 [sp + 0xb0] = a1\n 34893: u8 [a0 + 0x1e] = a1\n 34896: a1 = a2 >> 0x28\n 34899: u64 [sp + 0xa8] = a1\n 34903: u8 [a0 + 0x1d] = a1\n 34906: a1 = a2 >> 0x20\n 34909: u64 [sp + 0xa0] = a1\n 34913: u8 [a0 + 0x1c] = a1\n 34916: a1 = a2 >> 0x18\n 34919: u64 [sp + 0x98] = a1\n 34923: u8 [a0 + 0x1b] = a1\n 34926: a1 = a2 >> 0x10\n 34929: u64 [sp + 0x90] = a1\n 34933: u8 [a0 + 0x1a] = a1\n 34936: a1 = a2 >> 0x8\n 34939: u64 [sp + 0x88] = a1\n 34943: u8 [a0 + 0x19] = a1\n 34946: u64 [sp + 0x80] = a2\n 34950: u8 [a0 + 0x18] = a2\n 34953: u8 [a0 + 0x10] = s1\n 34956: u8 [a0 + 11] = 0\n 34959: u8 [a0 + 10] = 0\n 34962: u8 [a0 + 9] = 0\n 34965: u8 [a0 + 7] = 0\n 34968: u8 [a0 + 6] = 0\n 34971: u8 [a0 + 5] = 0\n 34974: u8 [a0 + 4] = 0\n 34977: u8 [a0 + 3] = 0\n 34980: u8 [a0 + 2] = 0\n 34983: u8 [a0 + 1] = 0\n 34986: u8 [a0 + 0] = 0\n 34988: a1 = s1 >> 0x38\n 34991: u64 [sp + 0x70] = a1\n 34994: u8 [a0 + 0x17] = a1\n 34997: a1 = s1 >> 0x30\n 35000: u64 [sp + 0x68] = a1\n 35003: u8 [a0 + 0x16] = a1\n 35006: a1 = s1 >> 0x28\n 35009: u64 [sp + 0x60] = a1\n 35012: u8 [a0 + 0x15] = a1\n 35015: a1 = s1 >> 0x20\n 35018: u64 [sp + 0x58] = a1\n 35021: u8 [a0 + 0x14] = a1\n 35024: a1 = s1 >> 0x18\n 35027: u64 [sp + 0x50] = a1\n 35030: u8 [a0 + 0x13] = a1\n 35033: a1 = s1 >> 0x10\n 35036: u64 [sp + 0x48] = a1\n 35039: u8 [a0 + 0x12] = a1\n 35042: a1 = s1 >> 0x8\n 35045: u64 [sp + 0x40] = a1\n 35048: u8 [a0 + 0x11] = a1\n 35051: u8 [a0 + 0x8] = a3\n 35054: a1 = a3 >> 0x38\n 35057: u64 [sp + 0x38] = a1\n 35060: u8 [a0 + 0xf] = a1\n 35063: a1 = a3 >> 0x30\n 35066: u64 [sp + 0x30] = a1\n 35069: u8 [a0 + 0xe] = a1\n 35072: a1 = a3 >> 0x28\n 35075: u64 [sp + 0x28] = a1\n 35078: u8 [a0 + 0xd] = a1\n 35081: u64 [sp + 0x78] = a3\n 35084: a3 = a3 >> 0x20\n 35087: u64 [sp + 0x20] = a3\n 35090: u8 [a0 + 0xc] = a3\n 35093: a0 = 0x20\n 35096: a1 = 0x20\n 35099: ra = 442, jump @0\n      : @482 [@dyn 221] (gas: 35)\n 35106: u8 [a0 + 31] = 0x1\n 35110: u8 [a0 + 30] = 0\n 35113: u8 [a0 + 29] = 0\n 35116: u8 [a0 + 28] = 0\n 35119: u8 [a0 + 27] = 0\n 35122: u8 [a0 + 26] = 0\n 35125: u8 [a0 + 25] = 0\n 35128: u8 [a0 + 24] = 0\n 35131: u8 [a0 + 23] = 0\n 35134: u8 [a0 + 22] = 0\n 35137: u8 [a0 + 21] = 0\n 35140: u8 [a0 + 20] = 0\n 35143: u8 [a0 + 19] = 0\n 35146: u8 [a0 + 18] = 0\n 35149: u8 [a0 + 17] = 0\n 35152: u8 [a0 + 16] = 0\n 35155: u8 [a0 + 15] = 0\n 35158: u8 [a0 + 14] = 0\n 35161: u8 [a0 + 13] = 0\n 35164: u8 [a0 + 12] = 0\n 35167: u8 [a0 + 11] = 0\n 35170: u8 [a0 + 10] = 0\n 35173: u8 [a0 + 9] = 0\n 35176: u8 [a0 + 8] = 0\n 35179: u8 [a0 + 7] = 0\n 35182: u8 [a0 + 6] = 0\n 35185: u8 [a0 + 5] = 0\n 35188: u8 [a0 + 4] = 0\n 35191: u8 [a0 + 3] = 0\n 35194: u8 [a0 + 2] = 0\n 35197: u8 [a0 + 1] = 0\n 35200: u8 [a0 + 0] = 0\n 35202: a1 = 0x40\n 35205: a0 = 0\n 35207: ra = 444, jump @0\n      : @483 [@dyn 222] (gas: 36)\n 35214: i32 a0 = a0 + 0\n 35216: i32 a2 = sp + 0x1a0\n 35220: a1 = 0x40\n 35223: ecalli 5 // 'hash_keccak_256'\n 35225: a0 = u64 [sp + 0x1a0]\n 35229: a1 = u64 [sp + 0x1a8]\n 35233: a2 = u64 [sp + 0x1b0]\n 35237: a3 = u64 [sp + 0x1b8]\n 35241: a0 = reverse a0\n 35243: a1 = reverse a1\n 35245: a2 = reverse a2\n 35247: a3 = reverse a3\n 35249: a3 = a3 + 0x1\n 35252: a4 = a3 <u 0x1\n 35255: a2 = a2 + a4\n 35258: a4 = a3 | a2\n 35261: a4 = a4 <u 0x1\n 35264: a4 = a4 + a1\n 35267: a1 = a4 <u a1\n 35270: a0 = a0 + a1\n 35273: u64 [sp + 0x188] = a2\n 35277: u64 [sp + 0x180] = a3\n 35281: u64 [sp + 0x190] = a4\n 35285: u64 [sp + 0x198] = a0\n 35289: u64 [sp + 440] = 0\n 35293: u64 [sp + 432] = 0\n 35297: u64 [sp + 424] = 0\n 35301: u64 [sp + 416] = 0\n 35305: u32 [sp + 352] = 0x20\n 35310: i32 a1 = sp + 0x180\n 35314: i32 a3 = sp + 0x1a0\n 35318: i32 a4 = sp + 0x160\n 35322: a2 = 0xffffffffffffffff\n 35325: a0 = 0\n 35327: ecalli 4 // 'get_storage'\n 35329: fallthrough\n      : @484 (gas: 2)\n 35330: a0 = u8 [sp + 0x1a0]\n 35334: jump @499 if a0 != 0\n      : @485 (gas: 2)\n 35338: a1 = 0x20\n 35341: ra = 446, jump @0\n      : @486 [@dyn 223] (gas: 61)\n 35348: u8 [a0 + 0x10] = s1\n 35351: a1 = u64 [sp + 0x38]\n 35354: u8 [a0 + 0xf] = a1\n 35357: a1 = u64 [sp + 0x30]\n 35360: u8 [a0 + 0xe] = a1\n 35363: a1 = u64 [sp + 0x28]\n 35366: u8 [a0 + 0xd] = a1\n 35369: a1 = u64 [sp + 0x20]\n 35372: u8 [a0 + 0xc] = a1\n 35375: a1 = u64 [sp + 0x78]\n 35378: a2 = a1 >> 0x18\n 35381: u64 [sp + 0x18] = a2\n 35384: u8 [a0 + 0xb] = a2\n 35387: a2 = a1 >> 0x10\n 35390: u64 [sp + 0x10] = a2\n 35393: u8 [a0 + 0xa] = a2\n 35396: a2 = a1 >> 0x8\n 35399: u64 [sp + 0x8] = a2\n 35402: u8 [a0 + 0x9] = a2\n 35405: u8 [a0 + 0x8] = a1\n 35408: u8 [a0 + 7] = 0\n 35411: u8 [a0 + 6] = 0\n 35414: u8 [a0 + 5] = 0\n 35417: u8 [a0 + 4] = 0\n 35420: u8 [a0 + 3] = 0\n 35423: u8 [a0 + 2] = 0\n 35426: u8 [a0 + 1] = 0\n 35429: u8 [a0 + 0] = 0\n 35431: a1 = u64 [sp + 0x80]\n 35435: u8 [a0 + 0x18] = a1\n 35438: a1 = u64 [sp + 0x70]\n 35441: u8 [a0 + 0x17] = a1\n 35444: a1 = u64 [sp + 0x68]\n 35447: u8 [a0 + 0x16] = a1\n 35450: a1 = u64 [sp + 0x60]\n 35453: u8 [a0 + 0x15] = a1\n 35456: a1 = u64 [sp + 0x58]\n 35459: u8 [a0 + 0x14] = a1\n 35462: a1 = u64 [sp + 0x50]\n 35465: u8 [a0 + 0x13] = a1\n 35468: a1 = u64 [sp + 0x48]\n 35471: u8 [a0 + 0x12] = a1\n 35474: a1 = u64 [sp + 0x40]\n 35477: u8 [a0 + 0x11] = a1\n 35480: a1 = u64 [sp + 0xb8]\n 35484: u8 [a0 + 0x1f] = a1\n 35487: a1 = u64 [sp + 0xb0]\n 35491: u8 [a0 + 0x1e] = a1\n 35494: a1 = u64 [sp + 0xa8]\n 35498: u8 [a0 + 0x1d] = a1\n 35501: a1 = u64 [sp + 0xa0]\n 35505: u8 [a0 + 0x1c] = a1\n 35508: a1 = u64 [sp + 0x98]\n 35512: u8 [a0 + 0x1b] = a1\n 35515: a1 = u64 [sp + 0x90]\n 35519: u8 [a0 + 0x1a] = a1\n 35522: a1 = u64 [sp + 0x88]\n 35526: u8 [a0 + 0x19] = a1\n 35529: a0 = 0x20\n 35532: a1 = 0x20\n 35535: ra = 448, jump @0\n      : @487 [@dyn 224] (gas: 35)\n 35542: u8 [a0 + 31] = 0x1\n 35546: u8 [a0 + 30] = 0\n 35549: u8 [a0 + 29] = 0\n 35552: u8 [a0 + 28] = 0\n 35555: u8 [a0 + 27] = 0\n 35558: u8 [a0 + 26] = 0\n 35561: u8 [a0 + 25] = 0\n 35564: u8 [a0 + 24] = 0\n 35567: u8 [a0 + 23] = 0\n 35570: u8 [a0 + 22] = 0\n 35573: u8 [a0 + 21] = 0\n 35576: u8 [a0 + 20] = 0\n 35579: u8 [a0 + 19] = 0\n 35582: u8 [a0 + 18] = 0\n 35585: u8 [a0 + 17] = 0\n 35588: u8 [a0 + 16] = 0\n 35591: u8 [a0 + 15] = 0\n 35594: u8 [a0 + 14] = 0\n 35597: u8 [a0 + 13] = 0\n 35600: u8 [a0 + 12] = 0\n 35603: u8 [a0 + 11] = 0\n 35606: u8 [a0 + 10] = 0\n 35609: u8 [a0 + 9] = 0\n 35612: u8 [a0 + 8] = 0\n 35615: u8 [a0 + 7] = 0\n 35618: u8 [a0 + 6] = 0\n 35621: u8 [a0 + 5] = 0\n 35624: u8 [a0 + 4] = 0\n 35627: u8 [a0 + 3] = 0\n 35630: u8 [a0 + 2] = 0\n 35633: u8 [a0 + 1] = 0\n 35636: u8 [a0 + 0] = 0\n 35638: a1 = 0x40\n 35641: a0 = 0\n 35643: ra = 450, jump @0\n      : @488 [@dyn 225] (gas: 28)\n 35650: i32 a0 = a0 + 0\n 35652: i32 a2 = sp + 0x1a0\n 35656: a1 = 0x40\n 35659: ecalli 5 // 'hash_keccak_256'\n 35661: a0 = u64 [sp + 0x1b8]\n 35665: a1 = u64 [sp + 0x1b0]\n 35669: a2 = u64 [sp + 0x1a8]\n 35673: a3 = u64 [sp + 0x1a0]\n 35677: a0 = reverse a0\n 35679: a1 = reverse a1\n 35681: a2 = reverse a2\n 35683: a3 = reverse a3\n 35685: u64 [sp + 0x198] = a3\n 35689: u64 [sp + 0x190] = a2\n 35693: u64 [sp + 0x188] = a1\n 35697: u64 [sp + 0x180] = a0\n 35701: u64 [sp + 440] = 0\n 35705: u64 [sp + 432] = 0\n 35709: u64 [sp + 424] = 0\n 35713: u64 [sp + 416] = 0\n 35717: u32 [sp + 352] = 0x20\n 35722: i32 a1 = sp + 0x180\n 35726: i32 a3 = sp + 0x1a0\n 35730: i32 a4 = sp + 0x160\n 35734: a2 = 0xffffffffffffffff\n 35737: a0 = 0\n 35739: ecalli 4 // 'get_storage'\n 35741: fallthrough\n      : @489 (gas: 8)\n 35742: a0 = u64 [sp + 0x1b0]\n 35746: a1 = u64 [sp + 0x1b8]\n 35750: a2 = u64 [sp + 0x1a8]\n 35754: a3 = u64 [sp + 0x1a0]\n 35758: a1 = a1 | a2\n 35761: a0 = a0 | a3\n 35764: a0 = a0 | a1\n 35767: jump @506 if a0 != 0\n      : @490 (gas: 2)\n 35771: a1 = 0x20\n 35774: ra = 452, jump @0\n      : @491 [@dyn 226] (gas: 58)\n 35781: u8 [a0 + 0x10] = s1\n 35784: a1 = u64 [sp + 0x38]\n 35787: u8 [a0 + 0xf] = a1\n 35790: a1 = u64 [sp + 0x30]\n 35793: u8 [a0 + 0xe] = a1\n 35796: a1 = u64 [sp + 0x28]\n 35799: u8 [a0 + 0xd] = a1\n 35802: a1 = u64 [sp + 0x20]\n 35805: u8 [a0 + 0xc] = a1\n 35808: a1 = u64 [sp + 0x18]\n 35811: u8 [a0 + 0xb] = a1\n 35814: a1 = u64 [sp + 0x10]\n 35817: u8 [a0 + 0xa] = a1\n 35820: a1 = u64 [sp + 0x8]\n 35823: u8 [a0 + 0x9] = a1\n 35826: a1 = u64 [sp + 0x78]\n 35829: u8 [a0 + 0x8] = a1\n 35832: a1 = u64 [sp + 0x80]\n 35836: u8 [a0 + 0x18] = a1\n 35839: a1 = u64 [sp + 0x70]\n 35842: u8 [a0 + 0x17] = a1\n 35845: a1 = u64 [sp + 0x68]\n 35848: u8 [a0 + 0x16] = a1\n 35851: a1 = u64 [sp + 0x60]\n 35854: u8 [a0 + 0x15] = a1\n 35857: a1 = u64 [sp + 0x58]\n 35860: u8 [a0 + 0x14] = a1\n 35863: a1 = u64 [sp + 0x50]\n 35866: u8 [a0 + 0x13] = a1\n 35869: a1 = u64 [sp + 0x48]\n 35872: u8 [a0 + 0x12] = a1\n 35875: a1 = u64 [sp + 0x40]\n 35878: u8 [a0 + 0x11] = a1\n 35881: a1 = u64 [sp + 0xb8]\n 35885: u8 [a0 + 0x1f] = a1\n 35888: a1 = u64 [sp + 0xb0]\n 35892: u8 [a0 + 0x1e] = a1\n 35895: a1 = u64 [sp + 0xa8]\n 35899: u8 [a0 + 0x1d] = a1\n 35902: a1 = u64 [sp + 0xa0]\n 35906: u8 [a0 + 0x1c] = a1\n 35909: a1 = u64 [sp + 0x98]\n 35913: u8 [a0 + 0x1b] = a1\n 35916: a1 = u64 [sp + 0x90]\n 35920: u8 [a0 + 0x1a] = a1\n 35923: a1 = u64 [sp + 0x88]\n 35927: u8 [a0 + 0x19] = a1\n 35930: u8 [a0 + 7] = 0\n 35933: u8 [a0 + 6] = 0\n 35936: u8 [a0 + 5] = 0\n 35939: u8 [a0 + 4] = 0\n 35942: u8 [a0 + 3] = 0\n 35945: u8 [a0 + 2] = 0\n 35948: u8 [a0 + 1] = 0\n 35951: u8 [a0 + 0] = 0\n 35953: a0 = 0x20\n 35956: a1 = 0x20\n 35959: ra = 454, jump @0\n      : @492 [@dyn 227] (gas: 35)\n 35966: u8 [a0 + 31] = 0x1\n 35970: u8 [a0 + 30] = 0\n 35973: u8 [a0 + 29] = 0\n 35976: u8 [a0 + 28] = 0\n 35979: u8 [a0 + 27] = 0\n 35982: u8 [a0 + 26] = 0\n 35985: u8 [a0 + 25] = 0\n 35988: u8 [a0 + 24] = 0\n 35991: u8 [a0 + 23] = 0\n 35994: u8 [a0 + 22] = 0\n 35997: u8 [a0 + 21] = 0\n 36000: u8 [a0 + 20] = 0\n 36003: u8 [a0 + 19] = 0\n 36006: u8 [a0 + 18] = 0\n 36009: u8 [a0 + 17] = 0\n 36012: u8 [a0 + 16] = 0\n 36015: u8 [a0 + 15] = 0\n 36018: u8 [a0 + 14] = 0\n 36021: u8 [a0 + 13] = 0\n 36024: u8 [a0 + 12] = 0\n 36027: u8 [a0 + 11] = 0\n 36030: u8 [a0 + 10] = 0\n 36033: u8 [a0 + 9] = 0\n 36036: u8 [a0 + 8] = 0\n 36039: u8 [a0 + 7] = 0\n 36042: u8 [a0 + 6] = 0\n 36045: u8 [a0 + 5] = 0\n 36048: u8 [a0 + 4] = 0\n 36051: u8 [a0 + 3] = 0\n 36054: u8 [a0 + 2] = 0\n 36057: u8 [a0 + 1] = 0\n 36060: u8 [a0 + 0] = 0\n 36062: a1 = 0x40\n 36065: a0 = 0\n 36067: ra = 456, jump @0\n      : @493 [@dyn 228] (gas: 53)\n 36074: i32 a0 = a0 + 0\n 36076: i32 a2 = sp + 0x1a0\n 36080: a1 = 0x40\n 36083: ecalli 5 // 'hash_keccak_256'\n 36085: a0 = u64 [sp + 0x1b8]\n 36089: a1 = u64 [sp + 0x1b0]\n 36093: a2 = u64 [sp + 0x1a8]\n 36097: a3 = u64 [sp + 0x1a0]\n 36101: a0 = reverse a0\n 36103: u64 [sp + 0xb8] = a0\n 36107: a1 = reverse a1\n 36109: u64 [sp + 0xb0] = a1\n 36113: a2 = reverse a2\n 36115: u64 [sp + 0xa8] = a2\n 36119: s1 = reverse a3\n 36121: u64 [sp + 0x198] = s1\n 36125: u64 [sp + 0x190] = a2\n 36129: u64 [sp + 0x188] = a1\n 36133: u64 [sp + 0x180] = a0\n 36137: u64 [sp + 440] = 0\n 36141: u64 [sp + 432] = 0\n 36145: u64 [sp + 424] = 0\n 36149: u64 [sp + 416] = 0\n 36153: u32 [sp + 352] = 0x20\n 36158: i32 a1 = sp + 0x180\n 36162: i32 a3 = sp + 0x1a0\n 36166: i32 a4 = sp + 0x160\n 36170: a2 = 0xffffffffffffffff\n 36173: a0 = 0\n 36175: ecalli 4 // 'get_storage'\n 36177: u64 [sp + 0x198] = s1\n 36181: a0 = u64 [sp + 0xa8]\n 36185: u64 [sp + 0x190] = a0\n 36189: a0 = u64 [sp + 0xb0]\n 36193: u64 [sp + 0x188] = a0\n 36197: a0 = u64 [sp + 0xb8]\n 36201: u64 [sp + 0x180] = a0\n 36205: u64 [sp + 440] = 0\n 36209: u64 [sp + 432] = 0\n 36213: u64 [sp + 424] = 0\n 36217: u64 [sp + 416] = 0x1\n 36222: i32 a1 = sp + 0x180\n 36226: i32 a3 = sp + 0x1a0\n 36230: a2 = 0xffffffffffffffff\n 36233: a4 = 0x20\n 36236: a0 = 0\n 36238: ecalli 8 // 'set_storage'\n 36240: sp = s0 + 0xfffffffffffffe20\n 36244: ra = u64 [sp + 0x1d8]\n 36248: s0 = u64 [sp + 0x1d0]\n 36252: s1 = u64 [sp + 0x1c8]\n 36256: sp = sp + 0x1e0\n 36260: ret\n      : @494 (gas: 3)\n 36262: a0 = 0x40\n 36265: a1 = 0x20\n 36268: ra = 458, jump @0\n      : @495 [@dyn 229] (gas: 103)\n 36275: a1 = u8 [a0 + 0x11]\n 36278: a2 = u8 [a0 + 0x10]\n 36281: a3 = u8 [a0 + 0x12]\n 36284: a4 = u8 [a0 + 0x13]\n 36287: a1 = a1 << 0x8\n 36290: a1 = a1 | a2\n 36293: a3 = a3 << 0x10\n 36296: a4 = a4 << 0x18\n 36299: a3 = a3 | a4\n 36302: a1 = a1 | a3\n 36305: a2 = u8 [a0 + 0x15]\n 36308: a3 = u8 [a0 + 0x14]\n 36311: a4 = u8 [a0 + 0x16]\n 36314: a5 = u8 [a0 + 0x17]\n 36317: a2 = a2 << 0x8\n 36320: a2 = a2 | a3\n 36323: a4 = a4 << 0x10\n 36326: a5 = a5 << 0x18\n 36329: a4 = a4 | a5\n 36332: a2 = a2 | a4\n 36335: a2 = a2 << 0x20\n 36338: t0 = a2 | a1\n 36341: a2 = u8 [a0 + 0x1]\n 36344: a3 = u8 [a0]\n 36346: a4 = u8 [a0 + 0x2]\n 36349: a5 = u8 [a0 + 0x3]\n 36352: a2 = a2 << 0x8\n 36355: a2 = a2 | a3\n 36358: a4 = a4 << 0x10\n 36361: a5 = a5 << 0x18\n 36364: a4 = a4 | a5\n 36367: a2 = a2 | a4\n 36370: a3 = u8 [a0 + 0x5]\n 36373: a4 = u8 [a0 + 0x4]\n 36376: a5 = u8 [a0 + 0x6]\n 36379: s1 = u8 [a0 + 0x7]\n 36382: a3 = a3 << 0x8\n 36385: a3 = a3 | a4\n 36388: a5 = a5 << 0x10\n 36391: s1 = s1 << 0x18\n 36394: a5 = a5 | s1\n 36397: a3 = a3 | a5\n 36400: a3 = a3 << 0x20\n 36403: a2 = a2 | a3\n 36406: a3 = u8 [a0 + 0x19]\n 36409: a4 = u8 [a0 + 0x18]\n 36412: a5 = u8 [a0 + 0x1a]\n 36415: s1 = u8 [a0 + 0x1b]\n 36418: a3 = a3 << 0x8\n 36421: a3 = a3 | a4\n 36424: a5 = a5 << 0x10\n 36427: s1 = s1 << 0x18\n 36430: a5 = a5 | s1\n 36433: a3 = a3 | a5\n 36436: a4 = u8 [a0 + 0x1d]\n 36439: a5 = u8 [a0 + 0x1c]\n 36442: s1 = u8 [a0 + 0x1e]\n 36445: a1 = u8 [a0 + 0x1f]\n 36448: a4 = a4 << 0x8\n 36451: a4 = a4 | a5\n 36454: s1 = s1 << 0x10\n 36457: a1 = a1 << 0x18\n 36460: a1 = a1 | s1\n 36463: a1 = a1 | a4\n 36466: a1 = a1 << 0x20\n 36469: a3 = a3 | a1\n 36472: a1 = u8 [a0 + 0x9]\n 36475: a4 = u8 [a0 + 0x8]\n 36478: a5 = u8 [a0 + 0xa]\n 36481: s1 = u8 [a0 + 0xb]\n 36484: a1 = a1 << 0x8\n 36487: a1 = a1 | a4\n 36490: a5 = a5 << 0x10\n 36493: s1 = s1 << 0x18\n 36496: a5 = a5 | s1\n 36499: a1 = a1 | a5\n 36502: a4 = u8 [a0 + 0xd]\n 36505: a5 = u8 [a0 + 0xc]\n 36508: s1 = u8 [a0 + 0xe]\n 36511: a0 = u8 [a0 + 0xf]\n 36514: a4 = a4 << 0x8\n 36517: a4 = a4 | a5\n 36520: s1 = s1 << 0x10\n 36523: a0 = a0 << 0x18\n 36526: a0 = a0 | s1\n 36529: a0 = a0 | a4\n 36532: a0 = a0 << 0x20\n 36535: a0 = a0 | a1\n 36538: s1 = reverse a0\n 36540: a1 = reverse a3\n 36542: a2 = reverse a2\n 36544: a0 = reverse t0\n 36546: u64 [sp + 0xb8] = a0\n 36550: u64 [sp + 0xb0] = a2\n 36554: a0 = a0 | a2\n 36557: a2 = a1\n 36559: a1 = a1 | s1\n 36562: a1 = a1 | a0\n 36565: a1 = a1 >> 0x20\n 36568: a0 = a0 | s1\n 36571: a0 = a0 << 0x20\n 36574: a0 = a0 | a1\n 36577: jump @505 if a0 != 0\n      : @496 (gas: 5)\n 36581: u64 [sp + 0xa8] = a2\n 36585: i32 a0 = a2 + 0\n 36587: a1 = 0x20\n 36590: u64 [sp + 0xa0] = a0\n 36594: ra = 460, jump @0\n      : @497 [@dyn 230] (gas: 50)\n 36601: u8 [a0 + 31] = 0\n 36604: u8 [a0 + 30] = 0\n 36607: u8 [a0 + 29] = 0\n 36610: u8 [a0 + 28] = 0\n 36613: u8 [a0 + 27] = 0\n 36616: u8 [a0 + 26] = 0\n 36619: u8 [a0 + 25] = 0\n 36622: u8 [a0 + 24] = 0\n 36625: u8 [a0 + 23] = 0\n 36628: u8 [a0 + 22] = 0\n 36631: u8 [a0 + 21] = 0\n 36634: u8 [a0 + 20] = 0\n 36637: u8 [a0 + 19] = 0\n 36640: u8 [a0 + 18] = 0\n 36643: u8 [a0 + 17] = 0\n 36646: u8 [a0 + 16] = 0\n 36649: u8 [a0 + 15] = 0\n 36652: u8 [a0 + 14] = 0\n 36655: u8 [a0 + 13] = 0\n 36658: u8 [a0 + 12] = 0\n 36661: u8 [a0 + 11] = 0\n 36664: u8 [a0 + 10] = 0\n 36667: u8 [a0 + 9] = 0\n 36670: u8 [a0 + 8] = 0\n 36673: u8 [a0 + 7] = 0\n 36676: u8 [a0 + 6] = 0\n 36679: u8 [a0 + 5] = 0\n 36682: u8 [a0 + 4] = 0\n 36685: u8 [a0 + 3] = 0xa0\n 36690: u8 [a0 + 2] = 0x79\n 36694: u8 [a0 + 1] = 0xc3\n 36699: u8 [a0 + 0] = 0x8\n 36702: a1 = u64 [sp + 0xa8]\n 36706: a0 = a1 + 0x4\n 36709: a1 = a0 <u a1\n 36712: a3 = u64 [sp + 0xb8]\n 36716: a2 = a3 + a1\n 36719: a3 = a2 <u a3\n 36722: a3 = a1 if a1 == 0\n 36725: a3 = a3 + s1\n 36728: a1 = a3 <u s1\n 36731: a4 = u64 [sp + 0xb0]\n 36735: a4 = a4 + a1\n 36738: u64 [sp + 0x108] = a2\n 36742: u64 [sp + 0x100] = a0\n 36746: u64 [sp + 0x110] = a3\n 36750: a0 = sp + 0x120\n 36754: a1 = sp + 0x100\n 36758: u64 [sp + 0x118] = a4\n 36762: ra = 462, jump @461\n      : @498 [@dyn 231] (gas: 5)\n 36768: a0 = u64 [sp + 0x128]\n 36772: t0 = u64 [sp + 0x138]\n 36776: t1 = u64 [sp + 0x120]\n 36780: a3 = u64 [sp + 0x130]\n 36784: jump @504\n      : @499 (gas: 3)\n 36787: a0 = 0x40\n 36790: a1 = 0x20\n 36793: ra = 464, jump @0\n      : @500 [@dyn 232] (gas: 103)\n 36800: a1 = u8 [a0 + 0x11]\n 36803: a2 = u8 [a0 + 0x10]\n 36806: a3 = u8 [a0 + 0x12]\n 36809: a4 = u8 [a0 + 0x13]\n 36812: a1 = a1 << 0x8\n 36815: a1 = a1 | a2\n 36818: a3 = a3 << 0x10\n 36821: a4 = a4 << 0x18\n 36824: a3 = a3 | a4\n 36827: a1 = a1 | a3\n 36830: a2 = u8 [a0 + 0x15]\n 36833: a3 = u8 [a0 + 0x14]\n 36836: a4 = u8 [a0 + 0x16]\n 36839: a5 = u8 [a0 + 0x17]\n 36842: a2 = a2 << 0x8\n 36845: a2 = a2 | a3\n 36848: a4 = a4 << 0x10\n 36851: a5 = a5 << 0x18\n 36854: a4 = a4 | a5\n 36857: a2 = a2 | a4\n 36860: a2 = a2 << 0x20\n 36863: t0 = a2 | a1\n 36866: a2 = u8 [a0 + 0x1]\n 36869: a3 = u8 [a0]\n 36871: a4 = u8 [a0 + 0x2]\n 36874: a5 = u8 [a0 + 0x3]\n 36877: a2 = a2 << 0x8\n 36880: a2 = a2 | a3\n 36883: a4 = a4 << 0x10\n 36886: a5 = a5 << 0x18\n 36889: a4 = a4 | a5\n 36892: a2 = a2 | a4\n 36895: a3 = u8 [a0 + 0x5]\n 36898: a4 = u8 [a0 + 0x4]\n 36901: a5 = u8 [a0 + 0x6]\n 36904: s1 = u8 [a0 + 0x7]\n 36907: a3 = a3 << 0x8\n 36910: a3 = a3 | a4\n 36913: a5 = a5 << 0x10\n 36916: s1 = s1 << 0x18\n 36919: a5 = a5 | s1\n 36922: a3 = a3 | a5\n 36925: a3 = a3 << 0x20\n 36928: a2 = a2 | a3\n 36931: a3 = u8 [a0 + 0x19]\n 36934: a4 = u8 [a0 + 0x18]\n 36937: a5 = u8 [a0 + 0x1a]\n 36940: s1 = u8 [a0 + 0x1b]\n 36943: a3 = a3 << 0x8\n 36946: a3 = a3 | a4\n 36949: a5 = a5 << 0x10\n 36952: s1 = s1 << 0x18\n 36955: a5 = a5 | s1\n 36958: a3 = a3 | a5\n 36961: a4 = u8 [a0 + 0x1d]\n 36964: a5 = u8 [a0 + 0x1c]\n 36967: s1 = u8 [a0 + 0x1e]\n 36970: a1 = u8 [a0 + 0x1f]\n 36973: a4 = a4 << 0x8\n 36976: a4 = a4 | a5\n 36979: s1 = s1 << 0x10\n 36982: a1 = a1 << 0x18\n 36985: a1 = a1 | s1\n 36988: a1 = a1 | a4\n 36991: a1 = a1 << 0x20\n 36994: a3 = a3 | a1\n 36997: a1 = u8 [a0 + 0x9]\n 37000: a4 = u8 [a0 + 0x8]\n 37003: a5 = u8 [a0 + 0xa]\n 37006: s1 = u8 [a0 + 0xb]\n 37009: a1 = a1 << 0x8\n 37012: a1 = a1 | a4\n 37015: a5 = a5 << 0x10\n 37018: s1 = s1 << 0x18\n 37021: a5 = a5 | s1\n 37024: a1 = a1 | a5\n 37027: a4 = u8 [a0 + 0xd]\n 37030: a5 = u8 [a0 + 0xc]\n 37033: s1 = u8 [a0 + 0xe]\n 37036: a0 = u8 [a0 + 0xf]\n 37039: a4 = a4 << 0x8\n 37042: a4 = a4 | a5\n 37045: s1 = s1 << 0x10\n 37048: a0 = a0 << 0x18\n 37051: a0 = a0 | s1\n 37054: a0 = a0 | a4\n 37057: a0 = a0 << 0x20\n 37060: a0 = a0 | a1\n 37063: s1 = reverse a0\n 37065: a1 = reverse a3\n 37067: a2 = reverse a2\n 37069: a0 = reverse t0\n 37071: u64 [sp + 0xb8] = a0\n 37075: u64 [sp + 0xb0] = a2\n 37079: a0 = a0 | a2\n 37082: a2 = a1\n 37084: a1 = a1 | s1\n 37087: a1 = a1 | a0\n 37090: a1 = a1 >> 0x20\n 37093: a0 = a0 | s1\n 37096: a0 = a0 << 0x20\n 37099: a0 = a0 | a1\n 37102: jump @505 if a0 != 0\n      : @501 (gas: 5)\n 37106: u64 [sp + 0xa8] = a2\n 37110: i32 a0 = a2 + 0\n 37112: a1 = 0x20\n 37115: u64 [sp + 0xa0] = a0\n 37119: ra = 466, jump @0\n      : @502 [@dyn 233] (gas: 50)\n 37126: u8 [a0 + 31] = 0\n 37129: u8 [a0 + 30] = 0\n 37132: u8 [a0 + 29] = 0\n 37135: u8 [a0 + 28] = 0\n 37138: u8 [a0 + 27] = 0\n 37141: u8 [a0 + 26] = 0\n 37144: u8 [a0 + 25] = 0\n 37147: u8 [a0 + 24] = 0\n 37150: u8 [a0 + 23] = 0\n 37153: u8 [a0 + 22] = 0\n 37156: u8 [a0 + 21] = 0\n 37159: u8 [a0 + 20] = 0\n 37162: u8 [a0 + 19] = 0\n 37165: u8 [a0 + 18] = 0\n 37168: u8 [a0 + 17] = 0\n 37171: u8 [a0 + 16] = 0\n 37174: u8 [a0 + 15] = 0\n 37177: u8 [a0 + 14] = 0\n 37180: u8 [a0 + 13] = 0\n 37183: u8 [a0 + 12] = 0\n 37186: u8 [a0 + 11] = 0\n 37189: u8 [a0 + 10] = 0\n 37192: u8 [a0 + 9] = 0\n 37195: u8 [a0 + 8] = 0\n 37198: u8 [a0 + 7] = 0\n 37201: u8 [a0 + 6] = 0\n 37204: u8 [a0 + 5] = 0\n 37207: u8 [a0 + 4] = 0\n 37210: u8 [a0 + 3] = 0xa0\n 37215: u8 [a0 + 2] = 0x79\n 37219: u8 [a0 + 1] = 0xc3\n 37224: u8 [a0 + 0] = 0x8\n 37227: a1 = u64 [sp + 0xa8]\n 37231: a0 = a1 + 0x4\n 37234: a1 = a0 <u a1\n 37237: a3 = u64 [sp + 0xb8]\n 37241: a2 = a3 + a1\n 37244: a3 = a2 <u a3\n 37247: a3 = a1 if a1 == 0\n 37250: a3 = a3 + s1\n 37253: a1 = a3 <u s1\n 37256: a4 = u64 [sp + 0xb0]\n 37260: a4 = a4 + a1\n 37263: u64 [sp + 0xc8] = a2\n 37267: u64 [sp + 0xc0] = a0\n 37271: u64 [sp + 0xd0] = a3\n 37275: a0 = sp + 0xe0\n 37279: a1 = sp + 0xc0\n 37283: u64 [sp + 0xd8] = a4\n 37287: ra = 468, jump @471\n      : @503 [@dyn 234] (gas: 5)\n 37293: a0 = u64 [sp + 0xe8]\n 37297: t0 = u64 [sp + 0xf8]\n 37301: t1 = u64 [sp + 0xe0]\n 37305: a3 = u64 [sp + 0xf0]\n 37309: fallthrough\n      : @504 (gas: 26)\n 37310: a1 = u64 [sp + 0xb8]\n 37314: a4 = a0 ^ a1\n 37317: a5 = a0 <u a1\n 37320: t2 = a1\n 37322: a2 = u64 [sp + 0xa8]\n 37326: a1 = t1 <u a2\n 37329: a5 = a1 if a4 == 0\n 37332: a4 = a3 - s1\n 37335: a3 = a3 <u s1\n 37338: s1 = u64 [sp + 0xb0]\n 37342: s1 = t0 - s1\n 37345: s1 = s1 - a3\n 37348: a3 = a4 <u a5\n 37351: s1 = s1 - a3\n 37354: a4 = a4 - a5\n 37357: a0 = a0 - t2\n 37360: a1 = a0 - a1\n 37363: a0 = t1 - a2\n 37366: a1 = a1 | s1\n 37369: a2 = a0 | a4\n 37372: a2 = a2 | a1\n 37375: a1 = a1 | a4\n 37378: a2 = a2 >> 0x20\n 37381: a1 = a1 << 0x20\n 37384: a1 = a1 | a2\n 37387: jump @508 if a1 == 0\n      : @505 (gas: 1)\n 37390: trap\n      : @506 (gas: 3)\n 37391: a0 = 0\n 37393: a1 = 0\n 37395: ra = 470, jump @0\n      : @507 [@dyn 235] (gas: 5)\n 37402: i32 a1 = a0 + 0\n 37404: a0 = 0x1\n 37407: a2 = 0\n 37409: ecalli 6 // 'seal_return'\n 37411: fallthrough\n      : @508 (gas: 4)\n 37412: i32 s1 = a0 + 0\n 37414: a0 = u64 [sp + 0xa0]\n 37418: a1 = s1\n 37420: ra = 472, jump @0\n      : @509 [@dyn 236] (gas: 6)\n 37427: i32 a1 = a0 + 0\n 37429: a0 = 0x1\n 37432: a2 = s1\n 37434: ra = 0x1da\n 37438: ecalli 6 // 'seal_return'\n 37440: fallthrough\n      : @510 [@dyn 237] (gas: 5)\n 37441: u64 [a0 + 24] = 0\n 37444: u64 [a0 + 16] = 0\n 37447: u64 [a0 + 8] = 0\n 37450: u64 [a0 + 0] = 0\n 37452: ret\n      : @511 [export #0: 'call'] (gas: 2)\n 37454: a0 = 0\n 37456: ra = 476, jump @10\n      : @512 [@dyn 238] [export #1: 'deploy'] (gas: 2)\n 37463: a0 = 0x1\n 37466: ra = 478, jump @10\n      : @513 [@dyn 239] (gas: 18)\n 37473: sp = sp + 0xffffffffffffffa0\n 37476: u64 [sp + 0x58] = ra\n 37479: u64 [sp + 0x50] = s0\n 37482: u64 [sp + 0x48] = s1\n 37485: s0 = sp + 0x60\n 37488: sp = sp & 0xfffffffffffffff0\n 37491: a2 = u64 [a1]\n 37493: a3 = u64 [a1 + 0x8]\n 37496: a4 = u64 [a1 + 0x10]\n 37499: a1 = u64 [a1 + 0x18]\n 37502: s1 = a0\n 37504: u64 [sp + 0x18] = a1\n 37507: u64 [sp + 0x10] = a4\n 37510: u64 [sp + 0x8] = a3\n 37513: a0 = sp + 0x20\n 37516: a1 = sp\n 37518: u64 [sp] = a2\n 37520: ra = 480, jump @123\n      : @514 [@dyn 240] (gas: 14)\n 37526: a0 = u64 [sp + 0x30]\n 37529: a1 = u64 [sp + 0x38]\n 37532: a2 = u64 [sp + 0x20]\n 37535: a3 = u64 [sp + 0x28]\n 37538: u64 [s1 + 0x10] = a0\n 37541: u64 [s1 + 0x18] = a1\n 37544: u64 [s1] = a2\n 37546: u64 [s1 + 0x8] = a3\n 37549: sp = s0 + 0xffffffffffffffa0\n 37552: ra = u64 [sp + 0x58]\n 37555: s0 = u64 [sp + 0x50]\n 37558: s1 = u64 [sp + 0x48]\n 37561: sp = sp + 0x60\n 37564: ret\n",
						"bytecode": {
							"object": ""
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {
							"chairperson()": "2e4176cf",
							"delegate(address)": "5c19a95c",
							"giveRightToVote(address)": "9e7b8d61",
							"proposals(uint256)": "013cf08b",
							"vote(uint256)": "0121b93f",
							"voters(address)": "a3ec138d",
							"winnerName()": "e2ba53f0",
							"winningProposal()": "609ff1bd"
						}
					},
					"irOptimized": "/// @use-src 0:\"contracts/3_Ballot.sol\"\nobject \"Ballot_316\" {\n    code {\n        {\n            /// @src 0:157:4512  \"contract Ballot {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            let _1 := copy_arguments_for_constructor_object_Ballot()\n            constructor_Ballot(_1)\n            let _2 := allocate_unbounded()\n            codecopy(_2, dataoffset(\"Ballot_316_deployed\"), datasize(\"Ballot_316_deployed\"))\n            return(_2, datasize(\"Ballot_316_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n        function round_up_to_mul_of(value) -> result\n        {\n            result := and(add(value, 31), not(31))\n        }\n        function panic_error_0x41()\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x41)\n            revert(0, 0x24)\n        }\n        function finalize_allocation(memPtr, size)\n        {\n            let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n            mstore(64, newFreePtr)\n        }\n        function allocate_memory(size) -> memPtr\n        {\n            memPtr := allocate_unbounded()\n            finalize_allocation(memPtr, size)\n        }\n        function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n        { revert(0, 0) }\n        function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n        { revert(0, 0) }\n        function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n        { revert(0, 0) }\n        function array_allocation_size_array_bytes32_dyn(length) -> size\n        {\n            if gt(length, sub(shl(64, 1), 1)) { panic_error_0x41() }\n            size := mul(length, 0x20)\n            size := add(size, 0x20)\n        }\n        function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        { revert(0, 0) }\n        function cleanup_bytes32(value) -> cleaned\n        { cleaned := value }\n        function validator_revert_bytes32(value)\n        {\n            if iszero(eq(value, cleanup_bytes32(value))) { revert(0, 0) }\n        }\n        function abi_decode_bytes32_fromMemory(offset, end) -> value\n        {\n            value := mload(offset)\n            validator_revert_bytes32(value)\n        }\n        function abi_decode_available_length_array_bytes32_dyn_fromMemory(offset, length, end) -> array\n        {\n            array := allocate_memory(array_allocation_size_array_bytes32_dyn(length))\n            let dst := array\n            mstore(array, length)\n            dst := add(array, 0x20)\n            let srcEnd := add(offset, mul(length, 0x20))\n            if gt(srcEnd, end)\n            {\n                revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n            }\n            let src := offset\n            for { } lt(src, srcEnd) { src := add(src, 0x20) }\n            {\n                let elementPos := src\n                mstore(dst, abi_decode_bytes32_fromMemory(elementPos, end))\n                dst := add(dst, 0x20)\n            }\n        }\n        function abi_decode_array_bytes32_dyn_memory_ptr_fromMemory(offset, end) -> array\n        {\n            if iszero(slt(add(offset, 0x1f), end))\n            {\n                revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n            }\n            let length := mload(offset)\n            array := abi_decode_available_length_array_bytes32_dyn_fromMemory(add(offset, 0x20), length, end)\n        }\n        function abi_decode_array_bytes32_dyn_fromMemory(headStart, dataEnd) -> value0\n        {\n            if slt(sub(dataEnd, headStart), 32)\n            {\n                revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            }\n            let offset := mload(add(headStart, 0))\n            if gt(offset, sub(shl(64, 1), 1))\n            {\n                revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n            }\n            value0 := abi_decode_array_bytes32_dyn_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n        function copy_arguments_for_constructor_object_Ballot() -> ret_param\n        {\n            let programSize := datasize(\"Ballot_316\")\n            let argSize := sub(codesize(), programSize)\n            let memoryDataOffset := allocate_memory(argSize)\n            codecopy(memoryDataOffset, programSize, argSize)\n            ret_param := abi_decode_array_bytes32_dyn_fromMemory(memoryDataOffset, add(memoryDataOffset, argSize))\n        }\n        function shift_left(value) -> newValue\n        { newValue := shl(0, value) }\n        function update_byte_slice_shift_0(value, toInsert) -> result\n        {\n            let mask := sub(shl(160, 1), 1)\n            toInsert := shift_left(toInsert)\n            value := and(value, not(mask))\n            result := or(value, and(toInsert, mask))\n        }\n        function cleanup_uint160(value) -> cleaned\n        {\n            cleaned := and(value, sub(shl(160, 1), 1))\n        }\n        function identity(value) -> ret\n        { ret := value }\n        function convert_uint160_to_uint160(value) -> converted\n        {\n            converted := cleanup_uint160(identity(cleanup_uint160(value)))\n        }\n        function convert_uint160_to_address(value) -> converted\n        {\n            converted := convert_uint160_to_uint160(value)\n        }\n        function convert_address_to_address(value) -> converted\n        {\n            converted := convert_uint160_to_address(value)\n        }\n        function prepare_store_address(value) -> ret\n        { ret := value }\n        function update_storage_value_offset_address_to_address(slot, value)\n        {\n            let convertedValue := convert_address_to_address(value)\n            sstore(slot, update_byte_slice_shift_0(sload(slot), prepare_store_address(convertedValue)))\n        }\n        function cleanup_rational_by(value) -> cleaned\n        { cleaned := value }\n        function cleanup_uint256(value) -> cleaned\n        { cleaned := value }\n        function convert_rational_by_to_uint256(value) -> converted\n        {\n            converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n        }\n        function shift_right_unsigned(value) -> newValue\n        { newValue := shr(0, value) }\n        function cleanup_from_storage_address(value) -> cleaned\n        {\n            cleaned := and(value, sub(shl(160, 1), 1))\n        }\n        function extract_from_storage_value_offset_address(slot_value) -> value\n        {\n            value := cleanup_from_storage_address(shift_right_unsigned(slot_value))\n        }\n        function read_from_storage_split_offset_address(slot) -> value\n        {\n            value := extract_from_storage_value_offset_address(sload(slot))\n        }\n        function mapping_index_access_mapping_address_struct_Voter_storage_of_address(slot, key) -> dataSlot\n        {\n            mstore(0, convert_address_to_address(key))\n            mstore(0x20, slot)\n            dataSlot := keccak256(0, 0x40)\n        }\n        function update_byte_slice_shift(value, toInsert) -> result\n        {\n            let mask := not(0)\n            toInsert := shift_left(toInsert)\n            value := and(value, not(mask))\n            result := or(value, and(toInsert, mask))\n        }\n        function convert_uint256_to_uint256(value) -> converted\n        {\n            converted := cleanup_uint256(identity(cleanup_uint256(value)))\n        }\n        function prepare_store_uint256(value) -> ret\n        { ret := value }\n        function update_storage_value_offset_uint256_to_uint256(slot, value)\n        {\n            let convertedValue := convert_uint256_to_uint256(value)\n            sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n        }\n        function cleanup_t_rational_by(value) -> cleaned\n        { cleaned := value }\n        function convert_t_rational_by_to_t_uint256(value) -> converted\n        {\n            converted := cleanup_uint256(identity(cleanup_t_rational_by(value)))\n        }\n        function increment_wrapping_uint256(value) -> ret\n        {\n            ret := cleanup_uint256(add(value, 1))\n        }\n        function array_length_array_bytes32_dyn(value) -> length\n        { length := mload(value) }\n        function convert_array_array_struct_Proposal_storage_dyn_storage_to_array_struct_Proposal__dyn_ptr(value) -> converted\n        { converted := value }\n        function panic_error_0x32()\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x32)\n            revert(0, 0x24)\n        }\n        function memory_array_index_access_bytes32_dyn(baseRef, index) -> addr\n        {\n            if iszero(lt(index, array_length_array_bytes32_dyn(baseRef))) { panic_error_0x32() }\n            let offset := mul(index, 32)\n            offset := add(offset, 32)\n            addr := add(baseRef, offset)\n        }\n        function read_from_memoryt_bytes32(ptr) -> returnValue\n        {\n            let value := cleanup_bytes32(mload(ptr))\n            returnValue := value\n        }\n        function allocate_memory_struct_struct_Proposal_storage_ptr() -> memPtr\n        { memPtr := allocate_memory(64) }\n        function write_to_memory_bytes32(memPtr, value)\n        {\n            mstore(memPtr, cleanup_bytes32(value))\n        }\n        function write_to_memory_uint256(memPtr, value)\n        {\n            mstore(memPtr, cleanup_uint256(value))\n        }\n        function array_dataslot_array_struct_Proposal_storage_dyn_ptr(ptr) -> data\n        {\n            data := ptr\n            mstore(0, ptr)\n            data := keccak256(0, 0x20)\n        }\n        function array_length_array_struct_Proposal_storage_dyn_ptr(value) -> length\n        { length := sload(value) }\n        function storage_array_index_access_struct_Proposal__dyn_ptr(array, index) -> slot, offset\n        {\n            let arrayLength := array_length_array_struct_Proposal_storage_dyn_ptr(array)\n            if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n            let dataArea := array_dataslot_array_struct_Proposal_storage_dyn_ptr(array)\n            slot := add(dataArea, mul(index, 2))\n            offset := 0\n        }\n        function panic_error_0x00()\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x00)\n            revert(0, 0x24)\n        }\n        function convert_bytes32_to_bytes32(value) -> converted\n        {\n            converted := cleanup_bytes32(value)\n        }\n        function prepare_store_bytes32(value) -> ret\n        {\n            ret := shift_right_unsigned(value)\n        }\n        function update_storage_value_offset_bytes32_to_bytes32(slot, value)\n        {\n            let convertedValue := convert_bytes32_to_bytes32(value)\n            sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_bytes32(convertedValue)))\n        }\n        function read_from_memoryt_uint256(ptr) -> returnValue\n        {\n            let value := cleanup_uint256(mload(ptr))\n            returnValue := value\n        }\n        function copy_struct_to_storage_from_struct_Proposal_to_struct_Proposal(slot, value)\n        {\n            let memberSlot := add(slot, 0)\n            let memberSrcPtr := add(value, 0)\n            let memberValue := read_from_memoryt_bytes32(memberSrcPtr)\n            update_storage_value_offset_bytes32_to_bytes32(memberSlot, memberValue)\n            let memberSlot_1 := add(slot, 1)\n            let memberSrcPtr_1 := add(value, 32)\n            let memberValue_1 := read_from_memoryt_uint256(memberSrcPtr_1)\n            update_storage_value_offset_uint256_to_uint256(memberSlot_1, memberValue_1)\n        }\n        function update_storage_value_struct_Proposal_to_struct_Proposal(slot, offset, value)\n        {\n            if offset { panic_error_0x00() }\n            copy_struct_to_storage_from_struct_Proposal_to_struct_Proposal(slot, value)\n        }\n        function array_push_from_struct_Proposal_to_array_struct_Proposal_storage_dyn_ptr(array, value0)\n        {\n            let oldLen := sload(array)\n            if iszero(lt(oldLen, 18446744073709551616)) { panic_error_0x41() }\n            sstore(array, add(oldLen, 1))\n            let slot, offset := storage_array_index_access_struct_Proposal__dyn_ptr(array, oldLen)\n            update_storage_value_struct_Proposal_to_struct_Proposal(slot, offset, value0)\n        }\n        /// @ast-id 71 @src 0:955:1436  \"constructor(bytes32[] memory proposalNames) {...\"\n        function constructor_Ballot(var_proposalNames_mpos)\n        {\n            /// @src 0:1023:1033  \"msg.sender\"\n            let expr := caller()\n            /// @src 0:1009:1033  \"chairperson = msg.sender\"\n            update_storage_value_offset_address_to_address(0x00, expr)\n            /// @src 0:1072:1073  \"1\"\n            let expr_1 := 0x01\n            /// @src 0:1043:1073  \"voters[chairperson].weight = 1\"\n            let _1 := convert_rational_by_to_uint256(expr_1)\n            /// @src 0:1043:1049  \"voters\"\n            let _slot := 0x01\n            let expr_39_slot := _slot\n            /// @src 0:1050:1061  \"chairperson\"\n            let _2 := read_from_storage_split_offset_address(0x00)\n            let expr_2 := _2\n            /// @src 0:1043:1062  \"voters[chairperson]\"\n            let _3 := mapping_index_access_mapping_address_struct_Voter_storage_of_address(expr_39_slot, expr_2)\n            let _7_slot := _3\n            let expr_41_slot := _7_slot\n            /// @src 0:1043:1069  \"voters[chairperson].weight\"\n            let _4 := add(expr_41_slot, 0)\n            /// @src 0:1043:1073  \"voters[chairperson].weight = 1\"\n            update_storage_value_offset_uint256_to_uint256(_4, _1)\n            /// @src 0:1098:1099  \"0\"\n            let expr_3 := 0x00\n            /// @src 0:1089:1099  \"uint i = 0\"\n            let var_i := convert_t_rational_by_to_t_uint256(expr_3)\n            /// @src 0:1084:1430  \"for (uint i = 0; i < proposalNames.length; i++) {...\"\n            for { }\n            /** @src 0:1089:1099  \"uint i = 0\" */ 1\n            {\n                /// @src 0:1127:1130  \"i++\"\n                let _5 := var_i\n                let _6 := increment_wrapping_uint256(_5)\n                var_i := _6\n            }\n            {\n                /// @src 0:1101:1102  \"i\"\n                let _7 := var_i\n                let expr_4 := _7\n                /// @src 0:1105:1118  \"proposalNames\"\n                let _12_mpos := var_proposalNames_mpos\n                let expr_51_mpos := _12_mpos\n                /// @src 0:1105:1125  \"proposalNames.length\"\n                let expr_5 := array_length_array_bytes32_dyn(expr_51_mpos)\n                /// @src 0:1101:1125  \"i < proposalNames.length\"\n                let expr_6 := lt(cleanup_uint256(expr_4), cleanup_uint256(expr_5))\n                if iszero(expr_6) { break }\n                /// @src 0:1309:1318  \"proposals\"\n                let _13_slot := 0x02\n                let expr_slot := _13_slot\n                /// @src 0:1309:1323  \"proposals.push\"\n                let expr_self_slot := convert_array_array_struct_Proposal_storage_dyn_storage_to_array_struct_Proposal__dyn_ptr(expr_slot)\n                /// @src 0:1357:1370  \"proposalNames\"\n                let _mpos := var_proposalNames_mpos\n                let expr_mpos := _mpos\n                /// @src 0:1371:1372  \"i\"\n                let _8 := var_i\n                let expr_7 := _8\n                /// @src 0:1357:1373  \"proposalNames[i]\"\n                let _9 := read_from_memoryt_bytes32(memory_array_index_access_bytes32_dyn(expr_mpos, expr_7))\n                let expr_8 := _9\n                /// @src 0:1402:1403  \"0\"\n                let expr_9 := 0x00\n                /// @src 0:1324:1418  \"Proposal({...\"\n                let expr_65_mpos := allocate_memory_struct_struct_Proposal_storage_ptr()\n                write_to_memory_bytes32(add(expr_65_mpos, 0), expr_8)\n                let _10 := convert_t_rational_by_to_t_uint256(expr_9)\n                write_to_memory_uint256(add(expr_65_mpos, 32), _10)\n                /// @src 0:1309:1419  \"proposals.push(Proposal({...\"\n                array_push_from_struct_Proposal_to_array_struct_Proposal_storage_dyn_ptr(expr_self_slot, expr_65_mpos)\n            }\n        }\n    }\n    /// @use-src 0:\"contracts/3_Ballot.sol\"\n    object \"Ballot_316_deployed\" {\n        code {\n            {\n                /// @src 0:157:4512  \"contract Ballot {...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let selector := shift_right_unsigned(calldataload(0))\n                    switch selector\n                    case 0x0121b93f { external_fun_vote() }\n                    case 0x013cf08b { external_fun_proposals() }\n                    case 0x2e4176cf { external_fun_chairperson() }\n                    case 0x5c19a95c { external_fun_delegate() }\n                    case 0x609ff1bd {\n                        external_fun_winningProposal()\n                    }\n                    case 0x9e7b8d61 {\n                        external_fun_giveRightToVote()\n                    }\n                    case 0xa3ec138d { external_fun_voters() }\n                    case 0xe2ba53f0 { external_fun_winnerName() }\n                    default { }\n                }\n                revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            }\n            function shift_right_unsigned(value) -> newValue\n            { newValue := shr(224, value) }\n            function allocate_unbounded() -> memPtr\n            { memPtr := mload(64) }\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            { revert(0, 0) }\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            { revert(0, 0) }\n            function cleanup_uint256(value) -> cleaned\n            { cleaned := value }\n            function validator_revert_uint256(value)\n            {\n                if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n            }\n            function abi_decode_uint256(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_uint256(value)\n            }\n            function abi_decode_tuple_uint256(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n            }\n            function abi_encode_tuple(headStart) -> tail\n            { tail := add(headStart, 0) }\n            function external_fun_vote()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                fun_vote(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function panic_error_0x32()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x32)\n                revert(0, 0x24)\n            }\n            function array_length_array_struct_Proposal_storage_dyn(value) -> length\n            { length := sload(value) }\n            function array_dataslot_array_struct_Proposal_storage_dyn(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function storage_array_index_access_struct_Proposal__dyn(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_array_struct_Proposal_storage_dyn(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_array_struct_Proposal_storage_dyn(array)\n                slot := add(dataArea, mul(index, 2))\n                offset := 0\n            }\n            function shift_right_0_unsigned(value) -> newValue\n            { newValue := shr(0, value) }\n            function cleanup_from_storage_bytes32(value) -> cleaned\n            { cleaned := value }\n            function extract_from_storage_value_offset_bytes32(slot_value) -> value\n            {\n                value := cleanup_from_storage_bytes32(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_bytes32(slot) -> value\n            {\n                value := extract_from_storage_value_offset_bytes32(sload(slot))\n            }\n            function cleanup_from_storage_uint256(value) -> cleaned\n            { cleaned := value }\n            function extract_from_storage_value_offset_uint256(slot_value) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_uint256(slot) -> value\n            {\n                value := extract_from_storage_value_offset_uint256(sload(slot))\n            }\n            /// @ast-id 27 @src 0:791:818  \"Proposal[] public proposals\"\n            function getter_fun_proposals(key) -> ret, ret_1\n            {\n                let slot := 2\n                let offset := 0\n                if iszero(lt(key, array_length_array_struct_Proposal_storage_dyn(slot))) { revert(0, 0) }\n                slot, offset := storage_array_index_access_struct_Proposal__dyn(slot, key)\n                ret := read_from_storage_split_offset_bytes32(add(slot, 0))\n                ret_1 := read_from_storage_split_offset_uint256(add(slot, 1))\n            }\n            /// @src 0:157:4512  \"contract Ballot {...\"\n            function cleanup_bytes32(value) -> cleaned\n            { cleaned := value }\n            function abi_encode_bytes32_to_bytes32(value, pos)\n            {\n                mstore(pos, cleanup_bytes32(value))\n            }\n            function abi_encode_uint256_to_uint256(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function abi_encode_bytes32_uint256(headStart, value0, value1) -> tail\n            {\n                tail := add(headStart, 64)\n                abi_encode_bytes32_to_bytes32(value0, add(headStart, 0))\n                abi_encode_uint256_to_uint256(value1, add(headStart, 32))\n            }\n            function external_fun_proposals()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                let ret, ret_1 := getter_fun_proposals(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_bytes32_uint256(memPos, ret, ret_1)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function shift_right_unsigned_dynamic(bits, value) -> newValue\n            { newValue := shr(bits, value) }\n            function cleanup_from_storage_address(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function extract_from_storage_value_dynamict_address(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_address(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_address(sload(slot), offset)\n            }\n            /// @ast-id 18 @src 0:712:738  \"address public chairperson\"\n            function getter_fun_chairperson() -> ret\n            {\n                let slot := 0\n                let offset := 0\n                ret := read_from_storage_split_dynamic_address(slot, offset)\n            }\n            /// @src 0:157:4512  \"contract Ballot {...\"\n            function cleanup_uint160(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function cleanup_address(value) -> cleaned\n            {\n                cleaned := cleanup_uint160(value)\n            }\n            function abi_encode_address(value, pos)\n            {\n                mstore(pos, cleanup_address(value))\n            }\n            function abi_encode_tuple_address(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_address(value0, add(headStart, 0))\n            }\n            function external_fun_chairperson()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_chairperson()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_address(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function validator_revert_address(value)\n            {\n                if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n            }\n            function abi_decode_address(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_address(value)\n            }\n            function abi_decode_tuple_address(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n            }\n            function external_fun_delegate()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_address(4, calldatasize())\n                fun_delegate(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_encode_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_uint256_to_uint256(value0, add(headStart, 0))\n            }\n            function external_fun_winningProposal()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := fun_winningProposal()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_giveRightToVote()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_address(4, calldatasize())\n                fun_giveRightToVote(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function identity(value) -> ret\n            { ret := value }\n            function convert_uint160_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_uint160(value)))\n            }\n            function convert_uint160_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function mapping_index_access_mapping_address_struct_Voter_storage_of_address(slot, key) -> dataSlot\n            {\n                mstore(0, convert_address_to_address(key))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function cleanup_from_storage_bool(value) -> cleaned\n            { cleaned := and(value, 0xff) }\n            function extract_from_storage_value_offset_bool(slot_value) -> value\n            {\n                value := cleanup_from_storage_bool(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_bool(slot) -> value\n            {\n                value := extract_from_storage_value_offset_bool(sload(slot))\n            }\n            function shift_right_8_unsigned(value) -> newValue\n            { newValue := shr(8, value) }\n            function extract_from_storage_value_offset_address(slot_value) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_8_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_t_address(slot) -> value\n            {\n                value := extract_from_storage_value_offset_address(sload(slot))\n            }\n            /// @ast-id 23 @src 0:745:784  \"mapping(address => Voter) public voters\"\n            function getter_fun_voters(key) -> ret, ret_1, ret_2, ret_3\n            {\n                let slot := 1\n                slot := mapping_index_access_mapping_address_struct_Voter_storage_of_address(slot, key)\n                ret := read_from_storage_split_offset_uint256(add(slot, 0))\n                ret_1 := read_from_storage_split_offset_bool(add(slot, 1))\n                ret_2 := read_from_storage_split_offset_t_address(add(slot, 1))\n                ret_3 := read_from_storage_split_offset_uint256(add(slot, 2))\n            }\n            /// @src 0:157:4512  \"contract Ballot {...\"\n            function cleanup_bool(value) -> cleaned\n            {\n                cleaned := iszero(iszero(value))\n            }\n            function abi_encode_bool(value, pos)\n            {\n                mstore(pos, cleanup_bool(value))\n            }\n            function abi_encode_uint256_bool_address_uint256(headStart, value0, value1, value2, value3) -> tail\n            {\n                tail := add(headStart, 128)\n                abi_encode_uint256_to_uint256(value0, add(headStart, 0))\n                abi_encode_bool(value1, add(headStart, 32))\n                abi_encode_address(value2, add(headStart, 64))\n                abi_encode_uint256_to_uint256(value3, add(headStart, 96))\n            }\n            function external_fun_voters()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_address(4, calldatasize())\n                let ret, ret_1, ret_2, ret_3 := getter_fun_voters(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256_bool_address_uint256(memPos, ret, ret_1, ret_2, ret_3)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_encode_bytes32(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_bytes32_to_bytes32(value0, add(headStart, 0))\n            }\n            function external_fun_winnerName()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := fun_winnerName()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_bytes32(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            { revert(0, 0) }\n            function convert_struct_Voter_storage_to_struct_Voter_ptr(value) -> converted\n            { converted := value }\n            function cleanup_t_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_t_rational_by_to_t_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_t_rational_by(value)))\n            }\n            function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function store_literal_in_memory_0dc527e8fa9b76c996eb5eda9ddb749b21540f5509781b94e1e37f7027e7f50e(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Has no right to vote\")\n            }\n            function abi_encode_stringliteral_0dc527e8fa9b76c996eb5eda9ddb749b21540f5509781b94e1e37f7027e7f50e(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 20)\n                store_literal_in_memory_0dc527e8fa9b76c996eb5eda9ddb749b21540f5509781b94e1e37f7027e7f50e(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_0dc5(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_0dc527e8fa9b76c996eb5eda9ddb749b21540f5509781b94e1e37f7027e7f50e(tail)\n            }\n            function require_helper_stringliteral_0dc5(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_0dc5(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_56aab92b7164a4ea72a098d2d95a5e763b71d07f265e8d46fc7240404017fa84(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Already voted.\")\n            }\n            function abi_encode_stringliteral_56aab92b7164a4ea72a098d2d95a5e763b71d07f265e8d46fc7240404017fa84(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 14)\n                store_literal_in_memory_56aab92b7164a4ea72a098d2d95a5e763b71d07f265e8d46fc7240404017fa84(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_56aa(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_56aab92b7164a4ea72a098d2d95a5e763b71d07f265e8d46fc7240404017fa84(tail)\n            }\n            function require_helper_stringliteral_56aa(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_56aa(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function shift_left_0(value) -> newValue\n            { newValue := shl(0, value) }\n            function update_byte_slice_shift_0(value, toInsert) -> result\n            {\n                let mask := 255\n                toInsert := shift_left_0(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_bool_to_bool(value) -> converted\n            {\n                converted := cleanup_bool(value)\n            }\n            function prepare_store_bool(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_bool_to_bool(slot, value)\n            {\n                let convertedValue := convert_bool_to_bool(value)\n                sstore(slot, update_byte_slice_shift_0(sload(slot), prepare_store_bool(convertedValue)))\n            }\n            function update_byte_slice_shift(value, toInsert) -> result\n            {\n                let mask := not(0)\n                toInsert := shift_left_0(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_uint256_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_uint256(value)))\n            }\n            function prepare_store_uint256(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_uint256_to_uint256(slot, value)\n            {\n                let convertedValue := convert_uint256_to_uint256(value)\n                sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n            }\n            function panic_error_0x11()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x11)\n                revert(0, 0x24)\n            }\n            function checked_add_uint256(x, y) -> sum\n            {\n                x := cleanup_uint256(x)\n                y := cleanup_uint256(y)\n                sum := add(x, y)\n                if gt(x, sum) { panic_error_0x11() }\n            }\n            /// @ast-id 257 @src 0:3166:3624  \"function vote(uint proposal) public {...\"\n            function fun_vote(var_proposal)\n            {\n                /// @src 0:3235:3241  \"voters\"\n                let _1_slot := 0x01\n                let expr_216_slot := _1_slot\n                /// @src 0:3242:3252  \"msg.sender\"\n                let expr := caller()\n                /// @src 0:3235:3253  \"voters[msg.sender]\"\n                let _1 := mapping_index_access_mapping_address_struct_Voter_storage_of_address(expr_216_slot, expr)\n                let _3_slot := _1\n                let expr_219_slot := _3_slot\n                /// @src 0:3212:3253  \"Voter storage sender = voters[msg.sender]\"\n                let var_sender_215_slot := convert_struct_Voter_storage_to_struct_Voter_ptr(expr_219_slot)\n                /// @src 0:3271:3277  \"sender\"\n                let _4_slot := var_sender_215_slot\n                let expr_222_slot := _4_slot\n                /// @src 0:3271:3284  \"sender.weight\"\n                let _2 := add(expr_222_slot, 0)\n                let _3 := read_from_storage_split_offset_uint256(_2)\n                let expr_1 := _3\n                /// @src 0:3288:3289  \"0\"\n                let expr_2 := 0x00\n                /// @src 0:3271:3289  \"sender.weight != 0\"\n                let expr_3 := iszero(eq(cleanup_uint256(expr_1), convert_t_rational_by_to_t_uint256(expr_2)))\n                /// @src 0:3263:3314  \"require(sender.weight != 0, \\\"Has no right to vote\\\")\"\n                require_helper_stringliteral_0dc5(expr_3)\n                /// @src 0:3333:3339  \"sender\"\n                let _7_slot := var_sender_215_slot\n                let expr_230_slot := _7_slot\n                /// @src 0:3333:3345  \"sender.voted\"\n                let _4 := add(expr_230_slot, 1)\n                let _5 := read_from_storage_split_offset_bool(_4)\n                let expr_4 := _5\n                /// @src 0:3332:3345  \"!sender.voted\"\n                let expr_5 := cleanup_bool(iszero(expr_4))\n                /// @src 0:3324:3364  \"require(!sender.voted, \\\"Already voted.\\\")\"\n                require_helper_stringliteral_56aa(expr_5)\n                /// @src 0:3389:3393  \"true\"\n                let expr_6 := 0x01\n                /// @src 0:3374:3380  \"sender\"\n                let _10_slot := var_sender_215_slot\n                let expr_236_slot := _10_slot\n                /// @src 0:3374:3386  \"sender.voted\"\n                let _6 := add(expr_236_slot, 1)\n                /// @src 0:3374:3393  \"sender.voted = true\"\n                update_storage_value_offset_bool_to_bool(_6, expr_6)\n                /// @src 0:3417:3425  \"proposal\"\n                let _7 := var_proposal\n                let expr_7 := _7\n                /// @src 0:3403:3409  \"sender\"\n                let _13_slot := var_sender_215_slot\n                let expr_242_slot := _13_slot\n                /// @src 0:3403:3414  \"sender.vote\"\n                let _8 := add(expr_242_slot, 2)\n                /// @src 0:3403:3425  \"sender.vote = proposal\"\n                update_storage_value_offset_uint256_to_uint256(_8, expr_7)\n                /// @src 0:3604:3610  \"sender\"\n                let _15_slot := var_sender_215_slot\n                let expr_252_slot := _15_slot\n                /// @src 0:3604:3617  \"sender.weight\"\n                let _9 := add(expr_252_slot, 0)\n                let _10 := read_from_storage_split_offset_uint256(_9)\n                let expr_8 := _10\n                /// @src 0:3571:3580  \"proposals\"\n                let _18_slot := 0x02\n                let expr_248_slot := _18_slot\n                /// @src 0:3581:3589  \"proposal\"\n                let _11 := var_proposal\n                let expr_9 := _11\n                /// @src 0:3571:3590  \"proposals[proposal]\"\n                let _12, _13 := storage_array_index_access_struct_Proposal__dyn(expr_248_slot, expr_9)\n                let _22_slot := _12\n                let expr_250_slot := _22_slot\n                /// @src 0:3571:3600  \"proposals[proposal].voteCount\"\n                let _14 := add(expr_250_slot, 1)\n                /// @src 0:3571:3617  \"proposals[proposal].voteCount += sender.weight\"\n                let _15 := read_from_storage_split_offset_uint256(_14)\n                let expr_10 := checked_add_uint256(_15, expr_8)\n                update_storage_value_offset_uint256_to_uint256(_14, expr_10)\n            }\n            /// @src 0:157:4512  \"contract Ballot {...\"\n            function store_literal_in_memory_657c6119c4ed567c60278fba62242b17c2fedf38962e651040dabfb3c9e15a5f(memPtr)\n            {\n                mstore(add(memPtr, 0), \"You already voted.\")\n            }\n            function abi_encode_stringliteral_657c(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 18)\n                store_literal_in_memory_657c6119c4ed567c60278fba62242b17c2fedf38962e651040dabfb3c9e15a5f(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_657c(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_657c(tail)\n            }\n            function require_helper_stringliteral_657c(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_657c(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_f37bf1aca80f8fa291a40f639db6aeaa1425ceb0e8c61c8648f0e2efa282a947(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Self-delegation is disallowed.\")\n            }\n            function abi_encode_stringliteral_f37bf1aca80f8fa291a40f639db6aeaa1425ceb0e8c61c8648f0e2efa282a947(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 30)\n                store_literal_in_memory_f37bf1aca80f8fa291a40f639db6aeaa1425ceb0e8c61c8648f0e2efa282a947(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_f37b(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_f37bf1aca80f8fa291a40f639db6aeaa1425ceb0e8c61c8648f0e2efa282a947(tail)\n            }\n            function require_helper_stringliteral_f37b(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_f37b(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function convert_rational_by_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_t_rational_by(value)))\n            }\n            function convert_rational_by_to_address(value) -> converted\n            {\n                converted := convert_rational_by_to_uint160(value)\n            }\n            function store_literal_in_memory_8bd75322489f7ff7ab0b18506f4dcde935a32eca2a506b00f4d21b0becfa093c(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Found loop in delegation.\")\n            }\n            function abi_encode_stringliteral_8bd75322489f7ff7ab0b18506f4dcde935a32eca2a506b00f4d21b0becfa093c(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 25)\n                store_literal_in_memory_8bd75322489f7ff7ab0b18506f4dcde935a32eca2a506b00f4d21b0becfa093c(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_8bd7(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_8bd75322489f7ff7ab0b18506f4dcde935a32eca2a506b00f4d21b0becfa093c(tail)\n            }\n            function require_helper_stringliteral_8bd7(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_8bd7(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function shift_left(value) -> newValue\n            { newValue := shl(8, value) }\n            function update_byte_slice_shift_1(value, toInsert) -> result\n            {\n                let mask := sub(shl(168, 1), 256)\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function prepare_store_address(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_address_to_address(slot, value)\n            {\n                let convertedValue := convert_address_to_address(value)\n                sstore(slot, update_byte_slice_shift_1(sload(slot), prepare_store_address(convertedValue)))\n            }\n            /// @ast-id 207 @src 0:2071:2978  \"function delegate(address to) public {...\"\n            function fun_delegate(var_to)\n            {\n                /// @src 0:2141:2147  \"voters\"\n                let _25_slot := 0x01\n                let expr_120_slot := _25_slot\n                /// @src 0:2148:2158  \"msg.sender\"\n                let expr := caller()\n                /// @src 0:2141:2159  \"voters[msg.sender]\"\n                let _1 := mapping_index_access_mapping_address_struct_Voter_storage_of_address(expr_120_slot, expr)\n                let _27_slot := _1\n                let expr_123_slot := _27_slot\n                /// @src 0:2118:2159  \"Voter storage sender = voters[msg.sender]\"\n                let var_sender_slot := convert_struct_Voter_storage_to_struct_Voter_ptr(expr_123_slot)\n                /// @src 0:2178:2184  \"sender\"\n                let _28_slot := var_sender_slot\n                let expr_126_slot := _28_slot\n                /// @src 0:2178:2190  \"sender.voted\"\n                let _2 := add(expr_126_slot, 1)\n                let _3 := read_from_storage_split_offset_bool(_2)\n                let expr_1 := _3\n                /// @src 0:2177:2190  \"!sender.voted\"\n                let expr_2 := cleanup_bool(iszero(expr_1))\n                /// @src 0:2169:2213  \"require(!sender.voted, \\\"You already voted.\\\")\"\n                require_helper_stringliteral_657c(expr_2)\n                /// @src 0:2231:2233  \"to\"\n                let _4 := var_to\n                let expr_3 := _4\n                /// @src 0:2237:2247  \"msg.sender\"\n                let expr_4 := caller()\n                /// @src 0:2231:2247  \"to != msg.sender\"\n                let expr_5 := iszero(eq(cleanup_address(expr_3), cleanup_address(expr_4)))\n                /// @src 0:2223:2282  \"require(to != msg.sender, \\\"Self-delegation is disallowed.\\\")\"\n                require_helper_stringliteral_f37b(expr_5)\n                /// @src 0:2293:2516  \"while (voters[to].delegate != address(0)) {...\"\n                for { } 1 { }\n                {\n                    /// @src 0:2300:2306  \"voters\"\n                    let _32_slot := 0x01\n                    let expr_140_slot := _32_slot\n                    /// @src 0:2307:2309  \"to\"\n                    let _5 := var_to\n                    let expr_6 := _5\n                    /// @src 0:2300:2310  \"voters[to]\"\n                    let _6 := mapping_index_access_mapping_address_struct_Voter_storage_of_address(expr_140_slot, expr_6)\n                    let _35_slot := _6\n                    let expr_142_slot := _35_slot\n                    /// @src 0:2300:2319  \"voters[to].delegate\"\n                    let _7 := add(expr_142_slot, 1)\n                    let _8 := read_from_storage_split_offset_t_address(_7)\n                    let expr_7 := _8\n                    /// @src 0:2331:2332  \"0\"\n                    let expr_8 := 0x00\n                    /// @src 0:2323:2333  \"address(0)\"\n                    let expr_9 := convert_rational_by_to_address(expr_8)\n                    /// @src 0:2300:2333  \"voters[to].delegate != address(0)\"\n                    let expr_10 := iszero(eq(cleanup_address(expr_7), cleanup_address(expr_9)))\n                    if iszero(expr_10) { break }\n                    /// @src 0:2354:2360  \"voters\"\n                    let _38_slot := 0x01\n                    let expr_150_slot := _38_slot\n                    /// @src 0:2361:2363  \"to\"\n                    let _9 := var_to\n                    let expr_11 := _9\n                    /// @src 0:2354:2364  \"voters[to]\"\n                    let _10 := mapping_index_access_mapping_address_struct_Voter_storage_of_address(expr_150_slot, expr_11)\n                    let _41_slot := _10\n                    let expr_152_slot := _41_slot\n                    /// @src 0:2354:2373  \"voters[to].delegate\"\n                    let _11 := add(expr_152_slot, 1)\n                    let _12 := read_from_storage_split_offset_t_address(_11)\n                    let expr_12 := _12\n                    /// @src 0:2349:2373  \"to = voters[to].delegate\"\n                    var_to := expr_12\n                    /// @src 0:2459:2461  \"to\"\n                    let _13 := var_to\n                    let expr_13 := _13\n                    /// @src 0:2465:2475  \"msg.sender\"\n                    let expr_14 := caller()\n                    /// @src 0:2459:2475  \"to != msg.sender\"\n                    let expr_15 := iszero(eq(cleanup_address(expr_13), cleanup_address(expr_14)))\n                    /// @src 0:2451:2505  \"require(to != msg.sender, \\\"Found loop in delegation.\\\")\"\n                    require_helper_stringliteral_8bd7(expr_15)\n                }\n                /// @src 0:2540:2544  \"true\"\n                let expr_16 := 0x01\n                /// @src 0:2525:2531  \"sender\"\n                let _45_slot := var_sender_slot\n                let expr_166_slot := _45_slot\n                /// @src 0:2525:2537  \"sender.voted\"\n                let _14 := add(expr_166_slot, 1)\n                /// @src 0:2525:2544  \"sender.voted = true\"\n                update_storage_value_offset_bool_to_bool(_14, expr_16)\n                /// @src 0:2572:2574  \"to\"\n                let _15 := var_to\n                let expr_17 := _15\n                /// @src 0:2554:2560  \"sender\"\n                let _48_slot := var_sender_slot\n                let expr_172_slot := _48_slot\n                /// @src 0:2554:2569  \"sender.delegate\"\n                let _16 := add(expr_172_slot, 1)\n                /// @src 0:2554:2574  \"sender.delegate = to\"\n                update_storage_value_offset_address_to_address(_16, expr_17)\n                /// @src 0:2610:2616  \"voters\"\n                let _50_slot := 0x01\n                let expr_slot := _50_slot\n                /// @src 0:2617:2619  \"to\"\n                let _17 := var_to\n                let expr_18 := _17\n                /// @src 0:2610:2620  \"voters[to]\"\n                let _18 := mapping_index_access_mapping_address_struct_Voter_storage_of_address(expr_slot, expr_18)\n                let _53_slot := _18\n                let expr_183_slot := _53_slot\n                /// @src 0:2584:2620  \"Voter storage delegate_ = voters[to]\"\n                let var_delegate_slot := convert_struct_Voter_storage_to_struct_Voter_ptr(expr_183_slot)\n                /// @src 0:2634:2643  \"delegate_\"\n                let _54_slot := var_delegate_slot\n                let expr_185_slot := _54_slot\n                /// @src 0:2634:2649  \"delegate_.voted\"\n                let _19 := add(expr_185_slot, 1)\n                let _20 := read_from_storage_split_offset_bool(_19)\n                let expr_19 := _20\n                /// @src 0:2630:2972  \"if (delegate_.voted) {...\"\n                switch expr_19\n                case 0 {\n                    /// @src 0:2948:2954  \"sender\"\n                    let _57_slot := var_sender_slot\n                    let expr_200_slot := _57_slot\n                    /// @src 0:2948:2961  \"sender.weight\"\n                    let _21 := add(expr_200_slot, 0)\n                    let _22 := read_from_storage_split_offset_uint256(_21)\n                    let expr_20 := _22\n                    /// @src 0:2928:2937  \"delegate_\"\n                    let _60_slot := var_delegate_slot\n                    let expr_197_slot := _60_slot\n                    /// @src 0:2928:2944  \"delegate_.weight\"\n                    let _23 := add(expr_197_slot, 0)\n                    /// @src 0:2928:2961  \"delegate_.weight += sender.weight\"\n                    let _24 := read_from_storage_split_offset_uint256(_23)\n                    let expr_21 := checked_add_uint256(_24, expr_20)\n                    update_storage_value_offset_uint256_to_uint256(_23, expr_21)\n                }\n                default /// @src 0:2630:2972  \"if (delegate_.voted) {...\"\n                {\n                    /// @src 0:2801:2807  \"sender\"\n                    let _63_slot := var_sender_slot\n                    let expr_192_slot := _63_slot\n                    /// @src 0:2801:2814  \"sender.weight\"\n                    let _25 := add(expr_192_slot, 0)\n                    let _26 := read_from_storage_split_offset_uint256(_25)\n                    let expr_22 := _26\n                    /// @src 0:2762:2771  \"proposals\"\n                    let _66_slot := 0x02\n                    let expr_187_slot := _66_slot\n                    /// @src 0:2772:2781  \"delegate_\"\n                    let _67_slot := var_delegate_slot\n                    let expr_188_slot := _67_slot\n                    /// @src 0:2772:2786  \"delegate_.vote\"\n                    let _27 := add(expr_188_slot, 2)\n                    let _28 := read_from_storage_split_offset_uint256(_27)\n                    let expr_23 := _28\n                    /// @src 0:2762:2787  \"proposals[delegate_.vote]\"\n                    let _29, _30 := storage_array_index_access_struct_Proposal__dyn(expr_187_slot, expr_23)\n                    let _72_slot := _29\n                    let expr_190_slot := _72_slot\n                    /// @src 0:2762:2797  \"proposals[delegate_.vote].voteCount\"\n                    let _31 := add(expr_190_slot, 1)\n                    /// @src 0:2762:2814  \"proposals[delegate_.vote].voteCount += sender.weight\"\n                    let _32 := read_from_storage_split_offset_uint256(_31)\n                    let expr_24 := checked_add_uint256(_32, expr_22)\n                    update_storage_value_offset_uint256_to_uint256(_31, expr_24)\n                }\n            }\n            /// @src 0:157:4512  \"contract Ballot {...\"\n            function zero_value_for_split_uint256() -> ret\n            { ret := 0 }\n            function increment_wrapping_uint256(value) -> ret\n            {\n                ret := cleanup_uint256(add(value, 1))\n            }\n            /// @ast-id 300 @src 0:3810:4175  \"function winningProposal() public view...\"\n            function fun_winningProposal() -> var_winningProposal\n            {\n                /// @src 0:3870:3891  \"uint winningProposal_\"\n                let zero_uint256 := zero_value_for_split_uint256()\n                var_winningProposal := zero_uint256\n                /// @src 0:3931:3932  \"0\"\n                let expr := 0x00\n                /// @src 0:3907:3932  \"uint winningVoteCount = 0\"\n                let var_winningVoteCount := convert_t_rational_by_to_t_uint256(expr)\n                /// @src 0:3956:3957  \"0\"\n                let expr_1 := 0x00\n                /// @src 0:3947:3957  \"uint p = 0\"\n                let var_p := convert_t_rational_by_to_t_uint256(expr_1)\n                /// @src 0:3942:4169  \"for (uint p = 0; p < proposals.length; p++) {...\"\n                for { }\n                /** @src 0:3947:3957  \"uint p = 0\" */ 1\n                {\n                    /// @src 0:3981:3984  \"p++\"\n                    let _1 := var_p\n                    let _2 := increment_wrapping_uint256(_1)\n                    var_p := _2\n                }\n                {\n                    /// @src 0:3959:3960  \"p\"\n                    let _3 := var_p\n                    let expr_2 := _3\n                    /// @src 0:3963:3972  \"proposals\"\n                    let _79_slot := 0x02\n                    let expr_272_slot := _79_slot\n                    /// @src 0:3963:3979  \"proposals.length\"\n                    let expr_3 := array_length_array_struct_Proposal_storage_dyn(expr_272_slot)\n                    /// @src 0:3959:3979  \"p < proposals.length\"\n                    let expr_4 := lt(cleanup_uint256(expr_2), cleanup_uint256(expr_3))\n                    if iszero(expr_4) { break }\n                    /// @src 0:4004:4013  \"proposals\"\n                    let _slot := 0x02\n                    let expr_278_slot := _slot\n                    /// @src 0:4014:4015  \"p\"\n                    let _4 := var_p\n                    let expr_5 := _4\n                    /// @src 0:4004:4016  \"proposals[p]\"\n                    let _5, _6 := storage_array_index_access_struct_Proposal__dyn(expr_278_slot, expr_5)\n                    let _84_slot := _5\n                    let expr_280_slot := _84_slot\n                    /// @src 0:4004:4026  \"proposals[p].voteCount\"\n                    let _7 := add(expr_280_slot, 1)\n                    let _8 := read_from_storage_split_offset_uint256(_7)\n                    let expr_6 := _8\n                    /// @src 0:4029:4045  \"winningVoteCount\"\n                    let _9 := var_winningVoteCount\n                    let expr_7 := _9\n                    /// @src 0:4004:4045  \"proposals[p].voteCount > winningVoteCount\"\n                    let expr_8 := gt(cleanup_uint256(expr_6), cleanup_uint256(expr_7))\n                    /// @src 0:4000:4159  \"if (proposals[p].voteCount > winningVoteCount) {...\"\n                    if expr_8\n                    {\n                        /// @src 0:4084:4093  \"proposals\"\n                        let _88_slot := 0x02\n                        let expr_285_slot := _88_slot\n                        /// @src 0:4094:4095  \"p\"\n                        let _10 := var_p\n                        let expr_9 := _10\n                        /// @src 0:4084:4096  \"proposals[p]\"\n                        let _11, _12 := storage_array_index_access_struct_Proposal__dyn(expr_285_slot, expr_9)\n                        let _92_slot := _11\n                        let expr_287_slot := _92_slot\n                        /// @src 0:4084:4106  \"proposals[p].voteCount\"\n                        let _13 := add(expr_287_slot, 1)\n                        let _14 := read_from_storage_split_offset_uint256(_13)\n                        let expr_10 := _14\n                        /// @src 0:4065:4106  \"winningVoteCount = proposals[p].voteCount\"\n                        var_winningVoteCount := expr_10\n                        /// @src 0:4143:4144  \"p\"\n                        let _15 := var_p\n                        let expr_11 := _15\n                        /// @src 0:4124:4144  \"winningProposal_ = p\"\n                        var_winningProposal := expr_11\n                    }\n                }\n            }\n            /// @src 0:157:4512  \"contract Ballot {...\"\n            function extract_from_storage_value_offset_t_address(slot_value) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_address(slot) -> value\n            {\n                value := extract_from_storage_value_offset_t_address(sload(slot))\n            }\n            function store_literal_in_memory_80126ce3251ab2b6e4ade14fe5b2bc11f593510cbe9e3550c09bff1989e33b95(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Only chairperson can give right \")\n                mstore(add(memPtr, 32), \"to vote.\")\n            }\n            function abi_encode_stringliteral_8012(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 40)\n                store_literal_in_memory_80126ce3251ab2b6e4ade14fe5b2bc11f593510cbe9e3550c09bff1989e33b95(pos)\n                end := add(pos, 64)\n            }\n            function abi_encode_stringliteral(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_8012(tail)\n            }\n            function require_helper_stringliteral(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_d39b1db28626750c546703ffb72f30ea3facdfed1bebd47408e22ef18a76ba2d(memPtr)\n            {\n                mstore(add(memPtr, 0), \"The voter already voted.\")\n            }\n            function abi_encode_stringliteral_d39b(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 24)\n                store_literal_in_memory_d39b1db28626750c546703ffb72f30ea3facdfed1bebd47408e22ef18a76ba2d(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_d39b(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_d39b(tail)\n            }\n            function require_helper_stringliteral_d39b(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_d39b(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function require_helper(condition)\n            {\n                if iszero(condition) { revert(0, 0) }\n            }\n            function cleanup_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_by_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n            }\n            /// @ast-id 111 @src 0:1592:1947  \"function giveRightToVote(address voter) public {...\"\n            function fun_giveRightToVote(var_voter)\n            {\n                /// @src 0:1670:1680  \"msg.sender\"\n                let expr := caller()\n                /// @src 0:1684:1695  \"chairperson\"\n                let _1 := read_from_storage_split_offset_address(0x00)\n                let expr_1 := _1\n                /// @src 0:1670:1695  \"msg.sender == chairperson\"\n                let expr_2 := eq(cleanup_address(expr), cleanup_address(expr_1))\n                /// @src 0:1649:1761  \"require(...\"\n                require_helper_stringliteral(expr_2)\n                /// @src 0:1793:1799  \"voters\"\n                let _97_slot := 0x01\n                let expr_86_slot := _97_slot\n                /// @src 0:1800:1805  \"voter\"\n                let _2 := var_voter\n                let expr_3 := _2\n                /// @src 0:1793:1806  \"voters[voter]\"\n                let _3 := mapping_index_access_mapping_address_struct_Voter_storage_of_address(expr_86_slot, expr_3)\n                let _100_slot := _3\n                let expr_88_slot := _100_slot\n                /// @src 0:1793:1812  \"voters[voter].voted\"\n                let _4 := add(expr_88_slot, 1)\n                let _5 := read_from_storage_split_offset_bool(_4)\n                let expr_4 := _5\n                /// @src 0:1792:1812  \"!voters[voter].voted\"\n                let expr_5 := cleanup_bool(iszero(expr_4))\n                /// @src 0:1771:1862  \"require(...\"\n                require_helper_stringliteral_d39b(expr_5)\n                /// @src 0:1880:1886  \"voters\"\n                let _103_slot := 0x01\n                let expr_95_slot := _103_slot\n                /// @src 0:1887:1892  \"voter\"\n                let _6 := var_voter\n                let expr_6 := _6\n                /// @src 0:1880:1893  \"voters[voter]\"\n                let _7 := mapping_index_access_mapping_address_struct_Voter_storage_of_address(expr_95_slot, expr_6)\n                let _106_slot := _7\n                let expr_97_slot := _106_slot\n                /// @src 0:1880:1900  \"voters[voter].weight\"\n                let _8 := add(expr_97_slot, 0)\n                let _9 := read_from_storage_split_offset_uint256(_8)\n                let expr_7 := _9\n                /// @src 0:1904:1905  \"0\"\n                let expr_8 := 0x00\n                /// @src 0:1880:1905  \"voters[voter].weight == 0\"\n                let expr_9 := eq(cleanup_uint256(expr_7), convert_t_rational_by_to_t_uint256(expr_8))\n                /// @src 0:1872:1906  \"require(voters[voter].weight == 0)\"\n                require_helper(expr_9)\n                /// @src 0:1939:1940  \"1\"\n                let expr_10 := 0x01\n                /// @src 0:1916:1940  \"voters[voter].weight = 1\"\n                let _10 := convert_rational_by_to_uint256(expr_10)\n                /// @src 0:1916:1922  \"voters\"\n                let _110_slot := 0x01\n                let expr_103_slot := _110_slot\n                /// @src 0:1923:1928  \"voter\"\n                let _11 := var_voter\n                let expr_11 := _11\n                /// @src 0:1916:1929  \"voters[voter]\"\n                let _12 := mapping_index_access_mapping_address_struct_Voter_storage_of_address(expr_103_slot, expr_11)\n                let _113_slot := _12\n                let expr_105_slot := _113_slot\n                /// @src 0:1916:1936  \"voters[voter].weight\"\n                let _13 := add(expr_105_slot, 0)\n                /// @src 0:1916:1940  \"voters[voter].weight = 1\"\n                update_storage_value_offset_uint256_to_uint256(_13, _10)\n            }\n            /// @src 0:157:4512  \"contract Ballot {...\"\n            function zero_value_for_split_bytes32() -> ret\n            { ret := 0 }\n            /// @ast-id 315 @src 0:4366:4510  \"function winnerName() public view...\"\n            function fun_winnerName() -> var_winnerName\n            {\n                /// @src 0:4421:4440  \"bytes32 winnerName_\"\n                let zero_bytes32 := zero_value_for_split_bytes32()\n                var_winnerName := zero_bytes32\n                /// @src 0:4470:4479  \"proposals\"\n                let _116_slot := 0x02\n                let expr_307_slot := _116_slot\n                /// @src 0:4480:4497  \"winningProposal()\"\n                let expr := fun_winningProposal()\n                /// @src 0:4470:4498  \"proposals[winningProposal()]\"\n                let _1, _2 := storage_array_index_access_struct_Proposal__dyn(expr_307_slot, expr)\n                let _119_slot := _1\n                let expr_310_slot := _119_slot\n                /// @src 0:4470:4503  \"proposals[winningProposal()].name\"\n                let _3 := add(expr_310_slot, 0)\n                let _4 := read_from_storage_split_offset_bytes32(_3)\n                let expr_1 := _4\n                /// @src 0:4456:4503  \"winnerName_ = proposals[winningProposal()].name\"\n                var_winnerName := expr_1\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220832214acfea3e0079f809b00e953afc65b6d7d466e4591f622464ba606b7e90664736f6c634300081c0033\"\n    }\n}\n",
					"hash": "9073d2c7ba0ec283b62eb9decfd9e5898073af258fd94aad1eab8f61e0c1a543",
					"factoryDependencies": {}
				}
			}
		},
		"sources": {
			"contracts/3_Ballot.sol": {
				"id": 0,
				"ast": {
					"absolutePath": "contracts/3_Ballot.sol",
					"exportedSymbols": {
						"Ballot": [
							316
						]
					},
					"id": 317,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".0",
								"<",
								"0.9",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "37:31:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Ballot",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "70:86:0",
								"text": " @title Ballot\n @dev Implements voting process along with vote delegation"
							},
							"fullyImplemented": true,
							"id": 316,
							"linearizedBaseContracts": [
								316
							],
							"name": "Ballot",
							"nameLocation": "166:6:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Ballot.Voter",
									"id": 11,
									"members": [
										{
											"constant": false,
											"id": 4,
											"mutability": "mutable",
											"name": "weight",
											"nameLocation": "208:6:0",
											"nodeType": "VariableDeclaration",
											"scope": 11,
											"src": "203:11:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 3,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "203:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 6,
											"mutability": "mutable",
											"name": "voted",
											"nameLocation": "268:5:0",
											"nodeType": "VariableDeclaration",
											"scope": 11,
											"src": "263:10:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 5,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "263:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 8,
											"mutability": "mutable",
											"name": "delegate",
											"nameLocation": "330:8:0",
											"nodeType": "VariableDeclaration",
											"scope": 11,
											"src": "322:16:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 7,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "322:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 10,
											"mutability": "mutable",
											"name": "vote",
											"nameLocation": "376:4:0",
											"nodeType": "VariableDeclaration",
											"scope": 11,
											"src": "371:9:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 9,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "371:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Voter",
									"nameLocation": "187:5:0",
									"nodeType": "StructDefinition",
									"scope": 316,
									"src": "180:240:0",
									"visibility": "public"
								},
								{
									"canonicalName": "Ballot.Proposal",
									"id": 16,
									"members": [
										{
											"constant": false,
											"id": 13,
											"mutability": "mutable",
											"name": "name",
											"nameLocation": "607:4:0",
											"nodeType": "VariableDeclaration",
											"scope": 16,
											"src": "599:12:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 12,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "599:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 15,
											"mutability": "mutable",
											"name": "voteCount",
											"nameLocation": "659:9:0",
											"nodeType": "VariableDeclaration",
											"scope": 16,
											"src": "654:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 14,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "654:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Proposal",
									"nameLocation": "433:8:0",
									"nodeType": "StructDefinition",
									"scope": 316,
									"src": "426:280:0",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "2e4176cf",
									"id": 18,
									"mutability": "mutable",
									"name": "chairperson",
									"nameLocation": "727:11:0",
									"nodeType": "VariableDeclaration",
									"scope": 316,
									"src": "712:26:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 17,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "712:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "a3ec138d",
									"id": 23,
									"mutability": "mutable",
									"name": "voters",
									"nameLocation": "778:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 316,
									"src": "745:39:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$11_storage_$",
										"typeString": "mapping(address => struct Ballot.Voter)"
									},
									"typeName": {
										"id": 22,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 19,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "753:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "745:25:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$11_storage_$",
											"typeString": "mapping(address => struct Ballot.Voter)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 21,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 20,
												"name": "Voter",
												"nameLocations": [
													"764:5:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 11,
												"src": "764:5:0"
											},
											"referencedDeclaration": 11,
											"src": "764:5:0",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Voter_$11_storage_ptr",
												"typeString": "struct Ballot.Voter"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "013cf08b",
									"id": 27,
									"mutability": "mutable",
									"name": "proposals",
									"nameLocation": "809:9:0",
									"nodeType": "VariableDeclaration",
									"scope": 316,
									"src": "791:27:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_struct$_Proposal_$16_storage_$dyn_storage",
										"typeString": "struct Ballot.Proposal[]"
									},
									"typeName": {
										"baseType": {
											"id": 25,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 24,
												"name": "Proposal",
												"nameLocations": [
													"791:8:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 16,
												"src": "791:8:0"
											},
											"referencedDeclaration": 16,
											"src": "791:8:0",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Proposal_$16_storage_ptr",
												"typeString": "struct Ballot.Proposal"
											}
										},
										"id": 26,
										"nodeType": "ArrayTypeName",
										"src": "791:10:0",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_struct$_Proposal_$16_storage_$dyn_storage_ptr",
											"typeString": "struct Ballot.Proposal[]"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 70,
										"nodeType": "Block",
										"src": "999:437:0",
										"statements": [
											{
												"expression": {
													"id": 37,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 34,
														"name": "chairperson",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 18,
														"src": "1009:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 35,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "1023:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 36,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1027:6:0",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "1023:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1009:24:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 38,
												"nodeType": "ExpressionStatement",
												"src": "1009:24:0"
											},
											{
												"expression": {
													"id": 44,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 39,
																"name": "voters",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 23,
																"src": "1043:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$11_storage_$",
																	"typeString": "mapping(address => struct Ballot.Voter storage ref)"
																}
															},
															"id": 41,
															"indexExpression": {
																"id": 40,
																"name": "chairperson",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 18,
																"src": "1050:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "1043:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Voter_$11_storage",
																"typeString": "struct Ballot.Voter storage ref"
															}
														},
														"id": 42,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "1063:6:0",
														"memberName": "weight",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 4,
														"src": "1043:26:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 43,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1072:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "1043:30:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 45,
												"nodeType": "ExpressionStatement",
												"src": "1043:30:0"
											},
											{
												"body": {
													"id": 68,
													"nodeType": "Block",
													"src": "1132:298:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"baseExpression": {
																					"id": 61,
																					"name": "proposalNames",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 31,
																					"src": "1357:13:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 63,
																				"indexExpression": {
																					"id": 62,
																					"name": "i",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 47,
																					"src": "1371:1:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "1357:16:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			{
																				"hexValue": "30",
																				"id": 64,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1402:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				},
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 60,
																			"name": "Proposal",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 16,
																			"src": "1324:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_struct$_Proposal_$16_storage_ptr_$",
																				"typeString": "type(struct Ballot.Proposal storage pointer)"
																			}
																		},
																		"id": 65,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "structConstructorCall",
																		"lValueRequested": false,
																		"nameLocations": [
																			"1351:4:0",
																			"1391:9:0"
																		],
																		"names": [
																			"name",
																			"voteCount"
																		],
																		"nodeType": "FunctionCall",
																		"src": "1324:94:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Proposal_$16_memory_ptr",
																			"typeString": "struct Ballot.Proposal memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_struct$_Proposal_$16_memory_ptr",
																			"typeString": "struct Ballot.Proposal memory"
																		}
																	],
																	"expression": {
																		"id": 57,
																		"name": "proposals",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 27,
																		"src": "1309:9:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_struct$_Proposal_$16_storage_$dyn_storage",
																			"typeString": "struct Ballot.Proposal storage ref[] storage ref"
																		}
																	},
																	"id": 59,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1319:4:0",
																	"memberName": "push",
																	"nodeType": "MemberAccess",
																	"src": "1309:14:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_struct$_Proposal_$16_storage_$dyn_storage_ptr_$_t_struct$_Proposal_$16_storage_$returns$__$attached_to$_t_array$_t_struct$_Proposal_$16_storage_$dyn_storage_ptr_$",
																		"typeString": "function (struct Ballot.Proposal storage ref[] storage pointer,struct Ballot.Proposal storage ref)"
																	}
																},
																"id": 66,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1309:110:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 67,
															"nodeType": "ExpressionStatement",
															"src": "1309:110:0"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 53,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 50,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 47,
														"src": "1101:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 51,
															"name": "proposalNames",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 31,
															"src": "1105:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																"typeString": "bytes32[] memory"
															}
														},
														"id": 52,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1119:6:0",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1105:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1101:24:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 69,
												"initializationExpression": {
													"assignments": [
														47
													],
													"declarations": [
														{
															"constant": false,
															"id": 47,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "1094:1:0",
															"nodeType": "VariableDeclaration",
															"scope": 69,
															"src": "1089:6:0",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 46,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "1089:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 49,
													"initialValue": {
														"hexValue": "30",
														"id": 48,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1098:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1089:10:0"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 55,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "1127:3:0",
														"subExpression": {
															"id": 54,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 47,
															"src": "1127:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 56,
													"nodeType": "ExpressionStatement",
													"src": "1127:3:0"
												},
												"nodeType": "ForStatement",
												"src": "1084:346:0"
											}
										]
									},
									"documentation": {
										"id": 28,
										"nodeType": "StructuredDocumentation",
										"src": "825:125:0",
										"text": " @dev Create a new ballot to choose one of 'proposalNames'.\n @param proposalNames names of proposals"
									},
									"id": 71,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 32,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 31,
												"mutability": "mutable",
												"name": "proposalNames",
												"nameLocation": "984:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 71,
												"src": "967:30:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 29,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "967:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 30,
													"nodeType": "ArrayTypeName",
													"src": "967:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "966:32:0"
									},
									"returnParameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "999:0:0"
									},
									"scope": 316,
									"src": "955:481:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 110,
										"nodeType": "Block",
										"src": "1639:308:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 81,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 78,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1670:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 79,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1674:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1670:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 80,
																"name": "chairperson",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 18,
																"src": "1684:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1670:25:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f6e6c79206368616972706572736f6e2063616e206769766520726967687420746f20766f74652e",
															"id": 82,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1709:42:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_80126ce3251ab2b6e4ade14fe5b2bc11f593510cbe9e3550c09bff1989e33b95",
																"typeString": "literal_string \"Only chairperson can give right to vote.\""
															},
															"value": "Only chairperson can give right to vote."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_80126ce3251ab2b6e4ade14fe5b2bc11f593510cbe9e3550c09bff1989e33b95",
																"typeString": "literal_string \"Only chairperson can give right to vote.\""
															}
														],
														"id": 77,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1649:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 83,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1649:112:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 84,
												"nodeType": "ExpressionStatement",
												"src": "1649:112:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 90,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "1792:20:0",
															"subExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 86,
																		"name": "voters",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 23,
																		"src": "1793:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$11_storage_$",
																			"typeString": "mapping(address => struct Ballot.Voter storage ref)"
																		}
																	},
																	"id": 88,
																	"indexExpression": {
																		"id": 87,
																		"name": "voter",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 74,
																		"src": "1800:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1793:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Voter_$11_storage",
																		"typeString": "struct Ballot.Voter storage ref"
																	}
																},
																"id": 89,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1807:5:0",
																"memberName": "voted",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 6,
																"src": "1793:19:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54686520766f74657220616c726561647920766f7465642e",
															"id": 91,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1826:26:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d39b1db28626750c546703ffb72f30ea3facdfed1bebd47408e22ef18a76ba2d",
																"typeString": "literal_string \"The voter already voted.\""
															},
															"value": "The voter already voted."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d39b1db28626750c546703ffb72f30ea3facdfed1bebd47408e22ef18a76ba2d",
																"typeString": "literal_string \"The voter already voted.\""
															}
														],
														"id": 85,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1771:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 92,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1771:91:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 93,
												"nodeType": "ExpressionStatement",
												"src": "1771:91:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 100,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 95,
																		"name": "voters",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 23,
																		"src": "1880:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$11_storage_$",
																			"typeString": "mapping(address => struct Ballot.Voter storage ref)"
																		}
																	},
																	"id": 97,
																	"indexExpression": {
																		"id": 96,
																		"name": "voter",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 74,
																		"src": "1887:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1880:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Voter_$11_storage",
																		"typeString": "struct Ballot.Voter storage ref"
																	}
																},
																"id": 98,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1894:6:0",
																"memberName": "weight",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 4,
																"src": "1880:20:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 99,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1904:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1880:25:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 94,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1872:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 101,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1872:34:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 102,
												"nodeType": "ExpressionStatement",
												"src": "1872:34:0"
											},
											{
												"expression": {
													"id": 108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 103,
																"name": "voters",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 23,
																"src": "1916:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$11_storage_$",
																	"typeString": "mapping(address => struct Ballot.Voter storage ref)"
																}
															},
															"id": 105,
															"indexExpression": {
																"id": 104,
																"name": "voter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 74,
																"src": "1923:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "1916:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Voter_$11_storage",
																"typeString": "struct Ballot.Voter storage ref"
															}
														},
														"id": 106,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "1930:6:0",
														"memberName": "weight",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 4,
														"src": "1916:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 107,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1939:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "1916:24:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 109,
												"nodeType": "ExpressionStatement",
												"src": "1916:24:0"
											}
										]
									},
									"documentation": {
										"id": 72,
										"nodeType": "StructuredDocumentation",
										"src": "1442:145:0",
										"text": " @dev Give 'voter' the right to vote on this ballot. May only be called by 'chairperson'.\n @param voter address of voter"
									},
									"functionSelector": "9e7b8d61",
									"id": 111,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "giveRightToVote",
									"nameLocation": "1601:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "voter",
												"nameLocation": "1625:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "1617:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 73,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1617:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1616:15:0"
									},
									"returnParameters": {
										"id": 76,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1639:0:0"
									},
									"scope": 316,
									"src": "1592:355:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 206,
										"nodeType": "Block",
										"src": "2108:870:0",
										"statements": [
											{
												"assignments": [
													119
												],
												"declarations": [
													{
														"constant": false,
														"id": 119,
														"mutability": "mutable",
														"name": "sender",
														"nameLocation": "2132:6:0",
														"nodeType": "VariableDeclaration",
														"scope": 206,
														"src": "2118:20:0",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Voter_$11_storage_ptr",
															"typeString": "struct Ballot.Voter"
														},
														"typeName": {
															"id": 118,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 117,
																"name": "Voter",
																"nameLocations": [
																	"2118:5:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 11,
																"src": "2118:5:0"
															},
															"referencedDeclaration": 11,
															"src": "2118:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Voter_$11_storage_ptr",
																"typeString": "struct Ballot.Voter"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 124,
												"initialValue": {
													"baseExpression": {
														"id": 120,
														"name": "voters",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 23,
														"src": "2141:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$11_storage_$",
															"typeString": "mapping(address => struct Ballot.Voter storage ref)"
														}
													},
													"id": 123,
													"indexExpression": {
														"expression": {
															"id": 121,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "2148:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 122,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2152:6:0",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "2148:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2141:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Voter_$11_storage",
														"typeString": "struct Ballot.Voter storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2118:41:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 128,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "2177:13:0",
															"subExpression": {
																"expression": {
																	"id": 126,
																	"name": "sender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 119,
																	"src": "2178:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Voter_$11_storage_ptr",
																		"typeString": "struct Ballot.Voter storage pointer"
																	}
																},
																"id": 127,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2185:5:0",
																"memberName": "voted",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 6,
																"src": "2178:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "596f7520616c726561647920766f7465642e",
															"id": 129,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2192:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_657c6119c4ed567c60278fba62242b17c2fedf38962e651040dabfb3c9e15a5f",
																"typeString": "literal_string \"You already voted.\""
															},
															"value": "You already voted."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_657c6119c4ed567c60278fba62242b17c2fedf38962e651040dabfb3c9e15a5f",
																"typeString": "literal_string \"You already voted.\""
															}
														],
														"id": 125,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2169:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 130,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2169:44:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 131,
												"nodeType": "ExpressionStatement",
												"src": "2169:44:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 136,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 133,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 114,
																"src": "2231:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"expression": {
																	"id": 134,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2237:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 135,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2241:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2237:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2231:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "53656c662d64656c65676174696f6e20697320646973616c6c6f7765642e",
															"id": 137,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2249:32:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f37bf1aca80f8fa291a40f639db6aeaa1425ceb0e8c61c8648f0e2efa282a947",
																"typeString": "literal_string \"Self-delegation is disallowed.\""
															},
															"value": "Self-delegation is disallowed."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f37bf1aca80f8fa291a40f639db6aeaa1425ceb0e8c61c8648f0e2efa282a947",
																"typeString": "literal_string \"Self-delegation is disallowed.\""
															}
														],
														"id": 132,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2223:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2223:59:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 139,
												"nodeType": "ExpressionStatement",
												"src": "2223:59:0"
											},
											{
												"body": {
													"id": 164,
													"nodeType": "Block",
													"src": "2335:181:0",
													"statements": [
														{
															"expression": {
																"id": 154,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 149,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 114,
																	"src": "2349:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"baseExpression": {
																			"id": 150,
																			"name": "voters",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 23,
																			"src": "2354:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$11_storage_$",
																				"typeString": "mapping(address => struct Ballot.Voter storage ref)"
																			}
																		},
																		"id": 152,
																		"indexExpression": {
																			"id": 151,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 114,
																			"src": "2361:2:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "2354:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Voter_$11_storage",
																			"typeString": "struct Ballot.Voter storage ref"
																		}
																	},
																	"id": 153,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2365:8:0",
																	"memberName": "delegate",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 8,
																	"src": "2354:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "2349:24:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 155,
															"nodeType": "ExpressionStatement",
															"src": "2349:24:0"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		"id": 160,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 157,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 114,
																			"src": "2459:2:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"expression": {
																				"id": 158,
																				"name": "msg",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967281,
																				"src": "2465:3:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_message",
																					"typeString": "msg"
																				}
																			},
																			"id": 159,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "2469:6:0",
																			"memberName": "sender",
																			"nodeType": "MemberAccess",
																			"src": "2465:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"src": "2459:16:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "466f756e64206c6f6f7020696e2064656c65676174696f6e2e",
																		"id": 161,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2477:27:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_8bd75322489f7ff7ab0b18506f4dcde935a32eca2a506b00f4d21b0becfa093c",
																			"typeString": "literal_string \"Found loop in delegation.\""
																		},
																		"value": "Found loop in delegation."
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_8bd75322489f7ff7ab0b18506f4dcde935a32eca2a506b00f4d21b0becfa093c",
																			"typeString": "literal_string \"Found loop in delegation.\""
																		}
																	],
																	"id": 156,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "2451:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 162,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2451:54:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 163,
															"nodeType": "ExpressionStatement",
															"src": "2451:54:0"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 148,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"baseExpression": {
																"id": 140,
																"name": "voters",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 23,
																"src": "2300:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$11_storage_$",
																	"typeString": "mapping(address => struct Ballot.Voter storage ref)"
																}
															},
															"id": 142,
															"indexExpression": {
																"id": 141,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 114,
																"src": "2307:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2300:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Voter_$11_storage",
																"typeString": "struct Ballot.Voter storage ref"
															}
														},
														"id": 143,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2311:8:0",
														"memberName": "delegate",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 8,
														"src": "2300:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 146,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2331:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 145,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2323:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 144,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2323:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 147,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2323:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2300:33:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 165,
												"nodeType": "WhileStatement",
												"src": "2293:223:0"
											},
											{
												"expression": {
													"id": 170,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 166,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 119,
															"src": "2525:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Voter_$11_storage_ptr",
																"typeString": "struct Ballot.Voter storage pointer"
															}
														},
														"id": 168,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "2532:5:0",
														"memberName": "voted",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 6,
														"src": "2525:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 169,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2540:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "2525:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 171,
												"nodeType": "ExpressionStatement",
												"src": "2525:19:0"
											},
											{
												"expression": {
													"id": 176,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 172,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 119,
															"src": "2554:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Voter_$11_storage_ptr",
																"typeString": "struct Ballot.Voter storage pointer"
															}
														},
														"id": 174,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "2561:8:0",
														"memberName": "delegate",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 8,
														"src": "2554:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 175,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 114,
														"src": "2572:2:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2554:20:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 177,
												"nodeType": "ExpressionStatement",
												"src": "2554:20:0"
											},
											{
												"assignments": [
													180
												],
												"declarations": [
													{
														"constant": false,
														"id": 180,
														"mutability": "mutable",
														"name": "delegate_",
														"nameLocation": "2598:9:0",
														"nodeType": "VariableDeclaration",
														"scope": 206,
														"src": "2584:23:0",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Voter_$11_storage_ptr",
															"typeString": "struct Ballot.Voter"
														},
														"typeName": {
															"id": 179,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 178,
																"name": "Voter",
																"nameLocations": [
																	"2584:5:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 11,
																"src": "2584:5:0"
															},
															"referencedDeclaration": 11,
															"src": "2584:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Voter_$11_storage_ptr",
																"typeString": "struct Ballot.Voter"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 184,
												"initialValue": {
													"baseExpression": {
														"id": 181,
														"name": "voters",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 23,
														"src": "2610:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$11_storage_$",
															"typeString": "mapping(address => struct Ballot.Voter storage ref)"
														}
													},
													"id": 183,
													"indexExpression": {
														"id": 182,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 114,
														"src": "2617:2:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2610:10:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Voter_$11_storage",
														"typeString": "struct Ballot.Voter storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2584:36:0"
											},
											{
												"condition": {
													"expression": {
														"id": 185,
														"name": "delegate_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 180,
														"src": "2634:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Voter_$11_storage_ptr",
															"typeString": "struct Ballot.Voter storage pointer"
														}
													},
													"id": 186,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "2644:5:0",
													"memberName": "voted",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 6,
													"src": "2634:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 204,
													"nodeType": "Block",
													"src": "2831:141:0",
													"statements": [
														{
															"expression": {
																"id": 202,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 197,
																		"name": "delegate_",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 180,
																		"src": "2928:9:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Voter_$11_storage_ptr",
																			"typeString": "struct Ballot.Voter storage pointer"
																		}
																	},
																	"id": 199,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "2938:6:0",
																	"memberName": "weight",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 4,
																	"src": "2928:16:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"expression": {
																		"id": 200,
																		"name": "sender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 119,
																		"src": "2948:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Voter_$11_storage_ptr",
																			"typeString": "struct Ballot.Voter storage pointer"
																		}
																	},
																	"id": 201,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2955:6:0",
																	"memberName": "weight",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 4,
																	"src": "2948:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2928:33:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 203,
															"nodeType": "ExpressionStatement",
															"src": "2928:33:0"
														}
													]
												},
												"id": 205,
												"nodeType": "IfStatement",
												"src": "2630:342:0",
												"trueBody": {
													"id": 196,
													"nodeType": "Block",
													"src": "2651:174:0",
													"statements": [
														{
															"expression": {
																"id": 194,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"baseExpression": {
																			"id": 187,
																			"name": "proposals",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 27,
																			"src": "2762:9:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_struct$_Proposal_$16_storage_$dyn_storage",
																				"typeString": "struct Ballot.Proposal storage ref[] storage ref"
																			}
																		},
																		"id": 190,
																		"indexExpression": {
																			"expression": {
																				"id": 188,
																				"name": "delegate_",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 180,
																				"src": "2772:9:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Voter_$11_storage_ptr",
																					"typeString": "struct Ballot.Voter storage pointer"
																				}
																			},
																			"id": 189,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "2782:4:0",
																			"memberName": "vote",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 10,
																			"src": "2772:14:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "2762:25:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Proposal_$16_storage",
																			"typeString": "struct Ballot.Proposal storage ref"
																		}
																	},
																	"id": 191,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "2788:9:0",
																	"memberName": "voteCount",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 15,
																	"src": "2762:35:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"expression": {
																		"id": 192,
																		"name": "sender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 119,
																		"src": "2801:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Voter_$11_storage_ptr",
																			"typeString": "struct Ballot.Voter storage pointer"
																		}
																	},
																	"id": 193,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2808:6:0",
																	"memberName": "weight",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 4,
																	"src": "2801:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2762:52:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 195,
															"nodeType": "ExpressionStatement",
															"src": "2762:52:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 112,
										"nodeType": "StructuredDocumentation",
										"src": "1953:113:0",
										"text": " @dev Delegate your vote to the voter 'to'.\n @param to address to which vote is delegated"
									},
									"functionSelector": "5c19a95c",
									"id": 207,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "delegate",
									"nameLocation": "2080:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 115,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 114,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2097:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 207,
												"src": "2089:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 113,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2089:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2088:12:0"
									},
									"returnParameters": {
										"id": 116,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2108:0:0"
									},
									"scope": 316,
									"src": "2071:907:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 256,
										"nodeType": "Block",
										"src": "3202:422:0",
										"statements": [
											{
												"assignments": [
													215
												],
												"declarations": [
													{
														"constant": false,
														"id": 215,
														"mutability": "mutable",
														"name": "sender",
														"nameLocation": "3226:6:0",
														"nodeType": "VariableDeclaration",
														"scope": 256,
														"src": "3212:20:0",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Voter_$11_storage_ptr",
															"typeString": "struct Ballot.Voter"
														},
														"typeName": {
															"id": 214,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 213,
																"name": "Voter",
																"nameLocations": [
																	"3212:5:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 11,
																"src": "3212:5:0"
															},
															"referencedDeclaration": 11,
															"src": "3212:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Voter_$11_storage_ptr",
																"typeString": "struct Ballot.Voter"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 220,
												"initialValue": {
													"baseExpression": {
														"id": 216,
														"name": "voters",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 23,
														"src": "3235:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$11_storage_$",
															"typeString": "mapping(address => struct Ballot.Voter storage ref)"
														}
													},
													"id": 219,
													"indexExpression": {
														"expression": {
															"id": 217,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "3242:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 218,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3246:6:0",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "3242:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3235:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Voter_$11_storage",
														"typeString": "struct Ballot.Voter storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3212:41:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 225,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 222,
																	"name": "sender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 215,
																	"src": "3271:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Voter_$11_storage_ptr",
																		"typeString": "struct Ballot.Voter storage pointer"
																	}
																},
																"id": 223,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3278:6:0",
																"memberName": "weight",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 4,
																"src": "3271:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"hexValue": "30",
																"id": 224,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3288:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "3271:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "486173206e6f20726967687420746f20766f7465",
															"id": 226,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3291:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0dc527e8fa9b76c996eb5eda9ddb749b21540f5509781b94e1e37f7027e7f50e",
																"typeString": "literal_string \"Has no right to vote\""
															},
															"value": "Has no right to vote"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0dc527e8fa9b76c996eb5eda9ddb749b21540f5509781b94e1e37f7027e7f50e",
																"typeString": "literal_string \"Has no right to vote\""
															}
														],
														"id": 221,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3263:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 227,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3263:51:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 228,
												"nodeType": "ExpressionStatement",
												"src": "3263:51:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 232,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "3332:13:0",
															"subExpression": {
																"expression": {
																	"id": 230,
																	"name": "sender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 215,
																	"src": "3333:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Voter_$11_storage_ptr",
																		"typeString": "struct Ballot.Voter storage pointer"
																	}
																},
																"id": 231,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3340:5:0",
																"memberName": "voted",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 6,
																"src": "3333:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416c726561647920766f7465642e",
															"id": 233,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3347:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_56aab92b7164a4ea72a098d2d95a5e763b71d07f265e8d46fc7240404017fa84",
																"typeString": "literal_string \"Already voted.\""
															},
															"value": "Already voted."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_56aab92b7164a4ea72a098d2d95a5e763b71d07f265e8d46fc7240404017fa84",
																"typeString": "literal_string \"Already voted.\""
															}
														],
														"id": 229,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3324:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 234,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3324:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 235,
												"nodeType": "ExpressionStatement",
												"src": "3324:40:0"
											},
											{
												"expression": {
													"id": 240,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 236,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 215,
															"src": "3374:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Voter_$11_storage_ptr",
																"typeString": "struct Ballot.Voter storage pointer"
															}
														},
														"id": 238,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "3381:5:0",
														"memberName": "voted",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 6,
														"src": "3374:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 239,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3389:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "3374:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 241,
												"nodeType": "ExpressionStatement",
												"src": "3374:19:0"
											},
											{
												"expression": {
													"id": 246,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 242,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 215,
															"src": "3403:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Voter_$11_storage_ptr",
																"typeString": "struct Ballot.Voter storage pointer"
															}
														},
														"id": 244,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "3410:4:0",
														"memberName": "vote",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 10,
														"src": "3403:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 245,
														"name": "proposal",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 210,
														"src": "3417:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3403:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 247,
												"nodeType": "ExpressionStatement",
												"src": "3403:22:0"
											},
											{
												"expression": {
													"id": 254,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 248,
																"name": "proposals",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 27,
																"src": "3571:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_struct$_Proposal_$16_storage_$dyn_storage",
																	"typeString": "struct Ballot.Proposal storage ref[] storage ref"
																}
															},
															"id": 250,
															"indexExpression": {
																"id": 249,
																"name": "proposal",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 210,
																"src": "3581:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3571:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Proposal_$16_storage",
																"typeString": "struct Ballot.Proposal storage ref"
															}
														},
														"id": 251,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "3591:9:0",
														"memberName": "voteCount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 15,
														"src": "3571:29:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"expression": {
															"id": 252,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 215,
															"src": "3604:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Voter_$11_storage_ptr",
																"typeString": "struct Ballot.Voter storage pointer"
															}
														},
														"id": 253,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3611:6:0",
														"memberName": "weight",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 4,
														"src": "3604:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3571:46:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 255,
												"nodeType": "ExpressionStatement",
												"src": "3571:46:0"
											}
										]
									},
									"documentation": {
										"id": 208,
										"nodeType": "StructuredDocumentation",
										"src": "2984:177:0",
										"text": " @dev Give your vote (including votes delegated to you) to proposal 'proposals[proposal].name'.\n @param proposal index of proposal in the proposals array"
									},
									"functionSelector": "0121b93f",
									"id": 257,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "vote",
									"nameLocation": "3175:4:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 211,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 210,
												"mutability": "mutable",
												"name": "proposal",
												"nameLocation": "3185:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 257,
												"src": "3180:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 209,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "3180:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3179:15:0"
									},
									"returnParameters": {
										"id": 212,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3202:0:0"
									},
									"scope": 316,
									"src": "3166:458:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 299,
										"nodeType": "Block",
										"src": "3897:278:0",
										"statements": [
											{
												"assignments": [
													264
												],
												"declarations": [
													{
														"constant": false,
														"id": 264,
														"mutability": "mutable",
														"name": "winningVoteCount",
														"nameLocation": "3912:16:0",
														"nodeType": "VariableDeclaration",
														"scope": 299,
														"src": "3907:21:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 263,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "3907:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 266,
												"initialValue": {
													"hexValue": "30",
													"id": 265,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3931:1:0",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3907:25:0"
											},
											{
												"body": {
													"id": 297,
													"nodeType": "Block",
													"src": "3986:183:0",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 283,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 278,
																			"name": "proposals",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 27,
																			"src": "4004:9:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_struct$_Proposal_$16_storage_$dyn_storage",
																				"typeString": "struct Ballot.Proposal storage ref[] storage ref"
																			}
																		},
																		"id": 280,
																		"indexExpression": {
																			"id": 279,
																			"name": "p",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 268,
																			"src": "4014:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "4004:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Proposal_$16_storage",
																			"typeString": "struct Ballot.Proposal storage ref"
																		}
																	},
																	"id": 281,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "4017:9:0",
																	"memberName": "voteCount",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 15,
																	"src": "4004:22:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"id": 282,
																	"name": "winningVoteCount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 264,
																	"src": "4029:16:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4004:41:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 296,
															"nodeType": "IfStatement",
															"src": "4000:159:0",
															"trueBody": {
																"id": 295,
																"nodeType": "Block",
																"src": "4047:112:0",
																"statements": [
																	{
																		"expression": {
																			"id": 289,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 284,
																				"name": "winningVoteCount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 264,
																				"src": "4065:16:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"expression": {
																					"baseExpression": {
																						"id": 285,
																						"name": "proposals",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 27,
																						"src": "4084:9:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_array$_t_struct$_Proposal_$16_storage_$dyn_storage",
																							"typeString": "struct Ballot.Proposal storage ref[] storage ref"
																						}
																					},
																					"id": 287,
																					"indexExpression": {
																						"id": 286,
																						"name": "p",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 268,
																						"src": "4094:1:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "4084:12:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Proposal_$16_storage",
																						"typeString": "struct Ballot.Proposal storage ref"
																					}
																				},
																				"id": 288,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "4097:9:0",
																				"memberName": "voteCount",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 15,
																				"src": "4084:22:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "4065:41:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 290,
																		"nodeType": "ExpressionStatement",
																		"src": "4065:41:0"
																	},
																	{
																		"expression": {
																			"id": 293,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 291,
																				"name": "winningProposal_",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 261,
																				"src": "4124:16:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 292,
																				"name": "p",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 268,
																				"src": "4143:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "4124:20:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 294,
																		"nodeType": "ExpressionStatement",
																		"src": "4124:20:0"
																	}
																]
															}
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 274,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 271,
														"name": "p",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 268,
														"src": "3959:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 272,
															"name": "proposals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 27,
															"src": "3963:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_Proposal_$16_storage_$dyn_storage",
																"typeString": "struct Ballot.Proposal storage ref[] storage ref"
															}
														},
														"id": 273,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3973:6:0",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "3963:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3959:20:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 298,
												"initializationExpression": {
													"assignments": [
														268
													],
													"declarations": [
														{
															"constant": false,
															"id": 268,
															"mutability": "mutable",
															"name": "p",
															"nameLocation": "3952:1:0",
															"nodeType": "VariableDeclaration",
															"scope": 298,
															"src": "3947:6:0",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 267,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "3947:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 270,
													"initialValue": {
														"hexValue": "30",
														"id": 269,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3956:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "3947:10:0"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 276,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "3981:3:0",
														"subExpression": {
															"id": 275,
															"name": "p",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 268,
															"src": "3981:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 277,
													"nodeType": "ExpressionStatement",
													"src": "3981:3:0"
												},
												"nodeType": "ForStatement",
												"src": "3942:227:0"
											}
										]
									},
									"documentation": {
										"id": 258,
										"nodeType": "StructuredDocumentation",
										"src": "3630:175:0",
										"text": " @dev Computes the winning proposal taking all previous votes into account.\n @return winningProposal_ index of winning proposal in the proposals array"
									},
									"functionSelector": "609ff1bd",
									"id": 300,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "winningProposal",
									"nameLocation": "3819:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 259,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3834:2:0"
									},
									"returnParameters": {
										"id": 262,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 261,
												"mutability": "mutable",
												"name": "winningProposal_",
												"nameLocation": "3875:16:0",
												"nodeType": "VariableDeclaration",
												"scope": 300,
												"src": "3870:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 260,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "3870:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3869:23:0"
									},
									"scope": 316,
									"src": "3810:365:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 314,
										"nodeType": "Block",
										"src": "4446:64:0",
										"statements": [
											{
												"expression": {
													"id": 312,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 306,
														"name": "winnerName_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 304,
														"src": "4456:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"baseExpression": {
																"id": 307,
																"name": "proposals",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 27,
																"src": "4470:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_struct$_Proposal_$16_storage_$dyn_storage",
																	"typeString": "struct Ballot.Proposal storage ref[] storage ref"
																}
															},
															"id": 310,
															"indexExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 308,
																	"name": "winningProposal",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 300,
																	"src": "4480:15:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 309,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4480:17:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4470:28:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Proposal_$16_storage",
																"typeString": "struct Ballot.Proposal storage ref"
															}
														},
														"id": 311,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4499:4:0",
														"memberName": "name",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 13,
														"src": "4470:33:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "4456:47:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 313,
												"nodeType": "ExpressionStatement",
												"src": "4456:47:0"
											}
										]
									},
									"documentation": {
										"id": 301,
										"nodeType": "StructuredDocumentation",
										"src": "4181:180:0",
										"text": " @dev Calls winningProposal() function to get the index of the winner contained in the proposals array and then\n @return winnerName_ the name of the winner"
									},
									"functionSelector": "e2ba53f0",
									"id": 315,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "winnerName",
									"nameLocation": "4375:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 302,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4385:2:0"
									},
									"returnParameters": {
										"id": 305,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 304,
												"mutability": "mutable",
												"name": "winnerName_",
												"nameLocation": "4429:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 315,
												"src": "4421:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 303,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4421:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4420:21:0"
									},
									"scope": 316,
									"src": "4366:144:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 317,
							"src": "157:4355:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "37:4475:0"
				}
			}
		},
		"errors": [],
		"version": "0.8.28",
		"long_version": "0.8.28+commit.7893614a.Emscripten.clang",
		"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8"
	}
}