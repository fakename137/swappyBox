{
	"id": "2825b339e1567ee39e450f26a8303d41",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.28",
	"solcLongVersion": "0.8.28+commit.7893614a",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/SwappyBox/SwappBox.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.8.2 <0.9.0;\n\n\n\ncontract Box {\n    uint256 public deadline;\n    uint256 public initialTime;\n    address payable public owner;\n    bool public isContractFunded;\n    bool public isWithdraw = false;\n\n    event Deposited(address indexed from, uint256 amount, uint256 deadline);\n    event Withdrawn(address indexed to, uint256 amount);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not the owner\");\n        _;\n    }\n\n    function deposit(uint256 _durationInSeconds) external payable {\n        require(!isContractFunded, \"Contract already funded\");\n        require(msg.value > 0, \"Must send ETH\");\n        require(_durationInSeconds > 0, \"Invalid duration\");\n\n        owner = payable(msg.sender);\n        initialTime = block.timestamp;\n        deadline = block.timestamp + _durationInSeconds;\n        isContractFunded = true;\n\n        emit Deposited(msg.sender, msg.value, deadline);\n    }\n\n    function withdraw(address _to, bool isObligation) external onlyOwner {\n        require(block.timestamp >= deadline, \"Deadline not yet reached\");\n\n        uint256 amount = address(this).balance;\n        require(amount > 0 && isWithdraw==false, \"No funds to withdraw\");\n        \n        if(isObligation == true){\n            (bool success, ) = payable(_to).call{value: amount}(\"\");\n            require(success, \"Withdraw failed\");\n            isWithdraw = true;\n            emit Withdrawn(owner, amount);\n        }else{\n            uint extendDeadline = deadline+(3600 *24);\n            require(extendDeadline < block.timestamp);\n            (bool success, ) = payable(_to).call{value: amount}(\"\");\n            require(success, \"Withdraw failed\");\n            isWithdraw = true;\n            emit Withdrawn(owner, amount);\n\n        }\n\n\n    }\n\n    // Fallback to receive ETH\n    receive() external payable {}\n}\n\ncontract SwappyBox{\n\n    Box public box;\n    struct BidTrack{\n        uint bidInitialTime;\n        uint bidEndTime;\n        uint totalBid;\n        uint basePrice;\n        uint lastPrice;\n        address currentWinner;\n        address poolInitiator;\n    }\n\n    uint constant SLOPE = 0.3 * 1e18;\n  \n    mapping(address=>address[]) public boxes;\n    mapping(address=>BidTrack) public boxData;\n    function createYourBox() public {\n        Box bx = new Box();\n        boxes[msg.sender].push(address(bx));\n\n    }\n\n    function depositToBox(uint _index, uint _deadline) public payable {\n        require(_index < boxes[msg.sender].length, \"Invalid box index\");\n        require(msg.value > 0, \"deposit must be greater than 0\");\n        address boxAddress = boxes[msg.sender][_index];\n        Box(payable(boxAddress)).deposit{value: msg.value}(_deadline);\n        uint256 basePrice = (msg.value * 10) / 100;\n        boxData[boxAddress] = BidTrack(block.timestamp,block.timestamp+3600,0,basePrice,basePrice,msg.sender,msg.sender);\n    }\n\n    function obligate(address _contract) public payable{\n        require(boxData[_contract].currentWinner == msg.sender,\"you are not bid winner\");\n        uint depositedAmount = address(_contract).balance;\n        uint paidBidAmount = boxData[_contract].basePrice;\n        uint amountToTransfer = depositedAmount - paidBidAmount;\n        require(amountToTransfer == msg.value,\"obligation reverted\");\n        (bool success,)=payable(boxData[_contract].poolInitiator).call{value:amountToTransfer}(\"\"); \n        require(success,\"failed\");\n        Box(payable(_contract)).withdraw(msg.sender,true);\n    }\n\n    function bid(address _contract,uint bidAmount) public payable{\n        require(boxData[_contract].currentWinner != msg.sender,\"you already own\");\n        uint bestPrice = getPrice(_contract);\n        if(bestPrice <= bidAmount && boxData[_contract].lastPrice < bidAmount){\n            require(msg.value == bidAmount);\n            uint initiatorFees = (bidAmount * 1)/100;\n            uint refund = bidAmount - initiatorFees;\n            (bool success,)=payable(boxData[_contract].currentWinner).call{value:refund}(\"\"); \n            require(success,\"failed\");\n            (bool success2,)=payable(boxData[_contract].poolInitiator).call{value:initiatorFees}(\"\"); \n            require(success2,\"failed\");\n            boxData[_contract].currentWinner = msg.sender;\n            boxData[_contract].lastPrice = bidAmount;\n            boxData[_contract].totalBid++;\n            boxData[_contract].bidEndTime = block.timestamp+1500;\n        \n\n        }\n\n        require(boxData[_contract].bidEndTime < block.timestamp);\n        boxData[_contract].totalBid = 0;\n    }\n    \n    function withdraw(address _contract) public{\n        address initiator = boxData[_contract].poolInitiator;\n        require(initiator == msg.sender,\"you are not initiator\");\n        Box(payable(_contract)).withdraw(msg.sender,false);\n\n    } \n\n\n    function getPrice(address _contract) public view returns(uint256){\n        uint demand = boxData[_contract].totalBid;\n        return SLOPE * demand + boxData[_contract].basePrice;\n    }\n\n    \n\n    function getBoxData(address _contract) public view returns(BidTrack memory){\n        return boxData[_contract];\n    }\n\n\n    function getBalance(address _contract) public view returns(uint){\n        return address(_contract).balance;\n    }\n\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.deployedBytecode",
						"evm.methodIdentifiers"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"contracts/SwappyBox/SwappBox.sol": {
				"Box": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "Deposited",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "Withdrawn",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "deadline",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_durationInSeconds",
									"type": "uint256"
								}
							],
							"name": "deposit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "initialTime",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "isContractFunded",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "isWithdraw",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address payable",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "isObligation",
									"type": "bool"
								}
							],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"metadata": {
						"optimizer_settings": {
							"is_debug_logging_enabled": false,
							"is_fallback_to_size_enabled": false,
							"is_verify_each_enabled": false,
							"level_back_end": "Aggressive",
							"level_middle_end": "Aggressive",
							"level_middle_end_size": "Zero"
						},
						"revive_pallet_version": null,
						"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8",
						"solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_durationInSeconds\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isContractFunded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isObligation\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwappyBox/SwappBox.sol\":\"Box\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwappyBox/SwappBox.sol\":{\"keccak256\":\"0xb0d3be5cc6f1895238c628238b95c77aa5dee66dba410ff325d2a040733e122e\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://23a920af4d08ec52bcd7024b6c8c3ae20fc9db02af168f421d360465d1582a54\",\"dweb:/ipfs/QmU4QpbdkqCzQV3McXtTDQyMzegk48xsotnWA5pPcjKUp1\"]}},\"version\":1}",
						"solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
					},
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					},
					"storageLayout": {
						"storage": [
							{
								"astId": 3,
								"contract": "contracts/SwappyBox/SwappBox.sol:Box",
								"label": "deadline",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 5,
								"contract": "contracts/SwappyBox/SwappBox.sol:Box",
								"label": "initialTime",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 7,
								"contract": "contracts/SwappyBox/SwappBox.sol:Box",
								"label": "owner",
								"offset": 0,
								"slot": "2",
								"type": "t_address_payable"
							},
							{
								"astId": 9,
								"contract": "contracts/SwappyBox/SwappBox.sol:Box",
								"label": "isContractFunded",
								"offset": 20,
								"slot": "2",
								"type": "t_bool"
							},
							{
								"astId": 12,
								"contract": "contracts/SwappyBox/SwappBox.sol:Box",
								"label": "isWithdraw",
								"offset": 21,
								"slot": "2",
								"type": "t_bool"
							}
						],
						"types": {
							"t_address_payable": {
								"encoding": "inplace",
								"label": "address payable",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"evm": {
						"assembly": "// RO data = 0/0 bytes\n// RW data = 64/65616 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 7705\n// Code size = 23787 bytes\n\n      : @0 (gas: 2)\n     0: i32 a2 = a0 >> 0x10\n     3: jump @6 if a2 != 0\n      : @1 (gas: 2)\n     6: a2 = 0x10001\n    11: jump @6 if a1 >=u a2\n      : @2 (gas: 4)\n    14: a1 = a1 + a0\n    17: i32 a1 = a1 + 0x1f\n    20: a1 = a1 & 0xffffffffffffffe0\n    23: jump @7 if a1 >=u 65537\n      : @3 (gas: 2)\n    29: a3 = i32 [0x20040]\n    34: jump @5 if a3 >=u a1\n      : @4 (gas: 4)\n    37: u32 [0x20040] = a1\n    42: a1 = 0x20050\n    47: a0 = a0 + a1\n    50: ret\n      : @5 (gas: 3)\n    52: a1 = 0x20050\n    57: a0 = a0 + a1\n    60: ret\n      : @6 (gas: 1)\n    62: trap\n      : @7 (gas: 1)\n    63: trap\n      : @8 (gas: 13)\n    64: sp = sp + 0xffffffffffffffd8\n    67: u64 [sp + 0x20] = ra\n    70: u64 [sp + 0x18] = s0\n    73: u64 [sp + 0x10] = s1\n    76: a2 = u64 [a1]\n    78: u64 [sp + 0x8] = a2\n    81: a2 = u64 [a1 + 0x8]\n    84: u64 [sp] = a2\n    86: s0 = u64 [a1 + 0x10]\n    89: s1 = u64 [a1 + 0x18]\n    92: i32 a0 = a0 + 0\n    94: a1 = 0x20\n    97: ra = 2, jump @0\n      : @9 [@dyn 1] (gas: 71)\n   101: a1 = reverse s1\n   103: a2 = reverse s0\n   105: a3 = u64 [sp]\n   107: a3 = reverse a3\n   109: a4 = u64 [sp + 0x8]\n   112: a4 = reverse a4\n   114: u8 [a0 + 0x18] = a4\n   117: u8 [a0 + 0x10] = a3\n   120: u8 [a0 + 0x8] = a2\n   123: u8 [a0] = a1\n   125: a5 = a4 >> 0x38\n   128: u8 [a0 + 0x1f] = a5\n   131: a5 = a4 >> 0x30\n   134: u8 [a0 + 0x1e] = a5\n   137: a5 = a4 >> 0x28\n   140: u8 [a0 + 0x1d] = a5\n   143: a5 = a4 >> 0x20\n   146: u8 [a0 + 0x1c] = a5\n   149: a5 = a4 >> 0x18\n   152: u8 [a0 + 0x1b] = a5\n   155: a5 = a4 >> 0x10\n   158: u8 [a0 + 0x1a] = a5\n   161: a4 = a4 >> 0x8\n   164: u8 [a0 + 0x19] = a4\n   167: a4 = a3 >> 0x38\n   170: u8 [a0 + 0x17] = a4\n   173: a4 = a3 >> 0x30\n   176: u8 [a0 + 0x16] = a4\n   179: a4 = a3 >> 0x28\n   182: u8 [a0 + 0x15] = a4\n   185: a4 = a3 >> 0x20\n   188: u8 [a0 + 0x14] = a4\n   191: a4 = a3 >> 0x18\n   194: u8 [a0 + 0x13] = a4\n   197: a4 = a3 >> 0x10\n   200: u8 [a0 + 0x12] = a4\n   203: a3 = a3 >> 0x8\n   206: u8 [a0 + 0x11] = a3\n   209: a3 = a2 >> 0x38\n   212: u8 [a0 + 0xf] = a3\n   215: a3 = a2 >> 0x30\n   218: u8 [a0 + 0xe] = a3\n   221: a3 = a2 >> 0x28\n   224: u8 [a0 + 0xd] = a3\n   227: a3 = a2 >> 0x20\n   230: u8 [a0 + 0xc] = a3\n   233: a3 = a2 >> 0x18\n   236: u8 [a0 + 0xb] = a3\n   239: a3 = a2 >> 0x10\n   242: u8 [a0 + 0xa] = a3\n   245: a2 = a2 >> 0x8\n   248: u8 [a0 + 0x9] = a2\n   251: a2 = a1 >> 0x38\n   254: u8 [a0 + 0x7] = a2\n   257: a2 = a1 >> 0x30\n   260: u8 [a0 + 0x6] = a2\n   263: a2 = a1 >> 0x28\n   266: u8 [a0 + 0x5] = a2\n   269: a2 = a1 >> 0x20\n   272: u8 [a0 + 0x4] = a2\n   275: a2 = a1 >> 0x18\n   278: u8 [a0 + 0x3] = a2\n   281: a2 = a1 >> 0x10\n   284: u8 [a0 + 0x2] = a2\n   287: a1 = a1 >> 0x8\n   290: u8 [a0 + 0x1] = a1\n   293: ra = u64 [sp + 0x20]\n   296: s0 = u64 [sp + 0x18]\n   299: s1 = u64 [sp + 0x10]\n   302: sp = sp + 0x28\n   305: ret\n      : @10 (gas: 6)\n   307: sp = sp + 0xfffffffffffffff0\n   310: u64 [sp + 0x8] = ra\n   313: u64 [sp] = s0\n   315: s0 = a0 & 0x1\n   318: ecalli 5 // 'call_data_size'\n   320: fallthrough\n      : @11 (gas: 2)\n   321: u32 [0x20044] = a0\n   326: jump @13 if s0 == 0\n      : @12 (gas: 1)\n   329: ra = 4, jump @14\n      : @13 [@dyn 2] (gas: 1)\n   333: ra = 6, jump @28\n      : @14 [@dyn 3] (gas: 9)\n   338: sp = sp + 0xffffffffffffff60\n   342: u64 [sp + 0x98] = ra\n   346: u64 [sp + 0x90] = s0\n   350: u64 [sp + 0x88] = s1\n   354: s0 = sp + 0xa0\n   358: sp = sp & 0xffffffffffffffe0\n   361: a0 = 0x40\n   364: a1 = 0x20\n   367: ra = 8, jump @0\n      : @15 [@dyn 4] (gas: 39)\n   372: u8 [a0 + 31] = 0x80\n   377: u8 [a0 + 30] = 0\n   380: u8 [a0 + 29] = 0\n   383: u8 [a0 + 28] = 0\n   386: u8 [a0 + 27] = 0\n   389: u8 [a0 + 26] = 0\n   392: u8 [a0 + 25] = 0\n   395: u8 [a0 + 24] = 0\n   398: u8 [a0 + 23] = 0\n   401: u8 [a0 + 22] = 0\n   404: u8 [a0 + 21] = 0\n   407: u8 [a0 + 20] = 0\n   410: u8 [a0 + 19] = 0\n   413: u8 [a0 + 18] = 0\n   416: u8 [a0 + 17] = 0\n   419: u8 [a0 + 16] = 0\n   422: u8 [a0 + 15] = 0\n   425: u8 [a0 + 14] = 0\n   428: u8 [a0 + 13] = 0\n   431: u8 [a0 + 12] = 0\n   434: u8 [a0 + 11] = 0\n   437: u8 [a0 + 10] = 0\n   440: u8 [a0 + 9] = 0\n   443: u8 [a0 + 8] = 0\n   446: u8 [a0 + 7] = 0\n   449: u8 [a0 + 6] = 0\n   452: u8 [a0 + 5] = 0\n   455: u8 [a0 + 4] = 0\n   458: u8 [a0 + 3] = 0\n   461: u8 [a0 + 2] = 0\n   464: u8 [a0 + 1] = 0\n   467: u8 [a0 + 0] = 0\n   469: u64 [sp + 24] = 0\n   472: u64 [sp + 0] = 0\n   474: u64 [sp + 8] = 0\n   477: u64 [sp + 16] = 0\n   480: i32 a0 = sp + 0\n   482: ecalli 16 // 'value_transferred'\n   484: fallthrough\n      : @16 (gas: 8)\n   485: a0 = u64 [sp + 0x10]\n   488: a1 = u64 [sp + 0x18]\n   491: a2 = u64 [sp + 0x8]\n   494: a3 = u64 [sp]\n   496: a1 = a1 | a2\n   499: a0 = a0 | a3\n   502: a0 = a0 | a1\n   505: jump @20 if a0 != 0\n      : @17 (gas: 39)\n   509: u64 [sp + 88] = 0\n   512: u64 [sp + 80] = 0\n   515: u64 [sp + 72] = 0\n   518: s1 = 0x2\n   521: u64 [sp + 0x40] = s1\n   524: u64 [sp + 120] = 0\n   527: u64 [sp + 112] = 0\n   530: u64 [sp + 104] = 0\n   533: u64 [sp + 96] = 0\n   536: u32 [sp + 32] = 0x20\n   540: i32 a1 = sp + 0x40\n   543: i32 a3 = sp + 0x60\n   546: i32 a4 = sp + 0x20\n   549: a2 = 0xffffffffffffffff\n   552: a0 = 0\n   554: ecalli 8 // 'get_storage'\n   556: a0 = u64 [sp + 0x60]\n   559: a1 = u64 [sp + 0x68]\n   562: a2 = u64 [sp + 0x70]\n   565: a3 = u64 [sp + 0x78]\n   568: a4 = 0xffff00ffffffffff\n   578: a2 = a2 & a4\n   581: u64 [sp + 88] = 0\n   584: u64 [sp + 80] = 0\n   587: u64 [sp + 72] = 0\n   590: u64 [sp + 0x40] = s1\n   593: u64 [sp + 0x78] = a3\n   596: u64 [sp + 0x70] = a2\n   599: u64 [sp + 0x68] = a1\n   602: u64 [sp + 0x60] = a0\n   605: i32 a1 = sp + 0x40\n   608: i32 a3 = sp + 0x60\n   611: a2 = 0xffffffffffffffff\n   614: a4 = 0x20\n   617: a0 = 0\n   619: ecalli 15 // 'set_storage'\n   621: a0 = 0x40\n   624: a1 = 0x20\n   627: ra = 10, jump @0\n      : @18 [@dyn 5] (gas: 100)\n   632: a1 = u8 [a0 + 0x11]\n   635: a2 = u8 [a0 + 0x10]\n   638: a3 = u8 [a0 + 0x12]\n   641: a4 = u8 [a0 + 0x13]\n   644: a1 = a1 << 0x8\n   647: a1 = a1 | a2\n   650: a3 = a3 << 0x10\n   653: a4 = a4 << 0x18\n   656: a3 = a3 | a4\n   659: a1 = a1 | a3\n   662: a2 = u8 [a0 + 0x15]\n   665: a3 = u8 [a0 + 0x14]\n   668: a4 = u8 [a0 + 0x16]\n   671: a5 = u8 [a0 + 0x17]\n   674: a2 = a2 << 0x8\n   677: a2 = a2 | a3\n   680: a4 = a4 << 0x10\n   683: a5 = a5 << 0x18\n   686: a4 = a4 | a5\n   689: a2 = a2 | a4\n   692: a2 = a2 << 0x20\n   695: t0 = a2 | a1\n   698: a2 = u8 [a0 + 0x1]\n   701: a3 = u8 [a0]\n   703: a4 = u8 [a0 + 0x2]\n   706: a5 = u8 [a0 + 0x3]\n   709: a2 = a2 << 0x8\n   712: a2 = a2 | a3\n   715: a4 = a4 << 0x10\n   718: a5 = a5 << 0x18\n   721: a4 = a4 | a5\n   724: a2 = a2 | a4\n   727: a3 = u8 [a0 + 0x5]\n   730: a4 = u8 [a0 + 0x4]\n   733: a5 = u8 [a0 + 0x6]\n   736: s1 = u8 [a0 + 0x7]\n   739: a3 = a3 << 0x8\n   742: a3 = a3 | a4\n   745: a5 = a5 << 0x10\n   748: s1 = s1 << 0x18\n   751: a5 = a5 | s1\n   754: a3 = a3 | a5\n   757: a3 = a3 << 0x20\n   760: a2 = a2 | a3\n   763: a3 = u8 [a0 + 0x19]\n   766: a4 = u8 [a0 + 0x18]\n   769: a5 = u8 [a0 + 0x1a]\n   772: s1 = u8 [a0 + 0x1b]\n   775: a3 = a3 << 0x8\n   778: a3 = a3 | a4\n   781: a5 = a5 << 0x10\n   784: s1 = s1 << 0x18\n   787: a5 = a5 | s1\n   790: a3 = a3 | a5\n   793: a4 = u8 [a0 + 0x1d]\n   796: a5 = u8 [a0 + 0x1c]\n   799: s1 = u8 [a0 + 0x1e]\n   802: a1 = u8 [a0 + 0x1f]\n   805: a4 = a4 << 0x8\n   808: a4 = a4 | a5\n   811: s1 = s1 << 0x10\n   814: a1 = a1 << 0x18\n   817: a1 = a1 | s1\n   820: a1 = a1 | a4\n   823: a1 = a1 << 0x20\n   826: a3 = a3 | a1\n   829: a1 = u8 [a0 + 0x9]\n   832: a4 = u8 [a0 + 0x8]\n   835: a5 = u8 [a0 + 0xa]\n   838: s1 = u8 [a0 + 0xb]\n   841: a1 = a1 << 0x8\n   844: a1 = a1 | a4\n   847: a5 = a5 << 0x10\n   850: s1 = s1 << 0x18\n   853: a5 = a5 | s1\n   856: a1 = a1 | a5\n   859: a4 = u8 [a0 + 0xd]\n   862: a5 = u8 [a0 + 0xc]\n   865: s1 = u8 [a0 + 0xe]\n   868: a0 = u8 [a0 + 0xf]\n   871: a4 = a4 << 0x8\n   874: a4 = a4 | a5\n   877: s1 = s1 << 0x10\n   880: a0 = a0 << 0x18\n   883: a0 = a0 | s1\n   886: a0 = a0 | a4\n   889: a0 = a0 << 0x20\n   892: a0 = a0 | a1\n   895: a0 = reverse a0\n   897: s1 = reverse a3\n   899: a1 = reverse a2\n   901: a2 = reverse t0\n   903: a1 = a1 | a2\n   906: a2 = s1 | a0\n   909: a2 = a2 | a1\n   912: a2 = a2 >> 0x20\n   915: a0 = a0 | a1\n   918: a0 = a0 << 0x20\n   921: a0 = a0 | a2\n   924: jump @22 if a0 == 0\n      : @19 (gas: 1)\n   927: trap\n      : @20 (gas: 3)\n   928: a0 = 0\n   930: a1 = 0\n   932: ra = 12, jump @0\n      : @21 [@dyn 6] (gas: 5)\n   937: i32 a1 = a0 + 0\n   939: a0 = 0x1\n   942: a2 = 0\n   944: ecalli 13 // 'seal_return'\n   946: fallthrough\n      : @22 (gas: 4)\n   947: i32 s1 = s1 + 0\n   949: a0 = s1\n   951: a1 = 0\n   953: ra = 14, jump @0\n      : @23 [@dyn 7] (gas: 5)\n   958: i32 a0 = a0 + 0\n   960: a1 = 0\n   962: a2 = 0\n   964: ecalli 3 // 'call_data_copy'\n   966: fallthrough\n      : @24 (gas: 2)\n   967: a1 = i32 [0x20048]\n   972: jump @26 if a1 == 0\n      : @25 (gas: 4)\n   975: a0 = 0x30050\n   980: i32 a0 = a0 + 0\n   982: ecalli 14 // 'set_immutable_data'\n   984: fallthrough\n      : @26 (gas: 3)\n   985: a0 = s1\n   987: a1 = 0\n   989: ra = 16, jump @0\n      : @27 [@dyn 8] (gas: 6)\n   994: i32 a1 = a0 + 0\n   996: a0 = 0\n   998: a2 = 0\n  1000: ra = 0x12\n  1003: ecalli 13 // 'seal_return'\n  1005: fallthrough\n      : @28 [@dyn 9] (gas: 9)\n  1006: sp = sp + 0xffffffffffffffc0\n  1009: u64 [sp + 0x38] = ra\n  1012: u64 [sp + 0x30] = s0\n  1015: u64 [sp + 0x28] = s1\n  1018: s0 = sp + 0x40\n  1021: sp = sp & 0xffffffffffffffe0\n  1024: a0 = 0x40\n  1027: a1 = 0x20\n  1030: ra = 20, jump @0\n      : @29 [@dyn 10] (gas: 35)\n  1035: u8 [a0 + 31] = 0x80\n  1040: u8 [a0 + 30] = 0\n  1043: u8 [a0 + 29] = 0\n  1046: u8 [a0 + 28] = 0\n  1049: u8 [a0 + 27] = 0\n  1052: u8 [a0 + 26] = 0\n  1055: u8 [a0 + 25] = 0\n  1058: u8 [a0 + 24] = 0\n  1061: u8 [a0 + 23] = 0\n  1064: u8 [a0 + 22] = 0\n  1067: u8 [a0 + 21] = 0\n  1070: u8 [a0 + 20] = 0\n  1073: u8 [a0 + 19] = 0\n  1076: u8 [a0 + 18] = 0\n  1079: u8 [a0 + 17] = 0\n  1082: u8 [a0 + 16] = 0\n  1085: u8 [a0 + 15] = 0\n  1088: u8 [a0 + 14] = 0\n  1091: u8 [a0 + 13] = 0\n  1094: u8 [a0 + 12] = 0\n  1097: u8 [a0 + 11] = 0\n  1100: u8 [a0 + 10] = 0\n  1103: u8 [a0 + 9] = 0\n  1106: u8 [a0 + 8] = 0\n  1109: u8 [a0 + 7] = 0\n  1112: u8 [a0 + 3] = 0\n  1115: s1 = 0x20044\n  1120: u8 [a0 + 2] = 0\n  1123: u8 [a0 + 1] = 0\n  1126: u8 [a0 + 0] = 0\n  1128: a1 = i32 [0x20044]\n  1133: u8 [a0 + 6] = 0\n  1136: u8 [a0 + 5] = 0\n  1139: u8 [a0 + 4] = 0\n  1142: jump @45 if a1 <u 4\n      : @30 (gas: 4)\n  1147: i32 a0 = sp + 0\n  1149: a1 = 0\n  1151: ecalli 4 // 'call_data_load'\n  1153: fallthrough\n      : @31 (gas: 2)\n  1154: a0 = i32 [sp + 0x1c]\n  1157: jump @36 if a0 <=s 3375685773\n      : @32 (gas: 2)\n  1164: a1 = 0x29dcb000\n  1170: jump @40 if a0 >s 702329038\n      : @33 (gas: 1)\n  1177: jump @47 if a0 == 3375685774\n      : @34 (gas: 1)\n  1185: jump @44 if a0 != 3685619500\n      : @35 (gas: 14)\n  1193: ra = 0x16\n  1196: sp = sp + 0xffffffffffffff60\n  1200: u64 [sp + 0x98] = ra\n  1204: u64 [sp + 0x90] = s0\n  1208: u64 [sp + 0x88] = s1\n  1212: s0 = sp + 0xa0\n  1216: sp = sp & 0xffffffffffffffe0\n  1219: u64 [sp + 56] = 0\n  1222: u64 [sp + 48] = 0\n  1225: u64 [sp + 40] = 0\n  1228: u64 [sp + 32] = 0\n  1231: i32 a0 = sp + 0x20\n  1234: ecalli 16 // 'value_transferred'\n  1236: jump @133\n      : @36 [@dyn 11] (gas: 1)\n  1239: jump @43 if a0 == 2376452955\n      : @37 (gas: 1)\n  1246: jump @49 if a0 == 2632781467\n      : @38 (gas: 1)\n  1254: jump @44 if a0 != 3065339685\n      : @39 (gas: 1)\n  1261: ra = 24, jump @112\n      : @40 [@dyn 12] (gas: 2)\n  1266: i32 a1 = a1 + 0xcf\n  1270: jump @48 if a0 == a1\n      : @41 (gas: 1)\n  1274: jump @44 if a0 != 1412948993\n      : @42 (gas: 13)\n  1281: ra = 0x1a\n  1284: sp = sp + 0xffffffffffffff00\n  1288: u64 [sp + 0xf8] = ra\n  1292: u64 [sp + 0xf0] = s0\n  1296: s0 = sp + 0x100\n  1300: sp = sp & 0xffffffffffffffe0\n  1303: u64 [sp + 216] = 0\n  1307: u64 [sp + 208] = 0\n  1311: u64 [sp + 200] = 0\n  1315: u64 [sp + 192] = 0\n  1319: i32 a0 = sp + 0xc0\n  1323: ecalli 16 // 'value_transferred'\n  1325: jump @79\n      : @43 [@dyn 13] (gas: 14)\n  1328: ra = 0x1c\n  1331: sp = sp + 0xffffffffffffff60\n  1335: u64 [sp + 0x98] = ra\n  1339: u64 [sp + 0x90] = s0\n  1343: u64 [sp + 0x88] = s1\n  1347: s0 = sp + 0xa0\n  1351: sp = sp & 0xffffffffffffffe0\n  1354: u64 [sp + 56] = 0\n  1357: u64 [sp + 48] = 0\n  1360: u64 [sp + 40] = 0\n  1363: u64 [sp + 32] = 0\n  1366: i32 a0 = sp + 0x20\n  1369: ecalli 16 // 'value_transferred'\n  1371: jump @90\n      : @44 [@dyn 14] (gas: 2)\n  1374: a1 = i32 [s1]\n  1376: fallthrough\n      : @45 (gas: 1)\n  1377: jump @50 if a1 == 0\n      : @46 (gas: 7)\n  1381: ra = 0x1e\n  1384: sp = sp + 0xfffffffffffffff8\n  1387: u64 [sp] = ra\n  1389: a0 = 0\n  1391: a1 = 0\n  1393: ra = 0x2c\n  1396: jump @0\n      : @47 [@dyn 15] (gas: 14)\n  1399: ra = 0x20\n  1402: sp = sp + 0xffffffffffffff60\n  1406: u64 [sp + 0x98] = ra\n  1410: u64 [sp + 0x90] = s0\n  1414: u64 [sp + 0x88] = s1\n  1418: s0 = sp + 0xa0\n  1422: sp = sp & 0xffffffffffffffe0\n  1425: u64 [sp + 56] = 0\n  1428: u64 [sp + 48] = 0\n  1431: u64 [sp + 40] = 0\n  1434: u64 [sp + 32] = 0\n  1437: i32 a0 = sp + 0x20\n  1440: ecalli 16 // 'value_transferred'\n  1442: jump @122\n      : @48 [@dyn 16] (gas: 14)\n  1445: ra = 0x22\n  1448: sp = sp + 0xffffffffffffff60\n  1452: u64 [sp + 0x98] = ra\n  1456: u64 [sp + 0x90] = s0\n  1460: u64 [sp + 0x88] = s1\n  1464: s0 = sp + 0xa0\n  1468: sp = sp & 0xffffffffffffffe0\n  1471: u64 [sp + 56] = 0\n  1474: u64 [sp + 48] = 0\n  1477: u64 [sp + 40] = 0\n  1480: u64 [sp + 32] = 0\n  1483: i32 a0 = sp + 0x20\n  1486: ecalli 16 // 'value_transferred'\n  1488: jump @56\n      : @49 [@dyn 17] (gas: 14)\n  1491: ra = 0x24\n  1494: sp = sp + 0xffffffffffffff60\n  1498: u64 [sp + 0x98] = ra\n  1502: u64 [sp + 0x90] = s0\n  1506: u64 [sp + 0x88] = s1\n  1510: s0 = sp + 0xa0\n  1514: sp = sp & 0xffffffffffffffe0\n  1517: u64 [sp + 56] = 0\n  1520: u64 [sp + 48] = 0\n  1523: u64 [sp + 40] = 0\n  1526: u64 [sp + 32] = 0\n  1529: i32 a0 = sp + 0x20\n  1532: ecalli 16 // 'value_transferred'\n  1534: jump @101\n      : @50 [@dyn 18] (gas: 2)\n  1537: a0 = 0\n  1539: ra = 38, jump @0\n      : @51 [@dyn 19] (gas: 6)\n  1544: i32 a1 = a0 + 0\n  1546: a0 = 0\n  1548: a2 = 0\n  1550: ra = 0x28\n  1553: ecalli 13 // 'seal_return'\n  1555: fallthrough\n      : @52 [@dyn 20] (gas: 7)\n  1556: sp = sp + 0xfffffffffffffff0\n  1559: u64 [sp + 0x8] = ra\n  1562: u64 [sp] = s0\n  1564: s0 = a0\n  1566: a0 = 0x40\n  1569: a1 = 0x20\n  1572: ra = 42, jump @0\n      : @53 [@dyn 21] (gas: 100)\n  1577: a1 = u8 [a0 + 0x1]\n  1580: a2 = u8 [a0]\n  1582: a3 = u8 [a0 + 0x2]\n  1585: a4 = u8 [a0 + 0x3]\n  1588: a1 = a1 << 0x8\n  1591: a1 = a1 | a2\n  1594: a3 = a3 << 0x10\n  1597: a4 = a4 << 0x18\n  1600: a3 = a3 | a4\n  1603: a1 = a1 | a3\n  1606: a2 = u8 [a0 + 0x5]\n  1609: a3 = u8 [a0 + 0x4]\n  1612: a4 = u8 [a0 + 0x6]\n  1615: a5 = u8 [a0 + 0x7]\n  1618: a2 = a2 << 0x8\n  1621: a2 = a2 | a3\n  1624: a4 = a4 << 0x10\n  1627: a5 = a5 << 0x18\n  1630: a4 = a4 | a5\n  1633: a2 = a2 | a4\n  1636: a2 = a2 << 0x20\n  1639: t0 = a2 | a1\n  1642: a2 = u8 [a0 + 0x9]\n  1645: a3 = u8 [a0 + 0x8]\n  1648: a4 = u8 [a0 + 0xa]\n  1651: a5 = u8 [a0 + 0xb]\n  1654: a2 = a2 << 0x8\n  1657: a2 = a2 | a3\n  1660: a4 = a4 << 0x10\n  1663: a5 = a5 << 0x18\n  1666: a4 = a4 | a5\n  1669: a2 = a2 | a4\n  1672: a3 = u8 [a0 + 0xd]\n  1675: a4 = u8 [a0 + 0xc]\n  1678: a5 = u8 [a0 + 0xe]\n  1681: a1 = u8 [a0 + 0xf]\n  1684: a3 = a3 << 0x8\n  1687: a3 = a3 | a4\n  1690: a5 = a5 << 0x10\n  1693: a1 = a1 << 0x18\n  1696: a1 = a1 | a5\n  1699: a1 = a1 | a3\n  1702: a1 = a1 << 0x20\n  1705: t1 = a1 | a2\n  1708: a1 = u8 [a0 + 0x11]\n  1711: a3 = u8 [a0 + 0x10]\n  1714: a4 = u8 [a0 + 0x12]\n  1717: a5 = u8 [a0 + 0x13]\n  1720: a1 = a1 << 0x8\n  1723: a1 = a1 | a3\n  1726: a4 = a4 << 0x10\n  1729: a5 = a5 << 0x18\n  1732: a4 = a4 | a5\n  1735: a1 = a1 | a4\n  1738: a3 = u8 [a0 + 0x15]\n  1741: a4 = u8 [a0 + 0x14]\n  1744: a5 = u8 [a0 + 0x16]\n  1747: a2 = u8 [a0 + 0x17]\n  1750: a3 = a3 << 0x8\n  1753: a3 = a3 | a4\n  1756: a5 = a5 << 0x10\n  1759: a2 = a2 << 0x18\n  1762: a2 = a2 | a5\n  1765: a2 = a2 | a3\n  1768: a2 = a2 << 0x20\n  1771: a3 = a2 | a1\n  1774: a1 = u8 [a0 + 0x19]\n  1777: a2 = u8 [a0 + 0x18]\n  1780: a4 = u8 [a0 + 0x1a]\n  1783: a5 = u8 [a0 + 0x1b]\n  1786: a1 = a1 << 0x8\n  1789: a1 = a1 | a2\n  1792: a4 = a4 << 0x10\n  1795: a5 = a5 << 0x18\n  1798: a4 = a4 | a5\n  1801: a1 = a1 | a4\n  1804: a2 = u8 [a0 + 0x1d]\n  1807: a4 = u8 [a0 + 0x1c]\n  1810: a5 = u8 [a0 + 0x1e]\n  1813: a0 = u8 [a0 + 0x1f]\n  1816: a2 = a2 << 0x8\n  1819: a2 = a2 | a4\n  1822: a5 = a5 << 0x10\n  1825: a0 = a0 << 0x18\n  1828: a0 = a0 | a5\n  1831: a0 = a0 | a2\n  1834: a0 = a0 << 0x20\n  1837: a0 = a0 | a1\n  1840: a0 = reverse a0\n  1842: a1 = reverse a3\n  1844: a2 = reverse t1\n  1846: a3 = reverse t0\n  1848: u64 [s0 + 0x18] = a3\n  1851: u64 [s0 + 0x10] = a2\n  1854: u64 [s0 + 0x8] = a1\n  1857: u64 [s0] = a0\n  1859: ra = u64 [sp + 0x8]\n  1862: s0 = u64 [sp]\n  1864: sp = sp + 0x10\n  1867: ret\n      : @54 [@dyn 22] (gas: 6)\n  1869: i32 a1 = a0 + 0\n  1871: a0 = 0x1\n  1874: a2 = 0\n  1876: ra = 0x2e\n  1879: ecalli 13 // 'seal_return'\n  1881: fallthrough\n      : @55 [@dyn 23] (gas: 11)\n  1882: a2 = u64 [a1]\n  1884: a1 = u64 [a1 + 0x8]\n  1887: a3 = a2 >> 0x18\n  1890: a1 = a1 << 0x28\n  1893: a1 = a1 | a3\n  1896: a2 = a2 << 0x28\n  1899: u64 [a0 + 0x10] = a2\n  1902: u64 [a0 + 8] = 0\n  1905: u64 [a0 + 0] = 0\n  1907: u64 [a0 + 0x18] = a1\n  1910: ret\n      : @56 (gas: 8)\n  1912: a0 = u64 [sp + 0x30]\n  1915: a1 = u64 [sp + 0x38]\n  1918: a2 = u64 [sp + 0x28]\n  1921: a3 = u64 [sp + 0x20]\n  1924: a1 = a1 | a2\n  1927: a0 = a0 | a3\n  1930: a0 = a0 | a1\n  1933: jump @61 if a0 != 0\n      : @57 (gas: 2)\n  1937: a0 = i32 [0x20044]\n  1942: jump @61 if a0 <=u 3\n      : @58 (gas: 26)\n  1947: u64 [sp + 88] = 0\n  1950: u64 [sp + 80] = 0\n  1953: u64 [sp + 72] = 0\n  1956: u64 [sp + 64] = 0\n  1959: u64 [sp + 120] = 0\n  1962: u64 [sp + 112] = 0\n  1965: u64 [sp + 104] = 0\n  1968: u64 [sp + 96] = 0\n  1971: u32 [sp + 128] = 0x20\n  1976: i32 a1 = sp + 0x40\n  1979: i32 a3 = sp + 0x60\n  1982: i32 a4 = sp + 0x80\n  1986: a2 = 0xffffffffffffffff\n  1989: a0 = 0\n  1991: ecalli 8 // 'get_storage'\n  1993: a0 = u64 [sp + 0x78]\n  1996: u64 [sp] = a0\n  1998: a0 = u64 [sp + 0x70]\n  2001: u64 [sp + 0x8] = a0\n  2004: a0 = u64 [sp + 0x68]\n  2007: u64 [sp + 0x10] = a0\n  2010: a0 = u64 [sp + 0x60]\n  2013: u64 [sp + 0x18] = a0\n  2016: a0 = 0x40\n  2019: a1 = 0x20\n  2022: ra = 48, jump @0\n      : @59 [@dyn 24] (gas: 100)\n  2027: a1 = u8 [a0 + 0x11]\n  2030: a2 = u8 [a0 + 0x10]\n  2033: a3 = u8 [a0 + 0x12]\n  2036: a4 = u8 [a0 + 0x13]\n  2039: a1 = a1 << 0x8\n  2042: a1 = a1 | a2\n  2045: a3 = a3 << 0x10\n  2048: a4 = a4 << 0x18\n  2051: a3 = a3 | a4\n  2054: a1 = a1 | a3\n  2057: a2 = u8 [a0 + 0x15]\n  2060: a3 = u8 [a0 + 0x14]\n  2063: a4 = u8 [a0 + 0x16]\n  2066: a5 = u8 [a0 + 0x17]\n  2069: a2 = a2 << 0x8\n  2072: a2 = a2 | a3\n  2075: a4 = a4 << 0x10\n  2078: a5 = a5 << 0x18\n  2081: a4 = a4 | a5\n  2084: a2 = a2 | a4\n  2087: a2 = a2 << 0x20\n  2090: t0 = a2 | a1\n  2093: a2 = u8 [a0 + 0x1]\n  2096: a3 = u8 [a0]\n  2098: a4 = u8 [a0 + 0x2]\n  2101: a5 = u8 [a0 + 0x3]\n  2104: a2 = a2 << 0x8\n  2107: a2 = a2 | a3\n  2110: a4 = a4 << 0x10\n  2113: a5 = a5 << 0x18\n  2116: a4 = a4 | a5\n  2119: a2 = a2 | a4\n  2122: a3 = u8 [a0 + 0x5]\n  2125: a4 = u8 [a0 + 0x4]\n  2128: a5 = u8 [a0 + 0x6]\n  2131: s1 = u8 [a0 + 0x7]\n  2134: a3 = a3 << 0x8\n  2137: a3 = a3 | a4\n  2140: a5 = a5 << 0x10\n  2143: s1 = s1 << 0x18\n  2146: a5 = a5 | s1\n  2149: a3 = a3 | a5\n  2152: a3 = a3 << 0x20\n  2155: a2 = a2 | a3\n  2158: a3 = u8 [a0 + 0x19]\n  2161: a4 = u8 [a0 + 0x18]\n  2164: a5 = u8 [a0 + 0x1a]\n  2167: s1 = u8 [a0 + 0x1b]\n  2170: a3 = a3 << 0x8\n  2173: a3 = a3 | a4\n  2176: a5 = a5 << 0x10\n  2179: s1 = s1 << 0x18\n  2182: a5 = a5 | s1\n  2185: a3 = a3 | a5\n  2188: a4 = u8 [a0 + 0x1d]\n  2191: a5 = u8 [a0 + 0x1c]\n  2194: s1 = u8 [a0 + 0x1e]\n  2197: a1 = u8 [a0 + 0x1f]\n  2200: a4 = a4 << 0x8\n  2203: a4 = a4 | a5\n  2206: s1 = s1 << 0x10\n  2209: a1 = a1 << 0x18\n  2212: a1 = a1 | s1\n  2215: a1 = a1 | a4\n  2218: a1 = a1 << 0x20\n  2221: a3 = a3 | a1\n  2224: a1 = u8 [a0 + 0x9]\n  2227: a4 = u8 [a0 + 0x8]\n  2230: a5 = u8 [a0 + 0xa]\n  2233: s1 = u8 [a0 + 0xb]\n  2236: a1 = a1 << 0x8\n  2239: a1 = a1 | a4\n  2242: a5 = a5 << 0x10\n  2245: s1 = s1 << 0x18\n  2248: a5 = a5 | s1\n  2251: a1 = a1 | a5\n  2254: a4 = u8 [a0 + 0xd]\n  2257: a5 = u8 [a0 + 0xc]\n  2260: s1 = u8 [a0 + 0xe]\n  2263: a0 = u8 [a0 + 0xf]\n  2266: a4 = a4 << 0x8\n  2269: a4 = a4 | a5\n  2272: s1 = s1 << 0x10\n  2275: a0 = a0 << 0x18\n  2278: a0 = a0 | s1\n  2281: a0 = a0 | a4\n  2284: a0 = a0 << 0x20\n  2287: a0 = a0 | a1\n  2290: a1 = reverse a0\n  2292: a0 = reverse a3\n  2294: a2 = reverse a2\n  2296: a3 = reverse t0\n  2298: a2 = a2 | a3\n  2301: a3 = a0 | a1\n  2304: a3 = a3 | a2\n  2307: a3 = a3 >> 0x20\n  2310: a1 = a1 | a2\n  2313: a1 = a1 << 0x20\n  2316: a1 = a1 | a3\n  2319: jump @63 if a1 == 0\n      : @60 (gas: 1)\n  2322: trap\n      : @61 (gas: 3)\n  2323: a0 = 0\n  2325: a1 = 0\n  2327: ra = 50, jump @0\n      : @62 [@dyn 25] (gas: 5)\n  2332: i32 a1 = a0 + 0\n  2334: a0 = 0x1\n  2337: a2 = 0\n  2339: ecalli 13 // 'seal_return'\n  2341: fallthrough\n      : @63 (gas: 4)\n  2342: i32 s1 = a0 + 0\n  2344: a1 = 0x20\n  2347: a0 = s1\n  2349: ra = 52, jump @0\n      : @64 [@dyn 26] (gas: 71)\n  2354: a1 = u64 [sp]\n  2356: a1 = reverse a1\n  2358: a2 = u64 [sp + 0x8]\n  2361: a2 = reverse a2\n  2363: a3 = u64 [sp + 0x10]\n  2366: a3 = reverse a3\n  2368: a4 = u64 [sp + 0x18]\n  2371: a4 = reverse a4\n  2373: a5 = a4 >> 0x38\n  2376: u8 [a0 + 0x1f] = a5\n  2379: a5 = a4 >> 0x30\n  2382: u8 [a0 + 0x1e] = a5\n  2385: a5 = a4 >> 0x28\n  2388: u8 [a0 + 0x1d] = a5\n  2391: a5 = a4 >> 0x20\n  2394: u8 [a0 + 0x1c] = a5\n  2397: a5 = a4 >> 0x18\n  2400: u8 [a0 + 0x1b] = a5\n  2403: a5 = a4 >> 0x10\n  2406: u8 [a0 + 0x1a] = a5\n  2409: a5 = a4 >> 0x8\n  2412: u8 [a0 + 0x19] = a5\n  2415: u8 [a0 + 0x18] = a4\n  2418: u8 [a0 + 0x10] = a3\n  2421: a4 = a3 >> 0x38\n  2424: u8 [a0 + 0x17] = a4\n  2427: a4 = a3 >> 0x30\n  2430: u8 [a0 + 0x16] = a4\n  2433: a4 = a3 >> 0x28\n  2436: u8 [a0 + 0x15] = a4\n  2439: a4 = a3 >> 0x20\n  2442: u8 [a0 + 0x14] = a4\n  2445: a4 = a3 >> 0x18\n  2448: u8 [a0 + 0x13] = a4\n  2451: a4 = a3 >> 0x10\n  2454: u8 [a0 + 0x12] = a4\n  2457: a3 = a3 >> 0x8\n  2460: u8 [a0 + 0x11] = a3\n  2463: u8 [a0 + 0x8] = a2\n  2466: a3 = a2 >> 0x38\n  2469: u8 [a0 + 0xf] = a3\n  2472: a3 = a2 >> 0x30\n  2475: u8 [a0 + 0xe] = a3\n  2478: a3 = a2 >> 0x28\n  2481: u8 [a0 + 0xd] = a3\n  2484: a3 = a2 >> 0x20\n  2487: u8 [a0 + 0xc] = a3\n  2490: a3 = a2 >> 0x18\n  2493: u8 [a0 + 0xb] = a3\n  2496: a3 = a2 >> 0x10\n  2499: u8 [a0 + 0xa] = a3\n  2502: a2 = a2 >> 0x8\n  2505: u8 [a0 + 0x9] = a2\n  2508: u8 [a0] = a1\n  2510: a2 = a1 >> 0x38\n  2513: u8 [a0 + 0x7] = a2\n  2516: a2 = a1 >> 0x30\n  2519: u8 [a0 + 0x6] = a2\n  2522: a2 = a1 >> 0x28\n  2525: u8 [a0 + 0x5] = a2\n  2528: a2 = a1 >> 0x20\n  2531: u8 [a0 + 0x4] = a2\n  2534: a2 = a1 >> 0x18\n  2537: u8 [a0 + 0x3] = a2\n  2540: a2 = a1 >> 0x10\n  2543: u8 [a0 + 0x2] = a2\n  2546: a1 = a1 >> 0x8\n  2549: u8 [a0 + 0x1] = a1\n  2552: a1 = 0x20\n  2555: a0 = s1\n  2557: ra = 54, jump @0\n      : @65 [@dyn 27] (gas: 6)\n  2562: i32 a1 = a0 + 0\n  2564: a2 = 0x20\n  2567: a0 = 0\n  2569: ra = 0x38\n  2572: ecalli 13 // 'seal_return'\n  2574: fallthrough\n      : @66 [@dyn 28] (gas: 8)\n  2575: a2 = u32 [a1 + 0x10]\n  2578: a3 = u64 [a1 + 0x8]\n  2581: a1 = u64 [a1]\n  2583: u64 [a0 + 24] = 0\n  2586: u64 [a0 + 0x10] = a2\n  2589: u64 [a0 + 0x8] = a3\n  2592: u64 [a0] = a1\n  2594: ret\n      : @67 (gas: 47)\n  2596: sp = sp + 0xffffffffffffff80\n  2599: u64 [sp + 0x78] = ra\n  2602: u64 [sp + 0x70] = s0\n  2605: u64 [sp + 0x68] = s1\n  2608: s0 = sp + 0x80\n  2612: sp = sp & 0xffffffffffffffe0\n  2615: ra = u64 [a1 + 0x10]\n  2618: a5 = u64 [a1 + 0x8]\n  2621: a3 = u64 [a2 + 0x8]\n  2624: t1 = u64 [a1]\n  2626: a4 = u64 [a2]\n  2628: u64 [sp + 0x28] = a4\n  2631: t2 = u64 [a2 + 0x10]\n  2634: t0 = a3 ^ a5\n  2637: s1 = a3 <u a5\n  2640: a4 = a4 <u t1\n  2643: u64 [sp + 0x20] = a4\n  2646: s1 = a4 if t0 == 0\n  2649: t0 = u64 [a1 + 0x18]\n  2652: a1 = u64 [a2 + 0x18]\n  2655: u64 [sp + 0x18] = a1\n  2658: a2 = t2 - ra\n  2661: a1 = a2 - s1\n  2664: u64 [sp + 0x30] = a1\n  2667: a1 = a2 <u s1\n  2670: a4 = t2 <u ra\n  2673: u64 [sp + 0x38] = t0\n  2676: a2 = u64 [sp + 0x18]\n  2679: a2 = a2 - t0\n  2682: a2 = a2 - a4\n  2685: a2 = a2 - a1\n  2688: a1 = a3 - a5\n  2691: a3 = u64 [sp + 0x20]\n  2694: a1 = a1 - a3\n  2697: a3 = u64 [sp + 0x28]\n  2700: a3 = a3 - t1\n  2703: a4 = a1 >u 0\n  2705: a3 = a3 <u 0x40\n  2708: a3 = a3 ^ 0x1\n  2711: a3 = a4 if a1 != 0\n  2714: s1 = a2 >s 0\n  2716: a1 = u64 [sp + 0x30]\n  2719: a4 = a1 >u 0\n  2721: a4 = s1 if a2 != 0\n  2724: a1 = a1 | a2\n  2727: a3 = a4 if a1 != 0\n  2730: jump @76 if a3 == 0\n      : @68 (gas: 12)\n  2734: s1 = a0\n  2736: a0 = t1 | ra\n  2739: u64 [sp + 0x30] = a5\n  2742: a1 = u64 [sp + 0x38]\n  2745: a1 = a1 | a5\n  2748: a0 = a0 | a1\n  2751: a0 = a0 >> 0x20\n  2754: u64 [sp + 0x28] = ra\n  2757: a1 = a1 | ra\n  2760: a1 = a1 << 0x20\n  2763: a0 = a0 | a1\n  2766: jump @75 if a0 != 0\n      : @69 (gas: 6)\n  2770: u64 [sp + 0x20] = t1\n  2773: i32 a1 = t1 + 0\n  2775: i32 a0 = sp + 0x40\n  2778: u64 [sp + 0x8] = a1\n  2781: ecalli 4 // 'call_data_load'\n  2783: fallthrough\n      : @70 (gas: 10)\n  2784: a4 = u64 [sp + 0x50]\n  2787: a3 = u64 [sp + 0x58]\n  2790: a0 = 0x100000000\n  2800: a1 = a4 ^ a0\n  2803: a1 = a1 | a3\n  2806: a2 = a4 >> 0x20\n  2809: a2 = a2 <u 0x1\n  2812: a2 = 0 if a3 != 0\n  2814: a2 = 0 if a1 == 0\n  2816: jump @76 if a2 == 0\n      : @71 (gas: 12)\n  2820: u64 [sp + 0x10] = a4\n  2823: u64 [sp + 0x18] = a3\n  2826: a1 = u64 [sp + 0x28]\n  2829: a2 = u64 [sp + 0x38]\n  2832: a1 = a1 | a2\n  2835: a0 = 0xffffffe0\n  2845: a2 = u64 [sp + 0x20]\n  2848: a0 = a2 <u a0\n  2851: a2 = u64 [sp + 0x30]\n  2854: a0 = 0 if a2 != 0\n  2856: a0 = 0 if a1 != 0\n  2858: jump @75 if a0 == 0\n      : @72 (gas: 9)\n  2861: a0 = u64 [sp + 0x48]\n  2864: u64 [sp + 0x30] = a0\n  2867: a0 = u64 [sp + 0x40]\n  2870: u64 [sp + 0x38] = a0\n  2873: a0 = u64 [sp + 0x8]\n  2876: i32 a1 = a0 + 0x20\n  2879: i32 a0 = sp + 0x40\n  2882: ecalli 4 // 'call_data_load'\n  2884: fallthrough\n      : @73 (gas: 9)\n  2885: a0 = u64 [sp + 0x58]\n  2888: a1 = u64 [sp + 0x50]\n  2891: a2 = u64 [sp + 0x40]\n  2894: a3 = u64 [sp + 0x48]\n  2897: a4 = a1 | a0\n  2900: a5 = a2 <u 0x2\n  2903: a5 = 0 if a3 != 0\n  2905: a5 = 0 if a4 != 0\n  2907: jump @76 if a5 == 0\n      : @74 (gas: 18)\n  2910: u64 [s1 + 0x28] = a3\n  2913: u64 [s1 + 0x20] = a2\n  2916: a2 = u64 [sp + 0x30]\n  2919: u64 [s1 + 0x8] = a2\n  2922: a2 = u64 [sp + 0x38]\n  2925: u64 [s1] = a2\n  2927: u64 [s1 + 0x30] = a1\n  2930: a1 = u64 [sp + 0x10]\n  2933: u64 [s1 + 0x10] = a1\n  2936: u64 [s1 + 0x38] = a0\n  2939: a0 = u64 [sp + 0x18]\n  2942: u64 [s1 + 0x18] = a0\n  2945: sp = s0 + 0xffffffffffffff80\n  2948: ra = u64 [sp + 0x78]\n  2951: s0 = u64 [sp + 0x70]\n  2954: s1 = u64 [sp + 0x68]\n  2957: sp = sp + 0x80\n  2961: ret\n      : @75 (gas: 1)\n  2963: trap\n      : @76 (gas: 3)\n  2964: a0 = 0\n  2966: a1 = 0\n  2968: ra = 58, jump @0\n      : @77 [@dyn 29] (gas: 6)\n  2973: i32 a1 = a0 + 0\n  2975: a0 = 0x1\n  2978: a2 = 0\n  2980: ra = 0x3c\n  2983: ecalli 13 // 'seal_return'\n  2985: fallthrough\n      : @78 [@dyn 30] (gas: 9)\n  2986: a2 = u64 [a1 + 0x18]\n  2989: a3 = u64 [a1 + 0x10]\n  2992: a4 = u64 [a1 + 0x8]\n  2995: a1 = u64 [a1]\n  2997: u64 [a0 + 0x18] = a2\n  3000: u64 [a0 + 0x10] = a3\n  3003: u64 [a0 + 0x8] = a4\n  3006: u64 [a0] = a1\n  3008: ret\n      : @79 (gas: 8)\n  3010: a0 = u64 [sp + 0xd0]\n  3014: a1 = u64 [sp + 0xd8]\n  3018: a2 = u64 [sp + 0xc8]\n  3022: a3 = u64 [sp + 0xc0]\n  3026: a1 = a1 | a2\n  3029: a0 = a0 | a3\n  3032: a0 = a0 | a1\n  3035: jump @85 if a0 != 0\n      : @80 (gas: 13)\n  3039: a0 = u32 [0x20044]\n  3044: u64 [sp + 88] = 0\n  3047: u64 [sp + 80] = 0\n  3050: u64 [sp + 72] = 0\n  3053: u64 [sp + 0x40] = a0\n  3056: u64 [sp + 120] = 0\n  3059: u64 [sp + 112] = 0\n  3062: u64 [sp + 96] = 0x4\n  3066: a0 = sp + 0x80\n  3070: a1 = sp + 0x60\n  3073: a2 = sp + 0x40\n  3076: u64 [sp + 104] = 0\n  3079: ra = 62, jump @67\n      : @81 [@dyn 31] (gas: 19)\n  3084: t0 = u64 [sp + 0x80]\n  3088: t1 = u64 [sp + 0x88]\n  3092: a1 = u64 [sp + 0x90]\n  3096: a3 = u64 [sp + 0x98]\n  3100: a4 = u64 [sp + 0xa0]\n  3104: a5 = u64 [sp + 0xa8]\n  3108: a2 = u64 [sp + 0xb0]\n  3112: a0 = u64 [sp + 0xb8]\n  3116: u64 [sp + 0x18] = a0\n  3119: u64 [sp + 0x10] = a2\n  3122: u64 [sp + 0x8] = a5\n  3125: u64 [sp] = a4\n  3127: u64 [sp + 0x38] = a3\n  3130: u64 [sp + 0x30] = a1\n  3133: u64 [sp + 0x28] = t1\n  3136: a0 = sp + 0x20\n  3139: a1 = sp\n  3141: u64 [sp + 0x20] = t0\n  3144: ra = 64, jump @152\n      : @82 [@dyn 32] (gas: 3)\n  3149: a0 = 0x40\n  3152: a1 = 0x20\n  3155: ra = 66, jump @0\n      : @83 [@dyn 33] (gas: 100)\n  3160: a1 = u8 [a0 + 0x11]\n  3163: a2 = u8 [a0 + 0x10]\n  3166: a3 = u8 [a0 + 0x12]\n  3169: a4 = u8 [a0 + 0x13]\n  3172: a1 = a1 << 0x8\n  3175: a1 = a1 | a2\n  3178: a3 = a3 << 0x10\n  3181: a4 = a4 << 0x18\n  3184: a3 = a3 | a4\n  3187: a1 = a1 | a3\n  3190: a2 = u8 [a0 + 0x15]\n  3193: a3 = u8 [a0 + 0x14]\n  3196: a4 = u8 [a0 + 0x16]\n  3199: a5 = u8 [a0 + 0x17]\n  3202: a2 = a2 << 0x8\n  3205: a2 = a2 | a3\n  3208: a4 = a4 << 0x10\n  3211: a5 = a5 << 0x18\n  3214: a4 = a4 | a5\n  3217: a2 = a2 | a4\n  3220: a2 = a2 << 0x20\n  3223: t0 = a2 | a1\n  3226: a2 = u8 [a0 + 0x1]\n  3229: a3 = u8 [a0]\n  3231: a4 = u8 [a0 + 0x2]\n  3234: a5 = u8 [a0 + 0x3]\n  3237: a2 = a2 << 0x8\n  3240: a2 = a2 | a3\n  3243: a4 = a4 << 0x10\n  3246: a5 = a5 << 0x18\n  3249: a4 = a4 | a5\n  3252: a2 = a2 | a4\n  3255: a3 = u8 [a0 + 0x5]\n  3258: a4 = u8 [a0 + 0x4]\n  3261: a5 = u8 [a0 + 0x6]\n  3264: a1 = u8 [a0 + 0x7]\n  3267: a3 = a3 << 0x8\n  3270: a3 = a3 | a4\n  3273: a5 = a5 << 0x10\n  3276: a1 = a1 << 0x18\n  3279: a1 = a1 | a5\n  3282: a1 = a1 | a3\n  3285: a1 = a1 << 0x20\n  3288: t1 = a1 | a2\n  3291: a1 = u8 [a0 + 0x19]\n  3294: a3 = u8 [a0 + 0x18]\n  3297: a4 = u8 [a0 + 0x1a]\n  3300: a5 = u8 [a0 + 0x1b]\n  3303: a1 = a1 << 0x8\n  3306: a1 = a1 | a3\n  3309: a4 = a4 << 0x10\n  3312: a5 = a5 << 0x18\n  3315: a4 = a4 | a5\n  3318: a1 = a1 | a4\n  3321: a3 = u8 [a0 + 0x1d]\n  3324: a4 = u8 [a0 + 0x1c]\n  3327: a5 = u8 [a0 + 0x1e]\n  3330: a2 = u8 [a0 + 0x1f]\n  3333: a3 = a3 << 0x8\n  3336: a3 = a3 | a4\n  3339: a5 = a5 << 0x10\n  3342: a2 = a2 << 0x18\n  3345: a2 = a2 | a5\n  3348: a2 = a2 | a3\n  3351: a2 = a2 << 0x20\n  3354: a3 = a2 | a1\n  3357: a1 = u8 [a0 + 0x9]\n  3360: a2 = u8 [a0 + 0x8]\n  3363: a4 = u8 [a0 + 0xa]\n  3366: a5 = u8 [a0 + 0xb]\n  3369: a1 = a1 << 0x8\n  3372: a1 = a1 | a2\n  3375: a4 = a4 << 0x10\n  3378: a5 = a5 << 0x18\n  3381: a4 = a4 | a5\n  3384: a1 = a1 | a4\n  3387: a2 = u8 [a0 + 0xd]\n  3390: a4 = u8 [a0 + 0xc]\n  3393: a5 = u8 [a0 + 0xe]\n  3396: a0 = u8 [a0 + 0xf]\n  3399: a2 = a2 << 0x8\n  3402: a2 = a2 | a4\n  3405: a5 = a5 << 0x10\n  3408: a0 = a0 << 0x18\n  3411: a0 = a0 | a5\n  3414: a0 = a0 | a2\n  3417: a0 = a0 << 0x20\n  3420: a0 = a0 | a1\n  3423: a1 = reverse a0\n  3425: a0 = reverse a3\n  3427: a2 = reverse t1\n  3429: a3 = reverse t0\n  3431: a2 = a2 | a3\n  3434: a3 = a0 | a1\n  3437: a3 = a3 | a2\n  3440: a3 = a3 >> 0x20\n  3443: a1 = a1 | a2\n  3446: a1 = a1 << 0x20\n  3449: a1 = a1 | a3\n  3452: jump @87 if a1 == 0\n      : @84 (gas: 1)\n  3455: trap\n      : @85 (gas: 3)\n  3456: a0 = 0\n  3458: a1 = 0\n  3460: ra = 68, jump @0\n      : @86 [@dyn 34] (gas: 7)\n  3465: i32 a1 = a0 + 0\n  3467: a0 = 0x1\n  3470: a2 = 0\n  3472: ecalli 13 // 'seal_return'\n  3474: i32 a0 = a0 + 0\n  3476: ra = 0x46\n  3479: jump @0\n      : @87 (gas: 2)\n  3482: i32 a0 = a0 + 0\n  3484: ra = 70, jump @0\n      : @88 [@dyn 35] (gas: 6)\n  3489: i32 a1 = a0 + 0\n  3491: a0 = 0\n  3493: a2 = 0\n  3495: ra = 0x48\n  3498: ecalli 13 // 'seal_return'\n  3500: fallthrough\n      : @89 [@dyn 36] (gas: 194)\n  3501: sp = sp + 0xffffffffffffffa0\n  3504: u64 [sp + 0x58] = ra\n  3507: u64 [sp + 0x50] = s0\n  3510: u64 [sp + 0x48] = s1\n  3513: u64 [sp] = a0\n  3515: t1 = u64 [a1]\n  3517: ra = u64 [a1 + 0x8]\n  3520: a4 = u64 [a1 + 0x10]\n  3523: a1 = u64 [a1 + 0x18]\n  3526: t0 = u64 [a2]\n  3528: a3 = u64 [a2 + 0x8]\n  3531: t2 = u64 [a2 + 0x18]\n  3534: a2 = u64 [a2 + 0x10]\n  3537: s0 = t0 >> 0x3d\n  3540: s1 = a3 << 0x3\n  3543: s0 = s0 | s1\n  3546: a3 = a3 >> 0x3d\n  3549: s1 = a2 << 0x3\n  3552: a3 = a3 | s1\n  3555: a2 = a2 >> 0x3d\n  3558: t2 = t2 << 0x3\n  3561: s1 = t2 | a2\n  3564: t2 = t0 << 0x3\n  3567: a2 = s1 >u 0\n  3569: a5 = a3 >u 0\n  3571: a5 = a2 if s1 != 0\n  3574: a0 = s0 >u 0\n  3576: a2 = t2 <u 0x100\n  3580: t2 = a2 ^ 0x1\n  3583: t2 = a0 if s0 != 0\n  3586: a3 = a3 | s1\n  3589: t2 = a5 if a3 != 0\n  3592: u8 [sp + 71] = 0\n  3595: u8 [sp + 70] = 0\n  3598: u8 [sp + 69] = 0\n  3601: u8 [sp + 68] = 0\n  3604: u8 [sp + 67] = 0\n  3607: u8 [sp + 66] = 0\n  3610: u8 [sp + 65] = 0\n  3613: u8 [sp + 64] = 0\n  3616: u8 [sp + 63] = 0\n  3619: u8 [sp + 62] = 0\n  3622: u8 [sp + 61] = 0\n  3625: u8 [sp + 60] = 0\n  3628: u8 [sp + 59] = 0\n  3631: u8 [sp + 58] = 0\n  3634: u8 [sp + 57] = 0\n  3637: u8 [sp + 56] = 0\n  3640: u8 [sp + 55] = 0\n  3643: u8 [sp + 54] = 0\n  3646: u8 [sp + 53] = 0\n  3649: u8 [sp + 52] = 0\n  3652: u8 [sp + 51] = 0\n  3655: u8 [sp + 50] = 0\n  3658: u8 [sp + 49] = 0\n  3661: u8 [sp + 48] = 0\n  3664: u8 [sp + 47] = 0\n  3667: u8 [sp + 46] = 0\n  3670: u8 [sp + 45] = 0\n  3673: u8 [sp + 44] = 0\n  3676: u8 [sp + 43] = 0\n  3679: u8 [sp + 42] = 0\n  3682: u8 [sp + 41] = 0\n  3685: u8 [sp + 40] = 0\n  3688: u8 [sp + 0x20] = a1\n  3691: u8 [sp + 0x18] = a4\n  3694: u8 [sp + 0x10] = ra\n  3697: u8 [sp + 0x8] = t1\n  3700: a0 = a1 >> 0x38\n  3703: u8 [sp + 0x27] = a0\n  3706: a0 = a1 >> 0x30\n  3709: u8 [sp + 0x26] = a0\n  3712: a0 = a1 >> 0x28\n  3715: u8 [sp + 0x25] = a0\n  3718: a0 = a1 >> 0x20\n  3721: u8 [sp + 0x24] = a0\n  3724: a0 = a1 >> 0x18\n  3727: u8 [sp + 0x23] = a0\n  3730: a0 = a1 >> 0x10\n  3733: u8 [sp + 0x22] = a0\n  3736: a1 = a1 >> 0x8\n  3739: u8 [sp + 0x21] = a1\n  3742: a0 = a4 >> 0x38\n  3745: u8 [sp + 0x1f] = a0\n  3748: a0 = a4 >> 0x30\n  3751: u8 [sp + 0x1e] = a0\n  3754: a0 = a4 >> 0x28\n  3757: u8 [sp + 0x1d] = a0\n  3760: a0 = a4 >> 0x20\n  3763: u8 [sp + 0x1c] = a0\n  3766: a0 = a4 >> 0x18\n  3769: u8 [sp + 0x1b] = a0\n  3772: a0 = a4 >> 0x10\n  3775: u8 [sp + 0x1a] = a0\n  3778: a4 = a4 >> 0x8\n  3781: u8 [sp + 0x19] = a4\n  3784: a0 = ra >> 0x38\n  3787: u8 [sp + 0x17] = a0\n  3790: a0 = ra >> 0x30\n  3793: u8 [sp + 0x16] = a0\n  3796: a0 = ra >> 0x28\n  3799: u8 [sp + 0x15] = a0\n  3802: a0 = ra >> 0x20\n  3805: u8 [sp + 0x14] = a0\n  3808: a0 = ra >> 0x18\n  3811: u8 [sp + 0x13] = a0\n  3814: a0 = ra >> 0x10\n  3817: u8 [sp + 0x12] = a0\n  3820: a0 = ra >> 0x8\n  3823: u8 [sp + 0x11] = a0\n  3826: a0 = t1 >> 0x38\n  3829: u8 [sp + 0xf] = a0\n  3832: a0 = t1 >> 0x30\n  3835: u8 [sp + 0xe] = a0\n  3838: a0 = t1 >> 0x28\n  3841: u8 [sp + 0xd] = a0\n  3844: a0 = t1 >> 0x20\n  3847: u8 [sp + 0xc] = a0\n  3850: a0 = t1 >> 0x18\n  3853: u8 [sp + 0xb] = a0\n  3856: a0 = t1 >> 0x10\n  3859: u8 [sp + 0xa] = a0\n  3862: a0 = t1 >> 0x8\n  3865: u8 [sp + 0x9] = a0\n  3868: a1 = t0 & 0x1f\n  3871: a0 = sp + 0x8\n  3874: a1 = a1 + a0\n  3877: a0 = u8 [a1 + 0x9]\n  3880: a2 = u8 [a1 + 0x8]\n  3883: a3 = u8 [a1 + 0xa]\n  3886: a4 = u8 [a1 + 0xb]\n  3889: a0 = a0 << 0x8\n  3892: a0 = a0 | a2\n  3895: a3 = a3 << 0x10\n  3898: a4 = a4 << 0x18\n  3901: a3 = a3 | a4\n  3904: a0 = a0 | a3\n  3907: a2 = u8 [a1 + 0xd]\n  3910: a3 = u8 [a1 + 0xc]\n  3913: a4 = u8 [a1 + 0xe]\n  3916: a5 = u8 [a1 + 0xf]\n  3919: a2 = a2 << 0x8\n  3922: a2 = a2 | a3\n  3925: a4 = a4 << 0x10\n  3928: a5 = a5 << 0x18\n  3931: a4 = a4 | a5\n  3934: a2 = a2 | a4\n  3937: a2 = a2 << 0x20\n  3940: a3 = a2 | a0\n  3943: a0 = u8 [a1 + 0x1]\n  3946: a2 = u8 [a1]\n  3948: a4 = u8 [a1 + 0x2]\n  3951: a5 = u8 [a1 + 0x3]\n  3954: a0 = a0 << 0x8\n  3957: a0 = a0 | a2\n  3960: a4 = a4 << 0x10\n  3963: a5 = a5 << 0x18\n  3966: a4 = a4 | a5\n  3969: a0 = a0 | a4\n  3972: a2 = u8 [a1 + 0x5]\n  3975: a4 = u8 [a1 + 0x4]\n  3978: a5 = u8 [a1 + 0x6]\n  3981: s1 = u8 [a1 + 0x7]\n  3984: a2 = a2 << 0x8\n  3987: a2 = a2 | a4\n  3990: a5 = a5 << 0x10\n  3993: s1 = s1 << 0x18\n  3996: a5 = a5 | s1\n  3999: a2 = a2 | a5\n  4002: a2 = a2 << 0x20\n  4005: a0 = a0 | a2\n  4008: a2 = u8 [a1 + 0x11]\n  4011: a4 = u8 [a1 + 0x10]\n  4014: a5 = u8 [a1 + 0x12]\n  4017: a1 = u8 [a1 + 0x13]\n  4020: a2 = a2 << 0x8\n  4023: a2 = a2 | a4\n  4026: a5 = a5 << 0x10\n  4029: a1 = a1 << 0x18\n  4032: a1 = a1 | a5\n  4035: a1 = a1 | a2\n  4038: a0 = 0 if t2 != 0\n  4040: a3 = 0 if t2 != 0\n  4042: a1 = 0 if t2 != 0\n  4044: a2 = u64 [sp]\n  4046: u64 [a2 + 24] = 0\n  4049: u64 [a2 + 0x10] = a1\n  4052: u64 [a2 + 0x8] = a3\n  4055: u64 [a2] = a0\n  4057: ra = u64 [sp + 0x58]\n  4060: s0 = u64 [sp + 0x50]\n  4063: s1 = u64 [sp + 0x48]\n  4066: sp = sp + 0x60\n  4069: ret\n      : @90 (gas: 8)\n  4071: a0 = u64 [sp + 0x30]\n  4074: a1 = u64 [sp + 0x38]\n  4077: a2 = u64 [sp + 0x28]\n  4080: a3 = u64 [sp + 0x20]\n  4083: a1 = a1 | a2\n  4086: a0 = a0 | a3\n  4089: a0 = a0 | a1\n  4092: jump @95 if a0 != 0\n      : @91 (gas: 2)\n  4096: a0 = i32 [0x20044]\n  4101: jump @95 if a0 <=u 3\n      : @92 (gas: 24)\n  4106: u64 [sp + 88] = 0\n  4109: u64 [sp + 80] = 0\n  4112: u64 [sp + 72] = 0\n  4115: u64 [sp + 64] = 0x2\n  4119: u64 [sp + 120] = 0\n  4122: u64 [sp + 112] = 0\n  4125: u64 [sp + 104] = 0\n  4128: u64 [sp + 96] = 0\n  4131: u32 [sp + 128] = 0x20\n  4136: i32 a1 = sp + 0x40\n  4139: i32 a3 = sp + 0x60\n  4142: i32 a4 = sp + 0x80\n  4146: a2 = 0xffffffffffffffff\n  4149: a0 = 0\n  4151: ecalli 8 // 'get_storage'\n  4153: a0 = u64 [sp + 0x70]\n  4156: u64 [sp + 0x8] = a0\n  4159: a0 = u64 [sp + 0x68]\n  4162: u64 [sp + 0x10] = a0\n  4165: a0 = u64 [sp + 0x60]\n  4168: u64 [sp + 0x18] = a0\n  4171: a0 = 0x40\n  4174: a1 = 0x20\n  4177: ra = 74, jump @0\n      : @93 [@dyn 37] (gas: 100)\n  4182: a1 = u8 [a0 + 0x11]\n  4185: a2 = u8 [a0 + 0x10]\n  4188: a3 = u8 [a0 + 0x12]\n  4191: a4 = u8 [a0 + 0x13]\n  4194: a1 = a1 << 0x8\n  4197: a1 = a1 | a2\n  4200: a3 = a3 << 0x10\n  4203: a4 = a4 << 0x18\n  4206: a3 = a3 | a4\n  4209: a1 = a1 | a3\n  4212: a2 = u8 [a0 + 0x15]\n  4215: a3 = u8 [a0 + 0x14]\n  4218: a4 = u8 [a0 + 0x16]\n  4221: a5 = u8 [a0 + 0x17]\n  4224: a2 = a2 << 0x8\n  4227: a2 = a2 | a3\n  4230: a4 = a4 << 0x10\n  4233: a5 = a5 << 0x18\n  4236: a4 = a4 | a5\n  4239: a2 = a2 | a4\n  4242: a2 = a2 << 0x20\n  4245: t0 = a2 | a1\n  4248: a2 = u8 [a0 + 0x1]\n  4251: a3 = u8 [a0]\n  4253: a4 = u8 [a0 + 0x2]\n  4256: a5 = u8 [a0 + 0x3]\n  4259: a2 = a2 << 0x8\n  4262: a2 = a2 | a3\n  4265: a4 = a4 << 0x10\n  4268: a5 = a5 << 0x18\n  4271: a4 = a4 | a5\n  4274: a2 = a2 | a4\n  4277: a3 = u8 [a0 + 0x5]\n  4280: a4 = u8 [a0 + 0x4]\n  4283: a5 = u8 [a0 + 0x6]\n  4286: s1 = u8 [a0 + 0x7]\n  4289: a3 = a3 << 0x8\n  4292: a3 = a3 | a4\n  4295: a5 = a5 << 0x10\n  4298: s1 = s1 << 0x18\n  4301: a5 = a5 | s1\n  4304: a3 = a3 | a5\n  4307: a3 = a3 << 0x20\n  4310: a2 = a2 | a3\n  4313: a3 = u8 [a0 + 0x19]\n  4316: a4 = u8 [a0 + 0x18]\n  4319: a5 = u8 [a0 + 0x1a]\n  4322: s1 = u8 [a0 + 0x1b]\n  4325: a3 = a3 << 0x8\n  4328: a3 = a3 | a4\n  4331: a5 = a5 << 0x10\n  4334: s1 = s1 << 0x18\n  4337: a5 = a5 | s1\n  4340: a3 = a3 | a5\n  4343: a4 = u8 [a0 + 0x1d]\n  4346: a5 = u8 [a0 + 0x1c]\n  4349: s1 = u8 [a0 + 0x1e]\n  4352: a1 = u8 [a0 + 0x1f]\n  4355: a4 = a4 << 0x8\n  4358: a4 = a4 | a5\n  4361: s1 = s1 << 0x10\n  4364: a1 = a1 << 0x18\n  4367: a1 = a1 | s1\n  4370: a1 = a1 | a4\n  4373: a1 = a1 << 0x20\n  4376: a3 = a3 | a1\n  4379: a1 = u8 [a0 + 0x9]\n  4382: a4 = u8 [a0 + 0x8]\n  4385: a5 = u8 [a0 + 0xa]\n  4388: s1 = u8 [a0 + 0xb]\n  4391: a1 = a1 << 0x8\n  4394: a1 = a1 | a4\n  4397: a5 = a5 << 0x10\n  4400: s1 = s1 << 0x18\n  4403: a5 = a5 | s1\n  4406: a1 = a1 | a5\n  4409: a4 = u8 [a0 + 0xd]\n  4412: a5 = u8 [a0 + 0xc]\n  4415: s1 = u8 [a0 + 0xe]\n  4418: a0 = u8 [a0 + 0xf]\n  4421: a4 = a4 << 0x8\n  4424: a4 = a4 | a5\n  4427: s1 = s1 << 0x10\n  4430: a0 = a0 << 0x18\n  4433: a0 = a0 | s1\n  4436: a0 = a0 | a4\n  4439: a0 = a0 << 0x20\n  4442: a0 = a0 | a1\n  4445: a1 = reverse a0\n  4447: a0 = reverse a3\n  4449: a2 = reverse a2\n  4451: a3 = reverse t0\n  4453: a2 = a2 | a3\n  4456: a3 = a0 | a1\n  4459: a3 = a3 | a2\n  4462: a3 = a3 >> 0x20\n  4465: a1 = a1 | a2\n  4468: a1 = a1 << 0x20\n  4471: a1 = a1 | a3\n  4474: jump @97 if a1 == 0\n      : @94 (gas: 1)\n  4477: trap\n      : @95 (gas: 3)\n  4478: a0 = 0\n  4480: a1 = 0\n  4482: ra = 76, jump @0\n      : @96 [@dyn 38] (gas: 5)\n  4487: i32 a1 = a0 + 0\n  4489: a0 = 0x1\n  4492: a2 = 0\n  4494: ecalli 13 // 'seal_return'\n  4496: fallthrough\n      : @97 (gas: 7)\n  4497: a1 = u64 [sp + 0x8]\n  4500: a1 = a1 << 0x20\n  4503: s1 = a1 >> 0x20\n  4506: i32 a0 = a0 + 0\n  4508: u64 [sp + 0x8] = a0\n  4511: a1 = 0x20\n  4514: ra = 78, jump @0\n      : @98 [@dyn 39] (gas: 58)\n  4519: a1 = reverse s1\n  4521: a2 = u64 [sp + 0x10]\n  4524: a2 = reverse a2\n  4526: a3 = u64 [sp + 0x18]\n  4529: a3 = reverse a3\n  4531: a4 = a3 >> 0x38\n  4534: u8 [a0 + 0x1f] = a4\n  4537: a4 = a3 >> 0x30\n  4540: u8 [a0 + 0x1e] = a4\n  4543: a4 = a3 >> 0x28\n  4546: u8 [a0 + 0x1d] = a4\n  4549: a4 = a3 >> 0x20\n  4552: u8 [a0 + 0x1c] = a4\n  4555: a4 = a3 >> 0x18\n  4558: u8 [a0 + 0x1b] = a4\n  4561: a4 = a3 >> 0x10\n  4564: u8 [a0 + 0x1a] = a4\n  4567: a4 = a3 >> 0x8\n  4570: u8 [a0 + 0x19] = a4\n  4573: u8 [a0 + 0x18] = a3\n  4576: u8 [a0 + 0x10] = a2\n  4579: u8 [a0 + 11] = 0\n  4582: u8 [a0 + 10] = 0\n  4585: u8 [a0 + 9] = 0\n  4588: u8 [a0 + 7] = 0\n  4591: u8 [a0 + 6] = 0\n  4594: u8 [a0 + 5] = 0\n  4597: u8 [a0 + 4] = 0\n  4600: u8 [a0 + 3] = 0\n  4603: u8 [a0 + 2] = 0\n  4606: u8 [a0 + 1] = 0\n  4609: u8 [a0 + 0] = 0\n  4611: a3 = a2 >> 0x38\n  4614: u8 [a0 + 0x17] = a3\n  4617: a3 = a2 >> 0x30\n  4620: u8 [a0 + 0x16] = a3\n  4623: a3 = a2 >> 0x28\n  4626: u8 [a0 + 0x15] = a3\n  4629: a3 = a2 >> 0x20\n  4632: u8 [a0 + 0x14] = a3\n  4635: a3 = a2 >> 0x18\n  4638: u8 [a0 + 0x13] = a3\n  4641: a3 = a2 >> 0x10\n  4644: u8 [a0 + 0x12] = a3\n  4647: a2 = a2 >> 0x8\n  4650: u8 [a0 + 0x11] = a2\n  4653: u8 [a0 + 0x8] = a1\n  4656: a2 = a1 >> 0x38\n  4659: u8 [a0 + 0xf] = a2\n  4662: a2 = a1 >> 0x30\n  4665: u8 [a0 + 0xe] = a2\n  4668: a2 = a1 >> 0x28\n  4671: u8 [a0 + 0xd] = a2\n  4674: a1 = a1 >> 0x20\n  4677: u8 [a0 + 0xc] = a1\n  4680: a1 = 0x20\n  4683: a0 = u64 [sp + 0x8]\n  4686: ra = 80, jump @0\n      : @99 [@dyn 40] (gas: 6)\n  4691: i32 a1 = a0 + 0\n  4693: a2 = 0x20\n  4696: a0 = 0\n  4698: ra = 0x52\n  4701: ecalli 13 // 'seal_return'\n  4703: fallthrough\n      : @100 [@dyn 41] (gas: 36)\n  4704: sp = sp + 0xffffffffffffffa0\n  4707: u64 [sp + 0x58] = ra\n  4710: u64 [sp + 0x50] = s0\n  4713: u64 [sp + 0x48] = s1\n  4716: s0 = sp + 0x60\n  4719: sp = sp & 0xffffffffffffffe0\n  4722: s1 = a0\n  4724: u64 [sp + 24] = 0\n  4727: u64 [sp + 16] = 0\n  4730: u64 [sp + 8] = 0\n  4733: u64 [sp + 0] = 0x1\n  4736: u64 [sp + 56] = 0\n  4739: u64 [sp + 48] = 0\n  4742: u64 [sp + 40] = 0\n  4745: u64 [sp + 32] = 0\n  4748: u32 [sp + 64] = 0x20\n  4752: i32 a1 = sp + 0\n  4754: i32 a3 = sp + 0x20\n  4757: i32 a4 = sp + 0x40\n  4760: a2 = 0xffffffffffffffff\n  4763: a0 = 0\n  4765: ecalli 8 // 'get_storage'\n  4767: a0 = u64 [sp + 0x38]\n  4770: a1 = u64 [sp + 0x30]\n  4773: a2 = u64 [sp + 0x28]\n  4776: a3 = u64 [sp + 0x20]\n  4779: u64 [s1 + 0x18] = a0\n  4782: u64 [s1 + 0x10] = a1\n  4785: u64 [s1 + 0x8] = a2\n  4788: u64 [s1] = a3\n  4790: sp = s0 + 0xffffffffffffffa0\n  4793: ra = u64 [sp + 0x58]\n  4796: s0 = u64 [sp + 0x50]\n  4799: s1 = u64 [sp + 0x48]\n  4802: sp = sp + 0x60\n  4805: ret\n      : @101 (gas: 8)\n  4807: a0 = u64 [sp + 0x30]\n  4810: a1 = u64 [sp + 0x38]\n  4813: a2 = u64 [sp + 0x28]\n  4816: a3 = u64 [sp + 0x20]\n  4819: a1 = a1 | a2\n  4822: a0 = a0 | a3\n  4825: a0 = a0 | a1\n  4828: jump @106 if a0 != 0\n      : @102 (gas: 2)\n  4832: a0 = i32 [0x20044]\n  4837: jump @106 if a0 <=u 3\n      : @103 (gas: 26)\n  4842: u64 [sp + 88] = 0\n  4845: u64 [sp + 80] = 0\n  4848: u64 [sp + 72] = 0\n  4851: u64 [sp + 64] = 0x1\n  4855: u64 [sp + 120] = 0\n  4858: u64 [sp + 112] = 0\n  4861: u64 [sp + 104] = 0\n  4864: u64 [sp + 96] = 0\n  4867: u32 [sp + 128] = 0x20\n  4872: i32 a1 = sp + 0x40\n  4875: i32 a3 = sp + 0x60\n  4878: i32 a4 = sp + 0x80\n  4882: a2 = 0xffffffffffffffff\n  4885: a0 = 0\n  4887: ecalli 8 // 'get_storage'\n  4889: a0 = u64 [sp + 0x78]\n  4892: u64 [sp] = a0\n  4894: a0 = u64 [sp + 0x70]\n  4897: u64 [sp + 0x8] = a0\n  4900: a0 = u64 [sp + 0x68]\n  4903: u64 [sp + 0x10] = a0\n  4906: a0 = u64 [sp + 0x60]\n  4909: u64 [sp + 0x18] = a0\n  4912: a0 = 0x40\n  4915: a1 = 0x20\n  4918: ra = 84, jump @0\n      : @104 [@dyn 42] (gas: 100)\n  4923: a1 = u8 [a0 + 0x11]\n  4926: a2 = u8 [a0 + 0x10]\n  4929: a3 = u8 [a0 + 0x12]\n  4932: a4 = u8 [a0 + 0x13]\n  4935: a1 = a1 << 0x8\n  4938: a1 = a1 | a2\n  4941: a3 = a3 << 0x10\n  4944: a4 = a4 << 0x18\n  4947: a3 = a3 | a4\n  4950: a1 = a1 | a3\n  4953: a2 = u8 [a0 + 0x15]\n  4956: a3 = u8 [a0 + 0x14]\n  4959: a4 = u8 [a0 + 0x16]\n  4962: a5 = u8 [a0 + 0x17]\n  4965: a2 = a2 << 0x8\n  4968: a2 = a2 | a3\n  4971: a4 = a4 << 0x10\n  4974: a5 = a5 << 0x18\n  4977: a4 = a4 | a5\n  4980: a2 = a2 | a4\n  4983: a2 = a2 << 0x20\n  4986: t0 = a2 | a1\n  4989: a2 = u8 [a0 + 0x1]\n  4992: a3 = u8 [a0]\n  4994: a4 = u8 [a0 + 0x2]\n  4997: a5 = u8 [a0 + 0x3]\n  5000: a2 = a2 << 0x8\n  5003: a2 = a2 | a3\n  5006: a4 = a4 << 0x10\n  5009: a5 = a5 << 0x18\n  5012: a4 = a4 | a5\n  5015: a2 = a2 | a4\n  5018: a3 = u8 [a0 + 0x5]\n  5021: a4 = u8 [a0 + 0x4]\n  5024: a5 = u8 [a0 + 0x6]\n  5027: s1 = u8 [a0 + 0x7]\n  5030: a3 = a3 << 0x8\n  5033: a3 = a3 | a4\n  5036: a5 = a5 << 0x10\n  5039: s1 = s1 << 0x18\n  5042: a5 = a5 | s1\n  5045: a3 = a3 | a5\n  5048: a3 = a3 << 0x20\n  5051: a2 = a2 | a3\n  5054: a3 = u8 [a0 + 0x19]\n  5057: a4 = u8 [a0 + 0x18]\n  5060: a5 = u8 [a0 + 0x1a]\n  5063: s1 = u8 [a0 + 0x1b]\n  5066: a3 = a3 << 0x8\n  5069: a3 = a3 | a4\n  5072: a5 = a5 << 0x10\n  5075: s1 = s1 << 0x18\n  5078: a5 = a5 | s1\n  5081: a3 = a3 | a5\n  5084: a4 = u8 [a0 + 0x1d]\n  5087: a5 = u8 [a0 + 0x1c]\n  5090: s1 = u8 [a0 + 0x1e]\n  5093: a1 = u8 [a0 + 0x1f]\n  5096: a4 = a4 << 0x8\n  5099: a4 = a4 | a5\n  5102: s1 = s1 << 0x10\n  5105: a1 = a1 << 0x18\n  5108: a1 = a1 | s1\n  5111: a1 = a1 | a4\n  5114: a1 = a1 << 0x20\n  5117: a3 = a3 | a1\n  5120: a1 = u8 [a0 + 0x9]\n  5123: a4 = u8 [a0 + 0x8]\n  5126: a5 = u8 [a0 + 0xa]\n  5129: s1 = u8 [a0 + 0xb]\n  5132: a1 = a1 << 0x8\n  5135: a1 = a1 | a4\n  5138: a5 = a5 << 0x10\n  5141: s1 = s1 << 0x18\n  5144: a5 = a5 | s1\n  5147: a1 = a1 | a5\n  5150: a4 = u8 [a0 + 0xd]\n  5153: a5 = u8 [a0 + 0xc]\n  5156: s1 = u8 [a0 + 0xe]\n  5159: a0 = u8 [a0 + 0xf]\n  5162: a4 = a4 << 0x8\n  5165: a4 = a4 | a5\n  5168: s1 = s1 << 0x10\n  5171: a0 = a0 << 0x18\n  5174: a0 = a0 | s1\n  5177: a0 = a0 | a4\n  5180: a0 = a0 << 0x20\n  5183: a0 = a0 | a1\n  5186: a1 = reverse a0\n  5188: a0 = reverse a3\n  5190: a2 = reverse a2\n  5192: a3 = reverse t0\n  5194: a2 = a2 | a3\n  5197: a3 = a0 | a1\n  5200: a3 = a3 | a2\n  5203: a3 = a3 >> 0x20\n  5206: a1 = a1 | a2\n  5209: a1 = a1 << 0x20\n  5212: a1 = a1 | a3\n  5215: jump @108 if a1 == 0\n      : @105 (gas: 1)\n  5218: trap\n      : @106 (gas: 3)\n  5219: a0 = 0\n  5221: a1 = 0\n  5223: ra = 86, jump @0\n      : @107 [@dyn 43] (gas: 5)\n  5228: i32 a1 = a0 + 0\n  5230: a0 = 0x1\n  5233: a2 = 0\n  5235: ecalli 13 // 'seal_return'\n  5237: fallthrough\n      : @108 (gas: 4)\n  5238: i32 s1 = a0 + 0\n  5240: a1 = 0x20\n  5243: a0 = s1\n  5245: ra = 88, jump @0\n      : @109 [@dyn 44] (gas: 71)\n  5250: a1 = u64 [sp]\n  5252: a1 = reverse a1\n  5254: a2 = u64 [sp + 0x8]\n  5257: a2 = reverse a2\n  5259: a3 = u64 [sp + 0x10]\n  5262: a3 = reverse a3\n  5264: a4 = u64 [sp + 0x18]\n  5267: a4 = reverse a4\n  5269: a5 = a4 >> 0x38\n  5272: u8 [a0 + 0x1f] = a5\n  5275: a5 = a4 >> 0x30\n  5278: u8 [a0 + 0x1e] = a5\n  5281: a5 = a4 >> 0x28\n  5284: u8 [a0 + 0x1d] = a5\n  5287: a5 = a4 >> 0x20\n  5290: u8 [a0 + 0x1c] = a5\n  5293: a5 = a4 >> 0x18\n  5296: u8 [a0 + 0x1b] = a5\n  5299: a5 = a4 >> 0x10\n  5302: u8 [a0 + 0x1a] = a5\n  5305: a5 = a4 >> 0x8\n  5308: u8 [a0 + 0x19] = a5\n  5311: u8 [a0 + 0x18] = a4\n  5314: u8 [a0 + 0x10] = a3\n  5317: a4 = a3 >> 0x38\n  5320: u8 [a0 + 0x17] = a4\n  5323: a4 = a3 >> 0x30\n  5326: u8 [a0 + 0x16] = a4\n  5329: a4 = a3 >> 0x28\n  5332: u8 [a0 + 0x15] = a4\n  5335: a4 = a3 >> 0x20\n  5338: u8 [a0 + 0x14] = a4\n  5341: a4 = a3 >> 0x18\n  5344: u8 [a0 + 0x13] = a4\n  5347: a4 = a3 >> 0x10\n  5350: u8 [a0 + 0x12] = a4\n  5353: a3 = a3 >> 0x8\n  5356: u8 [a0 + 0x11] = a3\n  5359: u8 [a0 + 0x8] = a2\n  5362: a3 = a2 >> 0x38\n  5365: u8 [a0 + 0xf] = a3\n  5368: a3 = a2 >> 0x30\n  5371: u8 [a0 + 0xe] = a3\n  5374: a3 = a2 >> 0x28\n  5377: u8 [a0 + 0xd] = a3\n  5380: a3 = a2 >> 0x20\n  5383: u8 [a0 + 0xc] = a3\n  5386: a3 = a2 >> 0x18\n  5389: u8 [a0 + 0xb] = a3\n  5392: a3 = a2 >> 0x10\n  5395: u8 [a0 + 0xa] = a3\n  5398: a2 = a2 >> 0x8\n  5401: u8 [a0 + 0x9] = a2\n  5404: u8 [a0] = a1\n  5406: a2 = a1 >> 0x38\n  5409: u8 [a0 + 0x7] = a2\n  5412: a2 = a1 >> 0x30\n  5415: u8 [a0 + 0x6] = a2\n  5418: a2 = a1 >> 0x28\n  5421: u8 [a0 + 0x5] = a2\n  5424: a2 = a1 >> 0x20\n  5427: u8 [a0 + 0x4] = a2\n  5430: a2 = a1 >> 0x18\n  5433: u8 [a0 + 0x3] = a2\n  5436: a2 = a1 >> 0x10\n  5439: u8 [a0 + 0x2] = a2\n  5442: a1 = a1 >> 0x8\n  5445: u8 [a0 + 0x1] = a1\n  5448: a1 = 0x20\n  5451: a0 = s1\n  5453: ra = 90, jump @0\n      : @110 [@dyn 45] (gas: 6)\n  5458: i32 a1 = a0 + 0\n  5460: a2 = 0x20\n  5463: a0 = 0\n  5465: ra = 0x5c\n  5468: ecalli 13 // 'seal_return'\n  5470: fallthrough\n      : @111 [@dyn 46] (gas: 1)\n  5471: ret\n      : @112 (gas: 7)\n  5473: sp = sp + 0xffffffffffffffa0\n  5476: u64 [sp + 0x58] = ra\n  5479: u64 [sp + 0x50] = s0\n  5482: s0 = sp + 0x60\n  5485: sp = sp & 0xffffffffffffffe0\n  5488: a0 = i32 [0x20044]\n  5493: jump @117 if a0 <=u 35\n      : @113 (gas: 44)\n  5498: i32 a0 = sp + 0x20\n  5501: a1 = 0x4\n  5504: ecalli 4 // 'call_data_load'\n  5506: a1 = u64 [sp + 0x20]\n  5509: a0 = u64 [sp + 0x28]\n  5512: a2 = u64 [sp + 0x30]\n  5515: a3 = u64 [sp + 0x38]\n  5518: u64 [sp + 0x18] = a3\n  5521: u64 [sp + 0x10] = a2\n  5524: u64 [sp + 0x8] = a0\n  5527: a0 = sp\n  5529: u64 [sp] = a1\n  5531: ra = 0x5e\n  5534: sp = sp + 0xfffffffffffffd60\n  5538: u64 [sp + 0x298] = ra\n  5542: u64 [sp + 0x290] = s0\n  5546: u64 [sp + 0x288] = s1\n  5550: s0 = sp + 0x2a0\n  5554: sp = sp & 0xffffffffffffffe0\n  5557: s1 = sp\n  5559: a1 = u64 [a0 + 0x18]\n  5562: u64 [s1 + 0x78] = a1\n  5565: a1 = u64 [a0 + 0x10]\n  5568: u64 [s1 + 0x70] = a1\n  5571: a1 = u64 [a0 + 0x8]\n  5574: u64 [s1 + 0x60] = a1\n  5577: a0 = u64 [a0]\n  5579: u64 [s1 + 0x68] = a0\n  5582: u64 [s1 + 536] = 0\n  5586: u64 [s1 + 528] = 0\n  5590: u64 [s1 + 520] = 0\n  5594: u64 [s1 + 512] = 0x2\n  5599: u64 [s1 + 600] = 0\n  5603: u64 [s1 + 592] = 0\n  5607: u64 [s1 + 584] = 0\n  5611: u64 [s1 + 576] = 0\n  5615: u32 [s1 + 544] = 0x20\n  5620: i32 a1 = s1 + 0x200\n  5624: i32 a3 = s1 + 0x240\n  5628: i32 a4 = s1 + 0x220\n  5632: a2 = 0xffffffffffffffff\n  5635: a0 = 0\n  5637: ecalli 8 // 'get_storage'\n  5639: jump @319\n      : @114 [@dyn 47] (gas: 3)\n  5642: a0 = 0x40\n  5645: a1 = 0x20\n  5648: ra = 96, jump @0\n      : @115 [@dyn 48] (gas: 100)\n  5653: a1 = u8 [a0 + 0x11]\n  5656: a2 = u8 [a0 + 0x10]\n  5659: a3 = u8 [a0 + 0x12]\n  5662: a4 = u8 [a0 + 0x13]\n  5665: a1 = a1 << 0x8\n  5668: a1 = a1 | a2\n  5671: a3 = a3 << 0x10\n  5674: a4 = a4 << 0x18\n  5677: a3 = a3 | a4\n  5680: a1 = a1 | a3\n  5683: a2 = u8 [a0 + 0x15]\n  5686: a3 = u8 [a0 + 0x14]\n  5689: a4 = u8 [a0 + 0x16]\n  5692: a5 = u8 [a0 + 0x17]\n  5695: a2 = a2 << 0x8\n  5698: a2 = a2 | a3\n  5701: a4 = a4 << 0x10\n  5704: a5 = a5 << 0x18\n  5707: a4 = a4 | a5\n  5710: a2 = a2 | a4\n  5713: a2 = a2 << 0x20\n  5716: t0 = a2 | a1\n  5719: a2 = u8 [a0 + 0x1]\n  5722: a3 = u8 [a0]\n  5724: a4 = u8 [a0 + 0x2]\n  5727: a5 = u8 [a0 + 0x3]\n  5730: a2 = a2 << 0x8\n  5733: a2 = a2 | a3\n  5736: a4 = a4 << 0x10\n  5739: a5 = a5 << 0x18\n  5742: a4 = a4 | a5\n  5745: a2 = a2 | a4\n  5748: a3 = u8 [a0 + 0x5]\n  5751: a4 = u8 [a0 + 0x4]\n  5754: a5 = u8 [a0 + 0x6]\n  5757: a1 = u8 [a0 + 0x7]\n  5760: a3 = a3 << 0x8\n  5763: a3 = a3 | a4\n  5766: a5 = a5 << 0x10\n  5769: a1 = a1 << 0x18\n  5772: a1 = a1 | a5\n  5775: a1 = a1 | a3\n  5778: a1 = a1 << 0x20\n  5781: t1 = a1 | a2\n  5784: a1 = u8 [a0 + 0x19]\n  5787: a3 = u8 [a0 + 0x18]\n  5790: a4 = u8 [a0 + 0x1a]\n  5793: a5 = u8 [a0 + 0x1b]\n  5796: a1 = a1 << 0x8\n  5799: a1 = a1 | a3\n  5802: a4 = a4 << 0x10\n  5805: a5 = a5 << 0x18\n  5808: a4 = a4 | a5\n  5811: a1 = a1 | a4\n  5814: a3 = u8 [a0 + 0x1d]\n  5817: a4 = u8 [a0 + 0x1c]\n  5820: a5 = u8 [a0 + 0x1e]\n  5823: a2 = u8 [a0 + 0x1f]\n  5826: a3 = a3 << 0x8\n  5829: a3 = a3 | a4\n  5832: a5 = a5 << 0x10\n  5835: a2 = a2 << 0x18\n  5838: a2 = a2 | a5\n  5841: a2 = a2 | a3\n  5844: a2 = a2 << 0x20\n  5847: a3 = a2 | a1\n  5850: a1 = u8 [a0 + 0x9]\n  5853: a2 = u8 [a0 + 0x8]\n  5856: a4 = u8 [a0 + 0xa]\n  5859: a5 = u8 [a0 + 0xb]\n  5862: a1 = a1 << 0x8\n  5865: a1 = a1 | a2\n  5868: a4 = a4 << 0x10\n  5871: a5 = a5 << 0x18\n  5874: a4 = a4 | a5\n  5877: a1 = a1 | a4\n  5880: a2 = u8 [a0 + 0xd]\n  5883: a4 = u8 [a0 + 0xc]\n  5886: a5 = u8 [a0 + 0xe]\n  5889: a0 = u8 [a0 + 0xf]\n  5892: a2 = a2 << 0x8\n  5895: a2 = a2 | a4\n  5898: a5 = a5 << 0x10\n  5901: a0 = a0 << 0x18\n  5904: a0 = a0 | a5\n  5907: a0 = a0 | a2\n  5910: a0 = a0 << 0x20\n  5913: a0 = a0 | a1\n  5916: a1 = reverse a0\n  5918: a0 = reverse a3\n  5920: a2 = reverse t1\n  5922: a3 = reverse t0\n  5924: a2 = a2 | a3\n  5927: a3 = a0 | a1\n  5930: a3 = a3 | a2\n  5933: a3 = a3 >> 0x20\n  5936: a1 = a1 | a2\n  5939: a1 = a1 << 0x20\n  5942: a1 = a1 | a3\n  5945: jump @119 if a1 == 0\n      : @116 (gas: 1)\n  5948: trap\n      : @117 (gas: 3)\n  5949: a0 = 0\n  5951: a1 = 0\n  5953: ra = 98, jump @0\n      : @118 [@dyn 49] (gas: 7)\n  5958: i32 a1 = a0 + 0\n  5960: a0 = 0x1\n  5963: a2 = 0\n  5965: ecalli 13 // 'seal_return'\n  5967: i32 a0 = a0 + 0\n  5969: ra = 0x64\n  5972: jump @0\n      : @119 (gas: 2)\n  5975: i32 a0 = a0 + 0\n  5977: ra = 100, jump @0\n      : @120 [@dyn 50] (gas: 6)\n  5982: i32 a1 = a0 + 0\n  5984: a0 = 0\n  5986: a2 = 0\n  5988: ra = 0x66\n  5991: ecalli 13 // 'seal_return'\n  5993: fallthrough\n      : @121 [@dyn 51] (gas: 6)\n  5994: a1 = u8 [a1]\n  5996: u64 [a0 + 24] = 0\n  5999: u64 [a0 + 16] = 0\n  6002: u64 [a0 + 8] = 0\n  6005: u64 [a0] = a1\n  6007: ret\n      : @122 (gas: 8)\n  6009: a0 = u64 [sp + 0x30]\n  6012: a1 = u64 [sp + 0x38]\n  6015: a2 = u64 [sp + 0x28]\n  6018: a3 = u64 [sp + 0x20]\n  6021: a1 = a1 | a2\n  6024: a0 = a0 | a3\n  6027: a0 = a0 | a1\n  6030: jump @127 if a0 != 0\n      : @123 (gas: 2)\n  6034: a0 = i32 [0x20044]\n  6039: jump @127 if a0 <=u 3\n      : @124 (gas: 20)\n  6044: u64 [sp + 88] = 0\n  6047: u64 [sp + 80] = 0\n  6050: u64 [sp + 72] = 0\n  6053: u64 [sp + 64] = 0x2\n  6057: u64 [sp + 120] = 0\n  6060: u64 [sp + 112] = 0\n  6063: u64 [sp + 104] = 0\n  6066: u64 [sp + 96] = 0\n  6069: u32 [sp + 128] = 0x20\n  6074: i32 a1 = sp + 0x40\n  6077: i32 a3 = sp + 0x60\n  6080: i32 a4 = sp + 0x80\n  6084: a2 = 0xffffffffffffffff\n  6087: a0 = 0\n  6089: ecalli 8 // 'get_storage'\n  6091: a0 = u64 [sp + 0x70]\n  6094: u64 [sp + 0x18] = a0\n  6097: a0 = 0x40\n  6100: a1 = 0x20\n  6103: ra = 104, jump @0\n      : @125 [@dyn 52] (gas: 100)\n  6108: a1 = u8 [a0 + 0x11]\n  6111: a2 = u8 [a0 + 0x10]\n  6114: a3 = u8 [a0 + 0x12]\n  6117: a4 = u8 [a0 + 0x13]\n  6120: a1 = a1 << 0x8\n  6123: a1 = a1 | a2\n  6126: a3 = a3 << 0x10\n  6129: a4 = a4 << 0x18\n  6132: a3 = a3 | a4\n  6135: a1 = a1 | a3\n  6138: a2 = u8 [a0 + 0x15]\n  6141: a3 = u8 [a0 + 0x14]\n  6144: a4 = u8 [a0 + 0x16]\n  6147: a5 = u8 [a0 + 0x17]\n  6150: a2 = a2 << 0x8\n  6153: a2 = a2 | a3\n  6156: a4 = a4 << 0x10\n  6159: a5 = a5 << 0x18\n  6162: a4 = a4 | a5\n  6165: a2 = a2 | a4\n  6168: a2 = a2 << 0x20\n  6171: t0 = a2 | a1\n  6174: a2 = u8 [a0 + 0x1]\n  6177: a3 = u8 [a0]\n  6179: a4 = u8 [a0 + 0x2]\n  6182: a5 = u8 [a0 + 0x3]\n  6185: a2 = a2 << 0x8\n  6188: a2 = a2 | a3\n  6191: a4 = a4 << 0x10\n  6194: a5 = a5 << 0x18\n  6197: a4 = a4 | a5\n  6200: a2 = a2 | a4\n  6203: a3 = u8 [a0 + 0x5]\n  6206: a4 = u8 [a0 + 0x4]\n  6209: a5 = u8 [a0 + 0x6]\n  6212: s1 = u8 [a0 + 0x7]\n  6215: a3 = a3 << 0x8\n  6218: a3 = a3 | a4\n  6221: a5 = a5 << 0x10\n  6224: s1 = s1 << 0x18\n  6227: a5 = a5 | s1\n  6230: a3 = a3 | a5\n  6233: a3 = a3 << 0x20\n  6236: a2 = a2 | a3\n  6239: a3 = u8 [a0 + 0x19]\n  6242: a4 = u8 [a0 + 0x18]\n  6245: a5 = u8 [a0 + 0x1a]\n  6248: s1 = u8 [a0 + 0x1b]\n  6251: a3 = a3 << 0x8\n  6254: a3 = a3 | a4\n  6257: a5 = a5 << 0x10\n  6260: s1 = s1 << 0x18\n  6263: a5 = a5 | s1\n  6266: a3 = a3 | a5\n  6269: a4 = u8 [a0 + 0x1d]\n  6272: a5 = u8 [a0 + 0x1c]\n  6275: s1 = u8 [a0 + 0x1e]\n  6278: a1 = u8 [a0 + 0x1f]\n  6281: a4 = a4 << 0x8\n  6284: a4 = a4 | a5\n  6287: s1 = s1 << 0x10\n  6290: a1 = a1 << 0x18\n  6293: a1 = a1 | s1\n  6296: a1 = a1 | a4\n  6299: a1 = a1 << 0x20\n  6302: a3 = a3 | a1\n  6305: a1 = u8 [a0 + 0x9]\n  6308: a4 = u8 [a0 + 0x8]\n  6311: a5 = u8 [a0 + 0xa]\n  6314: s1 = u8 [a0 + 0xb]\n  6317: a1 = a1 << 0x8\n  6320: a1 = a1 | a4\n  6323: a5 = a5 << 0x10\n  6326: s1 = s1 << 0x18\n  6329: a5 = a5 | s1\n  6332: a1 = a1 | a5\n  6335: a4 = u8 [a0 + 0xd]\n  6338: a5 = u8 [a0 + 0xc]\n  6341: s1 = u8 [a0 + 0xe]\n  6344: a0 = u8 [a0 + 0xf]\n  6347: a4 = a4 << 0x8\n  6350: a4 = a4 | a5\n  6353: s1 = s1 << 0x10\n  6356: a0 = a0 << 0x18\n  6359: a0 = a0 | s1\n  6362: a0 = a0 | a4\n  6365: a0 = a0 << 0x20\n  6368: a0 = a0 | a1\n  6371: a1 = reverse a0\n  6373: a0 = reverse a3\n  6375: a2 = reverse a2\n  6377: a3 = reverse t0\n  6379: a2 = a2 | a3\n  6382: a3 = a0 | a1\n  6385: a3 = a3 | a2\n  6388: a3 = a3 >> 0x20\n  6391: a1 = a1 | a2\n  6394: a1 = a1 << 0x20\n  6397: a1 = a1 | a3\n  6400: jump @129 if a1 == 0\n      : @126 (gas: 1)\n  6403: trap\n      : @127 (gas: 3)\n  6404: a0 = 0\n  6406: a1 = 0\n  6408: ra = 106, jump @0\n      : @128 [@dyn 53] (gas: 5)\n  6413: i32 a1 = a0 + 0\n  6415: a0 = 0x1\n  6418: a2 = 0\n  6420: ecalli 13 // 'seal_return'\n  6422: fallthrough\n      : @129 (gas: 9)\n  6423: a1 = 0xff00000000\n  6433: a2 = u64 [sp + 0x18]\n  6436: a1 = a1 & a2\n  6439: a1 = a1 >u 0\n  6441: u64 [sp + 0x18] = a1\n  6444: i32 s1 = a0 + 0\n  6446: a1 = 0x20\n  6449: a0 = s1\n  6451: ra = 108, jump @0\n      : @130 [@dyn 54] (gas: 36)\n  6456: u8 [a0 + 30] = 0\n  6459: u8 [a0 + 29] = 0\n  6462: u8 [a0 + 28] = 0\n  6465: u8 [a0 + 27] = 0\n  6468: u8 [a0 + 26] = 0\n  6471: u8 [a0 + 25] = 0\n  6474: u8 [a0 + 24] = 0\n  6477: u8 [a0 + 23] = 0\n  6480: u8 [a0 + 22] = 0\n  6483: u8 [a0 + 21] = 0\n  6486: u8 [a0 + 20] = 0\n  6489: u8 [a0 + 19] = 0\n  6492: u8 [a0 + 18] = 0\n  6495: u8 [a0 + 17] = 0\n  6498: u8 [a0 + 16] = 0\n  6501: u8 [a0 + 15] = 0\n  6504: u8 [a0 + 14] = 0\n  6507: u8 [a0 + 13] = 0\n  6510: u8 [a0 + 12] = 0\n  6513: u8 [a0 + 11] = 0\n  6516: u8 [a0 + 10] = 0\n  6519: u8 [a0 + 9] = 0\n  6522: u8 [a0 + 8] = 0\n  6525: u8 [a0 + 7] = 0\n  6528: u8 [a0 + 6] = 0\n  6531: u8 [a0 + 5] = 0\n  6534: u8 [a0 + 4] = 0\n  6537: u8 [a0 + 3] = 0\n  6540: u8 [a0 + 2] = 0\n  6543: u8 [a0 + 1] = 0\n  6546: u8 [a0 + 0] = 0\n  6548: a1 = u64 [sp + 0x18]\n  6551: u8 [a0 + 0x1f] = a1\n  6554: a1 = 0x20\n  6557: a0 = s1\n  6559: ra = 110, jump @0\n      : @131 [@dyn 55] (gas: 6)\n  6564: i32 a1 = a0 + 0\n  6566: a2 = 0x20\n  6569: a0 = 0\n  6571: ra = 0x70\n  6574: ecalli 13 // 'seal_return'\n  6576: fallthrough\n      : @132 [@dyn 56] (gas: 33)\n  6577: sp = sp + 0xffffffffffffffa0\n  6580: u64 [sp + 0x58] = ra\n  6583: u64 [sp + 0x50] = s0\n  6586: u64 [sp + 0x48] = s1\n  6589: s0 = sp + 0x60\n  6592: sp = sp & 0xffffffffffffffe0\n  6595: s1 = a0\n  6597: u64 [sp + 24] = 0\n  6600: u64 [sp + 16] = 0\n  6603: u64 [sp + 8] = 0\n  6606: u64 [sp + 0] = 0x2\n  6609: u64 [sp + 56] = 0\n  6612: u64 [sp + 48] = 0\n  6615: u64 [sp + 40] = 0\n  6618: u64 [sp + 32] = 0\n  6621: u32 [sp + 64] = 0x20\n  6625: i32 a1 = sp + 0\n  6627: i32 a3 = sp + 0x20\n  6630: i32 a4 = sp + 0x40\n  6633: a2 = 0xffffffffffffffff\n  6636: a0 = 0\n  6638: ecalli 8 // 'get_storage'\n  6640: a0 = u8 [sp + 0x35]\n  6643: u64 [s1 + 24] = 0\n  6646: u64 [s1 + 16] = 0\n  6649: u64 [s1 + 8] = 0\n  6652: u64 [s1] = a0\n  6654: sp = s0 + 0xffffffffffffffa0\n  6657: ra = u64 [sp + 0x58]\n  6660: s0 = u64 [sp + 0x50]\n  6663: s1 = u64 [sp + 0x48]\n  6666: sp = sp + 0x60\n  6669: ret\n      : @133 (gas: 8)\n  6671: a0 = u64 [sp + 0x30]\n  6674: a1 = u64 [sp + 0x38]\n  6677: a2 = u64 [sp + 0x28]\n  6680: a3 = u64 [sp + 0x20]\n  6683: a1 = a1 | a2\n  6686: a0 = a0 | a3\n  6689: a0 = a0 | a1\n  6692: jump @138 if a0 != 0\n      : @134 (gas: 2)\n  6696: a0 = i32 [0x20044]\n  6701: jump @138 if a0 <=u 3\n      : @135 (gas: 20)\n  6706: u64 [sp + 88] = 0\n  6709: u64 [sp + 80] = 0\n  6712: u64 [sp + 72] = 0\n  6715: u64 [sp + 64] = 0x2\n  6719: u64 [sp + 120] = 0\n  6722: u64 [sp + 112] = 0\n  6725: u64 [sp + 104] = 0\n  6728: u64 [sp + 96] = 0\n  6731: u32 [sp + 128] = 0x20\n  6736: i32 a1 = sp + 0x40\n  6739: i32 a3 = sp + 0x60\n  6742: i32 a4 = sp + 0x80\n  6746: a2 = 0xffffffffffffffff\n  6749: a0 = 0\n  6751: ecalli 8 // 'get_storage'\n  6753: a0 = u64 [sp + 0x70]\n  6756: u64 [sp + 0x18] = a0\n  6759: a0 = 0x40\n  6762: a1 = 0x20\n  6765: ra = 114, jump @0\n      : @136 [@dyn 57] (gas: 100)\n  6770: a1 = u8 [a0 + 0x11]\n  6773: a2 = u8 [a0 + 0x10]\n  6776: a3 = u8 [a0 + 0x12]\n  6779: a4 = u8 [a0 + 0x13]\n  6782: a1 = a1 << 0x8\n  6785: a1 = a1 | a2\n  6788: a3 = a3 << 0x10\n  6791: a4 = a4 << 0x18\n  6794: a3 = a3 | a4\n  6797: a1 = a1 | a3\n  6800: a2 = u8 [a0 + 0x15]\n  6803: a3 = u8 [a0 + 0x14]\n  6806: a4 = u8 [a0 + 0x16]\n  6809: a5 = u8 [a0 + 0x17]\n  6812: a2 = a2 << 0x8\n  6815: a2 = a2 | a3\n  6818: a4 = a4 << 0x10\n  6821: a5 = a5 << 0x18\n  6824: a4 = a4 | a5\n  6827: a2 = a2 | a4\n  6830: a2 = a2 << 0x20\n  6833: t0 = a2 | a1\n  6836: a2 = u8 [a0 + 0x1]\n  6839: a3 = u8 [a0]\n  6841: a4 = u8 [a0 + 0x2]\n  6844: a5 = u8 [a0 + 0x3]\n  6847: a2 = a2 << 0x8\n  6850: a2 = a2 | a3\n  6853: a4 = a4 << 0x10\n  6856: a5 = a5 << 0x18\n  6859: a4 = a4 | a5\n  6862: a2 = a2 | a4\n  6865: a3 = u8 [a0 + 0x5]\n  6868: a4 = u8 [a0 + 0x4]\n  6871: a5 = u8 [a0 + 0x6]\n  6874: s1 = u8 [a0 + 0x7]\n  6877: a3 = a3 << 0x8\n  6880: a3 = a3 | a4\n  6883: a5 = a5 << 0x10\n  6886: s1 = s1 << 0x18\n  6889: a5 = a5 | s1\n  6892: a3 = a3 | a5\n  6895: a3 = a3 << 0x20\n  6898: a2 = a2 | a3\n  6901: a3 = u8 [a0 + 0x19]\n  6904: a4 = u8 [a0 + 0x18]\n  6907: a5 = u8 [a0 + 0x1a]\n  6910: s1 = u8 [a0 + 0x1b]\n  6913: a3 = a3 << 0x8\n  6916: a3 = a3 | a4\n  6919: a5 = a5 << 0x10\n  6922: s1 = s1 << 0x18\n  6925: a5 = a5 | s1\n  6928: a3 = a3 | a5\n  6931: a4 = u8 [a0 + 0x1d]\n  6934: a5 = u8 [a0 + 0x1c]\n  6937: s1 = u8 [a0 + 0x1e]\n  6940: a1 = u8 [a0 + 0x1f]\n  6943: a4 = a4 << 0x8\n  6946: a4 = a4 | a5\n  6949: s1 = s1 << 0x10\n  6952: a1 = a1 << 0x18\n  6955: a1 = a1 | s1\n  6958: a1 = a1 | a4\n  6961: a1 = a1 << 0x20\n  6964: a3 = a3 | a1\n  6967: a1 = u8 [a0 + 0x9]\n  6970: a4 = u8 [a0 + 0x8]\n  6973: a5 = u8 [a0 + 0xa]\n  6976: s1 = u8 [a0 + 0xb]\n  6979: a1 = a1 << 0x8\n  6982: a1 = a1 | a4\n  6985: a5 = a5 << 0x10\n  6988: s1 = s1 << 0x18\n  6991: a5 = a5 | s1\n  6994: a1 = a1 | a5\n  6997: a4 = u8 [a0 + 0xd]\n  7000: a5 = u8 [a0 + 0xc]\n  7003: s1 = u8 [a0 + 0xe]\n  7006: a0 = u8 [a0 + 0xf]\n  7009: a4 = a4 << 0x8\n  7012: a4 = a4 | a5\n  7015: s1 = s1 << 0x10\n  7018: a0 = a0 << 0x18\n  7021: a0 = a0 | s1\n  7024: a0 = a0 | a4\n  7027: a0 = a0 << 0x20\n  7030: a0 = a0 | a1\n  7033: a1 = reverse a0\n  7035: a0 = reverse a3\n  7037: a2 = reverse a2\n  7039: a3 = reverse t0\n  7041: a2 = a2 | a3\n  7044: a3 = a0 | a1\n  7047: a3 = a3 | a2\n  7050: a3 = a3 >> 0x20\n  7053: a1 = a1 | a2\n  7056: a1 = a1 << 0x20\n  7059: a1 = a1 | a3\n  7062: jump @140 if a1 == 0\n      : @137 (gas: 1)\n  7065: trap\n      : @138 (gas: 3)\n  7066: a0 = 0\n  7068: a1 = 0\n  7070: ra = 116, jump @0\n      : @139 [@dyn 58] (gas: 5)\n  7075: i32 a1 = a0 + 0\n  7077: a0 = 0x1\n  7080: a2 = 0\n  7082: ecalli 13 // 'seal_return'\n  7084: fallthrough\n      : @140 (gas: 9)\n  7085: a1 = 0xff0000000000\n  7095: a2 = u64 [sp + 0x18]\n  7098: a1 = a1 & a2\n  7101: a1 = a1 >u 0\n  7103: u64 [sp + 0x18] = a1\n  7106: i32 s1 = a0 + 0\n  7108: a1 = 0x20\n  7111: a0 = s1\n  7113: ra = 118, jump @0\n      : @141 [@dyn 59] (gas: 36)\n  7118: u8 [a0 + 30] = 0\n  7121: u8 [a0 + 29] = 0\n  7124: u8 [a0 + 28] = 0\n  7127: u8 [a0 + 27] = 0\n  7130: u8 [a0 + 26] = 0\n  7133: u8 [a0 + 25] = 0\n  7136: u8 [a0 + 24] = 0\n  7139: u8 [a0 + 23] = 0\n  7142: u8 [a0 + 22] = 0\n  7145: u8 [a0 + 21] = 0\n  7148: u8 [a0 + 20] = 0\n  7151: u8 [a0 + 19] = 0\n  7154: u8 [a0 + 18] = 0\n  7157: u8 [a0 + 17] = 0\n  7160: u8 [a0 + 16] = 0\n  7163: u8 [a0 + 15] = 0\n  7166: u8 [a0 + 14] = 0\n  7169: u8 [a0 + 13] = 0\n  7172: u8 [a0 + 12] = 0\n  7175: u8 [a0 + 11] = 0\n  7178: u8 [a0 + 10] = 0\n  7181: u8 [a0 + 9] = 0\n  7184: u8 [a0 + 8] = 0\n  7187: u8 [a0 + 7] = 0\n  7190: u8 [a0 + 6] = 0\n  7193: u8 [a0 + 5] = 0\n  7196: u8 [a0 + 4] = 0\n  7199: u8 [a0 + 3] = 0\n  7202: u8 [a0 + 2] = 0\n  7205: u8 [a0 + 1] = 0\n  7208: u8 [a0 + 0] = 0\n  7210: a1 = u64 [sp + 0x18]\n  7213: u8 [a0 + 0x1f] = a1\n  7216: a1 = 0x20\n  7219: a0 = s1\n  7221: ra = 120, jump @0\n      : @142 [@dyn 60] (gas: 6)\n  7226: i32 a1 = a0 + 0\n  7228: a2 = 0x20\n  7231: a0 = 0\n  7233: ra = 0x7a\n  7236: ecalli 13 // 'seal_return'\n  7238: fallthrough\n      : @143 [@dyn 61] (gas: 9)\n  7239: a2 = u64 [a1 + 0x18]\n  7242: a3 = u64 [a1 + 0x10]\n  7245: a4 = u64 [a1 + 0x8]\n  7248: a1 = u64 [a1]\n  7250: u64 [a0 + 0x18] = a2\n  7253: u64 [a0 + 0x10] = a3\n  7256: u64 [a0 + 0x8] = a4\n  7259: u64 [a0] = a1\n  7261: ret\n      : @144 (gas: 17)\n  7263: sp = sp + 0xffffffffffffffa0\n  7266: u64 [sp + 0x58] = ra\n  7269: u64 [sp + 0x50] = s0\n  7272: u64 [sp + 0x48] = s1\n  7275: a3 = u64 [a1 + 0x18]\n  7278: a4 = u64 [a1 + 0x10]\n  7281: a5 = u64 [a1 + 0x8]\n  7284: s1 = u64 [a1]\n  7286: a1 = a5 | a3\n  7289: a2 = s1 | a4\n  7292: a2 = a2 | a1\n  7295: a2 = a2 >> 0x20\n  7298: a1 = a1 | a4\n  7301: a1 = a1 << 0x20\n  7304: a1 = a1 | a2\n  7307: u64 [sp + 0x28] = a0\n  7310: jump @151 if a1 != 0\n      : @145 (gas: 19)\n  7314: a0 = s1 + 0x20\n  7317: u64 [sp + 0x30] = a0\n  7320: a0 = a0 <u s1\n  7323: a1 = a5 + a0\n  7326: u64 [sp + 0x40] = a1\n  7329: u64 [sp + 0x8] = a5\n  7332: s0 = a1 <u a5\n  7335: s0 = a0 if a0 == 0\n  7338: s0 = s0 + a4\n  7341: u64 [sp + 0x10] = a4\n  7344: a0 = s0 <u a4\n  7347: u64 [sp + 0x18] = a3\n  7350: a0 = a0 + a3\n  7353: u64 [sp + 0x38] = a0\n  7356: u64 [sp] = s1\n  7358: i32 a0 = s1 + 0\n  7360: a1 = 0x20\n  7363: s1 = 0x20\n  7366: ra = 124, jump @0\n      : @146 [@dyn 62] (gas: 45)\n  7371: u8 [a0 + 0x1f] = s1\n  7374: a1 = u64 [sp + 0x30]\n  7377: s1 = a1\n  7379: a1 = a1 | s0\n  7382: a2 = u64 [sp + 0x40]\n  7385: a4 = u64 [sp + 0x38]\n  7388: a2 = a2 | a4\n  7391: a1 = a1 | a2\n  7394: a1 = a1 >> 0x20\n  7397: u64 [sp + 0x20] = s0\n  7400: a2 = a2 | s0\n  7403: a2 = a2 << 0x20\n  7406: a1 = a1 | a2\n  7409: u8 [a0 + 30] = 0\n  7412: u8 [a0 + 29] = 0\n  7415: u8 [a0 + 28] = 0\n  7418: u8 [a0 + 27] = 0\n  7421: u8 [a0 + 26] = 0\n  7424: u8 [a0 + 25] = 0\n  7427: u8 [a0 + 24] = 0\n  7430: u8 [a0 + 23] = 0\n  7433: u8 [a0 + 22] = 0\n  7436: u8 [a0 + 21] = 0\n  7439: u8 [a0 + 20] = 0\n  7442: u8 [a0 + 19] = 0\n  7445: u8 [a0 + 18] = 0\n  7448: u8 [a0 + 17] = 0\n  7451: u8 [a0 + 16] = 0\n  7454: u8 [a0 + 15] = 0\n  7457: u8 [a0 + 14] = 0\n  7460: u8 [a0 + 13] = 0\n  7463: u8 [a0 + 12] = 0\n  7466: u8 [a0 + 11] = 0\n  7469: u8 [a0 + 10] = 0\n  7472: u8 [a0 + 9] = 0\n  7475: u8 [a0 + 8] = 0\n  7478: u8 [a0 + 7] = 0\n  7481: u8 [a0 + 6] = 0\n  7484: u8 [a0 + 5] = 0\n  7487: u8 [a0 + 4] = 0\n  7490: u8 [a0 + 3] = 0\n  7493: u8 [a0 + 2] = 0\n  7496: u8 [a0 + 1] = 0\n  7499: u8 [a0 + 0] = 0\n  7501: jump @151 if a1 != 0\n      : @147 (gas: 4)\n  7505: i32 s0 = s1 + 0\n  7507: a1 = 0x20\n  7510: a0 = s0\n  7512: ra = 126, jump @0\n      : @148 [@dyn 63] (gas: 41)\n  7517: u8 [a0 + 31] = 0xd\n  7521: u8 [a0 + 30] = 0\n  7524: u8 [a0 + 29] = 0\n  7527: u8 [a0 + 28] = 0\n  7530: u8 [a0 + 27] = 0\n  7533: u8 [a0 + 26] = 0\n  7536: u8 [a0 + 25] = 0\n  7539: u8 [a0 + 24] = 0\n  7542: u8 [a0 + 23] = 0\n  7545: u8 [a0 + 22] = 0\n  7548: u8 [a0 + 21] = 0\n  7551: u8 [a0 + 20] = 0\n  7554: u8 [a0 + 19] = 0\n  7557: u8 [a0 + 18] = 0\n  7560: u8 [a0 + 17] = 0\n  7563: u8 [a0 + 16] = 0\n  7566: u8 [a0 + 15] = 0\n  7569: u8 [a0 + 14] = 0\n  7572: u8 [a0 + 13] = 0\n  7575: u8 [a0 + 12] = 0\n  7578: u8 [a0 + 11] = 0\n  7581: u8 [a0 + 10] = 0\n  7584: u8 [a0 + 9] = 0\n  7587: u8 [a0 + 8] = 0\n  7590: u8 [a0 + 7] = 0\n  7593: u8 [a0 + 6] = 0\n  7596: u8 [a0 + 5] = 0\n  7599: u8 [a0 + 4] = 0\n  7602: u8 [a0 + 3] = 0\n  7605: u8 [a0 + 2] = 0\n  7608: u8 [a0 + 1] = 0\n  7611: a1 = u64 [sp + 0x20]\n  7614: a2 = u64 [sp + 0x38]\n  7617: a1 = a1 | a2\n  7620: a2 = 0xffffffe0\n  7630: a2 = s1 <u a2\n  7633: a3 = u64 [sp + 0x40]\n  7636: a2 = 0 if a3 != 0\n  7638: a2 = 0 if a1 != 0\n  7640: u8 [a0 + 0] = 0\n  7642: jump @151 if a2 == 0\n      : @149 (gas: 3)\n  7646: i32 a0 = s0 + 0x20\n  7649: a1 = 0x20\n  7652: ra = 128, jump @0\n      : @150 [@dyn 64] (gas: 54)\n  7658: u8 [a0 + 31] = 0\n  7661: u8 [a0 + 30] = 0\n  7664: u8 [a0 + 29] = 0\n  7667: u8 [a0 + 28] = 0\n  7670: u8 [a0 + 27] = 0\n  7673: u8 [a0 + 26] = 0\n  7676: u8 [a0 + 25] = 0\n  7679: u8 [a0 + 24] = 0\n  7682: u8 [a0 + 23] = 0\n  7685: u8 [a0 + 22] = 0\n  7688: u8 [a0 + 21] = 0\n  7691: u8 [a0 + 20] = 0\n  7694: u8 [a0 + 19] = 0\n  7697: u8 [a0 + 18] = 0\n  7700: u8 [a0 + 17] = 0\n  7703: u8 [a0 + 16] = 0\n  7706: u8 [a0 + 15] = 0\n  7709: u8 [a0 + 14] = 0\n  7712: u8 [a0 + 13] = 0\n  7715: u8 [a0 + 12] = 0x72\n  7719: u8 [a0 + 11] = 0x65\n  7723: u8 [a0 + 10] = 0x6e\n  7727: u8 [a0 + 9] = 0x77\n  7731: u8 [a0 + 8] = 0x6f\n  7735: u8 [a0 + 7] = 0x20\n  7739: u8 [a0 + 6] = 0x65\n  7743: u8 [a0 + 5] = 0x68\n  7747: u8 [a0 + 4] = 0x74\n  7751: u8 [a0 + 3] = 0x20\n  7755: u8 [a0 + 2] = 0x74\n  7759: u8 [a0 + 1] = 0x6f\n  7763: u8 [a0 + 0] = 0x4e\n  7766: a1 = u64 [sp]\n  7768: a0 = a1 + 0x60\n  7771: a1 = a0 <u a1\n  7774: a3 = u64 [sp + 0x8]\n  7777: a2 = a3 + a1\n  7780: a3 = a2 <u a3\n  7783: a3 = a1 if a1 == 0\n  7786: a1 = u64 [sp + 0x10]\n  7789: a3 = a3 + a1\n  7792: a1 = a3 <u a1\n  7795: a4 = u64 [sp + 0x18]\n  7798: a1 = a1 + a4\n  7801: a4 = u64 [sp + 0x28]\n  7804: u64 [a4] = a0\n  7806: u64 [a4 + 0x8] = a2\n  7809: u64 [a4 + 0x10] = a3\n  7812: u64 [a4 + 0x18] = a1\n  7815: ra = u64 [sp + 0x58]\n  7818: s0 = u64 [sp + 0x50]\n  7821: s1 = u64 [sp + 0x48]\n  7824: sp = sp + 0x60\n  7827: ret\n      : @151 (gas: 1)\n  7829: trap\n      : @152 (gas: 55)\n  7830: sp = sp + 0xfffffffffffffea0\n  7834: u64 [sp + 0x158] = ra\n  7838: u64 [sp + 0x150] = s0\n  7842: u64 [sp + 0x148] = s1\n  7846: s0 = sp + 0x160\n  7850: sp = sp & 0xffffffffffffffe0\n  7853: a2 = u64 [a1 + 0x18]\n  7856: u64 [sp + 0x40] = a2\n  7859: a2 = u64 [a1 + 0x10]\n  7862: u64 [sp + 0x38] = a2\n  7865: a2 = u64 [a1 + 0x8]\n  7868: u64 [sp + 0x28] = a2\n  7871: a1 = u64 [a1]\n  7873: u64 [sp + 0x18] = a1\n  7876: a1 = u64 [a0 + 0x18]\n  7879: u64 [sp + 0x48] = a1\n  7882: a1 = u64 [a0 + 0x10]\n  7885: u64 [sp + 0x30] = a1\n  7888: a1 = u64 [a0 + 0x8]\n  7891: u64 [sp + 0x20] = a1\n  7894: a0 = u64 [a0]\n  7896: u64 [sp + 0x10] = a0\n  7899: i32 a0 = sp + 0xe0\n  7903: ecalli 6 // 'caller'\n  7905: a0 = u64 [sp + 0xe8]\n  7909: a1 = u64 [sp + 0xe0]\n  7913: a2 = i32 [sp + 0xf0]\n  7917: a0 = reverse a0\n  7919: a3 = a0 >> 0x20\n  7922: s1 = reverse a1\n  7924: a1 = s1 << 0x20\n  7927: a1 = a1 | a3\n  7930: u64 [sp + 0x58] = a1\n  7933: a0 = a0 << 0x20\n  7936: a1 = reverse a2\n  7938: a1 = a1 >> 0x20\n  7941: a0 = a0 | a1\n  7944: u64 [sp + 0x50] = a0\n  7947: s1 = s1 >> 0x20\n  7950: u64 [sp + 280] = 0\n  7954: u64 [sp + 272] = 0\n  7958: u64 [sp + 264] = 0\n  7962: u64 [sp + 256] = 0x2\n  7967: u64 [sp + 312] = 0\n  7971: u64 [sp + 304] = 0\n  7975: u64 [sp + 296] = 0\n  7979: u64 [sp + 288] = 0\n  7983: u32 [sp + 320] = 0x20\n  7988: i32 a1 = sp + 0x100\n  7992: i32 a3 = sp + 0x120\n  7996: i32 a4 = sp + 0x140\n  8000: a2 = 0xffffffffffffffff\n  8003: a0 = 0\n  8005: ecalli 8 // 'get_storage'\n  8007: fallthrough\n      : @153 (gas: 11)\n  8008: a0 = u32 [sp + 0x130]\n  8012: a1 = u64 [sp + 0x120]\n  8016: a2 = u64 [sp + 0x128]\n  8020: a0 = a0 ^ s1\n  8023: a3 = u64 [sp + 0x50]\n  8026: a1 = a1 ^ a3\n  8029: a0 = a0 | a1\n  8032: a1 = u64 [sp + 0x58]\n  8035: a1 = a1 ^ a2\n  8038: a0 = a0 | a1\n  8041: jump @156 if a0 != 0\n      : @154 (gas: 66)\n  8045: a0 = u64 [sp + 0x18]\n  8048: u64 [sp + 0x60] = a0\n  8051: a0 = u64 [sp + 0x10]\n  8054: u64 [sp + 0x80] = a0\n  8058: a0 = u64 [sp + 0x28]\n  8061: u64 [sp + 0x68] = a0\n  8064: a0 = u64 [sp + 0x20]\n  8067: u64 [sp + 0x88] = a0\n  8071: a0 = u64 [sp + 0x38]\n  8074: u64 [sp + 0x70] = a0\n  8077: a0 = u64 [sp + 0x30]\n  8080: u64 [sp + 0x90] = a0\n  8084: a0 = u64 [sp + 0x40]\n  8087: u64 [sp + 0x78] = a0\n  8090: a0 = sp + 0x80\n  8094: a1 = sp + 0x60\n  8097: a2 = u64 [sp + 0x48]\n  8100: u64 [sp + 0x98] = a2\n  8104: ra = 0x82\n  8108: sp = sp + 0xfffffffffffffbe0\n  8112: u64 [sp + 0x418] = ra\n  8116: u64 [sp + 0x410] = s0\n  8120: u64 [sp + 0x408] = s1\n  8124: s0 = sp + 0x420\n  8128: sp = sp & 0xffffffffffffffe0\n  8131: s1 = sp\n  8133: a2 = u64 [a1 + 0x18]\n  8136: u64 [s1 + 0x40] = a2\n  8139: a2 = u64 [a1 + 0x10]\n  8142: u64 [s1 + 0x30] = a2\n  8145: a2 = u64 [a1 + 0x8]\n  8148: u64 [s1 + 0x38] = a2\n  8151: a1 = u64 [a1]\n  8153: u64 [s1 + 0x28] = a1\n  8156: a1 = u64 [a0 + 0x10]\n  8159: u64 [s1 + 0x50] = a1\n  8162: a1 = u64 [a0 + 0x8]\n  8165: u64 [s1 + 0x48] = a1\n  8168: a0 = u64 [a0]\n  8170: u64 [s1 + 0x58] = a0\n  8173: i32 a0 = s1 + 0x200\n  8177: ecalli 9 // 'now'\n  8179: a0 = u64 [s1 + 0x200]\n  8183: u64 [s1 + 0x78] = a0\n  8186: a0 = u64 [s1 + 0x208]\n  8190: u64 [s1 + 0x70] = a0\n  8193: a0 = u64 [s1 + 0x210]\n  8197: u64 [s1 + 0x68] = a0\n  8200: a0 = u64 [s1 + 0x218]\n  8204: u64 [s1 + 0x60] = a0\n  8207: u64 [s1 + 920] = 0\n  8211: u64 [s1 + 912] = 0\n  8215: u64 [s1 + 904] = 0\n  8219: u64 [s1 + 896] = 0\n  8223: u64 [s1 + 984] = 0\n  8227: u64 [s1 + 976] = 0\n  8231: u64 [s1 + 968] = 0\n  8235: u64 [s1 + 960] = 0\n  8239: u32 [s1 + 928] = 0x20\n  8244: i32 a1 = s1 + 0x380\n  8248: i32 a3 = s1 + 0x3c0\n  8252: i32 a4 = s1 + 0x3a0\n  8256: a2 = 0xffffffffffffffff\n  8259: a0 = 0\n  8261: ecalli 8 // 'get_storage'\n  8263: jump @226\n      : @155 [@dyn 65] (gas: 6)\n  8266: sp = s0 + 0xfffffffffffffea0\n  8270: ra = u64 [sp + 0x158]\n  8274: s0 = u64 [sp + 0x150]\n  8278: s1 = u64 [sp + 0x148]\n  8282: sp = sp + 0x160\n  8286: ret\n      : @156 (gas: 3)\n  8288: a0 = 0x40\n  8291: a1 = 0x20\n  8294: ra = 132, jump @0\n      : @157 [@dyn 66] (gas: 103)\n  8300: a1 = u8 [a0 + 0x11]\n  8303: a2 = u8 [a0 + 0x10]\n  8306: a3 = u8 [a0 + 0x12]\n  8309: a4 = u8 [a0 + 0x13]\n  8312: a1 = a1 << 0x8\n  8315: a1 = a1 | a2\n  8318: a3 = a3 << 0x10\n  8321: a4 = a4 << 0x18\n  8324: a3 = a3 | a4\n  8327: a1 = a1 | a3\n  8330: a2 = u8 [a0 + 0x15]\n  8333: a3 = u8 [a0 + 0x14]\n  8336: a4 = u8 [a0 + 0x16]\n  8339: a5 = u8 [a0 + 0x17]\n  8342: a2 = a2 << 0x8\n  8345: a2 = a2 | a3\n  8348: a4 = a4 << 0x10\n  8351: a5 = a5 << 0x18\n  8354: a4 = a4 | a5\n  8357: a2 = a2 | a4\n  8360: a2 = a2 << 0x20\n  8363: t0 = a2 | a1\n  8366: a2 = u8 [a0 + 0x1]\n  8369: a3 = u8 [a0]\n  8371: a4 = u8 [a0 + 0x2]\n  8374: a5 = u8 [a0 + 0x3]\n  8377: a2 = a2 << 0x8\n  8380: a2 = a2 | a3\n  8383: a4 = a4 << 0x10\n  8386: a5 = a5 << 0x18\n  8389: a4 = a4 | a5\n  8392: a2 = a2 | a4\n  8395: a3 = u8 [a0 + 0x5]\n  8398: a4 = u8 [a0 + 0x4]\n  8401: a5 = u8 [a0 + 0x6]\n  8404: s1 = u8 [a0 + 0x7]\n  8407: a3 = a3 << 0x8\n  8410: a3 = a3 | a4\n  8413: a5 = a5 << 0x10\n  8416: s1 = s1 << 0x18\n  8419: a5 = a5 | s1\n  8422: a3 = a3 | a5\n  8425: a3 = a3 << 0x20\n  8428: a2 = a2 | a3\n  8431: a3 = u8 [a0 + 0x19]\n  8434: a4 = u8 [a0 + 0x18]\n  8437: a5 = u8 [a0 + 0x1a]\n  8440: s1 = u8 [a0 + 0x1b]\n  8443: a3 = a3 << 0x8\n  8446: a3 = a3 | a4\n  8449: a5 = a5 << 0x10\n  8452: s1 = s1 << 0x18\n  8455: a5 = a5 | s1\n  8458: a3 = a3 | a5\n  8461: a4 = u8 [a0 + 0x1d]\n  8464: a5 = u8 [a0 + 0x1c]\n  8467: s1 = u8 [a0 + 0x1e]\n  8470: a1 = u8 [a0 + 0x1f]\n  8473: a4 = a4 << 0x8\n  8476: a4 = a4 | a5\n  8479: s1 = s1 << 0x10\n  8482: a1 = a1 << 0x18\n  8485: a1 = a1 | s1\n  8488: a1 = a1 | a4\n  8491: a1 = a1 << 0x20\n  8494: a3 = a3 | a1\n  8497: a1 = u8 [a0 + 0x9]\n  8500: a4 = u8 [a0 + 0x8]\n  8503: a5 = u8 [a0 + 0xa]\n  8506: s1 = u8 [a0 + 0xb]\n  8509: a1 = a1 << 0x8\n  8512: a1 = a1 | a4\n  8515: a5 = a5 << 0x10\n  8518: s1 = s1 << 0x18\n  8521: a5 = a5 | s1\n  8524: a1 = a1 | a5\n  8527: a4 = u8 [a0 + 0xd]\n  8530: a5 = u8 [a0 + 0xc]\n  8533: s1 = u8 [a0 + 0xe]\n  8536: a0 = u8 [a0 + 0xf]\n  8539: a4 = a4 << 0x8\n  8542: a4 = a4 | a5\n  8545: s1 = s1 << 0x10\n  8548: a0 = a0 << 0x18\n  8551: a0 = a0 | s1\n  8554: a0 = a0 | a4\n  8557: a0 = a0 << 0x20\n  8560: a0 = a0 | a1\n  8563: s1 = reverse a0\n  8565: a1 = reverse a3\n  8567: a2 = reverse a2\n  8569: a0 = reverse t0\n  8571: u64 [sp + 0x58] = a0\n  8574: u64 [sp + 0x50] = a2\n  8577: a0 = a0 | a2\n  8580: a2 = a1\n  8582: a1 = a1 | s1\n  8585: a1 = a1 | a0\n  8588: a1 = a1 >> 0x20\n  8591: a0 = a0 | s1\n  8594: a0 = a0 << 0x20\n  8597: a0 = a0 | a1\n  8600: jump @161 if a0 != 0\n      : @158 (gas: 5)\n  8604: u64 [sp + 0x48] = a2\n  8607: i32 a0 = a2 + 0\n  8609: a1 = 0x20\n  8612: u64 [sp + 0x40] = a0\n  8615: ra = 134, jump @0\n      : @159 [@dyn 67] (gas: 50)\n  8621: u8 [a0 + 31] = 0\n  8624: u8 [a0 + 30] = 0\n  8627: u8 [a0 + 29] = 0\n  8630: u8 [a0 + 28] = 0\n  8633: u8 [a0 + 27] = 0\n  8636: u8 [a0 + 26] = 0\n  8639: u8 [a0 + 25] = 0\n  8642: u8 [a0 + 24] = 0\n  8645: u8 [a0 + 23] = 0\n  8648: u8 [a0 + 22] = 0\n  8651: u8 [a0 + 21] = 0\n  8654: u8 [a0 + 20] = 0\n  8657: u8 [a0 + 19] = 0\n  8660: u8 [a0 + 18] = 0\n  8663: u8 [a0 + 17] = 0\n  8666: u8 [a0 + 16] = 0\n  8669: u8 [a0 + 15] = 0\n  8672: u8 [a0 + 14] = 0\n  8675: u8 [a0 + 13] = 0\n  8678: u8 [a0 + 12] = 0\n  8681: u8 [a0 + 11] = 0\n  8684: u8 [a0 + 10] = 0\n  8687: u8 [a0 + 9] = 0\n  8690: u8 [a0 + 8] = 0\n  8693: u8 [a0 + 7] = 0\n  8696: u8 [a0 + 6] = 0\n  8699: u8 [a0 + 5] = 0\n  8702: u8 [a0 + 4] = 0\n  8705: u8 [a0 + 3] = 0xa0\n  8710: u8 [a0 + 2] = 0x79\n  8714: u8 [a0 + 1] = 0xc3\n  8719: u8 [a0 + 0] = 0x8\n  8722: a1 = u64 [sp + 0x48]\n  8725: a0 = a1 + 0x4\n  8728: a1 = a0 <u a1\n  8731: a3 = u64 [sp + 0x58]\n  8734: a2 = a3 + a1\n  8737: a3 = a2 <u a3\n  8740: a3 = a1 if a1 == 0\n  8743: a3 = a3 + s1\n  8746: a1 = a3 <u s1\n  8749: a4 = u64 [sp + 0x50]\n  8752: a4 = a4 + a1\n  8755: u64 [sp + 0xa8] = a2\n  8759: u64 [sp + 0xa0] = a0\n  8763: u64 [sp + 0xb0] = a3\n  8767: a0 = sp + 0xc0\n  8771: a1 = sp + 0xa0\n  8775: u64 [sp + 0xb8] = a4\n  8779: ra = 136, jump @144\n      : @160 [@dyn 68] (gas: 30)\n  8785: a0 = u64 [sp + 0xc8]\n  8789: t0 = u64 [sp + 0xd8]\n  8793: t1 = u64 [sp + 0xc0]\n  8797: a3 = u64 [sp + 0xd0]\n  8801: a1 = u64 [sp + 0x58]\n  8804: a4 = a0 ^ a1\n  8807: a5 = a0 <u a1\n  8810: t2 = a1\n  8812: a2 = u64 [sp + 0x48]\n  8815: a1 = t1 <u a2\n  8818: a5 = a1 if a4 == 0\n  8821: a4 = a3 - s1\n  8824: a3 = a3 <u s1\n  8827: s1 = u64 [sp + 0x50]\n  8830: s1 = t0 - s1\n  8833: s1 = s1 - a3\n  8836: a3 = a4 <u a5\n  8839: s1 = s1 - a3\n  8842: a4 = a4 - a5\n  8845: a0 = a0 - t2\n  8848: a1 = a0 - a1\n  8851: a0 = t1 - a2\n  8854: a1 = a1 | s1\n  8857: a2 = a0 | a4\n  8860: a2 = a2 | a1\n  8863: a1 = a1 | a4\n  8866: a2 = a2 >> 0x20\n  8869: a1 = a1 << 0x20\n  8872: a1 = a1 | a2\n  8875: jump @162 if a1 == 0\n      : @161 (gas: 1)\n  8878: trap\n      : @162 (gas: 4)\n  8879: i32 s1 = a0 + 0\n  8881: a0 = u64 [sp + 0x40]\n  8884: a1 = s1\n  8886: ra = 138, jump @0\n      : @163 [@dyn 69] (gas: 6)\n  8892: i32 a1 = a0 + 0\n  8894: a0 = 0x1\n  8897: a2 = s1\n  8899: ra = 0x8c\n  8903: ecalli 13 // 'seal_return'\n  8905: fallthrough\n      : @164 [@dyn 70] (gas: 9)\n  8906: a2 = u64 [a1 + 0x18]\n  8909: a3 = u64 [a1 + 0x10]\n  8912: a4 = u64 [a1 + 0x8]\n  8915: a1 = u64 [a1]\n  8917: u64 [a0 + 0x18] = a2\n  8920: u64 [a0 + 0x10] = a3\n  8923: u64 [a0 + 0x8] = a4\n  8926: u64 [a0] = a1\n  8928: ret\n      : @165 (gas: 17)\n  8930: sp = sp + 0xffffffffffffffa0\n  8933: u64 [sp + 0x58] = ra\n  8936: u64 [sp + 0x50] = s0\n  8939: u64 [sp + 0x48] = s1\n  8942: a3 = u64 [a1 + 0x18]\n  8945: a4 = u64 [a1 + 0x10]\n  8948: a5 = u64 [a1 + 0x8]\n  8951: s1 = u64 [a1]\n  8953: a1 = a5 | a3\n  8956: a2 = s1 | a4\n  8959: a2 = a2 | a1\n  8962: a2 = a2 >> 0x20\n  8965: a1 = a1 | a4\n  8968: a1 = a1 << 0x20\n  8971: a1 = a1 | a2\n  8974: u64 [sp + 0x28] = a0\n  8977: jump @172 if a1 != 0\n      : @166 (gas: 19)\n  8981: a0 = s1 + 0x20\n  8984: u64 [sp + 0x30] = a0\n  8987: a0 = a0 <u s1\n  8990: a1 = a5 + a0\n  8993: u64 [sp + 0x40] = a1\n  8996: u64 [sp + 0x8] = a5\n  8999: s0 = a1 <u a5\n  9002: s0 = a0 if a0 == 0\n  9005: s0 = s0 + a4\n  9008: u64 [sp + 0x10] = a4\n  9011: a0 = s0 <u a4\n  9014: u64 [sp + 0x18] = a3\n  9017: a0 = a0 + a3\n  9020: u64 [sp + 0x38] = a0\n  9023: u64 [sp] = s1\n  9025: i32 a0 = s1 + 0\n  9027: a1 = 0x20\n  9030: s1 = 0x20\n  9033: ra = 142, jump @0\n      : @167 [@dyn 71] (gas: 45)\n  9039: u8 [a0 + 0x1f] = s1\n  9042: a1 = u64 [sp + 0x30]\n  9045: s1 = a1\n  9047: a1 = a1 | s0\n  9050: a2 = u64 [sp + 0x40]\n  9053: a4 = u64 [sp + 0x38]\n  9056: a2 = a2 | a4\n  9059: a1 = a1 | a2\n  9062: a1 = a1 >> 0x20\n  9065: u64 [sp + 0x20] = s0\n  9068: a2 = a2 | s0\n  9071: a2 = a2 << 0x20\n  9074: a1 = a1 | a2\n  9077: u8 [a0 + 30] = 0\n  9080: u8 [a0 + 29] = 0\n  9083: u8 [a0 + 28] = 0\n  9086: u8 [a0 + 27] = 0\n  9089: u8 [a0 + 26] = 0\n  9092: u8 [a0 + 25] = 0\n  9095: u8 [a0 + 24] = 0\n  9098: u8 [a0 + 23] = 0\n  9101: u8 [a0 + 22] = 0\n  9104: u8 [a0 + 21] = 0\n  9107: u8 [a0 + 20] = 0\n  9110: u8 [a0 + 19] = 0\n  9113: u8 [a0 + 18] = 0\n  9116: u8 [a0 + 17] = 0\n  9119: u8 [a0 + 16] = 0\n  9122: u8 [a0 + 15] = 0\n  9125: u8 [a0 + 14] = 0\n  9128: u8 [a0 + 13] = 0\n  9131: u8 [a0 + 12] = 0\n  9134: u8 [a0 + 11] = 0\n  9137: u8 [a0 + 10] = 0\n  9140: u8 [a0 + 9] = 0\n  9143: u8 [a0 + 8] = 0\n  9146: u8 [a0 + 7] = 0\n  9149: u8 [a0 + 6] = 0\n  9152: u8 [a0 + 5] = 0\n  9155: u8 [a0 + 4] = 0\n  9158: u8 [a0 + 3] = 0\n  9161: u8 [a0 + 2] = 0\n  9164: u8 [a0 + 1] = 0\n  9167: u8 [a0 + 0] = 0\n  9169: jump @172 if a1 != 0\n      : @168 (gas: 4)\n  9173: i32 s0 = s1 + 0\n  9175: a1 = 0x20\n  9178: a0 = s0\n  9180: ra = 144, jump @0\n      : @169 [@dyn 72] (gas: 41)\n  9186: u8 [a0 + 31] = 0x18\n  9190: u8 [a0 + 30] = 0\n  9193: u8 [a0 + 29] = 0\n  9196: u8 [a0 + 28] = 0\n  9199: u8 [a0 + 27] = 0\n  9202: u8 [a0 + 26] = 0\n  9205: u8 [a0 + 25] = 0\n  9208: u8 [a0 + 24] = 0\n  9211: u8 [a0 + 23] = 0\n  9214: u8 [a0 + 22] = 0\n  9217: u8 [a0 + 21] = 0\n  9220: u8 [a0 + 20] = 0\n  9223: u8 [a0 + 19] = 0\n  9226: u8 [a0 + 18] = 0\n  9229: u8 [a0 + 17] = 0\n  9232: u8 [a0 + 16] = 0\n  9235: u8 [a0 + 15] = 0\n  9238: u8 [a0 + 14] = 0\n  9241: u8 [a0 + 13] = 0\n  9244: u8 [a0 + 12] = 0\n  9247: u8 [a0 + 11] = 0\n  9250: u8 [a0 + 10] = 0\n  9253: u8 [a0 + 9] = 0\n  9256: u8 [a0 + 8] = 0\n  9259: u8 [a0 + 7] = 0\n  9262: u8 [a0 + 6] = 0\n  9265: u8 [a0 + 5] = 0\n  9268: u8 [a0 + 4] = 0\n  9271: u8 [a0 + 3] = 0\n  9274: u8 [a0 + 2] = 0\n  9277: u8 [a0 + 1] = 0\n  9280: a1 = u64 [sp + 0x20]\n  9283: a2 = u64 [sp + 0x38]\n  9286: a1 = a1 | a2\n  9289: a2 = 0xffffffe0\n  9299: a2 = s1 <u a2\n  9302: a3 = u64 [sp + 0x40]\n  9305: a2 = 0 if a3 != 0\n  9307: a2 = 0 if a1 != 0\n  9309: u8 [a0 + 0] = 0\n  9311: jump @172 if a2 == 0\n      : @170 (gas: 3)\n  9315: i32 a0 = s0 + 0x20\n  9318: a1 = 0x20\n  9321: ra = 146, jump @0\n      : @171 [@dyn 73] (gas: 55)\n  9327: u8 [a0 + 31] = 0\n  9330: u8 [a0 + 30] = 0\n  9333: u8 [a0 + 29] = 0\n  9336: u8 [a0 + 28] = 0\n  9339: u8 [a0 + 27] = 0\n  9342: u8 [a0 + 26] = 0\n  9345: u8 [a0 + 25] = 0\n  9348: u8 [a0 + 24] = 0\n  9351: u8 [a0 + 23] = 0x64\n  9355: u8 [a0 + 22] = 0x65\n  9359: u8 [a0 + 21] = 0x68\n  9363: u8 [a0 + 20] = 0x63\n  9367: u8 [a0 + 19] = 0x61\n  9371: u8 [a0 + 18] = 0x65\n  9375: u8 [a0 + 17] = 0x72\n  9379: u8 [a0 + 16] = 0x20\n  9383: u8 [a0 + 15] = 0x74\n  9387: u8 [a0 + 14] = 0x65\n  9391: a5 = 0x79\n  9394: u8 [a0 + 0xd] = a5\n  9397: u8 [a0 + 12] = 0x20\n  9401: u8 [a0 + 11] = 0x74\n  9405: u8 [a0 + 10] = 0x6f\n  9409: u8 [a0 + 9] = 0x6e\n  9413: u8 [a0 + 8] = 0x20\n  9417: u8 [a0 + 7] = 0x65\n  9421: u8 [a0 + 6] = 0x6e\n  9425: u8 [a0 + 5] = 0x69\n  9429: u8 [a0 + 4] = 0x6c\n  9433: u8 [a0 + 3] = 0x64\n  9437: u8 [a0 + 2] = 0x61\n  9441: u8 [a0 + 1] = 0x65\n  9445: u8 [a0 + 0] = 0x44\n  9448: a1 = u64 [sp]\n  9450: a0 = a1 + 0x60\n  9453: a1 = a0 <u a1\n  9456: a3 = u64 [sp + 0x8]\n  9459: a2 = a3 + a1\n  9462: a3 = a2 <u a3\n  9465: a3 = a1 if a1 == 0\n  9468: a1 = u64 [sp + 0x10]\n  9471: a3 = a3 + a1\n  9474: a1 = a3 <u a1\n  9477: a4 = u64 [sp + 0x18]\n  9480: a1 = a1 + a4\n  9483: a4 = u64 [sp + 0x28]\n  9486: u64 [a4] = a0\n  9488: u64 [a4 + 0x8] = a2\n  9491: u64 [a4 + 0x10] = a3\n  9494: u64 [a4 + 0x18] = a1\n  9497: ra = u64 [sp + 0x58]\n  9500: s0 = u64 [sp + 0x50]\n  9503: s1 = u64 [sp + 0x48]\n  9506: sp = sp + 0x60\n  9509: ret\n      : @172 (gas: 1)\n  9511: trap\n      : @173 (gas: 17)\n  9512: sp = sp + 0xffffffffffffffa0\n  9515: u64 [sp + 0x58] = ra\n  9518: u64 [sp + 0x50] = s0\n  9521: u64 [sp + 0x48] = s1\n  9524: a3 = u64 [a1 + 0x18]\n  9527: a4 = u64 [a1 + 0x10]\n  9530: a5 = u64 [a1 + 0x8]\n  9533: s1 = u64 [a1]\n  9535: a1 = a5 | a3\n  9538: a2 = s1 | a4\n  9541: a2 = a2 | a1\n  9544: a2 = a2 >> 0x20\n  9547: a1 = a1 | a4\n  9550: a1 = a1 << 0x20\n  9553: a1 = a1 | a2\n  9556: u64 [sp + 0x28] = a0\n  9559: jump @180 if a1 != 0\n      : @174 (gas: 19)\n  9563: a0 = s1 + 0x20\n  9566: u64 [sp + 0x30] = a0\n  9569: a0 = a0 <u s1\n  9572: a1 = a5 + a0\n  9575: u64 [sp + 0x40] = a1\n  9578: u64 [sp + 0x8] = a5\n  9581: s0 = a1 <u a5\n  9584: s0 = a0 if a0 == 0\n  9587: s0 = s0 + a4\n  9590: u64 [sp + 0x10] = a4\n  9593: a0 = s0 <u a4\n  9596: u64 [sp + 0x18] = a3\n  9599: a0 = a0 + a3\n  9602: u64 [sp + 0x38] = a0\n  9605: u64 [sp] = s1\n  9607: i32 a0 = s1 + 0\n  9609: a1 = 0x20\n  9612: s1 = 0x20\n  9615: ra = 148, jump @0\n      : @175 [@dyn 74] (gas: 45)\n  9621: u8 [a0 + 0x1f] = s1\n  9624: a1 = u64 [sp + 0x30]\n  9627: s1 = a1\n  9629: a1 = a1 | s0\n  9632: a2 = u64 [sp + 0x40]\n  9635: a4 = u64 [sp + 0x38]\n  9638: a2 = a2 | a4\n  9641: a1 = a1 | a2\n  9644: a1 = a1 >> 0x20\n  9647: u64 [sp + 0x20] = s0\n  9650: a2 = a2 | s0\n  9653: a2 = a2 << 0x20\n  9656: a1 = a1 | a2\n  9659: u8 [a0 + 30] = 0\n  9662: u8 [a0 + 29] = 0\n  9665: u8 [a0 + 28] = 0\n  9668: u8 [a0 + 27] = 0\n  9671: u8 [a0 + 26] = 0\n  9674: u8 [a0 + 25] = 0\n  9677: u8 [a0 + 24] = 0\n  9680: u8 [a0 + 23] = 0\n  9683: u8 [a0 + 22] = 0\n  9686: u8 [a0 + 21] = 0\n  9689: u8 [a0 + 20] = 0\n  9692: u8 [a0 + 19] = 0\n  9695: u8 [a0 + 18] = 0\n  9698: u8 [a0 + 17] = 0\n  9701: u8 [a0 + 16] = 0\n  9704: u8 [a0 + 15] = 0\n  9707: u8 [a0 + 14] = 0\n  9710: u8 [a0 + 13] = 0\n  9713: u8 [a0 + 12] = 0\n  9716: u8 [a0 + 11] = 0\n  9719: u8 [a0 + 10] = 0\n  9722: u8 [a0 + 9] = 0\n  9725: u8 [a0 + 8] = 0\n  9728: u8 [a0 + 7] = 0\n  9731: u8 [a0 + 6] = 0\n  9734: u8 [a0 + 5] = 0\n  9737: u8 [a0 + 4] = 0\n  9740: u8 [a0 + 3] = 0\n  9743: u8 [a0 + 2] = 0\n  9746: u8 [a0 + 1] = 0\n  9749: u8 [a0 + 0] = 0\n  9751: jump @180 if a1 != 0\n      : @176 (gas: 4)\n  9755: i32 s0 = s1 + 0\n  9757: a1 = 0x20\n  9760: a0 = s0\n  9762: ra = 150, jump @0\n      : @177 [@dyn 75] (gas: 41)\n  9768: u8 [a0 + 31] = 0x14\n  9772: u8 [a0 + 30] = 0\n  9775: u8 [a0 + 29] = 0\n  9778: u8 [a0 + 28] = 0\n  9781: u8 [a0 + 27] = 0\n  9784: u8 [a0 + 26] = 0\n  9787: u8 [a0 + 25] = 0\n  9790: u8 [a0 + 24] = 0\n  9793: u8 [a0 + 23] = 0\n  9796: u8 [a0 + 22] = 0\n  9799: u8 [a0 + 21] = 0\n  9802: u8 [a0 + 20] = 0\n  9805: u8 [a0 + 19] = 0\n  9808: u8 [a0 + 18] = 0\n  9811: u8 [a0 + 17] = 0\n  9814: u8 [a0 + 16] = 0\n  9817: u8 [a0 + 15] = 0\n  9820: u8 [a0 + 14] = 0\n  9823: u8 [a0 + 13] = 0\n  9826: u8 [a0 + 12] = 0\n  9829: u8 [a0 + 11] = 0\n  9832: u8 [a0 + 10] = 0\n  9835: u8 [a0 + 9] = 0\n  9838: u8 [a0 + 8] = 0\n  9841: u8 [a0 + 7] = 0\n  9844: u8 [a0 + 6] = 0\n  9847: u8 [a0 + 5] = 0\n  9850: u8 [a0 + 4] = 0\n  9853: u8 [a0 + 3] = 0\n  9856: u8 [a0 + 2] = 0\n  9859: u8 [a0 + 1] = 0\n  9862: a1 = u64 [sp + 0x20]\n  9865: a2 = u64 [sp + 0x38]\n  9868: a1 = a1 | a2\n  9871: a2 = 0xffffffe0\n  9881: a2 = s1 <u a2\n  9884: a3 = u64 [sp + 0x40]\n  9887: a2 = 0 if a3 != 0\n  9889: a2 = 0 if a1 != 0\n  9891: u8 [a0 + 0] = 0\n  9893: jump @180 if a2 == 0\n      : @178 (gas: 3)\n  9897: i32 a0 = s0 + 0x20\n  9900: a1 = 0x20\n  9903: ra = 152, jump @0\n      : @179 [@dyn 76] (gas: 54)\n  9909: u8 [a0 + 31] = 0\n  9912: u8 [a0 + 30] = 0\n  9915: u8 [a0 + 29] = 0\n  9918: u8 [a0 + 28] = 0\n  9921: u8 [a0 + 27] = 0\n  9924: u8 [a0 + 26] = 0\n  9927: u8 [a0 + 25] = 0\n  9930: u8 [a0 + 24] = 0\n  9933: u8 [a0 + 23] = 0\n  9936: u8 [a0 + 22] = 0\n  9939: u8 [a0 + 21] = 0\n  9942: u8 [a0 + 20] = 0\n  9945: u8 [a0 + 19] = 0x77\n  9949: u8 [a0 + 18] = 0x61\n  9953: u8 [a0 + 17] = 0x72\n  9957: u8 [a0 + 16] = 0x64\n  9961: u8 [a0 + 15] = 0x68\n  9965: u8 [a0 + 14] = 0x74\n  9969: u8 [a0 + 13] = 0x69\n  9973: u8 [a0 + 12] = 0x77\n  9977: u8 [a0 + 11] = 0x20\n  9981: u8 [a0 + 10] = 0x6f\n  9985: u8 [a0 + 9] = 0x74\n  9989: u8 [a0 + 8] = 0x20\n  9993: u8 [a0 + 7] = 0x73\n  9997: u8 [a0 + 6] = 0x64\n 10001: u8 [a0 + 5] = 0x6e\n 10005: u8 [a0 + 4] = 0x75\n 10009: u8 [a0 + 3] = 0x66\n 10013: u8 [a0 + 2] = 0x20\n 10017: u8 [a0 + 1] = 0x6f\n 10021: u8 [a0 + 0] = 0x4e\n 10024: a1 = u64 [sp]\n 10026: a0 = a1 + 0x60\n 10029: a1 = a0 <u a1\n 10032: a3 = u64 [sp + 0x8]\n 10035: a2 = a3 + a1\n 10038: a3 = a2 <u a3\n 10041: a3 = a1 if a1 == 0\n 10044: a1 = u64 [sp + 0x10]\n 10047: a3 = a3 + a1\n 10050: a1 = a3 <u a1\n 10053: a4 = u64 [sp + 0x18]\n 10056: a1 = a1 + a4\n 10059: a4 = u64 [sp + 0x28]\n 10062: u64 [a4] = a0\n 10064: u64 [a4 + 0x8] = a2\n 10067: u64 [a4 + 0x10] = a3\n 10070: u64 [a4 + 0x18] = a1\n 10073: ra = u64 [sp + 0x58]\n 10076: s0 = u64 [sp + 0x50]\n 10079: s1 = u64 [sp + 0x48]\n 10082: sp = sp + 0x60\n 10085: ret\n      : @180 (gas: 1)\n 10087: trap\n      : @181 [@dyn 77] (gas: 130)\n 10088: a1 = u8 [a0 + 0x19]\n 10091: a2 = u8 [a0 + 0x18]\n 10094: a3 = u8 [a0 + 0x1a]\n 10097: a4 = u8 [a0 + 0x1b]\n 10100: a1 = a1 << 0x8\n 10103: a1 = a1 | a2\n 10106: a3 = a3 << 0x10\n 10109: a4 = a4 << 0x18\n 10112: a3 = a3 | a4\n 10115: a1 = a1 | a3\n 10118: a2 = u8 [a0 + 0x1d]\n 10121: a3 = u8 [a0 + 0x1c]\n 10124: a4 = u8 [a0 + 0x1e]\n 10127: a5 = u8 [a0 + 0x1f]\n 10130: a2 = a2 << 0x8\n 10133: a2 = a2 | a3\n 10136: a4 = a4 << 0x10\n 10139: a5 = a5 << 0x18\n 10142: a4 = a4 | a5\n 10145: a2 = a2 | a4\n 10148: a2 = a2 << 0x20\n 10151: t0 = a2 | a1\n 10154: a2 = u8 [a0 + 0x11]\n 10157: a3 = u8 [a0 + 0x10]\n 10160: a4 = u8 [a0 + 0x12]\n 10163: a5 = u8 [a0 + 0x13]\n 10166: a2 = a2 << 0x8\n 10169: a2 = a2 | a3\n 10172: a4 = a4 << 0x10\n 10175: a5 = a5 << 0x18\n 10178: a4 = a4 | a5\n 10181: a2 = a2 | a4\n 10184: a3 = u8 [a0 + 0x15]\n 10187: a4 = u8 [a0 + 0x14]\n 10190: a5 = u8 [a0 + 0x16]\n 10193: s1 = u8 [a0 + 0x17]\n 10196: a3 = a3 << 0x8\n 10199: a3 = a3 | a4\n 10202: a5 = a5 << 0x10\n 10205: s1 = s1 << 0x18\n 10208: a5 = a5 | s1\n 10211: a3 = a3 | a5\n 10214: a3 = a3 << 0x20\n 10217: a2 = a2 | a3\n 10220: a3 = u8 [a0 + 0x9]\n 10223: a4 = u8 [a0 + 0x8]\n 10226: a5 = u8 [a0 + 0xa]\n 10229: s1 = u8 [a0 + 0xb]\n 10232: a3 = a3 << 0x8\n 10235: a3 = a3 | a4\n 10238: a5 = a5 << 0x10\n 10241: s1 = s1 << 0x18\n 10244: a5 = a5 | s1\n 10247: a3 = a3 | a5\n 10250: a4 = u8 [a0 + 0xd]\n 10253: a5 = u8 [a0 + 0xc]\n 10256: s1 = u8 [a0 + 0xe]\n 10259: a1 = u8 [a0 + 0xf]\n 10262: a4 = a4 << 0x8\n 10265: a4 = a4 | a5\n 10268: s1 = s1 << 0x10\n 10271: a1 = a1 << 0x18\n 10274: a1 = a1 | s1\n 10277: a1 = a1 | a4\n 10280: a1 = a1 << 0x20\n 10283: a3 = a3 | a1\n 10286: a1 = u8 [a0 + 0x1]\n 10289: a4 = u8 [a0]\n 10291: a5 = u8 [a0 + 0x2]\n 10294: s1 = u8 [a0 + 0x3]\n 10297: a1 = a1 << 0x8\n 10300: a1 = a1 | a4\n 10303: a5 = a5 << 0x10\n 10306: s1 = s1 << 0x18\n 10309: a5 = a5 | s1\n 10312: a1 = a1 | a5\n 10315: a4 = u8 [a0 + 0x5]\n 10318: a5 = u8 [a0 + 0x4]\n 10321: s1 = u8 [a0 + 0x6]\n 10324: a0 = u8 [a0 + 0x7]\n 10327: a4 = a4 << 0x8\n 10330: a4 = a4 | a5\n 10333: s1 = s1 << 0x10\n 10336: a0 = a0 << 0x18\n 10339: a0 = a0 | s1\n 10342: a0 = a0 | a4\n 10345: a0 = a0 << 0x20\n 10348: a0 = a0 | a1\n 10351: t1 = reverse a0\n 10353: t2 = reverse a3\n 10355: s1 = reverse a2\n 10357: a5 = reverse t0\n 10359: a1 = u64 [sp + 0x18]\n 10362: a0 = a1 + 0x1f\n 10365: a1 = a0 <u a1\n 10368: a3 = u64 [sp + 0x20]\n 10371: a2 = a3 + a1\n 10374: a3 = a2 <u a3\n 10377: a3 = a1 if a1 == 0\n 10380: a1 = u64 [sp + 0x28]\n 10383: a3 = a3 + a1\n 10386: a1 = a3 <u a1\n 10389: a4 = u64 [sp + 0x30]\n 10392: a1 = a1 + a4\n 10395: a0 = a0 & 0xffffffffffffffe0\n 10398: a0 = a0 + a5\n 10401: u64 [sp + 0x28] = a5\n 10404: u64 [sp + 0x10] = a0\n 10407: a4 = a0 <u a5\n 10410: a2 = a2 + s1\n 10413: a5 = a2 + a4\n 10416: a2 = a5 ^ s1\n 10419: u64 [sp + 0x30] = s1\n 10422: a0 = a5 <u s1\n 10425: a0 = a4 if a2 == 0\n 10428: a3 = a3 + t2\n 10431: a4 = a3 + a0\n 10434: s1 = a4 <u a3\n 10437: a2 = a3 <u t2\n 10440: a1 = a1 + t1\n 10443: a1 = a1 + a2\n 10446: s1 = s1 + a1\n 10449: a1 = a4 >u 0\n 10451: a2 = s1 >u 0\n 10453: a2 = a1 if s1 == 0\n 10456: a1 = a4 | s1\n 10459: u64 [sp + 0x8] = a5\n 10462: a3 = a5 >u 0\n 10464: a3 = a2 if a1 != 0\n 10467: jump @185 if a3 != 0\n      : @182 (gas: 8)\n 10471: a1 = a4 <u t2\n 10474: a2 = s1 ^ t1\n 10477: a3 = s1 <u t1\n 10480: a3 = a1 if a2 == 0\n 10483: a1 = a4 ^ t2\n 10486: a1 = a1 | a2\n 10489: a0 = a3 if a1 != 0\n 10492: jump @185 if a0 != 0\n      : @183 (gas: 6)\n 10496: a0 = 0x40\n 10499: a1 = 0x20\n 10502: u64 [sp + 0x20] = t2\n 10505: u64 [sp + 0x18] = t1\n 10508: u64 [sp] = a4\n 10510: ra = 156, jump @0\n      : @184 [@dyn 78] (gas: 82)\n 10516: a1 = reverse s1\n 10518: a2 = u64 [sp]\n 10520: a2 = reverse a2\n 10522: a3 = u64 [sp + 0x8]\n 10525: a3 = reverse a3\n 10527: a4 = u64 [sp + 0x10]\n 10530: a4 = reverse a4\n 10532: u8 [a0 + 0x18] = a4\n 10535: a5 = a4 >> 0x38\n 10538: u8 [a0 + 0x1f] = a5\n 10541: a5 = a4 >> 0x30\n 10544: u8 [a0 + 0x1e] = a5\n 10547: a5 = a4 >> 0x28\n 10550: u8 [a0 + 0x1d] = a5\n 10553: a5 = a4 >> 0x20\n 10556: u8 [a0 + 0x1c] = a5\n 10559: a5 = a4 >> 0x18\n 10562: u8 [a0 + 0x1b] = a5\n 10565: a5 = a4 >> 0x10\n 10568: u8 [a0 + 0x1a] = a5\n 10571: a4 = a4 >> 0x8\n 10574: u8 [a0 + 0x19] = a4\n 10577: u8 [a0 + 0x10] = a3\n 10580: a4 = a3 >> 0x38\n 10583: u8 [a0 + 0x17] = a4\n 10586: a4 = a3 >> 0x30\n 10589: u8 [a0 + 0x16] = a4\n 10592: a4 = a3 >> 0x28\n 10595: u8 [a0 + 0x15] = a4\n 10598: a4 = a3 >> 0x20\n 10601: u8 [a0 + 0x14] = a4\n 10604: a4 = a3 >> 0x18\n 10607: u8 [a0 + 0x13] = a4\n 10610: a4 = a3 >> 0x10\n 10613: u8 [a0 + 0x12] = a4\n 10616: a3 = a3 >> 0x8\n 10619: u8 [a0 + 0x11] = a3\n 10622: u8 [a0 + 0x8] = a2\n 10625: a3 = a2 >> 0x38\n 10628: u8 [a0 + 0xf] = a3\n 10631: a3 = a2 >> 0x30\n 10634: u8 [a0 + 0xe] = a3\n 10637: a3 = a2 >> 0x28\n 10640: u8 [a0 + 0xd] = a3\n 10643: a3 = a2 >> 0x20\n 10646: u8 [a0 + 0xc] = a3\n 10649: a3 = a2 >> 0x18\n 10652: u8 [a0 + 0xb] = a3\n 10655: a3 = a2 >> 0x10\n 10658: u8 [a0 + 0xa] = a3\n 10661: a2 = a2 >> 0x8\n 10664: u8 [a0 + 0x9] = a2\n 10667: u8 [a0] = a1\n 10669: a2 = a1 >> 0x38\n 10672: u8 [a0 + 0x7] = a2\n 10675: a2 = a1 >> 0x30\n 10678: u8 [a0 + 0x6] = a2\n 10681: a2 = a1 >> 0x28\n 10684: u8 [a0 + 0x5] = a2\n 10687: a2 = a1 >> 0x20\n 10690: u8 [a0 + 0x4] = a2\n 10693: a2 = a1 >> 0x18\n 10696: u8 [a0 + 0x3] = a2\n 10699: a2 = a1 >> 0x10\n 10702: u8 [a0 + 0x2] = a2\n 10705: a1 = a1 >> 0x8\n 10708: u8 [a0 + 0x1] = a1\n 10711: a0 = u64 [sp + 0x38]\n 10714: a1 = u64 [sp + 0x28]\n 10717: u64 [a0] = a1\n 10719: a1 = u64 [sp + 0x18]\n 10722: u64 [a0 + 0x18] = a1\n 10725: a1 = u64 [sp + 0x30]\n 10728: u64 [a0 + 0x8] = a1\n 10731: a1 = u64 [sp + 0x20]\n 10734: u64 [a0 + 0x10] = a1\n 10737: sp = s0 + 0xffffffffffffff60\n 10741: ra = u64 [sp + 0x98]\n 10745: s0 = u64 [sp + 0x90]\n 10749: s1 = u64 [sp + 0x88]\n 10753: sp = sp + 0xa0\n 10757: ret\n      : @185 (gas: 8)\n 10759: u64 [sp + 112] = 0\n 10762: u64 [sp + 104] = 0\n 10765: u64 [sp + 96] = 0\n 10768: a0 = 0x4e487b7100000000\n 10778: a1 = sp + 0x60\n 10781: u64 [sp + 0x78] = a0\n 10784: a0 = 0\n 10786: ra = 158, jump @8\n      : @186 [@dyn 79] (gas: 7)\n 10792: u64 [sp + 88] = 0\n 10795: u64 [sp + 80] = 0\n 10798: u64 [sp + 64] = 0x41\n 10802: a0 = 0x4\n 10805: a1 = sp + 0x40\n 10808: u64 [sp + 72] = 0\n 10811: ra = 160, jump @8\n      : @187 [@dyn 80] (gas: 3)\n 10817: a1 = 0x24\n 10820: a0 = 0\n 10822: ra = 162, jump @0\n      : @188 [@dyn 81] (gas: 6)\n 10828: i32 a1 = a0 + 0\n 10830: a0 = 0x1\n 10833: a2 = 0x24\n 10836: ra = 0xa4\n 10840: ecalli 13 // 'seal_return'\n 10842: fallthrough\n      : @189 [@dyn 82] (gas: 7)\n 10843: a3 = u64 [a1 + 0x18]\n 10846: a4 = u64 [a1 + 0x10]\n 10849: a2 = u64 [a1 + 0x8]\n 10852: a3 = a3 | a4\n 10855: a4 = a2 <u 0x1\n 10858: a4 = 0 if a3 != 0\n 10860: jump @191 if a4 == 0\n      : @190 (gas: 16)\n 10863: a1 = u64 [a1]\n 10865: a3 = a1 + 0x1f\n 10868: a1 = a3 <u a1\n 10871: a1 = a1 + a2\n 10874: a1 = a1 & 0x1\n 10877: a3 = a3 & 0xffffffffffffffe0\n 10880: a2 = a3 + 0x20\n 10883: a3 = a2 <u a3\n 10886: a4 = a1 + a3\n 10889: a1 = a4 <u a1\n 10892: a1 = a3 if a3 == 0\n 10895: u64 [a0 + 24] = 0\n 10898: u64 [a0] = a2\n 10900: u64 [a0 + 0x8] = a4\n 10903: u64 [a0 + 0x10] = a1\n 10906: ret\n      : @191 (gas: 13)\n 10908: sp = sp + 0xffffffffffffffb0\n 10911: u64 [sp + 0x48] = ra\n 10914: u64 [sp + 0x40] = s0\n 10917: s0 = sp + 0x50\n 10920: sp = sp & 0xfffffffffffffff0\n 10923: u64 [sp + 48] = 0\n 10926: u64 [sp + 40] = 0\n 10929: u64 [sp + 32] = 0\n 10932: a0 = 0x4e487b7100000000\n 10942: a1 = sp + 0x20\n 10945: u64 [sp + 0x38] = a0\n 10948: a0 = 0\n 10950: ra = 166, jump @8\n      : @192 [@dyn 83] (gas: 7)\n 10956: u64 [sp + 24] = 0\n 10959: u64 [sp + 16] = 0\n 10962: u64 [sp + 0] = 0x41\n 10965: a0 = 0x4\n 10968: a1 = sp\n 10970: u64 [sp + 8] = 0\n 10973: ra = 168, jump @8\n      : @193 [@dyn 84] (gas: 3)\n 10979: a1 = 0x24\n 10982: a0 = 0\n 10984: ra = 170, jump @0\n      : @194 [@dyn 85] (gas: 6)\n 10990: i32 a1 = a0 + 0\n 10992: a0 = 0x1\n 10995: a2 = 0x24\n 10998: ra = 0xac\n 11002: ecalli 13 // 'seal_return'\n 11004: fallthrough\n      : @195 [@dyn 86] (gas: 16)\n 11005: sp = sp + 0xffffffffffffff20\n 11009: u64 [sp + 0xd8] = ra\n 11013: u64 [sp + 0xd0] = s0\n 11017: u64 [sp + 0xc8] = s1\n 11021: s0 = sp + 0xe0\n 11025: sp = sp & 0xfffffffffffffff0\n 11028: a3 = u64 [a1 + 0x18]\n 11031: a2 = u64 [a1 + 0x10]\n 11034: a4 = u64 [a1 + 0x8]\n 11037: u64 [sp + 0x10] = a2\n 11040: u64 [sp + 0x8] = a3\n 11043: a2 = a2 | a3\n 11046: a3 = a4 <u 0x1\n 11049: a3 = 0 if a2 != 0\n 11051: u64 [sp + 0x38] = a0\n 11054: jump @201 if a3 == 0\n      : @196 (gas: 38)\n 11058: s1 = u64 [a1]\n 11060: a0 = s1 + 0x1f\n 11063: a1 = a0 <u s1\n 11066: u64 [sp + 0x18] = a4\n 11069: a1 = a1 + a4\n 11072: a1 = a1 & 0x1\n 11075: a0 = a0 & 0xffffffffffffffe0\n 11078: a2 = a0 + 0x20\n 11081: a0 = a2 <u a0\n 11084: a3 = a1 + a0\n 11087: a4 = a3 <u a1\n 11090: a4 = a0 if a0 == 0\n 11093: u64 [sp + 152] = 0\n 11097: u64 [sp + 0x80] = a2\n 11101: u64 [sp + 0x88] = a3\n 11105: a0 = sp + 0xa0\n 11109: a1 = sp + 0x80\n 11113: u64 [sp + 0x90] = a4\n 11117: ra = 0xae\n 11121: sp = sp + 0xffffffffffffff60\n 11125: u64 [sp + 0x98] = ra\n 11129: u64 [sp + 0x90] = s0\n 11133: u64 [sp + 0x88] = s1\n 11137: s0 = sp + 0xa0\n 11141: sp = sp & 0xfffffffffffffff0\n 11144: a2 = u64 [a1 + 0x18]\n 11147: u64 [sp + 0x30] = a2\n 11150: a2 = u64 [a1 + 0x10]\n 11153: u64 [sp + 0x28] = a2\n 11156: a2 = u64 [a1 + 0x8]\n 11159: u64 [sp + 0x20] = a2\n 11162: a1 = u64 [a1]\n 11164: u64 [sp + 0x18] = a1\n 11167: u64 [sp + 0x38] = a0\n 11170: a0 = 0x40\n 11173: a1 = 0x20\n 11176: ra = 0x9a\n 11180: jump @0\n      : @197 [@dyn 87] (gas: 15)\n 11183: a0 = u64 [sp + 0xb8]\n 11187: a2 = u64 [sp + 0xb0]\n 11191: a1 = u64 [sp + 0xa8]\n 11195: a3 = u64 [sp + 0xa0]\n 11199: u64 [sp + 0x28] = a0\n 11202: u64 [sp + 0x20] = a1\n 11205: a0 = a0 | a1\n 11208: a1 = a3 | a2\n 11211: a1 = a1 | a0\n 11214: a1 = a1 >> 0x20\n 11217: u64 [sp + 0x30] = a2\n 11220: a0 = a0 | a2\n 11223: a0 = a0 << 0x20\n 11226: a0 = a0 | a1\n 11229: jump @200 if a0 != 0\n      : @198 (gas: 4)\n 11233: i32 a0 = a3 + 0\n 11235: a1 = 0x20\n 11238: u64 [sp] = a3\n 11240: ra = 176, jump @0\n      : @199 [@dyn 88] (gas: 82)\n 11246: a1 = u64 [sp + 0x8]\n 11249: a1 = reverse a1\n 11251: a2 = u64 [sp + 0x10]\n 11254: a2 = reverse a2\n 11256: a3 = u64 [sp + 0x18]\n 11259: a3 = reverse a3\n 11261: a4 = reverse s1\n 11263: a5 = a4 >> 0x38\n 11266: u8 [a0 + 0x1f] = a5\n 11269: a5 = a4 >> 0x30\n 11272: u8 [a0 + 0x1e] = a5\n 11275: a5 = a4 >> 0x28\n 11278: u8 [a0 + 0x1d] = a5\n 11281: a5 = a4 >> 0x20\n 11284: u8 [a0 + 0x1c] = a5\n 11287: a5 = a4 >> 0x18\n 11290: u8 [a0 + 0x1b] = a5\n 11293: a5 = a4 >> 0x10\n 11296: u8 [a0 + 0x1a] = a5\n 11299: a5 = a4 >> 0x8\n 11302: u8 [a0 + 0x19] = a5\n 11305: u8 [a0 + 0x18] = a4\n 11308: u8 [a0 + 0x10] = a3\n 11311: a4 = a3 >> 0x38\n 11314: u8 [a0 + 0x17] = a4\n 11317: a4 = a3 >> 0x30\n 11320: u8 [a0 + 0x16] = a4\n 11323: a4 = a3 >> 0x28\n 11326: u8 [a0 + 0x15] = a4\n 11329: a4 = a3 >> 0x20\n 11332: u8 [a0 + 0x14] = a4\n 11335: a4 = a3 >> 0x18\n 11338: u8 [a0 + 0x13] = a4\n 11341: a4 = a3 >> 0x10\n 11344: u8 [a0 + 0x12] = a4\n 11347: a3 = a3 >> 0x8\n 11350: u8 [a0 + 0x11] = a3\n 11353: u8 [a0 + 0x8] = a2\n 11356: a3 = a2 >> 0x38\n 11359: u8 [a0 + 0xf] = a3\n 11362: a3 = a2 >> 0x30\n 11365: u8 [a0 + 0xe] = a3\n 11368: a3 = a2 >> 0x28\n 11371: u8 [a0 + 0xd] = a3\n 11374: a3 = a2 >> 0x20\n 11377: u8 [a0 + 0xc] = a3\n 11380: a3 = a2 >> 0x18\n 11383: u8 [a0 + 0xb] = a3\n 11386: a3 = a2 >> 0x10\n 11389: u8 [a0 + 0xa] = a3\n 11392: a2 = a2 >> 0x8\n 11395: u8 [a0 + 0x9] = a2\n 11398: u8 [a0] = a1\n 11400: a2 = a1 >> 0x38\n 11403: u8 [a0 + 0x7] = a2\n 11406: a2 = a1 >> 0x30\n 11409: u8 [a0 + 0x6] = a2\n 11412: a2 = a1 >> 0x28\n 11415: u8 [a0 + 0x5] = a2\n 11418: a2 = a1 >> 0x20\n 11421: u8 [a0 + 0x4] = a2\n 11424: a2 = a1 >> 0x18\n 11427: u8 [a0 + 0x3] = a2\n 11430: a2 = a1 >> 0x10\n 11433: u8 [a0 + 0x2] = a2\n 11436: a1 = a1 >> 0x8\n 11439: u8 [a0 + 0x1] = a1\n 11442: a0 = u64 [sp + 0x38]\n 11445: a1 = u64 [sp]\n 11447: u64 [a0] = a1\n 11449: a1 = u64 [sp + 0x28]\n 11452: u64 [a0 + 0x18] = a1\n 11455: a1 = u64 [sp + 0x20]\n 11458: u64 [a0 + 0x8] = a1\n 11461: a1 = u64 [sp + 0x30]\n 11464: u64 [a0 + 0x10] = a1\n 11467: sp = s0 + 0xffffffffffffff20\n 11471: ra = u64 [sp + 0xd8]\n 11475: s0 = u64 [sp + 0xd0]\n 11479: s1 = u64 [sp + 0xc8]\n 11483: sp = sp + 0xe0\n 11487: ret\n      : @200 (gas: 1)\n 11489: trap\n      : @201 (gas: 8)\n 11490: u64 [sp + 112] = 0\n 11493: u64 [sp + 104] = 0\n 11496: u64 [sp + 96] = 0\n 11499: a0 = 0x4e487b7100000000\n 11509: a1 = sp + 0x60\n 11512: u64 [sp + 0x78] = a0\n 11515: a0 = 0\n 11517: ra = 178, jump @8\n      : @202 [@dyn 89] (gas: 7)\n 11523: u64 [sp + 88] = 0\n 11526: u64 [sp + 80] = 0\n 11529: u64 [sp + 64] = 0x41\n 11533: a0 = 0x4\n 11536: a1 = sp + 0x40\n 11539: u64 [sp + 72] = 0\n 11542: ra = 180, jump @8\n      : @203 [@dyn 90] (gas: 3)\n 11548: a1 = 0x24\n 11551: a0 = 0\n 11553: ra = 182, jump @0\n      : @204 [@dyn 91] (gas: 6)\n 11559: i32 a1 = a0 + 0\n 11561: a0 = 0x1\n 11564: a2 = 0x24\n 11567: ra = 0xb8\n 11571: ecalli 13 // 'seal_return'\n 11573: fallthrough\n      : @205 [@dyn 92] (gas: 6)\n 11574: u64 [a0 + 24] = 0\n 11577: u64 [a0 + 16] = 0\n 11580: u64 [a0 + 8] = 0\n 11583: a1 = 0x60\n 11586: u64 [a0] = a1\n 11588: ret\n      : @206 (gas: 9)\n 11590: sp = sp + 0xffffffffffffff60\n 11594: u64 [sp + 0x98] = ra\n 11598: u64 [sp + 0x90] = s0\n 11602: u64 [sp + 0x88] = s1\n 11606: s0 = sp + 0xa0\n 11610: sp = sp & 0xffffffffffffffe0\n 11613: s1 = a0\n 11615: ecalli 12 // 'return_data_size'\n 11617: fallthrough\n      : @207 (gas: 1)\n 11618: jump @216 if a0 == 0\n      : @208 (gas: 9)\n 11622: u64 [sp + 0x20] = s1\n 11625: ecalli 12 // 'return_data_size'\n 11627: u64 [sp + 88] = 0\n 11630: u64 [sp + 80] = 0\n 11633: u64 [sp + 0x40] = a0\n 11636: a0 = sp + 0x60\n 11639: a1 = sp + 0x40\n 11642: u64 [sp + 72] = 0\n 11645: ra = 186, jump @195\n      : @209 [@dyn 93] (gas: 9)\n 11651: a0 = u64 [sp + 0x78]\n 11654: u64 [sp + 0x38] = a0\n 11657: a0 = u64 [sp + 0x70]\n 11660: u64 [sp + 0x30] = a0\n 11663: a0 = u64 [sp + 0x68]\n 11666: u64 [sp + 0x28] = a0\n 11669: s1 = u64 [sp + 0x60]\n 11672: ecalli 12 // 'return_data_size'\n 11674: fallthrough\n      : @210 (gas: 20)\n 11675: a1 = s1 + 0x20\n 11678: u64 [sp + 0x18] = s1\n 11681: a2 = a1 <u s1\n 11684: a4 = u64 [sp + 0x28]\n 11687: a3 = a4 + a2\n 11690: a4 = a3 <u a4\n 11693: a4 = a2 if a2 == 0\n 11696: a2 = u64 [sp + 0x30]\n 11699: a4 = a4 + a2\n 11702: a2 = a4 <u a2\n 11705: a5 = u64 [sp + 0x38]\n 11708: a2 = a2 + a5\n 11711: a5 = a1 | a4\n 11714: a2 = a2 | a3\n 11717: a5 = a5 | a2\n 11720: a5 = a5 >> 0x20\n 11723: a2 = a2 | a4\n 11726: a2 = a2 << 0x20\n 11729: a2 = a2 | a5\n 11732: jump @215 if a2 != 0\n      : @211 (gas: 3)\n 11735: s1 = a0\n 11737: a0 = a0 >> 0x20\n 11740: jump @215 if a0 != 0\n      : @212 (gas: 4)\n 11743: i32 a0 = a1 + 0\n 11745: i32 a1 = s1 + 0\n 11747: u64 [sp + 0x10] = a1\n 11750: ra = 188, jump @0\n      : @213 [@dyn 94] (gas: 6)\n 11756: u32 [sp + 0x80] = s1\n 11760: i32 a0 = a0 + 0\n 11762: i32 a1 = sp + 0x80\n 11766: a2 = 0\n 11768: ecalli 11 // 'return_data_copy'\n 11770: fallthrough\n      : @214 (gas: 8)\n 11771: a0 = i32 [sp + 0x80]\n 11775: s1 = u64 [sp + 0x20]\n 11778: a1 = u64 [sp + 0x38]\n 11781: a2 = u64 [sp + 0x30]\n 11784: a3 = u64 [sp + 0x28]\n 11787: a4 = u64 [sp + 0x18]\n 11790: a5 = u64 [sp + 0x10]\n 11793: jump @217 if a0 >=u a5\n      : @215 (gas: 1)\n 11796: trap\n      : @216 (gas: 5)\n 11797: a3 = 0\n 11799: a2 = 0\n 11801: a1 = 0\n 11803: a4 = 0x60\n 11806: fallthrough\n      : @217 (gas: 10)\n 11807: u64 [s1] = a4\n 11809: u64 [s1 + 0x8] = a3\n 11812: u64 [s1 + 0x10] = a2\n 11815: u64 [s1 + 0x18] = a1\n 11818: sp = s0 + 0xffffffffffffff60\n 11822: ra = u64 [sp + 0x98]\n 11826: s0 = u64 [sp + 0x90]\n 11830: s1 = u64 [sp + 0x88]\n 11834: sp = sp + 0xa0\n 11838: ret\n      : @218 (gas: 17)\n 11840: sp = sp + 0xffffffffffffffa0\n 11843: u64 [sp + 0x58] = ra\n 11846: u64 [sp + 0x50] = s0\n 11849: u64 [sp + 0x48] = s1\n 11852: a3 = u64 [a1 + 0x18]\n 11855: a4 = u64 [a1 + 0x10]\n 11858: a5 = u64 [a1 + 0x8]\n 11861: s1 = u64 [a1]\n 11863: a1 = a5 | a3\n 11866: a2 = s1 | a4\n 11869: a2 = a2 | a1\n 11872: a2 = a2 >> 0x20\n 11875: a1 = a1 | a4\n 11878: a1 = a1 << 0x20\n 11881: a1 = a1 | a2\n 11884: u64 [sp + 0x28] = a0\n 11887: jump @225 if a1 != 0\n      : @219 (gas: 19)\n 11891: a0 = s1 + 0x20\n 11894: u64 [sp + 0x30] = a0\n 11897: a0 = a0 <u s1\n 11900: a1 = a5 + a0\n 11903: u64 [sp + 0x40] = a1\n 11906: u64 [sp + 0x8] = a5\n 11909: s0 = a1 <u a5\n 11912: s0 = a0 if a0 == 0\n 11915: s0 = s0 + a4\n 11918: u64 [sp + 0x10] = a4\n 11921: a0 = s0 <u a4\n 11924: u64 [sp + 0x18] = a3\n 11927: a0 = a0 + a3\n 11930: u64 [sp + 0x38] = a0\n 11933: u64 [sp] = s1\n 11935: i32 a0 = s1 + 0\n 11937: a1 = 0x20\n 11940: s1 = 0x20\n 11943: ra = 190, jump @0\n      : @220 [@dyn 95] (gas: 45)\n 11949: u8 [a0 + 0x1f] = s1\n 11952: a1 = u64 [sp + 0x30]\n 11955: s1 = a1\n 11957: a1 = a1 | s0\n 11960: a2 = u64 [sp + 0x40]\n 11963: a4 = u64 [sp + 0x38]\n 11966: a2 = a2 | a4\n 11969: a1 = a1 | a2\n 11972: a1 = a1 >> 0x20\n 11975: u64 [sp + 0x20] = s0\n 11978: a2 = a2 | s0\n 11981: a2 = a2 << 0x20\n 11984: a1 = a1 | a2\n 11987: u8 [a0 + 30] = 0\n 11990: u8 [a0 + 29] = 0\n 11993: u8 [a0 + 28] = 0\n 11996: u8 [a0 + 27] = 0\n 11999: u8 [a0 + 26] = 0\n 12002: u8 [a0 + 25] = 0\n 12005: u8 [a0 + 24] = 0\n 12008: u8 [a0 + 23] = 0\n 12011: u8 [a0 + 22] = 0\n 12014: u8 [a0 + 21] = 0\n 12017: u8 [a0 + 20] = 0\n 12020: u8 [a0 + 19] = 0\n 12023: u8 [a0 + 18] = 0\n 12026: u8 [a0 + 17] = 0\n 12029: u8 [a0 + 16] = 0\n 12032: u8 [a0 + 15] = 0\n 12035: u8 [a0 + 14] = 0\n 12038: u8 [a0 + 13] = 0\n 12041: u8 [a0 + 12] = 0\n 12044: u8 [a0 + 11] = 0\n 12047: u8 [a0 + 10] = 0\n 12050: u8 [a0 + 9] = 0\n 12053: u8 [a0 + 8] = 0\n 12056: u8 [a0 + 7] = 0\n 12059: u8 [a0 + 6] = 0\n 12062: u8 [a0 + 5] = 0\n 12065: u8 [a0 + 4] = 0\n 12068: u8 [a0 + 3] = 0\n 12071: u8 [a0 + 2] = 0\n 12074: u8 [a0 + 1] = 0\n 12077: u8 [a0 + 0] = 0\n 12079: jump @225 if a1 != 0\n      : @221 (gas: 4)\n 12083: i32 s0 = s1 + 0\n 12085: a1 = 0x20\n 12088: a0 = s0\n 12090: ra = 192, jump @0\n      : @222 [@dyn 96] (gas: 41)\n 12096: u8 [a0 + 31] = 0xf\n 12100: u8 [a0 + 30] = 0\n 12103: u8 [a0 + 29] = 0\n 12106: u8 [a0 + 28] = 0\n 12109: u8 [a0 + 27] = 0\n 12112: u8 [a0 + 26] = 0\n 12115: u8 [a0 + 25] = 0\n 12118: u8 [a0 + 24] = 0\n 12121: u8 [a0 + 23] = 0\n 12124: u8 [a0 + 22] = 0\n 12127: u8 [a0 + 21] = 0\n 12130: u8 [a0 + 20] = 0\n 12133: u8 [a0 + 19] = 0\n 12136: u8 [a0 + 18] = 0\n 12139: u8 [a0 + 17] = 0\n 12142: u8 [a0 + 16] = 0\n 12145: u8 [a0 + 15] = 0\n 12148: u8 [a0 + 14] = 0\n 12151: u8 [a0 + 13] = 0\n 12154: u8 [a0 + 12] = 0\n 12157: u8 [a0 + 11] = 0\n 12160: u8 [a0 + 10] = 0\n 12163: u8 [a0 + 9] = 0\n 12166: u8 [a0 + 8] = 0\n 12169: u8 [a0 + 7] = 0\n 12172: u8 [a0 + 6] = 0\n 12175: u8 [a0 + 5] = 0\n 12178: u8 [a0 + 4] = 0\n 12181: u8 [a0 + 3] = 0\n 12184: u8 [a0 + 2] = 0\n 12187: u8 [a0 + 1] = 0\n 12190: a1 = u64 [sp + 0x20]\n 12193: a2 = u64 [sp + 0x38]\n 12196: a1 = a1 | a2\n 12199: a2 = 0xffffffe0\n 12209: a2 = s1 <u a2\n 12212: a3 = u64 [sp + 0x40]\n 12215: a2 = 0 if a3 != 0\n 12217: a2 = 0 if a1 != 0\n 12219: u8 [a0 + 0] = 0\n 12221: jump @225 if a2 == 0\n      : @223 (gas: 3)\n 12225: i32 a0 = s0 + 0x20\n 12228: a1 = 0x20\n 12231: ra = 194, jump @0\n      : @224 [@dyn 97] (gas: 54)\n 12237: u8 [a0 + 31] = 0\n 12240: u8 [a0 + 30] = 0\n 12243: u8 [a0 + 29] = 0\n 12246: u8 [a0 + 28] = 0\n 12249: u8 [a0 + 27] = 0\n 12252: u8 [a0 + 26] = 0\n 12255: u8 [a0 + 25] = 0\n 12258: u8 [a0 + 24] = 0\n 12261: u8 [a0 + 23] = 0\n 12264: u8 [a0 + 22] = 0\n 12267: u8 [a0 + 21] = 0\n 12270: u8 [a0 + 20] = 0\n 12273: u8 [a0 + 19] = 0\n 12276: u8 [a0 + 18] = 0\n 12279: u8 [a0 + 17] = 0\n 12282: u8 [a0 + 16] = 0\n 12285: u8 [a0 + 15] = 0\n 12288: u8 [a0 + 14] = 0x64\n 12292: u8 [a0 + 13] = 0x65\n 12296: u8 [a0 + 12] = 0x6c\n 12300: u8 [a0 + 11] = 0x69\n 12304: u8 [a0 + 10] = 0x61\n 12308: u8 [a0 + 9] = 0x66\n 12312: u8 [a0 + 8] = 0x20\n 12316: u8 [a0 + 7] = 0x77\n 12320: u8 [a0 + 6] = 0x61\n 12324: u8 [a0 + 5] = 0x72\n 12328: u8 [a0 + 4] = 0x64\n 12332: u8 [a0 + 3] = 0x68\n 12336: u8 [a0 + 2] = 0x74\n 12340: u8 [a0 + 1] = 0x69\n 12344: u8 [a0 + 0] = 0x57\n 12347: a1 = u64 [sp]\n 12349: a0 = a1 + 0x60\n 12352: a1 = a0 <u a1\n 12355: a3 = u64 [sp + 0x8]\n 12358: a2 = a3 + a1\n 12361: a3 = a2 <u a3\n 12364: a3 = a1 if a1 == 0\n 12367: a1 = u64 [sp + 0x10]\n 12370: a3 = a3 + a1\n 12373: a1 = a3 <u a1\n 12376: a4 = u64 [sp + 0x18]\n 12379: a1 = a1 + a4\n 12382: a4 = u64 [sp + 0x28]\n 12385: u64 [a4] = a0\n 12387: u64 [a4 + 0x8] = a2\n 12390: u64 [a4 + 0x10] = a3\n 12393: u64 [a4 + 0x18] = a1\n 12396: ra = u64 [sp + 0x58]\n 12399: s0 = u64 [sp + 0x50]\n 12402: s1 = u64 [sp + 0x48]\n 12405: sp = sp + 0x60\n 12408: ret\n      : @225 (gas: 1)\n 12410: trap\n      : @226 (gas: 20)\n 12411: a0 = u64 [s1 + 0x3d8]\n 12415: t0 = u64 [s1 + 0x3c0]\n 12419: a2 = u64 [s1 + 0x3d0]\n 12423: a3 = u64 [s1 + 0x3c8]\n 12427: a1 = u64 [s1 + 0x60]\n 12430: a4 = a1 ^ a0\n 12433: a1 = a1 <u a0\n 12436: a0 = u64 [s1 + 0x68]\n 12439: a5 = a0 <u a2\n 12442: a5 = a1 if a4 != 0\n 12445: a1 = u64 [s1 + 0x70]\n 12448: t1 = a1 ^ a3\n 12451: a3 = a1 <u a3\n 12454: a1 = u64 [s1 + 0x78]\n 12457: a1 = a1 <u t0\n 12460: a1 = a3 if t1 != 0\n 12463: a0 = a0 ^ a2\n 12466: a0 = a0 | a4\n 12469: a1 = a5 if a0 != 0\n 12472: jump @268 if a1 != 0\n      : @227 (gas: 16)\n 12476: i32 a0 = s1 + 0x220\n 12480: ecalli 0 // 'address'\n 12481: a0 = u64 [s1 + 0x228]\n 12485: a1 = u64 [s1 + 0x220]\n 12489: a2 = i32 [s1 + 0x230]\n 12493: u64 [s1 + 0x248] = a0\n 12497: u64 [s1 + 0x240] = a1\n 12501: u32 [s1 + 0x250] = a2\n 12505: a0 = sp + 0xffffffffffffffe0\n 12508: a0 = a0 & 0xffffffffffffffe0\n 12511: u64 [s1 + 0x78] = a0\n 12514: sp = a0\n 12516: i32 a1 = a0 + 0\n 12518: i32 a0 = s1 + 0x240\n 12522: ecalli 1 // 'balance_of'\n 12524: fallthrough\n      : @228 (gas: 13)\n 12525: a1 = u64 [s1 + 0x78]\n 12528: a2 = u64 [a1 + 0x10]\n 12531: a3 = u64 [a1 + 0x18]\n 12534: a0 = u64 [a1 + 0x8]\n 12537: a1 = u64 [a1]\n 12539: u64 [s1 + 0x68] = a0\n 12542: u64 [s1 + 0x60] = a3\n 12545: a0 = a0 | a3\n 12548: u64 [s1 + 0x78] = a1\n 12551: u64 [s1 + 0x70] = a2\n 12554: a1 = a1 | a2\n 12557: a0 = a0 | a1\n 12560: jump @263 if a0 == 0\n      : @229 (gas: 16)\n 12564: u64 [s1 + 920] = 0\n 12568: u64 [s1 + 912] = 0\n 12572: u64 [s1 + 904] = 0\n 12576: u64 [s1 + 896] = 0x2\n 12581: u64 [s1 + 984] = 0\n 12585: u64 [s1 + 976] = 0\n 12589: u64 [s1 + 968] = 0\n 12593: u64 [s1 + 960] = 0\n 12597: u32 [s1 + 928] = 0x20\n 12602: i32 a1 = s1 + 0x380\n 12606: i32 a3 = s1 + 0x3c0\n 12610: i32 a4 = s1 + 0x3a0\n 12614: a2 = 0xffffffffffffffff\n 12617: a0 = 0\n 12619: ecalli 8 // 'get_storage'\n 12621: fallthrough\n      : @230 (gas: 2)\n 12622: a0 = u8 [s1 + 0x3d5]\n 12626: jump @263 if a0 != 0\n      : @231 (gas: 8)\n 12630: a0 = u64 [s1 + 0x30]\n 12633: a1 = u64 [s1 + 0x28]\n 12636: a0 = a0 | a1\n 12639: a1 = u64 [s1 + 0x40]\n 12642: a2 = u64 [s1 + 0x38]\n 12645: a1 = a1 | a2\n 12648: a0 = a0 | a1\n 12651: jump @246 if a0 == 0\n      : @232 (gas: 3)\n 12655: a0 = 0x40\n 12658: a1 = 0x20\n 12661: ra = 196, jump @0\n      : @233 [@dyn 98] (gas: 98)\n 12667: a1 = u8 [a0 + 0x11]\n 12670: a2 = u8 [a0 + 0x10]\n 12673: a3 = u8 [a0 + 0x12]\n 12676: a4 = u8 [a0 + 0x13]\n 12679: a1 = a1 << 0x8\n 12682: a1 = a1 | a2\n 12685: a3 = a3 << 0x10\n 12688: a4 = a4 << 0x18\n 12691: a3 = a3 | a4\n 12694: a1 = a1 | a3\n 12697: a2 = u8 [a0 + 0x15]\n 12700: a3 = u8 [a0 + 0x14]\n 12703: a4 = u8 [a0 + 0x16]\n 12706: a5 = u8 [a0 + 0x17]\n 12709: a2 = a2 << 0x8\n 12712: a2 = a2 | a3\n 12715: a4 = a4 << 0x10\n 12718: a5 = a5 << 0x18\n 12721: a4 = a4 | a5\n 12724: a2 = a2 | a4\n 12727: a2 = a2 << 0x20\n 12730: t0 = a2 | a1\n 12733: a2 = u8 [a0 + 0x1]\n 12736: a3 = u8 [a0]\n 12738: a4 = u8 [a0 + 0x2]\n 12741: a5 = u8 [a0 + 0x3]\n 12744: a2 = a2 << 0x8\n 12747: a2 = a2 | a3\n 12750: a4 = a4 << 0x10\n 12753: a5 = a5 << 0x18\n 12756: a4 = a4 | a5\n 12759: a2 = a2 | a4\n 12762: a3 = u8 [a0 + 0x5]\n 12765: a4 = u8 [a0 + 0x4]\n 12768: a5 = u8 [a0 + 0x6]\n 12771: a1 = u8 [a0 + 0x7]\n 12774: a3 = a3 << 0x8\n 12777: a3 = a3 | a4\n 12780: a5 = a5 << 0x10\n 12783: a1 = a1 << 0x18\n 12786: a1 = a1 | a5\n 12789: a1 = a1 | a3\n 12792: a1 = a1 << 0x20\n 12795: t1 = a1 | a2\n 12798: a1 = u8 [a0 + 0x19]\n 12801: a3 = u8 [a0 + 0x18]\n 12804: a4 = u8 [a0 + 0x1a]\n 12807: a5 = u8 [a0 + 0x1b]\n 12810: a1 = a1 << 0x8\n 12813: a1 = a1 | a3\n 12816: a4 = a4 << 0x10\n 12819: a5 = a5 << 0x18\n 12822: a4 = a4 | a5\n 12825: a1 = a1 | a4\n 12828: a3 = u8 [a0 + 0x1d]\n 12831: a4 = u8 [a0 + 0x1c]\n 12834: a5 = u8 [a0 + 0x1e]\n 12837: a2 = u8 [a0 + 0x1f]\n 12840: a3 = a3 << 0x8\n 12843: a3 = a3 | a4\n 12846: a5 = a5 << 0x10\n 12849: a2 = a2 << 0x18\n 12852: a2 = a2 | a5\n 12855: a2 = a2 | a3\n 12858: a2 = a2 << 0x20\n 12861: a3 = a2 | a1\n 12864: a1 = u8 [a0 + 0x9]\n 12867: a2 = u8 [a0 + 0x8]\n 12870: a4 = u8 [a0 + 0xa]\n 12873: a5 = u8 [a0 + 0xb]\n 12876: a1 = a1 << 0x8\n 12879: a1 = a1 | a2\n 12882: a4 = a4 << 0x10\n 12885: a5 = a5 << 0x18\n 12888: a4 = a4 | a5\n 12891: a1 = a1 | a4\n 12894: a2 = u8 [a0 + 0xd]\n 12897: a4 = u8 [a0 + 0xc]\n 12900: a5 = u8 [a0 + 0xe]\n 12903: a0 = u8 [a0 + 0xf]\n 12906: a2 = a2 << 0x8\n 12909: a2 = a2 | a4\n 12912: a5 = a5 << 0x10\n 12915: a0 = a0 << 0x18\n 12918: a0 = a0 | a5\n 12921: a0 = a0 | a2\n 12924: a0 = a0 << 0x20\n 12927: a0 = a0 | a1\n 12930: a0 = reverse a0\n 12932: u64 [s1 + 0x40] = a0\n 12935: a0 = reverse a3\n 12937: u64 [s1 + 0x28] = a0\n 12940: a0 = reverse t1\n 12942: u64 [s1 + 0x38] = a0\n 12945: a0 = reverse t0\n 12947: u64 [s1 + 0x30] = a0\n 12950: ecalli 10 // 'ref_time_left'\n 12952: fallthrough\n      : @234 (gas: 37)\n 12953: u64 [s1 + 0x20] = a0\n 12956: a0 = u64 [s1 + 0x48]\n 12959: a0 = reverse a0\n 12961: a1 = a0 << 0x20\n 12964: a2 = u64 [s1 + 0x50]\n 12967: a2 = reverse a2\n 12969: a2 = a2 >> 0x20\n 12972: a1 = a1 | a2\n 12975: a2 = u64 [s1 + 0x58]\n 12978: a2 = reverse a2\n 12980: a3 = a2 << 0x20\n 12983: a0 = a0 >> 0x20\n 12986: a0 = a0 | a3\n 12989: u64 [s1 + 0x308] = a0\n 12993: a2 = a2 >> 0x20\n 12996: u32 [s1 + 0x310] = a2\n 13000: a2 = u64 [s1 + 0x28]\n 13003: u64 [s1 + 0x300] = a1\n 13007: a0 = u64 [s1 + 0x38]\n 13010: a1 = u64 [s1 + 0x30]\n 13013: a0 = a0 | a1\n 13016: a3 = u64 [s1 + 0x40]\n 13019: a1 = a2 | a3\n 13022: a1 = a1 | a0\n 13025: a0 = a0 | a3\n 13028: a1 = a1 >> 0x20\n 13031: a0 = a0 << 0x20\n 13034: a0 = a0 | a1\n 13037: a1 = u64 [s1 + 0x60]\n 13040: u64 [s1 + 0x338] = a1\n 13044: a1 = u64 [s1 + 0x70]\n 13047: u64 [s1 + 0x330] = a1\n 13051: a1 = u64 [s1 + 0x68]\n 13054: u64 [s1 + 0x328] = a1\n 13058: a1 = u64 [s1 + 0x78]\n 13061: u64 [s1 + 0x320] = a1\n 13065: jump @236 if a0 == 0\n      : @235 (gas: 1)\n 13068: jump @284\n      : @236 (gas: 3)\n 13071: i32 a0 = a2 + 0\n 13073: a1 = 0\n 13075: ra = 198, jump @0\n      : @237 [@dyn 99] (gas: 4)\n 13081: u64 [s1 + 0x58] = a0\n 13084: a0 = 0\n 13086: a1 = 0\n 13088: ra = 200, jump @0\n      : @238 [@dyn 100] (gas: 34)\n 13094: u32 [s1 + 832] = 0\n 13098: a2 = u64 [s1 + 0x20]\n 13101: a1 = a2 >u 0x8fc\n 13105: a2 = -a1\n 13107: u64 [s1 + 0x378] = a2\n 13111: u64 [s1 + 0x370] = a2\n 13115: u64 [s1 + 0x368] = a2\n 13119: u64 [s1 + 0x360] = a2\n 13123: a2 = s1 + 0x300\n 13127: a2 = a2 << 0x20\n 13130: a2 = a2 >> 0x20\n 13133: a1 = a1 << 0x23\n 13136: t0 = a1 | a2\n 13139: a1 = s1 + 0x320\n 13143: a1 = a1 << 0x20\n 13146: a1 = a1 >> 0x20\n 13149: a2 = s1 + 0x360\n 13153: a2 = a2 << 0x20\n 13156: a3 = a2 | a1\n 13159: a4 = u64 [s1 + 0x58]\n 13162: a4 = a4 << 0x20\n 13165: a4 = a4 >> 0x20\n 13168: a0 = a0 << 0x20\n 13171: a0 = a0 >> 0x20\n 13174: a1 = s1 + 0x340\n 13178: a1 = a1 << 0x20\n 13181: a5 = a1 | a0\n 13184: a1 = 0xffffffffffffffff\n 13187: a2 = 0xffffffffffffffff\n 13190: a0 = t0\n 13192: ecalli 2 // 'call'\n 13194: u64 [s1 + 0x58] = a0\n 13197: a0 = s1 + 0x1e0\n 13201: ra = 202, jump @206\n      : @239 [@dyn 101] (gas: 2)\n 13207: a0 = u64 [s1 + 0x58]\n 13210: jump @273 if a0 != 0\n      : @240 (gas: 61)\n 13214: u64 [s1 + 920] = 0\n 13218: u64 [s1 + 912] = 0\n 13222: u64 [s1 + 904] = 0\n 13226: u64 [s1 + 896] = 0x2\n 13231: u64 [s1 + 984] = 0\n 13235: u64 [s1 + 976] = 0\n 13239: u64 [s1 + 968] = 0\n 13243: u64 [s1 + 960] = 0\n 13247: u32 [s1 + 928] = 0x20\n 13252: i32 a1 = s1 + 0x380\n 13256: i32 a3 = s1 + 0x3c0\n 13260: i32 a4 = s1 + 0x3a0\n 13264: a2 = 0xffffffffffffffff\n 13267: a0 = 0\n 13269: ecalli 8 // 'get_storage'\n 13271: a0 = u64 [s1 + 0x3c0]\n 13275: a1 = u64 [s1 + 0x3c8]\n 13279: a2 = u64 [s1 + 0x3d0]\n 13283: a3 = u64 [s1 + 0x3d8]\n 13287: a4 = 0xffff00ffffffffff\n 13297: a2 = a2 & a4\n 13300: a4 = 0x10000000000\n 13310: a2 = a2 | a4\n 13313: u64 [s1 + 920] = 0\n 13317: u64 [s1 + 912] = 0\n 13321: u64 [s1 + 904] = 0\n 13325: u64 [s1 + 896] = 0x2\n 13330: u64 [s1 + 0x3d8] = a3\n 13334: u64 [s1 + 0x3d0] = a2\n 13338: u64 [s1 + 0x3c8] = a1\n 13342: u64 [s1 + 0x3c0] = a0\n 13346: i32 a1 = s1 + 0x380\n 13350: i32 a3 = s1 + 0x3c0\n 13354: a2 = 0xffffffffffffffff\n 13357: a4 = 0x20\n 13360: a0 = 0\n 13362: ecalli 15 // 'set_storage'\n 13364: u64 [s1 + 920] = 0\n 13368: u64 [s1 + 912] = 0\n 13372: u64 [s1 + 904] = 0\n 13376: u64 [s1 + 896] = 0x2\n 13381: u64 [s1 + 984] = 0\n 13385: u64 [s1 + 976] = 0\n 13389: u64 [s1 + 968] = 0\n 13393: u64 [s1 + 960] = 0\n 13397: u32 [s1 + 928] = 0x20\n 13402: i32 a1 = s1 + 0x380\n 13406: i32 a3 = s1 + 0x3c0\n 13410: i32 a4 = s1 + 0x3a0\n 13414: a2 = 0xffffffffffffffff\n 13417: a0 = 0\n 13419: ecalli 8 // 'get_storage'\n 13421: a0 = u64 [s1 + 0x3d0]\n 13425: u64 [s1 + 0x48] = a0\n 13428: a0 = u64 [s1 + 0x3c8]\n 13432: u64 [s1 + 0x50] = a0\n 13435: a0 = u64 [s1 + 0x3c0]\n 13439: u64 [s1 + 0x58] = a0\n 13442: a0 = 0x40\n 13445: a1 = 0x20\n 13448: ra = 204, jump @0\n      : @241 [@dyn 102] (gas: 100)\n 13454: a1 = u8 [a0 + 0x11]\n 13457: a2 = u8 [a0 + 0x10]\n 13460: a3 = u8 [a0 + 0x12]\n 13463: a4 = u8 [a0 + 0x13]\n 13466: a1 = a1 << 0x8\n 13469: a1 = a1 | a2\n 13472: a3 = a3 << 0x10\n 13475: a4 = a4 << 0x18\n 13478: a3 = a3 | a4\n 13481: a1 = a1 | a3\n 13484: a2 = u8 [a0 + 0x15]\n 13487: a3 = u8 [a0 + 0x14]\n 13490: a4 = u8 [a0 + 0x16]\n 13493: a5 = u8 [a0 + 0x17]\n 13496: a2 = a2 << 0x8\n 13499: a2 = a2 | a3\n 13502: a4 = a4 << 0x10\n 13505: a5 = a5 << 0x18\n 13508: a4 = a4 | a5\n 13511: a2 = a2 | a4\n 13514: a2 = a2 << 0x20\n 13517: t0 = a2 | a1\n 13520: a2 = u8 [a0 + 0x1]\n 13523: a3 = u8 [a0]\n 13525: a4 = u8 [a0 + 0x2]\n 13528: a5 = u8 [a0 + 0x3]\n 13531: a2 = a2 << 0x8\n 13534: a2 = a2 | a3\n 13537: a4 = a4 << 0x10\n 13540: a5 = a5 << 0x18\n 13543: a4 = a4 | a5\n 13546: a2 = a2 | a4\n 13549: a3 = u8 [a0 + 0x5]\n 13552: a4 = u8 [a0 + 0x4]\n 13555: a5 = u8 [a0 + 0x6]\n 13558: a1 = u8 [a0 + 0x7]\n 13561: a3 = a3 << 0x8\n 13564: a3 = a3 | a4\n 13567: a5 = a5 << 0x10\n 13570: a1 = a1 << 0x18\n 13573: a1 = a1 | a5\n 13576: a1 = a1 | a3\n 13579: a1 = a1 << 0x20\n 13582: t1 = a1 | a2\n 13585: a1 = u8 [a0 + 0x19]\n 13588: a3 = u8 [a0 + 0x18]\n 13591: a4 = u8 [a0 + 0x1a]\n 13594: a5 = u8 [a0 + 0x1b]\n 13597: a1 = a1 << 0x8\n 13600: a1 = a1 | a3\n 13603: a4 = a4 << 0x10\n 13606: a5 = a5 << 0x18\n 13609: a4 = a4 | a5\n 13612: a1 = a1 | a4\n 13615: a3 = u8 [a0 + 0x1d]\n 13618: a4 = u8 [a0 + 0x1c]\n 13621: a5 = u8 [a0 + 0x1e]\n 13624: a2 = u8 [a0 + 0x1f]\n 13627: a3 = a3 << 0x8\n 13630: a3 = a3 | a4\n 13633: a5 = a5 << 0x10\n 13636: a2 = a2 << 0x18\n 13639: a2 = a2 | a5\n 13642: a2 = a2 | a3\n 13645: a2 = a2 << 0x20\n 13648: a3 = a2 | a1\n 13651: a1 = u8 [a0 + 0x9]\n 13654: a2 = u8 [a0 + 0x8]\n 13657: a4 = u8 [a0 + 0xa]\n 13660: a5 = u8 [a0 + 0xb]\n 13663: a1 = a1 << 0x8\n 13666: a1 = a1 | a2\n 13669: a4 = a4 << 0x10\n 13672: a5 = a5 << 0x18\n 13675: a4 = a4 | a5\n 13678: a1 = a1 | a4\n 13681: a2 = u8 [a0 + 0xd]\n 13684: a4 = u8 [a0 + 0xc]\n 13687: a5 = u8 [a0 + 0xe]\n 13690: a0 = u8 [a0 + 0xf]\n 13693: a2 = a2 << 0x8\n 13696: a2 = a2 | a4\n 13699: a5 = a5 << 0x10\n 13702: a0 = a0 << 0x18\n 13705: a0 = a0 | a5\n 13708: a0 = a0 | a2\n 13711: a0 = a0 << 0x20\n 13714: a0 = a0 | a1\n 13717: a1 = reverse a0\n 13719: a0 = reverse a3\n 13721: a2 = reverse t1\n 13723: a3 = reverse t0\n 13725: a2 = a2 | a3\n 13728: a3 = a0 | a1\n 13731: a3 = a3 | a2\n 13734: a3 = a3 >> 0x20\n 13737: a1 = a1 | a2\n 13740: a1 = a1 << 0x20\n 13743: a1 = a1 | a3\n 13746: jump @243 if a1 == 0\n      : @242 (gas: 1)\n 13749: jump @284\n      : @243 (gas: 8)\n 13752: a1 = u64 [s1 + 0x48]\n 13755: a1 = a1 << 0x20\n 13758: a1 = a1 >> 0x20\n 13761: u64 [s1 + 0x48] = a1\n 13764: i32 a0 = a0 + 0\n 13766: u64 [s1 + 0x40] = a0\n 13769: a1 = 0x20\n 13772: ra = 206, jump @0\n      : @244 [@dyn 103] (gas: 71)\n 13778: a1 = u64 [s1 + 0x60]\n 13781: a1 = reverse a1\n 13783: a2 = u64 [s1 + 0x70]\n 13786: a2 = reverse a2\n 13788: a3 = u64 [s1 + 0x68]\n 13791: a3 = reverse a3\n 13793: a4 = u64 [s1 + 0x78]\n 13796: a4 = reverse a4\n 13798: a5 = a4 >> 0x38\n 13801: u8 [a0 + 0x1f] = a5\n 13804: a5 = a4 >> 0x30\n 13807: u8 [a0 + 0x1e] = a5\n 13810: a5 = a4 >> 0x28\n 13813: u8 [a0 + 0x1d] = a5\n 13816: a5 = a4 >> 0x20\n 13819: u8 [a0 + 0x1c] = a5\n 13822: a5 = a4 >> 0x18\n 13825: u8 [a0 + 0x1b] = a5\n 13828: a5 = a4 >> 0x10\n 13831: u8 [a0 + 0x1a] = a5\n 13834: a5 = a4 >> 0x8\n 13837: u8 [a0 + 0x19] = a5\n 13840: u8 [a0 + 0x18] = a4\n 13843: u8 [a0 + 0x10] = a3\n 13846: a4 = a3 >> 0x38\n 13849: u8 [a0 + 0x17] = a4\n 13852: a4 = a3 >> 0x30\n 13855: u8 [a0 + 0x16] = a4\n 13858: a4 = a3 >> 0x28\n 13861: u8 [a0 + 0x15] = a4\n 13864: a4 = a3 >> 0x20\n 13867: u8 [a0 + 0x14] = a4\n 13870: a4 = a3 >> 0x18\n 13873: u8 [a0 + 0x13] = a4\n 13876: a4 = a3 >> 0x10\n 13879: u8 [a0 + 0x12] = a4\n 13882: a3 = a3 >> 0x8\n 13885: u8 [a0 + 0x11] = a3\n 13888: u8 [a0 + 0x8] = a2\n 13891: a3 = a2 >> 0x38\n 13894: u8 [a0 + 0xf] = a3\n 13897: a3 = a2 >> 0x30\n 13900: u8 [a0 + 0xe] = a3\n 13903: a3 = a2 >> 0x28\n 13906: u8 [a0 + 0xd] = a3\n 13909: a3 = a2 >> 0x20\n 13912: u8 [a0 + 0xc] = a3\n 13915: a3 = a2 >> 0x18\n 13918: u8 [a0 + 0xb] = a3\n 13921: a3 = a2 >> 0x10\n 13924: u8 [a0 + 0xa] = a3\n 13927: a2 = a2 >> 0x8\n 13930: u8 [a0 + 0x9] = a2\n 13933: u8 [a0] = a1\n 13935: a2 = a1 >> 0x38\n 13938: u8 [a0 + 0x7] = a2\n 13941: a2 = a1 >> 0x30\n 13944: u8 [a0 + 0x6] = a2\n 13947: a2 = a1 >> 0x28\n 13950: u8 [a0 + 0x5] = a2\n 13953: a2 = a1 >> 0x20\n 13956: u8 [a0 + 0x4] = a2\n 13959: a2 = a1 >> 0x18\n 13962: u8 [a0 + 0x3] = a2\n 13965: a2 = a1 >> 0x10\n 13968: u8 [a0 + 0x2] = a2\n 13971: a1 = a1 >> 0x8\n 13974: u8 [a0 + 0x1] = a1\n 13977: a1 = 0x20\n 13980: a0 = u64 [s1 + 0x40]\n 13983: ra = 208, jump @0\n      : @245 [@dyn 104] (gas: 5)\n 13989: a1 = u64 [0x20000]\n 13994: a2 = u64 [0x20008]\n 13999: a3 = u64 [0x20010]\n 14004: a4 = u64 [0x20018]\n 14009: jump @262\n      : @246 (gas: 16)\n 14012: u64 [s1 + 920] = 0\n 14016: u64 [s1 + 912] = 0\n 14020: u64 [s1 + 904] = 0\n 14024: u64 [s1 + 896] = 0\n 14028: u64 [s1 + 984] = 0\n 14032: u64 [s1 + 976] = 0\n 14036: u64 [s1 + 968] = 0\n 14040: u64 [s1 + 960] = 0\n 14044: u32 [s1 + 928] = 0x20\n 14049: i32 a1 = s1 + 0x380\n 14053: i32 a3 = s1 + 0x3c0\n 14057: i32 a4 = s1 + 0x3a0\n 14061: a2 = 0xffffffffffffffff\n 14064: a0 = 0\n 14066: ecalli 8 // 'get_storage'\n 14068: fallthrough\n      : @247 (gas: 16)\n 14069: a3 = u64 [s1 + 0x3d8]\n 14073: a1 = u64 [s1 + 0x3d0]\n 14077: a2 = u64 [s1 + 0x3c8]\n 14081: t2 = u64 [s1 + 0x3c0]\n 14085: t0 = a3 + 0x1\n 14088: a5 = a3 <u 0xffffffffffffffff\n 14091: a4 = a1 <u 0xffffffffffffffff\n 14094: a4 = a5 if t0 != 0\n 14097: t0 = t2 <u 0xfffffffffffeae80\n 14102: t1 = a2 + 0x1\n 14105: a5 = a2 <u 0xffffffffffffffff\n 14108: a5 = t0 if t1 == 0\n 14111: a0 = a1 & a3\n 14114: a0 = a0 + 0x1\n 14117: a5 = a4 if a0 != 0\n 14120: jump @285 if a5 == 0\n      : @248 (gas: 15)\n 14124: a0 = t2 + 0x15180\n 14129: u64 [s1 + 0x40] = a0\n 14132: a0 = a0 <u t2\n 14135: a4 = a2 + a0\n 14138: u64 [s1 + 0x38] = a4\n 14141: a2 = a4 <u a2\n 14144: a2 = a0 if a0 == 0\n 14147: a2 = a2 + a1\n 14150: u64 [s1 + 0x28] = a2\n 14153: a0 = a2 <u a1\n 14156: a0 = a0 + a3\n 14159: u64 [s1 + 0x30] = a0\n 14162: i32 a0 = s1 + 0x260\n 14166: ecalli 9 // 'now'\n 14168: fallthrough\n      : @249 (gas: 20)\n 14169: t2 = u64 [s1 + 0x270]\n 14173: a1 = u64 [s1 + 0x278]\n 14177: a2 = u64 [s1 + 0x268]\n 14181: t0 = u64 [s1 + 0x260]\n 14185: a0 = u64 [s1 + 0x28]\n 14188: a4 = a0 <u t2\n 14191: a5 = u64 [s1 + 0x30]\n 14194: a3 = a5 ^ a1\n 14197: a1 = a5 <u a1\n 14200: a1 = a4 if a3 == 0\n 14203: a4 = u64 [s1 + 0x40]\n 14206: t0 = a4 <u t0\n 14209: a4 = u64 [s1 + 0x38]\n 14212: t1 = a4 ^ a2\n 14215: a2 = a4 <u a2\n 14218: a2 = t0 if t1 == 0\n 14221: a0 = a0 ^ t2\n 14224: a0 = a0 | a3\n 14227: a2 = a1 if a0 != 0\n 14230: jump @289 if a2 == 0\n      : @250 (gas: 3)\n 14234: a0 = 0x40\n 14237: a1 = 0x20\n 14240: ra = 210, jump @0\n      : @251 [@dyn 105] (gas: 98)\n 14246: a1 = u8 [a0 + 0x11]\n 14249: a2 = u8 [a0 + 0x10]\n 14252: a3 = u8 [a0 + 0x12]\n 14255: a4 = u8 [a0 + 0x13]\n 14258: a1 = a1 << 0x8\n 14261: a1 = a1 | a2\n 14264: a3 = a3 << 0x10\n 14267: a4 = a4 << 0x18\n 14270: a3 = a3 | a4\n 14273: a1 = a1 | a3\n 14276: a2 = u8 [a0 + 0x15]\n 14279: a3 = u8 [a0 + 0x14]\n 14282: a4 = u8 [a0 + 0x16]\n 14285: a5 = u8 [a0 + 0x17]\n 14288: a2 = a2 << 0x8\n 14291: a2 = a2 | a3\n 14294: a4 = a4 << 0x10\n 14297: a5 = a5 << 0x18\n 14300: a4 = a4 | a5\n 14303: a2 = a2 | a4\n 14306: a2 = a2 << 0x20\n 14309: t0 = a2 | a1\n 14312: a2 = u8 [a0 + 0x1]\n 14315: a3 = u8 [a0]\n 14317: a4 = u8 [a0 + 0x2]\n 14320: a5 = u8 [a0 + 0x3]\n 14323: a2 = a2 << 0x8\n 14326: a2 = a2 | a3\n 14329: a4 = a4 << 0x10\n 14332: a5 = a5 << 0x18\n 14335: a4 = a4 | a5\n 14338: a2 = a2 | a4\n 14341: a3 = u8 [a0 + 0x5]\n 14344: a4 = u8 [a0 + 0x4]\n 14347: a5 = u8 [a0 + 0x6]\n 14350: a1 = u8 [a0 + 0x7]\n 14353: a3 = a3 << 0x8\n 14356: a3 = a3 | a4\n 14359: a5 = a5 << 0x10\n 14362: a1 = a1 << 0x18\n 14365: a1 = a1 | a5\n 14368: a1 = a1 | a3\n 14371: a1 = a1 << 0x20\n 14374: t1 = a1 | a2\n 14377: a1 = u8 [a0 + 0x19]\n 14380: a3 = u8 [a0 + 0x18]\n 14383: a4 = u8 [a0 + 0x1a]\n 14386: a5 = u8 [a0 + 0x1b]\n 14389: a1 = a1 << 0x8\n 14392: a1 = a1 | a3\n 14395: a4 = a4 << 0x10\n 14398: a5 = a5 << 0x18\n 14401: a4 = a4 | a5\n 14404: a1 = a1 | a4\n 14407: a3 = u8 [a0 + 0x1d]\n 14410: a4 = u8 [a0 + 0x1c]\n 14413: a5 = u8 [a0 + 0x1e]\n 14416: a2 = u8 [a0 + 0x1f]\n 14419: a3 = a3 << 0x8\n 14422: a3 = a3 | a4\n 14425: a5 = a5 << 0x10\n 14428: a2 = a2 << 0x18\n 14431: a2 = a2 | a5\n 14434: a2 = a2 | a3\n 14437: a2 = a2 << 0x20\n 14440: a3 = a2 | a1\n 14443: a1 = u8 [a0 + 0x9]\n 14446: a2 = u8 [a0 + 0x8]\n 14449: a4 = u8 [a0 + 0xa]\n 14452: a5 = u8 [a0 + 0xb]\n 14455: a1 = a1 << 0x8\n 14458: a1 = a1 | a2\n 14461: a4 = a4 << 0x10\n 14464: a5 = a5 << 0x18\n 14467: a4 = a4 | a5\n 14470: a1 = a1 | a4\n 14473: a2 = u8 [a0 + 0xd]\n 14476: a4 = u8 [a0 + 0xc]\n 14479: a5 = u8 [a0 + 0xe]\n 14482: a0 = u8 [a0 + 0xf]\n 14485: a2 = a2 << 0x8\n 14488: a2 = a2 | a4\n 14491: a5 = a5 << 0x10\n 14494: a0 = a0 << 0x18\n 14497: a0 = a0 | a5\n 14500: a0 = a0 | a2\n 14503: a0 = a0 << 0x20\n 14506: a0 = a0 | a1\n 14509: a0 = reverse a0\n 14511: u64 [s1 + 0x40] = a0\n 14514: a0 = reverse a3\n 14516: u64 [s1 + 0x28] = a0\n 14519: a0 = reverse t1\n 14521: u64 [s1 + 0x38] = a0\n 14524: a0 = reverse t0\n 14526: u64 [s1 + 0x30] = a0\n 14529: ecalli 10 // 'ref_time_left'\n 14531: fallthrough\n      : @252 (gas: 37)\n 14532: u64 [s1 + 0x20] = a0\n 14535: a0 = u64 [s1 + 0x48]\n 14538: a0 = reverse a0\n 14540: a1 = a0 << 0x20\n 14543: a2 = u64 [s1 + 0x50]\n 14546: a2 = reverse a2\n 14548: a2 = a2 >> 0x20\n 14551: a1 = a1 | a2\n 14554: a2 = u64 [s1 + 0x58]\n 14557: a2 = reverse a2\n 14559: a3 = a2 << 0x20\n 14562: a0 = a0 >> 0x20\n 14565: a0 = a0 | a3\n 14568: u64 [s1 + 0x288] = a0\n 14572: a2 = a2 >> 0x20\n 14575: u32 [s1 + 0x290] = a2\n 14579: a2 = u64 [s1 + 0x28]\n 14582: u64 [s1 + 0x280] = a1\n 14586: a0 = u64 [s1 + 0x38]\n 14589: a1 = u64 [s1 + 0x30]\n 14592: a0 = a0 | a1\n 14595: a3 = u64 [s1 + 0x40]\n 14598: a1 = a2 | a3\n 14601: a1 = a1 | a0\n 14604: a0 = a0 | a3\n 14607: a1 = a1 >> 0x20\n 14610: a0 = a0 << 0x20\n 14613: a0 = a0 | a1\n 14616: a1 = u64 [s1 + 0x60]\n 14619: u64 [s1 + 0x2b8] = a1\n 14623: a1 = u64 [s1 + 0x70]\n 14626: u64 [s1 + 0x2b0] = a1\n 14630: a1 = u64 [s1 + 0x68]\n 14633: u64 [s1 + 0x2a8] = a1\n 14637: a1 = u64 [s1 + 0x78]\n 14640: u64 [s1 + 0x2a0] = a1\n 14644: jump @284 if a0 != 0\n      : @253 (gas: 3)\n 14648: i32 a0 = a2 + 0\n 14650: a1 = 0\n 14652: ra = 212, jump @0\n      : @254 [@dyn 106] (gas: 4)\n 14658: u64 [s1 + 0x58] = a0\n 14661: a0 = 0\n 14663: a1 = 0\n 14665: ra = 214, jump @0\n      : @255 [@dyn 107] (gas: 34)\n 14671: u32 [s1 + 704] = 0\n 14675: a2 = u64 [s1 + 0x20]\n 14678: a1 = a2 >u 0x8fc\n 14682: a2 = -a1\n 14684: u64 [s1 + 0x2f8] = a2\n 14688: u64 [s1 + 0x2f0] = a2\n 14692: u64 [s1 + 0x2e8] = a2\n 14696: u64 [s1 + 0x2e0] = a2\n 14700: a2 = s1 + 0x280\n 14704: a2 = a2 << 0x20\n 14707: a2 = a2 >> 0x20\n 14710: a1 = a1 << 0x23\n 14713: t0 = a1 | a2\n 14716: a1 = s1 + 0x2a0\n 14720: a1 = a1 << 0x20\n 14723: a1 = a1 >> 0x20\n 14726: a2 = s1 + 0x2e0\n 14730: a2 = a2 << 0x20\n 14733: a3 = a2 | a1\n 14736: a4 = u64 [s1 + 0x58]\n 14739: a4 = a4 << 0x20\n 14742: a4 = a4 >> 0x20\n 14745: a0 = a0 << 0x20\n 14748: a0 = a0 >> 0x20\n 14751: a1 = s1 + 0x2c0\n 14755: a1 = a1 << 0x20\n 14758: a5 = a1 | a0\n 14761: a1 = 0xffffffffffffffff\n 14764: a2 = 0xffffffffffffffff\n 14767: a0 = t0\n 14769: ecalli 2 // 'call'\n 14771: u64 [s1 + 0x58] = a0\n 14774: a0 = s1 + 0x180\n 14778: ra = 216, jump @206\n      : @256 [@dyn 108] (gas: 2)\n 14784: a0 = u64 [s1 + 0x58]\n 14787: jump @278 if a0 != 0\n      : @257 (gas: 61)\n 14791: u64 [s1 + 920] = 0\n 14795: u64 [s1 + 912] = 0\n 14799: u64 [s1 + 904] = 0\n 14803: u64 [s1 + 896] = 0x2\n 14808: u64 [s1 + 984] = 0\n 14812: u64 [s1 + 976] = 0\n 14816: u64 [s1 + 968] = 0\n 14820: u64 [s1 + 960] = 0\n 14824: u32 [s1 + 928] = 0x20\n 14829: i32 a1 = s1 + 0x380\n 14833: i32 a3 = s1 + 0x3c0\n 14837: i32 a4 = s1 + 0x3a0\n 14841: a2 = 0xffffffffffffffff\n 14844: a0 = 0\n 14846: ecalli 8 // 'get_storage'\n 14848: a0 = u64 [s1 + 0x3c0]\n 14852: a1 = u64 [s1 + 0x3c8]\n 14856: a2 = u64 [s1 + 0x3d0]\n 14860: a3 = u64 [s1 + 0x3d8]\n 14864: a4 = 0xffff00ffffffffff\n 14874: a2 = a2 & a4\n 14877: a4 = 0x10000000000\n 14887: a2 = a2 | a4\n 14890: u64 [s1 + 920] = 0\n 14894: u64 [s1 + 912] = 0\n 14898: u64 [s1 + 904] = 0\n 14902: u64 [s1 + 896] = 0x2\n 14907: u64 [s1 + 0x3d8] = a3\n 14911: u64 [s1 + 0x3d0] = a2\n 14915: u64 [s1 + 0x3c8] = a1\n 14919: u64 [s1 + 0x3c0] = a0\n 14923: i32 a1 = s1 + 0x380\n 14927: i32 a3 = s1 + 0x3c0\n 14931: a2 = 0xffffffffffffffff\n 14934: a4 = 0x20\n 14937: a0 = 0\n 14939: ecalli 15 // 'set_storage'\n 14941: u64 [s1 + 920] = 0\n 14945: u64 [s1 + 912] = 0\n 14949: u64 [s1 + 904] = 0\n 14953: u64 [s1 + 896] = 0x2\n 14958: u64 [s1 + 984] = 0\n 14962: u64 [s1 + 976] = 0\n 14966: u64 [s1 + 968] = 0\n 14970: u64 [s1 + 960] = 0\n 14974: u32 [s1 + 928] = 0x20\n 14979: i32 a1 = s1 + 0x380\n 14983: i32 a3 = s1 + 0x3c0\n 14987: i32 a4 = s1 + 0x3a0\n 14991: a2 = 0xffffffffffffffff\n 14994: a0 = 0\n 14996: ecalli 8 // 'get_storage'\n 14998: a0 = u64 [s1 + 0x3d0]\n 15002: u64 [s1 + 0x48] = a0\n 15005: a0 = u64 [s1 + 0x3c8]\n 15009: u64 [s1 + 0x50] = a0\n 15012: a0 = u64 [s1 + 0x3c0]\n 15016: u64 [s1 + 0x58] = a0\n 15019: a0 = 0x40\n 15022: a1 = 0x20\n 15025: ra = 218, jump @0\n      : @258 [@dyn 109] (gas: 100)\n 15031: a1 = u8 [a0 + 0x11]\n 15034: a2 = u8 [a0 + 0x10]\n 15037: a3 = u8 [a0 + 0x12]\n 15040: a4 = u8 [a0 + 0x13]\n 15043: a1 = a1 << 0x8\n 15046: a1 = a1 | a2\n 15049: a3 = a3 << 0x10\n 15052: a4 = a4 << 0x18\n 15055: a3 = a3 | a4\n 15058: a1 = a1 | a3\n 15061: a2 = u8 [a0 + 0x15]\n 15064: a3 = u8 [a0 + 0x14]\n 15067: a4 = u8 [a0 + 0x16]\n 15070: a5 = u8 [a0 + 0x17]\n 15073: a2 = a2 << 0x8\n 15076: a2 = a2 | a3\n 15079: a4 = a4 << 0x10\n 15082: a5 = a5 << 0x18\n 15085: a4 = a4 | a5\n 15088: a2 = a2 | a4\n 15091: a2 = a2 << 0x20\n 15094: t0 = a2 | a1\n 15097: a2 = u8 [a0 + 0x1]\n 15100: a3 = u8 [a0]\n 15102: a4 = u8 [a0 + 0x2]\n 15105: a5 = u8 [a0 + 0x3]\n 15108: a2 = a2 << 0x8\n 15111: a2 = a2 | a3\n 15114: a4 = a4 << 0x10\n 15117: a5 = a5 << 0x18\n 15120: a4 = a4 | a5\n 15123: a2 = a2 | a4\n 15126: a3 = u8 [a0 + 0x5]\n 15129: a4 = u8 [a0 + 0x4]\n 15132: a5 = u8 [a0 + 0x6]\n 15135: a1 = u8 [a0 + 0x7]\n 15138: a3 = a3 << 0x8\n 15141: a3 = a3 | a4\n 15144: a5 = a5 << 0x10\n 15147: a1 = a1 << 0x18\n 15150: a1 = a1 | a5\n 15153: a1 = a1 | a3\n 15156: a1 = a1 << 0x20\n 15159: t1 = a1 | a2\n 15162: a1 = u8 [a0 + 0x19]\n 15165: a3 = u8 [a0 + 0x18]\n 15168: a4 = u8 [a0 + 0x1a]\n 15171: a5 = u8 [a0 + 0x1b]\n 15174: a1 = a1 << 0x8\n 15177: a1 = a1 | a3\n 15180: a4 = a4 << 0x10\n 15183: a5 = a5 << 0x18\n 15186: a4 = a4 | a5\n 15189: a1 = a1 | a4\n 15192: a3 = u8 [a0 + 0x1d]\n 15195: a4 = u8 [a0 + 0x1c]\n 15198: a5 = u8 [a0 + 0x1e]\n 15201: a2 = u8 [a0 + 0x1f]\n 15204: a3 = a3 << 0x8\n 15207: a3 = a3 | a4\n 15210: a5 = a5 << 0x10\n 15213: a2 = a2 << 0x18\n 15216: a2 = a2 | a5\n 15219: a2 = a2 | a3\n 15222: a2 = a2 << 0x20\n 15225: a3 = a2 | a1\n 15228: a1 = u8 [a0 + 0x9]\n 15231: a2 = u8 [a0 + 0x8]\n 15234: a4 = u8 [a0 + 0xa]\n 15237: a5 = u8 [a0 + 0xb]\n 15240: a1 = a1 << 0x8\n 15243: a1 = a1 | a2\n 15246: a4 = a4 << 0x10\n 15249: a5 = a5 << 0x18\n 15252: a4 = a4 | a5\n 15255: a1 = a1 | a4\n 15258: a2 = u8 [a0 + 0xd]\n 15261: a4 = u8 [a0 + 0xc]\n 15264: a5 = u8 [a0 + 0xe]\n 15267: a0 = u8 [a0 + 0xf]\n 15270: a2 = a2 << 0x8\n 15273: a2 = a2 | a4\n 15276: a5 = a5 << 0x10\n 15279: a0 = a0 << 0x18\n 15282: a0 = a0 | a5\n 15285: a0 = a0 | a2\n 15288: a0 = a0 << 0x20\n 15291: a0 = a0 | a1\n 15294: a1 = reverse a0\n 15296: a0 = reverse a3\n 15298: a2 = reverse t1\n 15300: a3 = reverse t0\n 15302: a2 = a2 | a3\n 15305: a3 = a0 | a1\n 15308: a3 = a3 | a2\n 15311: a3 = a3 >> 0x20\n 15314: a1 = a1 | a2\n 15317: a1 = a1 << 0x20\n 15320: a1 = a1 | a3\n 15323: jump @284 if a1 != 0\n      : @259 (gas: 8)\n 15327: a1 = u64 [s1 + 0x48]\n 15330: a1 = a1 << 0x20\n 15333: a1 = a1 >> 0x20\n 15336: u64 [s1 + 0x48] = a1\n 15339: i32 a0 = a0 + 0\n 15341: u64 [s1 + 0x40] = a0\n 15344: a1 = 0x20\n 15347: ra = 220, jump @0\n      : @260 [@dyn 110] (gas: 71)\n 15353: a1 = u64 [s1 + 0x60]\n 15356: a1 = reverse a1\n 15358: a2 = u64 [s1 + 0x70]\n 15361: a2 = reverse a2\n 15363: a3 = u64 [s1 + 0x68]\n 15366: a3 = reverse a3\n 15368: a4 = u64 [s1 + 0x78]\n 15371: a4 = reverse a4\n 15373: a5 = a4 >> 0x38\n 15376: u8 [a0 + 0x1f] = a5\n 15379: a5 = a4 >> 0x30\n 15382: u8 [a0 + 0x1e] = a5\n 15385: a5 = a4 >> 0x28\n 15388: u8 [a0 + 0x1d] = a5\n 15391: a5 = a4 >> 0x20\n 15394: u8 [a0 + 0x1c] = a5\n 15397: a5 = a4 >> 0x18\n 15400: u8 [a0 + 0x1b] = a5\n 15403: a5 = a4 >> 0x10\n 15406: u8 [a0 + 0x1a] = a5\n 15409: a5 = a4 >> 0x8\n 15412: u8 [a0 + 0x19] = a5\n 15415: u8 [a0 + 0x18] = a4\n 15418: u8 [a0 + 0x10] = a3\n 15421: a4 = a3 >> 0x38\n 15424: u8 [a0 + 0x17] = a4\n 15427: a4 = a3 >> 0x30\n 15430: u8 [a0 + 0x16] = a4\n 15433: a4 = a3 >> 0x28\n 15436: u8 [a0 + 0x15] = a4\n 15439: a4 = a3 >> 0x20\n 15442: u8 [a0 + 0x14] = a4\n 15445: a4 = a3 >> 0x18\n 15448: u8 [a0 + 0x13] = a4\n 15451: a4 = a3 >> 0x10\n 15454: u8 [a0 + 0x12] = a4\n 15457: a3 = a3 >> 0x8\n 15460: u8 [a0 + 0x11] = a3\n 15463: u8 [a0 + 0x8] = a2\n 15466: a3 = a2 >> 0x38\n 15469: u8 [a0 + 0xf] = a3\n 15472: a3 = a2 >> 0x30\n 15475: u8 [a0 + 0xe] = a3\n 15478: a3 = a2 >> 0x28\n 15481: u8 [a0 + 0xd] = a3\n 15484: a3 = a2 >> 0x20\n 15487: u8 [a0 + 0xc] = a3\n 15490: a3 = a2 >> 0x18\n 15493: u8 [a0 + 0xb] = a3\n 15496: a3 = a2 >> 0x10\n 15499: u8 [a0 + 0xa] = a3\n 15502: a2 = a2 >> 0x8\n 15505: u8 [a0 + 0x9] = a2\n 15508: u8 [a0] = a1\n 15510: a2 = a1 >> 0x38\n 15513: u8 [a0 + 0x7] = a2\n 15516: a2 = a1 >> 0x30\n 15519: u8 [a0 + 0x6] = a2\n 15522: a2 = a1 >> 0x28\n 15525: u8 [a0 + 0x5] = a2\n 15528: a2 = a1 >> 0x20\n 15531: u8 [a0 + 0x4] = a2\n 15534: a2 = a1 >> 0x18\n 15537: u8 [a0 + 0x3] = a2\n 15540: a2 = a1 >> 0x10\n 15543: u8 [a0 + 0x2] = a2\n 15546: a1 = a1 >> 0x8\n 15549: u8 [a0 + 0x1] = a1\n 15552: a1 = 0x20\n 15555: a0 = u64 [s1 + 0x40]\n 15558: ra = 222, jump @0\n      : @261 [@dyn 111] (gas: 5)\n 15564: a1 = u64 [0x20000]\n 15569: a2 = u64 [0x20008]\n 15574: a3 = u64 [0x20010]\n 15579: a4 = u64 [0x20018]\n 15584: fallthrough\n      : @262 (gas: 25)\n 15585: u64 [s1 + 0x3d8] = a1\n 15589: u64 [s1 + 0x3d0] = a2\n 15593: u64 [s1 + 0x3c8] = a3\n 15597: u64 [s1 + 0x3c0] = a4\n 15601: a1 = u64 [s1 + 0x48]\n 15604: a1 = reverse a1\n 15606: a2 = u64 [s1 + 0x50]\n 15609: a2 = reverse a2\n 15611: a3 = u64 [s1 + 0x58]\n 15614: a3 = reverse a3\n 15616: u64 [s1 + 0x3f8] = a3\n 15620: u64 [s1 + 0x3f0] = a2\n 15624: u64 [s1 + 0x3e8] = a1\n 15628: u64 [s1 + 992] = 0\n 15632: i32 a2 = a0 + 0\n 15634: i32 a0 = s1 + 0x3c0\n 15638: a1 = 0x2\n 15641: a3 = 0x20\n 15644: ecalli 7 // 'deposit_event'\n 15646: sp = s0 + 0xfffffffffffffbe0\n 15650: ra = u64 [sp + 0x418]\n 15654: s0 = u64 [sp + 0x410]\n 15658: s1 = u64 [sp + 0x408]\n 15662: sp = sp + 0x420\n 15666: ret\n      : @263 (gas: 3)\n 15668: a0 = 0x40\n 15671: a1 = 0x20\n 15674: ra = 224, jump @0\n      : @264 [@dyn 112] (gas: 104)\n 15680: a1 = u8 [a0 + 0x11]\n 15683: a2 = u8 [a0 + 0x10]\n 15686: a3 = u8 [a0 + 0x12]\n 15689: a4 = u8 [a0 + 0x13]\n 15692: a1 = a1 << 0x8\n 15695: a1 = a1 | a2\n 15698: a3 = a3 << 0x10\n 15701: a4 = a4 << 0x18\n 15704: a3 = a3 | a4\n 15707: a1 = a1 | a3\n 15710: a2 = u8 [a0 + 0x15]\n 15713: a3 = u8 [a0 + 0x14]\n 15716: a4 = u8 [a0 + 0x16]\n 15719: a5 = u8 [a0 + 0x17]\n 15722: a2 = a2 << 0x8\n 15725: a2 = a2 | a3\n 15728: a4 = a4 << 0x10\n 15731: a5 = a5 << 0x18\n 15734: a4 = a4 | a5\n 15737: a2 = a2 | a4\n 15740: a2 = a2 << 0x20\n 15743: t0 = a2 | a1\n 15746: a2 = u8 [a0 + 0x1]\n 15749: a3 = u8 [a0]\n 15751: a4 = u8 [a0 + 0x2]\n 15754: a5 = u8 [a0 + 0x3]\n 15757: a2 = a2 << 0x8\n 15760: a2 = a2 | a3\n 15763: a4 = a4 << 0x10\n 15766: a5 = a5 << 0x18\n 15769: a4 = a4 | a5\n 15772: a2 = a2 | a4\n 15775: a3 = u8 [a0 + 0x5]\n 15778: a4 = u8 [a0 + 0x4]\n 15781: a5 = u8 [a0 + 0x6]\n 15784: a1 = u8 [a0 + 0x7]\n 15787: a3 = a3 << 0x8\n 15790: a3 = a3 | a4\n 15793: a5 = a5 << 0x10\n 15796: a1 = a1 << 0x18\n 15799: a1 = a1 | a5\n 15802: a1 = a1 | a3\n 15805: a1 = a1 << 0x20\n 15808: t1 = a1 | a2\n 15811: a1 = u8 [a0 + 0x19]\n 15814: a3 = u8 [a0 + 0x18]\n 15817: a4 = u8 [a0 + 0x1a]\n 15820: a5 = u8 [a0 + 0x1b]\n 15823: a1 = a1 << 0x8\n 15826: a1 = a1 | a3\n 15829: a4 = a4 << 0x10\n 15832: a5 = a5 << 0x18\n 15835: a4 = a4 | a5\n 15838: a1 = a1 | a4\n 15841: a3 = u8 [a0 + 0x1d]\n 15844: a4 = u8 [a0 + 0x1c]\n 15847: a5 = u8 [a0 + 0x1e]\n 15850: a2 = u8 [a0 + 0x1f]\n 15853: a3 = a3 << 0x8\n 15856: a3 = a3 | a4\n 15859: a5 = a5 << 0x10\n 15862: a2 = a2 << 0x18\n 15865: a2 = a2 | a5\n 15868: a2 = a2 | a3\n 15871: a2 = a2 << 0x20\n 15874: a3 = a2 | a1\n 15877: a1 = u8 [a0 + 0x9]\n 15880: a2 = u8 [a0 + 0x8]\n 15883: a4 = u8 [a0 + 0xa]\n 15886: a5 = u8 [a0 + 0xb]\n 15889: a1 = a1 << 0x8\n 15892: a1 = a1 | a2\n 15895: a4 = a4 << 0x10\n 15898: a5 = a5 << 0x18\n 15901: a4 = a4 | a5\n 15904: a1 = a1 | a4\n 15907: a2 = u8 [a0 + 0xd]\n 15910: a4 = u8 [a0 + 0xc]\n 15913: a5 = u8 [a0 + 0xe]\n 15916: a0 = u8 [a0 + 0xf]\n 15919: a2 = a2 << 0x8\n 15922: a2 = a2 | a4\n 15925: a5 = a5 << 0x10\n 15928: a0 = a0 << 0x18\n 15931: a0 = a0 | a5\n 15934: a0 = a0 | a2\n 15937: a0 = a0 << 0x20\n 15940: a0 = a0 | a1\n 15943: a4 = reverse a0\n 15945: a1 = reverse a3\n 15947: a2 = reverse t1\n 15949: a0 = reverse t0\n 15951: u64 [s1 + 0x78] = a0\n 15954: u64 [s1 + 0x68] = a2\n 15957: a0 = a0 | a2\n 15960: a2 = a1\n 15962: a1 = a1 | a4\n 15965: a1 = a1 | a0\n 15968: a1 = a1 >> 0x20\n 15971: u64 [s1 + 0x70] = a4\n 15974: a0 = a0 | a4\n 15977: a0 = a0 << 0x20\n 15980: a0 = a0 | a1\n 15983: jump @284 if a0 != 0\n      : @265 (gas: 5)\n 15987: u64 [s1 + 0x60] = a2\n 15990: i32 a0 = a2 + 0\n 15992: a1 = 0x20\n 15995: u64 [s1 + 0x58] = a0\n 15998: ra = 226, jump @0\n      : @266 [@dyn 113] (gas: 51)\n 16004: u8 [a0 + 31] = 0\n 16007: u8 [a0 + 30] = 0\n 16010: u8 [a0 + 29] = 0\n 16013: u8 [a0 + 28] = 0\n 16016: u8 [a0 + 27] = 0\n 16019: u8 [a0 + 26] = 0\n 16022: u8 [a0 + 25] = 0\n 16025: u8 [a0 + 24] = 0\n 16028: u8 [a0 + 23] = 0\n 16031: u8 [a0 + 22] = 0\n 16034: u8 [a0 + 21] = 0\n 16037: u8 [a0 + 20] = 0\n 16040: u8 [a0 + 19] = 0\n 16043: u8 [a0 + 18] = 0\n 16046: u8 [a0 + 17] = 0\n 16049: u8 [a0 + 16] = 0\n 16052: u8 [a0 + 15] = 0\n 16055: u8 [a0 + 14] = 0\n 16058: u8 [a0 + 13] = 0\n 16061: u8 [a0 + 12] = 0\n 16064: u8 [a0 + 11] = 0\n 16067: u8 [a0 + 10] = 0\n 16070: u8 [a0 + 9] = 0\n 16073: u8 [a0 + 8] = 0\n 16076: u8 [a0 + 7] = 0\n 16079: u8 [a0 + 6] = 0\n 16082: u8 [a0 + 5] = 0\n 16085: u8 [a0 + 4] = 0\n 16088: u8 [a0 + 3] = 0xa0\n 16093: u8 [a0 + 2] = 0x79\n 16097: u8 [a0 + 1] = 0xc3\n 16102: u8 [a0 + 0] = 0x8\n 16105: a1 = u64 [s1 + 0x60]\n 16108: a0 = a1 + 0x4\n 16111: a1 = a0 <u a1\n 16114: a3 = u64 [s1 + 0x78]\n 16117: a2 = a3 + a1\n 16120: a3 = a2 <u a3\n 16123: a3 = a1 if a1 == 0\n 16126: a1 = u64 [s1 + 0x70]\n 16129: a3 = a3 + a1\n 16132: a1 = a3 <u a1\n 16135: a4 = u64 [s1 + 0x68]\n 16138: a4 = a4 + a1\n 16141: u64 [s1 + 0xc8] = a2\n 16145: u64 [s1 + 0xc0] = a0\n 16149: u64 [s1 + 0xd0] = a3\n 16153: a0 = s1 + 0xe0\n 16157: a1 = s1 + 0xc0\n 16161: u64 [s1 + 0xd8] = a4\n 16165: ra = 228, jump @173\n      : @267 [@dyn 114] (gas: 5)\n 16171: a0 = u64 [s1 + 0xe8]\n 16175: t0 = u64 [s1 + 0xf8]\n 16179: t1 = u64 [s1 + 0xe0]\n 16183: a3 = u64 [s1 + 0xf0]\n 16187: jump @283\n      : @268 (gas: 3)\n 16190: a0 = 0x40\n 16193: a1 = 0x20\n 16196: ra = 230, jump @0\n      : @269 [@dyn 115] (gas: 104)\n 16202: a1 = u8 [a0 + 0x11]\n 16205: a2 = u8 [a0 + 0x10]\n 16208: a3 = u8 [a0 + 0x12]\n 16211: a4 = u8 [a0 + 0x13]\n 16214: a1 = a1 << 0x8\n 16217: a1 = a1 | a2\n 16220: a3 = a3 << 0x10\n 16223: a4 = a4 << 0x18\n 16226: a3 = a3 | a4\n 16229: a1 = a1 | a3\n 16232: a2 = u8 [a0 + 0x15]\n 16235: a3 = u8 [a0 + 0x14]\n 16238: a4 = u8 [a0 + 0x16]\n 16241: a5 = u8 [a0 + 0x17]\n 16244: a2 = a2 << 0x8\n 16247: a2 = a2 | a3\n 16250: a4 = a4 << 0x10\n 16253: a5 = a5 << 0x18\n 16256: a4 = a4 | a5\n 16259: a2 = a2 | a4\n 16262: a2 = a2 << 0x20\n 16265: t0 = a2 | a1\n 16268: a2 = u8 [a0 + 0x1]\n 16271: a3 = u8 [a0]\n 16273: a4 = u8 [a0 + 0x2]\n 16276: a5 = u8 [a0 + 0x3]\n 16279: a2 = a2 << 0x8\n 16282: a2 = a2 | a3\n 16285: a4 = a4 << 0x10\n 16288: a5 = a5 << 0x18\n 16291: a4 = a4 | a5\n 16294: a2 = a2 | a4\n 16297: a3 = u8 [a0 + 0x5]\n 16300: a4 = u8 [a0 + 0x4]\n 16303: a5 = u8 [a0 + 0x6]\n 16306: a1 = u8 [a0 + 0x7]\n 16309: a3 = a3 << 0x8\n 16312: a3 = a3 | a4\n 16315: a5 = a5 << 0x10\n 16318: a1 = a1 << 0x18\n 16321: a1 = a1 | a5\n 16324: a1 = a1 | a3\n 16327: a1 = a1 << 0x20\n 16330: t1 = a1 | a2\n 16333: a1 = u8 [a0 + 0x19]\n 16336: a3 = u8 [a0 + 0x18]\n 16339: a4 = u8 [a0 + 0x1a]\n 16342: a5 = u8 [a0 + 0x1b]\n 16345: a1 = a1 << 0x8\n 16348: a1 = a1 | a3\n 16351: a4 = a4 << 0x10\n 16354: a5 = a5 << 0x18\n 16357: a4 = a4 | a5\n 16360: a1 = a1 | a4\n 16363: a3 = u8 [a0 + 0x1d]\n 16366: a4 = u8 [a0 + 0x1c]\n 16369: a5 = u8 [a0 + 0x1e]\n 16372: a2 = u8 [a0 + 0x1f]\n 16375: a3 = a3 << 0x8\n 16378: a3 = a3 | a4\n 16381: a5 = a5 << 0x10\n 16384: a2 = a2 << 0x18\n 16387: a2 = a2 | a5\n 16390: a2 = a2 | a3\n 16393: a2 = a2 << 0x20\n 16396: a3 = a2 | a1\n 16399: a1 = u8 [a0 + 0x9]\n 16402: a2 = u8 [a0 + 0x8]\n 16405: a4 = u8 [a0 + 0xa]\n 16408: a5 = u8 [a0 + 0xb]\n 16411: a1 = a1 << 0x8\n 16414: a1 = a1 | a2\n 16417: a4 = a4 << 0x10\n 16420: a5 = a5 << 0x18\n 16423: a4 = a4 | a5\n 16426: a1 = a1 | a4\n 16429: a2 = u8 [a0 + 0xd]\n 16432: a4 = u8 [a0 + 0xc]\n 16435: a5 = u8 [a0 + 0xe]\n 16438: a0 = u8 [a0 + 0xf]\n 16441: a2 = a2 << 0x8\n 16444: a2 = a2 | a4\n 16447: a5 = a5 << 0x10\n 16450: a0 = a0 << 0x18\n 16453: a0 = a0 | a5\n 16456: a0 = a0 | a2\n 16459: a0 = a0 << 0x20\n 16462: a0 = a0 | a1\n 16465: a4 = reverse a0\n 16467: a1 = reverse a3\n 16469: a2 = reverse t1\n 16471: a0 = reverse t0\n 16473: u64 [s1 + 0x78] = a0\n 16476: u64 [s1 + 0x68] = a2\n 16479: a0 = a0 | a2\n 16482: a2 = a1\n 16484: a1 = a1 | a4\n 16487: a1 = a1 | a0\n 16490: a1 = a1 >> 0x20\n 16493: u64 [s1 + 0x70] = a4\n 16496: a0 = a0 | a4\n 16499: a0 = a0 << 0x20\n 16502: a0 = a0 | a1\n 16505: jump @284 if a0 != 0\n      : @270 (gas: 5)\n 16509: u64 [s1 + 0x60] = a2\n 16512: i32 a0 = a2 + 0\n 16514: a1 = 0x20\n 16517: u64 [s1 + 0x58] = a0\n 16520: ra = 232, jump @0\n      : @271 [@dyn 116] (gas: 51)\n 16526: u8 [a0 + 31] = 0\n 16529: u8 [a0 + 30] = 0\n 16532: u8 [a0 + 29] = 0\n 16535: u8 [a0 + 28] = 0\n 16538: u8 [a0 + 27] = 0\n 16541: u8 [a0 + 26] = 0\n 16544: u8 [a0 + 25] = 0\n 16547: u8 [a0 + 24] = 0\n 16550: u8 [a0 + 23] = 0\n 16553: u8 [a0 + 22] = 0\n 16556: u8 [a0 + 21] = 0\n 16559: u8 [a0 + 20] = 0\n 16562: u8 [a0 + 19] = 0\n 16565: u8 [a0 + 18] = 0\n 16568: u8 [a0 + 17] = 0\n 16571: u8 [a0 + 16] = 0\n 16574: u8 [a0 + 15] = 0\n 16577: u8 [a0 + 14] = 0\n 16580: u8 [a0 + 13] = 0\n 16583: u8 [a0 + 12] = 0\n 16586: u8 [a0 + 11] = 0\n 16589: u8 [a0 + 10] = 0\n 16592: u8 [a0 + 9] = 0\n 16595: u8 [a0 + 8] = 0\n 16598: u8 [a0 + 7] = 0\n 16601: u8 [a0 + 6] = 0\n 16604: u8 [a0 + 5] = 0\n 16607: u8 [a0 + 4] = 0\n 16610: u8 [a0 + 3] = 0xa0\n 16615: u8 [a0 + 2] = 0x79\n 16619: u8 [a0 + 1] = 0xc3\n 16624: u8 [a0 + 0] = 0x8\n 16627: a1 = u64 [s1 + 0x60]\n 16630: a0 = a1 + 0x4\n 16633: a1 = a0 <u a1\n 16636: a3 = u64 [s1 + 0x78]\n 16639: a2 = a3 + a1\n 16642: a3 = a2 <u a3\n 16645: a3 = a1 if a1 == 0\n 16648: a1 = u64 [s1 + 0x70]\n 16651: a3 = a3 + a1\n 16654: a1 = a3 <u a1\n 16657: a4 = u64 [s1 + 0x68]\n 16660: a4 = a4 + a1\n 16663: u64 [s1 + 0x88] = a2\n 16667: u64 [s1 + 0x80] = a0\n 16671: u64 [s1 + 0x90] = a3\n 16675: a0 = s1 + 0xa0\n 16679: a1 = s1 + 0x80\n 16683: u64 [s1 + 0x98] = a4\n 16687: ra = 234, jump @165\n      : @272 [@dyn 117] (gas: 5)\n 16693: a0 = u64 [s1 + 0xa8]\n 16697: t0 = u64 [s1 + 0xb8]\n 16701: t1 = u64 [s1 + 0xa0]\n 16705: a3 = u64 [s1 + 0xb0]\n 16709: jump @283\n      : @273 (gas: 3)\n 16712: a0 = 0x40\n 16715: a1 = 0x20\n 16718: ra = 236, jump @0\n      : @274 [@dyn 118] (gas: 104)\n 16724: a1 = u8 [a0 + 0x11]\n 16727: a2 = u8 [a0 + 0x10]\n 16730: a3 = u8 [a0 + 0x12]\n 16733: a4 = u8 [a0 + 0x13]\n 16736: a1 = a1 << 0x8\n 16739: a1 = a1 | a2\n 16742: a3 = a3 << 0x10\n 16745: a4 = a4 << 0x18\n 16748: a3 = a3 | a4\n 16751: a1 = a1 | a3\n 16754: a2 = u8 [a0 + 0x15]\n 16757: a3 = u8 [a0 + 0x14]\n 16760: a4 = u8 [a0 + 0x16]\n 16763: a5 = u8 [a0 + 0x17]\n 16766: a2 = a2 << 0x8\n 16769: a2 = a2 | a3\n 16772: a4 = a4 << 0x10\n 16775: a5 = a5 << 0x18\n 16778: a4 = a4 | a5\n 16781: a2 = a2 | a4\n 16784: a2 = a2 << 0x20\n 16787: t0 = a2 | a1\n 16790: a2 = u8 [a0 + 0x1]\n 16793: a3 = u8 [a0]\n 16795: a4 = u8 [a0 + 0x2]\n 16798: a5 = u8 [a0 + 0x3]\n 16801: a2 = a2 << 0x8\n 16804: a2 = a2 | a3\n 16807: a4 = a4 << 0x10\n 16810: a5 = a5 << 0x18\n 16813: a4 = a4 | a5\n 16816: a2 = a2 | a4\n 16819: a3 = u8 [a0 + 0x5]\n 16822: a4 = u8 [a0 + 0x4]\n 16825: a5 = u8 [a0 + 0x6]\n 16828: a1 = u8 [a0 + 0x7]\n 16831: a3 = a3 << 0x8\n 16834: a3 = a3 | a4\n 16837: a5 = a5 << 0x10\n 16840: a1 = a1 << 0x18\n 16843: a1 = a1 | a5\n 16846: a1 = a1 | a3\n 16849: a1 = a1 << 0x20\n 16852: t1 = a1 | a2\n 16855: a1 = u8 [a0 + 0x19]\n 16858: a3 = u8 [a0 + 0x18]\n 16861: a4 = u8 [a0 + 0x1a]\n 16864: a5 = u8 [a0 + 0x1b]\n 16867: a1 = a1 << 0x8\n 16870: a1 = a1 | a3\n 16873: a4 = a4 << 0x10\n 16876: a5 = a5 << 0x18\n 16879: a4 = a4 | a5\n 16882: a1 = a1 | a4\n 16885: a3 = u8 [a0 + 0x1d]\n 16888: a4 = u8 [a0 + 0x1c]\n 16891: a5 = u8 [a0 + 0x1e]\n 16894: a2 = u8 [a0 + 0x1f]\n 16897: a3 = a3 << 0x8\n 16900: a3 = a3 | a4\n 16903: a5 = a5 << 0x10\n 16906: a2 = a2 << 0x18\n 16909: a2 = a2 | a5\n 16912: a2 = a2 | a3\n 16915: a2 = a2 << 0x20\n 16918: a3 = a2 | a1\n 16921: a1 = u8 [a0 + 0x9]\n 16924: a2 = u8 [a0 + 0x8]\n 16927: a4 = u8 [a0 + 0xa]\n 16930: a5 = u8 [a0 + 0xb]\n 16933: a1 = a1 << 0x8\n 16936: a1 = a1 | a2\n 16939: a4 = a4 << 0x10\n 16942: a5 = a5 << 0x18\n 16945: a4 = a4 | a5\n 16948: a1 = a1 | a4\n 16951: a2 = u8 [a0 + 0xd]\n 16954: a4 = u8 [a0 + 0xc]\n 16957: a5 = u8 [a0 + 0xe]\n 16960: a0 = u8 [a0 + 0xf]\n 16963: a2 = a2 << 0x8\n 16966: a2 = a2 | a4\n 16969: a5 = a5 << 0x10\n 16972: a0 = a0 << 0x18\n 16975: a0 = a0 | a5\n 16978: a0 = a0 | a2\n 16981: a0 = a0 << 0x20\n 16984: a0 = a0 | a1\n 16987: a4 = reverse a0\n 16989: a1 = reverse a3\n 16991: a2 = reverse t1\n 16993: a0 = reverse t0\n 16995: u64 [s1 + 0x78] = a0\n 16998: u64 [s1 + 0x68] = a2\n 17001: a0 = a0 | a2\n 17004: a2 = a1\n 17006: a1 = a1 | a4\n 17009: a1 = a1 | a0\n 17012: a1 = a1 >> 0x20\n 17015: u64 [s1 + 0x70] = a4\n 17018: a0 = a0 | a4\n 17021: a0 = a0 << 0x20\n 17024: a0 = a0 | a1\n 17027: jump @284 if a0 != 0\n      : @275 (gas: 5)\n 17031: u64 [s1 + 0x60] = a2\n 17034: i32 a0 = a2 + 0\n 17036: a1 = 0x20\n 17039: u64 [s1 + 0x58] = a0\n 17042: ra = 238, jump @0\n      : @276 [@dyn 119] (gas: 51)\n 17048: u8 [a0 + 31] = 0\n 17051: u8 [a0 + 30] = 0\n 17054: u8 [a0 + 29] = 0\n 17057: u8 [a0 + 28] = 0\n 17060: u8 [a0 + 27] = 0\n 17063: u8 [a0 + 26] = 0\n 17066: u8 [a0 + 25] = 0\n 17069: u8 [a0 + 24] = 0\n 17072: u8 [a0 + 23] = 0\n 17075: u8 [a0 + 22] = 0\n 17078: u8 [a0 + 21] = 0\n 17081: u8 [a0 + 20] = 0\n 17084: u8 [a0 + 19] = 0\n 17087: u8 [a0 + 18] = 0\n 17090: u8 [a0 + 17] = 0\n 17093: u8 [a0 + 16] = 0\n 17096: u8 [a0 + 15] = 0\n 17099: u8 [a0 + 14] = 0\n 17102: u8 [a0 + 13] = 0\n 17105: u8 [a0 + 12] = 0\n 17108: u8 [a0 + 11] = 0\n 17111: u8 [a0 + 10] = 0\n 17114: u8 [a0 + 9] = 0\n 17117: u8 [a0 + 8] = 0\n 17120: u8 [a0 + 7] = 0\n 17123: u8 [a0 + 6] = 0\n 17126: u8 [a0 + 5] = 0\n 17129: u8 [a0 + 4] = 0\n 17132: u8 [a0 + 3] = 0xa0\n 17137: u8 [a0 + 2] = 0x79\n 17141: u8 [a0 + 1] = 0xc3\n 17146: u8 [a0 + 0] = 0x8\n 17149: a1 = u64 [s1 + 0x60]\n 17152: a0 = a1 + 0x4\n 17155: a1 = a0 <u a1\n 17158: a3 = u64 [s1 + 0x78]\n 17161: a2 = a3 + a1\n 17164: a3 = a2 <u a3\n 17167: a3 = a1 if a1 == 0\n 17170: a1 = u64 [s1 + 0x70]\n 17173: a3 = a3 + a1\n 17176: a1 = a3 <u a1\n 17179: a4 = u64 [s1 + 0x68]\n 17182: a4 = a4 + a1\n 17185: u64 [s1 + 0x1a8] = a2\n 17189: u64 [s1 + 0x1a0] = a0\n 17193: u64 [s1 + 0x1b0] = a3\n 17197: a0 = s1 + 0x1c0\n 17201: a1 = s1 + 0x1a0\n 17205: u64 [s1 + 0x1b8] = a4\n 17209: ra = 240, jump @218\n      : @277 [@dyn 120] (gas: 5)\n 17215: a0 = u64 [s1 + 0x1c8]\n 17219: t0 = u64 [s1 + 0x1d8]\n 17223: t1 = u64 [s1 + 0x1c0]\n 17227: a3 = u64 [s1 + 0x1d0]\n 17231: jump @283\n      : @278 (gas: 3)\n 17234: a0 = 0x40\n 17237: a1 = 0x20\n 17240: ra = 242, jump @0\n      : @279 [@dyn 121] (gas: 104)\n 17246: a1 = u8 [a0 + 0x11]\n 17249: a2 = u8 [a0 + 0x10]\n 17252: a3 = u8 [a0 + 0x12]\n 17255: a4 = u8 [a0 + 0x13]\n 17258: a1 = a1 << 0x8\n 17261: a1 = a1 | a2\n 17264: a3 = a3 << 0x10\n 17267: a4 = a4 << 0x18\n 17270: a3 = a3 | a4\n 17273: a1 = a1 | a3\n 17276: a2 = u8 [a0 + 0x15]\n 17279: a3 = u8 [a0 + 0x14]\n 17282: a4 = u8 [a0 + 0x16]\n 17285: a5 = u8 [a0 + 0x17]\n 17288: a2 = a2 << 0x8\n 17291: a2 = a2 | a3\n 17294: a4 = a4 << 0x10\n 17297: a5 = a5 << 0x18\n 17300: a4 = a4 | a5\n 17303: a2 = a2 | a4\n 17306: a2 = a2 << 0x20\n 17309: t0 = a2 | a1\n 17312: a2 = u8 [a0 + 0x1]\n 17315: a3 = u8 [a0]\n 17317: a4 = u8 [a0 + 0x2]\n 17320: a5 = u8 [a0 + 0x3]\n 17323: a2 = a2 << 0x8\n 17326: a2 = a2 | a3\n 17329: a4 = a4 << 0x10\n 17332: a5 = a5 << 0x18\n 17335: a4 = a4 | a5\n 17338: a2 = a2 | a4\n 17341: a3 = u8 [a0 + 0x5]\n 17344: a4 = u8 [a0 + 0x4]\n 17347: a5 = u8 [a0 + 0x6]\n 17350: a1 = u8 [a0 + 0x7]\n 17353: a3 = a3 << 0x8\n 17356: a3 = a3 | a4\n 17359: a5 = a5 << 0x10\n 17362: a1 = a1 << 0x18\n 17365: a1 = a1 | a5\n 17368: a1 = a1 | a3\n 17371: a1 = a1 << 0x20\n 17374: t1 = a1 | a2\n 17377: a1 = u8 [a0 + 0x19]\n 17380: a3 = u8 [a0 + 0x18]\n 17383: a4 = u8 [a0 + 0x1a]\n 17386: a5 = u8 [a0 + 0x1b]\n 17389: a1 = a1 << 0x8\n 17392: a1 = a1 | a3\n 17395: a4 = a4 << 0x10\n 17398: a5 = a5 << 0x18\n 17401: a4 = a4 | a5\n 17404: a1 = a1 | a4\n 17407: a3 = u8 [a0 + 0x1d]\n 17410: a4 = u8 [a0 + 0x1c]\n 17413: a5 = u8 [a0 + 0x1e]\n 17416: a2 = u8 [a0 + 0x1f]\n 17419: a3 = a3 << 0x8\n 17422: a3 = a3 | a4\n 17425: a5 = a5 << 0x10\n 17428: a2 = a2 << 0x18\n 17431: a2 = a2 | a5\n 17434: a2 = a2 | a3\n 17437: a2 = a2 << 0x20\n 17440: a3 = a2 | a1\n 17443: a1 = u8 [a0 + 0x9]\n 17446: a2 = u8 [a0 + 0x8]\n 17449: a4 = u8 [a0 + 0xa]\n 17452: a5 = u8 [a0 + 0xb]\n 17455: a1 = a1 << 0x8\n 17458: a1 = a1 | a2\n 17461: a4 = a4 << 0x10\n 17464: a5 = a5 << 0x18\n 17467: a4 = a4 | a5\n 17470: a1 = a1 | a4\n 17473: a2 = u8 [a0 + 0xd]\n 17476: a4 = u8 [a0 + 0xc]\n 17479: a5 = u8 [a0 + 0xe]\n 17482: a0 = u8 [a0 + 0xf]\n 17485: a2 = a2 << 0x8\n 17488: a2 = a2 | a4\n 17491: a5 = a5 << 0x10\n 17494: a0 = a0 << 0x18\n 17497: a0 = a0 | a5\n 17500: a0 = a0 | a2\n 17503: a0 = a0 << 0x20\n 17506: a0 = a0 | a1\n 17509: a4 = reverse a0\n 17511: a1 = reverse a3\n 17513: a2 = reverse t1\n 17515: a0 = reverse t0\n 17517: u64 [s1 + 0x78] = a0\n 17520: u64 [s1 + 0x68] = a2\n 17523: a0 = a0 | a2\n 17526: a2 = a1\n 17528: a1 = a1 | a4\n 17531: a1 = a1 | a0\n 17534: a1 = a1 >> 0x20\n 17537: u64 [s1 + 0x70] = a4\n 17540: a0 = a0 | a4\n 17543: a0 = a0 << 0x20\n 17546: a0 = a0 | a1\n 17549: jump @284 if a0 != 0\n      : @280 (gas: 5)\n 17553: u64 [s1 + 0x60] = a2\n 17556: i32 a0 = a2 + 0\n 17558: a1 = 0x20\n 17561: u64 [s1 + 0x58] = a0\n 17564: ra = 244, jump @0\n      : @281 [@dyn 122] (gas: 51)\n 17570: u8 [a0 + 31] = 0\n 17573: u8 [a0 + 30] = 0\n 17576: u8 [a0 + 29] = 0\n 17579: u8 [a0 + 28] = 0\n 17582: u8 [a0 + 27] = 0\n 17585: u8 [a0 + 26] = 0\n 17588: u8 [a0 + 25] = 0\n 17591: u8 [a0 + 24] = 0\n 17594: u8 [a0 + 23] = 0\n 17597: u8 [a0 + 22] = 0\n 17600: u8 [a0 + 21] = 0\n 17603: u8 [a0 + 20] = 0\n 17606: u8 [a0 + 19] = 0\n 17609: u8 [a0 + 18] = 0\n 17612: u8 [a0 + 17] = 0\n 17615: u8 [a0 + 16] = 0\n 17618: u8 [a0 + 15] = 0\n 17621: u8 [a0 + 14] = 0\n 17624: u8 [a0 + 13] = 0\n 17627: u8 [a0 + 12] = 0\n 17630: u8 [a0 + 11] = 0\n 17633: u8 [a0 + 10] = 0\n 17636: u8 [a0 + 9] = 0\n 17639: u8 [a0 + 8] = 0\n 17642: u8 [a0 + 7] = 0\n 17645: u8 [a0 + 6] = 0\n 17648: u8 [a0 + 5] = 0\n 17651: u8 [a0 + 4] = 0\n 17654: u8 [a0 + 3] = 0xa0\n 17659: u8 [a0 + 2] = 0x79\n 17663: u8 [a0 + 1] = 0xc3\n 17668: u8 [a0 + 0] = 0x8\n 17671: a1 = u64 [s1 + 0x60]\n 17674: a0 = a1 + 0x4\n 17677: a1 = a0 <u a1\n 17680: a3 = u64 [s1 + 0x78]\n 17683: a2 = a3 + a1\n 17686: a3 = a2 <u a3\n 17689: a3 = a1 if a1 == 0\n 17692: a1 = u64 [s1 + 0x70]\n 17695: a3 = a3 + a1\n 17698: a1 = a3 <u a1\n 17701: a4 = u64 [s1 + 0x68]\n 17704: a4 = a4 + a1\n 17707: u64 [s1 + 0x148] = a2\n 17711: u64 [s1 + 0x140] = a0\n 17715: u64 [s1 + 0x150] = a3\n 17719: a0 = s1 + 0x160\n 17723: a1 = s1 + 0x140\n 17727: u64 [s1 + 0x158] = a4\n 17731: ra = 246, jump @218\n      : @282 [@dyn 123] (gas: 5)\n 17737: a0 = u64 [s1 + 0x168]\n 17741: t0 = u64 [s1 + 0x178]\n 17745: t1 = u64 [s1 + 0x160]\n 17749: a3 = u64 [s1 + 0x170]\n 17753: fallthrough\n      : @283 (gas: 27)\n 17754: a1 = u64 [s1 + 0x78]\n 17757: a4 = a0 ^ a1\n 17760: a5 = a0 <u a1\n 17763: ra = a1\n 17765: t2 = u64 [s1 + 0x60]\n 17768: a1 = t1 <u t2\n 17771: a5 = a1 if a4 == 0\n 17774: a2 = u64 [s1 + 0x70]\n 17777: a4 = a3 - a2\n 17780: a3 = a3 <u a2\n 17783: a2 = u64 [s1 + 0x68]\n 17786: a2 = t0 - a2\n 17789: a2 = a2 - a3\n 17792: a3 = a4 <u a5\n 17795: a2 = a2 - a3\n 17798: a4 = a4 - a5\n 17801: a0 = a0 - ra\n 17804: a1 = a0 - a1\n 17807: a0 = t1 - t2\n 17810: a1 = a1 | a2\n 17813: a2 = a0 | a4\n 17816: a2 = a2 | a1\n 17819: a1 = a1 | a4\n 17822: a2 = a2 >> 0x20\n 17825: a1 = a1 << 0x20\n 17828: a1 = a1 | a2\n 17831: jump @291 if a1 == 0\n      : @284 (gas: 1)\n 17834: trap\n      : @285 (gas: 8)\n 17835: u64 [s1 + 304] = 0\n 17839: u64 [s1 + 296] = 0\n 17843: u64 [s1 + 288] = 0\n 17847: a0 = 0x4e487b7100000000\n 17857: a1 = s1 + 0x120\n 17861: u64 [s1 + 0x138] = a0\n 17865: a0 = 0\n 17867: ra = 248, jump @8\n      : @286 [@dyn 124] (gas: 7)\n 17873: u64 [s1 + 280] = 0\n 17877: u64 [s1 + 272] = 0\n 17881: u64 [s1 + 256] = 0x11\n 17886: a0 = 0x4\n 17889: a1 = s1 + 0x100\n 17893: u64 [s1 + 264] = 0\n 17897: ra = 250, jump @8\n      : @287 [@dyn 125] (gas: 3)\n 17903: a1 = 0x24\n 17906: a0 = 0\n 17908: ra = 252, jump @0\n      : @288 [@dyn 126] (gas: 5)\n 17914: i32 a1 = a0 + 0\n 17916: a0 = 0x1\n 17919: a2 = 0x24\n 17922: ecalli 13 // 'seal_return'\n 17924: fallthrough\n      : @289 (gas: 3)\n 17925: a0 = 0\n 17927: a1 = 0\n 17929: ra = 254, jump @0\n      : @290 [@dyn 127] (gas: 5)\n 17935: i32 a1 = a0 + 0\n 17937: a0 = 0x1\n 17940: a2 = 0\n 17942: ecalli 13 // 'seal_return'\n 17944: fallthrough\n      : @291 (gas: 4)\n 17945: i32 a1 = a0 + 0\n 17947: u64 [s1 + 0x78] = a1\n 17950: a0 = u64 [s1 + 0x58]\n 17953: ra = 256, jump @0\n      : @292 [@dyn 128] (gas: 6)\n 17959: i32 a1 = a0 + 0\n 17961: a0 = 0x1\n 17964: a2 = u64 [s1 + 0x78]\n 17967: ra = 0x102\n 17971: ecalli 13 // 'seal_return'\n 17973: fallthrough\n      : @293 [@dyn 129] (gas: 24)\n 17974: sp = sp + 0xffffffffffffffb0\n 17977: u64 [sp + 0x48] = ra\n 17980: u64 [sp + 0x40] = s0\n 17983: s0 = sp + 0x50\n 17986: sp = sp & 0xfffffffffffffff0\n 17989: t0 = u64 [a0]\n 17991: t1 = u64 [a0 + 0x8]\n 17994: a4 = u64 [a0 + 0x10]\n 17997: a0 = u64 [a0 + 0x18]\n 18000: a5 = u64 [a1]\n 18002: a2 = u64 [a1 + 0x8]\n 18005: a3 = u64 [a1 + 0x10]\n 18008: a1 = u64 [a1 + 0x18]\n 18011: u64 [sp + 0x18] = a1\n 18014: u64 [sp + 0x10] = a3\n 18017: u64 [sp + 0x8] = a2\n 18020: u64 [sp] = a5\n 18022: u64 [sp + 0x38] = a0\n 18025: u64 [sp + 0x30] = a4\n 18028: u64 [sp + 0x28] = t1\n 18031: a0 = sp + 0x20\n 18034: a1 = sp\n 18036: u64 [sp + 0x20] = t0\n 18039: ra = 260, jump @152\n      : @294 [@dyn 130] (gas: 5)\n 18045: sp = s0 + 0xffffffffffffffb0\n 18048: ra = u64 [sp + 0x48]\n 18051: s0 = u64 [sp + 0x40]\n 18054: sp = sp + 0x50\n 18057: ret\n      : @295 (gas: 17)\n 18059: sp = sp + 0xffffffffffffffa0\n 18062: u64 [sp + 0x58] = ra\n 18065: u64 [sp + 0x50] = s0\n 18068: u64 [sp + 0x48] = s1\n 18071: a3 = u64 [a1 + 0x18]\n 18074: a4 = u64 [a1 + 0x10]\n 18077: a5 = u64 [a1 + 0x8]\n 18080: s1 = u64 [a1]\n 18082: a1 = a5 | a3\n 18085: a2 = s1 | a4\n 18088: a2 = a2 | a1\n 18091: a2 = a2 >> 0x20\n 18094: a1 = a1 | a4\n 18097: a1 = a1 << 0x20\n 18100: a1 = a1 | a2\n 18103: u64 [sp + 0x28] = a0\n 18106: jump @302 if a1 != 0\n      : @296 (gas: 19)\n 18110: a0 = s1 + 0x20\n 18113: u64 [sp + 0x30] = a0\n 18116: a0 = a0 <u s1\n 18119: a1 = a5 + a0\n 18122: u64 [sp + 0x40] = a1\n 18125: u64 [sp + 0x8] = a5\n 18128: s0 = a1 <u a5\n 18131: s0 = a0 if a0 == 0\n 18134: s0 = s0 + a4\n 18137: u64 [sp + 0x10] = a4\n 18140: a0 = s0 <u a4\n 18143: u64 [sp + 0x18] = a3\n 18146: a0 = a0 + a3\n 18149: u64 [sp + 0x38] = a0\n 18152: u64 [sp] = s1\n 18154: i32 a0 = s1 + 0\n 18156: a1 = 0x20\n 18159: s1 = 0x20\n 18162: ra = 262, jump @0\n      : @297 [@dyn 131] (gas: 45)\n 18168: u8 [a0 + 0x1f] = s1\n 18171: a1 = u64 [sp + 0x30]\n 18174: s1 = a1\n 18176: a1 = a1 | s0\n 18179: a2 = u64 [sp + 0x40]\n 18182: a4 = u64 [sp + 0x38]\n 18185: a2 = a2 | a4\n 18188: a1 = a1 | a2\n 18191: a1 = a1 >> 0x20\n 18194: u64 [sp + 0x20] = s0\n 18197: a2 = a2 | s0\n 18200: a2 = a2 << 0x20\n 18203: a1 = a1 | a2\n 18206: u8 [a0 + 30] = 0\n 18209: u8 [a0 + 29] = 0\n 18212: u8 [a0 + 28] = 0\n 18215: u8 [a0 + 27] = 0\n 18218: u8 [a0 + 26] = 0\n 18221: u8 [a0 + 25] = 0\n 18224: u8 [a0 + 24] = 0\n 18227: u8 [a0 + 23] = 0\n 18230: u8 [a0 + 22] = 0\n 18233: u8 [a0 + 21] = 0\n 18236: u8 [a0 + 20] = 0\n 18239: u8 [a0 + 19] = 0\n 18242: u8 [a0 + 18] = 0\n 18245: u8 [a0 + 17] = 0\n 18248: u8 [a0 + 16] = 0\n 18251: u8 [a0 + 15] = 0\n 18254: u8 [a0 + 14] = 0\n 18257: u8 [a0 + 13] = 0\n 18260: u8 [a0 + 12] = 0\n 18263: u8 [a0 + 11] = 0\n 18266: u8 [a0 + 10] = 0\n 18269: u8 [a0 + 9] = 0\n 18272: u8 [a0 + 8] = 0\n 18275: u8 [a0 + 7] = 0\n 18278: u8 [a0 + 6] = 0\n 18281: u8 [a0 + 5] = 0\n 18284: u8 [a0 + 4] = 0\n 18287: u8 [a0 + 3] = 0\n 18290: u8 [a0 + 2] = 0\n 18293: u8 [a0 + 1] = 0\n 18296: u8 [a0 + 0] = 0\n 18298: jump @302 if a1 != 0\n      : @298 (gas: 4)\n 18302: i32 s0 = s1 + 0\n 18304: a1 = 0x20\n 18307: a0 = s0\n 18309: ra = 264, jump @0\n      : @299 [@dyn 132] (gas: 41)\n 18315: u8 [a0 + 31] = 0x17\n 18319: u8 [a0 + 30] = 0\n 18322: u8 [a0 + 29] = 0\n 18325: u8 [a0 + 28] = 0\n 18328: u8 [a0 + 27] = 0\n 18331: u8 [a0 + 26] = 0\n 18334: u8 [a0 + 25] = 0\n 18337: u8 [a0 + 24] = 0\n 18340: u8 [a0 + 23] = 0\n 18343: u8 [a0 + 22] = 0\n 18346: u8 [a0 + 21] = 0\n 18349: u8 [a0 + 20] = 0\n 18352: u8 [a0 + 19] = 0\n 18355: u8 [a0 + 18] = 0\n 18358: u8 [a0 + 17] = 0\n 18361: u8 [a0 + 16] = 0\n 18364: u8 [a0 + 15] = 0\n 18367: u8 [a0 + 14] = 0\n 18370: u8 [a0 + 13] = 0\n 18373: u8 [a0 + 12] = 0\n 18376: u8 [a0 + 11] = 0\n 18379: u8 [a0 + 10] = 0\n 18382: u8 [a0 + 9] = 0\n 18385: u8 [a0 + 8] = 0\n 18388: u8 [a0 + 7] = 0\n 18391: u8 [a0 + 6] = 0\n 18394: u8 [a0 + 5] = 0\n 18397: u8 [a0 + 4] = 0\n 18400: u8 [a0 + 3] = 0\n 18403: u8 [a0 + 2] = 0\n 18406: u8 [a0 + 1] = 0\n 18409: a1 = u64 [sp + 0x20]\n 18412: a2 = u64 [sp + 0x38]\n 18415: a1 = a1 | a2\n 18418: a2 = 0xffffffe0\n 18428: a2 = s1 <u a2\n 18431: a3 = u64 [sp + 0x40]\n 18434: a2 = 0 if a3 != 0\n 18436: a2 = 0 if a1 != 0\n 18438: u8 [a0 + 0] = 0\n 18440: jump @302 if a2 == 0\n      : @300 (gas: 3)\n 18444: i32 a0 = s0 + 0x20\n 18447: a1 = 0x20\n 18450: ra = 266, jump @0\n      : @301 [@dyn 133] (gas: 55)\n 18456: u8 [a0 + 31] = 0\n 18459: u8 [a0 + 30] = 0\n 18462: u8 [a0 + 29] = 0\n 18465: u8 [a0 + 28] = 0\n 18468: u8 [a0 + 27] = 0\n 18471: u8 [a0 + 26] = 0\n 18474: u8 [a0 + 25] = 0\n 18477: u8 [a0 + 24] = 0\n 18480: u8 [a0 + 23] = 0\n 18483: u8 [a0 + 22] = 0x64\n 18487: u8 [a0 + 21] = 0x65\n 18491: u8 [a0 + 20] = 0x64\n 18495: u8 [a0 + 19] = 0x6e\n 18499: u8 [a0 + 18] = 0x75\n 18503: u8 [a0 + 17] = 0x66\n 18507: u8 [a0 + 16] = 0x20\n 18511: u8 [a0 + 15] = 0x79\n 18515: u8 [a0 + 14] = 0x64\n 18519: u8 [a0 + 13] = 0x61\n 18523: u8 [a0 + 12] = 0x65\n 18527: u8 [a0 + 11] = 0x72\n 18531: u8 [a0 + 10] = 0x6c\n 18535: u8 [a0 + 9] = 0x61\n 18539: u8 [a0 + 8] = 0x20\n 18543: u8 [a0 + 7] = 0x74\n 18547: a5 = 0x63\n 18550: u8 [a0 + 0x6] = a5\n 18553: u8 [a0 + 5] = 0x61\n 18557: u8 [a0 + 4] = 0x72\n 18561: u8 [a0 + 3] = 0x74\n 18565: u8 [a0 + 2] = 0x6e\n 18569: u8 [a0 + 1] = 0x6f\n 18573: u8 [a0 + 0] = 0x43\n 18576: a1 = u64 [sp]\n 18578: a0 = a1 + 0x60\n 18581: a1 = a0 <u a1\n 18584: a3 = u64 [sp + 0x8]\n 18587: a2 = a3 + a1\n 18590: a3 = a2 <u a3\n 18593: a3 = a1 if a1 == 0\n 18596: a1 = u64 [sp + 0x10]\n 18599: a3 = a3 + a1\n 18602: a1 = a3 <u a1\n 18605: a4 = u64 [sp + 0x18]\n 18608: a1 = a1 + a4\n 18611: a4 = u64 [sp + 0x28]\n 18614: u64 [a4] = a0\n 18616: u64 [a4 + 0x8] = a2\n 18619: u64 [a4 + 0x10] = a3\n 18622: u64 [a4 + 0x18] = a1\n 18625: ra = u64 [sp + 0x58]\n 18628: s0 = u64 [sp + 0x50]\n 18631: s1 = u64 [sp + 0x48]\n 18634: sp = sp + 0x60\n 18637: ret\n      : @302 (gas: 1)\n 18639: trap\n      : @303 (gas: 17)\n 18640: sp = sp + 0xffffffffffffffa0\n 18643: u64 [sp + 0x58] = ra\n 18646: u64 [sp + 0x50] = s0\n 18649: u64 [sp + 0x48] = s1\n 18652: a3 = u64 [a1 + 0x18]\n 18655: a4 = u64 [a1 + 0x10]\n 18658: a5 = u64 [a1 + 0x8]\n 18661: s1 = u64 [a1]\n 18663: a1 = a5 | a3\n 18666: a2 = s1 | a4\n 18669: a2 = a2 | a1\n 18672: a2 = a2 >> 0x20\n 18675: a1 = a1 | a4\n 18678: a1 = a1 << 0x20\n 18681: a1 = a1 | a2\n 18684: u64 [sp + 0x28] = a0\n 18687: jump @310 if a1 != 0\n      : @304 (gas: 19)\n 18691: a0 = s1 + 0x20\n 18694: u64 [sp + 0x30] = a0\n 18697: a0 = a0 <u s1\n 18700: a1 = a5 + a0\n 18703: u64 [sp + 0x40] = a1\n 18706: u64 [sp + 0x8] = a5\n 18709: s0 = a1 <u a5\n 18712: s0 = a0 if a0 == 0\n 18715: s0 = s0 + a4\n 18718: u64 [sp + 0x10] = a4\n 18721: a0 = s0 <u a4\n 18724: u64 [sp + 0x18] = a3\n 18727: a0 = a0 + a3\n 18730: u64 [sp + 0x38] = a0\n 18733: u64 [sp] = s1\n 18735: i32 a0 = s1 + 0\n 18737: a1 = 0x20\n 18740: s1 = 0x20\n 18743: ra = 268, jump @0\n      : @305 [@dyn 134] (gas: 45)\n 18749: u8 [a0 + 0x1f] = s1\n 18752: a1 = u64 [sp + 0x30]\n 18755: s1 = a1\n 18757: a1 = a1 | s0\n 18760: a2 = u64 [sp + 0x40]\n 18763: a4 = u64 [sp + 0x38]\n 18766: a2 = a2 | a4\n 18769: a1 = a1 | a2\n 18772: a1 = a1 >> 0x20\n 18775: u64 [sp + 0x20] = s0\n 18778: a2 = a2 | s0\n 18781: a2 = a2 << 0x20\n 18784: a1 = a1 | a2\n 18787: u8 [a0 + 30] = 0\n 18790: u8 [a0 + 29] = 0\n 18793: u8 [a0 + 28] = 0\n 18796: u8 [a0 + 27] = 0\n 18799: u8 [a0 + 26] = 0\n 18802: u8 [a0 + 25] = 0\n 18805: u8 [a0 + 24] = 0\n 18808: u8 [a0 + 23] = 0\n 18811: u8 [a0 + 22] = 0\n 18814: u8 [a0 + 21] = 0\n 18817: u8 [a0 + 20] = 0\n 18820: u8 [a0 + 19] = 0\n 18823: u8 [a0 + 18] = 0\n 18826: u8 [a0 + 17] = 0\n 18829: u8 [a0 + 16] = 0\n 18832: u8 [a0 + 15] = 0\n 18835: u8 [a0 + 14] = 0\n 18838: u8 [a0 + 13] = 0\n 18841: u8 [a0 + 12] = 0\n 18844: u8 [a0 + 11] = 0\n 18847: u8 [a0 + 10] = 0\n 18850: u8 [a0 + 9] = 0\n 18853: u8 [a0 + 8] = 0\n 18856: u8 [a0 + 7] = 0\n 18859: u8 [a0 + 6] = 0\n 18862: u8 [a0 + 5] = 0\n 18865: u8 [a0 + 4] = 0\n 18868: u8 [a0 + 3] = 0\n 18871: u8 [a0 + 2] = 0\n 18874: u8 [a0 + 1] = 0\n 18877: u8 [a0 + 0] = 0\n 18879: jump @310 if a1 != 0\n      : @306 (gas: 4)\n 18883: i32 s0 = s1 + 0\n 18885: a1 = 0x20\n 18888: a0 = s0\n 18890: ra = 270, jump @0\n      : @307 [@dyn 135] (gas: 41)\n 18896: u8 [a0 + 31] = 0xd\n 18900: u8 [a0 + 30] = 0\n 18903: u8 [a0 + 29] = 0\n 18906: u8 [a0 + 28] = 0\n 18909: u8 [a0 + 27] = 0\n 18912: u8 [a0 + 26] = 0\n 18915: u8 [a0 + 25] = 0\n 18918: u8 [a0 + 24] = 0\n 18921: u8 [a0 + 23] = 0\n 18924: u8 [a0 + 22] = 0\n 18927: u8 [a0 + 21] = 0\n 18930: u8 [a0 + 20] = 0\n 18933: u8 [a0 + 19] = 0\n 18936: u8 [a0 + 18] = 0\n 18939: u8 [a0 + 17] = 0\n 18942: u8 [a0 + 16] = 0\n 18945: u8 [a0 + 15] = 0\n 18948: u8 [a0 + 14] = 0\n 18951: u8 [a0 + 13] = 0\n 18954: u8 [a0 + 12] = 0\n 18957: u8 [a0 + 11] = 0\n 18960: u8 [a0 + 10] = 0\n 18963: u8 [a0 + 9] = 0\n 18966: u8 [a0 + 8] = 0\n 18969: u8 [a0 + 7] = 0\n 18972: u8 [a0 + 6] = 0\n 18975: u8 [a0 + 5] = 0\n 18978: u8 [a0 + 4] = 0\n 18981: u8 [a0 + 3] = 0\n 18984: u8 [a0 + 2] = 0\n 18987: u8 [a0 + 1] = 0\n 18990: a1 = u64 [sp + 0x20]\n 18993: a2 = u64 [sp + 0x38]\n 18996: a1 = a1 | a2\n 18999: a2 = 0xffffffe0\n 19009: a2 = s1 <u a2\n 19012: a3 = u64 [sp + 0x40]\n 19015: a2 = 0 if a3 != 0\n 19017: a2 = 0 if a1 != 0\n 19019: u8 [a0 + 0] = 0\n 19021: jump @310 if a2 == 0\n      : @308 (gas: 3)\n 19025: i32 a0 = s0 + 0x20\n 19028: a1 = 0x20\n 19031: ra = 272, jump @0\n      : @309 [@dyn 136] (gas: 54)\n 19037: u8 [a0 + 31] = 0\n 19040: u8 [a0 + 30] = 0\n 19043: u8 [a0 + 29] = 0\n 19046: u8 [a0 + 28] = 0\n 19049: u8 [a0 + 27] = 0\n 19052: u8 [a0 + 26] = 0\n 19055: u8 [a0 + 25] = 0\n 19058: u8 [a0 + 24] = 0\n 19061: u8 [a0 + 23] = 0\n 19064: u8 [a0 + 22] = 0\n 19067: u8 [a0 + 21] = 0\n 19070: u8 [a0 + 20] = 0\n 19073: u8 [a0 + 19] = 0\n 19076: u8 [a0 + 18] = 0\n 19079: u8 [a0 + 17] = 0\n 19082: u8 [a0 + 16] = 0\n 19085: u8 [a0 + 15] = 0\n 19088: u8 [a0 + 14] = 0\n 19091: u8 [a0 + 13] = 0\n 19094: u8 [a0 + 12] = 0x48\n 19098: u8 [a0 + 11] = 0x54\n 19102: u8 [a0 + 10] = 0x45\n 19106: u8 [a0 + 9] = 0x20\n 19110: u8 [a0 + 8] = 0x64\n 19114: u8 [a0 + 7] = 0x6e\n 19118: u8 [a0 + 6] = 0x65\n 19122: u8 [a0 + 5] = 0x73\n 19126: u8 [a0 + 4] = 0x20\n 19130: u8 [a0 + 3] = 0x74\n 19134: u8 [a0 + 2] = 0x73\n 19138: u8 [a0 + 1] = 0x75\n 19142: u8 [a0 + 0] = 0x4d\n 19145: a1 = u64 [sp]\n 19147: a0 = a1 + 0x60\n 19150: a1 = a0 <u a1\n 19153: a3 = u64 [sp + 0x8]\n 19156: a2 = a3 + a1\n 19159: a3 = a2 <u a3\n 19162: a3 = a1 if a1 == 0\n 19165: a1 = u64 [sp + 0x10]\n 19168: a3 = a3 + a1\n 19171: a1 = a3 <u a1\n 19174: a4 = u64 [sp + 0x18]\n 19177: a1 = a1 + a4\n 19180: a4 = u64 [sp + 0x28]\n 19183: u64 [a4] = a0\n 19185: u64 [a4 + 0x8] = a2\n 19188: u64 [a4 + 0x10] = a3\n 19191: u64 [a4 + 0x18] = a1\n 19194: ra = u64 [sp + 0x58]\n 19197: s0 = u64 [sp + 0x50]\n 19200: s1 = u64 [sp + 0x48]\n 19203: sp = sp + 0x60\n 19206: ret\n      : @310 (gas: 1)\n 19208: trap\n      : @311 (gas: 17)\n 19209: sp = sp + 0xffffffffffffffa0\n 19212: u64 [sp + 0x58] = ra\n 19215: u64 [sp + 0x50] = s0\n 19218: u64 [sp + 0x48] = s1\n 19221: a3 = u64 [a1 + 0x18]\n 19224: a4 = u64 [a1 + 0x10]\n 19227: a5 = u64 [a1 + 0x8]\n 19230: s1 = u64 [a1]\n 19232: a1 = a5 | a3\n 19235: a2 = s1 | a4\n 19238: a2 = a2 | a1\n 19241: a2 = a2 >> 0x20\n 19244: a1 = a1 | a4\n 19247: a1 = a1 << 0x20\n 19250: a1 = a1 | a2\n 19253: u64 [sp + 0x28] = a0\n 19256: jump @318 if a1 != 0\n      : @312 (gas: 19)\n 19260: a0 = s1 + 0x20\n 19263: u64 [sp + 0x30] = a0\n 19266: a0 = a0 <u s1\n 19269: a1 = a5 + a0\n 19272: u64 [sp + 0x40] = a1\n 19275: u64 [sp + 0x8] = a5\n 19278: s0 = a1 <u a5\n 19281: s0 = a0 if a0 == 0\n 19284: s0 = s0 + a4\n 19287: u64 [sp + 0x10] = a4\n 19290: a0 = s0 <u a4\n 19293: u64 [sp + 0x18] = a3\n 19296: a0 = a0 + a3\n 19299: u64 [sp + 0x38] = a0\n 19302: u64 [sp] = s1\n 19304: i32 a0 = s1 + 0\n 19306: a1 = 0x20\n 19309: s1 = 0x20\n 19312: ra = 274, jump @0\n      : @313 [@dyn 137] (gas: 45)\n 19318: u8 [a0 + 0x1f] = s1\n 19321: a1 = u64 [sp + 0x30]\n 19324: s1 = a1\n 19326: a1 = a1 | s0\n 19329: a2 = u64 [sp + 0x40]\n 19332: a4 = u64 [sp + 0x38]\n 19335: a2 = a2 | a4\n 19338: a1 = a1 | a2\n 19341: a1 = a1 >> 0x20\n 19344: u64 [sp + 0x20] = s0\n 19347: a2 = a2 | s0\n 19350: a2 = a2 << 0x20\n 19353: a1 = a1 | a2\n 19356: u8 [a0 + 30] = 0\n 19359: u8 [a0 + 29] = 0\n 19362: u8 [a0 + 28] = 0\n 19365: u8 [a0 + 27] = 0\n 19368: u8 [a0 + 26] = 0\n 19371: u8 [a0 + 25] = 0\n 19374: u8 [a0 + 24] = 0\n 19377: u8 [a0 + 23] = 0\n 19380: u8 [a0 + 22] = 0\n 19383: u8 [a0 + 21] = 0\n 19386: u8 [a0 + 20] = 0\n 19389: u8 [a0 + 19] = 0\n 19392: u8 [a0 + 18] = 0\n 19395: u8 [a0 + 17] = 0\n 19398: u8 [a0 + 16] = 0\n 19401: u8 [a0 + 15] = 0\n 19404: u8 [a0 + 14] = 0\n 19407: u8 [a0 + 13] = 0\n 19410: u8 [a0 + 12] = 0\n 19413: u8 [a0 + 11] = 0\n 19416: u8 [a0 + 10] = 0\n 19419: u8 [a0 + 9] = 0\n 19422: u8 [a0 + 8] = 0\n 19425: u8 [a0 + 7] = 0\n 19428: u8 [a0 + 6] = 0\n 19431: u8 [a0 + 5] = 0\n 19434: u8 [a0 + 4] = 0\n 19437: u8 [a0 + 3] = 0\n 19440: u8 [a0 + 2] = 0\n 19443: u8 [a0 + 1] = 0\n 19446: u8 [a0 + 0] = 0\n 19448: jump @318 if a1 != 0\n      : @314 (gas: 4)\n 19452: i32 s0 = s1 + 0\n 19454: a1 = 0x20\n 19457: a0 = s0\n 19459: ra = 276, jump @0\n      : @315 [@dyn 138] (gas: 41)\n 19465: u8 [a0 + 31] = 0x10\n 19469: u8 [a0 + 30] = 0\n 19472: u8 [a0 + 29] = 0\n 19475: u8 [a0 + 28] = 0\n 19478: u8 [a0 + 27] = 0\n 19481: u8 [a0 + 26] = 0\n 19484: u8 [a0 + 25] = 0\n 19487: u8 [a0 + 24] = 0\n 19490: u8 [a0 + 23] = 0\n 19493: u8 [a0 + 22] = 0\n 19496: u8 [a0 + 21] = 0\n 19499: u8 [a0 + 20] = 0\n 19502: u8 [a0 + 19] = 0\n 19505: u8 [a0 + 18] = 0\n 19508: u8 [a0 + 17] = 0\n 19511: u8 [a0 + 16] = 0\n 19514: u8 [a0 + 15] = 0\n 19517: u8 [a0 + 14] = 0\n 19520: u8 [a0 + 13] = 0\n 19523: u8 [a0 + 12] = 0\n 19526: u8 [a0 + 11] = 0\n 19529: u8 [a0 + 10] = 0\n 19532: u8 [a0 + 9] = 0\n 19535: u8 [a0 + 8] = 0\n 19538: u8 [a0 + 7] = 0\n 19541: u8 [a0 + 6] = 0\n 19544: u8 [a0 + 5] = 0\n 19547: u8 [a0 + 4] = 0\n 19550: u8 [a0 + 3] = 0\n 19553: u8 [a0 + 2] = 0\n 19556: u8 [a0 + 1] = 0\n 19559: a1 = u64 [sp + 0x20]\n 19562: a2 = u64 [sp + 0x38]\n 19565: a1 = a1 | a2\n 19568: a2 = 0xffffffe0\n 19578: a2 = s1 <u a2\n 19581: a3 = u64 [sp + 0x40]\n 19584: a2 = 0 if a3 != 0\n 19586: a2 = 0 if a1 != 0\n 19588: u8 [a0 + 0] = 0\n 19590: jump @318 if a2 == 0\n      : @316 (gas: 3)\n 19594: i32 a0 = s0 + 0x20\n 19597: a1 = 0x20\n 19600: ra = 278, jump @0\n      : @317 [@dyn 139] (gas: 55)\n 19606: u8 [a0 + 31] = 0\n 19609: u8 [a0 + 30] = 0\n 19612: u8 [a0 + 29] = 0\n 19615: u8 [a0 + 28] = 0\n 19618: u8 [a0 + 27] = 0\n 19621: u8 [a0 + 26] = 0\n 19624: u8 [a0 + 25] = 0\n 19627: u8 [a0 + 24] = 0\n 19630: u8 [a0 + 23] = 0\n 19633: u8 [a0 + 22] = 0\n 19636: u8 [a0 + 21] = 0\n 19639: u8 [a0 + 20] = 0\n 19642: u8 [a0 + 19] = 0\n 19645: u8 [a0 + 18] = 0\n 19648: u8 [a0 + 17] = 0\n 19651: u8 [a0 + 16] = 0\n 19654: u8 [a0 + 15] = 0x6e\n 19658: u8 [a0 + 14] = 0x6f\n 19662: u8 [a0 + 13] = 0x69\n 19666: u8 [a0 + 12] = 0x74\n 19670: u8 [a0 + 11] = 0x61\n 19674: u8 [a0 + 10] = 0x72\n 19678: u8 [a0 + 9] = 0x75\n 19682: u8 [a0 + 8] = 0x64\n 19686: a5 = 0x20\n 19689: u8 [a0 + 0x7] = a5\n 19692: u8 [a0 + 6] = 0x64\n 19696: u8 [a0 + 5] = 0x69\n 19700: u8 [a0 + 4] = 0x6c\n 19704: u8 [a0 + 3] = 0x61\n 19708: u8 [a0 + 2] = 0x76\n 19712: u8 [a0 + 1] = 0x6e\n 19716: u8 [a0 + 0] = 0x49\n 19719: a1 = u64 [sp]\n 19721: a0 = a1 + 0x60\n 19724: a1 = a0 <u a1\n 19727: a3 = u64 [sp + 0x8]\n 19730: a2 = a3 + a1\n 19733: a3 = a2 <u a3\n 19736: a3 = a1 if a1 == 0\n 19739: a1 = u64 [sp + 0x10]\n 19742: a3 = a3 + a1\n 19745: a1 = a3 <u a1\n 19748: a4 = u64 [sp + 0x18]\n 19751: a1 = a1 + a4\n 19754: a4 = u64 [sp + 0x28]\n 19757: u64 [a4] = a0\n 19759: u64 [a4 + 0x8] = a2\n 19762: u64 [a4 + 0x10] = a3\n 19765: u64 [a4 + 0x18] = a1\n 19768: ra = u64 [sp + 0x58]\n 19771: s0 = u64 [sp + 0x50]\n 19774: s1 = u64 [sp + 0x48]\n 19777: sp = sp + 0x60\n 19780: ret\n      : @318 (gas: 1)\n 19782: trap\n      : @319 (gas: 2)\n 19783: a0 = u8 [s1 + 0x254]\n 19787: jump @332 if a0 != 0\n      : @320 (gas: 11)\n 19791: a0 = sp + 0xffffffffffffffe0\n 19794: a0 = a0 & 0xffffffffffffffe0\n 19797: u64 [s1 + 0x58] = a0\n 19800: sp = a0\n 19802: u64 [a0 + 24] = 0\n 19805: u64 [a0 + 16] = 0\n 19808: u64 [a0 + 8] = 0\n 19811: u64 [a0 + 0] = 0\n 19813: i32 a0 = a0 + 0\n 19815: ecalli 16 // 'value_transferred'\n 19817: fallthrough\n      : @321 (gas: 9)\n 19818: a3 = u64 [s1 + 0x58]\n 19821: a0 = u64 [a3 + 0x10]\n 19824: a1 = u64 [a3 + 0x18]\n 19827: a2 = u64 [a3 + 0x8]\n 19830: a3 = u64 [a3]\n 19832: a1 = a1 | a2\n 19835: a0 = a0 | a3\n 19838: a0 = a0 | a1\n 19841: jump @337 if a0 == 0\n      : @322 (gas: 8)\n 19845: a0 = u64 [s1 + 0x70]\n 19848: a1 = u64 [s1 + 0x68]\n 19851: a0 = a0 | a1\n 19854: a1 = u64 [s1 + 0x78]\n 19857: a2 = u64 [s1 + 0x60]\n 19860: a1 = a1 | a2\n 19863: a0 = a0 | a1\n 19866: jump @342 if a0 == 0\n      : @323 (gas: 100)\n 19870: i32 a0 = s1 + 0x180\n 19874: ecalli 6 // 'caller'\n 19876: a0 = u64 [s1 + 0x188]\n 19880: a1 = i32 [s1 + 0x190]\n 19884: a2 = u64 [s1 + 0x180]\n 19888: a0 = reverse a0\n 19890: a3 = a0 << 0x20\n 19893: a1 = reverse a1\n 19895: a1 = a1 >> 0x20\n 19898: a1 = a1 | a3\n 19901: u64 [s1 + 0x58] = a1\n 19904: a0 = a0 >> 0x20\n 19907: a1 = reverse a2\n 19909: a2 = a1 << 0x20\n 19912: a0 = a0 | a2\n 19915: u64 [s1 + 0x50] = a0\n 19918: a1 = a1 >> 0x20\n 19921: u64 [s1 + 0x48] = a1\n 19924: u64 [s1 + 536] = 0\n 19928: u64 [s1 + 528] = 0\n 19932: u64 [s1 + 520] = 0\n 19936: u64 [s1 + 512] = 0x2\n 19941: u64 [s1 + 600] = 0\n 19945: u64 [s1 + 592] = 0\n 19949: u64 [s1 + 584] = 0\n 19953: u64 [s1 + 576] = 0\n 19957: u32 [s1 + 544] = 0x20\n 19962: i32 a1 = s1 + 0x200\n 19966: i32 a3 = s1 + 0x240\n 19970: i32 a4 = s1 + 0x220\n 19974: a2 = 0xffffffffffffffff\n 19977: a0 = 0\n 19979: ecalli 8 // 'get_storage'\n 19981: a0 = u32 [s1 + 0x254]\n 19985: a0 = a0 << 0x20\n 19988: a1 = u64 [s1 + 0x258]\n 19992: a2 = u64 [s1 + 0x48]\n 19995: a0 = a0 | a2\n 19998: u64 [s1 + 536] = 0\n 20002: u64 [s1 + 528] = 0\n 20006: u64 [s1 + 520] = 0\n 20010: u64 [s1 + 512] = 0x2\n 20015: u64 [s1 + 0x258] = a1\n 20019: u64 [s1 + 0x250] = a0\n 20023: a0 = u64 [s1 + 0x50]\n 20026: u64 [s1 + 0x248] = a0\n 20030: a0 = u64 [s1 + 0x58]\n 20033: u64 [s1 + 0x240] = a0\n 20037: i32 a1 = s1 + 0x200\n 20041: i32 a3 = s1 + 0x240\n 20045: a2 = 0xffffffffffffffff\n 20048: a4 = 0x20\n 20051: a0 = 0\n 20053: ecalli 15 // 'set_storage'\n 20055: i32 a0 = s1 + 0x1a0\n 20059: ecalli 9 // 'now'\n 20061: a0 = u64 [s1 + 0x1a0]\n 20065: u64 [s1 + 0x58] = a0\n 20068: a0 = u64 [s1 + 0x1a8]\n 20072: u64 [s1 + 0x50] = a0\n 20075: a0 = u64 [s1 + 0x1b0]\n 20079: u64 [s1 + 0x48] = a0\n 20082: a0 = u64 [s1 + 0x1b8]\n 20086: u64 [s1 + 0x40] = a0\n 20089: u64 [s1 + 536] = 0\n 20093: u64 [s1 + 528] = 0\n 20097: u64 [s1 + 520] = 0\n 20101: u64 [s1 + 512] = 0x1\n 20106: u64 [s1 + 600] = 0\n 20110: u64 [s1 + 592] = 0\n 20114: u64 [s1 + 584] = 0\n 20118: u64 [s1 + 576] = 0\n 20122: u32 [s1 + 544] = 0x20\n 20127: i32 a1 = s1 + 0x200\n 20131: i32 a3 = s1 + 0x240\n 20135: i32 a4 = s1 + 0x220\n 20139: a2 = 0xffffffffffffffff\n 20142: a0 = 0\n 20144: ecalli 8 // 'get_storage'\n 20146: u64 [s1 + 536] = 0\n 20150: u64 [s1 + 528] = 0\n 20154: u64 [s1 + 520] = 0\n 20158: u64 [s1 + 512] = 0x1\n 20163: a0 = u64 [s1 + 0x40]\n 20166: u64 [s1 + 0x258] = a0\n 20170: a0 = u64 [s1 + 0x48]\n 20173: u64 [s1 + 0x250] = a0\n 20177: a0 = u64 [s1 + 0x50]\n 20180: u64 [s1 + 0x248] = a0\n 20184: a0 = u64 [s1 + 0x58]\n 20187: u64 [s1 + 0x240] = a0\n 20191: i32 a1 = s1 + 0x200\n 20195: i32 a3 = s1 + 0x240\n 20199: a2 = 0xffffffffffffffff\n 20202: a4 = 0x20\n 20205: a0 = 0\n 20207: ecalli 15 // 'set_storage'\n 20209: i32 a0 = s1 + 0x1c0\n 20213: ecalli 9 // 'now'\n 20215: fallthrough\n      : @324 (gas: 39)\n 20216: a4 = u64 [s1 + 0x1c8]\n 20220: a2 = u64 [s1 + 0x1c0]\n 20224: t0 = u64 [s1 + 0x1d8]\n 20228: t2 = u64 [s1 + 0x1d0]\n 20232: a5 = u64 [s1 + 0x60]\n 20235: a5 = a5 + a4\n 20238: a1 = u64 [s1 + 0x68]\n 20241: a1 = a1 + a2\n 20244: u64 [s1 + 0x68] = a1\n 20247: a3 = a1 <u a2\n 20250: a5 = a5 + a3\n 20253: t1 = a5 ^ a4\n 20256: u64 [s1 + 0x60] = a5\n 20259: a4 = a5 <u a4\n 20262: a5 = u64 [s1 + 0x70]\n 20265: a5 = a5 + t2\n 20268: a1 = u64 [s1 + 0x78]\n 20271: a1 = a1 + t0\n 20274: a2 = a5 <u t2\n 20277: a1 = a1 + a2\n 20280: a2 = a3\n 20282: a2 = a4 if t1 != 0\n 20285: a0 = a5 + a2\n 20288: a2 = a0 <u a5\n 20291: a5 = a1 + a2\n 20294: a1 = a3 ^ 0x1\n 20297: a2 = a4 ^ 0x1\n 20300: a1 = a2 if t1 != 0\n 20303: a2 = a0 <u t2\n 20306: a3 = a5 ^ t0\n 20309: u64 [s1 + 0x70] = a5\n 20312: a4 = a5 <u t0\n 20315: a4 = a2 if a3 == 0\n 20318: u64 [s1 + 0x78] = a0\n 20321: a0 = a0 ^ t2\n 20324: a0 = a0 | a3\n 20327: a2 = a4 ^ 0x1\n 20330: a1 = a2 if a0 != 0\n 20333: jump @349 if a1 == 0\n      : @325 (gas: 123)\n 20337: u64 [s1 + 536] = 0\n 20341: u64 [s1 + 528] = 0\n 20345: u64 [s1 + 520] = 0\n 20349: u64 [s1 + 512] = 0\n 20353: u64 [s1 + 600] = 0\n 20357: u64 [s1 + 592] = 0\n 20361: u64 [s1 + 584] = 0\n 20365: u64 [s1 + 576] = 0\n 20369: u32 [s1 + 544] = 0x20\n 20374: i32 a1 = s1 + 0x200\n 20378: i32 a3 = s1 + 0x240\n 20382: i32 a4 = s1 + 0x220\n 20386: a2 = 0xffffffffffffffff\n 20389: a0 = 0\n 20391: ecalli 8 // 'get_storage'\n 20393: u64 [s1 + 536] = 0\n 20397: u64 [s1 + 528] = 0\n 20401: u64 [s1 + 520] = 0\n 20405: u64 [s1 + 512] = 0\n 20409: a0 = u64 [s1 + 0x70]\n 20412: u64 [s1 + 0x258] = a0\n 20416: a0 = u64 [s1 + 0x78]\n 20419: u64 [s1 + 0x250] = a0\n 20423: a0 = u64 [s1 + 0x60]\n 20426: u64 [s1 + 0x248] = a0\n 20430: a0 = u64 [s1 + 0x68]\n 20433: u64 [s1 + 0x240] = a0\n 20437: i32 a1 = s1 + 0x200\n 20441: i32 a3 = s1 + 0x240\n 20445: a2 = 0xffffffffffffffff\n 20448: a4 = 0x20\n 20451: a0 = 0\n 20453: ecalli 15 // 'set_storage'\n 20455: u64 [s1 + 536] = 0\n 20459: u64 [s1 + 528] = 0\n 20463: u64 [s1 + 520] = 0\n 20467: u64 [s1 + 512] = 0x2\n 20472: u64 [s1 + 600] = 0\n 20476: u64 [s1 + 592] = 0\n 20480: u64 [s1 + 584] = 0\n 20484: u64 [s1 + 576] = 0\n 20488: u32 [s1 + 544] = 0x20\n 20493: i32 a1 = s1 + 0x200\n 20497: i32 a3 = s1 + 0x240\n 20501: i32 a4 = s1 + 0x220\n 20505: a2 = 0xffffffffffffffff\n 20508: a0 = 0\n 20510: ecalli 8 // 'get_storage'\n 20512: a0 = u64 [s1 + 0x240]\n 20516: a1 = u64 [s1 + 0x248]\n 20520: a2 = u64 [s1 + 0x250]\n 20524: a3 = u64 [s1 + 0x258]\n 20528: a4 = 0xffffff00ffffffff\n 20538: a2 = a2 & a4\n 20541: a4 = 0x100000000\n 20551: a2 = a2 | a4\n 20554: u64 [s1 + 536] = 0\n 20558: u64 [s1 + 528] = 0\n 20562: u64 [s1 + 520] = 0\n 20566: u64 [s1 + 512] = 0x2\n 20571: u64 [s1 + 0x258] = a3\n 20575: u64 [s1 + 0x250] = a2\n 20579: u64 [s1 + 0x248] = a1\n 20583: u64 [s1 + 0x240] = a0\n 20587: i32 a1 = s1 + 0x200\n 20591: i32 a3 = s1 + 0x240\n 20595: a2 = 0xffffffffffffffff\n 20598: a4 = 0x20\n 20601: a0 = 0\n 20603: ecalli 15 // 'set_storage'\n 20605: i32 a0 = s1 + 0x1e0\n 20609: ecalli 6 // 'caller'\n 20611: a0 = u32 [s1 + 0x1f0]\n 20615: u64 [s1 + 0x30] = a0\n 20618: a0 = u64 [s1 + 0x1e8]\n 20622: u64 [s1 + 0x28] = a0\n 20625: a0 = u64 [s1 + 0x1e0]\n 20629: u64 [s1 + 0x78] = a0\n 20632: a0 = sp + 0xffffffffffffffe0\n 20635: a0 = a0 & 0xffffffffffffffe0\n 20638: u64 [s1 + 0x70] = a0\n 20641: sp = a0\n 20643: u64 [a0 + 24] = 0\n 20646: u64 [a0 + 16] = 0\n 20649: u64 [a0 + 8] = 0\n 20652: u64 [a0 + 0] = 0\n 20654: i32 a0 = a0 + 0\n 20656: ecalli 16 // 'value_transferred'\n 20658: a1 = u64 [s1 + 0x70]\n 20661: a0 = u64 [a1 + 0x18]\n 20664: u64 [s1 + 0x50] = a0\n 20667: a0 = u64 [a1 + 0x10]\n 20670: u64 [s1 + 0x58] = a0\n 20673: a0 = u64 [a1 + 0x8]\n 20676: u64 [s1 + 0x60] = a0\n 20679: a0 = u64 [a1]\n 20681: u64 [s1 + 0x68] = a0\n 20684: u64 [s1 + 536] = 0\n 20688: u64 [s1 + 528] = 0\n 20692: u64 [s1 + 520] = 0\n 20696: u64 [s1 + 512] = 0\n 20700: u64 [s1 + 600] = 0\n 20704: u64 [s1 + 592] = 0\n 20708: u64 [s1 + 584] = 0\n 20712: u64 [s1 + 576] = 0\n 20716: u32 [s1 + 544] = 0x20\n 20721: i32 a1 = s1 + 0x200\n 20725: i32 a3 = s1 + 0x240\n 20729: i32 a4 = s1 + 0x220\n 20733: a2 = 0xffffffffffffffff\n 20736: a0 = 0\n 20738: ecalli 8 // 'get_storage'\n 20740: a0 = u64 [s1 + 0x258]\n 20744: u64 [s1 + 0x8] = a0\n 20747: a0 = u64 [s1 + 0x250]\n 20751: u64 [s1 + 0x10] = a0\n 20754: a0 = u64 [s1 + 0x248]\n 20758: u64 [s1 + 0x18] = a0\n 20761: a0 = u64 [s1 + 0x240]\n 20765: u64 [s1 + 0x20] = a0\n 20768: a0 = 0x40\n 20771: a1 = 0x20\n 20774: ra = 280, jump @0\n      : @326 [@dyn 140] (gas: 103)\n 20780: a1 = u8 [a0 + 0x11]\n 20783: a2 = u8 [a0 + 0x10]\n 20786: a3 = u8 [a0 + 0x12]\n 20789: a4 = u8 [a0 + 0x13]\n 20792: a1 = a1 << 0x8\n 20795: a1 = a1 | a2\n 20798: a3 = a3 << 0x10\n 20801: a4 = a4 << 0x18\n 20804: a3 = a3 | a4\n 20807: a1 = a1 | a3\n 20810: a2 = u8 [a0 + 0x15]\n 20813: a3 = u8 [a0 + 0x14]\n 20816: a4 = u8 [a0 + 0x16]\n 20819: a5 = u8 [a0 + 0x17]\n 20822: a2 = a2 << 0x8\n 20825: a2 = a2 | a3\n 20828: a4 = a4 << 0x10\n 20831: a5 = a5 << 0x18\n 20834: a4 = a4 | a5\n 20837: a2 = a2 | a4\n 20840: a2 = a2 << 0x20\n 20843: t0 = a2 | a1\n 20846: a2 = u8 [a0 + 0x1]\n 20849: a3 = u8 [a0]\n 20851: a4 = u8 [a0 + 0x2]\n 20854: a5 = u8 [a0 + 0x3]\n 20857: a2 = a2 << 0x8\n 20860: a2 = a2 | a3\n 20863: a4 = a4 << 0x10\n 20866: a5 = a5 << 0x18\n 20869: a4 = a4 | a5\n 20872: a2 = a2 | a4\n 20875: a3 = u8 [a0 + 0x5]\n 20878: a4 = u8 [a0 + 0x4]\n 20881: a5 = u8 [a0 + 0x6]\n 20884: a1 = u8 [a0 + 0x7]\n 20887: a3 = a3 << 0x8\n 20890: a3 = a3 | a4\n 20893: a5 = a5 << 0x10\n 20896: a1 = a1 << 0x18\n 20899: a1 = a1 | a5\n 20902: a1 = a1 | a3\n 20905: a1 = a1 << 0x20\n 20908: t1 = a1 | a2\n 20911: a1 = u8 [a0 + 0x19]\n 20914: a3 = u8 [a0 + 0x18]\n 20917: a4 = u8 [a0 + 0x1a]\n 20920: a5 = u8 [a0 + 0x1b]\n 20923: a1 = a1 << 0x8\n 20926: a1 = a1 | a3\n 20929: a4 = a4 << 0x10\n 20932: a5 = a5 << 0x18\n 20935: a4 = a4 | a5\n 20938: a1 = a1 | a4\n 20941: a3 = u8 [a0 + 0x1d]\n 20944: a4 = u8 [a0 + 0x1c]\n 20947: a5 = u8 [a0 + 0x1e]\n 20950: a2 = u8 [a0 + 0x1f]\n 20953: a3 = a3 << 0x8\n 20956: a3 = a3 | a4\n 20959: a5 = a5 << 0x10\n 20962: a2 = a2 << 0x18\n 20965: a2 = a2 | a5\n 20968: a2 = a2 | a3\n 20971: a2 = a2 << 0x20\n 20974: a3 = a2 | a1\n 20977: a1 = u8 [a0 + 0x9]\n 20980: a2 = u8 [a0 + 0x8]\n 20983: a4 = u8 [a0 + 0xa]\n 20986: a5 = u8 [a0 + 0xb]\n 20989: a1 = a1 << 0x8\n 20992: a1 = a1 | a2\n 20995: a4 = a4 << 0x10\n 20998: a5 = a5 << 0x18\n 21001: a4 = a4 | a5\n 21004: a1 = a1 | a4\n 21007: a2 = u8 [a0 + 0xd]\n 21010: a4 = u8 [a0 + 0xc]\n 21013: a5 = u8 [a0 + 0xe]\n 21016: a0 = u8 [a0 + 0xf]\n 21019: a2 = a2 << 0x8\n 21022: a2 = a2 | a4\n 21025: a5 = a5 << 0x10\n 21028: a0 = a0 << 0x18\n 21031: a0 = a0 | a5\n 21034: a0 = a0 | a2\n 21037: a0 = a0 << 0x20\n 21040: a0 = a0 | a1\n 21043: a4 = reverse a0\n 21045: a2 = reverse a3\n 21047: a1 = reverse t1\n 21049: a0 = reverse t0\n 21051: u64 [s1 + 0x48] = a0\n 21054: u64 [s1 + 0x38] = a1\n 21057: a0 = a0 | a1\n 21060: a1 = a2 | a4\n 21063: a1 = a1 | a0\n 21066: a1 = a1 >> 0x20\n 21069: u64 [s1 + 0x40] = a4\n 21072: a0 = a0 | a4\n 21075: a0 = a0 << 0x20\n 21078: a0 = a0 | a1\n 21081: jump @348 if a0 != 0\n      : @327 (gas: 5)\n 21085: i32 a0 = a2 + 0\n 21087: a1 = 0x20\n 21090: u64 [s1 + 0x70] = a0\n 21093: u64 [s1] = a2\n 21095: ra = 282, jump @0\n      : @328 [@dyn 141] (gas: 78)\n 21101: a1 = u64 [s1 + 0x50]\n 21104: a1 = reverse a1\n 21106: a2 = u64 [s1 + 0x58]\n 21109: a2 = reverse a2\n 21111: a3 = u64 [s1 + 0x60]\n 21114: a3 = reverse a3\n 21116: a4 = u64 [s1 + 0x68]\n 21119: a4 = reverse a4\n 21121: a5 = a4 >> 0x38\n 21124: u8 [a0 + 0x1f] = a5\n 21127: a5 = a4 >> 0x30\n 21130: u8 [a0 + 0x1e] = a5\n 21133: a5 = a4 >> 0x28\n 21136: u8 [a0 + 0x1d] = a5\n 21139: a5 = a4 >> 0x20\n 21142: u8 [a0 + 0x1c] = a5\n 21145: a5 = a4 >> 0x18\n 21148: u8 [a0 + 0x1b] = a5\n 21151: a5 = a4 >> 0x10\n 21154: u8 [a0 + 0x1a] = a5\n 21157: a5 = a4 >> 0x8\n 21160: u8 [a0 + 0x19] = a5\n 21163: u8 [a0 + 0x18] = a4\n 21166: u8 [a0 + 0x10] = a3\n 21169: a4 = a3 >> 0x38\n 21172: u8 [a0 + 0x17] = a4\n 21175: a4 = a3 >> 0x30\n 21178: u8 [a0 + 0x16] = a4\n 21181: a4 = a3 >> 0x28\n 21184: u8 [a0 + 0x15] = a4\n 21187: a4 = a3 >> 0x20\n 21190: u8 [a0 + 0x14] = a4\n 21193: a4 = a3 >> 0x18\n 21196: u8 [a0 + 0x13] = a4\n 21199: a4 = a3 >> 0x10\n 21202: u8 [a0 + 0x12] = a4\n 21205: a3 = a3 >> 0x8\n 21208: u8 [a0 + 0x11] = a3\n 21211: u8 [a0 + 0x8] = a2\n 21214: a3 = a2 >> 0x38\n 21217: u8 [a0 + 0xf] = a3\n 21220: a3 = a2 >> 0x30\n 21223: u8 [a0 + 0xe] = a3\n 21226: a3 = a2 >> 0x28\n 21229: u8 [a0 + 0xd] = a3\n 21232: a3 = a2 >> 0x20\n 21235: u8 [a0 + 0xc] = a3\n 21238: a3 = a2 >> 0x18\n 21241: u8 [a0 + 0xb] = a3\n 21244: a3 = a2 >> 0x10\n 21247: u8 [a0 + 0xa] = a3\n 21250: a2 = a2 >> 0x8\n 21253: u8 [a0 + 0x9] = a2\n 21256: u8 [a0] = a1\n 21258: a2 = a1 >> 0x38\n 21261: u8 [a0 + 0x7] = a2\n 21264: a2 = a1 >> 0x30\n 21267: u8 [a0 + 0x6] = a2\n 21270: a2 = a1 >> 0x28\n 21273: u8 [a0 + 0x5] = a2\n 21276: a2 = a1 >> 0x20\n 21279: u8 [a0 + 0x4] = a2\n 21282: a2 = a1 >> 0x18\n 21285: u8 [a0 + 0x3] = a2\n 21288: a2 = a1 >> 0x10\n 21291: u8 [a0 + 0x2] = a2\n 21294: a1 = a1 >> 0x8\n 21297: a2 = u64 [s1 + 0x40]\n 21300: a3 = u64 [s1 + 0x38]\n 21303: a2 = a2 | a3\n 21306: a3 = 0xffffffe0\n 21316: a4 = u64 [s1]\n 21318: a3 = a4 <u a3\n 21321: a4 = u64 [s1 + 0x48]\n 21324: a3 = 0 if a4 != 0\n 21326: a3 = 0 if a2 != 0\n 21328: u8 [a0 + 0x1] = a1\n 21331: jump @348 if a3 == 0\n      : @329 (gas: 18)\n 21335: a0 = u64 [s1 + 0x28]\n 21338: a0 = reverse a0\n 21340: a1 = a0 << 0x20\n 21343: a2 = u64 [s1 + 0x30]\n 21346: a2 = reverse a2\n 21348: a2 = a2 >> 0x20\n 21351: a1 = a1 | a2\n 21354: u64 [s1 + 0x68] = a1\n 21357: a1 = u64 [s1 + 0x78]\n 21360: a1 = reverse a1\n 21362: a1 = a1 << 0x20\n 21365: a0 = a0 >> 0x20\n 21368: a0 = a0 | a1\n 21371: u64 [s1 + 0x60] = a0\n 21374: a0 = u64 [s1 + 0x70]\n 21377: i32 a0 = a0 + 0x20\n 21380: a1 = 0x20\n 21383: ra = 284, jump @0\n      : @330 [@dyn 142] (gas: 71)\n 21389: a1 = u64 [s1 + 0x8]\n 21392: a1 = reverse a1\n 21394: a2 = u64 [s1 + 0x10]\n 21397: a2 = reverse a2\n 21399: a3 = u64 [s1 + 0x18]\n 21402: a3 = reverse a3\n 21404: a4 = u64 [s1 + 0x20]\n 21407: a4 = reverse a4\n 21409: a5 = a4 >> 0x38\n 21412: u8 [a0 + 0x1f] = a5\n 21415: a5 = a4 >> 0x30\n 21418: u8 [a0 + 0x1e] = a5\n 21421: a5 = a4 >> 0x28\n 21424: u8 [a0 + 0x1d] = a5\n 21427: a5 = a4 >> 0x20\n 21430: u8 [a0 + 0x1c] = a5\n 21433: a5 = a4 >> 0x18\n 21436: u8 [a0 + 0x1b] = a5\n 21439: a5 = a4 >> 0x10\n 21442: u8 [a0 + 0x1a] = a5\n 21445: a5 = a4 >> 0x8\n 21448: u8 [a0 + 0x19] = a5\n 21451: u8 [a0 + 0x18] = a4\n 21454: u8 [a0 + 0x10] = a3\n 21457: a4 = a3 >> 0x38\n 21460: u8 [a0 + 0x17] = a4\n 21463: a4 = a3 >> 0x30\n 21466: u8 [a0 + 0x16] = a4\n 21469: a4 = a3 >> 0x28\n 21472: u8 [a0 + 0x15] = a4\n 21475: a4 = a3 >> 0x20\n 21478: u8 [a0 + 0x14] = a4\n 21481: a4 = a3 >> 0x18\n 21484: u8 [a0 + 0x13] = a4\n 21487: a4 = a3 >> 0x10\n 21490: u8 [a0 + 0x12] = a4\n 21493: a3 = a3 >> 0x8\n 21496: u8 [a0 + 0x11] = a3\n 21499: u8 [a0 + 0x8] = a2\n 21502: a3 = a2 >> 0x38\n 21505: u8 [a0 + 0xf] = a3\n 21508: a3 = a2 >> 0x30\n 21511: u8 [a0 + 0xe] = a3\n 21514: a3 = a2 >> 0x28\n 21517: u8 [a0 + 0xd] = a3\n 21520: a3 = a2 >> 0x20\n 21523: u8 [a0 + 0xc] = a3\n 21526: a3 = a2 >> 0x18\n 21529: u8 [a0 + 0xb] = a3\n 21532: a3 = a2 >> 0x10\n 21535: u8 [a0 + 0xa] = a3\n 21538: a2 = a2 >> 0x8\n 21541: u8 [a0 + 0x9] = a2\n 21544: u8 [a0] = a1\n 21546: a2 = a1 >> 0x38\n 21549: u8 [a0 + 0x7] = a2\n 21552: a2 = a1 >> 0x30\n 21555: u8 [a0 + 0x6] = a2\n 21558: a2 = a1 >> 0x28\n 21561: u8 [a0 + 0x5] = a2\n 21564: a2 = a1 >> 0x20\n 21567: u8 [a0 + 0x4] = a2\n 21570: a2 = a1 >> 0x18\n 21573: u8 [a0 + 0x3] = a2\n 21576: a2 = a1 >> 0x10\n 21579: u8 [a0 + 0x2] = a2\n 21582: a1 = a1 >> 0x8\n 21585: u8 [a0 + 0x1] = a1\n 21588: a1 = 0x40\n 21591: a0 = u64 [s1 + 0x70]\n 21594: ra = 286, jump @0\n      : @331 [@dyn 143] (gas: 29)\n 21600: a1 = u64 [0x20020]\n 21605: a2 = u64 [0x20028]\n 21610: a3 = u64 [0x20030]\n 21615: a4 = u64 [0x20038]\n 21620: u64 [s1 + 0x258] = a1\n 21624: u64 [s1 + 0x250] = a2\n 21628: u64 [s1 + 0x248] = a3\n 21632: u64 [s1 + 0x240] = a4\n 21636: a1 = u64 [s1 + 0x60]\n 21639: a1 = reverse a1\n 21641: a2 = u64 [s1 + 0x68]\n 21644: a2 = reverse a2\n 21646: a3 = u64 [s1 + 0x78]\n 21649: a3 = a3 << 0x20\n 21652: u64 [s1 + 0x278] = a2\n 21656: u64 [s1 + 0x270] = a1\n 21660: u64 [s1 + 0x268] = a3\n 21664: u64 [s1 + 608] = 0\n 21668: i32 a2 = a0 + 0\n 21670: i32 a0 = s1 + 0x240\n 21674: a1 = 0x2\n 21677: a3 = 0x40\n 21680: ecalli 7 // 'deposit_event'\n 21682: sp = s0 + 0xfffffffffffffd60\n 21686: ra = u64 [sp + 0x298]\n 21690: s0 = u64 [sp + 0x290]\n 21694: s1 = u64 [sp + 0x288]\n 21698: sp = sp + 0x2a0\n 21702: ret\n      : @332 (gas: 3)\n 21704: a0 = 0x40\n 21707: a1 = 0x20\n 21710: ra = 288, jump @0\n      : @333 [@dyn 144] (gas: 104)\n 21716: a1 = u8 [a0 + 0x11]\n 21719: a2 = u8 [a0 + 0x10]\n 21722: a3 = u8 [a0 + 0x12]\n 21725: a4 = u8 [a0 + 0x13]\n 21728: a1 = a1 << 0x8\n 21731: a1 = a1 | a2\n 21734: a3 = a3 << 0x10\n 21737: a4 = a4 << 0x18\n 21740: a3 = a3 | a4\n 21743: a1 = a1 | a3\n 21746: a2 = u8 [a0 + 0x15]\n 21749: a3 = u8 [a0 + 0x14]\n 21752: a4 = u8 [a0 + 0x16]\n 21755: a5 = u8 [a0 + 0x17]\n 21758: a2 = a2 << 0x8\n 21761: a2 = a2 | a3\n 21764: a4 = a4 << 0x10\n 21767: a5 = a5 << 0x18\n 21770: a4 = a4 | a5\n 21773: a2 = a2 | a4\n 21776: a2 = a2 << 0x20\n 21779: t0 = a2 | a1\n 21782: a2 = u8 [a0 + 0x1]\n 21785: a3 = u8 [a0]\n 21787: a4 = u8 [a0 + 0x2]\n 21790: a5 = u8 [a0 + 0x3]\n 21793: a2 = a2 << 0x8\n 21796: a2 = a2 | a3\n 21799: a4 = a4 << 0x10\n 21802: a5 = a5 << 0x18\n 21805: a4 = a4 | a5\n 21808: a2 = a2 | a4\n 21811: a3 = u8 [a0 + 0x5]\n 21814: a4 = u8 [a0 + 0x4]\n 21817: a5 = u8 [a0 + 0x6]\n 21820: a1 = u8 [a0 + 0x7]\n 21823: a3 = a3 << 0x8\n 21826: a3 = a3 | a4\n 21829: a5 = a5 << 0x10\n 21832: a1 = a1 << 0x18\n 21835: a1 = a1 | a5\n 21838: a1 = a1 | a3\n 21841: a1 = a1 << 0x20\n 21844: t1 = a1 | a2\n 21847: a1 = u8 [a0 + 0x19]\n 21850: a3 = u8 [a0 + 0x18]\n 21853: a4 = u8 [a0 + 0x1a]\n 21856: a5 = u8 [a0 + 0x1b]\n 21859: a1 = a1 << 0x8\n 21862: a1 = a1 | a3\n 21865: a4 = a4 << 0x10\n 21868: a5 = a5 << 0x18\n 21871: a4 = a4 | a5\n 21874: a1 = a1 | a4\n 21877: a3 = u8 [a0 + 0x1d]\n 21880: a4 = u8 [a0 + 0x1c]\n 21883: a5 = u8 [a0 + 0x1e]\n 21886: a2 = u8 [a0 + 0x1f]\n 21889: a3 = a3 << 0x8\n 21892: a3 = a3 | a4\n 21895: a5 = a5 << 0x10\n 21898: a2 = a2 << 0x18\n 21901: a2 = a2 | a5\n 21904: a2 = a2 | a3\n 21907: a2 = a2 << 0x20\n 21910: a3 = a2 | a1\n 21913: a1 = u8 [a0 + 0x9]\n 21916: a2 = u8 [a0 + 0x8]\n 21919: a4 = u8 [a0 + 0xa]\n 21922: a5 = u8 [a0 + 0xb]\n 21925: a1 = a1 << 0x8\n 21928: a1 = a1 | a2\n 21931: a4 = a4 << 0x10\n 21934: a5 = a5 << 0x18\n 21937: a4 = a4 | a5\n 21940: a1 = a1 | a4\n 21943: a2 = u8 [a0 + 0xd]\n 21946: a4 = u8 [a0 + 0xc]\n 21949: a5 = u8 [a0 + 0xe]\n 21952: a0 = u8 [a0 + 0xf]\n 21955: a2 = a2 << 0x8\n 21958: a2 = a2 | a4\n 21961: a5 = a5 << 0x10\n 21964: a0 = a0 << 0x18\n 21967: a0 = a0 | a5\n 21970: a0 = a0 | a2\n 21973: a0 = a0 << 0x20\n 21976: a0 = a0 | a1\n 21979: a4 = reverse a0\n 21981: a1 = reverse a3\n 21983: a2 = reverse t1\n 21985: a0 = reverse t0\n 21987: u64 [s1 + 0x78] = a0\n 21990: u64 [s1 + 0x68] = a2\n 21993: a0 = a0 | a2\n 21996: a2 = a1\n 21998: a1 = a1 | a4\n 22001: a1 = a1 | a0\n 22004: a1 = a1 >> 0x20\n 22007: u64 [s1 + 0x70] = a4\n 22010: a0 = a0 | a4\n 22013: a0 = a0 << 0x20\n 22016: a0 = a0 | a1\n 22019: jump @348 if a0 != 0\n      : @334 (gas: 5)\n 22023: u64 [s1 + 0x60] = a2\n 22026: i32 a0 = a2 + 0\n 22028: a1 = 0x20\n 22031: u64 [s1 + 0x58] = a0\n 22034: ra = 290, jump @0\n      : @335 [@dyn 145] (gas: 51)\n 22040: u8 [a0 + 31] = 0\n 22043: u8 [a0 + 30] = 0\n 22046: u8 [a0 + 29] = 0\n 22049: u8 [a0 + 28] = 0\n 22052: u8 [a0 + 27] = 0\n 22055: u8 [a0 + 26] = 0\n 22058: u8 [a0 + 25] = 0\n 22061: u8 [a0 + 24] = 0\n 22064: u8 [a0 + 23] = 0\n 22067: u8 [a0 + 22] = 0\n 22070: u8 [a0 + 21] = 0\n 22073: u8 [a0 + 20] = 0\n 22076: u8 [a0 + 19] = 0\n 22079: u8 [a0 + 18] = 0\n 22082: u8 [a0 + 17] = 0\n 22085: u8 [a0 + 16] = 0\n 22088: u8 [a0 + 15] = 0\n 22091: u8 [a0 + 14] = 0\n 22094: u8 [a0 + 13] = 0\n 22097: u8 [a0 + 12] = 0\n 22100: u8 [a0 + 11] = 0\n 22103: u8 [a0 + 10] = 0\n 22106: u8 [a0 + 9] = 0\n 22109: u8 [a0 + 8] = 0\n 22112: u8 [a0 + 7] = 0\n 22115: u8 [a0 + 6] = 0\n 22118: u8 [a0 + 5] = 0\n 22121: u8 [a0 + 4] = 0\n 22124: u8 [a0 + 3] = 0xa0\n 22129: u8 [a0 + 2] = 0x79\n 22133: u8 [a0 + 1] = 0xc3\n 22138: u8 [a0 + 0] = 0x8\n 22141: a1 = u64 [s1 + 0x60]\n 22144: a0 = a1 + 0x4\n 22147: a1 = a0 <u a1\n 22150: a3 = u64 [s1 + 0x78]\n 22153: a2 = a3 + a1\n 22156: a3 = a2 <u a3\n 22159: a3 = a1 if a1 == 0\n 22162: a1 = u64 [s1 + 0x70]\n 22165: a3 = a3 + a1\n 22168: a1 = a3 <u a1\n 22171: a4 = u64 [s1 + 0x68]\n 22174: a4 = a4 + a1\n 22177: u64 [s1 + 0x148] = a2\n 22181: u64 [s1 + 0x140] = a0\n 22185: u64 [s1 + 0x150] = a3\n 22189: a0 = s1 + 0x160\n 22193: a1 = s1 + 0x140\n 22197: u64 [s1 + 0x158] = a4\n 22201: ra = 292, jump @295\n      : @336 [@dyn 146] (gas: 5)\n 22207: a0 = u64 [s1 + 0x168]\n 22211: t0 = u64 [s1 + 0x178]\n 22215: t1 = u64 [s1 + 0x160]\n 22219: a3 = u64 [s1 + 0x170]\n 22223: jump @347\n      : @337 (gas: 3)\n 22226: a0 = 0x40\n 22229: a1 = 0x20\n 22232: ra = 294, jump @0\n      : @338 [@dyn 147] (gas: 104)\n 22238: a1 = u8 [a0 + 0x11]\n 22241: a2 = u8 [a0 + 0x10]\n 22244: a3 = u8 [a0 + 0x12]\n 22247: a4 = u8 [a0 + 0x13]\n 22250: a1 = a1 << 0x8\n 22253: a1 = a1 | a2\n 22256: a3 = a3 << 0x10\n 22259: a4 = a4 << 0x18\n 22262: a3 = a3 | a4\n 22265: a1 = a1 | a3\n 22268: a2 = u8 [a0 + 0x15]\n 22271: a3 = u8 [a0 + 0x14]\n 22274: a4 = u8 [a0 + 0x16]\n 22277: a5 = u8 [a0 + 0x17]\n 22280: a2 = a2 << 0x8\n 22283: a2 = a2 | a3\n 22286: a4 = a4 << 0x10\n 22289: a5 = a5 << 0x18\n 22292: a4 = a4 | a5\n 22295: a2 = a2 | a4\n 22298: a2 = a2 << 0x20\n 22301: t0 = a2 | a1\n 22304: a2 = u8 [a0 + 0x1]\n 22307: a3 = u8 [a0]\n 22309: a4 = u8 [a0 + 0x2]\n 22312: a5 = u8 [a0 + 0x3]\n 22315: a2 = a2 << 0x8\n 22318: a2 = a2 | a3\n 22321: a4 = a4 << 0x10\n 22324: a5 = a5 << 0x18\n 22327: a4 = a4 | a5\n 22330: a2 = a2 | a4\n 22333: a3 = u8 [a0 + 0x5]\n 22336: a4 = u8 [a0 + 0x4]\n 22339: a5 = u8 [a0 + 0x6]\n 22342: a1 = u8 [a0 + 0x7]\n 22345: a3 = a3 << 0x8\n 22348: a3 = a3 | a4\n 22351: a5 = a5 << 0x10\n 22354: a1 = a1 << 0x18\n 22357: a1 = a1 | a5\n 22360: a1 = a1 | a3\n 22363: a1 = a1 << 0x20\n 22366: t1 = a1 | a2\n 22369: a1 = u8 [a0 + 0x19]\n 22372: a3 = u8 [a0 + 0x18]\n 22375: a4 = u8 [a0 + 0x1a]\n 22378: a5 = u8 [a0 + 0x1b]\n 22381: a1 = a1 << 0x8\n 22384: a1 = a1 | a3\n 22387: a4 = a4 << 0x10\n 22390: a5 = a5 << 0x18\n 22393: a4 = a4 | a5\n 22396: a1 = a1 | a4\n 22399: a3 = u8 [a0 + 0x1d]\n 22402: a4 = u8 [a0 + 0x1c]\n 22405: a5 = u8 [a0 + 0x1e]\n 22408: a2 = u8 [a0 + 0x1f]\n 22411: a3 = a3 << 0x8\n 22414: a3 = a3 | a4\n 22417: a5 = a5 << 0x10\n 22420: a2 = a2 << 0x18\n 22423: a2 = a2 | a5\n 22426: a2 = a2 | a3\n 22429: a2 = a2 << 0x20\n 22432: a3 = a2 | a1\n 22435: a1 = u8 [a0 + 0x9]\n 22438: a2 = u8 [a0 + 0x8]\n 22441: a4 = u8 [a0 + 0xa]\n 22444: a5 = u8 [a0 + 0xb]\n 22447: a1 = a1 << 0x8\n 22450: a1 = a1 | a2\n 22453: a4 = a4 << 0x10\n 22456: a5 = a5 << 0x18\n 22459: a4 = a4 | a5\n 22462: a1 = a1 | a4\n 22465: a2 = u8 [a0 + 0xd]\n 22468: a4 = u8 [a0 + 0xc]\n 22471: a5 = u8 [a0 + 0xe]\n 22474: a0 = u8 [a0 + 0xf]\n 22477: a2 = a2 << 0x8\n 22480: a2 = a2 | a4\n 22483: a5 = a5 << 0x10\n 22486: a0 = a0 << 0x18\n 22489: a0 = a0 | a5\n 22492: a0 = a0 | a2\n 22495: a0 = a0 << 0x20\n 22498: a0 = a0 | a1\n 22501: a4 = reverse a0\n 22503: a1 = reverse a3\n 22505: a2 = reverse t1\n 22507: a0 = reverse t0\n 22509: u64 [s1 + 0x78] = a0\n 22512: u64 [s1 + 0x68] = a2\n 22515: a0 = a0 | a2\n 22518: a2 = a1\n 22520: a1 = a1 | a4\n 22523: a1 = a1 | a0\n 22526: a1 = a1 >> 0x20\n 22529: u64 [s1 + 0x70] = a4\n 22532: a0 = a0 | a4\n 22535: a0 = a0 << 0x20\n 22538: a0 = a0 | a1\n 22541: jump @348 if a0 != 0\n      : @339 (gas: 5)\n 22545: u64 [s1 + 0x60] = a2\n 22548: i32 a0 = a2 + 0\n 22550: a1 = 0x20\n 22553: u64 [s1 + 0x58] = a0\n 22556: ra = 296, jump @0\n      : @340 [@dyn 148] (gas: 51)\n 22562: u8 [a0 + 31] = 0\n 22565: u8 [a0 + 30] = 0\n 22568: u8 [a0 + 29] = 0\n 22571: u8 [a0 + 28] = 0\n 22574: u8 [a0 + 27] = 0\n 22577: u8 [a0 + 26] = 0\n 22580: u8 [a0 + 25] = 0\n 22583: u8 [a0 + 24] = 0\n 22586: u8 [a0 + 23] = 0\n 22589: u8 [a0 + 22] = 0\n 22592: u8 [a0 + 21] = 0\n 22595: u8 [a0 + 20] = 0\n 22598: u8 [a0 + 19] = 0\n 22601: u8 [a0 + 18] = 0\n 22604: u8 [a0 + 17] = 0\n 22607: u8 [a0 + 16] = 0\n 22610: u8 [a0 + 15] = 0\n 22613: u8 [a0 + 14] = 0\n 22616: u8 [a0 + 13] = 0\n 22619: u8 [a0 + 12] = 0\n 22622: u8 [a0 + 11] = 0\n 22625: u8 [a0 + 10] = 0\n 22628: u8 [a0 + 9] = 0\n 22631: u8 [a0 + 8] = 0\n 22634: u8 [a0 + 7] = 0\n 22637: u8 [a0 + 6] = 0\n 22640: u8 [a0 + 5] = 0\n 22643: u8 [a0 + 4] = 0\n 22646: u8 [a0 + 3] = 0xa0\n 22651: u8 [a0 + 2] = 0x79\n 22655: u8 [a0 + 1] = 0xc3\n 22660: u8 [a0 + 0] = 0x8\n 22663: a1 = u64 [s1 + 0x60]\n 22666: a0 = a1 + 0x4\n 22669: a1 = a0 <u a1\n 22672: a3 = u64 [s1 + 0x78]\n 22675: a2 = a3 + a1\n 22678: a3 = a2 <u a3\n 22681: a3 = a1 if a1 == 0\n 22684: a1 = u64 [s1 + 0x70]\n 22687: a3 = a3 + a1\n 22690: a1 = a3 <u a1\n 22693: a4 = u64 [s1 + 0x68]\n 22696: a4 = a4 + a1\n 22699: u64 [s1 + 0x88] = a2\n 22703: u64 [s1 + 0x80] = a0\n 22707: u64 [s1 + 0x90] = a3\n 22711: a0 = s1 + 0xa0\n 22715: a1 = s1 + 0x80\n 22719: u64 [s1 + 0x98] = a4\n 22723: ra = 298, jump @303\n      : @341 [@dyn 149] (gas: 5)\n 22729: a0 = u64 [s1 + 0xa8]\n 22733: t0 = u64 [s1 + 0xb8]\n 22737: t1 = u64 [s1 + 0xa0]\n 22741: a3 = u64 [s1 + 0xb0]\n 22745: jump @347\n      : @342 (gas: 3)\n 22748: a0 = 0x40\n 22751: a1 = 0x20\n 22754: ra = 300, jump @0\n      : @343 [@dyn 150] (gas: 104)\n 22760: a1 = u8 [a0 + 0x11]\n 22763: a2 = u8 [a0 + 0x10]\n 22766: a3 = u8 [a0 + 0x12]\n 22769: a4 = u8 [a0 + 0x13]\n 22772: a1 = a1 << 0x8\n 22775: a1 = a1 | a2\n 22778: a3 = a3 << 0x10\n 22781: a4 = a4 << 0x18\n 22784: a3 = a3 | a4\n 22787: a1 = a1 | a3\n 22790: a2 = u8 [a0 + 0x15]\n 22793: a3 = u8 [a0 + 0x14]\n 22796: a4 = u8 [a0 + 0x16]\n 22799: a5 = u8 [a0 + 0x17]\n 22802: a2 = a2 << 0x8\n 22805: a2 = a2 | a3\n 22808: a4 = a4 << 0x10\n 22811: a5 = a5 << 0x18\n 22814: a4 = a4 | a5\n 22817: a2 = a2 | a4\n 22820: a2 = a2 << 0x20\n 22823: t0 = a2 | a1\n 22826: a2 = u8 [a0 + 0x1]\n 22829: a3 = u8 [a0]\n 22831: a4 = u8 [a0 + 0x2]\n 22834: a5 = u8 [a0 + 0x3]\n 22837: a2 = a2 << 0x8\n 22840: a2 = a2 | a3\n 22843: a4 = a4 << 0x10\n 22846: a5 = a5 << 0x18\n 22849: a4 = a4 | a5\n 22852: a2 = a2 | a4\n 22855: a3 = u8 [a0 + 0x5]\n 22858: a4 = u8 [a0 + 0x4]\n 22861: a5 = u8 [a0 + 0x6]\n 22864: a1 = u8 [a0 + 0x7]\n 22867: a3 = a3 << 0x8\n 22870: a3 = a3 | a4\n 22873: a5 = a5 << 0x10\n 22876: a1 = a1 << 0x18\n 22879: a1 = a1 | a5\n 22882: a1 = a1 | a3\n 22885: a1 = a1 << 0x20\n 22888: t1 = a1 | a2\n 22891: a1 = u8 [a0 + 0x19]\n 22894: a3 = u8 [a0 + 0x18]\n 22897: a4 = u8 [a0 + 0x1a]\n 22900: a5 = u8 [a0 + 0x1b]\n 22903: a1 = a1 << 0x8\n 22906: a1 = a1 | a3\n 22909: a4 = a4 << 0x10\n 22912: a5 = a5 << 0x18\n 22915: a4 = a4 | a5\n 22918: a1 = a1 | a4\n 22921: a3 = u8 [a0 + 0x1d]\n 22924: a4 = u8 [a0 + 0x1c]\n 22927: a5 = u8 [a0 + 0x1e]\n 22930: a2 = u8 [a0 + 0x1f]\n 22933: a3 = a3 << 0x8\n 22936: a3 = a3 | a4\n 22939: a5 = a5 << 0x10\n 22942: a2 = a2 << 0x18\n 22945: a2 = a2 | a5\n 22948: a2 = a2 | a3\n 22951: a2 = a2 << 0x20\n 22954: a3 = a2 | a1\n 22957: a1 = u8 [a0 + 0x9]\n 22960: a2 = u8 [a0 + 0x8]\n 22963: a4 = u8 [a0 + 0xa]\n 22966: a5 = u8 [a0 + 0xb]\n 22969: a1 = a1 << 0x8\n 22972: a1 = a1 | a2\n 22975: a4 = a4 << 0x10\n 22978: a5 = a5 << 0x18\n 22981: a4 = a4 | a5\n 22984: a1 = a1 | a4\n 22987: a2 = u8 [a0 + 0xd]\n 22990: a4 = u8 [a0 + 0xc]\n 22993: a5 = u8 [a0 + 0xe]\n 22996: a0 = u8 [a0 + 0xf]\n 22999: a2 = a2 << 0x8\n 23002: a2 = a2 | a4\n 23005: a5 = a5 << 0x10\n 23008: a0 = a0 << 0x18\n 23011: a0 = a0 | a5\n 23014: a0 = a0 | a2\n 23017: a0 = a0 << 0x20\n 23020: a0 = a0 | a1\n 23023: a4 = reverse a0\n 23025: a1 = reverse a3\n 23027: a2 = reverse t1\n 23029: a0 = reverse t0\n 23031: u64 [s1 + 0x78] = a0\n 23034: u64 [s1 + 0x68] = a2\n 23037: a0 = a0 | a2\n 23040: a2 = a1\n 23042: a1 = a1 | a4\n 23045: a1 = a1 | a0\n 23048: a1 = a1 >> 0x20\n 23051: u64 [s1 + 0x70] = a4\n 23054: a0 = a0 | a4\n 23057: a0 = a0 << 0x20\n 23060: a0 = a0 | a1\n 23063: jump @348 if a0 != 0\n      : @344 (gas: 5)\n 23067: u64 [s1 + 0x60] = a2\n 23070: i32 a0 = a2 + 0\n 23072: a1 = 0x20\n 23075: u64 [s1 + 0x58] = a0\n 23078: ra = 302, jump @0\n      : @345 [@dyn 151] (gas: 51)\n 23084: u8 [a0 + 31] = 0\n 23087: u8 [a0 + 30] = 0\n 23090: u8 [a0 + 29] = 0\n 23093: u8 [a0 + 28] = 0\n 23096: u8 [a0 + 27] = 0\n 23099: u8 [a0 + 26] = 0\n 23102: u8 [a0 + 25] = 0\n 23105: u8 [a0 + 24] = 0\n 23108: u8 [a0 + 23] = 0\n 23111: u8 [a0 + 22] = 0\n 23114: u8 [a0 + 21] = 0\n 23117: u8 [a0 + 20] = 0\n 23120: u8 [a0 + 19] = 0\n 23123: u8 [a0 + 18] = 0\n 23126: u8 [a0 + 17] = 0\n 23129: u8 [a0 + 16] = 0\n 23132: u8 [a0 + 15] = 0\n 23135: u8 [a0 + 14] = 0\n 23138: u8 [a0 + 13] = 0\n 23141: u8 [a0 + 12] = 0\n 23144: u8 [a0 + 11] = 0\n 23147: u8 [a0 + 10] = 0\n 23150: u8 [a0 + 9] = 0\n 23153: u8 [a0 + 8] = 0\n 23156: u8 [a0 + 7] = 0\n 23159: u8 [a0 + 6] = 0\n 23162: u8 [a0 + 5] = 0\n 23165: u8 [a0 + 4] = 0\n 23168: u8 [a0 + 3] = 0xa0\n 23173: u8 [a0 + 2] = 0x79\n 23177: u8 [a0 + 1] = 0xc3\n 23182: u8 [a0 + 0] = 0x8\n 23185: a1 = u64 [s1 + 0x60]\n 23188: a0 = a1 + 0x4\n 23191: a1 = a0 <u a1\n 23194: a3 = u64 [s1 + 0x78]\n 23197: a2 = a3 + a1\n 23200: a3 = a2 <u a3\n 23203: a3 = a1 if a1 == 0\n 23206: a1 = u64 [s1 + 0x70]\n 23209: a3 = a3 + a1\n 23212: a1 = a3 <u a1\n 23215: a4 = u64 [s1 + 0x68]\n 23218: a4 = a4 + a1\n 23221: u64 [s1 + 0xc8] = a2\n 23225: u64 [s1 + 0xc0] = a0\n 23229: u64 [s1 + 0xd0] = a3\n 23233: a0 = s1 + 0xe0\n 23237: a1 = s1 + 0xc0\n 23241: u64 [s1 + 0xd8] = a4\n 23245: ra = 304, jump @311\n      : @346 [@dyn 152] (gas: 5)\n 23251: a0 = u64 [s1 + 0xe8]\n 23255: t0 = u64 [s1 + 0xf8]\n 23259: t1 = u64 [s1 + 0xe0]\n 23263: a3 = u64 [s1 + 0xf0]\n 23267: fallthrough\n      : @347 (gas: 27)\n 23268: a1 = u64 [s1 + 0x78]\n 23271: a4 = a0 ^ a1\n 23274: a5 = a0 <u a1\n 23277: ra = a1\n 23279: t2 = u64 [s1 + 0x60]\n 23282: a1 = t1 <u t2\n 23285: a5 = a1 if a4 == 0\n 23288: a2 = u64 [s1 + 0x70]\n 23291: a4 = a3 - a2\n 23294: a3 = a3 <u a2\n 23297: a2 = u64 [s1 + 0x68]\n 23300: a2 = t0 - a2\n 23303: a2 = a2 - a3\n 23306: a3 = a4 <u a5\n 23309: a2 = a2 - a3\n 23312: a4 = a4 - a5\n 23315: a0 = a0 - ra\n 23318: a1 = a0 - a1\n 23321: a0 = t1 - t2\n 23324: a1 = a1 | a2\n 23327: a2 = a0 | a4\n 23330: a2 = a2 | a1\n 23333: a1 = a1 | a4\n 23336: a2 = a2 >> 0x20\n 23339: a1 = a1 << 0x20\n 23342: a1 = a1 | a2\n 23345: jump @353 if a1 == 0\n      : @348 (gas: 1)\n 23348: trap\n      : @349 (gas: 8)\n 23349: u64 [s1 + 304] = 0\n 23353: u64 [s1 + 296] = 0\n 23357: u64 [s1 + 288] = 0\n 23361: a0 = 0x4e487b7100000000\n 23371: a1 = s1 + 0x120\n 23375: u64 [s1 + 0x138] = a0\n 23379: a0 = 0\n 23381: ra = 306, jump @8\n      : @350 [@dyn 153] (gas: 7)\n 23387: u64 [s1 + 280] = 0\n 23391: u64 [s1 + 272] = 0\n 23395: u64 [s1 + 256] = 0x11\n 23400: a0 = 0x4\n 23403: a1 = s1 + 0x100\n 23407: u64 [s1 + 264] = 0\n 23411: ra = 308, jump @8\n      : @351 [@dyn 154] (gas: 3)\n 23417: a1 = 0x24\n 23420: a0 = 0\n 23422: ra = 310, jump @0\n      : @352 [@dyn 155] (gas: 5)\n 23428: i32 a1 = a0 + 0\n 23430: a0 = 0x1\n 23433: a2 = 0x24\n 23436: ecalli 13 // 'seal_return'\n 23438: fallthrough\n      : @353 (gas: 4)\n 23439: i32 a1 = a0 + 0\n 23441: u64 [s1 + 0x78] = a1\n 23444: a0 = u64 [s1 + 0x58]\n 23447: ra = 312, jump @0\n      : @354 [@dyn 156] (gas: 7)\n 23453: i32 a1 = a0 + 0\n 23455: a0 = 0x1\n 23458: a2 = u64 [s1 + 0x78]\n 23461: ecalli 13 // 'seal_return'\n 23463: a0 = 0\n 23465: ra = 0x13a\n 23469: jump @10\n      : @355 [export #0: 'call'] (gas: 2)\n 23472: a0 = 0\n 23474: ra = 314, jump @10\n      : @356 [@dyn 157] [export #1: 'deploy'] (gas: 2)\n 23480: a0 = 0x1\n 23483: ra = 316, jump @10\n      : @357 [@dyn 158] (gas: 93)\n 23489: sp = sp + 0xffffffffffffffb0\n 23492: u64 [sp + 0x48] = ra\n 23495: u64 [sp + 0x40] = s0\n 23498: s0 = sp + 0x50\n 23501: sp = sp & 0xfffffffffffffff0\n 23504: t0 = u64 [a0]\n 23506: t1 = u64 [a0 + 0x8]\n 23509: a4 = u64 [a0 + 0x10]\n 23512: a0 = u64 [a0 + 0x18]\n 23515: a5 = u64 [a1]\n 23517: a2 = u64 [a1 + 0x8]\n 23520: a3 = u64 [a1 + 0x10]\n 23523: a1 = u64 [a1 + 0x18]\n 23526: u64 [sp + 0x18] = a1\n 23529: u64 [sp + 0x10] = a3\n 23532: u64 [sp + 0x8] = a2\n 23535: u64 [sp] = a5\n 23537: u64 [sp + 0x38] = a0\n 23540: u64 [sp + 0x30] = a4\n 23543: u64 [sp + 0x28] = t1\n 23546: a0 = sp + 0x20\n 23549: a1 = sp\n 23551: u64 [sp + 0x20] = t0\n 23554: ra = 0x13e\n 23558: sp = sp + 0xffffffffffffff60\n 23562: u64 [sp + 0x98] = ra\n 23566: u64 [sp + 0x90] = s0\n 23570: u64 [sp + 0x88] = s1\n 23574: s0 = sp + 0xa0\n 23578: sp = sp & 0xffffffffffffffe0\n 23581: a2 = u64 [a1 + 0x18]\n 23584: a3 = u64 [a1 + 0x8]\n 23587: a4 = u64 [a1 + 0x10]\n 23590: a1 = u64 [a1]\n 23592: a2 = a2 | a3\n 23595: a1 = a1 | a4\n 23598: a1 = a1 | a2\n 23601: a1 = a1 >u 0\n 23603: u64 [sp + 0x18] = a1\n 23606: a3 = u64 [a0 + 0x18]\n 23609: u64 [sp] = a3\n 23611: a2 = u64 [a0 + 0x10]\n 23614: u64 [sp + 0x8] = a2\n 23617: a1 = u64 [a0 + 0x8]\n 23620: u64 [sp + 0x10] = a1\n 23623: s1 = u64 [a0]\n 23625: u64 [sp + 0x58] = a3\n 23628: u64 [sp + 0x50] = a2\n 23631: u64 [sp + 0x48] = a1\n 23634: u64 [sp + 0x40] = s1\n 23637: u64 [sp + 120] = 0\n 23640: u64 [sp + 112] = 0\n 23643: u64 [sp + 104] = 0\n 23646: u64 [sp + 96] = 0\n 23649: u32 [sp + 32] = 0x20\n 23653: i32 a1 = sp + 0x40\n 23656: i32 a3 = sp + 0x60\n 23659: i32 a4 = sp + 0x20\n 23662: a2 = 0xffffffffffffffff\n 23665: a0 = 0\n 23667: ecalli 8 // 'get_storage'\n 23669: a0 = u64 [sp + 0x60]\n 23672: a1 = u64 [sp + 0x68]\n 23675: a2 = u64 [sp + 0x78]\n 23678: a3 = u64 [sp + 0x70]\n 23681: a4 = u64 [sp + 0x18]\n 23684: a4 = a4 << 0x28\n 23687: a5 = 0xffff00ffffffffff\n 23697: a3 = a3 & a5\n 23700: a3 = a3 | a4\n 23703: a4 = u64 [sp]\n 23705: u64 [sp + 0x58] = a4\n 23708: a4 = u64 [sp + 0x8]\n 23711: u64 [sp + 0x50] = a4\n 23714: a4 = u64 [sp + 0x10]\n 23717: u64 [sp + 0x48] = a4\n 23720: u64 [sp + 0x40] = s1\n 23723: u64 [sp + 0x78] = a2\n 23726: u64 [sp + 0x70] = a3\n 23729: u64 [sp + 0x68] = a1\n 23732: u64 [sp + 0x60] = a0\n 23735: i32 a1 = sp + 0x40\n 23738: i32 a3 = sp + 0x60\n 23741: a2 = 0xffffffffffffffff\n 23744: a4 = 0x20\n 23747: a0 = 0\n 23749: ecalli 15 // 'set_storage'\n 23751: sp = s0 + 0xffffffffffffff60\n 23755: ra = u64 [sp + 0x98]\n 23759: s0 = u64 [sp + 0x90]\n 23763: s1 = u64 [sp + 0x88]\n 23767: sp = sp + 0xa0\n 23771: ret\n      : @358 [@dyn 159] (gas: 5)\n 23773: sp = s0 + 0xffffffffffffffb0\n 23776: ra = u64 [sp + 0x48]\n 23779: s0 = u64 [sp + 0x40]\n 23782: sp = sp + 0x50\n 23785: ret\n",
						"bytecode": {
							"object": "50564d00004d6b000000000000010700c15000c0004003407f018d4c76d505d54655adb8793e28ff0b11ef0d7d3f06917084f5476618d8e6519eca65a7b488ca35ee5b4d920cba8d02193214c0ee91dd73a19dd210f1a7f904810b110000000007000000110000001500000023000000310000003f00000045000000520000005d000000600000006d0000007d0000008d00000098000000aa000000b50000006164647265737362616c616e63655f6f6663616c6c63616c6c5f646174615f636f707963616c6c5f646174615f6c6f616463616c6c5f646174615f73697a6563616c6c65726465706f7369745f6576656e746765745f73746f726167656e6f777265665f74696d655f6c65667472657475726e5f646174615f636f707972657475726e5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f646174617365745f73746f7261676576616c75655f7472616e73666572726564051302c0b05b0463616c6cc0b85b066465706c6f7906c0cd69809f02c0eb5c65004d01520174017802a903be03e203ee030b04d704f20430055e057705a505d30501060806140629064d075a07eb071c093209020a0f0a9d0baa0b0c0c4d0c580c890da10dad0d56108711a711531260123b136c14821452155f150a16151646175e176a17dc170d193819a419b119721aa31bce1b3a1c471ccb1c5d1dea1d4a206c20ad215122bc22ca224f23e2236f2495252826b52668271429282a412a4c2a5b2acc2ae32aee2afd2aaf2bee2b032d1c2d272d362d832dec2dad2e402fcd2f7b311933263397338e34d235a536a63742394f39c039b73af93bcc3c403d843e2b3f4a3f8e403541544198423f435e43a2444945d145ef45fa450f46274636467d46f8468b4718483d49d0495d4a764b094c964c2c516d528d536054d4541856bf56de562258c958e8582c5ad35a5b5b795b845b9d5bb85bc15bdd5c8b791052093b3309010001ae9833c8780883881f8488e0553801000128390a400002ae8a123d084000023308500002c8870732003308500002c88707320000009511d87b10207b15187b161082897b19088289087b1982851082861883773308205010029f6f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832009511f07b10087b158475010a05013d0744000251050750100409501006a102951160ff7b1098007b1590007b1688009515a0008411e033074033082050100891fe46171f800046171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617034617024617014607491118490149110849111083170a1001821710821818821908821ad49808d4a707d487075207a7014911584911504911483306027b164049117849117049116849116048112020831840831a60831b203309ff33070a08821760821868821970821a78140bffffffffff00ffffd2b9094911584911504911487b16407b1a787b19707b18687b1760831840831a603309ff330b2033070a0f33074033082050100a8dfd7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f776fa66f986f29d49808d47609d48909989920d48707977720d49707510717003307330850100c5cfc837833070133090a0d0183666467330850100e47fc8377330833090a0301390848000251080d330750000383770a0e016467330850101023fc8378330733093300120a0d019511c07b10387b15307b16289515408411e0330740330820501014fafb46171f800046171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461703330644000246170246170146073908440002461706461705461704531804eb00831733080a040181171c58478de034c952330800b0dc295a47ceb0dc296051478ee034c9de0052472c17aedbbd00330016951160ff7b1098007b1590007b1688009515a0008411e04911384911304911284911208317200a10283b1551475bcba58d5951479b0eed9cf5005247255fb5b67850101874108388cf00aa87af00524701e437546433001a951100ff7b10f8007b15f000951500018411e04921d8004921d0004921c8004921c0008317c0000a1028950633001c951160ff7b1098007b1590007b1688009515a0008411e04911384911304911284911208317200a10288c0a8168015108a00033001e9511f87b103307330833002c288cfa330020951160ff7b1098007b1590007b1688009515a0008411e04911384911304911284911208317200a1028d711330022951160ff7b1098007b1590007b1688009515a0008411e04911384911304911284911208317200a1028a801330024951160ff7b1098007b1590007b1688009515a0008411e04911384911304911284911208317200a1028c90c3307501026fdf98378330733093300280a0d019511f07b10087b15647533074033082050102adcf97c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c780f97aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78117c7a107c7b127c7c13978808d4a80897bb1097cc18d4cb0bd4b8087c7a157c7b147c7c167c791797aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78197c79187c7b1a7c7c1b978808d4980897bb1097cc18d4cb0bd4b8087c791d7c7b1c7c7c1e7c771f979908d4b90997cc10977718d4c707d49707977720d487076f776fa86f396f2a7b5a187b59107b58087b57821008821595111032008378330701330933002e0a0d018289828808989a18978828d4a8089799287b791049170849077b78183200821730821838821928821a20d49808d4a707d487075207860139074400025417037d014911584911504911484911404911784911704911684911604821800020831840831a60831b80003309ff33070a088217787b178217707b17088217687b17108217607b17183307403308205010301af87c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f786fa76f996f2ad4a909d4870ad49a0a98aa20d49808978820d4a8085108170033073308501032e9f6837833070133090a0d0183763308206467501034d3f682186f888219086f99821a106faa821b186fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a9899087879097878988938787907988930787906988928787905988920787904988918787903988910787902988808787801330820646750103603f6837833092033073300380a0d01808910828a0882884917187b79107b7a087b7832009511807b10787b15707b1668951580008411e0828010828c08829a088283829b7b1b28829410d3ca02d8ca06d83b0b7b1b20da2b068282188298187b1818c90409c969087b1830d86908d8040b7b1238821918c92909c9b909c98909c9ca08821a20c9a808821a28c93a0a8e8b88aa4085aa01db8b0a8f968218308e8bdb960bd49808db8b0a510aea006476d403077b1c30821838d4c808d487079877207b1028d40808978820d487075207c5007b132083388317407b18080a0401821b50821a5814070000000001000000d37b08d4a80898b92088990194a99389510994007b1b107b1a18821828821938d498081407e0ffffff00000000821920d87907821930949794875107698217487b17308217407b17388217088378208317400a0401821758821850821940821a48d4780b889c0294ac94bc510c397b6a287b69208219307b69088219387b697b68308218107b68107b67388217187b6718955180821078821570821668951180003200003307330850103a68f48378330701330933003c0a0d01828918828a10828b0882887b79187b7a107b7b087b7832008217d0008218d8008219c800821ac000d49808d4a707d487075207a50138074400024911584911504911487b1740491178491170491160049517800095186095194049116850103e1dfe821280008213880082189000821a9800821ba000821ca8008219b0008217b8007b17187b19107b1c087b1b7b1a387b18307b132895172064187b12205010404e12330740330820501042adf37c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f786fa76f396f2ad4a909d4870ad49a0a98aa20d49808978820d4a80851081e00330733085010447cf2837833070133090a0d83773300462869f2837750104664f28378330733093300480a0d019511a07b10587b15507b16487b178283828008828b108288188292829a0882941882991098253d97a603d4650598aa3d979603d46a0a98993d974403d494069724038e698eacdb690c8e5788490001859401db5704d46a0adbac0446114746114646114546114446114346114246114146114046113f46113e46113d46113c46113b46113a46113946113846113746113646113546113446113346113246113146113046112f46112e46112d46112c46112b46112a461129461128781820781b1878101078130898873878172798873078172698872878172598872078172498871878172398871078172298880878182198b73878171f98b73078171e98b72878171d98b72078171c98b71878171b98b71078171a98bb08781b1998073878171798073078171698072878171598072078171498071878171398071078171298070878171198373878170f98373078170e98372878170d98372078170c98371878170b98371078170a98370878170984281f951708c878087c87097c89087c8a0a7c8b0b977708d4970797aa1097bb18d4ba0ad4a7077c890d7c8a0c7c8b0e7c8c0f979908d4a90997bb1097cc18d4cb0bd4b909979920d4790a7c87017c897c8b027c8c03977708d4970797bb1097cc18d4cb0bd4b7077c89057c8b047c8c067c8607979908d4b90997cc10976618d46c0cd4c909979920d497077c89117c8b107c8c127c8813979908d4b90997cc10978818d4c808d498089447944a944882194919187b98107b9a087b978210588215508216489511603200821730821838821928821a20d49808d4a707d487075207820139074400025417037901491158491150491148491140024911784911704911684911604821800020831840831a60831b80003309ff33070a088217707b17088217687b17108217607b171833074033082050104aafef7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f786fa76f996f2ad4a909d4870ad49a0a98aa20d49808978820d4a808510817003307330850104c7eee837833070133090a0d0182180897882098862083777b170833082050104e5eee6f688219106f99821a186faa98ab38787b1f98ab30787b1e98ab28787b1d98ab20787b1c98ab18787b1b98ab10787b1a98ab08787b19787a1878791046170b46170a4617094617074617064617054617044617034617024617014607989a38787a17989a30787a16989a28787a15989a20787a14989a18787a13989a10787a1298990878791178780898893878790f98893078790e98892878790d98882078780c330820821708501050b2ed837833092033073300520a0d019511a07b10587b15507b16489515608411e06476491118491110491108490101491138491130491128491120481140208318831a20831b403309ff33070a08821738821830821928821a207b67187b68107b69087b6a9551a08210588215508216489511603200821730821838821928821a20d49808d4a707d487075207870139074400025417037e01491158491150491148491140014911784911704911684911604821800020831840831a60831b80003309ff33070a088217787b178217707b17088217687b17108217607b1718330740330820501054caec7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f786fa76f996f2ad4a909d4870ad49a0a98aa20d49808978820d4a808510817003307330850105699eb837833070133090a0d018376330820646750105883eb82186f888219086f99821a106faa821b186fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a9899087879097878988938787907988930787906988928787905988920787904988918787903988910787902988808787801330820646750105ab3ea8378330920330733005c0a0d0132009511a07b10587b15509515608411e03907440002541723c8018317203308040a04821820821728821930821a387b1a187b19107b170864177b1833005e951160fd7b1098027b1590027b1688029515a0028411e064168278187b68788278107b68708278087b686082777b6768492618024926100249260802492600020249265802492650024926480249264002482620022083680002836a4002836b20023309ff33070a08284037330740330820501060f0e97c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f786fa76f396f2ad4a909d4870ad49a0a98aa20d49808978820d4a80851081e0033073308501062bfe8837833070133090a0d837733006428ace88377501064a7e88378330733093300660a0d017c884917184917104917087b783200821730821838821928821a20d49808d4a707d487075207760139074400025417036d01491158491150491148491140024911784911704911684911604821800020831840831a60831b80003309ff33070a088217707b171833074033082050106829e87c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f786fa76f996f2ad4a909d4870ad49a0a98aa20d49808978820d4a808510817003307330850106af8e6837833070133090a0d01140800000000ff000000821918d298088e887b18188376330820646750106ccde646171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460782181878781f330820646750106e61e6837833092033073300700a0d019511a07b10587b15507b16489515608411e06476491118491110491108490102491138491130491128491120481140208318831a20831b403309ff33070a087c17354916184916104916087b679551a08210588215508216489511603200821730821838821928821a20d49808d4a707d487075207760139074400025417036d01491158491150491148491140024911784911704911684911604821800020831840831a60831b80003309ff33070a088217707b171833074033082050107293e57c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f786fa76f996f2ad4a909d4870ad49a0a98aa20d49808978820d4a808510817003307330850107462e4837833070133090a0d0114080000000000ff0000821918d298088e887b18188376330820646750107637e446171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460782181878781f3308206467501078cbe38378330920330733007a0a0d01828918828a10828b0882887b79187b7a107b7b087b7832009511a07b10587b15507b1648828a18828b10828c088286d4ac08d4b609d48909989920d4b808978820d498087b1728520807029567207b1730d86707c87c087b18407b1c08d8c805da7705c8b5057b1b10d8b5077b1a18c8a7077b17387b16836733082033062050107c3ae378761f8218306486d45808821940821b38d4b909d498089888207b1520d45909979920d4980846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617034617024617014607520848018365330820645750107ea8e246171f0d46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701821820821938d498081409e0ffffff00000000d89609821a4094a9948946075109bb00835720330820502080001ce246171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c7246170b6546170a6e461709774617086f4617072046170665461705684617047446170320461702744617016f46074e8218958760d88708821a08c88a09d8a90ada880a821810c88a0ad88a08821b18c8b808821b287bb77bb9087bba107bb8188210588215508216489511603200009511a0fe7b1058017b1550017b164801951560018411e08289187b19408289107b19388289087b192882887b18188278187b18488278107b18308278087b182082777b17108317e0000a068217e8008218e0008119f0006f77987a206f86976820d4a8087b18589777206f98988820d487077b1750986620492118014921100149210801492100010249213801492130014921280149212001482140012083180001831a2001831b40013309ff33070a0801801730018218200182192801d36707821a50d3a808d48707821858d39808d487075207f7008217187b17608217107b1780008217287b17688217207b1788008217387b17708217307b1790008217407b1778951780009518608219487b199800330082009511e0fb7b1018047b1510047b160804951520048411e064168289187b69408289107b69308289087b693882887b68288278107b68508278087b684882777b6758836700020a09826700027b6778826708027b6770826710027b6768826718027b6760492698034926900349268803492680034926d8034926d0034926c8034926c0034826a0032083688003836ac003836ba0033309ff33070a082834109551a0fe821058018215500182164801951160013200330740330820502084009adf7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f766fa86f996f277b17587b1950d497076489d46808d47808988820d46707977720d48707520716017b194883973308207b17405020860059de46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703a00046170279461701c300460708821848958704d88708821a58c88a09d8a90ada880ac86a0ad86a08821b50c88b0b7b19a8007b17a0007b1ab0009517c0009518a0007b1bb8005020880014fa8217c8008212d8008213c000821ad000821858d3870bd8870c6484821948d89308dab80cc96a0bd86a0a821650c96206c9a606d8cb0ac9a606c9cb0bc94707c98708c99307d46808d4b709d48909d4b808989920978820d49808510804008376821740646850208a004add8378330701646933008c000a0d01828918828a10828b0882887b79187b7a107b7b087b7832009511a07b10587b15507b1648828a18828b10828c088286d4ac08d4b609d48909989920d4b808978820d498087b1728520816029567207b1730d86707c87c087b18407b1c08d8c805da7705c8b5057b1b10d8b5077b1a18c8a7077b17387b16836733082033062050208e00b7dc78761f8218306486d45808821940821b38d4b909d498089888207b1520d45909979920d4980846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460752085601836533082064575020900024dc46171f1846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701821820821938d498081409e0ffffff00000000d89609821a4094a9948946075109c8008357203308205020920097db46171f46171e46171d46171c46171b46171a461719461718461717644617166546171568461714634617136146171265461711724617102046170f7446170e65330c79787c0d46170c2046170b7446170a6f4617096e46170820461707654617066e461705694617046c4617036446170261461701654607448218958760d88708821a08c88a09d8a90ada880a821810c88a0ad88a08821b18c8b808821b287bb77bb9087bba107bb8188210588215508216489511603200009511a07b10587b15507b1648828a18828b10828c088286d4ac08d4b609d48909989920d4b808978820d498087b1728520810029567207b1730d86707c87c087b18407b1c08d8c805da7705c8b5057b1b10d8b5077b1a18c8a7077b17387b1683673308203306205020940071da78761f8218306486d45808821940821b38d4b909d498089888207b1520d45909979920d4980846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617034617024617014607520850018365330820645750209600ded946171f1446171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701821820821938d498081409e0ffffff00000000d89609821a4094a9948946075109c2008357203308205020980051d946171f46171e46171d46171c46171b46171a4617194617184617174617164617154617144617137746171261461711724617106446170f6846170e7446170d6946170c7746170b2046170a6f461709744617082046170773461706644617056e4617047546170366461702204617016f46074e8218958760d88708821a08c88a09d8a90ada880a821810c88a0ad88a08821b18c8b808821b287bb77bb9087bba107bb8188210588215508216489511603200007c78197c79187c7a1a7c7b1b978808d4980897aa1097bb18d4ba0ad4a8087c791d7c7a1c7c7b1e7c7c1f979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79117c7a107c7b127c7c13979908d4a90997bb1097cc18d4cb0bd4b9097c7a157c7b147c7c167c761797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a097c7b087c7c0a7c760b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b0d7c7c0c7c760e7c780f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78017c7b7c7c027c7603978808d4b80897cc10976618d46c0cd4c8087c7b057c7c047c76067c770797bb08d4cb0b976610977718d46707d4b707977720d487076f736fa46f966f2c82181895871fd88708821a20c88a09d8a90ada880a821828c88a0ad88a08821b30c8b8088477e0c8c7077b1c287b1710d8c70bc86909c8b90cd36c097b1630d86c07da9b07c84a0ac87a0bd8ab06d84a09c83808c89808c886068eb88e69da6809d46b087b1c088ecadb890a520a2401d84b08d33609d8360ada980ad34b08d49808db8a0752070b013307403308207b14207b13187b1b50209c00f2d66f6882196f99821a086faa821b106fbb787b1898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b19787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790978789889387879079889307879069889287879059889207879049889187879039889107879029888087878018217388218287b788218187b78188218307b78088218207b7810955160ff8210980082159000821688009511a0003200491170491168491160140700000000717b484e9518607b1778330750209e001ed6491158491150491140413307049518404911485020a00005d633082433075020a200bad583783307013309243300a4000a0d01828a18828b10828908d4ba0a889b0194ab510b308288958a1fd88a08c8980884880184aae095a920d8a90ac8a80bd88b08daaa084917187b797b7b087b781032009511b07b10487b15409515508411f0491130491128491120140700000000717b484e9518207b173833075020a6007ad549111849111049014133070464184911085020a80063d533082433075020aa0018d583783307013309243300ac000a0d01951120ff7b10d8007b15d0007b16c8009515e0008411f0828a18828910828b087b19107b1a08d4a90988ba01949a7b1738510ab401828695671fd867087b1b18c8b8088488018477e0957920d87907c8780ad88a0bda770b492198007b1980007b1a88009517a000951880007b1b90003300ae00951160ff7b1098007b1590007b1688009515a0008411f08289187b19308289107b19288289087b192082887b18187b173833074033082033009a002854d48217b8008219b0008218a800821aa0007b17287b1820d48707d49a08d478089888207b1930d49707977720d487075207040183a73308207b1a5020b00018d48218086f888219106f99821a186faa6f6b98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a989908787909787898893878790798893078790698892878790598892078790498891878790398891078790298880878780182173882187b788218287b78188218207b78088218307b7810955120ff8210d8008215d0008216c8009511e000320000491170491168491160140700000000717b484e9518607b177833075020b20043d3491158491150491140413307049518404911485020b4002ad333082433075020b600dfd283783307013309243300b8000a0d014917184917104917083308607b783200951160ff7b1098007b1590007b1688009515a0008411e064760a0c015107b3007b16200a0c4911584911507b17409517609518404911485020ba0080fd8217787b17388217707b17308217687b17288216600a0c019568207b1618d86809821b28c89b0ad8ba0bda990b821930c89b0bd89b09821c38c8c909d4b80cd4a909d49c0c98cc20d4b909979920d4c9095209406476987720520738838783687b18105020bc001ad27a16800083778318800033090a0b0181178000821620821838821930821a28821b18821c10aec70e00330a33093308330b60017b6b7b6a087b69107b6818955160ff8210980082159000821688009511a00032009511a07b10587b15507b1648828a18828b10828c088286d4ac08d4b609d48909989920d4b808978820d498087b172852080b029567207b1730d86707c87c087b18407b1c08d8c805da7705c8b5057b1b10d8b5077b1a18c8a7077b17387b1683673308203306205020be0059d178761f8218306486d45808821940821b38d4b909d498089888207b1520d45909979920d4980846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460752084b01836533082064575020c000c6d046171f0f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701821820821938d498081409e0ffffff00000000d89609821a4094a9948946075109bd008357203308205020c20039d046171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e6446170d6546170c6c46170b6946170a614617096646170820461707774617066146170572461704644617036846170274461701694607578218958760d88708821a08c88a09d8a90ada880a821810c88a0ad88a08821b18c8b808821b287bb77bb9087bba107bb8188210588215508216489511603200008267d8038262c0038269d003826ac803826860d3780bd87808826768d8970cdbb80c826870d3a803d8a80a826878d82808db3a08d39707d4b707db7c085208860e836720020a8267280282682002816930027b6748027b6840027a6950029517e08477e07b677864718378836740020a0101826878828910828a1882870882887b67687b6a60d4a7077b68787b6970d49808d487075107240c49269803492690034926880349268003024926d8034926d0034926c8034926c0034826a0032083688003836ac003836ba0033309ff33070a08017c67d5035207e20b826730826828d48707826840826938d49808d48707510751053307403308205020c4008bce7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f777b67406fa77b67286f377b67386f277b67300a0a017b67208267486f779778208269506f99989920d498088269586f99979a20987720d4a7077b6708039899207a6910038269287b680003826738826830d48707826a40d4a908d47808d4a707988820977720d487078268607b6838038268707b6830038268687b6828038268787b682003510706289e12839733085020c600edcc7b6758330733085020c800e0cc482640038269208e98fc089a897b6978037b6970037b6968037b69600395690003979920989920978823d498029568200397882098882095696003979920d4890a826b5897bb2098bb2097772098772095684003978820d4780c3308ff3309ff64270a027b67589567e0015020ca00b5f98267585207ae0d49269803492690034926880349268003024926d8034926d0034926c8034926c0034826a0032083688003836ac003836ba0033309ff33070a088267c0038268c8038269d003826ad803140bffffffffff00ffffd2b909140b0000000000010000d4b90949269803492690034926880349268003027b6ad8037b69d0037b68c8037b67c00383688003836ac0033309ff330b2033070a0f49269803492690034926880349268003024926d8034926d0034926c8034926c0034826a0032083688003836ac003836ba0033309ff33070a088267d0037b67488267c8037b67508267c0037b67583307403308205020cc0078cb7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f786fa76f396f2ad4a909d4870ad49a0a98aa20d49808978820d4a80851080628f50f8268489788209888207b684883777b67403308205020ce0034ca8268606f888269706f99826a686faa826b786fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790978789889387879079889307879069889287879059889207879049889187879039889107879029888087878013308208267405020d00061c93a080000023a090800023a0a1000023a0b180002282806492698034926900349268803492680034926d8034926d0034926c8034926c0034826a0032083688003836ac003836ba0033309ff33070a0801826ad8038268d0038269c8038264c00395a20188acff888bffdb2c0b884280aefe959301889cffda320cd2a807957701db7b0c510c830e95478051017b6740d84707c8790b7b6b38d89b09da7709c889097b6928d88907c8a7077b6730836760020a090182647002826878028269680282626002826728d8470b826c30d38c0ad88c08daab08826b40d82b02826b38d39b03d89b09da3209d34707d4a707db780951096f0e3307403308205020d20060c87c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f777b67406fa77b67286f377b67386f277b67300a0a017b67208267486f779778208269506f99989920d498088269586f99979a20987720d4a7077b6788029899207a6990028269287b688002826738826830d48707826a40d4a908d47808d4a707988820977720d487078268607b68b8028268707b68b0028268687b68a8028268787b68a0025207760c839733085020d400c4c67b6758330733085020d600b7c64826c0028269208e98fc089a897b69f8027b69f0027b69e8027b69e00295698002979920989920978823d498029568a0029788209888209569e002979920d4890a826b5897bb2098bb209777209877209568c002978820d4780c3308ff3309ff64270a027b6758956780015020d8008cf382675852078f0949269803492690034926880349268003024926d8034926d0034926c8034926c0034826a0032083688003836ac003836ba0033309ff33070a088267c0038268c8038269d003826ad803140bffffffffff00ffffd2b909140b0000000000010000d4b90949269803492690034926880349268003027b6ad8037b69d0037b68c8037b67c00383688003836ac0033309ff330b2033070a0f49269803492690034926880349268003024926d8034926d0034926c8034926c0034826a0032083688003836ac003836ba0033309ff33070a088267d0037b67488267c8037b67508267c0037b67583307403308205020da004fc57c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f786fa76f396f2ad4a909d4870ad49a0a98aa20d49808978820d4a8085208cf098268489788209888207b684883777b67403308205020dc000dc48268606f888269706f99826a686faa826b786fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790978789889387879079889307879069889287879059889207879049889187879039889107879029888087878013308208267405020de003ac33a080000023a090800023a0a1000023a0b180002017b68d8037b69d0037b6ac8037b6bc0038268486f888269506f99826a586faa7b6af8037b69f0037b68e8034926e00383798367c003330802330a200a079551e0fb8210180482151004821608049511200432003307403308205020e000c6c27c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f7b6fa86f396f277b67787b6968d497076489d4b808d478089888207b6b70d4b707977720d4870752073b077b696083973308207b67585020e20082c146171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703a00046170279461701c300460708826860958704d88708826a78c88a09d8a90ada880a826870c88a0ad88a08826b68c88b0b7b69c8007b67c0007b6ad0009567e0009568c0007b6bd8005020e40003e68267e8008262f8008263e000826af000281f063307403308205020e600bcc07c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f7b6fa86f396f277b67787b6968d497076489d4b808d478089888207b6b70d4b707977720d48707520731057b696083973308207b67585020e80078bf46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703a00046170279461701c300460708826860958704d88708826a78c88a09d8a90ada880a826870c88a0ad88a08826b68c88b0b7b6988007b6780007b6a90009567a000956880007b6b98005020ea00b3e18267a8008262b8008263a000826ab0002815043307403308205020ec00b2be7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f7b6fa86f396f277b67787b6968d497076489d4b808d478089888207b6b70d4b707977720d48707520727037b696083973308207b67585020ee006ebd46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703a00046170279461701c300460708826860958704d88708826a78c88a09d8a90ada880a826870c88a0ad88a08826b68c88b0b7b69a8017b67a0017b6ab0019567c0019568a0017b6bb8015020f00007eb8267c8018262d8018263c001826ad001280b023307403308205020f200a8bc7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f7b6fa86f396f277b67787b6968d497076489d4b808d478089888207b6b70d4b707977720d4870752071d017b696083973308207b67585020f40064bb46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703a00046170279461701c300460708826860958704d88708826a78c88a09d8a90ada880a826870c88a0ad88a08826b68c88b0b7b6948017b6740017b6a500195676001956840017b6b58015020f600fde8826768018262780182636001826a700101826878d3870bd8870c6480826460d84308dab80c826970c99a0bd89a0a826968c99209c9a909d8cb0ac9a909c9cb0bc90707c98708c94307d49808d4b709d48909d4b808989920978820d4980851087200492630014926280149262001140700000000717b484e956820017b67380133075020f80075ba4926180149261001492600011133070495680001492608015020fa0057ba33082433075020fc000cba83783307013309240a0d01330733085020fe00f7b9837833070133090a0d0183787b687882675850200001dfb98378330701826978330002010a0d019511b07b10487b15409515508411f08272827308827b10827718828c828908828a108288187b18187b1a107b19087b1c7b17387b1b307b132895172064187b1220502004011fd89551b082104882154095115032009511a07b10587b15507b1648828a18828b10828c088286d4ac08d4b609d48909989920d4b808978820d498087b1728520815029567207b1730d86707c87c087b18407b1c08d8c805da7705c8b5057b1b10d8b5077b1a18c8a7077b17387b168367330820330620502006010eb978761f8218306486d45808821940821b38d4b909d498089888207b1520d45909979920d4980846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a46170946170846170746170646170546170446170346170246170146075208550183653308206457502008017bb846171f1746171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701821820821938d498081409e0ffffff00000000d89609821a4094a9948946075109c70083572033082050200a01eeb746171f46171e46171d46171c46171b46171a4617194617184617174617166446171565461714644617136e46171275461711664617102046170f7946170e6446170d6146170c6546170b7246170a6c461709614617082046170774330c63787c064617056146170472461703744617026e4617016f4607438218958760d88708821a08c88a09d8a90ada880a821810c88a0ad88a08821b18c8b808821b287bb77bb9087bba107bb8188210588215508216489511603200009511a07b10587b15507b1648828a18828b10828c088286d4ac08d4b609d48909989920d4b808978820d498087b1728520809029567207b1730d86707c87c087b18407b1c08d8c805da7705c8b5057b1b10d8b5077b1a18c8a7077b17387b16836733082033062050200c01c9b678761f8218306486d45808821940821b38d4b909d498089888207b1520d45909979920d4980846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617034617024617014607520849018365330820645750200e0136b646171f0d46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701821820821938d498081409e0ffffff00000000d89609821a4094a9948946075109bb0083572033082050201001a9b546171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c4846170b5446170a4546170920461708644617076e46170665461705734617042046170374461702734617017546074d8218958760d88708821a08c88a09d8a90ada880a821810c88a0ad88a08821b18c8b808821b287bb77bb9087bba107bb8188210588215508216489511603200009511a07b10587b15507b1648828a18828b10828c088286d4ac08d4b609d48909989920d4b808978820d498087b172852080e029567207b1730d86707c87c087b18407b1c08d8c805da7705c8b5057b1b10d8b5077b1a18c8a7077b17387b1683673308203306205020120190b478761f8218306486d45808821940821b38d4b909d498089888207b1520d45909979920d4980846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460752084e018365330820645750201401fdb346171f1046171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701821820821938d498081409e0ffffff00000000d89609821a4094a9948946075109c0008357203308205020160170b346171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f6e46170e6f46170d6946170c7446170b6146170a724617097546170864330c20787c0746170664461705694617046c46170361461702764617016e4607498218958760d88708821a08c88a09d8a90ada880a821810c88a0ad88a08821b18c8b808821b287bb77bb9087bba107bb8188210588215508216489511603200007c67540252077d079517e08477e07b67586471491718491710491708490783770a1001826a5882a71082a81882a90882aad49808d4a707d4870751075109826770826868d48707826878826960d49808d487075107420b836780010a068267880181689001826980016f77977a206f88988820d4a8087b68589877206f98978920d497077b67509888207b6848492618024926100249260802492600020249265802492650024926480249264002482620022083680002836a4002836b20023309ff33070a088067540297772082685802826948d4970749261802492610024926080249260002027b6858027b6750028267507b6748028267587b67400283680002836a40023309ff330b2033070a0f8367a0010a098267a0017b67588267a8017b67508267b0017b67488267b8017b6740492618024926100249260802492600020149265802492650024926480249264002482620022083680002836a4002836b20023309ff33070a0849261802492610024926080249260002018267407b6758028267487b6750028267507b6748028267587b67400283680002836a40023309ff330b2033070a0f8367c0010a0901826bc8018269c0018262d8018264d001826c60c8bc0c826868c898087b6868d8980ac8ac0cd3bc037b6c60d8bc0b826c70c84c0c826878c82808d84c09c8980864a9db3b09c89c07d8c709c8980c85a80185b901db3908d84709d32c0a7b6c70d82c0bdaa90b7b6778d34707d4a70785b901db79085108c80b4926180249261002492608024926000249265802492650024926480249264002482620022083680002836a4002836b20023309ff33070a08492618024926100249260802492600028267707b6758028267787b6750028267607b6748028267687b67400283680002836a40023309ff330b2033070a0f492618024926100249260802492600020249265802492650024926480249264002482620022083680002836a4002836b20023309ff33070a08826740028268480282695002826a5802140bffffffff00ffffffd2b909140b0000000001000000d4b90949261802492610024926080249260002027b6a58027b6950027b6848027b67400283680002836a40023309ff330b2033070a0f8367e0010a068067f0017b67308267e8017b67288267e0017b67789517e08477e07b67706471491718491710491708490783770a108268708287187b67508287107b67588287087b676082877b67684926180249261002492608024926000249265802492650024926480249264002482620022083680002836a4002836b20023309ff33070a08826758027b6708826750027b6710826748027b6718826740027b672033074033082050201801daae7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f7b6fa96f386f277b67487b6838d48707d4b908d478089888207b6b40d4b707977720d487075207db0883973308207b67707b6950201a0199ad8268506f888269586f99826a606faa826b686fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a9899087879097878988938787907988930787906988928787905988920787904988918787903988910787902988808826940826a38d4a909140ae0ffffff00000000826bd8ab0a826b4894ba949a787801510ae1078267286f779778208269306f99989920d498087b68688268786f88978820987720d487077b676082677083772033082050201c0179ac8268086f888269106f99826a186faa826b206fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a989908787909787898893878790798893078790698892878790598892078790498891878790398891078790298880878780133084082677050201e01a6ab3a082000023a092800023a0a3000023a0b3800027b6858027b6950027b6a48027b6b40028268606f888269686f99826a7897aa207b6978027b6870027b6a680249266002837983674002330802330a400a07955160fd8210980282159002821688029511a00232003307403308205020200132ab7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f7b6fa86f396f277b67787b6968d497076489d4b808d478089888207b6b70d4b707977720d48707520731057b696083973308207b675850202201eea946171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703a00046170279461701c300460708826860958704d88708826a78c88a09d8a90ada880a826870c88a0ad88a08826b68c88b0b7b6948017b6740017b6a500195676001956840017b6b580150202401d2ef826768018262780182636001826a70012815043307403308205020260128a97c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f7b6fa86f396f277b67787b6968d497076489d4b808d478089888207b6b70d4b707977720d48707520727037b696083973308207b675850202801e4a746171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703a00046170279461701c300460708826860958704d88708826a78c88a09d8a90ada880a826870c88a0ad88a08826b68c88b0b7b6988007b6780007b6a90009567a000956880007b6b980050202a010df08267a8008262b8008263a000826ab000280b0233074033082050202c011ea77c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f7b6fa86f396f277b67787b6968d497076489d4b808d478089888207b6b70d4b707977720d4870752071d017b696083973308207b675850202e01daa546171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703a00046170279461701c300460708826860958704d88708826a78c88a09d8a90ada880a826870c88a0ad88a08826b68c88b0b7b69c8007b67c0007b6ad0009567e0009568c0007b6bd800502030013cf08267e8008262f8008263e000826af00001826878d3870bd8870c6480826460d84308dab80c826970c99a0bd89a0a826968c99209c9a909d8cb0ac9a909c9cb0bc90707c98708c94307d49808d4b709d48909d4b808989920978820d4980851085e00492630014926280149262001140700000000717b484e956820017b673801330750203201eba449261801492610014926000111330704956800014926080150203401cda433082433075020360182a483783307013309240a0d0183787b68788267585020380169a483783307018269780a0d330733003a012886a5330750203a0181a533070150203c0178a59511b07b10487b15409515508411f08272827308827b10827718828c828908828a108288187b18187b1a107b19087b1c7b17387b1b307b132895172064187b122033003e01951160ff7b1098007b1590007b1688009515a0008411e0828918828a08828b108288d4a909d4b808d498088e887b1818827a187b1a8279107b19088278087b181082767b1a587b19507b18487b164049117849117049116849116048112020831840831a60831b203309ff33070a08821760821868821978821a70821b1897bb28140cffffffffff00ffffd2ca0ad4ba0a821b7b1b58821b087b1b50821b107b1b487b16407b19787b1a707b18687b1760831840831a603309ff330b2033070a0f955160ff8210980082159000821688009511a00032009551b0821048821540951150320049489220248414d249525252a22a2529499224499224499224499224499224499224499224494a4a432244444492109224499224499224499224292535494922499224912495240124499224492a094992244992244992a4244992244992244992244992244992244992244992244992aa244992154aad42d590502b54699224490849922449922449922409492149a82610040202121111499294404020440412119188882889888824494a23a99244444492242511119124494944442449520a559a541252922449922449922449922449922449922449922449922449922449922449922455494aa9949624494a499224424892240949a45292244948922449922449922425499224499224499224499224499224499224499224499254254992ac506a29544a29499224499224499224499224499224495292244992242994d2a42495249124952449922449922449929294924449922449a4a44900495291240920492549923449924a92a4244992245aa1942629494544248990244944921011111191a4242921094992244992244992a4244992244992244992244992244992244992244992244992aa244992154a9514aa34492a4949922449924a91244992244992244992244992244992244992244992244992244992244992244992244992244992244992244992942449922449922449922449559292a4244912212489240949a4922449429224499224499224294992244992244992244992244992244992244992244992a42a4992648552939484524a9224499224499224494a92244992244992244928a549929424491225a924495292a4244912212489240949a45292244948922449922449922425499224499224499224499224499224499224499224499254254992ac506a29544a29499224499224499224499224499224495292244992242994d2922421242549924a4444a424494a448488881011a92421499224499224499294244992244992244992244992244992244992244992244952952449b242a992429596a4922449849024922424914a929024499224499224494a9224499224499224499224499224499224499224499224a94a922459a1d40092520a499224499224499224499294a4504a9324294992244a52495292a4244912212489240949a49224244992244992244992922449922449922449922449922449922449922449922449aa92244956283580a494429224499224499224499224252994d22425a924495292244924499224495249484a9224499224499224499224499224294a2192244992244992244992244912405245122449922449922489888888888848499224495292246944442449929224498922a294242549448488881011a91191244922492489249144121111112949929224258a442291888888881011a9444444499024499224499224494a9224499224499224499224499224499224499224499224a94a52922491922049922449922449922449428424499224898888082222929424499224499224c952508a2629492549929224492249922449924a82a4244992244992244992244992244992a214449224499224499224499224490248aa488224499288888888882422222222222225499224494992a44992a42449924892244992a49220294992244992244992244992244992a428059124499224499224499224499200922a9220499224492222222222222222222225499224494992a4499224499224499224499224499224499224499224499224494a92244992244992aa24499224499224499224492a4989244912495250a59424499224499224499224499224499224294992244992a424492222a2240124054924095250124d929492244992949424491240529024254841493422229224494a942449922422222222222249929424918888244992244a414aa924499224499224499224499224499224494992244992a49224898888260920294822499082926892544444a4464a92244892244d92244992244992924a10458d2449b2ca924444444992a42449924892244992a49220294992244992244992244992244992a428059124499224499224499224499200922a92204992244992241111111111111129499224494a92248d8848922449922411232222925434494a9224111121222244446a449224892448922449922449922425499224499224499224499224499224499224499224499294524a9392929424128924499224914824920a5241248a88882489249224492449258244448488881011a98888001240222244444424151121222244442a128924419224499224499224294992244992244992244992244992244992244992244992a42a499224495212a4945292244992244992244992244992244992a42449922449922084101211111111222235222249429224119224499244232292244992244924419224499224499224294992244992244992244992244992244992244992244992a494529a9494a4249148244992248944221115a4824814111149124924499248924a04898808111121225211110124804444888888482a224244448888542412498224499224499224495292244992244992244992244992244992244992244992244955922489242909524a2949922449922449922449922449922449529224499224491042082322524a11114552444494044992244992244992a4244992244992244992244992244992244992244992244992aa24254992484990244992244992244992242142922449922422222288884812244992244992244992922449922449922449922449922449922449922449922449aa929424492225419224499224499224499284084992244992888888202222499024499224499224494a9224499224499224499224499224499224499224499224a94a529224899404499224499224499224491222244992244922222282888824419224499224499224294992244992244992244992244992244992244992244992a42a4949922452122449922449922449922449889024499224898888082222262949922449922449928c8800220a224222821494b482524b82926892a424254952929420494a9224254992449224499224950449499224499224499224499224499224452988244992244992244992244992049054910449922489888888888888884822222225499224494992a44992a42449924892244992a49220294992244992244992244992244992a428059124499224499224499224499200922a9220499224499224494444444444444a92244992922449932449499224912449922449254152922449922449922449922449922449510a224992244992244992244992240124552441922449922449444444441211119192244992a42449d2882425a9264949224992441411a5242949121121222244442a1249448488442222a9281289442222444484884845444824128988a4a2111149922449922425499224499224222222224244a422221289442222a98808111121225211110124804444888888482a8a4422494a522549921211111111222215894422499024499224499224494a9224499224499224499224499224499224499224499224a94a922449a2a420a59492244992244992244992244992244992242549922449920450528994942425499220a59492244992244992244992244992244992242549922449920421841011915212115124454444499024499224499224494a9224499224499224499224499224499224499224499224a94a529224899404499224499224499224491222244992244922222282888824419224499224499224294992244992244992244992244992244992244992244992a42a494992245212244992244992244992244988902449922489888808222292044992244992244992a4244992244992244992244992244992244992244992244992aa242549924849902449922449922449922421429224499224222222888898a424499224499224493222028828880889085250d292a0a422050992242529499292a44444442449494a4a9292244922492a499200929224499224a9888828490200"
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {
							"deadline()": "29dcb0cf",
							"deposit(uint256)": "b6b55f25",
							"initialTime()": "9ced0e9b",
							"isContractFunded()": "c934e08e",
							"isWithdraw()": "dbae172c",
							"owner()": "8da5cb5b",
							"withdraw(address,bool)": "5437e401"
						}
					},
					"irOptimized": "/// @use-src 0:\"contracts/SwappyBox/SwappBox.sol\"\nobject \"Box_213\" {\n    code {\n        {\n            /// @src 0:72:1871  \"contract Box {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            constructor_Box()\n            let _1 := allocate_unbounded()\n            codecopy(_1, dataoffset(\"Box_213_deployed\"), datasize(\"Box_213_deployed\"))\n            return(_1, datasize(\"Box_213_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n        function shift_left(value) -> newValue\n        { newValue := shl(168, value) }\n        function update_byte_slice_shift(value, toInsert) -> result\n        {\n            let mask := shl(168, 255)\n            toInsert := shift_left(toInsert)\n            value := and(value, not(mask))\n            result := or(value, and(toInsert, mask))\n        }\n        function cleanup_bool(value) -> cleaned\n        {\n            cleaned := iszero(iszero(value))\n        }\n        function convert_bool_to_bool(value) -> converted\n        {\n            converted := cleanup_bool(value)\n        }\n        function prepare_store_bool(value) -> ret\n        { ret := value }\n        function update_storage_value_offset_bool_to_bool(slot, value)\n        {\n            let convertedValue := convert_bool_to_bool(value)\n            sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_bool(convertedValue)))\n        }\n        function constructor_Box()\n        {\n            /// @src 0:245:250  \"false\"\n            let expr := 0x00\n            update_storage_value_offset_bool_to_bool(0x02, expr)\n        }\n    }\n    /// @use-src 0:\"contracts/SwappyBox/SwappBox.sol\"\n    object \"Box_213_deployed\" {\n        code {\n            {\n                /// @src 0:72:1871  \"contract Box {...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let selector := shift_right_224_unsigned(calldataload(0))\n                    switch selector\n                    case 0x29dcb0cf { external_fun_deadline() }\n                    case 0x5437e401 { external_fun_withdraw() }\n                    case 0x8da5cb5b { external_fun_owner() }\n                    case 0x9ced0e9b { external_fun_initialTime() }\n                    case 0xb6b55f25 { external_fun_deposit() }\n                    case 0xc934e08e {\n                        external_fun_isContractFunded()\n                    }\n                    case 0xdbae172c { external_fun_isWithdraw() }\n                    default { }\n                }\n                if iszero(calldatasize()) { stop() }\n                revert_error_d228b4ceac16d8e91d6dc7ca8d4a5394f524b2e550555324088cb23b86b87b98()\n            }\n            function shift_right_224_unsigned(value) -> newValue\n            { newValue := shr(224, value) }\n            function allocate_unbounded() -> memPtr\n            { memPtr := mload(64) }\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            { revert(0, 0) }\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            { revert(0, 0) }\n            function abi_decode(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function shift_right_unsigned_dynamic(bits, value) -> newValue\n            { newValue := shr(bits, value) }\n            function cleanup_from_storage_uint256(value) -> cleaned\n            { cleaned := value }\n            function extract_from_storage_value_dynamict_uint256(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_uint256(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_uint256(sload(slot), offset)\n            }\n            /// @ast-id 3 @src 0:91:114  \"uint256 public deadline\"\n            function getter_fun_deadline() -> ret\n            {\n                let slot := 0\n                let offset := 0\n                ret := read_from_storage_split_dynamic_uint256(slot, offset)\n            }\n            /// @src 0:72:1871  \"contract Box {...\"\n            function cleanup_uint256(value) -> cleaned\n            { cleaned := value }\n            function abi_encode_uint256_to_uint256(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function abi_encode_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_uint256_to_uint256(value0, add(headStart, 0))\n            }\n            function external_fun_deadline()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_deadline()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function cleanup_uint160(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function cleanup_address(value) -> cleaned\n            {\n                cleaned := cleanup_uint160(value)\n            }\n            function validator_revert_address(value)\n            {\n                if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n            }\n            function abi_decode_address(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_address(value)\n            }\n            function cleanup_bool(value) -> cleaned\n            {\n                cleaned := iszero(iszero(value))\n            }\n            function validator_revert_bool(value)\n            {\n                if iszero(eq(value, cleanup_bool(value))) { revert(0, 0) }\n            }\n            function abi_decode_bool(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_bool(value)\n            }\n            function abi_decode_addresst_bool(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_bool(add(headStart, offset_1), dataEnd)\n            }\n            function abi_encode_tuple(headStart) -> tail\n            { tail := add(headStart, 0) }\n            function external_fun_withdraw()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_addresst_bool(4, calldatasize())\n                fun_withdraw(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function cleanup_from_storage_address_payable(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function extract_from_storage_value_dynamict_address_payable(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_address_payable(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_address_payable(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_address_payable(sload(slot), offset)\n            }\n            /// @ast-id 7 @src 0:152:180  \"address payable public owner\"\n            function getter_fun_owner() -> ret\n            {\n                let slot := 2\n                let offset := 0\n                ret := read_from_storage_split_dynamic_address_payable(slot, offset)\n            }\n            /// @src 0:72:1871  \"contract Box {...\"\n            function cleanup_address_payable(value) -> cleaned\n            {\n                cleaned := cleanup_uint160(value)\n            }\n            function abi_encode_address_payable_to_address_payable(value, pos)\n            {\n                mstore(pos, cleanup_address_payable(value))\n            }\n            function abi_encode_address_payable(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_address_payable_to_address_payable(value0, add(headStart, 0))\n            }\n            function external_fun_owner()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_owner()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_address_payable(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            /// @ast-id 5 @src 0:120:146  \"uint256 public initialTime\"\n            function getter_fun_initialTime() -> ret\n            {\n                let slot := 1\n                let offset := 0\n                ret := read_from_storage_split_dynamic_uint256(slot, offset)\n            }\n            /// @src 0:72:1871  \"contract Box {...\"\n            function external_fun_initialTime()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_initialTime()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function validator_revert_uint256(value)\n            {\n                if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n            }\n            function abi_decode_uint256(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_uint256(value)\n            }\n            function abi_decode_tuple_uint256(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n            }\n            function external_fun_deposit()\n            {\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                fun_deposit(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function cleanup_from_storage_bool(value) -> cleaned\n            { cleaned := and(value, 0xff) }\n            function extract_from_storage_value_dynamict_bool(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_bool(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_bool(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_bool(sload(slot), offset)\n            }\n            /// @ast-id 9 @src 0:186:214  \"bool public isContractFunded\"\n            function getter_fun_isContractFunded() -> ret\n            {\n                let slot := 2\n                let offset := 20\n                ret := read_from_storage_split_dynamic_bool(slot, offset)\n            }\n            /// @src 0:72:1871  \"contract Box {...\"\n            function abi_encode_bool_to_bool(value, pos)\n            {\n                mstore(pos, cleanup_bool(value))\n            }\n            function abi_encode_bool(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_bool_to_bool(value0, add(headStart, 0))\n            }\n            function external_fun_isContractFunded()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_isContractFunded()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_bool(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            /// @ast-id 12 @src 0:220:250  \"bool public isWithdraw = false\"\n            function getter_fun_isWithdraw() -> ret\n            {\n                let slot := 2\n                let offset := 21\n                ret := read_from_storage_split_dynamic_bool(slot, offset)\n            }\n            /// @src 0:72:1871  \"contract Box {...\"\n            function external_fun_isWithdraw()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_isWithdraw()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_bool(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_d228b4ceac16d8e91d6dc7ca8d4a5394f524b2e550555324088cb23b86b87b98()\n            { revert(0, 0) }\n            function shift_right_0_unsigned(value) -> newValue\n            { newValue := shr(0, value) }\n            function extract_from_storage_value_offset_address_payable(slot_value) -> value\n            {\n                value := cleanup_from_storage_address_payable(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_address_payable(slot) -> value\n            {\n                value := extract_from_storage_value_offset_address_payable(sload(slot))\n            }\n            function identity(value) -> ret\n            { ret := value }\n            function convert_uint160_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_uint160(value)))\n            }\n            function convert_uint160_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_payable_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function store_literal_in_memory_72ec00def0a4f647f10f2a5c1742fab7d53364130edc365182f3ccef5864f2a5(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Not the owner\")\n            }\n            function abi_encode_stringliteral_72ec00def0a4f647f10f2a5c1742fab7d53364130edc365182f3ccef5864f2a5(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 13)\n                store_literal_in_memory_72ec00def0a4f647f10f2a5c1742fab7d53364130edc365182f3ccef5864f2a5(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_72ec(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_72ec00def0a4f647f10f2a5c1742fab7d53364130edc365182f3ccef5864f2a5(tail)\n            }\n            function require_helper_stringliteral_72ec(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_72ec(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            /// @ast-id 38 @src 0:392:486  \"modifier onlyOwner() {...\"\n            function modifier_onlyOwner(var_to, var_isObligation)\n            {\n                /// @src 0:431:441  \"msg.sender\"\n                let expr := caller()\n                /// @src 0:445:450  \"owner\"\n                let _1 := read_from_storage_split_offset_address_payable(0x02)\n                let expr_1 := _1\n                /// @src 0:431:450  \"msg.sender == owner\"\n                let expr_2 := eq(cleanup_address(expr), convert_address_payable_to_address(expr_1))\n                /// @src 0:423:468  \"require(msg.sender == owner, \\\"Not the owner\\\")\"\n                require_helper_stringliteral_72ec(expr_2)\n                /// @src 0:478:479  \"_\"\n                fun_withdraw_inner(var_to, var_isObligation)\n            }\n            /// @src 0:72:1871  \"contract Box {...\"\n            function extract_from_storage_value_offset_uint256(slot_value) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_uint256(slot) -> value\n            {\n                value := extract_from_storage_value_offset_uint256(sload(slot))\n            }\n            function store_literal_in_memory_9346fa5bb6daee01a14e560a7040427cee2fc946781925fbe052d7ef325298b0(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Deadline not yet reached\")\n            }\n            function abi_encode_stringliteral_9346(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 24)\n                store_literal_in_memory_9346fa5bb6daee01a14e560a7040427cee2fc946781925fbe052d7ef325298b0(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_9346(tail)\n            }\n            function require_helper_stringliteral_9346(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function convert_contract_Box_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function cleanup_t_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_t_rational_by_to_t_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_t_rational_by(value)))\n            }\n            function shift_right_168_unsigned(value) -> newValue\n            { newValue := shr(168, value) }\n            function extract_from_storage_value_offset_t_bool(slot_value) -> value\n            {\n                value := cleanup_from_storage_bool(shift_right_168_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_bool(slot) -> value\n            {\n                value := extract_from_storage_value_offset_t_bool(sload(slot))\n            }\n            function store_literal_in_memory_4b4cc99522fdcee4d97d6d2d3cbabeb353d40433850bd46ba29c08dbfba843f9(memPtr)\n            {\n                mstore(add(memPtr, 0), \"No funds to withdraw\")\n            }\n            function abi_encode_stringliteral_4b4cc99522fdcee4d97d6d2d3cbabeb353d40433850bd46ba29c08dbfba843f9(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 20)\n                store_literal_in_memory_4b4cc99522fdcee4d97d6d2d3cbabeb353d40433850bd46ba29c08dbfba843f9(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_4b4c(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_4b4cc99522fdcee4d97d6d2d3cbabeb353d40433850bd46ba29c08dbfba843f9(tail)\n            }\n            function require_helper_stringliteral_4b4c(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_4b4c(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function cleanup_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_by_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n            }\n            function panic_error_0x11()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x11)\n                revert(0, 0x24)\n            }\n            function checked_add_uint256(x, y) -> sum\n            {\n                x := cleanup_uint256(x)\n                y := cleanup_uint256(y)\n                sum := add(x, y)\n                if gt(x, sum) { panic_error_0x11() }\n            }\n            function require_helper(condition)\n            {\n                if iszero(condition) { revert(0, 0) }\n            }\n            function convert_uint160_to_address_payable(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_to_address_payable(value) -> converted\n            {\n                converted := convert_uint160_to_address_payable(value)\n            }\n            function array_storeLengthForEncoding_bytes_nonPadded_inplace(pos, length) -> updated_pos\n            { updated_pos := pos }\n            function abi_encode_stringliteral_c5d2(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_bytes_nonPadded_inplace(pos, 0)\n                end := add(pos, 0)\n            }\n            function abi_encode_packed_stringliteral_c5d2(pos) -> end\n            {\n                pos := abi_encode_stringliteral_c5d2(pos)\n                end := pos\n            }\n            function round_up_to_mul_of(value) -> result\n            {\n                result := and(add(value, 31), not(31))\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function allocate_memory(size) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                finalize_allocation(memPtr, size)\n            }\n            function array_allocation_size_bytes(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := round_up_to_mul_of(length)\n                size := add(size, 0x20)\n            }\n            function allocate_memory_array_bytes(length) -> memPtr\n            {\n                let allocSize := array_allocation_size_bytes(length)\n                memPtr := allocate_memory(allocSize)\n                mstore(memPtr, length)\n            }\n            function zero_value_for_split_bytes() -> ret\n            { ret := 96 }\n            function extract_returndata() -> data\n            {\n                switch returndatasize()\n                case 0 {\n                    data := zero_value_for_split_bytes()\n                }\n                default {\n                    data := allocate_memory_array_bytes(returndatasize())\n                    returndatacopy(add(data, 0x20), 0, returndatasize())\n                }\n            }\n            function store_literal_in_memory_2bbe70e6500e9642f2862dc923170a5f09b5a43a51b0f2c3488a318564bb6925(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Withdraw failed\")\n            }\n            function abi_encode_stringliteral_2bbe70e6500e9642f2862dc923170a5f09b5a43a51b0f2c3488a318564bb6925(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 15)\n                store_literal_in_memory_2bbe70e6500e9642f2862dc923170a5f09b5a43a51b0f2c3488a318564bb6925(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_2bbe(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_2bbe70e6500e9642f2862dc923170a5f09b5a43a51b0f2c3488a318564bb6925(tail)\n            }\n            function require_helper_stringliteral_2bbe(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_2bbe(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function shift_left_168(value) -> newValue\n            { newValue := shl(168, value) }\n            function update_byte_slice_shift_21(value, toInsert) -> result\n            {\n                let mask := shl(168, 255)\n                toInsert := shift_left_168(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_bool_to_bool(value) -> converted\n            {\n                converted := cleanup_bool(value)\n            }\n            function prepare_store_bool(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_t_bool_to_t_bool(slot, value)\n            {\n                let convertedValue := convert_bool_to_bool(value)\n                sstore(slot, update_byte_slice_shift_21(sload(slot), prepare_store_bool(convertedValue)))\n            }\n            /// @src 0:965:1803  \"function withdraw(address _to, bool isObligation) external onlyOwner {...\"\n            function fun_withdraw_inner(var__to, var_isObligation)\n            {\n                /// @src 0:1052:1067  \"block.timestamp\"\n                let expr := timestamp()\n                /// @src 0:1071:1079  \"deadline\"\n                let _1 := read_from_storage_split_offset_uint256(0x00)\n                let expr_1 := _1\n                /// @src 0:1052:1079  \"block.timestamp >= deadline\"\n                let expr_2 := iszero(lt(cleanup_uint256(expr), cleanup_uint256(expr_1)))\n                /// @src 0:1044:1108  \"require(block.timestamp >= deadline, \\\"Deadline not yet reached\\\")\"\n                require_helper_stringliteral_9346(expr_2)\n                /// @src 0:1144:1148  \"this\"\n                let expr_address := address()\n                /// @src 0:1136:1149  \"address(this)\"\n                let expr_3 := convert_contract_Box_to_address(expr_address)\n                /// @src 0:1136:1157  \"address(this).balance\"\n                let expr_4 := balance(expr_3)\n                /// @src 0:1119:1157  \"uint256 amount = address(this).balance\"\n                let var_amount := expr_4\n                /// @src 0:1175:1181  \"amount\"\n                let _2 := var_amount\n                let expr_5 := _2\n                /// @src 0:1184:1185  \"0\"\n                let expr_6 := 0x00\n                /// @src 0:1175:1185  \"amount > 0\"\n                let expr_7 := gt(cleanup_uint256(expr_5), convert_t_rational_by_to_t_uint256(expr_6))\n                /// @src 0:1175:1206  \"amount > 0 && isWithdraw==false\"\n                let expr_8 := expr_7\n                if expr_8\n                {\n                    /// @src 0:1189:1199  \"isWithdraw\"\n                    let _3 := read_from_storage_split_offset_bool(0x02)\n                    let expr_9 := _3\n                    /// @src 0:1201:1206  \"false\"\n                    let expr_10 := 0x00\n                    /// @src 0:1189:1206  \"isWithdraw==false\"\n                    let expr_11 := eq(cleanup_bool(expr_9), cleanup_bool(expr_10))\n                    /// @src 0:1175:1206  \"amount > 0 && isWithdraw==false\"\n                    expr_8 := expr_11\n                }\n                /// @src 0:1167:1231  \"require(amount > 0 && isWithdraw==false, \\\"No funds to withdraw\\\")\"\n                require_helper_stringliteral_4b4c(expr_8)\n                /// @src 0:1253:1265  \"isObligation\"\n                let _4 := var_isObligation\n                let expr_12 := _4\n                /// @src 0:1269:1273  \"true\"\n                let expr_13 := 0x01\n                /// @src 0:1253:1273  \"isObligation == true\"\n                let expr_14 := eq(cleanup_bool(expr_12), cleanup_bool(expr_13))\n                /// @src 0:1250:1795  \"if(isObligation == true){...\"\n                switch expr_14\n                case 0 {\n                    /// @src 0:1517:1525  \"deadline\"\n                    let _5 := read_from_storage_split_offset_uint256(0x00)\n                    let expr_15 := _5\n                    /// @src 0:1527:1535  \"3600 *24\"\n                    let expr_16 := 0x015180\n                    /// @src 0:1526:1536  \"(3600 *24)\"\n                    let expr_17 := expr_16\n                    /// @src 0:1517:1536  \"deadline+(3600 *24)\"\n                    let expr_18 := checked_add_uint256(expr_15, convert_rational_by_to_uint256(expr_17))\n                    /// @src 0:1495:1536  \"uint extendDeadline = deadline+(3600 *24)\"\n                    let var_extendDeadline := expr_18\n                    /// @src 0:1558:1572  \"extendDeadline\"\n                    let _6 := var_extendDeadline\n                    let expr_19 := _6\n                    /// @src 0:1575:1590  \"block.timestamp\"\n                    let expr_20 := timestamp()\n                    /// @src 0:1558:1590  \"extendDeadline < block.timestamp\"\n                    let expr_21 := lt(cleanup_uint256(expr_19), cleanup_uint256(expr_20))\n                    /// @src 0:1550:1591  \"require(extendDeadline < block.timestamp)\"\n                    require_helper(expr_21)\n                    /// @src 0:1632:1635  \"_to\"\n                    let _7 := var__to\n                    let expr_22 := _7\n                    /// @src 0:1624:1636  \"payable(_to)\"\n                    let expr_23 := convert_address_to_address_payable(expr_22)\n                    /// @src 0:1624:1641  \"payable(_to).call\"\n                    let expr_185_address := convert_address_payable_to_address(expr_23)\n                    /// @src 0:1649:1655  \"amount\"\n                    let _8 := var_amount\n                    let expr_24 := _8\n                    /// @src 0:1624:1656  \"payable(_to).call{value: amount}\"\n                    let expr_187_address := expr_185_address\n                    let expr_187_value := expr_24\n                    /// @src 0:1624:1660  \"payable(_to).call{value: amount}(\\\"\\\")\"\n                    let _9 := allocate_unbounded()\n                    let _10 := sub(abi_encode_packed_stringliteral_c5d2(_9), _9)\n                    let expr_component := call(gas(), expr_187_address, expr_187_value, _9, _10, 0, 0)\n                    pop(extract_returndata())\n                    /// @src 0:1605:1660  \"(bool success, ) = payable(_to).call{value: amount}(\\\"\\\")\"\n                    let var_success := expr_component\n                    /// @src 0:1682:1689  \"success\"\n                    let _11 := var_success\n                    let expr_25 := _11\n                    /// @src 0:1674:1709  \"require(success, \\\"Withdraw failed\\\")\"\n                    require_helper_stringliteral_2bbe(expr_25)\n                    /// @src 0:1736:1740  \"true\"\n                    let expr_26 := 0x01\n                    /// @src 0:1723:1740  \"isWithdraw = true\"\n                    update_storage_value_offset_t_bool_to_t_bool(0x02, expr_26)\n                    /// @src 0:1769:1774  \"owner\"\n                    let _12 := read_from_storage_split_offset_address_payable(0x02)\n                    let expr_27 := _12\n                    /// @src 0:1776:1782  \"amount\"\n                    let _13 := var_amount\n                    let expr_28 := _13\n                    /// @src 0:1759:1783  \"Withdrawn(owner, amount)\"\n                    let _14 := 0x7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5\n                    let _15 := convert_address_payable_to_address(expr_27)\n                    let _16 := allocate_unbounded()\n                    let _17 := abi_encode_uint256(_16, expr_28)\n                    log2(_16, sub(_17, _16), _14, _15)\n                }\n                default /// @src 0:1250:1795  \"if(isObligation == true){...\"\n                {\n                    /// @src 0:1315:1318  \"_to\"\n                    let _18 := var__to\n                    let expr_29 := _18\n                    /// @src 0:1307:1319  \"payable(_to)\"\n                    let expr_30 := convert_address_to_address_payable(expr_29)\n                    /// @src 0:1307:1324  \"payable(_to).call\"\n                    let expr_142_address := convert_address_payable_to_address(expr_30)\n                    /// @src 0:1332:1338  \"amount\"\n                    let _19 := var_amount\n                    let expr_31 := _19\n                    /// @src 0:1307:1339  \"payable(_to).call{value: amount}\"\n                    let expr_144_address := expr_142_address\n                    let expr_value := expr_31\n                    /// @src 0:1307:1343  \"payable(_to).call{value: amount}(\\\"\\\")\"\n                    let _20 := allocate_unbounded()\n                    let _21 := sub(abi_encode_packed_stringliteral_c5d2(_20), _20)\n                    let expr_component_1 := call(gas(), expr_144_address, expr_value, _20, _21, 0, 0)\n                    pop(extract_returndata())\n                    /// @src 0:1288:1343  \"(bool success, ) = payable(_to).call{value: amount}(\\\"\\\")\"\n                    let var_success_1 := expr_component_1\n                    /// @src 0:1365:1372  \"success\"\n                    let _22 := var_success_1\n                    let expr_32 := _22\n                    /// @src 0:1357:1392  \"require(success, \\\"Withdraw failed\\\")\"\n                    require_helper_stringliteral_2bbe(expr_32)\n                    /// @src 0:1419:1423  \"true\"\n                    let expr_33 := 0x01\n                    /// @src 0:1406:1423  \"isWithdraw = true\"\n                    update_storage_value_offset_t_bool_to_t_bool(0x02, expr_33)\n                    /// @src 0:1452:1457  \"owner\"\n                    let _23 := read_from_storage_split_offset_address_payable(0x02)\n                    let expr_34 := _23\n                    /// @src 0:1459:1465  \"amount\"\n                    let _24 := var_amount\n                    let expr_35 := _24\n                    /// @src 0:1442:1466  \"Withdrawn(owner, amount)\"\n                    let _25 := 0x7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5\n                    let _26 := convert_address_payable_to_address(expr_34)\n                    let _27 := allocate_unbounded()\n                    let _28 := abi_encode_uint256(_27, expr_35)\n                    log2(_27, sub(_28, _27), _25, _26)\n                }\n            }\n            /// @ast-id 208 @src 0:965:1803  \"function withdraw(address _to, bool isObligation) external onlyOwner {...\"\n            function fun_withdraw(var_to, var_isObligation)\n            {\n                modifier_onlyOwner(var_to, var_isObligation)\n            }\n            /// @src 0:72:1871  \"contract Box {...\"\n            function shift_right_unsigned(value) -> newValue\n            { newValue := shr(160, value) }\n            function extract_from_storage_value_offset_bool(slot_value) -> value\n            {\n                value := cleanup_from_storage_bool(shift_right_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_t_bool(slot) -> value\n            {\n                value := extract_from_storage_value_offset_bool(sload(slot))\n            }\n            function store_literal_in_memory_80869cfbf249c642ba4b5f4d5fde64755a28853a4f2a5429e72183f699da85b5(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Contract already funded\")\n            }\n            function abi_encode_stringliteral_80869cfbf249c642ba4b5f4d5fde64755a28853a4f2a5429e72183f699da85b5(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 23)\n                store_literal_in_memory_80869cfbf249c642ba4b5f4d5fde64755a28853a4f2a5429e72183f699da85b5(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_8086(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_80869cfbf249c642ba4b5f4d5fde64755a28853a4f2a5429e72183f699da85b5(tail)\n            }\n            function require_helper_stringliteral_8086(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_8086(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_ebfa112dcede3b10ff28b3a118f2beb993367dd3bc98443adc7df7774b616480(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Must send ETH\")\n            }\n            function abi_encode_stringliteral_ebfa(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 13)\n                store_literal_in_memory_ebfa112dcede3b10ff28b3a118f2beb993367dd3bc98443adc7df7774b616480(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_ebfa(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_ebfa(tail)\n            }\n            function require_helper_stringliteral_ebfa(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_ebfa(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_24673d1b0003a199275166474575e96e531c915eb950e021102fb167de0d7af4(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Invalid duration\")\n            }\n            function abi_encode_stringliteral_24673d1b0003a199275166474575e96e531c915eb950e021102fb167de0d7af4(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 16)\n                store_literal_in_memory_24673d1b0003a199275166474575e96e531c915eb950e021102fb167de0d7af4(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_2467(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_24673d1b0003a199275166474575e96e531c915eb950e021102fb167de0d7af4(tail)\n            }\n            function require_helper_stringliteral(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_2467(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function shift_left(value) -> newValue\n            { newValue := shl(0, value) }\n            function update_byte_slice_shift_0(value, toInsert) -> result\n            {\n                let mask := sub(shl(160, 1), 1)\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_address_payable_to_address_payable(value) -> converted\n            {\n                converted := convert_uint160_to_address_payable(value)\n            }\n            function prepare_store_address_payable(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_address_payable_to_address_payable(slot, value)\n            {\n                let convertedValue := convert_address_payable_to_address_payable(value)\n                sstore(slot, update_byte_slice_shift_0(sload(slot), prepare_store_address_payable(convertedValue)))\n            }\n            function update_byte_slice_shift(value, toInsert) -> result\n            {\n                let mask := not(0)\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_uint256_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_uint256(value)))\n            }\n            function prepare_store_uint256(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_uint256_to_uint256(slot, value)\n            {\n                let convertedValue := convert_uint256_to_uint256(value)\n                sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n            }\n            function shift_left_160(value) -> newValue\n            { newValue := shl(160, value) }\n            function update_byte_slice_shift_20(value, toInsert) -> result\n            {\n                let mask := shl(160, 255)\n                toInsert := shift_left_160(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function update_storage_value_offset_bool_to_bool(slot, value)\n            {\n                let convertedValue := convert_bool_to_bool(value)\n                sstore(slot, update_byte_slice_shift_20(sload(slot), prepare_store_bool(convertedValue)))\n            }\n            function convert_address_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function abi_encode_uint256_uint256(headStart, value0, value1) -> tail\n            {\n                tail := add(headStart, 64)\n                abi_encode_uint256_to_uint256(value0, add(headStart, 0))\n                abi_encode_uint256_to_uint256(value1, add(headStart, 32))\n            }\n            /// @ast-id 97 @src 0:492:959  \"function deposit(uint256 _durationInSeconds) external payable {...\"\n            function fun_deposit(var_durationInSeconds)\n            {\n                /// @src 0:573:589  \"isContractFunded\"\n                let _1 := read_from_storage_split_offset_t_bool(0x02)\n                let expr := _1\n                /// @src 0:572:589  \"!isContractFunded\"\n                let expr_1 := cleanup_bool(iszero(expr))\n                /// @src 0:564:617  \"require(!isContractFunded, \\\"Contract already funded\\\")\"\n                require_helper_stringliteral_8086(expr_1)\n                /// @src 0:635:644  \"msg.value\"\n                let expr_2 := callvalue()\n                /// @src 0:647:648  \"0\"\n                let expr_3 := 0x00\n                /// @src 0:635:648  \"msg.value > 0\"\n                let expr_4 := gt(cleanup_uint256(expr_2), convert_t_rational_by_to_t_uint256(expr_3))\n                /// @src 0:627:666  \"require(msg.value > 0, \\\"Must send ETH\\\")\"\n                require_helper_stringliteral_ebfa(expr_4)\n                /// @src 0:684:702  \"_durationInSeconds\"\n                let _2 := var_durationInSeconds\n                let expr_5 := _2\n                /// @src 0:705:706  \"0\"\n                let expr_6 := 0x00\n                /// @src 0:684:706  \"_durationInSeconds > 0\"\n                let expr_7 := gt(cleanup_uint256(expr_5), convert_t_rational_by_to_t_uint256(expr_6))\n                /// @src 0:676:727  \"require(_durationInSeconds > 0, \\\"Invalid duration\\\")\"\n                require_helper_stringliteral(expr_7)\n                /// @src 0:754:764  \"msg.sender\"\n                let expr_8 := caller()\n                /// @src 0:746:765  \"payable(msg.sender)\"\n                let expr_9 := convert_address_to_address_payable(expr_8)\n                /// @src 0:738:765  \"owner = payable(msg.sender)\"\n                update_storage_value_offset_address_payable_to_address_payable(0x02, expr_9)\n                /// @src 0:789:804  \"block.timestamp\"\n                let expr_10 := timestamp()\n                /// @src 0:775:804  \"initialTime = block.timestamp\"\n                update_storage_value_offset_uint256_to_uint256(0x01, expr_10)\n                /// @src 0:825:840  \"block.timestamp\"\n                let expr_11 := timestamp()\n                /// @src 0:843:861  \"_durationInSeconds\"\n                let _3 := var_durationInSeconds\n                let expr_12 := _3\n                /// @src 0:825:861  \"block.timestamp + _durationInSeconds\"\n                let expr_13 := checked_add_uint256(expr_11, expr_12)\n                /// @src 0:814:861  \"deadline = block.timestamp + _durationInSeconds\"\n                update_storage_value_offset_uint256_to_uint256(0x00, expr_13)\n                /// @src 0:890:894  \"true\"\n                let expr_14 := 0x01\n                /// @src 0:871:894  \"isContractFunded = true\"\n                update_storage_value_offset_bool_to_bool(0x02, expr_14)\n                /// @src 0:920:930  \"msg.sender\"\n                let expr_15 := caller()\n                /// @src 0:932:941  \"msg.value\"\n                let expr_16 := callvalue()\n                /// @src 0:943:951  \"deadline\"\n                let _4 := read_from_storage_split_offset_uint256(0x00)\n                let expr_17 := _4\n                /// @src 0:910:952  \"Deposited(msg.sender, msg.value, deadline)\"\n                let _5 := 0x73a19dd210f1a7f902193214c0ee91dd35ee5b4d920cba8d519eca65a7b488ca\n                let _6 := convert_address_to_address(expr_15)\n                let _7 := allocate_unbounded()\n                let _8 := abi_encode_uint256_uint256(_7, expr_16, expr_17)\n                log2(_7, sub(_8, _7), _5, _6)\n            }\n        }\n        data \".metadata\" hex\"a26469706673582212205a63dbe2bba412358febd9bd720677d2f3069d42171ac0879d217ebd415030cd64736f6c634300081c0033\"\n    }\n}\n",
					"hash": "3793e865e19cda689444985eedcf506af0d8b0f39a588252fef43303f834590c",
					"factoryDependencies": {}
				},
				"SwappyBox": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_contract",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "bidAmount",
									"type": "uint256"
								}
							],
							"name": "bid",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "box",
							"outputs": [
								{
									"internalType": "contract Box",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "boxData",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "bidInitialTime",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "bidEndTime",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "totalBid",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "basePrice",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "lastPrice",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "currentWinner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "poolInitiator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "boxes",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "createYourBox",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_index",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_deadline",
									"type": "uint256"
								}
							],
							"name": "depositToBox",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_contract",
									"type": "address"
								}
							],
							"name": "getBalance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_contract",
									"type": "address"
								}
							],
							"name": "getBoxData",
							"outputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "bidInitialTime",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "bidEndTime",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "totalBid",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "basePrice",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "lastPrice",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "currentWinner",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "poolInitiator",
											"type": "address"
										}
									],
									"internalType": "struct SwappyBox.BidTrack",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_contract",
									"type": "address"
								}
							],
							"name": "getPrice",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_contract",
									"type": "address"
								}
							],
							"name": "obligate",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_contract",
									"type": "address"
								}
							],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"metadata": {
						"optimizer_settings": {
							"is_debug_logging_enabled": false,
							"is_fallback_to_size_enabled": false,
							"is_verify_each_enabled": false,
							"level_back_end": "Aggressive",
							"level_middle_end": "Aggressive",
							"level_middle_end_size": "Zero"
						},
						"revive_pallet_version": null,
						"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8",
						"solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"box\",\"outputs\":[{\"internalType\":\"contract Box\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"boxData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bidInitialTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currentWinner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolInitiator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boxes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createYourBox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"depositToBox\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"getBoxData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"bidInitialTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currentWinner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolInitiator\",\"type\":\"address\"}],\"internalType\":\"struct SwappyBox.BidTrack\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"obligate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwappyBox/SwappBox.sol\":\"SwappyBox\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwappyBox/SwappBox.sol\":{\"keccak256\":\"0xb0d3be5cc6f1895238c628238b95c77aa5dee66dba410ff325d2a040733e122e\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://23a920af4d08ec52bcd7024b6c8c3ae20fc9db02af168f421d360465d1582a54\",\"dweb:/ipfs/QmU4QpbdkqCzQV3McXtTDQyMzegk48xsotnWA5pPcjKUp1\"]}},\"version\":1}",
						"solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
					},
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					},
					"storageLayout": {
						"storage": [
							{
								"astId": 216,
								"contract": "contracts/SwappyBox/SwappBox.sol:SwappyBox",
								"label": "box",
								"offset": 0,
								"slot": "0",
								"type": "t_contract(Box)213"
							},
							{
								"astId": 241,
								"contract": "contracts/SwappyBox/SwappBox.sol:SwappyBox",
								"label": "boxes",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
							},
							{
								"astId": 246,
								"contract": "contracts/SwappyBox/SwappBox.sol:SwappyBox",
								"label": "boxData",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_address,t_struct(BidTrack)231_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_address)dyn_storage": {
								"base": "t_address",
								"encoding": "dynamic_array",
								"label": "address[]",
								"numberOfBytes": "32"
							},
							"t_contract(Box)213": {
								"encoding": "inplace",
								"label": "contract Box",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_array(t_address)dyn_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => address[])",
								"numberOfBytes": "32",
								"value": "t_array(t_address)dyn_storage"
							},
							"t_mapping(t_address,t_struct(BidTrack)231_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct SwappyBox.BidTrack)",
								"numberOfBytes": "32",
								"value": "t_struct(BidTrack)231_storage"
							},
							"t_struct(BidTrack)231_storage": {
								"encoding": "inplace",
								"label": "struct SwappyBox.BidTrack",
								"members": [
									{
										"astId": 218,
										"contract": "contracts/SwappyBox/SwappBox.sol:SwappyBox",
										"label": "bidInitialTime",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 220,
										"contract": "contracts/SwappyBox/SwappBox.sol:SwappyBox",
										"label": "bidEndTime",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 222,
										"contract": "contracts/SwappyBox/SwappBox.sol:SwappyBox",
										"label": "totalBid",
										"offset": 0,
										"slot": "2",
										"type": "t_uint256"
									},
									{
										"astId": 224,
										"contract": "contracts/SwappyBox/SwappBox.sol:SwappyBox",
										"label": "basePrice",
										"offset": 0,
										"slot": "3",
										"type": "t_uint256"
									},
									{
										"astId": 226,
										"contract": "contracts/SwappyBox/SwappBox.sol:SwappyBox",
										"label": "lastPrice",
										"offset": 0,
										"slot": "4",
										"type": "t_uint256"
									},
									{
										"astId": 228,
										"contract": "contracts/SwappyBox/SwappBox.sol:SwappyBox",
										"label": "currentWinner",
										"offset": 0,
										"slot": "5",
										"type": "t_address"
									},
									{
										"astId": 230,
										"contract": "contracts/SwappyBox/SwappBox.sol:SwappyBox",
										"label": "poolInitiator",
										"offset": 0,
										"slot": "6",
										"type": "t_address"
									}
								],
								"numberOfBytes": "224"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"evm": {
						"assembly": "// RO data = 0/0 bytes\n// RW data = 0/65552 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 21635\n// Code size = 69119 bytes\n\n      : @0 (gas: 2)\n     0: i32 a2 = a0 >> 0x10\n     3: jump @6 if a2 != 0\n      : @1 (gas: 2)\n     6: a2 = 0x10001\n    11: jump @6 if a1 >=u a2\n      : @2 (gas: 4)\n    14: a1 = a1 + a0\n    17: i32 a1 = a1 + 0x1f\n    20: a1 = a1 & 0xffffffffffffffe0\n    23: jump @7 if a1 >=u 65537\n      : @3 (gas: 2)\n    29: a3 = i32 [0x20000]\n    34: jump @5 if a3 >=u a1\n      : @4 (gas: 4)\n    37: u32 [0x20000] = a1\n    42: a1 = 0x20010\n    47: a0 = a0 + a1\n    50: ret\n      : @5 (gas: 3)\n    52: a1 = 0x20010\n    57: a0 = a0 + a1\n    60: ret\n      : @6 (gas: 1)\n    62: trap\n      : @7 (gas: 1)\n    63: trap\n      : @8 (gas: 13)\n    64: sp = sp + 0xffffffffffffffd8\n    67: u64 [sp + 0x20] = ra\n    70: u64 [sp + 0x18] = s0\n    73: u64 [sp + 0x10] = s1\n    76: a2 = u64 [a1]\n    78: u64 [sp + 0x8] = a2\n    81: a2 = u64 [a1 + 0x8]\n    84: u64 [sp] = a2\n    86: s0 = u64 [a1 + 0x10]\n    89: s1 = u64 [a1 + 0x18]\n    92: i32 a0 = a0 + 0\n    94: a1 = 0x20\n    97: ra = 2, jump @0\n      : @9 [@dyn 1] (gas: 71)\n   101: a1 = reverse s1\n   103: a2 = reverse s0\n   105: a3 = u64 [sp]\n   107: a3 = reverse a3\n   109: a4 = u64 [sp + 0x8]\n   112: a4 = reverse a4\n   114: u8 [a0 + 0x18] = a4\n   117: u8 [a0 + 0x10] = a3\n   120: u8 [a0 + 0x8] = a2\n   123: u8 [a0] = a1\n   125: a5 = a4 >> 0x38\n   128: u8 [a0 + 0x1f] = a5\n   131: a5 = a4 >> 0x30\n   134: u8 [a0 + 0x1e] = a5\n   137: a5 = a4 >> 0x28\n   140: u8 [a0 + 0x1d] = a5\n   143: a5 = a4 >> 0x20\n   146: u8 [a0 + 0x1c] = a5\n   149: a5 = a4 >> 0x18\n   152: u8 [a0 + 0x1b] = a5\n   155: a5 = a4 >> 0x10\n   158: u8 [a0 + 0x1a] = a5\n   161: a4 = a4 >> 0x8\n   164: u8 [a0 + 0x19] = a4\n   167: a4 = a3 >> 0x38\n   170: u8 [a0 + 0x17] = a4\n   173: a4 = a3 >> 0x30\n   176: u8 [a0 + 0x16] = a4\n   179: a4 = a3 >> 0x28\n   182: u8 [a0 + 0x15] = a4\n   185: a4 = a3 >> 0x20\n   188: u8 [a0 + 0x14] = a4\n   191: a4 = a3 >> 0x18\n   194: u8 [a0 + 0x13] = a4\n   197: a4 = a3 >> 0x10\n   200: u8 [a0 + 0x12] = a4\n   203: a3 = a3 >> 0x8\n   206: u8 [a0 + 0x11] = a3\n   209: a3 = a2 >> 0x38\n   212: u8 [a0 + 0xf] = a3\n   215: a3 = a2 >> 0x30\n   218: u8 [a0 + 0xe] = a3\n   221: a3 = a2 >> 0x28\n   224: u8 [a0 + 0xd] = a3\n   227: a3 = a2 >> 0x20\n   230: u8 [a0 + 0xc] = a3\n   233: a3 = a2 >> 0x18\n   236: u8 [a0 + 0xb] = a3\n   239: a3 = a2 >> 0x10\n   242: u8 [a0 + 0xa] = a3\n   245: a2 = a2 >> 0x8\n   248: u8 [a0 + 0x9] = a2\n   251: a2 = a1 >> 0x38\n   254: u8 [a0 + 0x7] = a2\n   257: a2 = a1 >> 0x30\n   260: u8 [a0 + 0x6] = a2\n   263: a2 = a1 >> 0x28\n   266: u8 [a0 + 0x5] = a2\n   269: a2 = a1 >> 0x20\n   272: u8 [a0 + 0x4] = a2\n   275: a2 = a1 >> 0x18\n   278: u8 [a0 + 0x3] = a2\n   281: a2 = a1 >> 0x10\n   284: u8 [a0 + 0x2] = a2\n   287: a1 = a1 >> 0x8\n   290: u8 [a0 + 0x1] = a1\n   293: ra = u64 [sp + 0x20]\n   296: s0 = u64 [sp + 0x18]\n   299: s1 = u64 [sp + 0x10]\n   302: sp = sp + 0x28\n   305: ret\n      : @10 (gas: 6)\n   307: sp = sp + 0xfffffffffffffff0\n   310: u64 [sp + 0x8] = ra\n   313: u64 [sp] = s0\n   315: s0 = a0 & 0x1\n   318: ecalli 4 // 'call_data_size'\n   320: fallthrough\n      : @11 (gas: 2)\n   321: u32 [0x20004] = a0\n   326: jump @13 if s0 == 0\n      : @12 (gas: 1)\n   329: ra = 4, jump @14\n      : @13 [@dyn 2] (gas: 1)\n   333: ra = 6, jump @28\n      : @14 [@dyn 3] (gas: 9)\n   338: sp = sp + 0xffffffffffffffc0\n   341: u64 [sp + 0x38] = ra\n   344: u64 [sp + 0x30] = s0\n   347: u64 [sp + 0x28] = s1\n   350: s0 = sp + 0x40\n   353: sp = sp & 0xffffffffffffffe0\n   356: a0 = 0x40\n   359: a1 = 0x20\n   362: ra = 8, jump @0\n      : @15 [@dyn 4] (gas: 39)\n   367: u8 [a0 + 31] = 0x80\n   372: u8 [a0 + 30] = 0\n   375: u8 [a0 + 29] = 0\n   378: u8 [a0 + 28] = 0\n   381: u8 [a0 + 27] = 0\n   384: u8 [a0 + 26] = 0\n   387: u8 [a0 + 25] = 0\n   390: u8 [a0 + 24] = 0\n   393: u8 [a0 + 23] = 0\n   396: u8 [a0 + 22] = 0\n   399: u8 [a0 + 21] = 0\n   402: u8 [a0 + 20] = 0\n   405: u8 [a0 + 19] = 0\n   408: u8 [a0 + 18] = 0\n   411: u8 [a0 + 17] = 0\n   414: u8 [a0 + 16] = 0\n   417: u8 [a0 + 15] = 0\n   420: u8 [a0 + 14] = 0\n   423: u8 [a0 + 13] = 0\n   426: u8 [a0 + 12] = 0\n   429: u8 [a0 + 11] = 0\n   432: u8 [a0 + 10] = 0\n   435: u8 [a0 + 9] = 0\n   438: u8 [a0 + 8] = 0\n   441: u8 [a0 + 7] = 0\n   444: u8 [a0 + 6] = 0\n   447: u8 [a0 + 5] = 0\n   450: u8 [a0 + 4] = 0\n   453: u8 [a0 + 3] = 0\n   456: u8 [a0 + 2] = 0\n   459: u8 [a0 + 1] = 0\n   462: u8 [a0 + 0] = 0\n   464: u64 [sp + 24] = 0\n   467: u64 [sp + 0] = 0\n   469: u64 [sp + 8] = 0\n   472: u64 [sp + 16] = 0\n   475: i32 a0 = sp + 0\n   477: ecalli 17 // 'value_transferred'\n   479: fallthrough\n      : @16 (gas: 8)\n   480: a0 = u64 [sp + 0x10]\n   483: a1 = u64 [sp + 0x18]\n   486: a2 = u64 [sp + 0x8]\n   489: a3 = u64 [sp]\n   491: a1 = a1 | a2\n   494: a0 = a0 | a3\n   497: a0 = a0 | a1\n   500: jump @20 if a0 != 0\n      : @17 (gas: 3)\n   504: a0 = 0x40\n   507: a1 = 0x20\n   510: ra = 10, jump @0\n      : @18 [@dyn 5] (gas: 100)\n   515: a1 = u8 [a0 + 0x11]\n   518: a2 = u8 [a0 + 0x10]\n   521: a3 = u8 [a0 + 0x12]\n   524: a4 = u8 [a0 + 0x13]\n   527: a1 = a1 << 0x8\n   530: a1 = a1 | a2\n   533: a3 = a3 << 0x10\n   536: a4 = a4 << 0x18\n   539: a3 = a3 | a4\n   542: a1 = a1 | a3\n   545: a2 = u8 [a0 + 0x15]\n   548: a3 = u8 [a0 + 0x14]\n   551: a4 = u8 [a0 + 0x16]\n   554: a5 = u8 [a0 + 0x17]\n   557: a2 = a2 << 0x8\n   560: a2 = a2 | a3\n   563: a4 = a4 << 0x10\n   566: a5 = a5 << 0x18\n   569: a4 = a4 | a5\n   572: a2 = a2 | a4\n   575: a2 = a2 << 0x20\n   578: t0 = a2 | a1\n   581: a2 = u8 [a0 + 0x1]\n   584: a3 = u8 [a0]\n   586: a4 = u8 [a0 + 0x2]\n   589: a5 = u8 [a0 + 0x3]\n   592: a2 = a2 << 0x8\n   595: a2 = a2 | a3\n   598: a4 = a4 << 0x10\n   601: a5 = a5 << 0x18\n   604: a4 = a4 | a5\n   607: a2 = a2 | a4\n   610: a3 = u8 [a0 + 0x5]\n   613: a4 = u8 [a0 + 0x4]\n   616: a5 = u8 [a0 + 0x6]\n   619: s1 = u8 [a0 + 0x7]\n   622: a3 = a3 << 0x8\n   625: a3 = a3 | a4\n   628: a5 = a5 << 0x10\n   631: s1 = s1 << 0x18\n   634: a5 = a5 | s1\n   637: a3 = a3 | a5\n   640: a3 = a3 << 0x20\n   643: a2 = a2 | a3\n   646: a3 = u8 [a0 + 0x19]\n   649: a4 = u8 [a0 + 0x18]\n   652: a5 = u8 [a0 + 0x1a]\n   655: s1 = u8 [a0 + 0x1b]\n   658: a3 = a3 << 0x8\n   661: a3 = a3 | a4\n   664: a5 = a5 << 0x10\n   667: s1 = s1 << 0x18\n   670: a5 = a5 | s1\n   673: a3 = a3 | a5\n   676: a4 = u8 [a0 + 0x1d]\n   679: a5 = u8 [a0 + 0x1c]\n   682: s1 = u8 [a0 + 0x1e]\n   685: a1 = u8 [a0 + 0x1f]\n   688: a4 = a4 << 0x8\n   691: a4 = a4 | a5\n   694: s1 = s1 << 0x10\n   697: a1 = a1 << 0x18\n   700: a1 = a1 | s1\n   703: a1 = a1 | a4\n   706: a1 = a1 << 0x20\n   709: a3 = a3 | a1\n   712: a1 = u8 [a0 + 0x9]\n   715: a4 = u8 [a0 + 0x8]\n   718: a5 = u8 [a0 + 0xa]\n   721: s1 = u8 [a0 + 0xb]\n   724: a1 = a1 << 0x8\n   727: a1 = a1 | a4\n   730: a5 = a5 << 0x10\n   733: s1 = s1 << 0x18\n   736: a5 = a5 | s1\n   739: a1 = a1 | a5\n   742: a4 = u8 [a0 + 0xd]\n   745: a5 = u8 [a0 + 0xc]\n   748: s1 = u8 [a0 + 0xe]\n   751: a0 = u8 [a0 + 0xf]\n   754: a4 = a4 << 0x8\n   757: a4 = a4 | a5\n   760: s1 = s1 << 0x10\n   763: a0 = a0 << 0x18\n   766: a0 = a0 | s1\n   769: a0 = a0 | a4\n   772: a0 = a0 << 0x20\n   775: a0 = a0 | a1\n   778: a0 = reverse a0\n   780: s1 = reverse a3\n   782: a1 = reverse a2\n   784: a2 = reverse t0\n   786: a1 = a1 | a2\n   789: a2 = s1 | a0\n   792: a2 = a2 | a1\n   795: a2 = a2 >> 0x20\n   798: a0 = a0 | a1\n   801: a0 = a0 << 0x20\n   804: a0 = a0 | a2\n   807: jump @22 if a0 == 0\n      : @19 (gas: 1)\n   810: trap\n      : @20 (gas: 3)\n   811: a0 = 0\n   813: a1 = 0\n   815: ra = 12, jump @0\n      : @21 [@dyn 6] (gas: 5)\n   820: i32 a1 = a0 + 0\n   822: a0 = 0x1\n   825: a2 = 0\n   827: ecalli 14 // 'seal_return'\n   829: fallthrough\n      : @22 (gas: 4)\n   830: i32 s1 = s1 + 0\n   832: a0 = s1\n   834: a1 = 0\n   836: ra = 14, jump @0\n      : @23 [@dyn 7] (gas: 5)\n   841: i32 a0 = a0 + 0\n   843: a1 = 0\n   845: a2 = 0\n   847: ecalli 2 // 'call_data_copy'\n   849: fallthrough\n      : @24 (gas: 2)\n   850: a1 = i32 [0x20008]\n   855: jump @26 if a1 == 0\n      : @25 (gas: 4)\n   858: a0 = 0x30010\n   863: i32 a0 = a0 + 0\n   865: ecalli 15 // 'set_immutable_data'\n   867: fallthrough\n      : @26 (gas: 3)\n   868: a0 = s1\n   870: a1 = 0\n   872: ra = 16, jump @0\n      : @27 [@dyn 8] (gas: 6)\n   877: i32 a1 = a0 + 0\n   879: a0 = 0\n   881: a2 = 0\n   883: ra = 0x12\n   886: ecalli 14 // 'seal_return'\n   888: fallthrough\n      : @28 [@dyn 9] (gas: 9)\n   889: sp = sp + 0xffffffffffffff00\n   893: u64 [sp + 0xf8] = ra\n   897: u64 [sp + 0xf0] = s0\n   901: u64 [sp + 0xe8] = s1\n   905: s0 = sp + 0x100\n   909: sp = sp & 0xffffffffffffffe0\n   912: a0 = 0x40\n   915: a1 = 0x20\n   918: ra = 20, jump @0\n      : @29 [@dyn 10] (gas: 35)\n   923: u8 [a0 + 31] = 0x80\n   928: u8 [a0 + 30] = 0\n   931: u8 [a0 + 29] = 0\n   934: u8 [a0 + 28] = 0\n   937: u8 [a0 + 27] = 0\n   940: u8 [a0 + 26] = 0\n   943: u8 [a0 + 25] = 0\n   946: u8 [a0 + 24] = 0\n   949: u8 [a0 + 23] = 0\n   952: u8 [a0 + 22] = 0\n   955: u8 [a0 + 21] = 0\n   958: u8 [a0 + 20] = 0\n   961: u8 [a0 + 19] = 0\n   964: u8 [a0 + 18] = 0\n   967: u8 [a0 + 17] = 0\n   970: u8 [a0 + 16] = 0\n   973: u8 [a0 + 15] = 0\n   976: u8 [a0 + 14] = 0\n   979: u8 [a0 + 13] = 0\n   982: u8 [a0 + 12] = 0\n   985: u8 [a0 + 11] = 0\n   988: u8 [a0 + 10] = 0\n   991: u8 [a0 + 9] = 0\n   994: u8 [a0 + 8] = 0\n   997: u8 [a0 + 7] = 0\n  1000: u8 [a0 + 3] = 0\n  1003: s1 = 0x20004\n  1008: u8 [a0 + 2] = 0\n  1011: u8 [a0 + 1] = 0\n  1014: u8 [a0 + 0] = 0\n  1016: a1 = i32 [0x20004]\n  1021: u8 [a0 + 6] = 0\n  1024: u8 [a0 + 5] = 0\n  1027: u8 [a0 + 4] = 0\n  1030: jump @49 if a1 <u 4\n      : @30 (gas: 4)\n  1035: i32 a0 = sp + 0xc0\n  1039: a1 = 0\n  1041: ecalli 3 // 'call_data_load'\n  1043: fallthrough\n      : @31 (gas: 2)\n  1044: a0 = i32 [sp + 0xdc]\n  1048: jump @37 if a0 <=s 1100443144\n      : @32 (gas: 2)\n  1055: a1 = 0x59d66000\n  1061: jump @42 if a0 >s 1507223460\n      : @33 (gas: 1)\n  1068: jump @55 if a0 == 1100443145\n      : @34 (gas: 1)\n  1076: jump @52 if a0 == 1372584153\n      : @35 (gas: 1)\n  1084: jump @49 if a0 != 1432709242\n      : @36 (gas: 14)\n  1092: ra = 0x16\n  1095: sp = sp + 0xfffffffffffffec0\n  1099: u64 [sp + 0x138] = ra\n  1103: u64 [sp + 0x130] = s0\n  1107: u64 [sp + 0x128] = s1\n  1111: s0 = sp + 0x140\n  1115: sp = sp & 0xffffffffffffffe0\n  1118: u64 [sp + 248] = 0\n  1122: u64 [sp + 240] = 0\n  1126: u64 [sp + 232] = 0\n  1130: u64 [sp + 224] = 0\n  1134: i32 a0 = sp + 0xe0\n  1138: ecalli 17 // 'value_transferred'\n  1140: jump @207\n      : @37 [@dyn 11] (gas: 1)\n  1143: jump @46 if a0 <=s 330924195\n      : @38 (gas: 1)\n  1150: jump @54 if a0 == 330924196\n      : @39 (gas: 1)\n  1158: jump @51 if a0 == 549794022\n      : @40 (gas: 1)\n  1166: jump @49 if a0 != 848193943\n      : @41 (gas: 1)\n  1173: ra = 24, jump @132\n      : @42 [@dyn 12] (gas: 2)\n  1178: i32 a1 = a1 + 0x7a5\n  1182: jump @56 if a0 == a1\n      : @43 (gas: 1)\n  1186: jump @53 if a0 == 1559564536\n      : @44 (gas: 1)\n  1194: jump @49 if a0 != 1967265185\n      : @45 (gas: 14)\n  1201: ra = 0x1a\n  1204: sp = sp + 0xffffffffffffff60\n  1208: u64 [sp + 0x98] = ra\n  1212: u64 [sp + 0x90] = s0\n  1216: u64 [sp + 0x88] = s1\n  1220: s0 = sp + 0xa0\n  1224: sp = sp & 0xffffffffffffffe0\n  1227: u64 [sp + 56] = 0\n  1230: u64 [sp + 48] = 0\n  1233: u64 [sp + 40] = 0\n  1236: u64 [sp + 32] = 0\n  1239: i32 a0 = sp + 0x20\n  1242: ecalli 17 // 'value_transferred'\n  1244: jump @250\n      : @46 [@dyn 13] (gas: 1)\n  1247: jump @50 if a0 == 2766793371\n      : @47 (gas: 1)\n  1254: jump @49 if a0 != 4172467023\n      : @48 (gas: 1)\n  1261: ra = 28, jump @294\n      : @49 [@dyn 14] (gas: 7)\n  1266: ra = 0x1e\n  1269: sp = sp + 0xfffffffffffffff8\n  1272: u64 [sp] = ra\n  1274: a0 = 0\n  1276: a1 = 0\n  1278: ra = 0x14e\n  1282: jump @0\n      : @50 [@dyn 15] (gas: 14)\n  1285: ra = 0x20\n  1288: sp = sp + 0xfffffffffffffc60\n  1292: u64 [sp + 0x398] = ra\n  1296: u64 [sp + 0x390] = s0\n  1300: u64 [sp + 0x388] = s1\n  1304: s0 = sp + 0x3a0\n  1308: sp = sp & 0xffffffffffffffe0\n  1311: u64 [sp + 856] = 0\n  1315: u64 [sp + 848] = 0\n  1319: u64 [sp + 840] = 0\n  1323: u64 [sp + 832] = 0\n  1327: i32 a0 = sp + 0x340\n  1331: ecalli 17 // 'value_transferred'\n  1333: jump @280\n      : @51 [@dyn 16] (gas: 1)\n  1336: ra = 34, jump @117\n      : @52 [@dyn 17] (gas: 1)\n  1341: ra = 36, jump @160\n      : @53 [@dyn 18] (gas: 1)\n  1346: ra = 38, jump @240\n      : @54 [@dyn 19] (gas: 14)\n  1351: ra = 0x28\n  1354: sp = sp + 0xfffffffffffffec0\n  1358: u64 [sp + 0x138] = ra\n  1362: u64 [sp + 0x130] = s0\n  1366: u64 [sp + 0x128] = s1\n  1370: s0 = sp + 0x140\n  1374: sp = sp & 0xffffffffffffffe0\n  1377: u64 [sp + 280] = 0\n  1381: u64 [sp + 272] = 0\n  1385: u64 [sp + 264] = 0\n  1389: u64 [sp + 256] = 0\n  1393: i32 a0 = sp + 0x100\n  1397: ecalli 17 // 'value_transferred'\n  1399: jump @97\n      : @55 [@dyn 20] (gas: 14)\n  1402: ra = 0x2a\n  1405: sp = sp + 0xffffffffffffff40\n  1409: u64 [sp + 0xb8] = ra\n  1413: u64 [sp + 0xb0] = s0\n  1417: u64 [sp + 0xa8] = s1\n  1421: s0 = sp + 0xc0\n  1425: sp = sp & 0xffffffffffffffe0\n  1428: u64 [sp + 120] = 0\n  1431: u64 [sp + 112] = 0\n  1434: u64 [sp + 104] = 0\n  1437: u64 [sp + 96] = 0\n  1440: i32 a0 = sp + 0x60\n  1443: ecalli 17 // 'value_transferred'\n  1445: jump @147\n      : @56 [@dyn 21] (gas: 13)\n  1448: a0 = u32 [s1]\n  1450: u64 [sp + 88] = 0\n  1453: u64 [sp + 80] = 0\n  1456: u64 [sp + 72] = 0\n  1459: u64 [sp + 0x40] = a0\n  1462: u64 [sp + 120] = 0\n  1465: u64 [sp + 112] = 0\n  1468: u64 [sp + 96] = 0x4\n  1472: a0 = sp + 0x80\n  1476: a1 = sp + 0x60\n  1479: a2 = sp + 0x40\n  1482: u64 [sp + 104] = 0\n  1485: ra = 44, jump @65\n      : @57 [@dyn 22] (gas: 19)\n  1490: t0 = u64 [sp + 0x80]\n  1494: a0 = u64 [sp + 0x88]\n  1498: a1 = u64 [sp + 0x90]\n  1502: a3 = u64 [sp + 0x98]\n  1506: a4 = u64 [sp + 0xa0]\n  1510: a5 = u64 [sp + 0xa8]\n  1514: s1 = u64 [sp + 0xb0]\n  1518: a2 = u64 [sp + 0xb8]\n  1522: u64 [sp + 0x18] = a2\n  1525: u64 [sp + 0x10] = s1\n  1528: u64 [sp + 0x8] = a5\n  1531: u64 [sp] = a4\n  1533: u64 [sp + 0x38] = a3\n  1536: u64 [sp + 0x30] = a1\n  1539: u64 [sp + 0x28] = a0\n  1542: a0 = sp + 0x20\n  1545: a1 = sp\n  1547: u64 [sp + 0x20] = t0\n  1550: ra = 46, jump @586\n      : @58 [@dyn 23] (gas: 3)\n  1556: a0 = 0x40\n  1559: a1 = 0x20\n  1562: ra = 48, jump @0\n      : @59 [@dyn 24] (gas: 100)\n  1567: a1 = u8 [a0 + 0x11]\n  1570: a2 = u8 [a0 + 0x10]\n  1573: a3 = u8 [a0 + 0x12]\n  1576: a4 = u8 [a0 + 0x13]\n  1579: a1 = a1 << 0x8\n  1582: a1 = a1 | a2\n  1585: a3 = a3 << 0x10\n  1588: a4 = a4 << 0x18\n  1591: a3 = a3 | a4\n  1594: a1 = a1 | a3\n  1597: a2 = u8 [a0 + 0x15]\n  1600: a3 = u8 [a0 + 0x14]\n  1603: a4 = u8 [a0 + 0x16]\n  1606: a5 = u8 [a0 + 0x17]\n  1609: a2 = a2 << 0x8\n  1612: a2 = a2 | a3\n  1615: a4 = a4 << 0x10\n  1618: a5 = a5 << 0x18\n  1621: a4 = a4 | a5\n  1624: a2 = a2 | a4\n  1627: a2 = a2 << 0x20\n  1630: t0 = a2 | a1\n  1633: a2 = u8 [a0 + 0x1]\n  1636: a3 = u8 [a0]\n  1638: a4 = u8 [a0 + 0x2]\n  1641: a5 = u8 [a0 + 0x3]\n  1644: a2 = a2 << 0x8\n  1647: a2 = a2 | a3\n  1650: a4 = a4 << 0x10\n  1653: a5 = a5 << 0x18\n  1656: a4 = a4 | a5\n  1659: a2 = a2 | a4\n  1662: a3 = u8 [a0 + 0x5]\n  1665: a4 = u8 [a0 + 0x4]\n  1668: a5 = u8 [a0 + 0x6]\n  1671: s1 = u8 [a0 + 0x7]\n  1674: a3 = a3 << 0x8\n  1677: a3 = a3 | a4\n  1680: a5 = a5 << 0x10\n  1683: s1 = s1 << 0x18\n  1686: a5 = a5 | s1\n  1689: a3 = a3 | a5\n  1692: a3 = a3 << 0x20\n  1695: a2 = a2 | a3\n  1698: a3 = u8 [a0 + 0x19]\n  1701: a4 = u8 [a0 + 0x18]\n  1704: a5 = u8 [a0 + 0x1a]\n  1707: s1 = u8 [a0 + 0x1b]\n  1710: a3 = a3 << 0x8\n  1713: a3 = a3 | a4\n  1716: a5 = a5 << 0x10\n  1719: s1 = s1 << 0x18\n  1722: a5 = a5 | s1\n  1725: a3 = a3 | a5\n  1728: a4 = u8 [a0 + 0x1d]\n  1731: a5 = u8 [a0 + 0x1c]\n  1734: s1 = u8 [a0 + 0x1e]\n  1737: a1 = u8 [a0 + 0x1f]\n  1740: a4 = a4 << 0x8\n  1743: a4 = a4 | a5\n  1746: s1 = s1 << 0x10\n  1749: a1 = a1 << 0x18\n  1752: a1 = a1 | s1\n  1755: a1 = a1 | a4\n  1758: a1 = a1 << 0x20\n  1761: a3 = a3 | a1\n  1764: a1 = u8 [a0 + 0x9]\n  1767: a4 = u8 [a0 + 0x8]\n  1770: a5 = u8 [a0 + 0xa]\n  1773: s1 = u8 [a0 + 0xb]\n  1776: a1 = a1 << 0x8\n  1779: a1 = a1 | a4\n  1782: a5 = a5 << 0x10\n  1785: s1 = s1 << 0x18\n  1788: a5 = a5 | s1\n  1791: a1 = a1 | a5\n  1794: a4 = u8 [a0 + 0xd]\n  1797: a5 = u8 [a0 + 0xc]\n  1800: s1 = u8 [a0 + 0xe]\n  1803: a0 = u8 [a0 + 0xf]\n  1806: a4 = a4 << 0x8\n  1809: a4 = a4 | a5\n  1812: s1 = s1 << 0x10\n  1815: a0 = a0 << 0x18\n  1818: a0 = a0 | s1\n  1821: a0 = a0 | a4\n  1824: a0 = a0 << 0x20\n  1827: a0 = a0 | a1\n  1830: a1 = reverse a0\n  1832: a0 = reverse a3\n  1834: a2 = reverse a2\n  1836: a3 = reverse t0\n  1838: a2 = a2 | a3\n  1841: a3 = a0 | a1\n  1844: a3 = a3 | a2\n  1847: a3 = a3 >> 0x20\n  1850: a1 = a1 | a2\n  1853: a1 = a1 << 0x20\n  1856: a1 = a1 | a3\n  1859: jump @61 if a1 == 0\n      : @60 (gas: 1)\n  1862: trap\n      : @61 (gas: 2)\n  1863: i32 a0 = a0 + 0\n  1865: ra = 50, jump @0\n      : @62 [@dyn 25] (gas: 6)\n  1870: i32 a1 = a0 + 0\n  1872: a0 = 0\n  1874: a2 = 0\n  1876: ra = 0x34\n  1879: ecalli 14 // 'seal_return'\n  1881: fallthrough\n      : @63 [@dyn 26] (gas: 7)\n  1882: sp = sp + 0xfffffffffffffff0\n  1885: u64 [sp + 0x8] = ra\n  1888: u64 [sp] = s0\n  1890: s0 = a0\n  1892: a0 = 0x40\n  1895: a1 = 0x20\n  1898: ra = 54, jump @0\n      : @64 [@dyn 27] (gas: 100)\n  1903: a1 = u8 [a0 + 0x1]\n  1906: a2 = u8 [a0]\n  1908: a3 = u8 [a0 + 0x2]\n  1911: a4 = u8 [a0 + 0x3]\n  1914: a1 = a1 << 0x8\n  1917: a1 = a1 | a2\n  1920: a3 = a3 << 0x10\n  1923: a4 = a4 << 0x18\n  1926: a3 = a3 | a4\n  1929: a1 = a1 | a3\n  1932: a2 = u8 [a0 + 0x5]\n  1935: a3 = u8 [a0 + 0x4]\n  1938: a4 = u8 [a0 + 0x6]\n  1941: a5 = u8 [a0 + 0x7]\n  1944: a2 = a2 << 0x8\n  1947: a2 = a2 | a3\n  1950: a4 = a4 << 0x10\n  1953: a5 = a5 << 0x18\n  1956: a4 = a4 | a5\n  1959: a2 = a2 | a4\n  1962: a2 = a2 << 0x20\n  1965: t0 = a2 | a1\n  1968: a2 = u8 [a0 + 0x9]\n  1971: a3 = u8 [a0 + 0x8]\n  1974: a4 = u8 [a0 + 0xa]\n  1977: a5 = u8 [a0 + 0xb]\n  1980: a2 = a2 << 0x8\n  1983: a2 = a2 | a3\n  1986: a4 = a4 << 0x10\n  1989: a5 = a5 << 0x18\n  1992: a4 = a4 | a5\n  1995: a2 = a2 | a4\n  1998: a3 = u8 [a0 + 0xd]\n  2001: a4 = u8 [a0 + 0xc]\n  2004: a5 = u8 [a0 + 0xe]\n  2007: a1 = u8 [a0 + 0xf]\n  2010: a3 = a3 << 0x8\n  2013: a3 = a3 | a4\n  2016: a5 = a5 << 0x10\n  2019: a1 = a1 << 0x18\n  2022: a1 = a1 | a5\n  2025: a1 = a1 | a3\n  2028: a1 = a1 << 0x20\n  2031: t1 = a1 | a2\n  2034: a1 = u8 [a0 + 0x11]\n  2037: a3 = u8 [a0 + 0x10]\n  2040: a4 = u8 [a0 + 0x12]\n  2043: a5 = u8 [a0 + 0x13]\n  2046: a1 = a1 << 0x8\n  2049: a1 = a1 | a3\n  2052: a4 = a4 << 0x10\n  2055: a5 = a5 << 0x18\n  2058: a4 = a4 | a5\n  2061: a1 = a1 | a4\n  2064: a3 = u8 [a0 + 0x15]\n  2067: a4 = u8 [a0 + 0x14]\n  2070: a5 = u8 [a0 + 0x16]\n  2073: a2 = u8 [a0 + 0x17]\n  2076: a3 = a3 << 0x8\n  2079: a3 = a3 | a4\n  2082: a5 = a5 << 0x10\n  2085: a2 = a2 << 0x18\n  2088: a2 = a2 | a5\n  2091: a2 = a2 | a3\n  2094: a2 = a2 << 0x20\n  2097: a3 = a2 | a1\n  2100: a1 = u8 [a0 + 0x19]\n  2103: a2 = u8 [a0 + 0x18]\n  2106: a4 = u8 [a0 + 0x1a]\n  2109: a5 = u8 [a0 + 0x1b]\n  2112: a1 = a1 << 0x8\n  2115: a1 = a1 | a2\n  2118: a4 = a4 << 0x10\n  2121: a5 = a5 << 0x18\n  2124: a4 = a4 | a5\n  2127: a1 = a1 | a4\n  2130: a2 = u8 [a0 + 0x1d]\n  2133: a4 = u8 [a0 + 0x1c]\n  2136: a5 = u8 [a0 + 0x1e]\n  2139: a0 = u8 [a0 + 0x1f]\n  2142: a2 = a2 << 0x8\n  2145: a2 = a2 | a4\n  2148: a5 = a5 << 0x10\n  2151: a0 = a0 << 0x18\n  2154: a0 = a0 | a5\n  2157: a0 = a0 | a2\n  2160: a0 = a0 << 0x20\n  2163: a0 = a0 | a1\n  2166: a0 = reverse a0\n  2168: a1 = reverse a3\n  2170: a2 = reverse t1\n  2172: a3 = reverse t0\n  2174: u64 [s0 + 0x18] = a3\n  2177: u64 [s0 + 0x10] = a2\n  2180: u64 [s0 + 0x8] = a1\n  2183: u64 [s0] = a0\n  2185: ra = u64 [sp + 0x8]\n  2188: s0 = u64 [sp]\n  2190: sp = sp + 0x10\n  2193: ret\n      : @65 (gas: 47)\n  2195: sp = sp + 0xffffffffffffff80\n  2198: u64 [sp + 0x78] = ra\n  2201: u64 [sp + 0x70] = s0\n  2204: u64 [sp + 0x68] = s1\n  2207: s0 = sp + 0x80\n  2211: sp = sp & 0xffffffffffffffe0\n  2214: ra = u64 [a1 + 0x10]\n  2217: a5 = u64 [a1 + 0x8]\n  2220: a3 = u64 [a2 + 0x8]\n  2223: t1 = u64 [a1]\n  2225: a4 = u64 [a2]\n  2227: u64 [sp + 0x28] = a4\n  2230: t2 = u64 [a2 + 0x10]\n  2233: t0 = a3 ^ a5\n  2236: s1 = a3 <u a5\n  2239: a4 = a4 <u t1\n  2242: u64 [sp + 0x20] = a4\n  2245: s1 = a4 if t0 == 0\n  2248: t0 = u64 [a1 + 0x18]\n  2251: a1 = u64 [a2 + 0x18]\n  2254: u64 [sp + 0x18] = a1\n  2257: a2 = t2 - ra\n  2260: a1 = a2 - s1\n  2263: u64 [sp + 0x30] = a1\n  2266: a1 = a2 <u s1\n  2269: a4 = t2 <u ra\n  2272: u64 [sp + 0x38] = t0\n  2275: a2 = u64 [sp + 0x18]\n  2278: a2 = a2 - t0\n  2281: a2 = a2 - a4\n  2284: a2 = a2 - a1\n  2287: a1 = a3 - a5\n  2290: a3 = u64 [sp + 0x20]\n  2293: a1 = a1 - a3\n  2296: a3 = u64 [sp + 0x28]\n  2299: a3 = a3 - t1\n  2302: a4 = a1 >u 0\n  2304: a3 = a3 <u 0x40\n  2307: a3 = a3 ^ 0x1\n  2310: a3 = a4 if a1 != 0\n  2313: s1 = a2 >s 0\n  2315: a1 = u64 [sp + 0x30]\n  2318: a4 = a1 >u 0\n  2320: a4 = s1 if a2 != 0\n  2323: a1 = a1 | a2\n  2326: a3 = a4 if a1 != 0\n  2329: jump @72 if a3 == 0\n      : @66 (gas: 12)\n  2333: s1 = a0\n  2335: a0 = t1 | ra\n  2338: u64 [sp + 0x30] = a5\n  2341: a1 = u64 [sp + 0x38]\n  2344: a1 = a1 | a5\n  2347: a0 = a0 | a1\n  2350: a0 = a0 >> 0x20\n  2353: u64 [sp + 0x28] = ra\n  2356: a1 = a1 | ra\n  2359: a1 = a1 << 0x20\n  2362: a0 = a0 | a1\n  2365: jump @71 if a0 != 0\n      : @67 (gas: 6)\n  2369: u64 [sp + 0x20] = t1\n  2372: i32 a1 = t1 + 0\n  2374: i32 a0 = sp + 0x40\n  2377: u64 [sp + 0x8] = a1\n  2380: ecalli 3 // 'call_data_load'\n  2382: fallthrough\n      : @68 (gas: 10)\n  2383: a3 = u64 [sp + 0x50]\n  2386: a4 = u64 [sp + 0x58]\n  2389: a0 = 0x100000000\n  2399: a1 = a3 ^ a0\n  2402: a1 = a1 | a4\n  2405: a2 = a3 >> 0x20\n  2408: a2 = a2 <u 0x1\n  2411: a2 = 0 if a4 != 0\n  2413: a2 = 0 if a1 == 0\n  2415: jump @72 if a2 == 0\n      : @69 (gas: 12)\n  2419: u64 [sp + 0x10] = a4\n  2422: u64 [sp + 0x18] = a3\n  2425: a1 = u64 [sp + 0x28]\n  2428: a2 = u64 [sp + 0x38]\n  2431: a1 = a1 | a2\n  2434: a0 = 0xffffffe0\n  2444: a2 = u64 [sp + 0x20]\n  2447: a0 = a2 <u a0\n  2450: a2 = u64 [sp + 0x30]\n  2453: a0 = 0 if a2 != 0\n  2455: a0 = 0 if a1 != 0\n  2457: jump @71 if a0 == 0\n      : @70 (gas: 30)\n  2460: a0 = u64 [sp + 0x48]\n  2463: u64 [sp + 0x30] = a0\n  2466: a0 = u64 [sp + 0x40]\n  2469: u64 [sp + 0x38] = a0\n  2472: a0 = u64 [sp + 0x8]\n  2475: i32 a1 = a0 + 0x20\n  2478: i32 a0 = sp + 0x40\n  2481: ecalli 3 // 'call_data_load'\n  2483: a0 = u64 [sp + 0x58]\n  2486: a1 = u64 [sp + 0x50]\n  2489: a2 = u64 [sp + 0x48]\n  2492: a3 = u64 [sp + 0x40]\n  2495: u64 [s1 + 0x38] = a0\n  2498: u64 [s1 + 0x30] = a1\n  2501: u64 [s1 + 0x28] = a2\n  2504: u64 [s1 + 0x20] = a3\n  2507: a0 = u64 [sp + 0x10]\n  2510: u64 [s1 + 0x18] = a0\n  2513: a0 = u64 [sp + 0x18]\n  2516: u64 [s1 + 0x10] = a0\n  2519: a0 = u64 [sp + 0x30]\n  2522: u64 [s1 + 0x8] = a0\n  2525: a0 = u64 [sp + 0x38]\n  2528: u64 [s1] = a0\n  2530: sp = s0 + 0xffffffffffffff80\n  2533: ra = u64 [sp + 0x78]\n  2536: s0 = u64 [sp + 0x70]\n  2539: s1 = u64 [sp + 0x68]\n  2542: sp = sp + 0x80\n  2546: ret\n      : @71 (gas: 1)\n  2548: trap\n      : @72 (gas: 3)\n  2549: a0 = 0\n  2551: a1 = 0\n  2553: ra = 56, jump @0\n      : @73 [@dyn 28] (gas: 6)\n  2558: i32 a1 = a0 + 0\n  2560: a0 = 0x1\n  2563: a2 = 0\n  2565: ra = 0x3a\n  2568: ecalli 14 // 'seal_return'\n  2570: fallthrough\n      : @74 [@dyn 29] (gas: 9)\n  2571: a2 = u64 [a1 + 0x18]\n  2574: a3 = u64 [a1 + 0x10]\n  2577: a4 = u64 [a1 + 0x8]\n  2580: a1 = u64 [a1]\n  2582: u64 [a0 + 0x18] = a2\n  2585: u64 [a0 + 0x10] = a3\n  2588: u64 [a0 + 0x8] = a4\n  2591: u64 [a0] = a1\n  2593: ret\n      : @75 (gas: 38)\n  2595: sp = sp + 0xfffffffffffffee0\n  2599: u64 [sp + 0x118] = ra\n  2603: u64 [sp + 0x110] = s0\n  2607: u64 [sp + 0x108] = s1\n  2611: s0 = sp + 0x120\n  2615: sp = sp & 0xffffffffffffffe0\n  2618: u64 [sp + 0x40] = a0\n  2621: a0 = u64 [a2]\n  2623: u64 [sp + 0x48] = a0\n  2626: a0 = u64 [a2 + 0x8]\n  2629: u64 [sp + 0x50] = a0\n  2632: a0 = u64 [a2 + 0x10]\n  2635: u64 [sp + 0x58] = a0\n  2638: s1 = u64 [a2 + 0x18]\n  2641: a4 = u64 [a1 + 0x18]\n  2644: a3 = u64 [a1 + 0x10]\n  2647: a2 = u64 [a1 + 0x8]\n  2650: a0 = u64 [a1]\n  2652: u64 [sp + 0x18] = a4\n  2655: u64 [sp + 0xb8] = a4\n  2659: u64 [sp + 0x20] = a3\n  2662: u64 [sp + 0xb0] = a3\n  2666: u64 [sp + 0x28] = a2\n  2669: u64 [sp + 0xa8] = a2\n  2673: u64 [sp + 0x30] = a0\n  2676: u64 [sp + 0xa0] = a0\n  2680: u64 [sp + 248] = 0\n  2684: u64 [sp + 240] = 0\n  2688: u64 [sp + 232] = 0\n  2692: u64 [sp + 224] = 0\n  2696: u32 [sp + 192] = 0x20\n  2701: i32 a1 = sp + 0xa0\n  2705: i32 a3 = sp + 0xe0\n  2709: i32 a4 = sp + 0xc0\n  2713: a2 = 0xffffffffffffffff\n  2716: a0 = 0\n  2718: ecalli 7 // 'get_storage'\n  2720: fallthrough\n      : @76 (gas: 20)\n  2721: a0 = u64 [sp + 0xf8]\n  2725: t0 = u64 [sp + 0xe0]\n  2729: a2 = u64 [sp + 0xf0]\n  2733: a3 = u64 [sp + 0xe8]\n  2737: a4 = a0 ^ s1\n  2740: u64 [sp + 0x38] = s1\n  2743: a1 = s1 <u a0\n  2746: a0 = u64 [sp + 0x58]\n  2749: a5 = a0 <u a2\n  2752: a5 = a1 if a4 != 0\n  2755: a1 = u64 [sp + 0x50]\n  2758: t1 = a3 ^ a1\n  2761: a3 = a1 <u a3\n  2764: a1 = u64 [sp + 0x48]\n  2767: a1 = a1 <u t0\n  2770: a1 = a3 if t1 != 0\n  2773: a0 = a0 ^ a2\n  2776: a0 = a0 | a4\n  2779: a1 = a5 if a0 != 0\n  2782: jump @80 if a1 == 0\n      : @77 (gas: 3)\n  2786: a1 = 0x20\n  2789: a0 = 0\n  2791: ra = 60, jump @0\n      : @78 [@dyn 30] (gas: 71)\n  2796: a1 = u64 [sp + 0x18]\n  2799: a1 = reverse a1\n  2801: a2 = u64 [sp + 0x20]\n  2804: a2 = reverse a2\n  2806: a3 = u64 [sp + 0x28]\n  2809: a3 = reverse a3\n  2811: a4 = u64 [sp + 0x30]\n  2814: a4 = reverse a4\n  2816: a5 = a4 >> 0x38\n  2819: u8 [a0 + 0x1f] = a5\n  2822: a5 = a4 >> 0x30\n  2825: u8 [a0 + 0x1e] = a5\n  2828: a5 = a4 >> 0x28\n  2831: u8 [a0 + 0x1d] = a5\n  2834: a5 = a4 >> 0x20\n  2837: u8 [a0 + 0x1c] = a5\n  2840: a5 = a4 >> 0x18\n  2843: u8 [a0 + 0x1b] = a5\n  2846: a5 = a4 >> 0x10\n  2849: u8 [a0 + 0x1a] = a5\n  2852: a5 = a4 >> 0x8\n  2855: u8 [a0 + 0x19] = a5\n  2858: u8 [a0 + 0x18] = a4\n  2861: u8 [a0 + 0x10] = a3\n  2864: a4 = a3 >> 0x38\n  2867: u8 [a0 + 0x17] = a4\n  2870: a4 = a3 >> 0x30\n  2873: u8 [a0 + 0x16] = a4\n  2876: a4 = a3 >> 0x28\n  2879: u8 [a0 + 0x15] = a4\n  2882: a4 = a3 >> 0x20\n  2885: u8 [a0 + 0x14] = a4\n  2888: a4 = a3 >> 0x18\n  2891: u8 [a0 + 0x13] = a4\n  2894: a4 = a3 >> 0x10\n  2897: u8 [a0 + 0x12] = a4\n  2900: a3 = a3 >> 0x8\n  2903: u8 [a0 + 0x11] = a3\n  2906: u8 [a0 + 0x8] = a2\n  2909: a3 = a2 >> 0x38\n  2912: u8 [a0 + 0xf] = a3\n  2915: a3 = a2 >> 0x30\n  2918: u8 [a0 + 0xe] = a3\n  2921: a3 = a2 >> 0x28\n  2924: u8 [a0 + 0xd] = a3\n  2927: a3 = a2 >> 0x20\n  2930: u8 [a0 + 0xc] = a3\n  2933: a3 = a2 >> 0x18\n  2936: u8 [a0 + 0xb] = a3\n  2939: a3 = a2 >> 0x10\n  2942: u8 [a0 + 0xa] = a3\n  2945: a2 = a2 >> 0x8\n  2948: u8 [a0 + 0x9] = a2\n  2951: u8 [a0] = a1\n  2953: a2 = a1 >> 0x38\n  2956: u8 [a0 + 0x7] = a2\n  2959: a2 = a1 >> 0x30\n  2962: u8 [a0 + 0x6] = a2\n  2965: a2 = a1 >> 0x28\n  2968: u8 [a0 + 0x5] = a2\n  2971: a2 = a1 >> 0x20\n  2974: u8 [a0 + 0x4] = a2\n  2977: a2 = a1 >> 0x18\n  2980: u8 [a0 + 0x3] = a2\n  2983: a2 = a1 >> 0x10\n  2986: u8 [a0 + 0x2] = a2\n  2989: a1 = a1 >> 0x8\n  2992: u8 [a0 + 0x1] = a1\n  2995: a1 = 0x20\n  2998: a0 = 0\n  3000: ra = 62, jump @0\n      : @79 [@dyn 31] (gas: 45)\n  3005: i32 a0 = a0 + 0\n  3007: i32 a2 = sp + 0xe0\n  3011: a1 = 0x20\n  3014: ecalli 8 // 'hash_keccak_256'\n  3016: a0 = u64 [sp + 0xe0]\n  3020: a1 = u64 [sp + 0xe8]\n  3024: a2 = u64 [sp + 0xf8]\n  3028: a3 = u64 [sp + 0xf0]\n  3032: t0 = reverse a0\n  3034: a1 = reverse a1\n  3036: a2 = reverse a2\n  3038: a3 = reverse a3\n  3040: a4 = u64 [sp + 0x50]\n  3043: a4 = a4 + a3\n  3046: a5 = u64 [sp + 0x48]\n  3049: a5 = a5 + a2\n  3052: a2 = a5 <u a2\n  3055: a4 = a4 + a2\n  3058: s1 = a4 ^ a3\n  3061: a3 = a4 <u a3\n  3064: a3 = a2 if s1 == 0\n  3067: a2 = u64 [sp + 0x58]\n  3070: a2 = a2 + a1\n  3073: a3 = a3 + a2\n  3076: s1 = a3 <u a2\n  3079: a0 = u64 [sp + 0x38]\n  3082: a0 = a0 + t0\n  3085: a1 = a2 <u a1\n  3088: a0 = a0 + a1\n  3091: a0 = a0 + s1\n  3094: a1 = u64 [sp + 0x40]\n  3097: u64 [a1 + 56] = 0\n  3100: u64 [a1 + 48] = 0\n  3103: u64 [a1 + 40] = 0\n  3106: u64 [a1 + 32] = 0\n  3109: u64 [a1] = a5\n  3111: u64 [a1 + 0x8] = a4\n  3114: u64 [a1 + 0x10] = a3\n  3117: u64 [a1 + 0x18] = a0\n  3120: sp = s0 + 0xfffffffffffffee0\n  3124: ra = u64 [sp + 0x118]\n  3128: s0 = u64 [sp + 0x110]\n  3132: s1 = u64 [sp + 0x108]\n  3136: sp = sp + 0x120\n  3140: ret\n      : @80 (gas: 8)\n  3142: u64 [sp + 144] = 0\n  3146: u64 [sp + 136] = 0\n  3150: u64 [sp + 128] = 0\n  3154: a0 = 0x4e487b7100000000\n  3164: a1 = sp + 0x80\n  3168: u64 [sp + 0x98] = a0\n  3172: a0 = 0\n  3174: ra = 64, jump @8\n      : @81 [@dyn 32] (gas: 7)\n  3179: u64 [sp + 120] = 0\n  3182: u64 [sp + 112] = 0\n  3185: u64 [sp + 96] = 0x32\n  3189: a0 = 0x4\n  3192: a1 = sp + 0x60\n  3195: u64 [sp + 104] = 0\n  3198: ra = 66, jump @8\n      : @82 [@dyn 33] (gas: 3)\n  3203: a1 = 0x24\n  3206: a0 = 0\n  3208: ra = 68, jump @0\n      : @83 [@dyn 34] (gas: 6)\n  3213: i32 a1 = a0 + 0\n  3215: a0 = 0x1\n  3218: a2 = 0x24\n  3221: ra = 0x46\n  3224: ecalli 14 // 'seal_return'\n  3226: fallthrough\n      : @84 [@dyn 35] (gas: 236)\n  3227: sp = sp + 0xffffffffffffffa0\n  3230: u64 [sp + 0x58] = ra\n  3233: u64 [sp + 0x50] = s0\n  3236: u64 [sp + 0x48] = s1\n  3239: u64 [sp] = a0\n  3241: t0 = u64 [a1]\n  3243: t1 = u64 [a2]\n  3245: a0 = u64 [a2 + 0x8]\n  3248: a3 = u64 [a2 + 0x10]\n  3251: a4 = u64 [a1 + 0x18]\n  3254: s0 = u64 [a1 + 0x10]\n  3257: a2 = u64 [a2 + 0x18]\n  3260: a1 = u64 [a1 + 0x8]\n  3263: t2 = a4 >u 0\n  3265: s1 = s0 >u 0\n  3267: s1 = t2 if a4 != 0\n  3270: ra = a1 >u 0\n  3272: a5 = t0 <u 0x100\n  3276: t2 = a5 ^ 0x1\n  3279: t2 = ra if a1 != 0\n  3282: a4 = a4 | s0\n  3285: t2 = s1 if a4 != 0\n  3288: u8 [sp + 71] = 0\n  3291: u8 [sp + 70] = 0\n  3294: u8 [sp + 69] = 0\n  3297: u8 [sp + 68] = 0\n  3300: u8 [sp + 67] = 0\n  3303: u8 [sp + 66] = 0\n  3306: u8 [sp + 65] = 0\n  3309: u8 [sp + 64] = 0\n  3312: u8 [sp + 63] = 0\n  3315: u8 [sp + 62] = 0\n  3318: u8 [sp + 61] = 0\n  3321: u8 [sp + 60] = 0\n  3324: u8 [sp + 59] = 0\n  3327: u8 [sp + 58] = 0\n  3330: u8 [sp + 57] = 0\n  3333: u8 [sp + 56] = 0\n  3336: u8 [sp + 55] = 0\n  3339: u8 [sp + 54] = 0\n  3342: u8 [sp + 53] = 0\n  3345: u8 [sp + 52] = 0\n  3348: u8 [sp + 51] = 0\n  3351: u8 [sp + 50] = 0\n  3354: u8 [sp + 49] = 0\n  3357: u8 [sp + 48] = 0\n  3360: u8 [sp + 47] = 0\n  3363: u8 [sp + 46] = 0\n  3366: u8 [sp + 45] = 0\n  3369: u8 [sp + 44] = 0\n  3372: u8 [sp + 43] = 0\n  3375: u8 [sp + 42] = 0\n  3378: u8 [sp + 41] = 0\n  3381: u8 [sp + 40] = 0\n  3384: u8 [sp + 0x20] = a2\n  3387: u8 [sp + 0x18] = a3\n  3390: u8 [sp + 0x10] = a0\n  3393: u8 [sp + 0x8] = t1\n  3396: a1 = a2 >> 0x38\n  3399: u8 [sp + 0x27] = a1\n  3402: a1 = a2 >> 0x30\n  3405: u8 [sp + 0x26] = a1\n  3408: a1 = a2 >> 0x28\n  3411: u8 [sp + 0x25] = a1\n  3414: a1 = a2 >> 0x20\n  3417: u8 [sp + 0x24] = a1\n  3420: a1 = a2 >> 0x18\n  3423: u8 [sp + 0x23] = a1\n  3426: a1 = a2 >> 0x10\n  3429: u8 [sp + 0x22] = a1\n  3432: a2 = a2 >> 0x8\n  3435: u8 [sp + 0x21] = a2\n  3438: a1 = a3 >> 0x38\n  3441: u8 [sp + 0x1f] = a1\n  3444: a1 = a3 >> 0x30\n  3447: u8 [sp + 0x1e] = a1\n  3450: a1 = a3 >> 0x28\n  3453: u8 [sp + 0x1d] = a1\n  3456: a1 = a3 >> 0x20\n  3459: u8 [sp + 0x1c] = a1\n  3462: a1 = a3 >> 0x18\n  3465: u8 [sp + 0x1b] = a1\n  3468: a1 = a3 >> 0x10\n  3471: u8 [sp + 0x1a] = a1\n  3474: a3 = a3 >> 0x8\n  3477: u8 [sp + 0x19] = a3\n  3480: a1 = a0 >> 0x38\n  3483: u8 [sp + 0x17] = a1\n  3486: a1 = a0 >> 0x30\n  3489: u8 [sp + 0x16] = a1\n  3492: a1 = a0 >> 0x28\n  3495: u8 [sp + 0x15] = a1\n  3498: a1 = a0 >> 0x20\n  3501: u8 [sp + 0x14] = a1\n  3504: a1 = a0 >> 0x18\n  3507: u8 [sp + 0x13] = a1\n  3510: a1 = a0 >> 0x10\n  3513: u8 [sp + 0x12] = a1\n  3516: a0 = a0 >> 0x8\n  3519: u8 [sp + 0x11] = a0\n  3522: a0 = t1 >> 0x38\n  3525: u8 [sp + 0xf] = a0\n  3528: a0 = t1 >> 0x30\n  3531: u8 [sp + 0xe] = a0\n  3534: a0 = t1 >> 0x28\n  3537: u8 [sp + 0xd] = a0\n  3540: a0 = t1 >> 0x20\n  3543: u8 [sp + 0xc] = a0\n  3546: a0 = t1 >> 0x18\n  3549: u8 [sp + 0xb] = a0\n  3552: a0 = t1 >> 0x10\n  3555: u8 [sp + 0xa] = a0\n  3558: a0 = t1 >> 0x8\n  3561: u8 [sp + 0x9] = a0\n  3564: a0 = t0 << 0x38\n  3567: a0 = a0 >> 0x3b\n  3570: a2 = sp + 0x8\n  3573: a2 = a2 + a0\n  3576: a0 = u8 [a2 + 0x11]\n  3579: a1 = u8 [a2 + 0x10]\n  3582: a3 = u8 [a2 + 0x12]\n  3585: a4 = u8 [a2 + 0x13]\n  3588: a0 = a0 << 0x8\n  3591: a0 = a0 | a1\n  3594: a3 = a3 << 0x10\n  3597: a4 = a4 << 0x18\n  3600: a3 = a3 | a4\n  3603: a0 = a0 | a3\n  3606: a1 = u8 [a2 + 0x15]\n  3609: a3 = u8 [a2 + 0x14]\n  3612: a4 = u8 [a2 + 0x16]\n  3615: a5 = u8 [a2 + 0x17]\n  3618: a1 = a1 << 0x8\n  3621: a1 = a1 | a3\n  3624: a4 = a4 << 0x10\n  3627: a5 = a5 << 0x18\n  3630: a4 = a4 | a5\n  3633: a1 = a1 | a4\n  3636: a1 = a1 << 0x20\n  3639: ra = a1 | a0\n  3642: a3 = t0 & 0x7\n  3645: a1 = ra >> a3\n  3648: a0 = u8 [a2 + 0x19]\n  3651: a4 = u8 [a2 + 0x18]\n  3654: s1 = u8 [a2 + 0x1a]\n  3657: s0 = u8 [a2 + 0x1b]\n  3660: a0 = a0 << 0x8\n  3663: a0 = a0 | a4\n  3666: s1 = s1 << 0x10\n  3669: s0 = s0 << 0x18\n  3672: s0 = s0 | s1\n  3675: a0 = a0 | s0\n  3678: a4 = u8 [a2 + 0x1d]\n  3681: s1 = u8 [a2 + 0x1c]\n  3684: s0 = u8 [a2 + 0x1e]\n  3687: a5 = u8 [a2 + 0x1f]\n  3690: a4 = a4 << 0x8\n  3693: a4 = a4 | s1\n  3696: s0 = s0 << 0x10\n  3699: a5 = a5 << 0x18\n  3702: a5 = a5 | s0\n  3705: a4 = a4 | a5\n  3708: a4 = a4 << 0x20\n  3711: t0 = a4 | a0\n  3714: a0 = t0 << 0x1\n  3717: t1 = a3 ^ 0x3f\n  3720: a4 = a0 << t1\n  3723: a4 = a4 | a1\n  3726: a0 = u8 [a2 + 0x9]\n  3729: a1 = u8 [a2 + 0x8]\n  3732: a5 = u8 [a2 + 0xa]\n  3735: s0 = u8 [a2 + 0xb]\n  3738: a0 = a0 << 0x8\n  3741: a0 = a0 | a1\n  3744: a5 = a5 << 0x10\n  3747: s0 = s0 << 0x18\n  3750: a5 = a5 | s0\n  3753: a0 = a0 | a5\n  3756: a1 = u8 [a2 + 0xd]\n  3759: a5 = u8 [a2 + 0xc]\n  3762: s0 = u8 [a2 + 0xe]\n  3765: s1 = u8 [a2 + 0xf]\n  3768: a1 = a1 << 0x8\n  3771: a1 = a1 | a5\n  3774: s0 = s0 << 0x10\n  3777: s1 = s1 << 0x18\n  3780: s0 = s0 | s1\n  3783: a1 = a1 | s0\n  3786: a1 = a1 << 0x20\n  3789: a1 = a1 | a0\n  3792: a0 = a1 >> a3\n  3795: ra = ra << 0x1\n  3798: a5 = a3 ^ 0xffffffffffffffff\n  3801: a5 = ra << a5\n  3804: ra = a0 | a5\n  3807: a0 = u8 [a2 + 0x1]\n  3810: s0 = u8 [a2]\n  3812: s1 = u8 [a2 + 0x2]\n  3815: a5 = u8 [a2 + 0x3]\n  3818: a0 = a0 << 0x8\n  3821: a0 = a0 | s0\n  3824: s1 = s1 << 0x10\n  3827: a5 = a5 << 0x18\n  3830: a5 = a5 | s1\n  3833: a0 = a0 | a5\n  3836: a5 = u8 [a2 + 0x5]\n  3839: s0 = u8 [a2 + 0x4]\n  3842: s1 = u8 [a2 + 0x6]\n  3845: a2 = u8 [a2 + 0x7]\n  3848: a5 = a5 << 0x8\n  3851: a5 = a5 | s0\n  3854: s1 = s1 << 0x10\n  3857: a2 = a2 << 0x18\n  3860: a2 = a2 | s1\n  3863: a2 = a2 | a5\n  3866: a2 = a2 << 0x20\n  3869: a0 = a0 | a2\n  3872: a0 = a0 >> a3\n  3875: a1 = a1 << 0x1\n  3878: a1 = a1 << t1\n  3881: a0 = a0 | a1\n  3884: a1 = t0 >> a3\n  3887: a0 = 0 if t2 != 0\n  3889: ra = 0 if t2 != 0\n  3891: a4 = 0 if t2 != 0\n  3893: a1 = 0 if t2 != 0\n  3895: a2 = u64 [sp]\n  3897: u64 [a2 + 0x18] = a1\n  3900: u64 [a2 + 0x10] = a4\n  3903: u64 [a2 + 0x8] = ra\n  3906: u64 [a2] = a0\n  3908: ra = u64 [sp + 0x58]\n  3911: s0 = u64 [sp + 0x50]\n  3914: s1 = u64 [sp + 0x48]\n  3917: sp = sp + 0x60\n  3920: ret\n      : @85 [@dyn 36] (gas: 58)\n  3922: a1 = reverse s1\n  3924: a2 = u64 [sp + 0x28]\n  3927: a2 = reverse a2\n  3929: a3 = u64 [sp + 0x50]\n  3932: a3 = reverse a3\n  3934: a4 = a3 >> 0x38\n  3937: u8 [a0 + 0x1f] = a4\n  3940: a4 = a3 >> 0x30\n  3943: u8 [a0 + 0x1e] = a4\n  3946: a4 = a3 >> 0x28\n  3949: u8 [a0 + 0x1d] = a4\n  3952: a4 = a3 >> 0x20\n  3955: u8 [a0 + 0x1c] = a4\n  3958: a4 = a3 >> 0x18\n  3961: u8 [a0 + 0x1b] = a4\n  3964: a4 = a3 >> 0x10\n  3967: u8 [a0 + 0x1a] = a4\n  3970: a4 = a3 >> 0x8\n  3973: u8 [a0 + 0x19] = a4\n  3976: u8 [a0 + 0x18] = a3\n  3979: a3 = a2 >> 0x38\n  3982: u8 [a0 + 0x17] = a3\n  3985: a3 = a2 >> 0x30\n  3988: u8 [a0 + 0x16] = a3\n  3991: a3 = a2 >> 0x28\n  3994: u8 [a0 + 0x15] = a3\n  3997: a3 = a2 >> 0x20\n  4000: u8 [a0 + 0x14] = a3\n  4003: a3 = a2 >> 0x18\n  4006: u8 [a0 + 0x13] = a3\n  4009: a3 = a2 >> 0x10\n  4012: u8 [a0 + 0x12] = a3\n  4015: a3 = a2 >> 0x8\n  4018: u8 [a0 + 0x11] = a3\n  4021: u8 [a0 + 0x10] = a2\n  4024: a2 = a1 >> 0x38\n  4027: u8 [a0 + 0xf] = a2\n  4030: a2 = a1 >> 0x30\n  4033: u8 [a0 + 0xe] = a2\n  4036: a2 = a1 >> 0x28\n  4039: u8 [a0 + 0xd] = a2\n  4042: a2 = a1 >> 0x20\n  4045: u8 [a0 + 0xc] = a2\n  4048: u8 [a0 + 11] = 0\n  4051: u8 [a0 + 10] = 0\n  4054: u8 [a0 + 9] = 0\n  4057: u8 [a0 + 0x8] = a1\n  4060: u8 [a0 + 7] = 0\n  4063: u8 [a0 + 6] = 0\n  4066: u8 [a0 + 5] = 0\n  4069: u8 [a0 + 4] = 0\n  4072: u8 [a0 + 3] = 0\n  4075: u8 [a0 + 2] = 0\n  4078: u8 [a0 + 1] = 0\n  4081: u8 [a0 + 0] = 0\n  4083: a0 = 0x20\n  4086: a1 = 0x20\n  4089: ra = 74, jump @0\n      : @86 [@dyn 37] (gas: 35)\n  4094: u8 [a0 + 31] = 0x1\n  4098: u8 [a0 + 30] = 0\n  4101: u8 [a0 + 29] = 0\n  4104: u8 [a0 + 28] = 0\n  4107: u8 [a0 + 27] = 0\n  4110: u8 [a0 + 26] = 0\n  4113: u8 [a0 + 25] = 0\n  4116: u8 [a0 + 24] = 0\n  4119: u8 [a0 + 23] = 0\n  4122: u8 [a0 + 22] = 0\n  4125: u8 [a0 + 21] = 0\n  4128: u8 [a0 + 20] = 0\n  4131: u8 [a0 + 19] = 0\n  4134: u8 [a0 + 18] = 0\n  4137: u8 [a0 + 17] = 0\n  4140: u8 [a0 + 16] = 0\n  4143: u8 [a0 + 15] = 0\n  4146: u8 [a0 + 14] = 0\n  4149: u8 [a0 + 13] = 0\n  4152: u8 [a0 + 12] = 0\n  4155: u8 [a0 + 11] = 0\n  4158: u8 [a0 + 10] = 0\n  4161: u8 [a0 + 9] = 0\n  4164: u8 [a0 + 8] = 0\n  4167: u8 [a0 + 7] = 0\n  4170: u8 [a0 + 6] = 0\n  4173: u8 [a0 + 5] = 0\n  4176: u8 [a0 + 4] = 0\n  4179: u8 [a0 + 3] = 0\n  4182: u8 [a0 + 2] = 0\n  4185: u8 [a0 + 1] = 0\n  4188: u8 [a0 + 0] = 0\n  4190: a1 = 0x40\n  4193: a0 = 0\n  4195: ra = 76, jump @0\n      : @87 [@dyn 38] (gas: 32)\n  4200: i32 a0 = a0 + 0\n  4202: i32 a2 = sp + 0x140\n  4206: a1 = 0x40\n  4209: ecalli 8 // 'hash_keccak_256'\n  4211: a0 = u64 [sp + 0x158]\n  4215: a1 = u64 [sp + 0x150]\n  4219: a2 = u64 [sp + 0x148]\n  4223: a3 = u64 [sp + 0x140]\n  4227: a5 = reverse a0\n  4229: a4 = reverse a1\n  4231: a1 = reverse a2\n  4233: a0 = reverse a3\n  4235: u64 [sp + 0x28] = a0\n  4238: u64 [sp + 0x138] = a0\n  4242: u64 [sp + 0x20] = a1\n  4245: u64 [sp + 0x130] = a1\n  4249: u64 [sp + 0x18] = a4\n  4252: u64 [sp + 0x128] = a4\n  4256: u64 [sp + 0x10] = a5\n  4259: u64 [sp + 0x120] = a5\n  4263: u64 [sp + 344] = 0\n  4267: u64 [sp + 336] = 0\n  4271: u64 [sp + 328] = 0\n  4275: u64 [sp + 320] = 0\n  4279: u32 [sp + 352] = 0x20\n  4284: i32 a1 = sp + 0x120\n  4288: i32 a3 = sp + 0x140\n  4292: i32 a4 = sp + 0x160\n  4296: a2 = 0xffffffffffffffff\n  4299: a0 = 0\n  4301: ecalli 7 // 'get_storage'\n  4303: fallthrough\n      : @88 (gas: 20)\n  4304: t1 = u64 [sp + 0x40]\n  4307: t2 = u64 [sp + 0x38]\n  4310: t0 = u64 [sp + 0x30]\n  4313: a0 = u64 [sp + 0x158]\n  4317: a1 = u64 [sp + 0x140]\n  4321: s1 = u64 [sp + 0x150]\n  4325: a3 = u64 [sp + 0x148]\n  4329: a4 = a0 ^ t0\n  4332: a0 = t0 <u a0\n  4335: a2 = u64 [sp + 0x48]\n  4338: a5 = a2 <u s1\n  4341: a5 = a0 if a4 != 0\n  4344: a0 = a3 ^ t2\n  4347: a3 = t2 <u a3\n  4350: a1 = t1 <u a1\n  4353: a1 = a3 if a0 != 0\n  4356: a0 = s1 ^ a2\n  4359: a0 = a0 | a4\n  4362: a1 = a5 if a0 != 0\n  4365: jump @91 if a1 == 0\n      : @89 (gas: 18)\n  4369: a0 = 0xffffffff\n  4379: u64 [sp + 0x50] = a0\n  4382: u64 [sp + 0xa0] = t1\n  4386: a0 = u64 [sp + 0x10]\n  4389: u64 [sp + 0xc0] = a0\n  4393: u64 [sp + 0xa8] = t2\n  4397: a0 = u64 [sp + 0x18]\n  4400: u64 [sp + 0xc8] = a0\n  4404: u64 [sp + 0xb0] = a2\n  4408: a0 = u64 [sp + 0x20]\n  4411: u64 [sp + 0xd0] = a0\n  4415: u64 [sp + 0xb8] = t0\n  4419: a0 = sp + 0xe0\n  4423: a1 = sp + 0xc0\n  4427: a2 = sp + 0xa0\n  4431: a3 = u64 [sp + 0x28]\n  4434: u64 [sp + 0xd8] = a3\n  4438: ra = 78, jump @75\n      : @90 [@dyn 39] (gas: 219)\n  4443: a0 = u64 [sp + 0x118]\n  4447: u64 [sp + 0x48] = a0\n  4450: a0 = u64 [sp + 0x110]\n  4454: u64 [sp + 0x40] = a0\n  4457: s1 = u64 [sp + 0x108]\n  4461: a0 = u64 [sp + 0x100]\n  4465: u64 [sp + 0x38] = a0\n  4468: a0 = u64 [sp + 0xf8]\n  4472: a1 = u64 [sp + 0xf0]\n  4476: a2 = u64 [sp + 0xe8]\n  4480: a3 = u64 [sp + 0xe0]\n  4484: u64 [sp + 0x138] = a0\n  4488: u64 [sp + 0x130] = a1\n  4492: u64 [sp + 0x128] = a2\n  4496: u64 [sp + 0x120] = a3\n  4500: u64 [sp + 344] = 0\n  4504: u64 [sp + 336] = 0\n  4508: u64 [sp + 328] = 0\n  4512: u64 [sp + 320] = 0\n  4516: u32 [sp + 352] = 0x20\n  4521: i32 a1 = sp + 0x120\n  4525: i32 a3 = sp + 0x140\n  4529: i32 a4 = sp + 0x160\n  4533: a2 = 0xffffffffffffffff\n  4536: a0 = 0\n  4538: ecalli 7 // 'get_storage'\n  4540: a1 = u64 [sp + 0x140]\n  4544: a2 = u64 [sp + 0x148]\n  4548: t0 = u64 [sp + 0x38]\n  4551: a0 = t0 >> 0x3d\n  4554: a3 = s1 << 0x3\n  4557: a3 = a3 | a0\n  4560: s1 = s1 >> 0x3d\n  4563: a4 = u64 [sp + 0x40]\n  4566: a0 = a4 << 0x3\n  4569: s1 = s1 | a0\n  4572: a0 = a4 >> 0x3d\n  4575: a4 = u64 [sp + 0x48]\n  4578: a4 = a4 << 0x3\n  4581: a4 = a4 | a0\n  4584: a0 = t0 << 0x3\n  4587: a5 = a3 >u 0\n  4589: a0 = a0 <u 0x100\n  4593: a0 = a0 ^ 0x1\n  4596: a0 = a5 if a3 != 0\n  4599: a3 = a4 >u 0\n  4601: a5 = s1 >u 0\n  4603: a5 = a3 if a4 != 0\n  4606: a3 = u64 [sp + 0x150]\n  4610: s1 = s1 | a4\n  4613: a4 = u64 [sp + 0x158]\n  4617: a0 = a5 if s1 != 0\n  4620: u8 [sp + 159] = 0\n  4624: u8 [sp + 158] = 0\n  4628: u8 [sp + 157] = 0\n  4632: u8 [sp + 156] = 0\n  4636: u8 [sp + 155] = 0\n  4640: u8 [sp + 154] = 0\n  4644: u8 [sp + 153] = 0\n  4648: u8 [sp + 152] = 0\n  4652: u8 [sp + 151] = 0\n  4656: u8 [sp + 150] = 0\n  4660: u8 [sp + 149] = 0\n  4664: u8 [sp + 148] = 0\n  4668: u8 [sp + 147] = 0\n  4672: u8 [sp + 146] = 0\n  4676: u8 [sp + 145] = 0\n  4680: u8 [sp + 144] = 0\n  4684: u8 [sp + 143] = 0\n  4688: u8 [sp + 142] = 0\n  4692: u8 [sp + 141] = 0\n  4696: u8 [sp + 140] = 0\n  4700: u8 [sp + 139] = 0\n  4704: u8 [sp + 138] = 0\n  4708: u8 [sp + 137] = 0\n  4712: u8 [sp + 136] = 0\n  4716: u8 [sp + 135] = 0\n  4720: u8 [sp + 134] = 0\n  4724: u8 [sp + 133] = 0\n  4728: u8 [sp + 132] = 0\n  4732: u8 [sp + 131] = 0\n  4736: u8 [sp + 130] = 0\n  4740: u8 [sp + 129] = 0\n  4744: u8 [sp + 128] = 0\n  4748: u8 [sp + 0x78] = a4\n  4751: u8 [sp + 0x70] = a3\n  4754: u8 [sp + 0x68] = a2\n  4757: u8 [sp + 0x60] = a1\n  4760: a5 = a4 >> 0x38\n  4763: u8 [sp + 0x7f] = a5\n  4766: a5 = a4 >> 0x30\n  4769: u8 [sp + 0x7e] = a5\n  4772: a5 = a4 >> 0x28\n  4775: u8 [sp + 0x7d] = a5\n  4778: a5 = a4 >> 0x20\n  4781: u8 [sp + 0x7c] = a5\n  4784: a5 = a4 >> 0x18\n  4787: u8 [sp + 0x7b] = a5\n  4790: a5 = a4 >> 0x10\n  4793: u8 [sp + 0x7a] = a5\n  4796: a4 = a4 >> 0x8\n  4799: u8 [sp + 0x79] = a4\n  4802: a4 = a3 >> 0x38\n  4805: u8 [sp + 0x77] = a4\n  4808: a4 = a3 >> 0x30\n  4811: u8 [sp + 0x76] = a4\n  4814: a4 = a3 >> 0x28\n  4817: u8 [sp + 0x75] = a4\n  4820: a4 = a3 >> 0x20\n  4823: u8 [sp + 0x74] = a4\n  4826: a4 = a3 >> 0x18\n  4829: u8 [sp + 0x73] = a4\n  4832: a4 = a3 >> 0x10\n  4835: u8 [sp + 0x72] = a4\n  4838: a3 = a3 >> 0x8\n  4841: u8 [sp + 0x71] = a3\n  4844: a3 = a2 >> 0x38\n  4847: u8 [sp + 0x6f] = a3\n  4850: a3 = a2 >> 0x30\n  4853: u8 [sp + 0x6e] = a3\n  4856: a3 = a2 >> 0x28\n  4859: u8 [sp + 0x6d] = a3\n  4862: a3 = a2 >> 0x20\n  4865: u8 [sp + 0x6c] = a3\n  4868: a3 = a2 >> 0x18\n  4871: u8 [sp + 0x6b] = a3\n  4874: a3 = a2 >> 0x10\n  4877: u8 [sp + 0x6a] = a3\n  4880: a2 = a2 >> 0x8\n  4883: u8 [sp + 0x69] = a2\n  4886: a2 = a1 >> 0x38\n  4889: u8 [sp + 0x67] = a2\n  4892: a2 = a1 >> 0x30\n  4895: u8 [sp + 0x66] = a2\n  4898: a2 = a1 >> 0x28\n  4901: u8 [sp + 0x65] = a2\n  4904: a2 = a1 >> 0x20\n  4907: u8 [sp + 0x64] = a2\n  4910: a2 = a1 >> 0x18\n  4913: u8 [sp + 0x63] = a2\n  4916: a2 = a1 >> 0x10\n  4919: u8 [sp + 0x62] = a2\n  4922: a1 = a1 >> 0x8\n  4925: u8 [sp + 0x61] = a1\n  4928: a1 = t0 & 0x1f\n  4931: a2 = sp + 0x60\n  4934: a1 = a1 + a2\n  4937: a2 = u8 [a1 + 0x1]\n  4940: a3 = u8 [a1]\n  4942: a4 = u8 [a1 + 0x2]\n  4945: a5 = u8 [a1 + 0x3]\n  4948: a2 = a2 << 0x8\n  4951: a2 = a2 | a3\n  4954: a4 = a4 << 0x10\n  4957: a5 = a5 << 0x18\n  4960: a4 = a4 | a5\n  4963: a2 = a2 | a4\n  4966: a3 = u8 [a1 + 0x5]\n  4969: a4 = u8 [a1 + 0x4]\n  4972: a5 = u8 [a1 + 0x6]\n  4975: s1 = u8 [a1 + 0x7]\n  4978: a3 = a3 << 0x8\n  4981: a3 = a3 | a4\n  4984: a5 = a5 << 0x10\n  4987: s1 = s1 << 0x18\n  4990: a5 = a5 | s1\n  4993: a3 = a3 | a5\n  4996: a3 = a3 << 0x20\n  4999: t0 = a3 | a2\n  5002: a3 = u8 [a1 + 0x9]\n  5005: a4 = u8 [a1 + 0x8]\n  5008: a5 = u8 [a1 + 0xa]\n  5011: s1 = u8 [a1 + 0xb]\n  5014: a3 = a3 << 0x8\n  5017: a3 = a3 | a4\n  5020: a5 = a5 << 0x10\n  5023: s1 = s1 << 0x18\n  5026: a5 = a5 | s1\n  5029: a3 = a3 | a5\n  5032: a4 = u8 [a1 + 0xd]\n  5035: a5 = u8 [a1 + 0xc]\n  5038: s1 = u8 [a1 + 0xe]\n  5041: a2 = u8 [a1 + 0xf]\n  5044: a4 = a4 << 0x8\n  5047: a4 = a4 | a5\n  5050: s1 = s1 << 0x10\n  5053: a2 = a2 << 0x18\n  5056: a2 = a2 | s1\n  5059: a2 = a2 | a4\n  5062: a2 = a2 << 0x20\n  5065: a2 = a2 | a3\n  5068: a3 = u8 [a1 + 0x11]\n  5071: a4 = u8 [a1 + 0x10]\n  5074: a5 = u8 [a1 + 0x12]\n  5077: a1 = u8 [a1 + 0x13]\n  5080: a3 = a3 << 0x8\n  5083: a3 = a3 | a4\n  5086: a5 = a5 << 0x10\n  5089: a1 = a1 << 0x18\n  5092: a1 = a1 | a5\n  5095: a1 = a1 | a3\n  5098: a2 = a2 & 0xffffffffffffffff\n  5101: a3 = t0 & 0xffffffffffffffff\n  5104: a4 = u64 [sp + 0x50]\n  5107: a1 = a1 & a4\n  5110: a3 = 0 if a0 != 0\n  5112: a2 = 0 if a0 != 0\n  5114: a1 = 0 if a0 != 0\n  5116: a0 = u64 [sp + 0x58]\n  5119: u64 [a0 + 0x10] = a1\n  5122: u64 [a0 + 0x8] = a2\n  5125: u64 [a0] = a3\n  5127: u64 [a0 + 24] = 0\n  5130: sp = s0 + 0xfffffffffffffe80\n  5134: ra = u64 [sp + 0x178]\n  5138: s0 = u64 [sp + 0x170]\n  5142: s1 = u64 [sp + 0x168]\n  5146: sp = sp + 0x180\n  5150: ret\n      : @91 (gas: 2)\n  5152: a0 = 0\n  5154: ra = 80, jump @0\n      : @92 [@dyn 40] (gas: 6)\n  5159: i32 a1 = a0 + 0\n  5161: a0 = 0x1\n  5164: a2 = 0\n  5166: ra = 0x52\n  5169: ecalli 14 // 'seal_return'\n  5171: fallthrough\n      : @93 [@dyn 41] (gas: 12)\n  5172: a2 = u64 [a1 + 0x10]\n  5175: a3 = u64 [a1 + 0x18]\n  5178: a4 = u64 [a1 + 0x8]\n  5181: a1 = u64 [a1]\n  5183: a3 = a3 | a4\n  5186: a4 = a1 | a2\n  5189: a4 = a4 | a3\n  5192: a4 = a4 >> 0x20\n  5195: a2 = a2 | a3\n  5198: a2 = a2 << 0x20\n  5201: a2 = a2 | a4\n  5204: jump @96 if a2 != 0\n      : @94 (gas: 13)\n  5208: sp = sp + 0xffffffffffffffe0\n  5211: u64 [sp + 0x18] = ra\n  5214: u64 [sp + 0x10] = s0\n  5217: u64 [sp + 0x8] = s1\n  5220: a2 = u64 [a0 + 0x10]\n  5223: a3 = u64 [a0 + 0x8]\n  5226: u64 [sp] = a3\n  5228: s1 = u64 [a0]\n  5230: a2 = a2 << 0x20\n  5233: s0 = a2 >> 0x20\n  5236: i32 a0 = a1 + 0\n  5238: a1 = 0x20\n  5241: ra = 84, jump @0\n      : @95 [@dyn 42] (gas: 59)\n  5246: a1 = reverse s0\n  5248: a2 = u64 [sp]\n  5250: a2 = reverse a2\n  5252: a3 = reverse s1\n  5254: a4 = a3 >> 0x38\n  5257: u8 [a0 + 0x1f] = a4\n  5260: a4 = a3 >> 0x30\n  5263: u8 [a0 + 0x1e] = a4\n  5266: a4 = a3 >> 0x28\n  5269: u8 [a0 + 0x1d] = a4\n  5272: a4 = a3 >> 0x20\n  5275: u8 [a0 + 0x1c] = a4\n  5278: a4 = a3 >> 0x18\n  5281: u8 [a0 + 0x1b] = a4\n  5284: a4 = a3 >> 0x10\n  5287: u8 [a0 + 0x1a] = a4\n  5290: a4 = a3 >> 0x8\n  5293: u8 [a0 + 0x19] = a4\n  5296: u8 [a0 + 0x18] = a3\n  5299: u8 [a0 + 0x10] = a2\n  5302: u8 [a0 + 11] = 0\n  5305: u8 [a0 + 10] = 0\n  5308: u8 [a0 + 9] = 0\n  5311: u8 [a0 + 7] = 0\n  5314: u8 [a0 + 6] = 0\n  5317: u8 [a0 + 5] = 0\n  5320: u8 [a0 + 4] = 0\n  5323: u8 [a0 + 3] = 0\n  5326: u8 [a0 + 2] = 0\n  5329: u8 [a0 + 1] = 0\n  5332: u8 [a0 + 0] = 0\n  5334: a3 = a2 >> 0x38\n  5337: u8 [a0 + 0x17] = a3\n  5340: a3 = a2 >> 0x30\n  5343: u8 [a0 + 0x16] = a3\n  5346: a3 = a2 >> 0x28\n  5349: u8 [a0 + 0x15] = a3\n  5352: a3 = a2 >> 0x20\n  5355: u8 [a0 + 0x14] = a3\n  5358: a3 = a2 >> 0x18\n  5361: u8 [a0 + 0x13] = a3\n  5364: a3 = a2 >> 0x10\n  5367: u8 [a0 + 0x12] = a3\n  5370: a2 = a2 >> 0x8\n  5373: u8 [a0 + 0x11] = a2\n  5376: u8 [a0 + 0x8] = a1\n  5379: a2 = a1 >> 0x38\n  5382: u8 [a0 + 0xf] = a2\n  5385: a2 = a1 >> 0x30\n  5388: u8 [a0 + 0xe] = a2\n  5391: a2 = a1 >> 0x28\n  5394: u8 [a0 + 0xd] = a2\n  5397: a1 = a1 >> 0x20\n  5400: u8 [a0 + 0xc] = a1\n  5403: ra = u64 [sp + 0x18]\n  5406: s0 = u64 [sp + 0x10]\n  5409: s1 = u64 [sp + 0x8]\n  5412: sp = sp + 0x20\n  5415: ret\n      : @96 (gas: 1)\n  5417: trap\n      : @97 (gas: 8)\n  5418: a0 = u64 [sp + 0x110]\n  5422: a1 = u64 [sp + 0x118]\n  5426: a2 = u64 [sp + 0x108]\n  5430: a3 = u64 [sp + 0x100]\n  5434: a1 = a1 | a2\n  5437: a0 = a0 | a3\n  5440: a0 = a0 | a1\n  5443: jump @103 if a0 != 0\n      : @98 (gas: 13)\n  5447: a0 = u32 [0x20004]\n  5452: u64 [sp + 152] = 0\n  5456: u64 [sp + 144] = 0\n  5460: u64 [sp + 136] = 0\n  5464: u64 [sp + 0x80] = a0\n  5468: u64 [sp + 184] = 0\n  5472: u64 [sp + 176] = 0\n  5476: u64 [sp + 160] = 0x4\n  5481: a0 = sp + 0xc0\n  5485: a1 = sp + 0xa0\n  5489: a2 = sp + 0x80\n  5493: u64 [sp + 168] = 0\n  5497: ra = 86, jump @65\n      : @99 [@dyn 43] (gas: 44)\n  5502: t0 = u64 [sp + 0xc0]\n  5506: a0 = u64 [sp + 0xc8]\n  5510: a1 = u64 [sp + 0xd0]\n  5514: a2 = u64 [sp + 0xd8]\n  5518: a4 = u64 [sp + 0xe0]\n  5522: a5 = u64 [sp + 0xe8]\n  5526: s1 = u64 [sp + 0xf0]\n  5530: a3 = u64 [sp + 0xf8]\n  5534: u64 [sp + 0x38] = a3\n  5537: u64 [sp + 0x30] = s1\n  5540: u64 [sp + 0x28] = a5\n  5543: u64 [sp + 0x20] = a4\n  5546: u64 [sp + 0x58] = a2\n  5549: u64 [sp + 0x50] = a1\n  5552: u64 [sp + 0x48] = a0\n  5555: a0 = sp + 0x60\n  5558: a1 = sp + 0x40\n  5561: a2 = sp + 0x20\n  5564: u64 [sp + 0x40] = t0\n  5567: ra = 0x58\n  5570: sp = sp + 0xfffffffffffffe80\n  5574: u64 [sp + 0x178] = ra\n  5578: u64 [sp + 0x170] = s0\n  5582: u64 [sp + 0x168] = s1\n  5586: s0 = sp + 0x180\n  5590: sp = sp & 0xffffffffffffffe0\n  5593: a3 = u64 [a2]\n  5595: u64 [sp + 0x40] = a3\n  5598: a3 = u64 [a2 + 0x8]\n  5601: u64 [sp + 0x38] = a3\n  5604: a3 = u64 [a2 + 0x10]\n  5607: u64 [sp + 0x48] = a3\n  5610: a2 = u64 [a2 + 0x18]\n  5613: u64 [sp + 0x30] = a2\n  5616: a2 = u64 [a1]\n  5618: u64 [sp + 0x50] = a2\n  5621: a2 = u64 [a1 + 0x8]\n  5624: u64 [sp + 0x28] = a2\n  5627: s1 = u32 [a1 + 0x10]\n  5630: u64 [sp + 0x58] = a0\n  5633: a1 = 0x20\n  5636: a0 = 0\n  5638: ra = 0x48\n  5641: jump @0\n      : @100 [@dyn 44] (gas: 11)\n  5644: a0 = u64 [sp + 0x78]\n  5647: u64 [sp] = a0\n  5649: a0 = u64 [sp + 0x70]\n  5652: u64 [sp + 0x8] = a0\n  5655: a0 = u64 [sp + 0x68]\n  5658: u64 [sp + 0x10] = a0\n  5661: a0 = u64 [sp + 0x60]\n  5664: u64 [sp + 0x18] = a0\n  5667: a0 = 0x40\n  5670: a1 = 0x20\n  5673: ra = 90, jump @0\n      : @101 [@dyn 45] (gas: 100)\n  5678: a1 = u8 [a0 + 0x11]\n  5681: a2 = u8 [a0 + 0x10]\n  5684: a3 = u8 [a0 + 0x12]\n  5687: a4 = u8 [a0 + 0x13]\n  5690: a1 = a1 << 0x8\n  5693: a1 = a1 | a2\n  5696: a3 = a3 << 0x10\n  5699: a4 = a4 << 0x18\n  5702: a3 = a3 | a4\n  5705: a1 = a1 | a3\n  5708: a2 = u8 [a0 + 0x15]\n  5711: a3 = u8 [a0 + 0x14]\n  5714: a4 = u8 [a0 + 0x16]\n  5717: a5 = u8 [a0 + 0x17]\n  5720: a2 = a2 << 0x8\n  5723: a2 = a2 | a3\n  5726: a4 = a4 << 0x10\n  5729: a5 = a5 << 0x18\n  5732: a4 = a4 | a5\n  5735: a2 = a2 | a4\n  5738: a2 = a2 << 0x20\n  5741: t0 = a2 | a1\n  5744: a2 = u8 [a0 + 0x1]\n  5747: a3 = u8 [a0]\n  5749: a4 = u8 [a0 + 0x2]\n  5752: a5 = u8 [a0 + 0x3]\n  5755: a2 = a2 << 0x8\n  5758: a2 = a2 | a3\n  5761: a4 = a4 << 0x10\n  5764: a5 = a5 << 0x18\n  5767: a4 = a4 | a5\n  5770: a2 = a2 | a4\n  5773: a3 = u8 [a0 + 0x5]\n  5776: a4 = u8 [a0 + 0x4]\n  5779: a5 = u8 [a0 + 0x6]\n  5782: s1 = u8 [a0 + 0x7]\n  5785: a3 = a3 << 0x8\n  5788: a3 = a3 | a4\n  5791: a5 = a5 << 0x10\n  5794: s1 = s1 << 0x18\n  5797: a5 = a5 | s1\n  5800: a3 = a3 | a5\n  5803: a3 = a3 << 0x20\n  5806: a2 = a2 | a3\n  5809: a3 = u8 [a0 + 0x19]\n  5812: a4 = u8 [a0 + 0x18]\n  5815: a5 = u8 [a0 + 0x1a]\n  5818: s1 = u8 [a0 + 0x1b]\n  5821: a3 = a3 << 0x8\n  5824: a3 = a3 | a4\n  5827: a5 = a5 << 0x10\n  5830: s1 = s1 << 0x18\n  5833: a5 = a5 | s1\n  5836: a3 = a3 | a5\n  5839: a4 = u8 [a0 + 0x1d]\n  5842: a5 = u8 [a0 + 0x1c]\n  5845: s1 = u8 [a0 + 0x1e]\n  5848: a1 = u8 [a0 + 0x1f]\n  5851: a4 = a4 << 0x8\n  5854: a4 = a4 | a5\n  5857: s1 = s1 << 0x10\n  5860: a1 = a1 << 0x18\n  5863: a1 = a1 | s1\n  5866: a1 = a1 | a4\n  5869: a1 = a1 << 0x20\n  5872: a3 = a3 | a1\n  5875: a1 = u8 [a0 + 0x9]\n  5878: a4 = u8 [a0 + 0x8]\n  5881: a5 = u8 [a0 + 0xa]\n  5884: s1 = u8 [a0 + 0xb]\n  5887: a1 = a1 << 0x8\n  5890: a1 = a1 | a4\n  5893: a5 = a5 << 0x10\n  5896: s1 = s1 << 0x18\n  5899: a5 = a5 | s1\n  5902: a1 = a1 | a5\n  5905: a4 = u8 [a0 + 0xd]\n  5908: a5 = u8 [a0 + 0xc]\n  5911: s1 = u8 [a0 + 0xe]\n  5914: a0 = u8 [a0 + 0xf]\n  5917: a4 = a4 << 0x8\n  5920: a4 = a4 | a5\n  5923: s1 = s1 << 0x10\n  5926: a0 = a0 << 0x18\n  5929: a0 = a0 | s1\n  5932: a0 = a0 | a4\n  5935: a0 = a0 << 0x20\n  5938: a0 = a0 | a1\n  5941: a1 = reverse a0\n  5943: a0 = reverse a3\n  5945: a2 = reverse a2\n  5947: a3 = reverse t0\n  5949: a2 = a2 | a3\n  5952: a3 = a0 | a1\n  5955: a3 = a3 | a2\n  5958: a3 = a3 >> 0x20\n  5961: a1 = a1 | a2\n  5964: a1 = a1 << 0x20\n  5967: a1 = a1 | a3\n  5970: jump @105 if a1 == 0\n      : @102 (gas: 1)\n  5973: trap\n      : @103 (gas: 3)\n  5974: a0 = 0\n  5976: a1 = 0\n  5978: ra = 92, jump @0\n      : @104 [@dyn 46] (gas: 5)\n  5983: i32 a1 = a0 + 0\n  5985: a0 = 0x1\n  5988: a2 = 0\n  5990: ecalli 14 // 'seal_return'\n  5992: fallthrough\n      : @105 (gas: 4)\n  5993: i32 s1 = a0 + 0\n  5995: a1 = 0x20\n  5998: a0 = s1\n  6000: ra = 94, jump @0\n      : @106 [@dyn 47] (gas: 71)\n  6005: a1 = u64 [sp]\n  6007: a1 = reverse a1\n  6009: a2 = u64 [sp + 0x8]\n  6012: a2 = reverse a2\n  6014: a3 = u64 [sp + 0x10]\n  6017: a3 = reverse a3\n  6019: a4 = u64 [sp + 0x18]\n  6022: a4 = reverse a4\n  6024: a5 = a4 >> 0x38\n  6027: u8 [a0 + 0x1f] = a5\n  6030: a5 = a4 >> 0x30\n  6033: u8 [a0 + 0x1e] = a5\n  6036: a5 = a4 >> 0x28\n  6039: u8 [a0 + 0x1d] = a5\n  6042: a5 = a4 >> 0x20\n  6045: u8 [a0 + 0x1c] = a5\n  6048: a5 = a4 >> 0x18\n  6051: u8 [a0 + 0x1b] = a5\n  6054: a5 = a4 >> 0x10\n  6057: u8 [a0 + 0x1a] = a5\n  6060: a5 = a4 >> 0x8\n  6063: u8 [a0 + 0x19] = a5\n  6066: u8 [a0 + 0x18] = a4\n  6069: u8 [a0 + 0x10] = a3\n  6072: a4 = a3 >> 0x38\n  6075: u8 [a0 + 0x17] = a4\n  6078: a4 = a3 >> 0x30\n  6081: u8 [a0 + 0x16] = a4\n  6084: a4 = a3 >> 0x28\n  6087: u8 [a0 + 0x15] = a4\n  6090: a4 = a3 >> 0x20\n  6093: u8 [a0 + 0x14] = a4\n  6096: a4 = a3 >> 0x18\n  6099: u8 [a0 + 0x13] = a4\n  6102: a4 = a3 >> 0x10\n  6105: u8 [a0 + 0x12] = a4\n  6108: a3 = a3 >> 0x8\n  6111: u8 [a0 + 0x11] = a3\n  6114: u8 [a0 + 0x8] = a2\n  6117: a3 = a2 >> 0x38\n  6120: u8 [a0 + 0xf] = a3\n  6123: a3 = a2 >> 0x30\n  6126: u8 [a0 + 0xe] = a3\n  6129: a3 = a2 >> 0x28\n  6132: u8 [a0 + 0xd] = a3\n  6135: a3 = a2 >> 0x20\n  6138: u8 [a0 + 0xc] = a3\n  6141: a3 = a2 >> 0x18\n  6144: u8 [a0 + 0xb] = a3\n  6147: a3 = a2 >> 0x10\n  6150: u8 [a0 + 0xa] = a3\n  6153: a2 = a2 >> 0x8\n  6156: u8 [a0 + 0x9] = a2\n  6159: u8 [a0] = a1\n  6161: a2 = a1 >> 0x38\n  6164: u8 [a0 + 0x7] = a2\n  6167: a2 = a1 >> 0x30\n  6170: u8 [a0 + 0x6] = a2\n  6173: a2 = a1 >> 0x28\n  6176: u8 [a0 + 0x5] = a2\n  6179: a2 = a1 >> 0x20\n  6182: u8 [a0 + 0x4] = a2\n  6185: a2 = a1 >> 0x18\n  6188: u8 [a0 + 0x3] = a2\n  6191: a2 = a1 >> 0x10\n  6194: u8 [a0 + 0x2] = a2\n  6197: a1 = a1 >> 0x8\n  6200: u8 [a0 + 0x1] = a1\n  6203: a1 = 0x20\n  6206: a0 = s1\n  6208: ra = 96, jump @0\n      : @107 [@dyn 48] (gas: 6)\n  6213: i32 a1 = a0 + 0\n  6215: a2 = 0x20\n  6218: a0 = 0\n  6220: ra = 0x62\n  6223: ecalli 14 // 'seal_return'\n  6225: fallthrough\n      : @108 [@dyn 49] (gas: 52)\n  6226: sp = sp + 0xffffffffffffff80\n  6229: u64 [sp + 0x78] = ra\n  6232: u64 [sp + 0x70] = s0\n  6235: u64 [sp + 0x68] = s1\n  6238: s0 = sp + 0x80\n  6242: sp = sp & 0xffffffffffffffe0\n  6245: t2 = u64 [a1 + 0x10]\n  6248: a5 = u64 [a1 + 0x8]\n  6251: t0 = u64 [a2 + 0x8]\n  6254: s1 = u64 [a1]\n  6256: u64 [sp + 0x10] = s1\n  6259: a4 = u64 [a2]\n  6261: u64 [sp + 0x18] = a4\n  6264: ra = u64 [a2 + 0x10]\n  6267: a3 = t0 ^ a5\n  6270: u64 [sp + 0x38] = a3\n  6273: a3 = t0 <u a5\n  6276: a4 = a4 <u s1\n  6279: t1 = u64 [sp + 0x38]\n  6282: a3 = a4 if t1 == 0\n  6285: t1 = a4\n  6287: a1 = u64 [a1 + 0x18]\n  6290: u64 [sp + 0x38] = a1\n  6293: a1 = u64 [a2 + 0x18]\n  6296: u64 [sp + 0x20] = a1\n  6299: a1 = ra - t2\n  6302: a2 = a1 - a3\n  6305: u64 [sp + 0x28] = a2\n  6308: a2 = a1 <u a3\n  6311: u64 [sp + 0x30] = t2\n  6314: a3 = ra <u t2\n  6317: a1 = u64 [sp + 0x38]\n  6320: a4 = u64 [sp + 0x20]\n  6323: a1 = a4 - a1\n  6326: a1 = a1 - a3\n  6329: t2 = a1 - a2\n  6332: s1 = t0 - a5\n  6335: a2 = s1 - t1\n  6338: t0 = u64 [sp + 0x10]\n  6341: a1 = u64 [sp + 0x18]\n  6344: a3 = a1 - t0\n  6347: a4 = a2 >u 0\n  6349: a3 = a3 <u 0x20\n  6352: a3 = a3 ^ 0x1\n  6355: a3 = a4 if a2 != 0\n  6358: a2 = t2 >s 0\n  6360: a1 = u64 [sp + 0x28]\n  6363: a4 = a1 >u 0\n  6365: a4 = a2 if t2 != 0\n  6368: a1 = a1 | t2\n  6371: a3 = a4 if a1 != 0\n  6374: jump @114 if a3 == 0\n      : @109 (gas: 11)\n  6377: s1 = a0\n  6379: a2 = u64 [sp + 0x30]\n  6382: a0 = t0 | a2\n  6385: a1 = u64 [sp + 0x38]\n  6388: a1 = a1 | a5\n  6391: a0 = a0 | a1\n  6394: a0 = a0 >> 0x20\n  6397: a1 = a1 | a2\n  6400: a1 = a1 << 0x20\n  6403: a0 = a0 | a1\n  6406: jump @113 if a0 != 0\n      : @110 (gas: 4)\n  6409: i32 a1 = t0 + 0\n  6411: i32 a0 = sp + 0x40\n  6414: ecalli 3 // 'call_data_load'\n  6416: fallthrough\n      : @111 (gas: 10)\n  6417: a0 = u64 [sp + 0x50]\n  6420: a1 = u64 [sp + 0x58]\n  6423: a2 = 0x100000000\n  6433: a2 = a2 ^ a0\n  6436: a2 = a2 | a1\n  6439: a3 = a0 >> 0x20\n  6442: a3 = a3 <u 0x1\n  6445: a3 = 0 if a1 != 0\n  6447: a3 = 0 if a2 == 0\n  6449: jump @114 if a3 == 0\n      : @112 (gas: 12)\n  6452: a2 = u64 [sp + 0x48]\n  6455: a3 = u64 [sp + 0x40]\n  6458: u64 [s1 + 0x8] = a2\n  6461: u64 [s1] = a3\n  6463: u64 [s1 + 0x10] = a0\n  6466: u64 [s1 + 0x18] = a1\n  6469: sp = s0 + 0xffffffffffffff80\n  6472: ra = u64 [sp + 0x78]\n  6475: s0 = u64 [sp + 0x70]\n  6478: s1 = u64 [sp + 0x68]\n  6481: sp = sp + 0x80\n  6485: ret\n      : @113 (gas: 1)\n  6487: trap\n      : @114 (gas: 3)\n  6488: a0 = 0\n  6490: a1 = 0\n  6492: ra = 100, jump @0\n      : @115 [@dyn 50] (gas: 6)\n  6497: i32 a1 = a0 + 0\n  6499: a0 = 0x1\n  6502: a2 = 0\n  6504: ra = 0x66\n  6507: ecalli 14 // 'seal_return'\n  6509: fallthrough\n      : @116 [@dyn 51] (gas: 9)\n  6510: a2 = u64 [a1 + 0x18]\n  6513: a3 = u64 [a1 + 0x10]\n  6516: a4 = u64 [a1 + 0x8]\n  6519: a1 = u64 [a1]\n  6521: u64 [a0 + 0x18] = a2\n  6524: u64 [a0 + 0x10] = a3\n  6527: u64 [a0 + 0x8] = a4\n  6530: u64 [a0] = a1\n  6532: ret\n      : @117 (gas: 7)\n  6534: sp = sp + 0xffffffffffffffa0\n  6537: u64 [sp + 0x58] = ra\n  6540: u64 [sp + 0x50] = s0\n  6543: s0 = sp + 0x60\n  6546: sp = sp & 0xffffffffffffffe0\n  6549: a0 = i32 [0x20004]\n  6554: jump @124 if a0 <=u 35\n      : @118 (gas: 4)\n  6559: i32 a0 = sp + 0x20\n  6562: a1 = 0x4\n  6565: ecalli 3 // 'call_data_load'\n  6567: fallthrough\n      : @119 (gas: 10)\n  6568: a0 = u64 [sp + 0x30]\n  6571: a1 = u64 [sp + 0x38]\n  6574: a2 = 0x100000000\n  6584: a2 = a2 ^ a0\n  6587: a2 = a2 | a1\n  6590: a3 = a0 >> 0x20\n  6593: a3 = a3 <u 0x1\n  6596: a3 = 0 if a1 != 0\n  6598: a3 = 0 if a2 == 0\n  6600: jump @124 if a3 == 0\n      : @120 (gas: 8)\n  6604: a2 = u64 [sp + 0x28]\n  6607: a3 = u64 [sp + 0x20]\n  6610: u64 [sp + 0x8] = a2\n  6613: u64 [sp] = a3\n  6615: u64 [sp + 0x10] = a0\n  6618: a0 = sp\n  6620: u64 [sp + 0x18] = a1\n  6623: ra = 104, jump @387\n      : @121 [@dyn 52] (gas: 3)\n  6628: a0 = 0x40\n  6631: a1 = 0x20\n  6634: ra = 106, jump @0\n      : @122 [@dyn 53] (gas: 100)\n  6639: a1 = u8 [a0 + 0x11]\n  6642: a2 = u8 [a0 + 0x10]\n  6645: a3 = u8 [a0 + 0x12]\n  6648: a4 = u8 [a0 + 0x13]\n  6651: a1 = a1 << 0x8\n  6654: a1 = a1 | a2\n  6657: a3 = a3 << 0x10\n  6660: a4 = a4 << 0x18\n  6663: a3 = a3 | a4\n  6666: a1 = a1 | a3\n  6669: a2 = u8 [a0 + 0x15]\n  6672: a3 = u8 [a0 + 0x14]\n  6675: a4 = u8 [a0 + 0x16]\n  6678: a5 = u8 [a0 + 0x17]\n  6681: a2 = a2 << 0x8\n  6684: a2 = a2 | a3\n  6687: a4 = a4 << 0x10\n  6690: a5 = a5 << 0x18\n  6693: a4 = a4 | a5\n  6696: a2 = a2 | a4\n  6699: a2 = a2 << 0x20\n  6702: t0 = a2 | a1\n  6705: a2 = u8 [a0 + 0x1]\n  6708: a3 = u8 [a0]\n  6710: a4 = u8 [a0 + 0x2]\n  6713: a5 = u8 [a0 + 0x3]\n  6716: a2 = a2 << 0x8\n  6719: a2 = a2 | a3\n  6722: a4 = a4 << 0x10\n  6725: a5 = a5 << 0x18\n  6728: a4 = a4 | a5\n  6731: a2 = a2 | a4\n  6734: a3 = u8 [a0 + 0x5]\n  6737: a4 = u8 [a0 + 0x4]\n  6740: a5 = u8 [a0 + 0x6]\n  6743: a1 = u8 [a0 + 0x7]\n  6746: a3 = a3 << 0x8\n  6749: a3 = a3 | a4\n  6752: a5 = a5 << 0x10\n  6755: a1 = a1 << 0x18\n  6758: a1 = a1 | a5\n  6761: a1 = a1 | a3\n  6764: a1 = a1 << 0x20\n  6767: t1 = a1 | a2\n  6770: a1 = u8 [a0 + 0x19]\n  6773: a3 = u8 [a0 + 0x18]\n  6776: a4 = u8 [a0 + 0x1a]\n  6779: a5 = u8 [a0 + 0x1b]\n  6782: a1 = a1 << 0x8\n  6785: a1 = a1 | a3\n  6788: a4 = a4 << 0x10\n  6791: a5 = a5 << 0x18\n  6794: a4 = a4 | a5\n  6797: a1 = a1 | a4\n  6800: a3 = u8 [a0 + 0x1d]\n  6803: a4 = u8 [a0 + 0x1c]\n  6806: a5 = u8 [a0 + 0x1e]\n  6809: a2 = u8 [a0 + 0x1f]\n  6812: a3 = a3 << 0x8\n  6815: a3 = a3 | a4\n  6818: a5 = a5 << 0x10\n  6821: a2 = a2 << 0x18\n  6824: a2 = a2 | a5\n  6827: a2 = a2 | a3\n  6830: a2 = a2 << 0x20\n  6833: a3 = a2 | a1\n  6836: a1 = u8 [a0 + 0x9]\n  6839: a2 = u8 [a0 + 0x8]\n  6842: a4 = u8 [a0 + 0xa]\n  6845: a5 = u8 [a0 + 0xb]\n  6848: a1 = a1 << 0x8\n  6851: a1 = a1 | a2\n  6854: a4 = a4 << 0x10\n  6857: a5 = a5 << 0x18\n  6860: a4 = a4 | a5\n  6863: a1 = a1 | a4\n  6866: a2 = u8 [a0 + 0xd]\n  6869: a4 = u8 [a0 + 0xc]\n  6872: a5 = u8 [a0 + 0xe]\n  6875: a0 = u8 [a0 + 0xf]\n  6878: a2 = a2 << 0x8\n  6881: a2 = a2 | a4\n  6884: a5 = a5 << 0x10\n  6887: a0 = a0 << 0x18\n  6890: a0 = a0 | a5\n  6893: a0 = a0 | a2\n  6896: a0 = a0 << 0x20\n  6899: a0 = a0 | a1\n  6902: a1 = reverse a0\n  6904: a0 = reverse a3\n  6906: a2 = reverse t1\n  6908: a3 = reverse t0\n  6910: a2 = a2 | a3\n  6913: a3 = a0 | a1\n  6916: a3 = a3 | a2\n  6919: a3 = a3 >> 0x20\n  6922: a1 = a1 | a2\n  6925: a1 = a1 << 0x20\n  6928: a1 = a1 | a3\n  6931: jump @126 if a1 == 0\n      : @123 (gas: 1)\n  6934: trap\n      : @124 (gas: 3)\n  6935: a0 = 0\n  6937: a1 = 0\n  6939: ra = 108, jump @0\n      : @125 [@dyn 54] (gas: 7)\n  6944: i32 a1 = a0 + 0\n  6946: a0 = 0x1\n  6949: a2 = 0\n  6951: ecalli 14 // 'seal_return'\n  6953: i32 a0 = a0 + 0\n  6955: ra = 0x6e\n  6958: jump @0\n      : @126 (gas: 2)\n  6961: i32 a0 = a0 + 0\n  6963: ra = 110, jump @0\n      : @127 [@dyn 55] (gas: 6)\n  6968: i32 a1 = a0 + 0\n  6970: a0 = 0\n  6972: a2 = 0\n  6974: ra = 0x70\n  6977: ecalli 14 // 'seal_return'\n  6979: fallthrough\n      : @128 [@dyn 56] (gas: 19)\n  6980: t0 = u64 [a0 + 0x18]\n  6983: t1 = u64 [a1 + 0x18]\n  6986: a4 = u64 [a0 + 0x10]\n  6989: a5 = u64 [a0 + 0x8]\n  6992: a2 = u64 [a1 + 0x8]\n  6995: t2 = u64 [a0]\n  6997: a3 = u64 [a1]\n  6999: a1 = u64 [a1 + 0x10]\n  7002: a0 = a2 ^ a5\n  7005: a2 = a2 <u a5\n  7008: a3 = a3 <u t2\n  7011: a3 = a2 if a0 != 0\n  7014: a0 = a1 - a4\n  7017: a0 = a0 <u a3\n  7020: a1 = a1 <u a4\n  7023: a2 = t1 - t0\n  7026: a2 = a2 - a1\n  7029: a2 = a2 - a0\n  7032: jump @130 if a2 <s 0\n      : @129 (gas: 1)\n  7035: ret\n      : @130 (gas: 5)\n  7037: sp = sp + 0xfffffffffffffff8\n  7040: u64 [sp] = ra\n  7042: a0 = 0\n  7044: a1 = 0\n  7046: ra = 114, jump @0\n      : @131 [@dyn 57] (gas: 6)\n  7051: i32 a1 = a0 + 0\n  7053: a0 = 0x1\n  7056: a2 = 0\n  7058: ra = 0x74\n  7061: ecalli 14 // 'seal_return'\n  7063: fallthrough\n      : @132 [@dyn 58] (gas: 12)\n  7064: sp = sp + 0xffffffffffffffc0\n  7067: u64 [sp + 0x38] = ra\n  7070: u64 [sp + 0x30] = s0\n  7073: s0 = sp + 0x40\n  7076: sp = sp & 0xffffffffffffffe0\n  7079: u64 [sp + 24] = 0\n  7082: u64 [sp + 16] = 0\n  7085: u64 [sp + 8] = 0\n  7088: u64 [sp + 0] = 0\n  7090: i32 a0 = sp + 0\n  7092: ecalli 17 // 'value_transferred'\n  7094: fallthrough\n      : @133 (gas: 8)\n  7095: a0 = u64 [sp + 0x10]\n  7098: a1 = u64 [sp + 0x18]\n  7101: a2 = u64 [sp + 0x8]\n  7104: a3 = u64 [sp]\n  7106: a1 = a1 | a2\n  7109: a0 = a0 | a3\n  7112: a0 = a0 | a1\n  7115: jump @139 if a0 != 0\n      : @134 (gas: 2)\n  7119: a0 = i32 [0x20004]\n  7124: jump @139 if a0 <=u 3\n      : @135 (gas: 1)\n  7129: ra = 118, jump @459\n      : @136 [@dyn 59] (gas: 3)\n  7134: a0 = 0x40\n  7137: a1 = 0x20\n  7140: ra = 120, jump @0\n      : @137 [@dyn 60] (gas: 100)\n  7145: a1 = u8 [a0 + 0x11]\n  7148: a2 = u8 [a0 + 0x10]\n  7151: a3 = u8 [a0 + 0x12]\n  7154: a4 = u8 [a0 + 0x13]\n  7157: a1 = a1 << 0x8\n  7160: a1 = a1 | a2\n  7163: a3 = a3 << 0x10\n  7166: a4 = a4 << 0x18\n  7169: a3 = a3 | a4\n  7172: a1 = a1 | a3\n  7175: a2 = u8 [a0 + 0x15]\n  7178: a3 = u8 [a0 + 0x14]\n  7181: a4 = u8 [a0 + 0x16]\n  7184: a5 = u8 [a0 + 0x17]\n  7187: a2 = a2 << 0x8\n  7190: a2 = a2 | a3\n  7193: a4 = a4 << 0x10\n  7196: a5 = a5 << 0x18\n  7199: a4 = a4 | a5\n  7202: a2 = a2 | a4\n  7205: a2 = a2 << 0x20\n  7208: t0 = a2 | a1\n  7211: a2 = u8 [a0 + 0x1]\n  7214: a3 = u8 [a0]\n  7216: a4 = u8 [a0 + 0x2]\n  7219: a5 = u8 [a0 + 0x3]\n  7222: a2 = a2 << 0x8\n  7225: a2 = a2 | a3\n  7228: a4 = a4 << 0x10\n  7231: a5 = a5 << 0x18\n  7234: a4 = a4 | a5\n  7237: a2 = a2 | a4\n  7240: a3 = u8 [a0 + 0x5]\n  7243: a4 = u8 [a0 + 0x4]\n  7246: a5 = u8 [a0 + 0x6]\n  7249: a1 = u8 [a0 + 0x7]\n  7252: a3 = a3 << 0x8\n  7255: a3 = a3 | a4\n  7258: a5 = a5 << 0x10\n  7261: a1 = a1 << 0x18\n  7264: a1 = a1 | a5\n  7267: a1 = a1 | a3\n  7270: a1 = a1 << 0x20\n  7273: t1 = a1 | a2\n  7276: a1 = u8 [a0 + 0x19]\n  7279: a3 = u8 [a0 + 0x18]\n  7282: a4 = u8 [a0 + 0x1a]\n  7285: a5 = u8 [a0 + 0x1b]\n  7288: a1 = a1 << 0x8\n  7291: a1 = a1 | a3\n  7294: a4 = a4 << 0x10\n  7297: a5 = a5 << 0x18\n  7300: a4 = a4 | a5\n  7303: a1 = a1 | a4\n  7306: a3 = u8 [a0 + 0x1d]\n  7309: a4 = u8 [a0 + 0x1c]\n  7312: a5 = u8 [a0 + 0x1e]\n  7315: a2 = u8 [a0 + 0x1f]\n  7318: a3 = a3 << 0x8\n  7321: a3 = a3 | a4\n  7324: a5 = a5 << 0x10\n  7327: a2 = a2 << 0x18\n  7330: a2 = a2 | a5\n  7333: a2 = a2 | a3\n  7336: a2 = a2 << 0x20\n  7339: a3 = a2 | a1\n  7342: a1 = u8 [a0 + 0x9]\n  7345: a2 = u8 [a0 + 0x8]\n  7348: a4 = u8 [a0 + 0xa]\n  7351: a5 = u8 [a0 + 0xb]\n  7354: a1 = a1 << 0x8\n  7357: a1 = a1 | a2\n  7360: a4 = a4 << 0x10\n  7363: a5 = a5 << 0x18\n  7366: a4 = a4 | a5\n  7369: a1 = a1 | a4\n  7372: a2 = u8 [a0 + 0xd]\n  7375: a4 = u8 [a0 + 0xc]\n  7378: a5 = u8 [a0 + 0xe]\n  7381: a0 = u8 [a0 + 0xf]\n  7384: a2 = a2 << 0x8\n  7387: a2 = a2 | a4\n  7390: a5 = a5 << 0x10\n  7393: a0 = a0 << 0x18\n  7396: a0 = a0 | a5\n  7399: a0 = a0 | a2\n  7402: a0 = a0 << 0x20\n  7405: a0 = a0 | a1\n  7408: a1 = reverse a0\n  7410: a0 = reverse a3\n  7412: a2 = reverse t1\n  7414: a3 = reverse t0\n  7416: a2 = a2 | a3\n  7419: a3 = a0 | a1\n  7422: a3 = a3 | a2\n  7425: a3 = a3 >> 0x20\n  7428: a1 = a1 | a2\n  7431: a1 = a1 << 0x20\n  7434: a1 = a1 | a3\n  7437: jump @141 if a1 == 0\n      : @138 (gas: 1)\n  7440: trap\n      : @139 (gas: 3)\n  7441: a0 = 0\n  7443: a1 = 0\n  7445: ra = 122, jump @0\n      : @140 [@dyn 61] (gas: 7)\n  7450: i32 a1 = a0 + 0\n  7452: a0 = 0x1\n  7455: a2 = 0\n  7457: ecalli 14 // 'seal_return'\n  7459: i32 a0 = a0 + 0\n  7461: ra = 0x7c\n  7464: jump @0\n      : @141 (gas: 2)\n  7467: i32 a0 = a0 + 0\n  7469: ra = 124, jump @0\n      : @142 [@dyn 62] (gas: 6)\n  7474: i32 a1 = a0 + 0\n  7476: a0 = 0\n  7478: a2 = 0\n  7480: ra = 0x7e\n  7483: ecalli 14 // 'seal_return'\n  7485: fallthrough\n      : @143 [@dyn 63] (gas: 17)\n  7486: sp = sp + 0xffffffffffffffa8\n  7489: u64 [sp + 0x50] = ra\n  7492: u64 [sp + 0x48] = s0\n  7495: u64 [sp + 0x40] = s1\n  7498: a3 = u64 [a1 + 0x10]\n  7501: s1 = u64 [a1 + 0x18]\n  7504: a5 = u64 [a1 + 0x8]\n  7507: s0 = u64 [a1]\n  7509: a4 = a5 | s1\n  7512: a1 = s0 | a3\n  7515: a1 = a1 | a4\n  7518: a1 = a1 >> 0x20\n  7521: a4 = a4 | a3\n  7524: a4 = a4 << 0x20\n  7527: a1 = a1 | a4\n  7530: u64 [sp + 0x38] = a0\n  7533: jump @146 if a1 != 0\n      : @144 (gas: 22)\n  7537: a0 = u64 [a2 + 0x18]\n  7540: u64 [sp] = a0\n  7542: a0 = u64 [a2 + 0x10]\n  7545: u64 [sp + 0x8] = a0\n  7548: a0 = u64 [a2 + 0x8]\n  7551: u64 [sp + 0x10] = a0\n  7554: a0 = u64 [a2]\n  7556: u64 [sp + 0x18] = a0\n  7559: a0 = s0 + 0x20\n  7562: u64 [sp + 0x30] = a0\n  7565: a0 = a0 <u s0\n  7568: a1 = a5 + a0\n  7571: u64 [sp + 0x28] = a1\n  7574: a1 = a1 <u a5\n  7577: a1 = a0 if a0 == 0\n  7580: a1 = a1 + a3\n  7583: u64 [sp + 0x20] = a1\n  7586: a0 = a1 <u a3\n  7589: s1 = s1 + a0\n  7592: i32 a0 = s0 + 0\n  7594: a1 = 0x20\n  7597: ra = 128, jump @0\n      : @145 [@dyn 64] (gas: 81)\n  7603: a1 = u64 [sp]\n  7605: a1 = reverse a1\n  7607: a2 = u64 [sp + 0x8]\n  7610: a2 = reverse a2\n  7612: a3 = u64 [sp + 0x10]\n  7615: a3 = reverse a3\n  7617: a4 = u64 [sp + 0x18]\n  7620: a4 = reverse a4\n  7622: a5 = a4 >> 0x38\n  7625: u8 [a0 + 0x1f] = a5\n  7628: a5 = a4 >> 0x30\n  7631: u8 [a0 + 0x1e] = a5\n  7634: a5 = a4 >> 0x28\n  7637: u8 [a0 + 0x1d] = a5\n  7640: a5 = a4 >> 0x20\n  7643: u8 [a0 + 0x1c] = a5\n  7646: a5 = a4 >> 0x18\n  7649: u8 [a0 + 0x1b] = a5\n  7652: a5 = a4 >> 0x10\n  7655: u8 [a0 + 0x1a] = a5\n  7658: a5 = a4 >> 0x8\n  7661: u8 [a0 + 0x19] = a5\n  7664: u8 [a0 + 0x18] = a4\n  7667: u8 [a0 + 0x10] = a3\n  7670: a4 = a3 >> 0x38\n  7673: u8 [a0 + 0x17] = a4\n  7676: a4 = a3 >> 0x30\n  7679: u8 [a0 + 0x16] = a4\n  7682: a4 = a3 >> 0x28\n  7685: u8 [a0 + 0x15] = a4\n  7688: a4 = a3 >> 0x20\n  7691: u8 [a0 + 0x14] = a4\n  7694: a4 = a3 >> 0x18\n  7697: u8 [a0 + 0x13] = a4\n  7700: a4 = a3 >> 0x10\n  7703: u8 [a0 + 0x12] = a4\n  7706: a3 = a3 >> 0x8\n  7709: u8 [a0 + 0x11] = a3\n  7712: u8 [a0 + 0x8] = a2\n  7715: a3 = a2 >> 0x38\n  7718: u8 [a0 + 0xf] = a3\n  7721: a3 = a2 >> 0x30\n  7724: u8 [a0 + 0xe] = a3\n  7727: a3 = a2 >> 0x28\n  7730: u8 [a0 + 0xd] = a3\n  7733: a3 = a2 >> 0x20\n  7736: u8 [a0 + 0xc] = a3\n  7739: a3 = a2 >> 0x18\n  7742: u8 [a0 + 0xb] = a3\n  7745: a3 = a2 >> 0x10\n  7748: u8 [a0 + 0xa] = a3\n  7751: a2 = a2 >> 0x8\n  7754: u8 [a0 + 0x9] = a2\n  7757: u8 [a0] = a1\n  7759: a2 = a1 >> 0x38\n  7762: u8 [a0 + 0x7] = a2\n  7765: a2 = a1 >> 0x30\n  7768: u8 [a0 + 0x6] = a2\n  7771: a2 = a1 >> 0x28\n  7774: u8 [a0 + 0x5] = a2\n  7777: a2 = a1 >> 0x20\n  7780: u8 [a0 + 0x4] = a2\n  7783: a2 = a1 >> 0x18\n  7786: u8 [a0 + 0x3] = a2\n  7789: a2 = a1 >> 0x10\n  7792: u8 [a0 + 0x2] = a2\n  7795: a1 = a1 >> 0x8\n  7798: u8 [a0 + 0x1] = a1\n  7801: a0 = u64 [sp + 0x38]\n  7804: a1 = u64 [sp + 0x30]\n  7807: u64 [a0] = a1\n  7809: a1 = u64 [sp + 0x28]\n  7812: u64 [a0 + 0x8] = a1\n  7815: a1 = u64 [sp + 0x20]\n  7818: u64 [a0 + 0x10] = a1\n  7821: u64 [a0 + 0x18] = s1\n  7824: ra = u64 [sp + 0x50]\n  7827: s0 = u64 [sp + 0x48]\n  7830: s1 = u64 [sp + 0x40]\n  7833: sp = sp + 0x58\n  7836: ret\n      : @146 (gas: 1)\n  7838: trap\n      : @147 (gas: 8)\n  7839: a0 = u64 [sp + 0x70]\n  7842: a1 = u64 [sp + 0x78]\n  7845: a2 = u64 [sp + 0x68]\n  7848: a3 = u64 [sp + 0x60]\n  7851: a1 = a1 | a2\n  7854: a0 = a0 | a3\n  7857: a0 = a0 | a1\n  7860: jump @155 if a0 != 0\n      : @148 (gas: 2)\n  7864: a0 = i32 [0x20004]\n  7869: jump @155 if a0 <=u 35\n      : @149 (gas: 4)\n  7874: i32 a0 = sp + 0x80\n  7878: a1 = 0x4\n  7881: ecalli 3 // 'call_data_load'\n  7883: fallthrough\n      : @150 (gas: 10)\n  7884: a0 = u64 [sp + 0x90]\n  7888: a2 = u64 [sp + 0x98]\n  7892: a1 = 0x100000000\n  7902: a1 = a1 ^ a0\n  7905: a1 = a1 | a2\n  7908: a3 = a0 >> 0x20\n  7911: a3 = a3 <u 0x1\n  7914: a3 = 0 if a2 != 0\n  7916: a3 = 0 if a1 == 0\n  7918: jump @155 if a3 == 0\n      : @151 (gas: 9)\n  7922: a1 = u64 [sp + 0x88]\n  7926: a3 = u64 [sp + 0x80]\n  7930: u64 [sp + 0x28] = a1\n  7933: u64 [sp + 0x20] = a3\n  7936: u64 [sp + 0x30] = a0\n  7939: a0 = sp + 0x40\n  7942: a1 = sp + 0x20\n  7945: u64 [sp + 0x38] = a2\n  7948: ra = 130, jump @478\n      : @152 [@dyn 65] (gas: 11)\n  7954: a0 = u64 [sp + 0x58]\n  7957: u64 [sp] = a0\n  7959: a0 = u64 [sp + 0x50]\n  7962: u64 [sp + 0x8] = a0\n  7965: a0 = u64 [sp + 0x48]\n  7968: u64 [sp + 0x10] = a0\n  7971: a0 = u64 [sp + 0x40]\n  7974: u64 [sp + 0x18] = a0\n  7977: a0 = 0x40\n  7980: a1 = 0x20\n  7983: ra = 132, jump @0\n      : @153 [@dyn 66] (gas: 100)\n  7989: a1 = u8 [a0 + 0x11]\n  7992: a2 = u8 [a0 + 0x10]\n  7995: a3 = u8 [a0 + 0x12]\n  7998: a4 = u8 [a0 + 0x13]\n  8001: a1 = a1 << 0x8\n  8004: a1 = a1 | a2\n  8007: a3 = a3 << 0x10\n  8010: a4 = a4 << 0x18\n  8013: a3 = a3 | a4\n  8016: a1 = a1 | a3\n  8019: a2 = u8 [a0 + 0x15]\n  8022: a3 = u8 [a0 + 0x14]\n  8025: a4 = u8 [a0 + 0x16]\n  8028: a5 = u8 [a0 + 0x17]\n  8031: a2 = a2 << 0x8\n  8034: a2 = a2 | a3\n  8037: a4 = a4 << 0x10\n  8040: a5 = a5 << 0x18\n  8043: a4 = a4 | a5\n  8046: a2 = a2 | a4\n  8049: a2 = a2 << 0x20\n  8052: t0 = a2 | a1\n  8055: a2 = u8 [a0 + 0x1]\n  8058: a3 = u8 [a0]\n  8060: a4 = u8 [a0 + 0x2]\n  8063: a5 = u8 [a0 + 0x3]\n  8066: a2 = a2 << 0x8\n  8069: a2 = a2 | a3\n  8072: a4 = a4 << 0x10\n  8075: a5 = a5 << 0x18\n  8078: a4 = a4 | a5\n  8081: a2 = a2 | a4\n  8084: a3 = u8 [a0 + 0x5]\n  8087: a4 = u8 [a0 + 0x4]\n  8090: a5 = u8 [a0 + 0x6]\n  8093: s1 = u8 [a0 + 0x7]\n  8096: a3 = a3 << 0x8\n  8099: a3 = a3 | a4\n  8102: a5 = a5 << 0x10\n  8105: s1 = s1 << 0x18\n  8108: a5 = a5 | s1\n  8111: a3 = a3 | a5\n  8114: a3 = a3 << 0x20\n  8117: a2 = a2 | a3\n  8120: a3 = u8 [a0 + 0x19]\n  8123: a4 = u8 [a0 + 0x18]\n  8126: a5 = u8 [a0 + 0x1a]\n  8129: s1 = u8 [a0 + 0x1b]\n  8132: a3 = a3 << 0x8\n  8135: a3 = a3 | a4\n  8138: a5 = a5 << 0x10\n  8141: s1 = s1 << 0x18\n  8144: a5 = a5 | s1\n  8147: a3 = a3 | a5\n  8150: a4 = u8 [a0 + 0x1d]\n  8153: a5 = u8 [a0 + 0x1c]\n  8156: s1 = u8 [a0 + 0x1e]\n  8159: a1 = u8 [a0 + 0x1f]\n  8162: a4 = a4 << 0x8\n  8165: a4 = a4 | a5\n  8168: s1 = s1 << 0x10\n  8171: a1 = a1 << 0x18\n  8174: a1 = a1 | s1\n  8177: a1 = a1 | a4\n  8180: a1 = a1 << 0x20\n  8183: a3 = a3 | a1\n  8186: a1 = u8 [a0 + 0x9]\n  8189: a4 = u8 [a0 + 0x8]\n  8192: a5 = u8 [a0 + 0xa]\n  8195: s1 = u8 [a0 + 0xb]\n  8198: a1 = a1 << 0x8\n  8201: a1 = a1 | a4\n  8204: a5 = a5 << 0x10\n  8207: s1 = s1 << 0x18\n  8210: a5 = a5 | s1\n  8213: a1 = a1 | a5\n  8216: a4 = u8 [a0 + 0xd]\n  8219: a5 = u8 [a0 + 0xc]\n  8222: s1 = u8 [a0 + 0xe]\n  8225: a0 = u8 [a0 + 0xf]\n  8228: a4 = a4 << 0x8\n  8231: a4 = a4 | a5\n  8234: s1 = s1 << 0x10\n  8237: a0 = a0 << 0x18\n  8240: a0 = a0 | s1\n  8243: a0 = a0 | a4\n  8246: a0 = a0 << 0x20\n  8249: a0 = a0 | a1\n  8252: a1 = reverse a0\n  8254: a0 = reverse a3\n  8256: a2 = reverse a2\n  8258: a3 = reverse t0\n  8260: a2 = a2 | a3\n  8263: a3 = a0 | a1\n  8266: a3 = a3 | a2\n  8269: a3 = a3 >> 0x20\n  8272: a1 = a1 | a2\n  8275: a1 = a1 << 0x20\n  8278: a1 = a1 | a3\n  8281: jump @157 if a1 == 0\n      : @154 (gas: 1)\n  8284: trap\n      : @155 (gas: 3)\n  8285: a0 = 0\n  8287: a1 = 0\n  8289: ra = 134, jump @0\n      : @156 [@dyn 67] (gas: 5)\n  8295: i32 a1 = a0 + 0\n  8297: a0 = 0x1\n  8300: a2 = 0\n  8302: ecalli 14 // 'seal_return'\n  8304: fallthrough\n      : @157 (gas: 4)\n  8305: i32 s1 = a0 + 0\n  8307: a1 = 0x20\n  8310: a0 = s1\n  8312: ra = 136, jump @0\n      : @158 [@dyn 68] (gas: 71)\n  8318: a1 = u64 [sp]\n  8320: a1 = reverse a1\n  8322: a2 = u64 [sp + 0x8]\n  8325: a2 = reverse a2\n  8327: a3 = u64 [sp + 0x10]\n  8330: a3 = reverse a3\n  8332: a4 = u64 [sp + 0x18]\n  8335: a4 = reverse a4\n  8337: a5 = a4 >> 0x38\n  8340: u8 [a0 + 0x1f] = a5\n  8343: a5 = a4 >> 0x30\n  8346: u8 [a0 + 0x1e] = a5\n  8349: a5 = a4 >> 0x28\n  8352: u8 [a0 + 0x1d] = a5\n  8355: a5 = a4 >> 0x20\n  8358: u8 [a0 + 0x1c] = a5\n  8361: a5 = a4 >> 0x18\n  8364: u8 [a0 + 0x1b] = a5\n  8367: a5 = a4 >> 0x10\n  8370: u8 [a0 + 0x1a] = a5\n  8373: a5 = a4 >> 0x8\n  8376: u8 [a0 + 0x19] = a5\n  8379: u8 [a0 + 0x18] = a4\n  8382: u8 [a0 + 0x10] = a3\n  8385: a4 = a3 >> 0x38\n  8388: u8 [a0 + 0x17] = a4\n  8391: a4 = a3 >> 0x30\n  8394: u8 [a0 + 0x16] = a4\n  8397: a4 = a3 >> 0x28\n  8400: u8 [a0 + 0x15] = a4\n  8403: a4 = a3 >> 0x20\n  8406: u8 [a0 + 0x14] = a4\n  8409: a4 = a3 >> 0x18\n  8412: u8 [a0 + 0x13] = a4\n  8415: a4 = a3 >> 0x10\n  8418: u8 [a0 + 0x12] = a4\n  8421: a3 = a3 >> 0x8\n  8424: u8 [a0 + 0x11] = a3\n  8427: u8 [a0 + 0x8] = a2\n  8430: a3 = a2 >> 0x38\n  8433: u8 [a0 + 0xf] = a3\n  8436: a3 = a2 >> 0x30\n  8439: u8 [a0 + 0xe] = a3\n  8442: a3 = a2 >> 0x28\n  8445: u8 [a0 + 0xd] = a3\n  8448: a3 = a2 >> 0x20\n  8451: u8 [a0 + 0xc] = a3\n  8454: a3 = a2 >> 0x18\n  8457: u8 [a0 + 0xb] = a3\n  8460: a3 = a2 >> 0x10\n  8463: u8 [a0 + 0xa] = a3\n  8466: a2 = a2 >> 0x8\n  8469: u8 [a0 + 0x9] = a2\n  8472: u8 [a0] = a1\n  8474: a2 = a1 >> 0x38\n  8477: u8 [a0 + 0x7] = a2\n  8480: a2 = a1 >> 0x30\n  8483: u8 [a0 + 0x6] = a2\n  8486: a2 = a1 >> 0x28\n  8489: u8 [a0 + 0x5] = a2\n  8492: a2 = a1 >> 0x20\n  8495: u8 [a0 + 0x4] = a2\n  8498: a2 = a1 >> 0x18\n  8501: u8 [a0 + 0x3] = a2\n  8504: a2 = a1 >> 0x10\n  8507: u8 [a0 + 0x2] = a2\n  8510: a1 = a1 >> 0x8\n  8513: u8 [a0 + 0x1] = a1\n  8516: a1 = 0x20\n  8519: a0 = s1\n  8521: ra = 138, jump @0\n      : @159 [@dyn 69] (gas: 6)\n  8527: i32 a1 = a0 + 0\n  8529: a2 = 0x20\n  8532: a0 = 0\n  8534: ra = 0x8c\n  8538: ecalli 14 // 'seal_return'\n  8540: fallthrough\n      : @160 [@dyn 70] (gas: 12)\n  8541: sp = sp + 0xffffffffffffff80\n  8544: u64 [sp + 0x78] = ra\n  8547: u64 [sp + 0x70] = s0\n  8550: s0 = sp + 0x80\n  8554: sp = sp & 0xffffffffffffffe0\n  8557: u64 [sp + 56] = 0\n  8560: u64 [sp + 48] = 0\n  8563: u64 [sp + 40] = 0\n  8566: u64 [sp + 32] = 0\n  8569: i32 a0 = sp + 0x20\n  8572: ecalli 17 // 'value_transferred'\n  8574: fallthrough\n      : @161 (gas: 8)\n  8575: a0 = u64 [sp + 0x30]\n  8578: a1 = u64 [sp + 0x38]\n  8581: a2 = u64 [sp + 0x28]\n  8584: a3 = u64 [sp + 0x20]\n  8587: a1 = a1 | a2\n  8590: a0 = a0 | a3\n  8593: a0 = a0 | a1\n  8596: jump @169 if a0 != 0\n      : @162 (gas: 2)\n  8600: a0 = i32 [0x20004]\n  8605: jump @169 if a0 <=u 35\n      : @163 (gas: 4)\n  8610: i32 a0 = sp + 0x40\n  8613: a1 = 0x4\n  8616: ecalli 3 // 'call_data_load'\n  8618: fallthrough\n      : @164 (gas: 10)\n  8619: a0 = u64 [sp + 0x50]\n  8622: a1 = u64 [sp + 0x58]\n  8625: a2 = 0x100000000\n  8635: a2 = a2 ^ a0\n  8638: a2 = a2 | a1\n  8641: a3 = a0 >> 0x20\n  8644: a3 = a3 <u 0x1\n  8647: a3 = 0 if a1 != 0\n  8649: a3 = 0 if a2 == 0\n  8651: jump @169 if a3 == 0\n      : @165 (gas: 26)\n  8655: a2 = u64 [sp + 0x48]\n  8658: a3 = u64 [sp + 0x40]\n  8661: u64 [sp + 0x8] = a2\n  8664: u64 [sp] = a3\n  8666: u64 [sp + 0x10] = a0\n  8669: a0 = sp\n  8671: u64 [sp + 0x18] = a1\n  8674: ra = 0x8e\n  8678: sp = sp + 0xfffffffffffffe00\n  8682: u64 [sp + 0x1f8] = ra\n  8686: u64 [sp + 0x1f0] = s0\n  8690: u64 [sp + 0x1e8] = s1\n  8694: s0 = sp + 0x200\n  8698: sp = sp & 0xffffffffffffffe0\n  8701: a1 = u64 [a0 + 0x10]\n  8704: a2 = u64 [a0]\n  8706: u64 [sp + 0x78] = a2\n  8709: a0 = u64 [a0 + 0x8]\n  8712: u64 [sp + 0x70] = a0\n  8715: u64 [sp + 0x60] = a1\n  8718: a0 = a1 << 0x20\n  8721: s1 = a0 >> 0x20\n  8724: a1 = 0x20\n  8727: a0 = 0\n  8729: ra = 0x1e2\n  8733: jump @0\n      : @166 [@dyn 71] (gas: 3)\n  8736: a0 = 0x40\n  8739: a1 = 0x20\n  8742: ra = 144, jump @0\n      : @167 [@dyn 72] (gas: 100)\n  8748: a1 = u8 [a0 + 0x11]\n  8751: a2 = u8 [a0 + 0x10]\n  8754: a3 = u8 [a0 + 0x12]\n  8757: a4 = u8 [a0 + 0x13]\n  8760: a1 = a1 << 0x8\n  8763: a1 = a1 | a2\n  8766: a3 = a3 << 0x10\n  8769: a4 = a4 << 0x18\n  8772: a3 = a3 | a4\n  8775: a1 = a1 | a3\n  8778: a2 = u8 [a0 + 0x15]\n  8781: a3 = u8 [a0 + 0x14]\n  8784: a4 = u8 [a0 + 0x16]\n  8787: a5 = u8 [a0 + 0x17]\n  8790: a2 = a2 << 0x8\n  8793: a2 = a2 | a3\n  8796: a4 = a4 << 0x10\n  8799: a5 = a5 << 0x18\n  8802: a4 = a4 | a5\n  8805: a2 = a2 | a4\n  8808: a2 = a2 << 0x20\n  8811: t0 = a2 | a1\n  8814: a2 = u8 [a0 + 0x1]\n  8817: a3 = u8 [a0]\n  8819: a4 = u8 [a0 + 0x2]\n  8822: a5 = u8 [a0 + 0x3]\n  8825: a2 = a2 << 0x8\n  8828: a2 = a2 | a3\n  8831: a4 = a4 << 0x10\n  8834: a5 = a5 << 0x18\n  8837: a4 = a4 | a5\n  8840: a2 = a2 | a4\n  8843: a3 = u8 [a0 + 0x5]\n  8846: a4 = u8 [a0 + 0x4]\n  8849: a5 = u8 [a0 + 0x6]\n  8852: a1 = u8 [a0 + 0x7]\n  8855: a3 = a3 << 0x8\n  8858: a3 = a3 | a4\n  8861: a5 = a5 << 0x10\n  8864: a1 = a1 << 0x18\n  8867: a1 = a1 | a5\n  8870: a1 = a1 | a3\n  8873: a1 = a1 << 0x20\n  8876: t1 = a1 | a2\n  8879: a1 = u8 [a0 + 0x19]\n  8882: a3 = u8 [a0 + 0x18]\n  8885: a4 = u8 [a0 + 0x1a]\n  8888: a5 = u8 [a0 + 0x1b]\n  8891: a1 = a1 << 0x8\n  8894: a1 = a1 | a3\n  8897: a4 = a4 << 0x10\n  8900: a5 = a5 << 0x18\n  8903: a4 = a4 | a5\n  8906: a1 = a1 | a4\n  8909: a3 = u8 [a0 + 0x1d]\n  8912: a4 = u8 [a0 + 0x1c]\n  8915: a5 = u8 [a0 + 0x1e]\n  8918: a2 = u8 [a0 + 0x1f]\n  8921: a3 = a3 << 0x8\n  8924: a3 = a3 | a4\n  8927: a5 = a5 << 0x10\n  8930: a2 = a2 << 0x18\n  8933: a2 = a2 | a5\n  8936: a2 = a2 | a3\n  8939: a2 = a2 << 0x20\n  8942: a3 = a2 | a1\n  8945: a1 = u8 [a0 + 0x9]\n  8948: a2 = u8 [a0 + 0x8]\n  8951: a4 = u8 [a0 + 0xa]\n  8954: a5 = u8 [a0 + 0xb]\n  8957: a1 = a1 << 0x8\n  8960: a1 = a1 | a2\n  8963: a4 = a4 << 0x10\n  8966: a5 = a5 << 0x18\n  8969: a4 = a4 | a5\n  8972: a1 = a1 | a4\n  8975: a2 = u8 [a0 + 0xd]\n  8978: a4 = u8 [a0 + 0xc]\n  8981: a5 = u8 [a0 + 0xe]\n  8984: a0 = u8 [a0 + 0xf]\n  8987: a2 = a2 << 0x8\n  8990: a2 = a2 | a4\n  8993: a5 = a5 << 0x10\n  8996: a0 = a0 << 0x18\n  8999: a0 = a0 | a5\n  9002: a0 = a0 | a2\n  9005: a0 = a0 << 0x20\n  9008: a0 = a0 | a1\n  9011: a1 = reverse a0\n  9013: a0 = reverse a3\n  9015: a2 = reverse t1\n  9017: a3 = reverse t0\n  9019: a2 = a2 | a3\n  9022: a3 = a0 | a1\n  9025: a3 = a3 | a2\n  9028: a3 = a3 >> 0x20\n  9031: a1 = a1 | a2\n  9034: a1 = a1 << 0x20\n  9037: a1 = a1 | a3\n  9040: jump @171 if a1 == 0\n      : @168 (gas: 1)\n  9043: trap\n      : @169 (gas: 3)\n  9044: a0 = 0\n  9046: a1 = 0\n  9048: ra = 146, jump @0\n      : @170 [@dyn 73] (gas: 7)\n  9054: i32 a1 = a0 + 0\n  9056: a0 = 0x1\n  9059: a2 = 0\n  9061: ecalli 14 // 'seal_return'\n  9063: i32 a0 = a0 + 0\n  9065: ra = 0x94\n  9069: jump @0\n      : @171 (gas: 2)\n  9072: i32 a0 = a0 + 0\n  9074: ra = 148, jump @0\n      : @172 [@dyn 74] (gas: 6)\n  9080: i32 a1 = a0 + 0\n  9082: a0 = 0\n  9084: a2 = 0\n  9086: ra = 0x96\n  9090: ecalli 14 // 'seal_return'\n  9092: fallthrough\n      : @173 [@dyn 75] (gas: 12)\n  9093: a2 = u64 [a1 + 0x10]\n  9096: a3 = u64 [a1 + 0x18]\n  9099: a4 = u64 [a1 + 0x8]\n  9102: a1 = u64 [a1]\n  9104: a3 = a3 | a4\n  9107: a4 = a1 | a2\n  9110: a4 = a4 | a3\n  9113: a4 = a4 >> 0x20\n  9116: a2 = a2 | a3\n  9119: a2 = a2 << 0x20\n  9122: a2 = a2 | a4\n  9125: jump @176 if a2 != 0\n      : @174 (gas: 13)\n  9129: sp = sp + 0xffffffffffffffd8\n  9132: u64 [sp + 0x20] = ra\n  9135: u64 [sp + 0x18] = s0\n  9138: u64 [sp + 0x10] = s1\n  9141: s0 = u64 [a0 + 0x18]\n  9144: s1 = u64 [a0 + 0x10]\n  9147: a2 = u64 [a0 + 0x8]\n  9150: u64 [sp] = a2\n  9152: a0 = u64 [a0]\n  9154: u64 [sp + 0x8] = a0\n  9157: i32 a0 = a1 + 0\n  9159: a1 = 0x20\n  9162: ra = 152, jump @0\n      : @175 [@dyn 76] (gas: 71)\n  9168: a1 = reverse s0\n  9170: a2 = reverse s1\n  9172: a3 = u64 [sp]\n  9174: a3 = reverse a3\n  9176: a4 = u64 [sp + 0x8]\n  9179: a4 = reverse a4\n  9181: a5 = a4 >> 0x38\n  9184: u8 [a0 + 0x1f] = a5\n  9187: a5 = a4 >> 0x30\n  9190: u8 [a0 + 0x1e] = a5\n  9193: a5 = a4 >> 0x28\n  9196: u8 [a0 + 0x1d] = a5\n  9199: a5 = a4 >> 0x20\n  9202: u8 [a0 + 0x1c] = a5\n  9205: a5 = a4 >> 0x18\n  9208: u8 [a0 + 0x1b] = a5\n  9211: a5 = a4 >> 0x10\n  9214: u8 [a0 + 0x1a] = a5\n  9217: a5 = a4 >> 0x8\n  9220: u8 [a0 + 0x19] = a5\n  9223: u8 [a0 + 0x18] = a4\n  9226: u8 [a0 + 0x10] = a3\n  9229: a4 = a3 >> 0x38\n  9232: u8 [a0 + 0x17] = a4\n  9235: a4 = a3 >> 0x30\n  9238: u8 [a0 + 0x16] = a4\n  9241: a4 = a3 >> 0x28\n  9244: u8 [a0 + 0x15] = a4\n  9247: a4 = a3 >> 0x20\n  9250: u8 [a0 + 0x14] = a4\n  9253: a4 = a3 >> 0x18\n  9256: u8 [a0 + 0x13] = a4\n  9259: a4 = a3 >> 0x10\n  9262: u8 [a0 + 0x12] = a4\n  9265: a3 = a3 >> 0x8\n  9268: u8 [a0 + 0x11] = a3\n  9271: u8 [a0 + 0x8] = a2\n  9274: a3 = a2 >> 0x38\n  9277: u8 [a0 + 0xf] = a3\n  9280: a3 = a2 >> 0x30\n  9283: u8 [a0 + 0xe] = a3\n  9286: a3 = a2 >> 0x28\n  9289: u8 [a0 + 0xd] = a3\n  9292: a3 = a2 >> 0x20\n  9295: u8 [a0 + 0xc] = a3\n  9298: a3 = a2 >> 0x18\n  9301: u8 [a0 + 0xb] = a3\n  9304: a3 = a2 >> 0x10\n  9307: u8 [a0 + 0xa] = a3\n  9310: a2 = a2 >> 0x8\n  9313: u8 [a0 + 0x9] = a2\n  9316: u8 [a0] = a1\n  9318: a2 = a1 >> 0x38\n  9321: u8 [a0 + 0x7] = a2\n  9324: a2 = a1 >> 0x30\n  9327: u8 [a0 + 0x6] = a2\n  9330: a2 = a1 >> 0x28\n  9333: u8 [a0 + 0x5] = a2\n  9336: a2 = a1 >> 0x20\n  9339: u8 [a0 + 0x4] = a2\n  9342: a2 = a1 >> 0x18\n  9345: u8 [a0 + 0x3] = a2\n  9348: a2 = a1 >> 0x10\n  9351: u8 [a0 + 0x2] = a2\n  9354: a1 = a1 >> 0x8\n  9357: u8 [a0 + 0x1] = a1\n  9360: ra = u64 [sp + 0x20]\n  9363: s0 = u64 [sp + 0x18]\n  9366: s1 = u64 [sp + 0x10]\n  9369: sp = sp + 0x28\n  9372: ret\n      : @176 (gas: 1)\n  9374: trap\n      : @177 (gas: 19)\n  9375: sp = sp + 0xfffffffffffffea8\n  9379: u64 [sp + 0x150] = ra\n  9383: u64 [sp + 0x148] = s0\n  9387: u64 [sp + 0x140] = s1\n  9391: a4 = u64 [a0 + 0x10]\n  9394: a5 = u64 [a0 + 0x18]\n  9397: a2 = u64 [a0 + 0x8]\n  9400: a3 = u64 [a0]\n  9402: u64 [sp + 0x130] = a2\n  9406: u64 [sp + 0xf8] = a5\n  9410: a0 = a2 | a5\n  9413: a2 = a3 | a4\n  9416: a2 = a2 | a0\n  9419: a2 = a2 >> 0x20\n  9422: u64 [sp + 0x108] = a4\n  9426: a0 = a0 | a4\n  9429: a0 = a0 << 0x20\n  9432: a0 = a0 | a2\n  9435: jump @206 if a0 != 0\n      : @178 (gas: 11)\n  9439: a0 = u64 [a1 + 0x18]\n  9442: u64 [sp + 0x100] = a0\n  9446: s1 = u64 [a1 + 0x10]\n  9449: s0 = u64 [a1 + 0x8]\n  9452: a0 = u64 [a1]\n  9454: u64 [sp + 0x138] = a0\n  9458: i32 a0 = a3 + 0\n  9460: a1 = 0x20\n  9463: u64 [sp + 0x118] = a0\n  9467: u64 [sp + 0x128] = a3\n  9471: ra = 154, jump @0\n      : @179 [@dyn 77] (gas: 12)\n  9477: a3 = u64 [sp + 0x138]\n  9481: a1 = a3 | s1\n  9484: u64 [sp + 0x120] = s0\n  9488: a2 = u64 [sp + 0x100]\n  9492: a2 = a2 | s0\n  9495: a1 = a1 | a2\n  9498: a1 = a1 >> 0x20\n  9501: u64 [sp + 0xf0] = s1\n  9505: a2 = a2 | s1\n  9508: a2 = a2 << 0x20\n  9511: a1 = a1 | a2\n  9514: jump @206 if a1 != 0\n      : @180 (gas: 66)\n  9518: a1 = u8 [a0]\n  9520: u64 [sp + 0xe8] = a1\n  9524: a1 = u8 [a0 + 0x1]\n  9527: u64 [sp + 0xe0] = a1\n  9531: a1 = u8 [a0 + 0x2]\n  9534: u64 [sp + 0xd8] = a1\n  9538: a1 = u8 [a0 + 0x3]\n  9541: u64 [sp + 0xd0] = a1\n  9545: a1 = u8 [a0 + 0x4]\n  9548: u64 [sp + 0xc8] = a1\n  9552: a1 = u8 [a0 + 0x5]\n  9555: u64 [sp + 0xc0] = a1\n  9559: a1 = u8 [a0 + 0x6]\n  9562: u64 [sp + 0xb8] = a1\n  9566: a1 = u8 [a0 + 0x7]\n  9569: u64 [sp + 0xb0] = a1\n  9573: a1 = u8 [a0 + 0x8]\n  9576: u64 [sp + 0xa8] = a1\n  9580: a1 = u8 [a0 + 0x9]\n  9583: u64 [sp + 0xa0] = a1\n  9587: a1 = u8 [a0 + 0xa]\n  9590: u64 [sp + 0x98] = a1\n  9594: a1 = u8 [a0 + 0xb]\n  9597: u64 [sp + 0x90] = a1\n  9601: a1 = u8 [a0 + 0xc]\n  9604: u64 [sp + 0x88] = a1\n  9608: a1 = u8 [a0 + 0xd]\n  9611: u64 [sp + 0x80] = a1\n  9615: a1 = u8 [a0 + 0xe]\n  9618: u64 [sp + 0x78] = a1\n  9621: a1 = u8 [a0 + 0xf]\n  9624: u64 [sp + 0x70] = a1\n  9627: a1 = u8 [a0 + 0x10]\n  9630: u64 [sp + 0x68] = a1\n  9633: a1 = u8 [a0 + 0x11]\n  9636: u64 [sp + 0x60] = a1\n  9639: a1 = u8 [a0 + 0x12]\n  9642: u64 [sp + 0x58] = a1\n  9645: a1 = u8 [a0 + 0x13]\n  9648: u64 [sp + 0x50] = a1\n  9651: a1 = u8 [a0 + 0x14]\n  9654: u64 [sp + 0x48] = a1\n  9657: a1 = u8 [a0 + 0x15]\n  9660: u64 [sp + 0x40] = a1\n  9663: a1 = u8 [a0 + 0x16]\n  9666: u64 [sp + 0x38] = a1\n  9669: a1 = u8 [a0 + 0x17]\n  9672: u64 [sp + 0x30] = a1\n  9675: a1 = u8 [a0 + 0x18]\n  9678: u64 [sp + 0x28] = a1\n  9681: a1 = u8 [a0 + 0x19]\n  9684: u64 [sp + 0x20] = a1\n  9687: a1 = u8 [a0 + 0x1a]\n  9690: u64 [sp + 0x18] = a1\n  9693: a1 = u8 [a0 + 0x1b]\n  9696: u64 [sp + 0x10] = a1\n  9699: a1 = u8 [a0 + 0x1c]\n  9702: u64 [sp + 0x8] = a1\n  9705: a1 = u8 [a0 + 0x1d]\n  9708: u64 [sp] = a1\n  9710: s1 = u8 [a0 + 0x1e]\n  9713: s0 = u8 [a0 + 0x1f]\n  9716: i32 a0 = a3 + 0\n  9718: a1 = 0x20\n  9721: u64 [sp + 0x110] = a0\n  9725: ra = 156, jump @0\n      : @181 [@dyn 78] (gas: 73)\n  9731: u8 [a0 + 0x1f] = s0\n  9734: u8 [a0 + 0x1e] = s1\n  9737: a1 = u64 [sp]\n  9739: u8 [a0 + 0x1d] = a1\n  9742: a1 = u64 [sp + 0x8]\n  9745: u8 [a0 + 0x1c] = a1\n  9748: a1 = u64 [sp + 0x10]\n  9751: u8 [a0 + 0x1b] = a1\n  9754: a1 = u64 [sp + 0x18]\n  9757: u8 [a0 + 0x1a] = a1\n  9760: a1 = u64 [sp + 0x20]\n  9763: u8 [a0 + 0x19] = a1\n  9766: a1 = u64 [sp + 0x28]\n  9769: u8 [a0 + 0x18] = a1\n  9772: a1 = u64 [sp + 0x30]\n  9775: u8 [a0 + 0x17] = a1\n  9778: a1 = u64 [sp + 0x38]\n  9781: u8 [a0 + 0x16] = a1\n  9784: a1 = u64 [sp + 0x40]\n  9787: u8 [a0 + 0x15] = a1\n  9790: a1 = u64 [sp + 0x48]\n  9793: u8 [a0 + 0x14] = a1\n  9796: a1 = u64 [sp + 0x50]\n  9799: u8 [a0 + 0x13] = a1\n  9802: a1 = u64 [sp + 0x58]\n  9805: u8 [a0 + 0x12] = a1\n  9808: a1 = u64 [sp + 0x60]\n  9811: u8 [a0 + 0x11] = a1\n  9814: a1 = u64 [sp + 0x68]\n  9817: u8 [a0 + 0x10] = a1\n  9820: a1 = u64 [sp + 0x70]\n  9823: u8 [a0 + 0xf] = a1\n  9826: a1 = u64 [sp + 0x78]\n  9829: u8 [a0 + 0xe] = a1\n  9832: a1 = u64 [sp + 0x80]\n  9836: u8 [a0 + 0xd] = a1\n  9839: a1 = u64 [sp + 0x88]\n  9843: u8 [a0 + 0xc] = a1\n  9846: a1 = u64 [sp + 0x90]\n  9850: u8 [a0 + 0xb] = a1\n  9853: a1 = u64 [sp + 0x98]\n  9857: u8 [a0 + 0xa] = a1\n  9860: a1 = u64 [sp + 0xa0]\n  9864: u8 [a0 + 0x9] = a1\n  9867: a1 = u64 [sp + 0xa8]\n  9871: u8 [a0 + 0x8] = a1\n  9874: a1 = u64 [sp + 0xb0]\n  9878: u8 [a0 + 0x7] = a1\n  9881: a1 = u64 [sp + 0xb8]\n  9885: u8 [a0 + 0x6] = a1\n  9888: a1 = u64 [sp + 0xc0]\n  9892: u8 [a0 + 0x5] = a1\n  9895: a1 = u64 [sp + 0xc8]\n  9899: u8 [a0 + 0x4] = a1\n  9902: a1 = u64 [sp + 0xd0]\n  9906: u8 [a0 + 0x3] = a1\n  9909: a1 = u64 [sp + 0xd8]\n  9913: u8 [a0 + 0x2] = a1\n  9916: a1 = u64 [sp + 0xe0]\n  9920: u8 [a0 + 0x1] = a1\n  9923: a1 = u64 [sp + 0x108]\n  9927: a3 = u64 [sp + 0xf8]\n  9931: a3 = a3 | a1\n  9934: s0 = 0xffffffe0\n  9944: a1 = u64 [sp + 0x128]\n  9948: a1 = a1 <u s0\n  9951: a2 = u64 [sp + 0x130]\n  9955: a1 = 0 if a2 != 0\n  9957: u64 [sp + 0x108] = a3\n  9961: a1 = 0 if a3 != 0\n  9963: a2 = u64 [sp + 0xe8]\n  9967: u8 [a0] = a2\n  9969: jump @206 if a1 == 0\n      : @182 (gas: 4)\n  9973: a0 = u64 [sp + 0x118]\n  9977: i32 a0 = a0 + 0x20\n  9980: a1 = 0x20\n  9983: ra = 158, jump @0\n      : @183 [@dyn 79] (gas: 10)\n  9989: a1 = u64 [sp + 0x100]\n  9993: a3 = u64 [sp + 0xf0]\n  9997: a3 = a3 | a1\n 10000: a1 = u64 [sp + 0x138]\n 10004: a1 = a1 <u s0\n 10007: a2 = u64 [sp + 0x120]\n 10011: a1 = 0 if a2 != 0\n 10013: u64 [sp + 0x100] = a3\n 10017: a1 = 0 if a3 != 0\n 10019: jump @206 if a1 == 0\n      : @184 (gas: 66)\n 10023: a1 = u8 [a0]\n 10025: u64 [sp + 0xf8] = a1\n 10029: a1 = u8 [a0 + 0x1]\n 10032: u64 [sp + 0xf0] = a1\n 10036: a1 = u8 [a0 + 0x2]\n 10039: u64 [sp + 0xe8] = a1\n 10043: a1 = u8 [a0 + 0x3]\n 10046: u64 [sp + 0xe0] = a1\n 10050: a1 = u8 [a0 + 0x4]\n 10053: u64 [sp + 0xd8] = a1\n 10057: a1 = u8 [a0 + 0x5]\n 10060: u64 [sp + 0xd0] = a1\n 10064: a1 = u8 [a0 + 0x6]\n 10067: u64 [sp + 0xc8] = a1\n 10071: a1 = u8 [a0 + 0x7]\n 10074: u64 [sp + 0xc0] = a1\n 10078: a1 = u8 [a0 + 0x8]\n 10081: u64 [sp + 0xb8] = a1\n 10085: a1 = u8 [a0 + 0x9]\n 10088: u64 [sp + 0xb0] = a1\n 10092: a1 = u8 [a0 + 0xa]\n 10095: u64 [sp + 0xa8] = a1\n 10099: a1 = u8 [a0 + 0xb]\n 10102: u64 [sp + 0xa0] = a1\n 10106: a1 = u8 [a0 + 0xc]\n 10109: u64 [sp + 0x98] = a1\n 10113: a1 = u8 [a0 + 0xd]\n 10116: u64 [sp + 0x90] = a1\n 10120: a1 = u8 [a0 + 0xe]\n 10123: u64 [sp + 0x88] = a1\n 10127: a1 = u8 [a0 + 0xf]\n 10130: u64 [sp + 0x80] = a1\n 10134: a1 = u8 [a0 + 0x10]\n 10137: u64 [sp + 0x78] = a1\n 10140: a1 = u8 [a0 + 0x11]\n 10143: u64 [sp + 0x70] = a1\n 10146: a1 = u8 [a0 + 0x12]\n 10149: u64 [sp + 0x68] = a1\n 10152: a1 = u8 [a0 + 0x13]\n 10155: u64 [sp + 0x60] = a1\n 10158: a1 = u8 [a0 + 0x14]\n 10161: u64 [sp + 0x58] = a1\n 10164: a1 = u8 [a0 + 0x15]\n 10167: u64 [sp + 0x50] = a1\n 10170: a1 = u8 [a0 + 0x16]\n 10173: u64 [sp + 0x48] = a1\n 10176: a1 = u8 [a0 + 0x17]\n 10179: u64 [sp + 0x40] = a1\n 10182: a1 = u8 [a0 + 0x18]\n 10185: u64 [sp + 0x38] = a1\n 10188: a1 = u8 [a0 + 0x19]\n 10191: u64 [sp + 0x30] = a1\n 10194: a1 = u8 [a0 + 0x1a]\n 10197: u64 [sp + 0x28] = a1\n 10200: a1 = u8 [a0 + 0x1b]\n 10203: u64 [sp + 0x20] = a1\n 10206: a1 = u8 [a0 + 0x1c]\n 10209: u64 [sp + 0x18] = a1\n 10212: a1 = u8 [a0 + 0x1d]\n 10215: u64 [sp + 0x10] = a1\n 10218: s0 = u8 [a0 + 0x1e]\n 10221: s1 = u8 [a0 + 0x1f]\n 10224: a0 = u64 [sp + 0x110]\n 10228: i32 a0 = a0 + 0x20\n 10231: a1 = 0x20\n 10234: ra = 160, jump @0\n      : @185 [@dyn 80] (gas: 70)\n 10240: u8 [a0 + 0x1f] = s1\n 10243: u8 [a0 + 0x1e] = s0\n 10246: a1 = u64 [sp + 0x10]\n 10249: u8 [a0 + 0x1d] = a1\n 10252: a1 = u64 [sp + 0x18]\n 10255: u8 [a0 + 0x1c] = a1\n 10258: a1 = u64 [sp + 0x20]\n 10261: u8 [a0 + 0x1b] = a1\n 10264: a1 = u64 [sp + 0x28]\n 10267: u8 [a0 + 0x1a] = a1\n 10270: a1 = u64 [sp + 0x30]\n 10273: u8 [a0 + 0x19] = a1\n 10276: a1 = u64 [sp + 0x38]\n 10279: u8 [a0 + 0x18] = a1\n 10282: a1 = u64 [sp + 0x40]\n 10285: u8 [a0 + 0x17] = a1\n 10288: a1 = u64 [sp + 0x48]\n 10291: u8 [a0 + 0x16] = a1\n 10294: a1 = u64 [sp + 0x50]\n 10297: u8 [a0 + 0x15] = a1\n 10300: a1 = u64 [sp + 0x58]\n 10303: u8 [a0 + 0x14] = a1\n 10306: a1 = u64 [sp + 0x60]\n 10309: u8 [a0 + 0x13] = a1\n 10312: a1 = u64 [sp + 0x68]\n 10315: u8 [a0 + 0x12] = a1\n 10318: a1 = u64 [sp + 0x70]\n 10321: u8 [a0 + 0x11] = a1\n 10324: a1 = u64 [sp + 0x78]\n 10327: u8 [a0 + 0x10] = a1\n 10330: a1 = u64 [sp + 0x80]\n 10334: u8 [a0 + 0xf] = a1\n 10337: a1 = u64 [sp + 0x88]\n 10341: u8 [a0 + 0xe] = a1\n 10344: a1 = u64 [sp + 0x90]\n 10348: u8 [a0 + 0xd] = a1\n 10351: a1 = u64 [sp + 0x98]\n 10355: u8 [a0 + 0xc] = a1\n 10358: a1 = u64 [sp + 0xa0]\n 10362: u8 [a0 + 0xb] = a1\n 10365: a1 = u64 [sp + 0xa8]\n 10369: u8 [a0 + 0xa] = a1\n 10372: a1 = u64 [sp + 0xb0]\n 10376: u8 [a0 + 0x9] = a1\n 10379: a1 = u64 [sp + 0xb8]\n 10383: u8 [a0 + 0x8] = a1\n 10386: a1 = u64 [sp + 0xc0]\n 10390: u8 [a0 + 0x7] = a1\n 10393: a1 = u64 [sp + 0xc8]\n 10397: u8 [a0 + 0x6] = a1\n 10400: a1 = u64 [sp + 0xd0]\n 10404: u8 [a0 + 0x5] = a1\n 10407: a1 = u64 [sp + 0xd8]\n 10411: u8 [a0 + 0x4] = a1\n 10414: a1 = u64 [sp + 0xe0]\n 10418: u8 [a0 + 0x3] = a1\n 10421: a1 = u64 [sp + 0xe8]\n 10425: u8 [a0 + 0x2] = a1\n 10428: a1 = u64 [sp + 0xf0]\n 10432: u8 [a0 + 0x1] = a1\n 10435: s0 = 0xffffffc0\n 10445: a1 = u64 [sp + 0x128]\n 10449: a1 = a1 <u s0\n 10452: a2 = u64 [sp + 0x130]\n 10456: a1 = 0 if a2 != 0\n 10458: a2 = u64 [sp + 0x108]\n 10462: a1 = 0 if a2 != 0\n 10464: a2 = u64 [sp + 0xf8]\n 10468: u8 [a0] = a2\n 10470: jump @206 if a1 == 0\n      : @186 (gas: 4)\n 10474: a0 = u64 [sp + 0x118]\n 10478: i32 a0 = a0 + 0x40\n 10481: a1 = 0x20\n 10484: ra = 162, jump @0\n      : @187 [@dyn 81] (gas: 7)\n 10490: a1 = u64 [sp + 0x138]\n 10494: a1 = a1 <u s0\n 10497: a2 = u64 [sp + 0x120]\n 10501: a1 = 0 if a2 != 0\n 10503: a2 = u64 [sp + 0x100]\n 10507: a1 = 0 if a2 != 0\n 10509: jump @206 if a1 == 0\n      : @188 (gas: 66)\n 10513: a1 = u8 [a0]\n 10515: u64 [sp + 0xf8] = a1\n 10519: a1 = u8 [a0 + 0x1]\n 10522: u64 [sp + 0xf0] = a1\n 10526: a1 = u8 [a0 + 0x2]\n 10529: u64 [sp + 0xe8] = a1\n 10533: a1 = u8 [a0 + 0x3]\n 10536: u64 [sp + 0xe0] = a1\n 10540: a1 = u8 [a0 + 0x4]\n 10543: u64 [sp + 0xd8] = a1\n 10547: a1 = u8 [a0 + 0x5]\n 10550: u64 [sp + 0xd0] = a1\n 10554: a1 = u8 [a0 + 0x6]\n 10557: u64 [sp + 0xc8] = a1\n 10561: a1 = u8 [a0 + 0x7]\n 10564: u64 [sp + 0xc0] = a1\n 10568: a1 = u8 [a0 + 0x8]\n 10571: u64 [sp + 0xb8] = a1\n 10575: a1 = u8 [a0 + 0x9]\n 10578: u64 [sp + 0xb0] = a1\n 10582: a1 = u8 [a0 + 0xa]\n 10585: u64 [sp + 0xa8] = a1\n 10589: a1 = u8 [a0 + 0xb]\n 10592: u64 [sp + 0xa0] = a1\n 10596: a1 = u8 [a0 + 0xc]\n 10599: u64 [sp + 0x98] = a1\n 10603: a1 = u8 [a0 + 0xd]\n 10606: u64 [sp + 0x90] = a1\n 10610: a1 = u8 [a0 + 0xe]\n 10613: u64 [sp + 0x88] = a1\n 10617: a1 = u8 [a0 + 0xf]\n 10620: u64 [sp + 0x80] = a1\n 10624: a1 = u8 [a0 + 0x10]\n 10627: u64 [sp + 0x78] = a1\n 10630: a1 = u8 [a0 + 0x11]\n 10633: u64 [sp + 0x70] = a1\n 10636: a1 = u8 [a0 + 0x12]\n 10639: u64 [sp + 0x68] = a1\n 10642: a1 = u8 [a0 + 0x13]\n 10645: u64 [sp + 0x60] = a1\n 10648: a1 = u8 [a0 + 0x14]\n 10651: u64 [sp + 0x58] = a1\n 10654: a1 = u8 [a0 + 0x15]\n 10657: u64 [sp + 0x50] = a1\n 10660: a1 = u8 [a0 + 0x16]\n 10663: u64 [sp + 0x48] = a1\n 10666: a1 = u8 [a0 + 0x17]\n 10669: u64 [sp + 0x40] = a1\n 10672: a1 = u8 [a0 + 0x18]\n 10675: u64 [sp + 0x38] = a1\n 10678: a1 = u8 [a0 + 0x19]\n 10681: u64 [sp + 0x30] = a1\n 10684: a1 = u8 [a0 + 0x1a]\n 10687: u64 [sp + 0x28] = a1\n 10690: a1 = u8 [a0 + 0x1b]\n 10693: u64 [sp + 0x20] = a1\n 10696: a1 = u8 [a0 + 0x1c]\n 10699: u64 [sp + 0x18] = a1\n 10702: a1 = u8 [a0 + 0x1d]\n 10705: u64 [sp + 0x10] = a1\n 10708: s0 = u8 [a0 + 0x1e]\n 10711: s1 = u8 [a0 + 0x1f]\n 10714: a0 = u64 [sp + 0x110]\n 10718: i32 a0 = a0 + 0x40\n 10721: a1 = 0x20\n 10724: ra = 164, jump @0\n      : @189 [@dyn 82] (gas: 70)\n 10730: u8 [a0 + 0x1f] = s1\n 10733: u8 [a0 + 0x1e] = s0\n 10736: a1 = u64 [sp + 0x10]\n 10739: u8 [a0 + 0x1d] = a1\n 10742: a1 = u64 [sp + 0x18]\n 10745: u8 [a0 + 0x1c] = a1\n 10748: a1 = u64 [sp + 0x20]\n 10751: u8 [a0 + 0x1b] = a1\n 10754: a1 = u64 [sp + 0x28]\n 10757: u8 [a0 + 0x1a] = a1\n 10760: a1 = u64 [sp + 0x30]\n 10763: u8 [a0 + 0x19] = a1\n 10766: a1 = u64 [sp + 0x38]\n 10769: u8 [a0 + 0x18] = a1\n 10772: a1 = u64 [sp + 0x40]\n 10775: u8 [a0 + 0x17] = a1\n 10778: a1 = u64 [sp + 0x48]\n 10781: u8 [a0 + 0x16] = a1\n 10784: a1 = u64 [sp + 0x50]\n 10787: u8 [a0 + 0x15] = a1\n 10790: a1 = u64 [sp + 0x58]\n 10793: u8 [a0 + 0x14] = a1\n 10796: a1 = u64 [sp + 0x60]\n 10799: u8 [a0 + 0x13] = a1\n 10802: a1 = u64 [sp + 0x68]\n 10805: u8 [a0 + 0x12] = a1\n 10808: a1 = u64 [sp + 0x70]\n 10811: u8 [a0 + 0x11] = a1\n 10814: a1 = u64 [sp + 0x78]\n 10817: u8 [a0 + 0x10] = a1\n 10820: a1 = u64 [sp + 0x80]\n 10824: u8 [a0 + 0xf] = a1\n 10827: a1 = u64 [sp + 0x88]\n 10831: u8 [a0 + 0xe] = a1\n 10834: a1 = u64 [sp + 0x90]\n 10838: u8 [a0 + 0xd] = a1\n 10841: a1 = u64 [sp + 0x98]\n 10845: u8 [a0 + 0xc] = a1\n 10848: a1 = u64 [sp + 0xa0]\n 10852: u8 [a0 + 0xb] = a1\n 10855: a1 = u64 [sp + 0xa8]\n 10859: u8 [a0 + 0xa] = a1\n 10862: a1 = u64 [sp + 0xb0]\n 10866: u8 [a0 + 0x9] = a1\n 10869: a1 = u64 [sp + 0xb8]\n 10873: u8 [a0 + 0x8] = a1\n 10876: a1 = u64 [sp + 0xc0]\n 10880: u8 [a0 + 0x7] = a1\n 10883: a1 = u64 [sp + 0xc8]\n 10887: u8 [a0 + 0x6] = a1\n 10890: a1 = u64 [sp + 0xd0]\n 10894: u8 [a0 + 0x5] = a1\n 10897: a1 = u64 [sp + 0xd8]\n 10901: u8 [a0 + 0x4] = a1\n 10904: a1 = u64 [sp + 0xe0]\n 10908: u8 [a0 + 0x3] = a1\n 10911: a1 = u64 [sp + 0xe8]\n 10915: u8 [a0 + 0x2] = a1\n 10918: a1 = u64 [sp + 0xf0]\n 10922: u8 [a0 + 0x1] = a1\n 10925: s0 = 0xffffffa0\n 10935: a1 = u64 [sp + 0x128]\n 10939: a1 = a1 <u s0\n 10942: a2 = u64 [sp + 0x130]\n 10946: a1 = 0 if a2 != 0\n 10948: a2 = u64 [sp + 0x108]\n 10952: a1 = 0 if a2 != 0\n 10954: a2 = u64 [sp + 0xf8]\n 10958: u8 [a0] = a2\n 10960: jump @206 if a1 == 0\n      : @190 (gas: 4)\n 10964: a0 = u64 [sp + 0x118]\n 10968: i32 a0 = a0 + 0x60\n 10971: a1 = 0x20\n 10974: ra = 166, jump @0\n      : @191 [@dyn 83] (gas: 7)\n 10980: a1 = u64 [sp + 0x138]\n 10984: a1 = a1 <u s0\n 10987: a2 = u64 [sp + 0x120]\n 10991: a1 = 0 if a2 != 0\n 10993: a2 = u64 [sp + 0x100]\n 10997: a1 = 0 if a2 != 0\n 10999: jump @206 if a1 == 0\n      : @192 (gas: 66)\n 11003: a1 = u8 [a0]\n 11005: u64 [sp + 0xf8] = a1\n 11009: a1 = u8 [a0 + 0x1]\n 11012: u64 [sp + 0xf0] = a1\n 11016: a1 = u8 [a0 + 0x2]\n 11019: u64 [sp + 0xe8] = a1\n 11023: a1 = u8 [a0 + 0x3]\n 11026: u64 [sp + 0xe0] = a1\n 11030: a1 = u8 [a0 + 0x4]\n 11033: u64 [sp + 0xd8] = a1\n 11037: a1 = u8 [a0 + 0x5]\n 11040: u64 [sp + 0xd0] = a1\n 11044: a1 = u8 [a0 + 0x6]\n 11047: u64 [sp + 0xc8] = a1\n 11051: a1 = u8 [a0 + 0x7]\n 11054: u64 [sp + 0xc0] = a1\n 11058: a1 = u8 [a0 + 0x8]\n 11061: u64 [sp + 0xb8] = a1\n 11065: a1 = u8 [a0 + 0x9]\n 11068: u64 [sp + 0xb0] = a1\n 11072: a1 = u8 [a0 + 0xa]\n 11075: u64 [sp + 0xa8] = a1\n 11079: a1 = u8 [a0 + 0xb]\n 11082: u64 [sp + 0xa0] = a1\n 11086: a1 = u8 [a0 + 0xc]\n 11089: u64 [sp + 0x98] = a1\n 11093: a1 = u8 [a0 + 0xd]\n 11096: u64 [sp + 0x90] = a1\n 11100: a1 = u8 [a0 + 0xe]\n 11103: u64 [sp + 0x88] = a1\n 11107: a1 = u8 [a0 + 0xf]\n 11110: u64 [sp + 0x80] = a1\n 11114: a1 = u8 [a0 + 0x10]\n 11117: u64 [sp + 0x78] = a1\n 11120: a1 = u8 [a0 + 0x11]\n 11123: u64 [sp + 0x70] = a1\n 11126: a1 = u8 [a0 + 0x12]\n 11129: u64 [sp + 0x68] = a1\n 11132: a1 = u8 [a0 + 0x13]\n 11135: u64 [sp + 0x60] = a1\n 11138: a1 = u8 [a0 + 0x14]\n 11141: u64 [sp + 0x58] = a1\n 11144: a1 = u8 [a0 + 0x15]\n 11147: u64 [sp + 0x50] = a1\n 11150: a1 = u8 [a0 + 0x16]\n 11153: u64 [sp + 0x48] = a1\n 11156: a1 = u8 [a0 + 0x17]\n 11159: u64 [sp + 0x40] = a1\n 11162: a1 = u8 [a0 + 0x18]\n 11165: u64 [sp + 0x38] = a1\n 11168: a1 = u8 [a0 + 0x19]\n 11171: u64 [sp + 0x30] = a1\n 11174: a1 = u8 [a0 + 0x1a]\n 11177: u64 [sp + 0x28] = a1\n 11180: a1 = u8 [a0 + 0x1b]\n 11183: u64 [sp + 0x20] = a1\n 11186: a1 = u8 [a0 + 0x1c]\n 11189: u64 [sp + 0x18] = a1\n 11192: a1 = u8 [a0 + 0x1d]\n 11195: u64 [sp + 0x10] = a1\n 11198: s0 = u8 [a0 + 0x1e]\n 11201: s1 = u8 [a0 + 0x1f]\n 11204: a0 = u64 [sp + 0x110]\n 11208: i32 a0 = a0 + 0x60\n 11211: a1 = 0x20\n 11214: ra = 168, jump @0\n      : @193 [@dyn 84] (gas: 70)\n 11220: u8 [a0 + 0x1f] = s1\n 11223: u8 [a0 + 0x1e] = s0\n 11226: a1 = u64 [sp + 0x10]\n 11229: u8 [a0 + 0x1d] = a1\n 11232: a1 = u64 [sp + 0x18]\n 11235: u8 [a0 + 0x1c] = a1\n 11238: a1 = u64 [sp + 0x20]\n 11241: u8 [a0 + 0x1b] = a1\n 11244: a1 = u64 [sp + 0x28]\n 11247: u8 [a0 + 0x1a] = a1\n 11250: a1 = u64 [sp + 0x30]\n 11253: u8 [a0 + 0x19] = a1\n 11256: a1 = u64 [sp + 0x38]\n 11259: u8 [a0 + 0x18] = a1\n 11262: a1 = u64 [sp + 0x40]\n 11265: u8 [a0 + 0x17] = a1\n 11268: a1 = u64 [sp + 0x48]\n 11271: u8 [a0 + 0x16] = a1\n 11274: a1 = u64 [sp + 0x50]\n 11277: u8 [a0 + 0x15] = a1\n 11280: a1 = u64 [sp + 0x58]\n 11283: u8 [a0 + 0x14] = a1\n 11286: a1 = u64 [sp + 0x60]\n 11289: u8 [a0 + 0x13] = a1\n 11292: a1 = u64 [sp + 0x68]\n 11295: u8 [a0 + 0x12] = a1\n 11298: a1 = u64 [sp + 0x70]\n 11301: u8 [a0 + 0x11] = a1\n 11304: a1 = u64 [sp + 0x78]\n 11307: u8 [a0 + 0x10] = a1\n 11310: a1 = u64 [sp + 0x80]\n 11314: u8 [a0 + 0xf] = a1\n 11317: a1 = u64 [sp + 0x88]\n 11321: u8 [a0 + 0xe] = a1\n 11324: a1 = u64 [sp + 0x90]\n 11328: u8 [a0 + 0xd] = a1\n 11331: a1 = u64 [sp + 0x98]\n 11335: u8 [a0 + 0xc] = a1\n 11338: a1 = u64 [sp + 0xa0]\n 11342: u8 [a0 + 0xb] = a1\n 11345: a1 = u64 [sp + 0xa8]\n 11349: u8 [a0 + 0xa] = a1\n 11352: a1 = u64 [sp + 0xb0]\n 11356: u8 [a0 + 0x9] = a1\n 11359: a1 = u64 [sp + 0xb8]\n 11363: u8 [a0 + 0x8] = a1\n 11366: a1 = u64 [sp + 0xc0]\n 11370: u8 [a0 + 0x7] = a1\n 11373: a1 = u64 [sp + 0xc8]\n 11377: u8 [a0 + 0x6] = a1\n 11380: a1 = u64 [sp + 0xd0]\n 11384: u8 [a0 + 0x5] = a1\n 11387: a1 = u64 [sp + 0xd8]\n 11391: u8 [a0 + 0x4] = a1\n 11394: a1 = u64 [sp + 0xe0]\n 11398: u8 [a0 + 0x3] = a1\n 11401: a1 = u64 [sp + 0xe8]\n 11405: u8 [a0 + 0x2] = a1\n 11408: a1 = u64 [sp + 0xf0]\n 11412: u8 [a0 + 0x1] = a1\n 11415: s0 = 0xffffff80\n 11425: a1 = u64 [sp + 0x128]\n 11429: a1 = a1 <u s0\n 11432: a2 = u64 [sp + 0x130]\n 11436: a1 = 0 if a2 != 0\n 11438: a2 = u64 [sp + 0x108]\n 11442: a1 = 0 if a2 != 0\n 11444: a2 = u64 [sp + 0xf8]\n 11448: u8 [a0] = a2\n 11450: jump @206 if a1 == 0\n      : @194 (gas: 4)\n 11454: a0 = u64 [sp + 0x118]\n 11458: i32 a0 = a0 + 0x80\n 11462: a1 = 0x20\n 11465: ra = 170, jump @0\n      : @195 [@dyn 85] (gas: 7)\n 11471: a1 = u64 [sp + 0x138]\n 11475: a1 = a1 <u s0\n 11478: a2 = u64 [sp + 0x120]\n 11482: a1 = 0 if a2 != 0\n 11484: a2 = u64 [sp + 0x100]\n 11488: a1 = 0 if a2 != 0\n 11490: jump @206 if a1 == 0\n      : @196 (gas: 66)\n 11494: a1 = u8 [a0]\n 11496: u64 [sp + 0xf8] = a1\n 11500: a1 = u8 [a0 + 0x1]\n 11503: u64 [sp + 0xf0] = a1\n 11507: a1 = u8 [a0 + 0x2]\n 11510: u64 [sp + 0xe8] = a1\n 11514: a1 = u8 [a0 + 0x3]\n 11517: u64 [sp + 0xe0] = a1\n 11521: a1 = u8 [a0 + 0x4]\n 11524: u64 [sp + 0xd8] = a1\n 11528: a1 = u8 [a0 + 0x5]\n 11531: u64 [sp + 0xd0] = a1\n 11535: a1 = u8 [a0 + 0x6]\n 11538: u64 [sp + 0xc8] = a1\n 11542: a1 = u8 [a0 + 0x7]\n 11545: u64 [sp + 0xc0] = a1\n 11549: a1 = u8 [a0 + 0x8]\n 11552: u64 [sp + 0xb8] = a1\n 11556: a1 = u8 [a0 + 0x9]\n 11559: u64 [sp + 0xb0] = a1\n 11563: a1 = u8 [a0 + 0xa]\n 11566: u64 [sp + 0xa8] = a1\n 11570: a1 = u8 [a0 + 0xb]\n 11573: u64 [sp + 0xa0] = a1\n 11577: a1 = u8 [a0 + 0xc]\n 11580: u64 [sp + 0x98] = a1\n 11584: a1 = u8 [a0 + 0xd]\n 11587: u64 [sp + 0x90] = a1\n 11591: a1 = u8 [a0 + 0xe]\n 11594: u64 [sp + 0x88] = a1\n 11598: a1 = u8 [a0 + 0xf]\n 11601: u64 [sp + 0x80] = a1\n 11605: a1 = u8 [a0 + 0x10]\n 11608: u64 [sp + 0x78] = a1\n 11611: a1 = u8 [a0 + 0x11]\n 11614: u64 [sp + 0x70] = a1\n 11617: a1 = u8 [a0 + 0x12]\n 11620: u64 [sp + 0x68] = a1\n 11623: a1 = u8 [a0 + 0x13]\n 11626: u64 [sp + 0x60] = a1\n 11629: a1 = u8 [a0 + 0x14]\n 11632: u64 [sp + 0x58] = a1\n 11635: a1 = u8 [a0 + 0x15]\n 11638: u64 [sp + 0x50] = a1\n 11641: a1 = u8 [a0 + 0x16]\n 11644: u64 [sp + 0x48] = a1\n 11647: a1 = u8 [a0 + 0x17]\n 11650: u64 [sp + 0x40] = a1\n 11653: a1 = u8 [a0 + 0x18]\n 11656: u64 [sp + 0x38] = a1\n 11659: a1 = u8 [a0 + 0x19]\n 11662: u64 [sp + 0x30] = a1\n 11665: a1 = u8 [a0 + 0x1a]\n 11668: u64 [sp + 0x28] = a1\n 11671: a1 = u8 [a0 + 0x1b]\n 11674: u64 [sp + 0x20] = a1\n 11677: a1 = u8 [a0 + 0x1c]\n 11680: u64 [sp + 0x18] = a1\n 11683: a1 = u8 [a0 + 0x1d]\n 11686: u64 [sp + 0x10] = a1\n 11689: s0 = u8 [a0 + 0x1e]\n 11692: s1 = u8 [a0 + 0x1f]\n 11695: a0 = u64 [sp + 0x110]\n 11699: i32 a0 = a0 + 0x80\n 11703: a1 = 0x20\n 11706: ra = 172, jump @0\n      : @197 [@dyn 86] (gas: 70)\n 11712: u8 [a0 + 0x1f] = s1\n 11715: u8 [a0 + 0x1e] = s0\n 11718: a1 = u64 [sp + 0x10]\n 11721: u8 [a0 + 0x1d] = a1\n 11724: a1 = u64 [sp + 0x18]\n 11727: u8 [a0 + 0x1c] = a1\n 11730: a1 = u64 [sp + 0x20]\n 11733: u8 [a0 + 0x1b] = a1\n 11736: a1 = u64 [sp + 0x28]\n 11739: u8 [a0 + 0x1a] = a1\n 11742: a1 = u64 [sp + 0x30]\n 11745: u8 [a0 + 0x19] = a1\n 11748: a1 = u64 [sp + 0x38]\n 11751: u8 [a0 + 0x18] = a1\n 11754: a1 = u64 [sp + 0x40]\n 11757: u8 [a0 + 0x17] = a1\n 11760: a1 = u64 [sp + 0x48]\n 11763: u8 [a0 + 0x16] = a1\n 11766: a1 = u64 [sp + 0x50]\n 11769: u8 [a0 + 0x15] = a1\n 11772: a1 = u64 [sp + 0x58]\n 11775: u8 [a0 + 0x14] = a1\n 11778: a1 = u64 [sp + 0x60]\n 11781: u8 [a0 + 0x13] = a1\n 11784: a1 = u64 [sp + 0x68]\n 11787: u8 [a0 + 0x12] = a1\n 11790: a1 = u64 [sp + 0x70]\n 11793: u8 [a0 + 0x11] = a1\n 11796: a1 = u64 [sp + 0x78]\n 11799: u8 [a0 + 0x10] = a1\n 11802: a1 = u64 [sp + 0x80]\n 11806: u8 [a0 + 0xf] = a1\n 11809: a1 = u64 [sp + 0x88]\n 11813: u8 [a0 + 0xe] = a1\n 11816: a1 = u64 [sp + 0x90]\n 11820: u8 [a0 + 0xd] = a1\n 11823: a1 = u64 [sp + 0x98]\n 11827: u8 [a0 + 0xc] = a1\n 11830: a1 = u64 [sp + 0xa0]\n 11834: u8 [a0 + 0xb] = a1\n 11837: a1 = u64 [sp + 0xa8]\n 11841: u8 [a0 + 0xa] = a1\n 11844: a1 = u64 [sp + 0xb0]\n 11848: u8 [a0 + 0x9] = a1\n 11851: a1 = u64 [sp + 0xb8]\n 11855: u8 [a0 + 0x8] = a1\n 11858: a1 = u64 [sp + 0xc0]\n 11862: u8 [a0 + 0x7] = a1\n 11865: a1 = u64 [sp + 0xc8]\n 11869: u8 [a0 + 0x6] = a1\n 11872: a1 = u64 [sp + 0xd0]\n 11876: u8 [a0 + 0x5] = a1\n 11879: a1 = u64 [sp + 0xd8]\n 11883: u8 [a0 + 0x4] = a1\n 11886: a1 = u64 [sp + 0xe0]\n 11890: u8 [a0 + 0x3] = a1\n 11893: a1 = u64 [sp + 0xe8]\n 11897: u8 [a0 + 0x2] = a1\n 11900: a1 = u64 [sp + 0xf0]\n 11904: u8 [a0 + 0x1] = a1\n 11907: s0 = 0xffffff60\n 11917: a1 = u64 [sp + 0x128]\n 11921: a1 = a1 <u s0\n 11924: a2 = u64 [sp + 0x130]\n 11928: a1 = 0 if a2 != 0\n 11930: a2 = u64 [sp + 0x108]\n 11934: a1 = 0 if a2 != 0\n 11936: a2 = u64 [sp + 0xf8]\n 11940: u8 [a0] = a2\n 11942: jump @206 if a1 == 0\n      : @198 (gas: 4)\n 11946: a0 = u64 [sp + 0x118]\n 11950: i32 a0 = a0 + 0xa0\n 11954: a1 = 0x20\n 11957: ra = 174, jump @0\n      : @199 [@dyn 87] (gas: 7)\n 11963: a1 = u64 [sp + 0x138]\n 11967: a1 = a1 <u s0\n 11970: a2 = u64 [sp + 0x120]\n 11974: a1 = 0 if a2 != 0\n 11976: a2 = u64 [sp + 0x100]\n 11980: a1 = 0 if a2 != 0\n 11982: jump @206 if a1 == 0\n      : @200 (gas: 44)\n 11986: a1 = u8 [a0 + 0xc]\n 11989: u64 [sp + 0xf8] = a1\n 11993: a1 = u8 [a0 + 0xd]\n 11996: u64 [sp + 0xf0] = a1\n 12000: a1 = u8 [a0 + 0xe]\n 12003: u64 [sp + 0xe8] = a1\n 12007: a1 = u8 [a0 + 0xf]\n 12010: u64 [sp + 0xe0] = a1\n 12014: a1 = u8 [a0 + 0x10]\n 12017: u64 [sp + 0xd8] = a1\n 12021: a1 = u8 [a0 + 0x11]\n 12024: u64 [sp + 0xd0] = a1\n 12028: a1 = u8 [a0 + 0x12]\n 12031: u64 [sp + 0xc8] = a1\n 12035: a1 = u8 [a0 + 0x13]\n 12038: u64 [sp + 0xc0] = a1\n 12042: a1 = u8 [a0 + 0x14]\n 12045: u64 [sp + 0xb8] = a1\n 12049: a1 = u8 [a0 + 0x15]\n 12052: u64 [sp + 0xb0] = a1\n 12056: a1 = u8 [a0 + 0x16]\n 12059: u64 [sp + 0xa8] = a1\n 12063: a1 = u8 [a0 + 0x17]\n 12066: u64 [sp + 0xa0] = a1\n 12070: a1 = u8 [a0 + 0x18]\n 12073: u64 [sp + 0x98] = a1\n 12077: a1 = u8 [a0 + 0x19]\n 12080: u64 [sp + 0x90] = a1\n 12084: a1 = u8 [a0 + 0x1a]\n 12087: u64 [sp + 0x88] = a1\n 12091: a1 = u8 [a0 + 0x1b]\n 12094: u64 [sp + 0x80] = a1\n 12098: a1 = u8 [a0 + 0x1c]\n 12101: u64 [sp + 0x78] = a1\n 12104: a1 = u8 [a0 + 0x1d]\n 12107: u64 [sp + 0x70] = a1\n 12110: a1 = u8 [a0 + 0x1e]\n 12113: u64 [sp + 0x68] = a1\n 12116: s0 = u8 [a0 + 0x1f]\n 12119: s1 = 0xffffffff00000000\n 12129: a0 = u64 [sp + 0x110]\n 12133: i32 a0 = a0 + 0xa0\n 12137: a1 = 0x20\n 12140: ra = 176, jump @0\n      : @201 [@dyn 88] (gas: 62)\n 12146: u8 [a0 + 0x1f] = s0\n 12149: a1 = u64 [sp + 0x68]\n 12152: u8 [a0 + 0x1e] = a1\n 12155: a1 = u64 [sp + 0x70]\n 12158: u8 [a0 + 0x1d] = a1\n 12161: a1 = u64 [sp + 0x78]\n 12164: u8 [a0 + 0x1c] = a1\n 12167: a1 = u64 [sp + 0x80]\n 12171: u8 [a0 + 0x1b] = a1\n 12174: a1 = u64 [sp + 0x88]\n 12178: u8 [a0 + 0x1a] = a1\n 12181: a1 = u64 [sp + 0x90]\n 12185: u8 [a0 + 0x19] = a1\n 12188: a1 = u64 [sp + 0x98]\n 12192: u8 [a0 + 0x18] = a1\n 12195: a1 = u64 [sp + 0xa0]\n 12199: u8 [a0 + 0x17] = a1\n 12202: a1 = u64 [sp + 0xa8]\n 12206: u8 [a0 + 0x16] = a1\n 12209: a1 = u64 [sp + 0xb0]\n 12213: u8 [a0 + 0x15] = a1\n 12216: a1 = u64 [sp + 0xb8]\n 12220: u8 [a0 + 0x14] = a1\n 12223: a1 = u64 [sp + 0xc0]\n 12227: u8 [a0 + 0x13] = a1\n 12230: a1 = u64 [sp + 0xc8]\n 12234: u8 [a0 + 0x12] = a1\n 12237: a1 = u64 [sp + 0xd0]\n 12241: u8 [a0 + 0x11] = a1\n 12244: a1 = u64 [sp + 0xd8]\n 12248: u8 [a0 + 0x10] = a1\n 12251: a1 = u64 [sp + 0xe0]\n 12255: u8 [a0 + 0xf] = a1\n 12258: a1 = u64 [sp + 0xe8]\n 12262: u8 [a0 + 0xe] = a1\n 12265: a1 = u64 [sp + 0xf0]\n 12269: u8 [a0 + 0xd] = a1\n 12272: a1 = u64 [sp + 0xf8]\n 12276: u8 [a0 + 0xc] = a1\n 12279: a1 = s1 >> 0x10\n 12282: u8 [a0 + 0xa] = a1\n 12285: a1 = s1 >> 0x8\n 12288: u8 [a0 + 0x9] = a1\n 12291: s0 = 0xffffff40\n 12301: a1 = u64 [sp + 0x128]\n 12305: a1 = a1 <u s0\n 12308: a2 = u64 [sp + 0x130]\n 12312: a1 = 0 if a2 != 0\n 12314: a2 = u64 [sp + 0x108]\n 12318: a1 = 0 if a2 != 0\n 12320: u8 [a0 + 11] = 0\n 12323: u64 [sp + 0x130] = s1\n 12327: u8 [a0 + 0x8] = s1\n 12330: u8 [a0 + 7] = 0\n 12333: u8 [a0 + 6] = 0\n 12336: u8 [a0 + 5] = 0\n 12339: u8 [a0 + 4] = 0\n 12342: u8 [a0 + 3] = 0\n 12345: u8 [a0 + 2] = 0\n 12348: u8 [a0 + 1] = 0\n 12351: u8 [a0 + 0] = 0\n 12353: jump @206 if a1 == 0\n      : @202 (gas: 4)\n 12357: a0 = u64 [sp + 0x118]\n 12361: i32 a0 = a0 + 0xc0\n 12365: a1 = 0x20\n 12368: ra = 178, jump @0\n      : @203 [@dyn 89] (gas: 7)\n 12374: a1 = u64 [sp + 0x138]\n 12378: a1 = a1 <u s0\n 12381: a2 = u64 [sp + 0x120]\n 12385: a1 = 0 if a2 != 0\n 12387: a2 = u64 [sp + 0x100]\n 12391: a1 = 0 if a2 != 0\n 12393: jump @206 if a1 == 0\n      : @204 (gas: 75)\n 12397: a1 = u8 [a0 + 0x19]\n 12400: a2 = u8 [a0 + 0x18]\n 12403: a3 = u8 [a0 + 0x1a]\n 12406: a4 = u8 [a0 + 0x1b]\n 12409: a1 = a1 << 0x8\n 12412: a1 = a1 | a2\n 12415: a3 = a3 << 0x10\n 12418: a4 = a4 << 0x18\n 12421: a3 = a3 | a4\n 12424: a1 = a1 | a3\n 12427: a2 = u8 [a0 + 0x1d]\n 12430: a3 = u8 [a0 + 0x1c]\n 12433: a4 = u8 [a0 + 0x1e]\n 12436: a5 = u8 [a0 + 0x1f]\n 12439: a2 = a2 << 0x8\n 12442: a2 = a2 | a3\n 12445: a4 = a4 << 0x10\n 12448: a5 = a5 << 0x18\n 12451: a4 = a4 | a5\n 12454: a2 = a2 | a4\n 12457: a2 = a2 << 0x20\n 12460: a1 = a1 | a2\n 12463: a2 = u8 [a0 + 0x11]\n 12466: a3 = u8 [a0 + 0x10]\n 12469: a4 = u8 [a0 + 0x12]\n 12472: a5 = u8 [a0 + 0x13]\n 12475: a2 = a2 << 0x8\n 12478: a2 = a2 | a3\n 12481: a4 = a4 << 0x10\n 12484: a5 = a5 << 0x18\n 12487: a4 = a4 | a5\n 12490: a2 = a2 | a4\n 12493: a3 = u8 [a0 + 0x15]\n 12496: a4 = u8 [a0 + 0x14]\n 12499: a5 = u8 [a0 + 0x16]\n 12502: s1 = u8 [a0 + 0x17]\n 12505: a3 = a3 << 0x8\n 12508: a3 = a3 | a4\n 12511: a5 = a5 << 0x10\n 12514: s1 = s1 << 0x18\n 12517: a5 = a5 | s1\n 12520: a3 = a3 | a5\n 12523: a3 = a3 << 0x20\n 12526: a2 = a2 | a3\n 12529: a3 = u8 [a0 + 0x9]\n 12532: a4 = u8 [a0 + 0x8]\n 12535: a5 = u8 [a0 + 0xa]\n 12538: s1 = u8 [a0 + 0xb]\n 12541: a3 = a3 << 0x8\n 12544: a3 = a3 | a4\n 12547: a5 = a5 << 0x10\n 12550: s1 = s1 << 0x18\n 12553: a5 = a5 | s1\n 12556: a3 = a3 | a5\n 12559: a4 = u8 [a0 + 0xd]\n 12562: a5 = u8 [a0 + 0xc]\n 12565: s1 = u8 [a0 + 0xe]\n 12568: a0 = u8 [a0 + 0xf]\n 12571: a4 = a4 << 0x8\n 12574: a4 = a4 | a5\n 12577: s1 = s1 << 0x10\n 12580: a0 = a0 << 0x18\n 12583: a0 = a0 | s1\n 12586: a0 = a0 | a4\n 12589: a0 = a0 << 0x20\n 12592: a0 = a0 | a3\n 12595: a3 = u64 [sp + 0x130]\n 12599: a0 = a0 & a3\n 12602: u64 [sp + 0x138] = a0\n 12606: s1 = a2 & 0xffffffffffffffff\n 12609: s0 = a1 & 0xffffffffffffffff\n 12612: a0 = u64 [sp + 0x110]\n 12616: i32 a0 = a0 + 0xc0\n 12620: a1 = 0x20\n 12623: ra = 180, jump @0\n      : @205 [@dyn 90] (gas: 59)\n 12629: u8 [a0 + 7] = 0\n 12632: u8 [a0 + 6] = 0\n 12635: u8 [a0 + 5] = 0\n 12638: u8 [a0 + 4] = 0\n 12641: u8 [a0 + 3] = 0\n 12644: u8 [a0 + 2] = 0\n 12647: u8 [a0 + 1] = 0\n 12650: u8 [a0 + 0] = 0\n 12652: u8 [a0 + 0x18] = s0\n 12655: u8 [a0 + 0x10] = s1\n 12658: a2 = u64 [sp + 0x138]\n 12662: u8 [a0 + 0x8] = a2\n 12665: a1 = s0 >> 0x38\n 12668: u8 [a0 + 0x1f] = a1\n 12671: a1 = s0 >> 0x30\n 12674: u8 [a0 + 0x1e] = a1\n 12677: a1 = s0 >> 0x28\n 12680: u8 [a0 + 0x1d] = a1\n 12683: a1 = s0 >> 0x20\n 12686: u8 [a0 + 0x1c] = a1\n 12689: a1 = s0 >> 0x18\n 12692: u8 [a0 + 0x1b] = a1\n 12695: a1 = s0 >> 0x10\n 12698: u8 [a0 + 0x1a] = a1\n 12701: s0 = s0 >> 0x8\n 12704: u8 [a0 + 0x19] = s0\n 12707: a1 = s1 >> 0x38\n 12710: u8 [a0 + 0x17] = a1\n 12713: a1 = s1 >> 0x30\n 12716: u8 [a0 + 0x16] = a1\n 12719: a1 = s1 >> 0x28\n 12722: u8 [a0 + 0x15] = a1\n 12725: a1 = s1 >> 0x20\n 12728: u8 [a0 + 0x14] = a1\n 12731: a1 = s1 >> 0x18\n 12734: u8 [a0 + 0x13] = a1\n 12737: a1 = s1 >> 0x10\n 12740: u8 [a0 + 0x12] = a1\n 12743: s1 = s1 >> 0x8\n 12746: u8 [a0 + 0x11] = s1\n 12749: a1 = a2 >> 0x38\n 12752: u8 [a0 + 0xf] = a1\n 12755: a1 = a2 >> 0x30\n 12758: u8 [a0 + 0xe] = a1\n 12761: a1 = a2 >> 0x28\n 12764: u8 [a0 + 0xd] = a1\n 12767: a1 = a2 >> 0x20\n 12770: u8 [a0 + 0xc] = a1\n 12773: a1 = a2 >> 0x18\n 12776: u8 [a0 + 0xb] = a1\n 12779: a1 = a2 >> 0x10\n 12782: u8 [a0 + 0xa] = a1\n 12785: a1 = a2 >> 0x8\n 12788: u8 [a0 + 0x9] = a1\n 12791: ra = u64 [sp + 0x150]\n 12795: s0 = u64 [sp + 0x148]\n 12799: s1 = u64 [sp + 0x140]\n 12803: sp = sp + 0x158\n 12807: ret\n      : @206 (gas: 1)\n 12809: trap\n      : @207 (gas: 8)\n 12810: a0 = u64 [sp + 0xf0]\n 12814: a1 = u64 [sp + 0xf8]\n 12818: a2 = u64 [sp + 0xe8]\n 12822: a3 = u64 [sp + 0xe0]\n 12826: a1 = a1 | a2\n 12829: a0 = a0 | a3\n 12832: a0 = a0 | a1\n 12835: jump @220 if a0 != 0\n      : @208 (gas: 2)\n 12839: a0 = i32 [0x20004]\n 12844: jump @220 if a0 <=u 35\n      : @209 (gas: 4)\n 12849: i32 a0 = sp + 0x100\n 12853: a1 = 0x4\n 12856: ecalli 3 // 'call_data_load'\n 12858: fallthrough\n      : @210 (gas: 11)\n 12859: a1 = u64 [sp + 0x110]\n 12863: s1 = u64 [sp + 0x118]\n 12867: a0 = 0x100000000\n 12877: a0 = a0 ^ a1\n 12880: a0 = a0 | s1\n 12883: u64 [sp + 0x38] = a1\n 12886: a1 = a1 >> 0x20\n 12889: a1 = a1 <u 0x1\n 12892: a1 = 0 if s1 != 0\n 12894: a1 = 0 if a0 == 0\n 12896: jump @221 if a1 == 0\n      : @211 (gas: 21)\n 12900: a0 = u64 [sp + 0x108]\n 12904: u64 [sp + 0x28] = a0\n 12907: a0 = u64 [sp + 0x100]\n 12911: u64 [sp + 0x30] = a0\n 12914: a0 = sp + 0xc0\n 12918: ra = 0xb6\n 12922: sp = sp + 0xffffffffffffff60\n 12926: u64 [sp + 0x98] = ra\n 12930: u64 [sp + 0x90] = s0\n 12934: u64 [sp + 0x88] = s1\n 12938: s0 = sp + 0xa0\n 12942: sp = sp & 0xfffffffffffffff0\n 12945: u64 [sp + 0x10] = a0\n 12948: u64 [sp + 88] = 0\n 12951: u64 [sp + 80] = 0\n 12954: u64 [sp + 64] = 0xe0\n 12959: a0 = sp + 0x60\n 12962: a1 = sp + 0x40\n 12965: u64 [sp + 72] = 0\n 12968: ra = 0x206\n 12972: jump @327\n      : @212 [@dyn 91] (gas: 3)\n 12975: a1 = 0x20\n 12978: a0 = 0\n 12980: ra = 184, jump @0\n      : @213 [@dyn 92] (gas: 70)\n 12986: a1 = reverse s1\n 12988: a2 = u64 [sp + 0x38]\n 12991: a2 = reverse a2\n 12993: a3 = u64 [sp + 0x28]\n 12996: a3 = reverse a3\n 12998: a4 = u64 [sp + 0x30]\n 13001: a4 = reverse a4\n 13003: a5 = a4 >> 0x38\n 13006: u8 [a0 + 0x1f] = a5\n 13009: a5 = a4 >> 0x30\n 13012: u8 [a0 + 0x1e] = a5\n 13015: a5 = a4 >> 0x28\n 13018: u8 [a0 + 0x1d] = a5\n 13021: a5 = a4 >> 0x20\n 13024: u8 [a0 + 0x1c] = a5\n 13027: a5 = a4 >> 0x18\n 13030: u8 [a0 + 0x1b] = a5\n 13033: a5 = a4 >> 0x10\n 13036: u8 [a0 + 0x1a] = a5\n 13039: a5 = a4 >> 0x8\n 13042: u8 [a0 + 0x19] = a5\n 13045: u8 [a0 + 0x18] = a4\n 13048: a4 = a3 >> 0x38\n 13051: u8 [a0 + 0x17] = a4\n 13054: a4 = a3 >> 0x30\n 13057: u8 [a0 + 0x16] = a4\n 13060: a4 = a3 >> 0x28\n 13063: u8 [a0 + 0x15] = a4\n 13066: a4 = a3 >> 0x20\n 13069: u8 [a0 + 0x14] = a4\n 13072: a4 = a3 >> 0x18\n 13075: u8 [a0 + 0x13] = a4\n 13078: a4 = a3 >> 0x10\n 13081: u8 [a0 + 0x12] = a4\n 13084: a4 = a3 >> 0x8\n 13087: u8 [a0 + 0x11] = a4\n 13090: u8 [a0 + 0x10] = a3\n 13093: a3 = a2 >> 0x38\n 13096: u8 [a0 + 0xf] = a3\n 13099: a3 = a2 >> 0x30\n 13102: u8 [a0 + 0xe] = a3\n 13105: a3 = a2 >> 0x28\n 13108: u8 [a0 + 0xd] = a3\n 13111: a3 = a2 >> 0x20\n 13114: u8 [a0 + 0xc] = a3\n 13117: a3 = a2 >> 0x18\n 13120: u8 [a0 + 0xb] = a3\n 13123: a3 = a2 >> 0x10\n 13126: u8 [a0 + 0xa] = a3\n 13129: a3 = a2 >> 0x8\n 13132: u8 [a0 + 0x9] = a3\n 13135: u8 [a0 + 0x8] = a2\n 13138: a2 = a1 >> 0x38\n 13141: u8 [a0 + 0x7] = a2\n 13144: a2 = a1 >> 0x30\n 13147: u8 [a0 + 0x6] = a2\n 13150: a2 = a1 >> 0x28\n 13153: u8 [a0 + 0x5] = a2\n 13156: a2 = a1 >> 0x20\n 13159: u8 [a0 + 0x4] = a2\n 13162: a2 = a1 >> 0x18\n 13165: u8 [a0 + 0x3] = a2\n 13168: a2 = a1 >> 0x10\n 13171: u8 [a0 + 0x2] = a2\n 13174: a2 = a1 >> 0x8\n 13177: u8 [a0 + 0x1] = a2\n 13180: u8 [a0] = a1\n 13182: a0 = 0x20\n 13185: a1 = 0x20\n 13188: ra = 186, jump @0\n      : @214 [@dyn 93] (gas: 35)\n 13194: u8 [a0 + 31] = 0x2\n 13198: u8 [a0 + 30] = 0\n 13201: u8 [a0 + 29] = 0\n 13204: u8 [a0 + 28] = 0\n 13207: u8 [a0 + 27] = 0\n 13210: u8 [a0 + 26] = 0\n 13213: u8 [a0 + 25] = 0\n 13216: u8 [a0 + 24] = 0\n 13219: u8 [a0 + 23] = 0\n 13222: u8 [a0 + 22] = 0\n 13225: u8 [a0 + 21] = 0\n 13228: u8 [a0 + 20] = 0\n 13231: u8 [a0 + 19] = 0\n 13234: u8 [a0 + 18] = 0\n 13237: u8 [a0 + 17] = 0\n 13240: u8 [a0 + 16] = 0\n 13243: u8 [a0 + 15] = 0\n 13246: u8 [a0 + 14] = 0\n 13249: u8 [a0 + 13] = 0\n 13252: u8 [a0 + 12] = 0\n 13255: u8 [a0 + 11] = 0\n 13258: u8 [a0 + 10] = 0\n 13261: u8 [a0 + 9] = 0\n 13264: u8 [a0 + 8] = 0\n 13267: u8 [a0 + 7] = 0\n 13270: u8 [a0 + 6] = 0\n 13273: u8 [a0 + 5] = 0\n 13276: u8 [a0 + 4] = 0\n 13279: u8 [a0 + 3] = 0\n 13282: u8 [a0 + 2] = 0\n 13285: u8 [a0 + 1] = 0\n 13288: u8 [a0 + 0] = 0\n 13290: a1 = 0x40\n 13293: a0 = 0\n 13295: ra = 188, jump @0\n      : @215 [@dyn 94] (gas: 42)\n 13301: i32 a0 = a0 + 0\n 13303: i32 a2 = sp + 0x100\n 13307: a1 = 0x40\n 13310: ecalli 8 // 'hash_keccak_256'\n 13312: a0 = u64 [sp + 0x118]\n 13316: a1 = u64 [sp + 0x110]\n 13320: a2 = u64 [sp + 0x108]\n 13324: a3 = u64 [sp + 0x100]\n 13328: a4 = reverse a0\n 13330: a0 = reverse a1\n 13332: a1 = reverse a2\n 13334: a2 = reverse a3\n 13336: u64 [sp + 0x98] = a2\n 13340: u64 [sp + 0x90] = a1\n 13344: u64 [sp + 0x88] = a0\n 13348: a0 = sp + 0xa0\n 13352: a1 = sp + 0x80\n 13356: u64 [sp + 0x80] = a4\n 13360: ra = 0xbe\n 13364: sp = sp + 0xfffffffffffffee0\n 13368: u64 [sp + 0x118] = ra\n 13372: u64 [sp + 0x110] = s0\n 13376: u64 [sp + 0x108] = s1\n 13380: s0 = sp + 0x120\n 13384: sp = sp & 0xffffffffffffffe0\n 13387: a2 = u64 [a1]\n 13389: u64 [sp + 0x50] = a2\n 13392: a2 = u64 [a1 + 0x8]\n 13395: u64 [sp + 0x58] = a2\n 13398: a2 = u64 [a1 + 0x10]\n 13401: u64 [sp + 0x68] = a2\n 13404: a1 = u64 [a1 + 0x18]\n 13407: u64 [sp + 0x60] = a1\n 13410: u64 [sp + 0x8] = a0\n 13413: u64 [sp + 152] = 0\n 13417: u64 [sp + 144] = 0\n 13421: u64 [sp + 128] = 0xe0\n 13427: a0 = sp + 0xa0\n 13431: a1 = sp + 0x80\n 13435: u64 [sp + 136] = 0\n 13439: ra = 0x216\n 13443: jump @327\n      : @216 [@dyn 95] (gas: 11)\n 13446: a0 = u64 [sp + 0xa0]\n 13450: u64 [sp + 0x38] = a0\n 13453: a0 = u64 [sp + 0xa8]\n 13457: u64 [sp + 0x30] = a0\n 13460: a0 = u64 [sp + 0xb0]\n 13464: u64 [sp + 0x28] = a0\n 13467: a0 = u64 [sp + 0xb8]\n 13471: u64 [sp + 0x20] = a0\n 13474: a0 = 0x40\n 13477: a1 = 0x20\n 13480: ra = 192, jump @0\n      : @217 [@dyn 96] (gas: 110)\n 13486: a1 = u8 [a0 + 0x1]\n 13489: a2 = u8 [a0]\n 13491: a3 = u8 [a0 + 0x2]\n 13494: a4 = u8 [a0 + 0x3]\n 13497: a1 = a1 << 0x8\n 13500: a1 = a1 | a2\n 13503: a3 = a3 << 0x10\n 13506: a4 = a4 << 0x18\n 13509: a3 = a3 | a4\n 13512: a1 = a1 | a3\n 13515: a2 = u8 [a0 + 0x5]\n 13518: a3 = u8 [a0 + 0x4]\n 13521: a4 = u8 [a0 + 0x6]\n 13524: a5 = u8 [a0 + 0x7]\n 13527: a2 = a2 << 0x8\n 13530: a2 = a2 | a3\n 13533: a4 = a4 << 0x10\n 13536: a5 = a5 << 0x18\n 13539: a4 = a4 | a5\n 13542: a2 = a2 | a4\n 13545: a2 = a2 << 0x20\n 13548: t0 = a2 | a1\n 13551: a2 = u8 [a0 + 0x9]\n 13554: a3 = u8 [a0 + 0x8]\n 13557: a4 = u8 [a0 + 0xa]\n 13560: a5 = u8 [a0 + 0xb]\n 13563: a2 = a2 << 0x8\n 13566: a2 = a2 | a3\n 13569: a4 = a4 << 0x10\n 13572: a5 = a5 << 0x18\n 13575: a4 = a4 | a5\n 13578: a2 = a2 | a4\n 13581: a3 = u8 [a0 + 0xd]\n 13584: a4 = u8 [a0 + 0xc]\n 13587: a5 = u8 [a0 + 0xe]\n 13590: s1 = u8 [a0 + 0xf]\n 13593: a3 = a3 << 0x8\n 13596: a3 = a3 | a4\n 13599: a5 = a5 << 0x10\n 13602: s1 = s1 << 0x18\n 13605: a5 = a5 | s1\n 13608: a3 = a3 | a5\n 13611: a3 = a3 << 0x20\n 13614: a2 = a2 | a3\n 13617: a3 = u8 [a0 + 0x11]\n 13620: a4 = u8 [a0 + 0x10]\n 13623: a5 = u8 [a0 + 0x12]\n 13626: s1 = u8 [a0 + 0x13]\n 13629: a3 = a3 << 0x8\n 13632: a3 = a3 | a4\n 13635: a5 = a5 << 0x10\n 13638: s1 = s1 << 0x18\n 13641: a5 = a5 | s1\n 13644: a3 = a3 | a5\n 13647: a4 = u8 [a0 + 0x15]\n 13650: a5 = u8 [a0 + 0x14]\n 13653: s1 = u8 [a0 + 0x16]\n 13656: a1 = u8 [a0 + 0x17]\n 13659: a4 = a4 << 0x8\n 13662: a4 = a4 | a5\n 13665: s1 = s1 << 0x10\n 13668: a1 = a1 << 0x18\n 13671: a1 = a1 | s1\n 13674: a1 = a1 | a4\n 13677: a1 = a1 << 0x20\n 13680: a3 = a3 | a1\n 13683: a1 = u8 [a0 + 0x19]\n 13686: a4 = u8 [a0 + 0x18]\n 13689: a5 = u8 [a0 + 0x1a]\n 13692: s1 = u8 [a0 + 0x1b]\n 13695: a1 = a1 << 0x8\n 13698: a1 = a1 | a4\n 13701: a5 = a5 << 0x10\n 13704: s1 = s1 << 0x18\n 13707: a5 = a5 | s1\n 13710: a1 = a1 | a5\n 13713: a4 = u8 [a0 + 0x1d]\n 13716: a5 = u8 [a0 + 0x1c]\n 13719: s1 = u8 [a0 + 0x1e]\n 13722: a0 = u8 [a0 + 0x1f]\n 13725: a4 = a4 << 0x8\n 13728: a4 = a4 | a5\n 13731: s1 = s1 << 0x10\n 13734: a0 = a0 << 0x18\n 13737: a0 = a0 | s1\n 13740: a0 = a0 | a4\n 13743: a0 = a0 << 0x20\n 13746: a0 = a0 | a1\n 13749: a4 = reverse a0\n 13751: u64 [sp + 0x8] = a4\n 13754: a1 = reverse a3\n 13756: u64 [sp + 0x10] = a1\n 13759: s1 = reverse a2\n 13761: a2 = reverse t0\n 13763: u64 [sp + 0x18] = a2\n 13766: a0 = u64 [sp + 0x20]\n 13769: u64 [sp + 0x78] = a0\n 13772: a0 = u64 [sp + 0x28]\n 13775: u64 [sp + 0x70] = a0\n 13778: a0 = u64 [sp + 0x30]\n 13781: u64 [sp + 0x68] = a0\n 13784: a0 = u64 [sp + 0x38]\n 13787: u64 [sp + 0x60] = a0\n 13790: u64 [sp + 0x58] = a2\n 13793: u64 [sp + 0x50] = s1\n 13796: u64 [sp + 0x48] = a1\n 13799: a0 = sp + 0x60\n 13802: a1 = sp + 0x40\n 13805: u64 [sp + 0x40] = a4\n 13808: ra = 194, jump @177\n      : @218 [@dyn 97] (gas: 11)\n 13814: a2 = u64 [sp + 0x8]\n 13817: a0 = u64 [sp + 0x18]\n 13820: a1 = u64 [sp + 0x10]\n 13823: a0 = a0 | a1\n 13826: a1 = a2 | s1\n 13829: a1 = a1 | a0\n 13832: a1 = a1 >> 0x20\n 13835: a0 = a0 | s1\n 13838: a0 = a0 << 0x20\n 13841: a0 = a0 | a1\n 13844: jump @223 if a0 == 0\n      : @219 (gas: 1)\n 13847: trap\n      : @220 (gas: 4)\n 13848: a0 = 0\n 13850: a1 = 0\n 13852: ra = 0xc4\n 13856: jump @0\n      : @221 (gas: 2)\n 13859: a0 = 0\n 13861: ra = 196, jump @0\n      : @222 [@dyn 98] (gas: 5)\n 13867: i32 a1 = a0 + 0\n 13869: a0 = 0x1\n 13872: a2 = 0\n 13874: ecalli 14 // 'seal_return'\n 13876: fallthrough\n      : @223 (gas: 3)\n 13877: i32 a0 = a2 + 0\n 13879: a1 = 0xe0\n 13883: ra = 198, jump @0\n      : @224 [@dyn 99] (gas: 6)\n 13889: i32 a1 = a0 + 0\n 13891: a2 = 0xe0\n 13895: a0 = 0\n 13897: ra = 0xc8\n 13901: ecalli 14 // 'seal_return'\n 13903: fallthrough\n      : @225 [@dyn 100] (gas: 18)\n 13904: sp = sp + 0xffffffffffffff30\n 13908: u64 [sp + 0xc8] = ra\n 13912: u64 [sp + 0xc0] = s0\n 13916: s0 = sp + 0xd0\n 13920: sp = sp & 0xfffffffffffffff0\n 13923: a0 = u32 [0x20004]\n 13928: u64 [sp + 88] = 0\n 13931: u64 [sp + 80] = 0\n 13934: u64 [sp + 72] = 0\n 13937: u64 [sp + 0x40] = a0\n 13940: u64 [sp + 120] = 0\n 13943: u64 [sp + 112] = 0\n 13946: u64 [sp + 96] = 0x4\n 13950: a0 = sp + 0x80\n 13954: a1 = sp + 0x60\n 13957: a2 = sp + 0x40\n 13960: u64 [sp + 104] = 0\n 13963: ra = 202, jump @65\n      : @226 [@dyn 101] (gas: 19)\n 13969: t0 = u64 [sp + 0x80]\n 13973: t1 = u64 [sp + 0x88]\n 13977: a1 = u64 [sp + 0x90]\n 13981: a3 = u64 [sp + 0x98]\n 13985: a4 = u64 [sp + 0xa0]\n 13989: a5 = u64 [sp + 0xa8]\n 13993: a2 = u64 [sp + 0xb0]\n 13997: a0 = u64 [sp + 0xb8]\n 14001: u64 [sp + 0x18] = a0\n 14004: u64 [sp + 0x10] = a2\n 14007: u64 [sp + 0x8] = a5\n 14010: u64 [sp] = a4\n 14012: u64 [sp + 0x38] = a3\n 14015: u64 [sp + 0x30] = a1\n 14018: u64 [sp + 0x28] = t1\n 14021: a0 = sp + 0x20\n 14024: a1 = sp\n 14026: u64 [sp + 0x20] = t0\n 14029: ra = 204, jump @586\n      : @227 [@dyn 102] (gas: 3)\n 14035: a0 = 0x40\n 14038: a1 = 0x20\n 14041: ra = 206, jump @0\n      : @228 [@dyn 103] (gas: 100)\n 14047: a1 = u8 [a0 + 0x11]\n 14050: a2 = u8 [a0 + 0x10]\n 14053: a3 = u8 [a0 + 0x12]\n 14056: a4 = u8 [a0 + 0x13]\n 14059: a1 = a1 << 0x8\n 14062: a1 = a1 | a2\n 14065: a3 = a3 << 0x10\n 14068: a4 = a4 << 0x18\n 14071: a3 = a3 | a4\n 14074: a1 = a1 | a3\n 14077: a2 = u8 [a0 + 0x15]\n 14080: a3 = u8 [a0 + 0x14]\n 14083: a4 = u8 [a0 + 0x16]\n 14086: a5 = u8 [a0 + 0x17]\n 14089: a2 = a2 << 0x8\n 14092: a2 = a2 | a3\n 14095: a4 = a4 << 0x10\n 14098: a5 = a5 << 0x18\n 14101: a4 = a4 | a5\n 14104: a2 = a2 | a4\n 14107: a2 = a2 << 0x20\n 14110: t0 = a2 | a1\n 14113: a2 = u8 [a0 + 0x1]\n 14116: a3 = u8 [a0]\n 14118: a4 = u8 [a0 + 0x2]\n 14121: a5 = u8 [a0 + 0x3]\n 14124: a2 = a2 << 0x8\n 14127: a2 = a2 | a3\n 14130: a4 = a4 << 0x10\n 14133: a5 = a5 << 0x18\n 14136: a4 = a4 | a5\n 14139: a2 = a2 | a4\n 14142: a3 = u8 [a0 + 0x5]\n 14145: a4 = u8 [a0 + 0x4]\n 14148: a5 = u8 [a0 + 0x6]\n 14151: a1 = u8 [a0 + 0x7]\n 14154: a3 = a3 << 0x8\n 14157: a3 = a3 | a4\n 14160: a5 = a5 << 0x10\n 14163: a1 = a1 << 0x18\n 14166: a1 = a1 | a5\n 14169: a1 = a1 | a3\n 14172: a1 = a1 << 0x20\n 14175: t1 = a1 | a2\n 14178: a1 = u8 [a0 + 0x19]\n 14181: a3 = u8 [a0 + 0x18]\n 14184: a4 = u8 [a0 + 0x1a]\n 14187: a5 = u8 [a0 + 0x1b]\n 14190: a1 = a1 << 0x8\n 14193: a1 = a1 | a3\n 14196: a4 = a4 << 0x10\n 14199: a5 = a5 << 0x18\n 14202: a4 = a4 | a5\n 14205: a1 = a1 | a4\n 14208: a3 = u8 [a0 + 0x1d]\n 14211: a4 = u8 [a0 + 0x1c]\n 14214: a5 = u8 [a0 + 0x1e]\n 14217: a2 = u8 [a0 + 0x1f]\n 14220: a3 = a3 << 0x8\n 14223: a3 = a3 | a4\n 14226: a5 = a5 << 0x10\n 14229: a2 = a2 << 0x18\n 14232: a2 = a2 | a5\n 14235: a2 = a2 | a3\n 14238: a2 = a2 << 0x20\n 14241: a3 = a2 | a1\n 14244: a1 = u8 [a0 + 0x9]\n 14247: a2 = u8 [a0 + 0x8]\n 14250: a4 = u8 [a0 + 0xa]\n 14253: a5 = u8 [a0 + 0xb]\n 14256: a1 = a1 << 0x8\n 14259: a1 = a1 | a2\n 14262: a4 = a4 << 0x10\n 14265: a5 = a5 << 0x18\n 14268: a4 = a4 | a5\n 14271: a1 = a1 | a4\n 14274: a2 = u8 [a0 + 0xd]\n 14277: a4 = u8 [a0 + 0xc]\n 14280: a5 = u8 [a0 + 0xe]\n 14283: a0 = u8 [a0 + 0xf]\n 14286: a2 = a2 << 0x8\n 14289: a2 = a2 | a4\n 14292: a5 = a5 << 0x10\n 14295: a0 = a0 << 0x18\n 14298: a0 = a0 | a5\n 14301: a0 = a0 | a2\n 14304: a0 = a0 << 0x20\n 14307: a0 = a0 | a1\n 14310: a1 = reverse a0\n 14312: a0 = reverse a3\n 14314: a2 = reverse t1\n 14316: a3 = reverse t0\n 14318: a2 = a2 | a3\n 14321: a3 = a0 | a1\n 14324: a3 = a3 | a2\n 14327: a3 = a3 >> 0x20\n 14330: a1 = a1 | a2\n 14333: a1 = a1 << 0x20\n 14336: a1 = a1 | a3\n 14339: jump @230 if a1 == 0\n      : @229 (gas: 1)\n 14342: trap\n      : @230 (gas: 2)\n 14343: i32 a0 = a0 + 0\n 14345: ra = 208, jump @0\n      : @231 [@dyn 104] (gas: 6)\n 14351: i32 a1 = a0 + 0\n 14353: a0 = 0\n 14355: a2 = 0\n 14357: ra = 0xd2\n 14361: ecalli 14 // 'seal_return'\n 14363: fallthrough\n      : @232 [@dyn 105] (gas: 47)\n 14364: sp = sp + 0xffffffffffffff80\n 14367: u64 [sp + 0x78] = ra\n 14370: u64 [sp + 0x70] = s0\n 14373: u64 [sp + 0x68] = s1\n 14376: s0 = sp + 0x80\n 14380: sp = sp & 0xffffffffffffffe0\n 14383: ra = u64 [a1 + 0x10]\n 14386: a5 = u64 [a1 + 0x8]\n 14389: a3 = u64 [a2 + 0x8]\n 14392: t1 = u64 [a1]\n 14394: a4 = u64 [a2]\n 14396: u64 [sp + 0x28] = a4\n 14399: t2 = u64 [a2 + 0x10]\n 14402: t0 = a3 ^ a5\n 14405: s1 = a3 <u a5\n 14408: a4 = a4 <u t1\n 14411: u64 [sp + 0x20] = a4\n 14414: s1 = a4 if t0 == 0\n 14417: t0 = u64 [a1 + 0x18]\n 14420: a1 = u64 [a2 + 0x18]\n 14423: u64 [sp + 0x18] = a1\n 14426: a2 = t2 - ra\n 14429: a1 = a2 - s1\n 14432: u64 [sp + 0x30] = a1\n 14435: a1 = a2 <u s1\n 14438: a4 = t2 <u ra\n 14441: u64 [sp + 0x38] = t0\n 14444: a2 = u64 [sp + 0x18]\n 14447: a2 = a2 - t0\n 14450: a2 = a2 - a4\n 14453: a2 = a2 - a1\n 14456: a1 = a3 - a5\n 14459: a3 = u64 [sp + 0x20]\n 14462: a1 = a1 - a3\n 14465: a3 = u64 [sp + 0x28]\n 14468: a3 = a3 - t1\n 14471: a4 = a1 >u 0\n 14473: a3 = a3 <u 0x40\n 14476: a3 = a3 ^ 0x1\n 14479: a3 = a4 if a1 != 0\n 14482: s1 = a2 >s 0\n 14484: a1 = u64 [sp + 0x30]\n 14487: a4 = a1 >u 0\n 14489: a4 = s1 if a2 != 0\n 14492: a1 = a1 | a2\n 14495: a3 = a4 if a1 != 0\n 14498: jump @238 if a3 == 0\n      : @233 (gas: 12)\n 14502: s1 = a0\n 14504: a0 = t1 | ra\n 14507: u64 [sp + 0x30] = a5\n 14510: a1 = u64 [sp + 0x38]\n 14513: a1 = a1 | a5\n 14516: a0 = a0 | a1\n 14519: a0 = a0 >> 0x20\n 14522: u64 [sp + 0x28] = ra\n 14525: a1 = a1 | ra\n 14528: a1 = a1 << 0x20\n 14531: a0 = a0 | a1\n 14534: jump @237 if a0 != 0\n      : @234 (gas: 6)\n 14538: i32 a1 = t1 + 0\n 14540: i32 a0 = sp + 0x40\n 14543: u64 [sp + 0x18] = a1\n 14546: u64 [sp + 0x20] = t1\n 14549: ecalli 3 // 'call_data_load'\n 14551: fallthrough\n      : @235 (gas: 10)\n 14552: a0 = u64 [sp + 0x28]\n 14555: a1 = u64 [sp + 0x38]\n 14558: a0 = a0 | a1\n 14561: a1 = 0xffffffe0\n 14571: a2 = u64 [sp + 0x20]\n 14574: a1 = a2 <u a1\n 14577: a2 = u64 [sp + 0x30]\n 14580: a1 = 0 if a2 != 0\n 14582: a1 = 0 if a0 != 0\n 14584: jump @237 if a1 == 0\n      : @236 (gas: 34)\n 14587: a0 = u64 [sp + 0x58]\n 14590: u64 [sp + 0x20] = a0\n 14593: a0 = u64 [sp + 0x50]\n 14596: u64 [sp + 0x28] = a0\n 14599: a0 = u64 [sp + 0x48]\n 14602: u64 [sp + 0x30] = a0\n 14605: a0 = u64 [sp + 0x40]\n 14608: u64 [sp + 0x38] = a0\n 14611: a0 = u64 [sp + 0x18]\n 14614: i32 a1 = a0 + 0x20\n 14617: i32 a0 = sp + 0x40\n 14620: ecalli 3 // 'call_data_load'\n 14622: a0 = u64 [sp + 0x58]\n 14625: a1 = u64 [sp + 0x50]\n 14628: a2 = u64 [sp + 0x48]\n 14631: a3 = u64 [sp + 0x40]\n 14634: u64 [s1 + 0x38] = a0\n 14637: u64 [s1 + 0x30] = a1\n 14640: u64 [s1 + 0x28] = a2\n 14643: u64 [s1 + 0x20] = a3\n 14646: a0 = u64 [sp + 0x20]\n 14649: u64 [s1 + 0x18] = a0\n 14652: a0 = u64 [sp + 0x28]\n 14655: u64 [s1 + 0x10] = a0\n 14658: a0 = u64 [sp + 0x30]\n 14661: u64 [s1 + 0x8] = a0\n 14664: a0 = u64 [sp + 0x38]\n 14667: u64 [s1] = a0\n 14669: sp = s0 + 0xffffffffffffff80\n 14672: ra = u64 [sp + 0x78]\n 14675: s0 = u64 [sp + 0x70]\n 14678: s1 = u64 [sp + 0x68]\n 14681: sp = sp + 0x80\n 14685: ret\n      : @237 (gas: 1)\n 14687: trap\n      : @238 (gas: 3)\n 14688: a0 = 0\n 14690: a1 = 0\n 14692: ra = 212, jump @0\n      : @239 [@dyn 106] (gas: 6)\n 14698: i32 a1 = a0 + 0\n 14700: a0 = 0x1\n 14703: a2 = 0\n 14705: ra = 0xd6\n 14709: ecalli 14 // 'seal_return'\n 14711: fallthrough\n      : @240 [@dyn 107] (gas: 8)\n 14712: sp = sp + 0xffffffffffffff60\n 14716: u64 [sp + 0x98] = ra\n 14720: u64 [sp + 0x90] = s0\n 14724: u64 [sp + 0x88] = s1\n 14728: s0 = sp + 0xa0\n 14732: sp = sp & 0xffffffffffffffe0\n 14735: a0 = i32 [0x20004]\n 14740: jump @245 if a0 <=u 67\n      : @241 (gas: 75)\n 14745: i32 a0 = sp + 0x60\n 14748: a1 = 0x4\n 14751: ecalli 3 // 'call_data_load'\n 14753: a0 = u64 [sp + 0x60]\n 14756: u64 [sp + 0x18] = a0\n 14759: a0 = u64 [sp + 0x68]\n 14762: u64 [sp + 0x10] = a0\n 14765: a0 = u64 [sp + 0x70]\n 14768: u64 [sp + 0x8] = a0\n 14771: s1 = u64 [sp + 0x78]\n 14774: i32 a0 = sp + 0x60\n 14777: a1 = 0x24\n 14780: ecalli 3 // 'call_data_load'\n 14782: a0 = u64 [sp + 0x60]\n 14785: a1 = u64 [sp + 0x68]\n 14788: a2 = u64 [sp + 0x70]\n 14791: a3 = u64 [sp + 0x78]\n 14794: u64 [sp + 0x38] = a3\n 14797: u64 [sp + 0x30] = a2\n 14800: u64 [sp + 0x28] = a1\n 14803: u64 [sp + 0x20] = a0\n 14806: u64 [sp + 0x58] = s1\n 14809: a0 = u64 [sp + 0x8]\n 14812: u64 [sp + 0x50] = a0\n 14815: a0 = u64 [sp + 0x10]\n 14818: u64 [sp + 0x48] = a0\n 14821: a0 = sp + 0x40\n 14824: a1 = sp + 0x20\n 14827: a2 = u64 [sp + 0x18]\n 14830: u64 [sp + 0x40] = a2\n 14833: ra = 0xd8\n 14837: sp = sp + 0xfffffffffffffa00\n 14841: u64 [sp + 0x5f8] = ra\n 14845: u64 [sp + 0x5f0] = s0\n 14849: u64 [sp + 0x5e8] = s1\n 14853: s0 = sp + 0x600\n 14857: sp = sp & 0xffffffffffffffe0\n 14860: s1 = sp\n 14862: a2 = u64 [a1 + 0x18]\n 14865: u64 [s1 + 0x148] = a2\n 14869: a2 = u64 [a1 + 0x10]\n 14872: u64 [s1 + 0x150] = a2\n 14876: a2 = u64 [a1 + 0x8]\n 14879: u64 [s1 + 0x158] = a2\n 14883: a1 = u64 [a1]\n 14885: u64 [s1 + 0x160] = a1\n 14889: a1 = u64 [a0]\n 14891: u64 [s1 + 0x198] = a1\n 14895: a1 = u64 [a0 + 0x8]\n 14898: u64 [s1 + 0x190] = a1\n 14902: a1 = u64 [a0 + 0x10]\n 14905: u64 [s1 + 0x188] = a1\n 14909: a0 = u64 [a0 + 0x18]\n 14912: u64 [s1 + 0x180] = a0\n 14916: i32 a0 = s1 + 0x420\n 14920: ecalli 5 // 'caller'\n 14922: a0 = u64 [s1 + 0x428]\n 14926: a1 = i32 [s1 + 0x430]\n 14930: a3 = u64 [s1 + 0x420]\n 14934: u64 [s1 + 0x170] = a3\n 14938: a0 = reverse a0\n 14940: a2 = a0 << 0x20\n 14943: a1 = reverse a1\n 14945: a1 = a1 >> 0x20\n 14948: a1 = a1 | a2\n 14951: u64 [s1 + 0x178] = a1\n 14955: a0 = a0 >> 0x20\n 14958: a1 = reverse a3\n 14960: a1 = a1 << 0x20\n 14963: a0 = a0 | a1\n 14966: u64 [s1 + 0x168] = a0\n 14970: a1 = 0x20\n 14973: a0 = 0\n 14975: ra = 0x2b6\n 14979: jump @0\n      : @242 [@dyn 108] (gas: 3)\n 14982: a0 = 0x40\n 14985: a1 = 0x20\n 14988: ra = 218, jump @0\n      : @243 [@dyn 109] (gas: 100)\n 14994: a1 = u8 [a0 + 0x11]\n 14997: a2 = u8 [a0 + 0x10]\n 15000: a3 = u8 [a0 + 0x12]\n 15003: a4 = u8 [a0 + 0x13]\n 15006: a1 = a1 << 0x8\n 15009: a1 = a1 | a2\n 15012: a3 = a3 << 0x10\n 15015: a4 = a4 << 0x18\n 15018: a3 = a3 | a4\n 15021: a1 = a1 | a3\n 15024: a2 = u8 [a0 + 0x15]\n 15027: a3 = u8 [a0 + 0x14]\n 15030: a4 = u8 [a0 + 0x16]\n 15033: a5 = u8 [a0 + 0x17]\n 15036: a2 = a2 << 0x8\n 15039: a2 = a2 | a3\n 15042: a4 = a4 << 0x10\n 15045: a5 = a5 << 0x18\n 15048: a4 = a4 | a5\n 15051: a2 = a2 | a4\n 15054: a2 = a2 << 0x20\n 15057: t0 = a2 | a1\n 15060: a2 = u8 [a0 + 0x1]\n 15063: a3 = u8 [a0]\n 15065: a4 = u8 [a0 + 0x2]\n 15068: a5 = u8 [a0 + 0x3]\n 15071: a2 = a2 << 0x8\n 15074: a2 = a2 | a3\n 15077: a4 = a4 << 0x10\n 15080: a5 = a5 << 0x18\n 15083: a4 = a4 | a5\n 15086: a2 = a2 | a4\n 15089: a3 = u8 [a0 + 0x5]\n 15092: a4 = u8 [a0 + 0x4]\n 15095: a5 = u8 [a0 + 0x6]\n 15098: s1 = u8 [a0 + 0x7]\n 15101: a3 = a3 << 0x8\n 15104: a3 = a3 | a4\n 15107: a5 = a5 << 0x10\n 15110: s1 = s1 << 0x18\n 15113: a5 = a5 | s1\n 15116: a3 = a3 | a5\n 15119: a3 = a3 << 0x20\n 15122: a2 = a2 | a3\n 15125: a3 = u8 [a0 + 0x19]\n 15128: a4 = u8 [a0 + 0x18]\n 15131: a5 = u8 [a0 + 0x1a]\n 15134: s1 = u8 [a0 + 0x1b]\n 15137: a3 = a3 << 0x8\n 15140: a3 = a3 | a4\n 15143: a5 = a5 << 0x10\n 15146: s1 = s1 << 0x18\n 15149: a5 = a5 | s1\n 15152: a3 = a3 | a5\n 15155: a4 = u8 [a0 + 0x1d]\n 15158: a5 = u8 [a0 + 0x1c]\n 15161: s1 = u8 [a0 + 0x1e]\n 15164: a1 = u8 [a0 + 0x1f]\n 15167: a4 = a4 << 0x8\n 15170: a4 = a4 | a5\n 15173: s1 = s1 << 0x10\n 15176: a1 = a1 << 0x18\n 15179: a1 = a1 | s1\n 15182: a1 = a1 | a4\n 15185: a1 = a1 << 0x20\n 15188: a3 = a3 | a1\n 15191: a1 = u8 [a0 + 0x9]\n 15194: a4 = u8 [a0 + 0x8]\n 15197: a5 = u8 [a0 + 0xa]\n 15200: s1 = u8 [a0 + 0xb]\n 15203: a1 = a1 << 0x8\n 15206: a1 = a1 | a4\n 15209: a5 = a5 << 0x10\n 15212: s1 = s1 << 0x18\n 15215: a5 = a5 | s1\n 15218: a1 = a1 | a5\n 15221: a4 = u8 [a0 + 0xd]\n 15224: a5 = u8 [a0 + 0xc]\n 15227: s1 = u8 [a0 + 0xe]\n 15230: a0 = u8 [a0 + 0xf]\n 15233: a4 = a4 << 0x8\n 15236: a4 = a4 | a5\n 15239: s1 = s1 << 0x10\n 15242: a0 = a0 << 0x18\n 15245: a0 = a0 | s1\n 15248: a0 = a0 | a4\n 15251: a0 = a0 << 0x20\n 15254: a0 = a0 | a1\n 15257: a1 = reverse a0\n 15259: a0 = reverse a3\n 15261: a2 = reverse a2\n 15263: a3 = reverse t0\n 15265: a2 = a2 | a3\n 15268: a3 = a0 | a1\n 15271: a3 = a3 | a2\n 15274: a3 = a3 >> 0x20\n 15277: a1 = a1 | a2\n 15280: a1 = a1 << 0x20\n 15283: a1 = a1 | a3\n 15286: jump @247 if a1 == 0\n      : @244 (gas: 1)\n 15289: trap\n      : @245 (gas: 3)\n 15290: a0 = 0\n 15292: a1 = 0\n 15294: ra = 220, jump @0\n      : @246 [@dyn 110] (gas: 7)\n 15300: i32 a1 = a0 + 0\n 15302: a0 = 0x1\n 15305: a2 = 0\n 15307: ecalli 14 // 'seal_return'\n 15309: i32 a0 = a0 + 0\n 15311: ra = 0xde\n 15315: jump @0\n      : @247 (gas: 2)\n 15318: i32 a0 = a0 + 0\n 15320: ra = 222, jump @0\n      : @248 [@dyn 111] (gas: 6)\n 15326: i32 a1 = a0 + 0\n 15328: a0 = 0\n 15330: a2 = 0\n 15332: ra = 0xe0\n 15336: ecalli 14 // 'seal_return'\n 15338: fallthrough\n      : @249 [@dyn 112] (gas: 35)\n 15339: sp = sp + 0xffffffffffffffa0\n 15342: u64 [sp + 0x58] = ra\n 15345: u64 [sp + 0x50] = s0\n 15348: u64 [sp + 0x48] = s1\n 15351: s0 = sp + 0x60\n 15354: sp = sp & 0xffffffffffffffe0\n 15357: s1 = a0\n 15359: u64 [sp + 24] = 0\n 15362: u64 [sp + 16] = 0\n 15365: u64 [sp + 8] = 0\n 15368: u64 [sp + 0] = 0\n 15370: u64 [sp + 56] = 0\n 15373: u64 [sp + 48] = 0\n 15376: u64 [sp + 40] = 0\n 15379: u64 [sp + 32] = 0\n 15382: u32 [sp + 64] = 0x20\n 15386: i32 a1 = sp + 0\n 15388: i32 a3 = sp + 0x20\n 15391: i32 a4 = sp + 0x40\n 15394: a2 = 0xffffffffffffffff\n 15397: a0 = 0\n 15399: ecalli 7 // 'get_storage'\n 15401: a0 = u32 [sp + 0x30]\n 15404: a1 = u64 [sp + 0x28]\n 15407: a2 = u64 [sp + 0x20]\n 15410: u64 [s1 + 24] = 0\n 15413: u64 [s1 + 0x10] = a0\n 15416: u64 [s1 + 0x8] = a1\n 15419: u64 [s1] = a2\n 15421: sp = s0 + 0xffffffffffffffa0\n 15424: ra = u64 [sp + 0x58]\n 15427: s0 = u64 [sp + 0x50]\n 15430: s1 = u64 [sp + 0x48]\n 15433: sp = sp + 0x60\n 15436: ret\n      : @250 (gas: 8)\n 15438: a0 = u64 [sp + 0x30]\n 15441: a1 = u64 [sp + 0x38]\n 15444: a2 = u64 [sp + 0x28]\n 15447: a3 = u64 [sp + 0x20]\n 15450: a1 = a1 | a2\n 15453: a0 = a0 | a3\n 15456: a0 = a0 | a1\n 15459: jump @255 if a0 != 0\n      : @251 (gas: 2)\n 15463: a0 = i32 [0x20004]\n 15468: jump @255 if a0 <=u 3\n      : @252 (gas: 24)\n 15473: u64 [sp + 88] = 0\n 15476: u64 [sp + 80] = 0\n 15479: u64 [sp + 72] = 0\n 15482: u64 [sp + 64] = 0\n 15485: u64 [sp + 120] = 0\n 15488: u64 [sp + 112] = 0\n 15491: u64 [sp + 104] = 0\n 15494: u64 [sp + 96] = 0\n 15497: u32 [sp + 128] = 0x20\n 15502: i32 a1 = sp + 0x40\n 15505: i32 a3 = sp + 0x60\n 15508: i32 a4 = sp + 0x80\n 15512: a2 = 0xffffffffffffffff\n 15515: a0 = 0\n 15517: ecalli 7 // 'get_storage'\n 15519: a0 = u64 [sp + 0x70]\n 15522: u64 [sp + 0x8] = a0\n 15525: a0 = u64 [sp + 0x68]\n 15528: u64 [sp + 0x10] = a0\n 15531: a0 = u64 [sp + 0x60]\n 15534: u64 [sp + 0x18] = a0\n 15537: a0 = 0x40\n 15540: a1 = 0x20\n 15543: ra = 226, jump @0\n      : @253 [@dyn 113] (gas: 100)\n 15549: a1 = u8 [a0 + 0x11]\n 15552: a2 = u8 [a0 + 0x10]\n 15555: a3 = u8 [a0 + 0x12]\n 15558: a4 = u8 [a0 + 0x13]\n 15561: a1 = a1 << 0x8\n 15564: a1 = a1 | a2\n 15567: a3 = a3 << 0x10\n 15570: a4 = a4 << 0x18\n 15573: a3 = a3 | a4\n 15576: a1 = a1 | a3\n 15579: a2 = u8 [a0 + 0x15]\n 15582: a3 = u8 [a0 + 0x14]\n 15585: a4 = u8 [a0 + 0x16]\n 15588: a5 = u8 [a0 + 0x17]\n 15591: a2 = a2 << 0x8\n 15594: a2 = a2 | a3\n 15597: a4 = a4 << 0x10\n 15600: a5 = a5 << 0x18\n 15603: a4 = a4 | a5\n 15606: a2 = a2 | a4\n 15609: a2 = a2 << 0x20\n 15612: t0 = a2 | a1\n 15615: a2 = u8 [a0 + 0x1]\n 15618: a3 = u8 [a0]\n 15620: a4 = u8 [a0 + 0x2]\n 15623: a5 = u8 [a0 + 0x3]\n 15626: a2 = a2 << 0x8\n 15629: a2 = a2 | a3\n 15632: a4 = a4 << 0x10\n 15635: a5 = a5 << 0x18\n 15638: a4 = a4 | a5\n 15641: a2 = a2 | a4\n 15644: a3 = u8 [a0 + 0x5]\n 15647: a4 = u8 [a0 + 0x4]\n 15650: a5 = u8 [a0 + 0x6]\n 15653: s1 = u8 [a0 + 0x7]\n 15656: a3 = a3 << 0x8\n 15659: a3 = a3 | a4\n 15662: a5 = a5 << 0x10\n 15665: s1 = s1 << 0x18\n 15668: a5 = a5 | s1\n 15671: a3 = a3 | a5\n 15674: a3 = a3 << 0x20\n 15677: a2 = a2 | a3\n 15680: a3 = u8 [a0 + 0x19]\n 15683: a4 = u8 [a0 + 0x18]\n 15686: a5 = u8 [a0 + 0x1a]\n 15689: s1 = u8 [a0 + 0x1b]\n 15692: a3 = a3 << 0x8\n 15695: a3 = a3 | a4\n 15698: a5 = a5 << 0x10\n 15701: s1 = s1 << 0x18\n 15704: a5 = a5 | s1\n 15707: a3 = a3 | a5\n 15710: a4 = u8 [a0 + 0x1d]\n 15713: a5 = u8 [a0 + 0x1c]\n 15716: s1 = u8 [a0 + 0x1e]\n 15719: a1 = u8 [a0 + 0x1f]\n 15722: a4 = a4 << 0x8\n 15725: a4 = a4 | a5\n 15728: s1 = s1 << 0x10\n 15731: a1 = a1 << 0x18\n 15734: a1 = a1 | s1\n 15737: a1 = a1 | a4\n 15740: a1 = a1 << 0x20\n 15743: a3 = a3 | a1\n 15746: a1 = u8 [a0 + 0x9]\n 15749: a4 = u8 [a0 + 0x8]\n 15752: a5 = u8 [a0 + 0xa]\n 15755: s1 = u8 [a0 + 0xb]\n 15758: a1 = a1 << 0x8\n 15761: a1 = a1 | a4\n 15764: a5 = a5 << 0x10\n 15767: s1 = s1 << 0x18\n 15770: a5 = a5 | s1\n 15773: a1 = a1 | a5\n 15776: a4 = u8 [a0 + 0xd]\n 15779: a5 = u8 [a0 + 0xc]\n 15782: s1 = u8 [a0 + 0xe]\n 15785: a0 = u8 [a0 + 0xf]\n 15788: a4 = a4 << 0x8\n 15791: a4 = a4 | a5\n 15794: s1 = s1 << 0x10\n 15797: a0 = a0 << 0x18\n 15800: a0 = a0 | s1\n 15803: a0 = a0 | a4\n 15806: a0 = a0 << 0x20\n 15809: a0 = a0 | a1\n 15812: a1 = reverse a0\n 15814: a0 = reverse a3\n 15816: a2 = reverse a2\n 15818: a3 = reverse t0\n 15820: a2 = a2 | a3\n 15823: a3 = a0 | a1\n 15826: a3 = a3 | a2\n 15829: a3 = a3 >> 0x20\n 15832: a1 = a1 | a2\n 15835: a1 = a1 << 0x20\n 15838: a1 = a1 | a3\n 15841: jump @257 if a1 == 0\n      : @254 (gas: 1)\n 15844: trap\n      : @255 (gas: 3)\n 15845: a0 = 0\n 15847: a1 = 0\n 15849: ra = 228, jump @0\n      : @256 [@dyn 114] (gas: 5)\n 15855: i32 a1 = a0 + 0\n 15857: a0 = 0x1\n 15860: a2 = 0\n 15862: ecalli 14 // 'seal_return'\n 15864: fallthrough\n      : @257 (gas: 7)\n 15865: a1 = u64 [sp + 0x8]\n 15868: a1 = a1 << 0x20\n 15871: s1 = a1 >> 0x20\n 15874: i32 a0 = a0 + 0\n 15876: u64 [sp + 0x8] = a0\n 15879: a1 = 0x20\n 15882: ra = 230, jump @0\n      : @258 [@dyn 115] (gas: 58)\n 15888: a1 = reverse s1\n 15890: a2 = u64 [sp + 0x10]\n 15893: a2 = reverse a2\n 15895: a3 = u64 [sp + 0x18]\n 15898: a3 = reverse a3\n 15900: a4 = a3 >> 0x38\n 15903: u8 [a0 + 0x1f] = a4\n 15906: a4 = a3 >> 0x30\n 15909: u8 [a0 + 0x1e] = a4\n 15912: a4 = a3 >> 0x28\n 15915: u8 [a0 + 0x1d] = a4\n 15918: a4 = a3 >> 0x20\n 15921: u8 [a0 + 0x1c] = a4\n 15924: a4 = a3 >> 0x18\n 15927: u8 [a0 + 0x1b] = a4\n 15930: a4 = a3 >> 0x10\n 15933: u8 [a0 + 0x1a] = a4\n 15936: a4 = a3 >> 0x8\n 15939: u8 [a0 + 0x19] = a4\n 15942: u8 [a0 + 0x18] = a3\n 15945: u8 [a0 + 0x10] = a2\n 15948: u8 [a0 + 11] = 0\n 15951: u8 [a0 + 10] = 0\n 15954: u8 [a0 + 9] = 0\n 15957: u8 [a0 + 7] = 0\n 15960: u8 [a0 + 6] = 0\n 15963: u8 [a0 + 5] = 0\n 15966: u8 [a0 + 4] = 0\n 15969: u8 [a0 + 3] = 0\n 15972: u8 [a0 + 2] = 0\n 15975: u8 [a0 + 1] = 0\n 15978: u8 [a0 + 0] = 0\n 15980: a3 = a2 >> 0x38\n 15983: u8 [a0 + 0x17] = a3\n 15986: a3 = a2 >> 0x30\n 15989: u8 [a0 + 0x16] = a3\n 15992: a3 = a2 >> 0x28\n 15995: u8 [a0 + 0x15] = a3\n 15998: a3 = a2 >> 0x20\n 16001: u8 [a0 + 0x14] = a3\n 16004: a3 = a2 >> 0x18\n 16007: u8 [a0 + 0x13] = a3\n 16010: a3 = a2 >> 0x10\n 16013: u8 [a0 + 0x12] = a3\n 16016: a2 = a2 >> 0x8\n 16019: u8 [a0 + 0x11] = a2\n 16022: u8 [a0 + 0x8] = a1\n 16025: a2 = a1 >> 0x38\n 16028: u8 [a0 + 0xf] = a2\n 16031: a2 = a1 >> 0x30\n 16034: u8 [a0 + 0xe] = a2\n 16037: a2 = a1 >> 0x28\n 16040: u8 [a0 + 0xd] = a2\n 16043: a1 = a1 >> 0x20\n 16046: u8 [a0 + 0xc] = a1\n 16049: a1 = 0x20\n 16052: a0 = u64 [sp + 0x8]\n 16055: ra = 232, jump @0\n      : @259 [@dyn 116] (gas: 6)\n 16061: i32 a1 = a0 + 0\n 16063: a2 = 0x20\n 16066: a0 = 0\n 16068: ra = 0xea\n 16072: ecalli 14 // 'seal_return'\n 16074: fallthrough\n      : @260 [@dyn 117] (gas: 9)\n 16075: a2 = u64 [a1 + 0x18]\n 16078: a3 = u64 [a1 + 0x10]\n 16081: a4 = u64 [a1 + 0x8]\n 16084: a1 = u64 [a1]\n 16086: u64 [a0 + 0x18] = a2\n 16089: u64 [a0 + 0x10] = a3\n 16092: u64 [a0 + 0x8] = a4\n 16095: u64 [a0] = a1\n 16097: ret\n      : @261 [@dyn 118] (gas: 59)\n 16099: a1 = u64 [sp + 0xc8]\n 16103: a1 = reverse a1\n 16105: a2 = u64 [sp + 0xd0]\n 16109: a2 = reverse a2\n 16111: a3 = u64 [sp + 0xd8]\n 16115: a3 = reverse a3\n 16117: a4 = a3 >> 0x38\n 16120: u8 [a0 + 0x1f] = a4\n 16123: a4 = a3 >> 0x30\n 16126: u8 [a0 + 0x1e] = a4\n 16129: a4 = a3 >> 0x28\n 16132: u8 [a0 + 0x1d] = a4\n 16135: a4 = a3 >> 0x20\n 16138: u8 [a0 + 0x1c] = a4\n 16141: a4 = a3 >> 0x18\n 16144: u8 [a0 + 0x1b] = a4\n 16147: a4 = a3 >> 0x10\n 16150: u8 [a0 + 0x1a] = a4\n 16153: a4 = a3 >> 0x8\n 16156: u8 [a0 + 0x19] = a4\n 16159: u8 [a0 + 0x18] = a3\n 16162: a3 = a2 >> 0x38\n 16165: u8 [a0 + 0x17] = a3\n 16168: a3 = a2 >> 0x30\n 16171: u8 [a0 + 0x16] = a3\n 16174: a3 = a2 >> 0x28\n 16177: u8 [a0 + 0x15] = a3\n 16180: a3 = a2 >> 0x20\n 16183: u8 [a0 + 0x14] = a3\n 16186: a3 = a2 >> 0x18\n 16189: u8 [a0 + 0x13] = a3\n 16192: a3 = a2 >> 0x10\n 16195: u8 [a0 + 0x12] = a3\n 16198: a3 = a2 >> 0x8\n 16201: u8 [a0 + 0x11] = a3\n 16204: u8 [a0 + 0x10] = a2\n 16207: a2 = a1 >> 0x38\n 16210: u8 [a0 + 0xf] = a2\n 16213: a2 = a1 >> 0x30\n 16216: u8 [a0 + 0xe] = a2\n 16219: a2 = a1 >> 0x28\n 16222: u8 [a0 + 0xd] = a2\n 16225: a2 = a1 >> 0x20\n 16228: u8 [a0 + 0xc] = a2\n 16231: u8 [a0 + 11] = 0\n 16234: u8 [a0 + 10] = 0\n 16237: u8 [a0 + 9] = 0\n 16240: u8 [a0 + 0x8] = a1\n 16243: u8 [a0 + 7] = 0\n 16246: u8 [a0 + 6] = 0\n 16249: u8 [a0 + 5] = 0\n 16252: u8 [a0 + 4] = 0\n 16255: u8 [a0 + 3] = 0\n 16258: u8 [a0 + 2] = 0\n 16261: u8 [a0 + 1] = 0\n 16264: u8 [a0 + 0] = 0\n 16266: a0 = 0x20\n 16269: a1 = 0x20\n 16272: ra = 238, jump @0\n      : @262 [@dyn 119] (gas: 35)\n 16278: u8 [a0 + 31] = 0x2\n 16282: u8 [a0 + 30] = 0\n 16285: u8 [a0 + 29] = 0\n 16288: u8 [a0 + 28] = 0\n 16291: u8 [a0 + 27] = 0\n 16294: u8 [a0 + 26] = 0\n 16297: u8 [a0 + 25] = 0\n 16300: u8 [a0 + 24] = 0\n 16303: u8 [a0 + 23] = 0\n 16306: u8 [a0 + 22] = 0\n 16309: u8 [a0 + 21] = 0\n 16312: u8 [a0 + 20] = 0\n 16315: u8 [a0 + 19] = 0\n 16318: u8 [a0 + 18] = 0\n 16321: u8 [a0 + 17] = 0\n 16324: u8 [a0 + 16] = 0\n 16327: u8 [a0 + 15] = 0\n 16330: u8 [a0 + 14] = 0\n 16333: u8 [a0 + 13] = 0\n 16336: u8 [a0 + 12] = 0\n 16339: u8 [a0 + 11] = 0\n 16342: u8 [a0 + 10] = 0\n 16345: u8 [a0 + 9] = 0\n 16348: u8 [a0 + 8] = 0\n 16351: u8 [a0 + 7] = 0\n 16354: u8 [a0 + 6] = 0\n 16357: u8 [a0 + 5] = 0\n 16360: u8 [a0 + 4] = 0\n 16363: u8 [a0 + 3] = 0\n 16366: u8 [a0 + 2] = 0\n 16369: u8 [a0 + 1] = 0\n 16372: u8 [a0 + 0] = 0\n 16374: a1 = 0x40\n 16377: a0 = 0\n 16379: ra = 240, jump @0\n      : @263 [@dyn 120] (gas: 299)\n 16385: i32 a0 = a0 + 0\n 16387: i32 a2 = sp + 0x100\n 16391: a1 = 0x40\n 16394: ecalli 8 // 'hash_keccak_256'\n 16396: a0 = u64 [sp + 0x118]\n 16400: a1 = u64 [sp + 0x110]\n 16404: a2 = u64 [sp + 0x108]\n 16408: a3 = u64 [sp + 0x100]\n 16412: a4 = reverse a0\n 16414: u64 [sp + 0xc8] = a4\n 16418: a1 = reverse a1\n 16420: u64 [sp + 0xd0] = a1\n 16424: a2 = reverse a2\n 16426: u64 [sp + 0xc0] = a2\n 16430: a0 = reverse a3\n 16432: u64 [sp + 0xd8] = a0\n 16436: u64 [sp + 0xf8] = a0\n 16440: u64 [sp + 0xf0] = a2\n 16444: u64 [sp + 0xe8] = a1\n 16448: u64 [sp + 0xe0] = a4\n 16452: u64 [sp + 280] = 0\n 16456: u64 [sp + 272] = 0\n 16460: u64 [sp + 264] = 0\n 16464: u64 [sp + 256] = 0\n 16468: u32 [sp + 288] = 0x20\n 16473: i32 a1 = sp + 0xe0\n 16477: i32 a3 = sp + 0x100\n 16481: i32 a4 = sp + 0x120\n 16485: a2 = 0xffffffffffffffff\n 16488: a0 = 0\n 16490: ecalli 7 // 'get_storage'\n 16492: a0 = u64 [sp + 0xc8]\n 16496: a0 = a0 + 0x1\n 16499: a1 = a0 <u 0x1\n 16502: a2 = u64 [sp + 0xd0]\n 16506: a1 = a1 + a2\n 16509: a2 = a0 | a1\n 16512: a2 = a2 <u 0x1\n 16515: a3 = u64 [sp + 0xc0]\n 16519: a2 = a2 + a3\n 16522: a3 = a2 <u a3\n 16525: a4 = u64 [sp + 0xd8]\n 16529: a3 = a3 + a4\n 16532: u64 [sp + 0xf8] = a3\n 16536: a3 = u64 [sp + 0x100]\n 16540: u64 [sp + 0xb8] = a3\n 16544: u64 [sp + 0xf0] = a2\n 16548: a2 = u64 [sp + 0x108]\n 16552: u64 [sp + 0xb0] = a2\n 16556: u64 [sp + 0xe8] = a1\n 16560: a1 = u64 [sp + 0x110]\n 16564: u64 [sp + 0xa8] = a1\n 16568: u64 [sp + 0xe0] = a0\n 16572: a0 = u64 [sp + 0x118]\n 16576: u64 [sp + 0xa0] = a0\n 16580: u64 [sp + 280] = 0\n 16584: u64 [sp + 272] = 0\n 16588: u64 [sp + 264] = 0\n 16592: u64 [sp + 256] = 0\n 16596: u32 [sp + 288] = 0x20\n 16601: i32 a1 = sp + 0xe0\n 16605: i32 a3 = sp + 0x100\n 16609: i32 a4 = sp + 0x120\n 16613: a2 = 0xffffffffffffffff\n 16616: a0 = 0\n 16618: ecalli 7 // 'get_storage'\n 16620: a1 = u64 [sp + 0xc8]\n 16624: a0 = a1 + 0x2\n 16627: a1 = a0 <u a1\n 16630: a3 = u64 [sp + 0xd0]\n 16634: a2 = a3 + a1\n 16637: a3 = a2 <u a3\n 16640: a3 = a1 if a1 == 0\n 16643: a1 = u64 [sp + 0xc0]\n 16647: a3 = a3 + a1\n 16650: a1 = a3 <u a1\n 16653: a4 = u64 [sp + 0xd8]\n 16657: a1 = a1 + a4\n 16660: u64 [sp + 0xf8] = a1\n 16664: a1 = u64 [sp + 0x100]\n 16668: u64 [sp + 0x98] = a1\n 16672: u64 [sp + 0xf0] = a3\n 16676: a1 = u64 [sp + 0x108]\n 16680: u64 [sp + 0x90] = a1\n 16684: u64 [sp + 0xe8] = a2\n 16688: a1 = u64 [sp + 0x110]\n 16692: u64 [sp + 0x88] = a1\n 16696: u64 [sp + 0xe0] = a0\n 16700: a0 = u64 [sp + 0x118]\n 16704: u64 [sp + 0x80] = a0\n 16708: u64 [sp + 280] = 0\n 16712: u64 [sp + 272] = 0\n 16716: u64 [sp + 264] = 0\n 16720: u64 [sp + 256] = 0\n 16724: u32 [sp + 288] = 0x20\n 16729: i32 a1 = sp + 0xe0\n 16733: i32 a3 = sp + 0x100\n 16737: i32 a4 = sp + 0x120\n 16741: a2 = 0xffffffffffffffff\n 16744: a0 = 0\n 16746: ecalli 7 // 'get_storage'\n 16748: a1 = u64 [sp + 0xc8]\n 16752: a0 = a1 + 0x3\n 16755: a1 = a0 <u a1\n 16758: a3 = u64 [sp + 0xd0]\n 16762: a2 = a3 + a1\n 16765: a3 = a2 <u a3\n 16768: a3 = a1 if a1 == 0\n 16771: a1 = u64 [sp + 0xc0]\n 16775: a3 = a3 + a1\n 16778: a1 = a3 <u a1\n 16781: a4 = u64 [sp + 0xd8]\n 16785: a1 = a1 + a4\n 16788: u64 [sp + 0xf8] = a1\n 16792: a1 = u64 [sp + 0x100]\n 16796: u64 [sp + 0x78] = a1\n 16799: u64 [sp + 0xf0] = a3\n 16803: a1 = u64 [sp + 0x108]\n 16807: u64 [sp + 0x70] = a1\n 16810: u64 [sp + 0xe8] = a2\n 16814: a1 = u64 [sp + 0x110]\n 16818: u64 [sp + 0x68] = a1\n 16821: u64 [sp + 0xe0] = a0\n 16825: a0 = u64 [sp + 0x118]\n 16829: u64 [sp + 0x60] = a0\n 16832: u64 [sp + 280] = 0\n 16836: u64 [sp + 272] = 0\n 16840: u64 [sp + 264] = 0\n 16844: u64 [sp + 256] = 0\n 16848: u32 [sp + 288] = 0x20\n 16853: i32 a1 = sp + 0xe0\n 16857: i32 a3 = sp + 0x100\n 16861: i32 a4 = sp + 0x120\n 16865: a2 = 0xffffffffffffffff\n 16868: a0 = 0\n 16870: ecalli 7 // 'get_storage'\n 16872: a1 = u64 [sp + 0xc8]\n 16876: a0 = a1 + 0x4\n 16879: a1 = a0 <u a1\n 16882: a3 = u64 [sp + 0xd0]\n 16886: a2 = a3 + a1\n 16889: a3 = a2 <u a3\n 16892: a3 = a1 if a1 == 0\n 16895: a1 = u64 [sp + 0xc0]\n 16899: a3 = a3 + a1\n 16902: a1 = a3 <u a1\n 16905: a4 = u64 [sp + 0xd8]\n 16909: a1 = a1 + a4\n 16912: u64 [sp + 0xf8] = a1\n 16916: a1 = u64 [sp + 0x100]\n 16920: u64 [sp + 0x58] = a1\n 16923: u64 [sp + 0xf0] = a3\n 16927: a1 = u64 [sp + 0x108]\n 16931: u64 [sp + 0x50] = a1\n 16934: u64 [sp + 0xe8] = a2\n 16938: a1 = u64 [sp + 0x110]\n 16942: u64 [sp + 0x48] = a1\n 16945: u64 [sp + 0xe0] = a0\n 16949: a0 = u64 [sp + 0x118]\n 16953: u64 [sp + 0x40] = a0\n 16956: u64 [sp + 280] = 0\n 16960: u64 [sp + 272] = 0\n 16964: u64 [sp + 264] = 0\n 16968: u64 [sp + 256] = 0\n 16972: u32 [sp + 288] = 0x20\n 16977: i32 a1 = sp + 0xe0\n 16981: i32 a3 = sp + 0x100\n 16985: i32 a4 = sp + 0x120\n 16989: a2 = 0xffffffffffffffff\n 16992: a0 = 0\n 16994: ecalli 7 // 'get_storage'\n 16996: a1 = u64 [sp + 0xc8]\n 17000: a0 = a1 + 0x5\n 17003: a1 = a0 <u a1\n 17006: a3 = u64 [sp + 0xd0]\n 17010: a2 = a3 + a1\n 17013: a3 = a2 <u a3\n 17016: a3 = a1 if a1 == 0\n 17019: a1 = u64 [sp + 0xc0]\n 17023: a3 = a3 + a1\n 17026: a1 = a3 <u a1\n 17029: a4 = u64 [sp + 0xd8]\n 17033: a1 = a1 + a4\n 17036: u64 [sp + 0xf8] = a1\n 17040: a1 = u64 [sp + 0x100]\n 17044: u64 [sp + 0x38] = a1\n 17047: u64 [sp + 0xf0] = a3\n 17051: a1 = u64 [sp + 0x108]\n 17055: u64 [sp + 0x30] = a1\n 17058: u64 [sp + 0xe8] = a2\n 17062: a1 = u64 [sp + 0x110]\n 17066: u64 [sp + 0x28] = a1\n 17069: u64 [sp + 0xe0] = a0\n 17073: a0 = u64 [sp + 0x118]\n 17077: u64 [sp + 0x20] = a0\n 17080: u64 [sp + 280] = 0\n 17084: u64 [sp + 272] = 0\n 17088: u64 [sp + 264] = 0\n 17092: u64 [sp + 256] = 0\n 17096: u32 [sp + 288] = 0x20\n 17101: i32 a1 = sp + 0xe0\n 17105: i32 a3 = sp + 0x100\n 17109: i32 a4 = sp + 0x120\n 17113: a2 = 0xffffffffffffffff\n 17116: a0 = 0\n 17118: ecalli 7 // 'get_storage'\n 17120: a0 = u64 [sp + 0x100]\n 17124: u64 [sp + 0x18] = a0\n 17127: a0 = u64 [sp + 0x108]\n 17131: u64 [sp + 0x10] = a0\n 17134: a0 = u32 [sp + 0x110]\n 17138: u64 [sp + 0x8] = a0\n 17141: a1 = u64 [sp + 0xc8]\n 17145: a0 = a1 + 0x6\n 17148: a1 = a0 <u a1\n 17151: a3 = u64 [sp + 0xd0]\n 17155: a2 = a3 + a1\n 17158: a3 = a2 <u a3\n 17161: a3 = a1 if a1 == 0\n 17164: a1 = u64 [sp + 0xc0]\n 17168: a3 = a3 + a1\n 17171: a1 = a3 <u a1\n 17174: a4 = u64 [sp + 0xd8]\n 17178: a1 = a1 + a4\n 17181: u64 [sp + 0xf8] = a1\n 17185: u64 [sp + 0xf0] = a3\n 17189: u64 [sp + 0xe8] = a2\n 17193: u64 [sp + 0xe0] = a0\n 17197: u64 [sp + 280] = 0\n 17201: u64 [sp + 272] = 0\n 17205: u64 [sp + 264] = 0\n 17209: u64 [sp + 256] = 0\n 17213: u32 [sp + 288] = 0x20\n 17218: i32 a1 = sp + 0xe0\n 17222: i32 a3 = sp + 0x100\n 17226: i32 a4 = sp + 0x120\n 17230: a2 = 0xffffffffffffffff\n 17233: a0 = 0\n 17235: ecalli 7 // 'get_storage'\n 17237: a0 = u32 [sp + 0x110]\n 17241: a1 = u64 [sp + 0x108]\n 17245: a2 = u64 [sp + 0x100]\n 17249: u64 [s1 + 0xd0] = a0\n 17253: u64 [s1 + 0xc8] = a1\n 17257: u64 [s1 + 0xc0] = a2\n 17261: a0 = u64 [sp + 0x8]\n 17264: u64 [s1 + 0xb0] = a0\n 17268: a0 = u64 [sp + 0x10]\n 17271: u64 [s1 + 0xa8] = a0\n 17275: a0 = u64 [sp + 0x18]\n 17278: u64 [s1 + 0xa0] = a0\n 17282: a0 = u64 [sp + 0x20]\n 17285: u64 [s1 + 0x98] = a0\n 17289: a0 = u64 [sp + 0x28]\n 17292: u64 [s1 + 0x90] = a0\n 17296: a0 = u64 [sp + 0x30]\n 17299: u64 [s1 + 0x88] = a0\n 17303: a0 = u64 [sp + 0x38]\n 17306: u64 [s1 + 0x80] = a0\n 17310: a0 = u64 [sp + 0x40]\n 17313: u64 [s1 + 0x78] = a0\n 17316: a0 = u64 [sp + 0x48]\n 17319: u64 [s1 + 0x70] = a0\n 17322: a0 = u64 [sp + 0x50]\n 17325: u64 [s1 + 0x68] = a0\n 17328: a0 = u64 [sp + 0x58]\n 17331: u64 [s1 + 0x60] = a0\n 17334: a0 = u64 [sp + 0x60]\n 17337: u64 [s1 + 0x58] = a0\n 17340: a0 = u64 [sp + 0x68]\n 17343: u64 [s1 + 0x50] = a0\n 17346: a0 = u64 [sp + 0x70]\n 17349: u64 [s1 + 0x48] = a0\n 17352: a0 = u64 [sp + 0x78]\n 17355: u64 [s1 + 0x40] = a0\n 17358: a0 = u64 [sp + 0x80]\n 17362: u64 [s1 + 0x38] = a0\n 17365: a0 = u64 [sp + 0x88]\n 17369: u64 [s1 + 0x30] = a0\n 17372: a0 = u64 [sp + 0x90]\n 17376: u64 [s1 + 0x28] = a0\n 17379: a0 = u64 [sp + 0x98]\n 17383: u64 [s1 + 0x20] = a0\n 17386: a0 = u64 [sp + 0xa0]\n 17390: u64 [s1 + 0x18] = a0\n 17393: a0 = u64 [sp + 0xa8]\n 17397: u64 [s1 + 0x10] = a0\n 17400: a0 = u64 [sp + 0xb0]\n 17404: u64 [s1 + 0x8] = a0\n 17407: a0 = u64 [sp + 0xb8]\n 17411: u64 [s1] = a0\n 17413: u64 [s1 + 216] = 0\n 17417: u64 [s1 + 184] = 0\n 17421: sp = s0 + 0xfffffffffffffec0\n 17425: ra = u64 [sp + 0x138]\n 17429: s0 = u64 [sp + 0x130]\n 17433: s1 = u64 [sp + 0x128]\n 17437: sp = sp + 0x140\n 17441: ret\n      : @264 (gas: 21)\n 17443: sp = sp + 0xfffffffffffffef8\n 17447: u64 [sp + 0x100] = ra\n 17451: u64 [sp + 0xf8] = s0\n 17455: u64 [sp + 0xf0] = s1\n 17459: s1 = u64 [a1 + 0x10]\n 17462: t1 = u64 [a1 + 0x18]\n 17465: t0 = u64 [a1 + 0x8]\n 17468: s0 = u64 [a1]\n 17470: u64 [sp + 0xe0] = t0\n 17474: u64 [sp + 0xc0] = t1\n 17478: a1 = t0 | t1\n 17481: u64 [sp + 0xe8] = s0\n 17485: s0 = s0 | s1\n 17488: s0 = s0 | a1\n 17491: s0 = s0 >> 0x20\n 17494: u64 [sp + 0xc8] = s1\n 17498: a1 = a1 | s1\n 17501: a1 = a1 << 0x20\n 17504: a1 = a1 | s0\n 17507: u64 [sp + 0x30] = a0\n 17510: jump @279 if a1 != 0\n      : @265 (gas: 57)\n 17514: a0 = u64 [sp + 0x118]\n 17518: a1 = u64 [a0 + 0x10]\n 17521: u64 [sp + 0x10] = a1\n 17524: a1 = u64 [sp + 0x110]\n 17528: s1 = u64 [a0 + 0x8]\n 17531: u64 [sp + 0x8] = s1\n 17534: a0 = u64 [a0]\n 17536: u64 [sp] = a0\n 17538: a0 = u64 [sp + 0x108]\n 17542: s1 = u64 [a1 + 0x10]\n 17545: u64 [sp + 0x18] = s1\n 17548: s1 = u64 [a1 + 0x8]\n 17551: u64 [sp + 0x20] = s1\n 17554: a1 = u64 [a1]\n 17556: u64 [sp + 0x28] = a1\n 17559: a1 = u64 [a0 + 0x18]\n 17562: u64 [sp + 0x38] = a1\n 17565: a1 = u64 [a0 + 0x10]\n 17568: u64 [sp + 0x40] = a1\n 17571: a1 = u64 [a0 + 0x8]\n 17574: u64 [sp + 0x48] = a1\n 17577: a0 = u64 [a0]\n 17579: u64 [sp + 0x50] = a0\n 17582: a0 = u64 [a5 + 0x18]\n 17585: u64 [sp + 0x58] = a0\n 17588: a0 = u64 [a5 + 0x10]\n 17591: u64 [sp + 0x60] = a0\n 17594: a0 = u64 [a5 + 0x8]\n 17597: u64 [sp + 0x68] = a0\n 17600: a0 = u64 [a5]\n 17602: u64 [sp + 0x70] = a0\n 17605: a0 = u64 [a4 + 0x18]\n 17608: u64 [sp + 0x78] = a0\n 17611: a0 = u64 [a4 + 0x10]\n 17614: u64 [sp + 0x80] = a0\n 17618: a0 = u64 [a4 + 0x8]\n 17621: u64 [sp + 0x88] = a0\n 17625: a0 = u64 [a4]\n 17627: u64 [sp + 0x90] = a0\n 17631: a0 = u64 [a3 + 0x18]\n 17634: u64 [sp + 0x98] = a0\n 17638: a0 = u64 [a3 + 0x10]\n 17641: u64 [sp + 0xa0] = a0\n 17645: a0 = u64 [a3 + 0x8]\n 17648: u64 [sp + 0xa8] = a0\n 17652: a0 = u64 [a3]\n 17654: u64 [sp + 0xb0] = a0\n 17658: s0 = u64 [a2 + 0x18]\n 17661: s1 = u64 [a2 + 0x10]\n 17664: a0 = u64 [a2 + 0x8]\n 17667: u64 [sp + 0xb8] = a0\n 17671: a0 = u64 [a2]\n 17673: u64 [sp + 0xd0] = a0\n 17677: a0 = i32 [sp + 0xe8]\n 17681: a1 = 0x20\n 17684: u64 [sp + 0xd8] = a0\n 17688: ra = 242, jump @0\n      : @266 [@dyn 121] (gas: 78)\n 17694: a1 = reverse s0\n 17696: a2 = reverse s1\n 17698: a3 = u64 [sp + 0xb8]\n 17702: a3 = reverse a3\n 17704: a4 = u64 [sp + 0xd0]\n 17708: a4 = reverse a4\n 17710: a5 = a4 >> 0x38\n 17713: u8 [a0 + 0x1f] = a5\n 17716: a5 = a4 >> 0x30\n 17719: u8 [a0 + 0x1e] = a5\n 17722: a5 = a4 >> 0x28\n 17725: u8 [a0 + 0x1d] = a5\n 17728: a5 = a4 >> 0x20\n 17731: u8 [a0 + 0x1c] = a5\n 17734: a5 = a4 >> 0x18\n 17737: u8 [a0 + 0x1b] = a5\n 17740: a5 = a4 >> 0x10\n 17743: u8 [a0 + 0x1a] = a5\n 17746: a5 = a4 >> 0x8\n 17749: u8 [a0 + 0x19] = a5\n 17752: u8 [a0 + 0x18] = a4\n 17755: u8 [a0 + 0x10] = a3\n 17758: a4 = a3 >> 0x38\n 17761: u8 [a0 + 0x17] = a4\n 17764: a4 = a3 >> 0x30\n 17767: u8 [a0 + 0x16] = a4\n 17770: a4 = a3 >> 0x28\n 17773: u8 [a0 + 0x15] = a4\n 17776: a4 = a3 >> 0x20\n 17779: u8 [a0 + 0x14] = a4\n 17782: a4 = a3 >> 0x18\n 17785: u8 [a0 + 0x13] = a4\n 17788: a4 = a3 >> 0x10\n 17791: u8 [a0 + 0x12] = a4\n 17794: a3 = a3 >> 0x8\n 17797: u8 [a0 + 0x11] = a3\n 17800: u8 [a0 + 0x8] = a2\n 17803: a3 = a2 >> 0x38\n 17806: u8 [a0 + 0xf] = a3\n 17809: a3 = a2 >> 0x30\n 17812: u8 [a0 + 0xe] = a3\n 17815: a3 = a2 >> 0x28\n 17818: u8 [a0 + 0xd] = a3\n 17821: a3 = a2 >> 0x20\n 17824: u8 [a0 + 0xc] = a3\n 17827: a3 = a2 >> 0x18\n 17830: u8 [a0 + 0xb] = a3\n 17833: a3 = a2 >> 0x10\n 17836: u8 [a0 + 0xa] = a3\n 17839: a2 = a2 >> 0x8\n 17842: u8 [a0 + 0x9] = a2\n 17845: u8 [a0] = a1\n 17847: a2 = a1 >> 0x38\n 17850: u8 [a0 + 0x7] = a2\n 17853: a2 = a1 >> 0x30\n 17856: u8 [a0 + 0x6] = a2\n 17859: a2 = a1 >> 0x28\n 17862: u8 [a0 + 0x5] = a2\n 17865: a2 = a1 >> 0x20\n 17868: u8 [a0 + 0x4] = a2\n 17871: a2 = a1 >> 0x18\n 17874: u8 [a0 + 0x3] = a2\n 17877: a2 = a1 >> 0x10\n 17880: u8 [a0 + 0x2] = a2\n 17883: a1 = a1 >> 0x8\n 17886: a2 = u64 [sp + 0xc8]\n 17890: a4 = u64 [sp + 0xc0]\n 17894: a4 = a4 | a2\n 17897: s0 = 0x100000000\n 17907: a2 = 0xffffffe0\n 17917: a3 = u64 [sp + 0xe8]\n 17921: a2 = a3 <u a2\n 17924: a3 = u64 [sp + 0xe0]\n 17928: a2 = 0 if a3 != 0\n 17930: u64 [sp + 0xd0] = a4\n 17934: a2 = 0 if a4 != 0\n 17936: u8 [a0 + 0x1] = a1\n 17939: jump @279 if a2 == 0\n      : @267 (gas: 4)\n 17943: a0 = u64 [sp + 0xd8]\n 17947: i32 a0 = a0 + 0x20\n 17950: a1 = 0x20\n 17953: ra = 244, jump @0\n      : @268 [@dyn 122] (gas: 76)\n 17959: a1 = u64 [sp + 0x98]\n 17963: a1 = reverse a1\n 17965: a2 = u64 [sp + 0xa0]\n 17969: a2 = reverse a2\n 17971: a3 = u64 [sp + 0xa8]\n 17975: a3 = reverse a3\n 17977: a4 = u64 [sp + 0xb0]\n 17981: a4 = reverse a4\n 17983: a5 = a4 >> 0x38\n 17986: u8 [a0 + 0x1f] = a5\n 17989: a5 = a4 >> 0x30\n 17992: u8 [a0 + 0x1e] = a5\n 17995: a5 = a4 >> 0x28\n 17998: u8 [a0 + 0x1d] = a5\n 18001: a5 = a4 >> 0x20\n 18004: u8 [a0 + 0x1c] = a5\n 18007: a5 = a4 >> 0x18\n 18010: u8 [a0 + 0x1b] = a5\n 18013: a5 = a4 >> 0x10\n 18016: u8 [a0 + 0x1a] = a5\n 18019: a5 = a4 >> 0x8\n 18022: u8 [a0 + 0x19] = a5\n 18025: u8 [a0 + 0x18] = a4\n 18028: u8 [a0 + 0x10] = a3\n 18031: a4 = a3 >> 0x38\n 18034: u8 [a0 + 0x17] = a4\n 18037: a4 = a3 >> 0x30\n 18040: u8 [a0 + 0x16] = a4\n 18043: a4 = a3 >> 0x28\n 18046: u8 [a0 + 0x15] = a4\n 18049: a4 = a3 >> 0x20\n 18052: u8 [a0 + 0x14] = a4\n 18055: a4 = a3 >> 0x18\n 18058: u8 [a0 + 0x13] = a4\n 18061: a4 = a3 >> 0x10\n 18064: u8 [a0 + 0x12] = a4\n 18067: a3 = a3 >> 0x8\n 18070: u8 [a0 + 0x11] = a3\n 18073: u8 [a0 + 0x8] = a2\n 18076: a3 = a2 >> 0x38\n 18079: u8 [a0 + 0xf] = a3\n 18082: a3 = a2 >> 0x30\n 18085: u8 [a0 + 0xe] = a3\n 18088: a3 = a2 >> 0x28\n 18091: u8 [a0 + 0xd] = a3\n 18094: a3 = a2 >> 0x20\n 18097: u8 [a0 + 0xc] = a3\n 18100: a3 = a2 >> 0x18\n 18103: u8 [a0 + 0xb] = a3\n 18106: a3 = a2 >> 0x10\n 18109: u8 [a0 + 0xa] = a3\n 18112: a2 = a2 >> 0x8\n 18115: u8 [a0 + 0x9] = a2\n 18118: u8 [a0] = a1\n 18120: a2 = a1 >> 0x38\n 18123: u8 [a0 + 0x7] = a2\n 18126: a2 = a1 >> 0x30\n 18129: u8 [a0 + 0x6] = a2\n 18132: a2 = a1 >> 0x28\n 18135: u8 [a0 + 0x5] = a2\n 18138: a2 = a1 >> 0x20\n 18141: u8 [a0 + 0x4] = a2\n 18144: a2 = a1 >> 0x18\n 18147: u8 [a0 + 0x3] = a2\n 18150: a2 = a1 >> 0x10\n 18153: u8 [a0 + 0x2] = a2\n 18156: a1 = a1 >> 0x8\n 18159: a2 = s0 + 0xffffffffffffffc0\n 18162: a3 = u64 [sp + 0xe8]\n 18166: a2 = a3 <u a2\n 18169: a3 = u64 [sp + 0xe0]\n 18173: a2 = 0 if a3 != 0\n 18175: a3 = u64 [sp + 0xd0]\n 18179: a2 = 0 if a3 != 0\n 18181: u8 [a0 + 0x1] = a1\n 18184: jump @279 if a2 == 0\n      : @269 (gas: 4)\n 18188: a0 = u64 [sp + 0xd8]\n 18192: i32 a0 = a0 + 0x40\n 18195: a1 = 0x20\n 18198: ra = 246, jump @0\n      : @270 [@dyn 123] (gas: 77)\n 18204: a1 = u64 [sp + 0x78]\n 18207: a1 = reverse a1\n 18209: a2 = u64 [sp + 0x80]\n 18213: a2 = reverse a2\n 18215: a3 = u64 [sp + 0x88]\n 18219: a3 = reverse a3\n 18221: a4 = u64 [sp + 0x90]\n 18225: a4 = reverse a4\n 18227: a5 = a4 >> 0x38\n 18230: u8 [a0 + 0x1f] = a5\n 18233: a5 = a4 >> 0x30\n 18236: u8 [a0 + 0x1e] = a5\n 18239: a5 = a4 >> 0x28\n 18242: u8 [a0 + 0x1d] = a5\n 18245: a5 = a4 >> 0x20\n 18248: u8 [a0 + 0x1c] = a5\n 18251: a5 = a4 >> 0x18\n 18254: u8 [a0 + 0x1b] = a5\n 18257: a5 = a4 >> 0x10\n 18260: u8 [a0 + 0x1a] = a5\n 18263: a5 = a4 >> 0x8\n 18266: u8 [a0 + 0x19] = a5\n 18269: u8 [a0 + 0x18] = a4\n 18272: u8 [a0 + 0x10] = a3\n 18275: a4 = a3 >> 0x38\n 18278: u8 [a0 + 0x17] = a4\n 18281: a4 = a3 >> 0x30\n 18284: u8 [a0 + 0x16] = a4\n 18287: a4 = a3 >> 0x28\n 18290: u8 [a0 + 0x15] = a4\n 18293: a4 = a3 >> 0x20\n 18296: u8 [a0 + 0x14] = a4\n 18299: a4 = a3 >> 0x18\n 18302: u8 [a0 + 0x13] = a4\n 18305: a4 = a3 >> 0x10\n 18308: u8 [a0 + 0x12] = a4\n 18311: a3 = a3 >> 0x8\n 18314: u8 [a0 + 0x11] = a3\n 18317: u8 [a0 + 0x8] = a2\n 18320: a3 = a2 >> 0x38\n 18323: u8 [a0 + 0xf] = a3\n 18326: a3 = a2 >> 0x30\n 18329: u8 [a0 + 0xe] = a3\n 18332: a3 = a2 >> 0x28\n 18335: u8 [a0 + 0xd] = a3\n 18338: a3 = a2 >> 0x20\n 18341: u8 [a0 + 0xc] = a3\n 18344: a3 = a2 >> 0x18\n 18347: u8 [a0 + 0xb] = a3\n 18350: a3 = a2 >> 0x10\n 18353: u8 [a0 + 0xa] = a3\n 18356: a2 = a2 >> 0x8\n 18359: u8 [a0 + 0x9] = a2\n 18362: u8 [a0] = a1\n 18364: a2 = a1 >> 0x38\n 18367: u8 [a0 + 0x7] = a2\n 18370: a2 = a1 >> 0x30\n 18373: u8 [a0 + 0x6] = a2\n 18376: a2 = a1 >> 0x28\n 18379: u8 [a0 + 0x5] = a2\n 18382: a2 = a1 >> 0x20\n 18385: u8 [a0 + 0x4] = a2\n 18388: a2 = a1 >> 0x18\n 18391: u8 [a0 + 0x3] = a2\n 18394: a2 = a1 >> 0x10\n 18397: u8 [a0 + 0x2] = a2\n 18400: a1 = a1 >> 0x8\n 18403: s0 = 0x100000000\n 18413: a2 = 0xffffffa0\n 18423: a3 = u64 [sp + 0xe8]\n 18427: a2 = a3 <u a2\n 18430: a3 = u64 [sp + 0xe0]\n 18434: a2 = 0 if a3 != 0\n 18436: a3 = u64 [sp + 0xd0]\n 18440: a2 = 0 if a3 != 0\n 18442: u8 [a0 + 0x1] = a1\n 18445: jump @279 if a2 == 0\n      : @271 (gas: 4)\n 18449: a0 = u64 [sp + 0xd8]\n 18453: i32 a0 = a0 + 0x60\n 18456: a1 = 0x20\n 18459: ra = 248, jump @0\n      : @272 [@dyn 124] (gas: 76)\n 18465: a1 = u64 [sp + 0x58]\n 18468: a1 = reverse a1\n 18470: a2 = u64 [sp + 0x60]\n 18473: a2 = reverse a2\n 18475: a3 = u64 [sp + 0x68]\n 18478: a3 = reverse a3\n 18480: a4 = u64 [sp + 0x70]\n 18483: a4 = reverse a4\n 18485: a5 = a4 >> 0x38\n 18488: u8 [a0 + 0x1f] = a5\n 18491: a5 = a4 >> 0x30\n 18494: u8 [a0 + 0x1e] = a5\n 18497: a5 = a4 >> 0x28\n 18500: u8 [a0 + 0x1d] = a5\n 18503: a5 = a4 >> 0x20\n 18506: u8 [a0 + 0x1c] = a5\n 18509: a5 = a4 >> 0x18\n 18512: u8 [a0 + 0x1b] = a5\n 18515: a5 = a4 >> 0x10\n 18518: u8 [a0 + 0x1a] = a5\n 18521: a5 = a4 >> 0x8\n 18524: u8 [a0 + 0x19] = a5\n 18527: u8 [a0 + 0x18] = a4\n 18530: u8 [a0 + 0x10] = a3\n 18533: a4 = a3 >> 0x38\n 18536: u8 [a0 + 0x17] = a4\n 18539: a4 = a3 >> 0x30\n 18542: u8 [a0 + 0x16] = a4\n 18545: a4 = a3 >> 0x28\n 18548: u8 [a0 + 0x15] = a4\n 18551: a4 = a3 >> 0x20\n 18554: u8 [a0 + 0x14] = a4\n 18557: a4 = a3 >> 0x18\n 18560: u8 [a0 + 0x13] = a4\n 18563: a4 = a3 >> 0x10\n 18566: u8 [a0 + 0x12] = a4\n 18569: a3 = a3 >> 0x8\n 18572: u8 [a0 + 0x11] = a3\n 18575: u8 [a0 + 0x8] = a2\n 18578: a3 = a2 >> 0x38\n 18581: u8 [a0 + 0xf] = a3\n 18584: a3 = a2 >> 0x30\n 18587: u8 [a0 + 0xe] = a3\n 18590: a3 = a2 >> 0x28\n 18593: u8 [a0 + 0xd] = a3\n 18596: a3 = a2 >> 0x20\n 18599: u8 [a0 + 0xc] = a3\n 18602: a3 = a2 >> 0x18\n 18605: u8 [a0 + 0xb] = a3\n 18608: a3 = a2 >> 0x10\n 18611: u8 [a0 + 0xa] = a3\n 18614: a2 = a2 >> 0x8\n 18617: u8 [a0 + 0x9] = a2\n 18620: u8 [a0] = a1\n 18622: a2 = a1 >> 0x38\n 18625: u8 [a0 + 0x7] = a2\n 18628: a2 = a1 >> 0x30\n 18631: u8 [a0 + 0x6] = a2\n 18634: a2 = a1 >> 0x28\n 18637: u8 [a0 + 0x5] = a2\n 18640: a2 = a1 >> 0x20\n 18643: u8 [a0 + 0x4] = a2\n 18646: a2 = a1 >> 0x18\n 18649: u8 [a0 + 0x3] = a2\n 18652: a2 = a1 >> 0x10\n 18655: u8 [a0 + 0x2] = a2\n 18658: a1 = a1 >> 0x8\n 18661: a2 = s0 + 0xffffffffffffff80\n 18664: a3 = u64 [sp + 0xe8]\n 18668: a2 = a3 <u a2\n 18671: a3 = u64 [sp + 0xe0]\n 18675: a2 = 0 if a3 != 0\n 18677: a3 = u64 [sp + 0xd0]\n 18681: a2 = 0 if a3 != 0\n 18683: u8 [a0 + 0x1] = a1\n 18686: jump @279 if a2 == 0\n      : @273 (gas: 4)\n 18690: a0 = u64 [sp + 0xd8]\n 18694: i32 a0 = a0 + 0x80\n 18698: a1 = 0x20\n 18701: ra = 250, jump @0\n      : @274 [@dyn 125] (gas: 77)\n 18707: a1 = u64 [sp + 0x38]\n 18710: a1 = reverse a1\n 18712: a2 = u64 [sp + 0x40]\n 18715: a2 = reverse a2\n 18717: a3 = u64 [sp + 0x48]\n 18720: a3 = reverse a3\n 18722: a4 = u64 [sp + 0x50]\n 18725: a4 = reverse a4\n 18727: a5 = a4 >> 0x38\n 18730: u8 [a0 + 0x1f] = a5\n 18733: a5 = a4 >> 0x30\n 18736: u8 [a0 + 0x1e] = a5\n 18739: a5 = a4 >> 0x28\n 18742: u8 [a0 + 0x1d] = a5\n 18745: a5 = a4 >> 0x20\n 18748: u8 [a0 + 0x1c] = a5\n 18751: a5 = a4 >> 0x18\n 18754: u8 [a0 + 0x1b] = a5\n 18757: a5 = a4 >> 0x10\n 18760: u8 [a0 + 0x1a] = a5\n 18763: a5 = a4 >> 0x8\n 18766: u8 [a0 + 0x19] = a5\n 18769: u8 [a0 + 0x18] = a4\n 18772: u8 [a0 + 0x10] = a3\n 18775: a4 = a3 >> 0x38\n 18778: u8 [a0 + 0x17] = a4\n 18781: a4 = a3 >> 0x30\n 18784: u8 [a0 + 0x16] = a4\n 18787: a4 = a3 >> 0x28\n 18790: u8 [a0 + 0x15] = a4\n 18793: a4 = a3 >> 0x20\n 18796: u8 [a0 + 0x14] = a4\n 18799: a4 = a3 >> 0x18\n 18802: u8 [a0 + 0x13] = a4\n 18805: a4 = a3 >> 0x10\n 18808: u8 [a0 + 0x12] = a4\n 18811: a3 = a3 >> 0x8\n 18814: u8 [a0 + 0x11] = a3\n 18817: u8 [a0 + 0x8] = a2\n 18820: a3 = a2 >> 0x38\n 18823: u8 [a0 + 0xf] = a3\n 18826: a3 = a2 >> 0x30\n 18829: u8 [a0 + 0xe] = a3\n 18832: a3 = a2 >> 0x28\n 18835: u8 [a0 + 0xd] = a3\n 18838: a3 = a2 >> 0x20\n 18841: u8 [a0 + 0xc] = a3\n 18844: a3 = a2 >> 0x18\n 18847: u8 [a0 + 0xb] = a3\n 18850: a3 = a2 >> 0x10\n 18853: u8 [a0 + 0xa] = a3\n 18856: a2 = a2 >> 0x8\n 18859: u8 [a0 + 0x9] = a2\n 18862: u8 [a0] = a1\n 18864: a2 = a1 >> 0x38\n 18867: u8 [a0 + 0x7] = a2\n 18870: a2 = a1 >> 0x30\n 18873: u8 [a0 + 0x6] = a2\n 18876: a2 = a1 >> 0x28\n 18879: u8 [a0 + 0x5] = a2\n 18882: a2 = a1 >> 0x20\n 18885: u8 [a0 + 0x4] = a2\n 18888: a2 = a1 >> 0x18\n 18891: u8 [a0 + 0x3] = a2\n 18894: a2 = a1 >> 0x10\n 18897: u8 [a0 + 0x2] = a2\n 18900: a1 = a1 >> 0x8\n 18903: s0 = 0x100000000\n 18913: a2 = 0xffffff60\n 18923: a3 = u64 [sp + 0xe8]\n 18927: a2 = a3 <u a2\n 18930: a3 = u64 [sp + 0xe0]\n 18934: a2 = 0 if a3 != 0\n 18936: a3 = u64 [sp + 0xd0]\n 18940: a2 = 0 if a3 != 0\n 18942: u8 [a0 + 0x1] = a1\n 18945: jump @279 if a2 == 0\n      : @275 (gas: 7)\n 18949: a0 = u64 [sp + 0x18]\n 18952: a0 = a0 << 0x20\n 18955: s1 = a0 >> 0x20\n 18958: a0 = u64 [sp + 0xd8]\n 18962: i32 a0 = a0 + 0xa0\n 18966: a1 = 0x20\n 18969: ra = 252, jump @0\n      : @276 [@dyn 126] (gas: 63)\n 18975: a1 = reverse s1\n 18977: a2 = u64 [sp + 0x20]\n 18980: a2 = reverse a2\n 18982: a3 = u64 [sp + 0x28]\n 18985: a3 = reverse a3\n 18987: a4 = a3 >> 0x38\n 18990: u8 [a0 + 0x1f] = a4\n 18993: a4 = a3 >> 0x30\n 18996: u8 [a0 + 0x1e] = a4\n 18999: a4 = a3 >> 0x28\n 19002: u8 [a0 + 0x1d] = a4\n 19005: a4 = a3 >> 0x20\n 19008: u8 [a0 + 0x1c] = a4\n 19011: a4 = a3 >> 0x18\n 19014: u8 [a0 + 0x1b] = a4\n 19017: a4 = a3 >> 0x10\n 19020: u8 [a0 + 0x1a] = a4\n 19023: a4 = a3 >> 0x8\n 19026: u8 [a0 + 0x19] = a4\n 19029: u8 [a0 + 0x18] = a3\n 19032: u8 [a0 + 0x10] = a2\n 19035: u8 [a0 + 11] = 0\n 19038: u8 [a0 + 10] = 0\n 19041: u8 [a0 + 9] = 0\n 19044: u8 [a0 + 7] = 0\n 19047: u8 [a0 + 6] = 0\n 19050: u8 [a0 + 5] = 0\n 19053: u8 [a0 + 4] = 0\n 19056: u8 [a0 + 3] = 0\n 19059: u8 [a0 + 2] = 0\n 19062: u8 [a0 + 1] = 0\n 19065: u8 [a0 + 0] = 0\n 19067: a3 = a2 >> 0x38\n 19070: u8 [a0 + 0x17] = a3\n 19073: a3 = a2 >> 0x30\n 19076: u8 [a0 + 0x16] = a3\n 19079: a3 = a2 >> 0x28\n 19082: u8 [a0 + 0x15] = a3\n 19085: a3 = a2 >> 0x20\n 19088: u8 [a0 + 0x14] = a3\n 19091: a3 = a2 >> 0x18\n 19094: u8 [a0 + 0x13] = a3\n 19097: a3 = a2 >> 0x10\n 19100: u8 [a0 + 0x12] = a3\n 19103: a2 = a2 >> 0x8\n 19106: u8 [a0 + 0x11] = a2\n 19109: u8 [a0 + 0x8] = a1\n 19112: a2 = a1 >> 0x38\n 19115: u8 [a0 + 0xf] = a2\n 19118: a2 = a1 >> 0x30\n 19121: u8 [a0 + 0xe] = a2\n 19124: a2 = a1 >> 0x28\n 19127: u8 [a0 + 0xd] = a2\n 19130: a1 = a1 >> 0x20\n 19133: a2 = s0 + 0xffffffffffffff40\n 19137: a3 = u64 [sp + 0xe8]\n 19141: a2 = a3 <u a2\n 19144: a3 = u64 [sp + 0xe0]\n 19148: a2 = 0 if a3 != 0\n 19150: a3 = u64 [sp + 0xd0]\n 19154: a2 = 0 if a3 != 0\n 19156: u8 [a0 + 0xc] = a1\n 19159: jump @279 if a2 == 0\n      : @277 (gas: 28)\n 19163: a1 = 0xffffffff\n 19173: a2 = u64 [sp + 0xe8]\n 19177: a3 = a2 + 0xe0\n 19181: u64 [sp + 0xd0] = a3\n 19185: a2 = a3 <u a2\n 19188: a3 = u64 [sp + 0xe0]\n 19192: a4 = a3 + a2\n 19195: u64 [sp + 0xe8] = a4\n 19199: s0 = a4 <u a3\n 19202: s0 = a2 if a2 == 0\n 19205: a2 = u64 [sp + 0xc8]\n 19209: s0 = s0 + a2\n 19212: u64 [sp + 0xb8] = s0\n 19216: a2 = s0 <u a2\n 19219: a3 = u64 [sp + 0xc0]\n 19223: a2 = a2 + a3\n 19226: u64 [sp + 0xe0] = a2\n 19230: a2 = u64 [sp]\n 19232: a2 = a2 & 0xffffffffffffffff\n 19235: u64 [sp + 0xc8] = a2\n 19239: s0 = u64 [sp + 0x8]\n 19242: s0 = s0 & 0xffffffffffffffff\n 19245: s1 = u64 [sp + 0x10]\n 19248: s1 = s1 & a1\n 19251: a0 = u64 [sp + 0xd8]\n 19255: i32 a0 = a0 + 0xc0\n 19259: a1 = 0x20\n 19262: ra = 254, jump @0\n      : @278 [@dyn 127] (gas: 68)\n 19268: a1 = reverse s1\n 19270: a2 = reverse s0\n 19272: a3 = u64 [sp + 0xc8]\n 19276: a3 = reverse a3\n 19278: u8 [a0 + 0x18] = a3\n 19281: u8 [a0 + 11] = 0\n 19284: u8 [a0 + 10] = 0\n 19287: u8 [a0 + 9] = 0\n 19290: u8 [a0 + 7] = 0\n 19293: u8 [a0 + 6] = 0\n 19296: u8 [a0 + 5] = 0\n 19299: u8 [a0 + 4] = 0\n 19302: u8 [a0 + 3] = 0\n 19305: u8 [a0 + 2] = 0\n 19308: u8 [a0 + 1] = 0\n 19311: u8 [a0 + 0] = 0\n 19313: a4 = a3 >> 0x38\n 19316: u8 [a0 + 0x1f] = a4\n 19319: a4 = a3 >> 0x30\n 19322: u8 [a0 + 0x1e] = a4\n 19325: a4 = a3 >> 0x28\n 19328: u8 [a0 + 0x1d] = a4\n 19331: a4 = a3 >> 0x20\n 19334: u8 [a0 + 0x1c] = a4\n 19337: a4 = a3 >> 0x18\n 19340: u8 [a0 + 0x1b] = a4\n 19343: a4 = a3 >> 0x10\n 19346: u8 [a0 + 0x1a] = a4\n 19349: a3 = a3 >> 0x8\n 19352: u8 [a0 + 0x19] = a3\n 19355: u8 [a0 + 0x10] = a2\n 19358: a3 = a2 >> 0x38\n 19361: u8 [a0 + 0x17] = a3\n 19364: a3 = a2 >> 0x30\n 19367: u8 [a0 + 0x16] = a3\n 19370: a3 = a2 >> 0x28\n 19373: u8 [a0 + 0x15] = a3\n 19376: a3 = a2 >> 0x20\n 19379: u8 [a0 + 0x14] = a3\n 19382: a3 = a2 >> 0x18\n 19385: u8 [a0 + 0x13] = a3\n 19388: a3 = a2 >> 0x10\n 19391: u8 [a0 + 0x12] = a3\n 19394: a2 = a2 >> 0x8\n 19397: u8 [a0 + 0x11] = a2\n 19400: u8 [a0 + 0x8] = a1\n 19403: a2 = a1 >> 0x38\n 19406: u8 [a0 + 0xf] = a2\n 19409: a2 = a1 >> 0x30\n 19412: u8 [a0 + 0xe] = a2\n 19415: a2 = a1 >> 0x28\n 19418: u8 [a0 + 0xd] = a2\n 19421: a1 = a1 >> 0x20\n 19424: u8 [a0 + 0xc] = a1\n 19427: a0 = u64 [sp + 0x30]\n 19430: a1 = u64 [sp + 0xd0]\n 19434: u64 [a0] = a1\n 19436: a1 = u64 [sp + 0xe8]\n 19440: u64 [a0 + 0x8] = a1\n 19443: a1 = u64 [sp + 0xb8]\n 19447: u64 [a0 + 0x10] = a1\n 19450: a1 = u64 [sp + 0xe0]\n 19454: u64 [a0 + 0x18] = a1\n 19457: ra = u64 [sp + 0x100]\n 19461: s0 = u64 [sp + 0xf8]\n 19465: s1 = u64 [sp + 0xf0]\n 19469: sp = sp + 0x108\n 19473: ret\n      : @279 (gas: 1)\n 19475: trap\n      : @280 (gas: 8)\n 19476: a0 = u64 [sp + 0x350]\n 19480: a1 = u64 [sp + 0x358]\n 19484: a2 = u64 [sp + 0x348]\n 19488: a3 = u64 [sp + 0x340]\n 19492: a1 = a1 | a2\n 19495: a0 = a0 | a3\n 19498: a0 = a0 | a1\n 19501: jump @290 if a0 != 0\n      : @281 (gas: 2)\n 19505: a0 = i32 [0x20004]\n 19510: jump @290 if a0 <=u 35\n      : @282 (gas: 4)\n 19515: i32 a0 = sp + 0x360\n 19519: a1 = 0x4\n 19522: ecalli 3 // 'call_data_load'\n 19524: fallthrough\n      : @283 (gas: 10)\n 19525: a0 = u64 [sp + 0x370]\n 19529: a2 = u64 [sp + 0x378]\n 19533: a1 = 0x100000000\n 19543: a1 = a1 ^ a0\n 19546: a1 = a1 | a2\n 19549: a3 = a0 >> 0x20\n 19552: a3 = a3 <u 0x1\n 19555: a3 = 0 if a2 != 0\n 19557: a3 = 0 if a1 == 0\n 19559: jump @290 if a3 == 0\n      : @284 (gas: 26)\n 19563: a1 = u64 [sp + 0x368]\n 19567: a3 = u64 [sp + 0x360]\n 19571: u64 [sp + 0x248] = a1\n 19575: u64 [sp + 0x240] = a3\n 19579: u64 [sp + 0x250] = a0\n 19583: a0 = sp + 0x260\n 19587: a1 = sp + 0x240\n 19591: u64 [sp + 0x258] = a2\n 19595: ra = 0x100\n 19599: sp = sp + 0xfffffffffffffec0\n 19603: u64 [sp + 0x138] = ra\n 19607: u64 [sp + 0x130] = s0\n 19611: u64 [sp + 0x128] = s1\n 19615: s0 = sp + 0x140\n 19619: sp = sp & 0xffffffffffffffe0\n 19622: a2 = u64 [a1]\n 19624: u64 [sp + 0xd8] = a2\n 19628: a2 = u64 [a1 + 0x8]\n 19631: u64 [sp + 0xd0] = a2\n 19635: a1 = u32 [a1 + 0x10]\n 19638: u64 [sp + 0xc8] = a1\n 19642: s1 = a0\n 19644: a1 = 0x20\n 19647: a0 = 0\n 19649: ra = 0xec\n 19653: jump @0\n      : @285 [@dyn 128] (gas: 59)\n 19656: a0 = u64 [sp + 0x260]\n 19660: u64 [sp + 0x110] = a0\n 19664: a0 = u64 [sp + 0x268]\n 19668: u64 [sp + 0x108] = a0\n 19672: a0 = u64 [sp + 0x270]\n 19676: u64 [sp + 0x100] = a0\n 19680: a0 = u64 [sp + 0x278]\n 19684: u64 [sp + 0xf8] = a0\n 19688: a0 = u64 [sp + 0x280]\n 19692: u64 [sp + 0xf0] = a0\n 19696: a0 = u64 [sp + 0x288]\n 19700: u64 [sp + 0xe8] = a0\n 19704: a0 = u64 [sp + 0x290]\n 19708: u64 [sp + 0xe0] = a0\n 19712: a0 = u64 [sp + 0x298]\n 19716: u64 [sp + 0xd8] = a0\n 19720: a0 = u64 [sp + 0x2a0]\n 19724: u64 [sp + 0xd0] = a0\n 19728: a0 = u64 [sp + 0x2a8]\n 19732: u64 [sp + 0xc8] = a0\n 19736: a0 = u64 [sp + 0x2b0]\n 19740: u64 [sp + 0xc0] = a0\n 19744: a0 = u64 [sp + 0x2b8]\n 19748: u64 [sp + 0xb8] = a0\n 19752: a0 = u64 [sp + 0x2c0]\n 19756: u64 [sp + 0xb0] = a0\n 19760: a0 = u64 [sp + 0x2c8]\n 19764: u64 [sp + 0xa8] = a0\n 19768: a0 = u64 [sp + 0x2d0]\n 19772: u64 [sp + 0xa0] = a0\n 19776: a0 = u64 [sp + 0x2d8]\n 19780: u64 [sp + 0x98] = a0\n 19784: a0 = u64 [sp + 0x2e0]\n 19788: u64 [sp + 0x90] = a0\n 19792: a0 = u64 [sp + 0x2e8]\n 19796: u64 [sp + 0x88] = a0\n 19800: a0 = u64 [sp + 0x2f0]\n 19804: u64 [sp + 0x80] = a0\n 19808: a0 = u64 [sp + 0x2f8]\n 19812: u64 [sp + 0x78] = a0\n 19815: a0 = u64 [sp + 0x300]\n 19819: u64 [sp + 0x70] = a0\n 19822: a0 = u64 [sp + 0x308]\n 19826: u64 [sp + 0x68] = a0\n 19829: a0 = u64 [sp + 0x310]\n 19833: u64 [sp + 0x60] = a0\n 19836: a0 = u64 [sp + 0x318]\n 19840: u64 [sp + 0x58] = a0\n 19843: a0 = u64 [sp + 0x320]\n 19847: u64 [sp + 0x50] = a0\n 19850: a0 = u64 [sp + 0x328]\n 19854: u64 [sp + 0x48] = a0\n 19857: a0 = u64 [sp + 0x330]\n 19861: u64 [sp + 0x40] = a0\n 19864: a0 = u64 [sp + 0x338]\n 19868: u64 [sp + 0x38] = a0\n 19871: a0 = 0x40\n 19874: a1 = 0x20\n 19877: ra = 258, jump @0\n      : @286 [@dyn 129] (gas: 168)\n 19883: a1 = u8 [a0 + 0x1]\n 19886: a2 = u8 [a0]\n 19888: a3 = u8 [a0 + 0x2]\n 19891: a4 = u8 [a0 + 0x3]\n 19894: a1 = a1 << 0x8\n 19897: a1 = a1 | a2\n 19900: a3 = a3 << 0x10\n 19903: a4 = a4 << 0x18\n 19906: a3 = a3 | a4\n 19909: a1 = a1 | a3\n 19912: a2 = u8 [a0 + 0x5]\n 19915: a3 = u8 [a0 + 0x4]\n 19918: a4 = u8 [a0 + 0x6]\n 19921: a5 = u8 [a0 + 0x7]\n 19924: a2 = a2 << 0x8\n 19927: a2 = a2 | a3\n 19930: a4 = a4 << 0x10\n 19933: a5 = a5 << 0x18\n 19936: a4 = a4 | a5\n 19939: a2 = a2 | a4\n 19942: a2 = a2 << 0x20\n 19945: t0 = a2 | a1\n 19948: a2 = u8 [a0 + 0x9]\n 19951: a3 = u8 [a0 + 0x8]\n 19954: a4 = u8 [a0 + 0xa]\n 19957: a5 = u8 [a0 + 0xb]\n 19960: a2 = a2 << 0x8\n 19963: a2 = a2 | a3\n 19966: a4 = a4 << 0x10\n 19969: a5 = a5 << 0x18\n 19972: a4 = a4 | a5\n 19975: a2 = a2 | a4\n 19978: a3 = u8 [a0 + 0xd]\n 19981: a4 = u8 [a0 + 0xc]\n 19984: a5 = u8 [a0 + 0xe]\n 19987: s1 = u8 [a0 + 0xf]\n 19990: a3 = a3 << 0x8\n 19993: a3 = a3 | a4\n 19996: a5 = a5 << 0x10\n 19999: s1 = s1 << 0x18\n 20002: a5 = a5 | s1\n 20005: a3 = a3 | a5\n 20008: a3 = a3 << 0x20\n 20011: a2 = a2 | a3\n 20014: a3 = u8 [a0 + 0x11]\n 20017: a4 = u8 [a0 + 0x10]\n 20020: a5 = u8 [a0 + 0x12]\n 20023: s1 = u8 [a0 + 0x13]\n 20026: a3 = a3 << 0x8\n 20029: a3 = a3 | a4\n 20032: a5 = a5 << 0x10\n 20035: s1 = s1 << 0x18\n 20038: a5 = a5 | s1\n 20041: a3 = a3 | a5\n 20044: a4 = u8 [a0 + 0x15]\n 20047: a5 = u8 [a0 + 0x14]\n 20050: s1 = u8 [a0 + 0x16]\n 20053: a1 = u8 [a0 + 0x17]\n 20056: a4 = a4 << 0x8\n 20059: a4 = a4 | a5\n 20062: s1 = s1 << 0x10\n 20065: a1 = a1 << 0x18\n 20068: a1 = a1 | s1\n 20071: a1 = a1 | a4\n 20074: a1 = a1 << 0x20\n 20077: a3 = a3 | a1\n 20080: a1 = u8 [a0 + 0x19]\n 20083: a4 = u8 [a0 + 0x18]\n 20086: a5 = u8 [a0 + 0x1a]\n 20089: s1 = u8 [a0 + 0x1b]\n 20092: a1 = a1 << 0x8\n 20095: a1 = a1 | a4\n 20098: a5 = a5 << 0x10\n 20101: s1 = s1 << 0x18\n 20104: a5 = a5 | s1\n 20107: a1 = a1 | a5\n 20110: a4 = u8 [a0 + 0x1d]\n 20113: a5 = u8 [a0 + 0x1c]\n 20116: s1 = u8 [a0 + 0x1e]\n 20119: a0 = u8 [a0 + 0x1f]\n 20122: a4 = a4 << 0x8\n 20125: a4 = a4 | a5\n 20128: s1 = s1 << 0x10\n 20131: a0 = a0 << 0x18\n 20134: a0 = a0 | s1\n 20137: a0 = a0 | a4\n 20140: a0 = a0 << 0x20\n 20143: a0 = a0 | a1\n 20146: s1 = reverse a0\n 20148: a3 = reverse a3\n 20150: u64 [sp + 0x28] = a3\n 20153: a1 = reverse a2\n 20155: u64 [sp + 0x30] = a1\n 20158: a2 = reverse t0\n 20160: u64 [sp + 0x118] = a2\n 20164: a0 = sp + 0x120\n 20168: u64 [sp + 0x10] = a0\n 20171: a0 = sp + 0x140\n 20175: u64 [sp + 0x8] = a0\n 20178: a0 = sp + 0x160\n 20182: u64 [sp] = a0\n 20184: a0 = u64 [sp + 0x38]\n 20187: u64 [sp + 0x138] = a0\n 20191: a0 = u64 [sp + 0x40]\n 20194: u64 [sp + 0x130] = a0\n 20198: a0 = u64 [sp + 0x48]\n 20201: u64 [sp + 0x128] = a0\n 20205: a0 = u64 [sp + 0x50]\n 20208: u64 [sp + 0x120] = a0\n 20212: a0 = u64 [sp + 0x58]\n 20215: u64 [sp + 0x158] = a0\n 20219: a0 = u64 [sp + 0x60]\n 20222: u64 [sp + 0x150] = a0\n 20226: a0 = u64 [sp + 0x68]\n 20229: u64 [sp + 0x148] = a0\n 20233: a0 = u64 [sp + 0x70]\n 20236: u64 [sp + 0x140] = a0\n 20240: a0 = u64 [sp + 0x78]\n 20243: u64 [sp + 0x178] = a0\n 20247: a0 = u64 [sp + 0x80]\n 20251: u64 [sp + 0x170] = a0\n 20255: a0 = u64 [sp + 0x88]\n 20259: u64 [sp + 0x168] = a0\n 20263: a0 = u64 [sp + 0x90]\n 20267: u64 [sp + 0x160] = a0\n 20271: a0 = u64 [sp + 0x98]\n 20275: u64 [sp + 0x198] = a0\n 20279: a0 = u64 [sp + 0xa0]\n 20283: u64 [sp + 0x190] = a0\n 20287: a0 = u64 [sp + 0xa8]\n 20291: u64 [sp + 0x188] = a0\n 20295: a0 = u64 [sp + 0xb0]\n 20299: u64 [sp + 0x180] = a0\n 20303: a0 = u64 [sp + 0xb8]\n 20307: u64 [sp + 0x1b8] = a0\n 20311: a0 = u64 [sp + 0xc0]\n 20315: u64 [sp + 0x1b0] = a0\n 20319: a0 = u64 [sp + 0xc8]\n 20323: u64 [sp + 0x1a8] = a0\n 20327: a0 = u64 [sp + 0xd0]\n 20331: u64 [sp + 0x1a0] = a0\n 20335: a0 = u64 [sp + 0xd8]\n 20339: u64 [sp + 0x1d8] = a0\n 20343: a0 = u64 [sp + 0xe0]\n 20347: u64 [sp + 0x1d0] = a0\n 20351: a0 = u64 [sp + 0xe8]\n 20355: u64 [sp + 0x1c8] = a0\n 20359: a0 = u64 [sp + 0xf0]\n 20363: u64 [sp + 0x1c0] = a0\n 20367: a0 = u64 [sp + 0xf8]\n 20371: u64 [sp + 0x1f8] = a0\n 20375: a0 = u64 [sp + 0x100]\n 20379: u64 [sp + 0x1f0] = a0\n 20383: a0 = u64 [sp + 0x108]\n 20387: u64 [sp + 0x1e8] = a0\n 20391: a0 = u64 [sp + 0x110]\n 20395: u64 [sp + 0x1e0] = a0\n 20399: u64 [sp + 0x218] = a2\n 20403: u64 [sp + 0x210] = a1\n 20407: u64 [sp + 0x208] = a3\n 20411: a0 = sp + 0x220\n 20415: a1 = sp + 0x200\n 20419: a2 = sp + 0x1e0\n 20423: a3 = sp + 0x1c0\n 20427: a4 = sp + 0x1a0\n 20431: a5 = sp + 0x180\n 20435: u64 [sp + 0x200] = s1\n 20439: ra = 260, jump @264\n      : @287 [@dyn 130] (gas: 12)\n 20445: a4 = u64 [sp + 0x28]\n 20448: a2 = s1\n 20450: a0 = u64 [sp + 0x118]\n 20454: a0 = a0 | a4\n 20457: s1 = u64 [sp + 0x30]\n 20460: a1 = a2 | s1\n 20463: a1 = a1 | a0\n 20466: a1 = a1 >> 0x20\n 20469: a0 = a0 | s1\n 20472: a0 = a0 << 0x20\n 20475: a0 = a0 | a1\n 20478: jump @289 if a0 != 0\n      : @288 (gas: 29)\n 20481: a0 = u64 [sp + 0x228]\n 20485: a1 = u64 [sp + 0x238]\n 20489: u64 [sp + 0x110] = a1\n 20493: t1 = u64 [sp + 0x220]\n 20497: a1 = u64 [sp + 0x230]\n 20501: t2 = a0 ^ a4\n 20504: a5 = a0 <u a4\n 20507: ra = t1 <u a2\n 20510: a5 = ra if t2 == 0\n 20513: a3 = a1 - s1\n 20516: t2 = a3 - a5\n 20519: t0 = a3 <u a5\n 20522: a3 = a1 <u s1\n 20525: a1 = u64 [sp + 0x118]\n 20529: a5 = u64 [sp + 0x110]\n 20533: a5 = a5 - a1\n 20536: a5 = a5 - a3\n 20539: a5 = a5 - t0\n 20542: a0 = a0 - a4\n 20545: a0 = a0 - ra\n 20548: s1 = t1 - a2\n 20551: a0 = a0 | a5\n 20554: a1 = s1 | t2\n 20557: a1 = a1 | a0\n 20560: a0 = a0 | t2\n 20563: a1 = a1 >> 0x20\n 20566: a0 = a0 << 0x20\n 20569: a0 = a0 | a1\n 20572: jump @292 if a0 == 0\n      : @289 (gas: 1)\n 20575: trap\n      : @290 (gas: 3)\n 20576: a0 = 0\n 20578: a1 = 0\n 20580: ra = 262, jump @0\n      : @291 [@dyn 131] (gas: 5)\n 20586: i32 a1 = a0 + 0\n 20588: a0 = 0x1\n 20591: a2 = 0\n 20593: ecalli 14 // 'seal_return'\n 20595: fallthrough\n      : @292 (gas: 4)\n 20596: i32 a0 = a2 + 0\n 20598: i32 s1 = s1 + 0\n 20600: a1 = s1\n 20602: ra = 264, jump @0\n      : @293 [@dyn 132] (gas: 6)\n 20608: i32 a1 = a0 + 0\n 20610: a0 = 0\n 20612: a2 = s1\n 20614: ra = 0x10a\n 20618: ecalli 14 // 'seal_return'\n 20620: fallthrough\n      : @294 [@dyn 133] (gas: 13)\n 20621: sp = sp + 0xffffffffffffff60\n 20625: u64 [sp + 0x98] = ra\n 20629: u64 [sp + 0x90] = s0\n 20633: u64 [sp + 0x88] = s1\n 20637: s0 = sp + 0xa0\n 20641: sp = sp & 0xffffffffffffffe0\n 20644: u64 [sp + 56] = 0\n 20647: u64 [sp + 48] = 0\n 20650: u64 [sp + 40] = 0\n 20653: u64 [sp + 32] = 0\n 20656: i32 a0 = sp + 0x20\n 20659: ecalli 17 // 'value_transferred'\n 20661: fallthrough\n      : @295 (gas: 8)\n 20662: a0 = u64 [sp + 0x30]\n 20665: a1 = u64 [sp + 0x38]\n 20668: a2 = u64 [sp + 0x28]\n 20671: a3 = u64 [sp + 0x20]\n 20674: a1 = a1 | a2\n 20677: a0 = a0 | a3\n 20680: a0 = a0 | a1\n 20683: jump @302 if a0 != 0\n      : @296 (gas: 2)\n 20687: a0 = i32 [0x20004]\n 20692: jump @302 if a0 <=u 35\n      : @297 (gas: 4)\n 20697: i32 a0 = sp + 0x60\n 20700: a1 = 0x4\n 20703: ecalli 3 // 'call_data_load'\n 20705: fallthrough\n      : @298 (gas: 10)\n 20706: a0 = u64 [sp + 0x70]\n 20709: a1 = u64 [sp + 0x78]\n 20712: a2 = 0x100000000\n 20722: a2 = a2 ^ a0\n 20725: a2 = a2 | a1\n 20728: a3 = a0 >> 0x20\n 20731: a3 = a3 <u 0x1\n 20734: a3 = 0 if a1 != 0\n 20736: a3 = 0 if a2 == 0\n 20738: jump @302 if a3 == 0\n      : @299 (gas: 29)\n 20742: a1 = u64 [sp + 0x68]\n 20745: a2 = u64 [sp + 0x60]\n 20748: a1 = reverse a1\n 20750: a3 = a1 << 0x20\n 20753: a0 = reverse a0\n 20755: a0 = a0 >> 0x20\n 20758: a0 = a0 | a3\n 20761: a2 = reverse a2\n 20763: a3 = a2 << 0x20\n 20766: a1 = a1 >> 0x20\n 20769: a1 = a1 | a3\n 20772: a2 = a2 >> 0x20\n 20775: u32 [sp + 0x70] = a2\n 20778: u64 [sp + 0x68] = a1\n 20781: u64 [sp + 0x60] = a0\n 20784: i32 a0 = sp + 0x60\n 20787: i32 a1 = sp + 0x40\n 20790: ecalli 0 // 'balance_of'\n 20791: a0 = u64 [sp + 0x58]\n 20794: u64 [sp] = a0\n 20796: a0 = u64 [sp + 0x50]\n 20799: u64 [sp + 0x8] = a0\n 20802: a0 = u64 [sp + 0x48]\n 20805: u64 [sp + 0x10] = a0\n 20808: a0 = u64 [sp + 0x40]\n 20811: u64 [sp + 0x18] = a0\n 20814: a0 = 0x40\n 20817: a1 = 0x20\n 20820: ra = 268, jump @0\n      : @300 [@dyn 134] (gas: 100)\n 20826: a1 = u8 [a0 + 0x11]\n 20829: a2 = u8 [a0 + 0x10]\n 20832: a3 = u8 [a0 + 0x12]\n 20835: a4 = u8 [a0 + 0x13]\n 20838: a1 = a1 << 0x8\n 20841: a1 = a1 | a2\n 20844: a3 = a3 << 0x10\n 20847: a4 = a4 << 0x18\n 20850: a3 = a3 | a4\n 20853: a1 = a1 | a3\n 20856: a2 = u8 [a0 + 0x15]\n 20859: a3 = u8 [a0 + 0x14]\n 20862: a4 = u8 [a0 + 0x16]\n 20865: a5 = u8 [a0 + 0x17]\n 20868: a2 = a2 << 0x8\n 20871: a2 = a2 | a3\n 20874: a4 = a4 << 0x10\n 20877: a5 = a5 << 0x18\n 20880: a4 = a4 | a5\n 20883: a2 = a2 | a4\n 20886: a2 = a2 << 0x20\n 20889: t0 = a2 | a1\n 20892: a2 = u8 [a0 + 0x1]\n 20895: a3 = u8 [a0]\n 20897: a4 = u8 [a0 + 0x2]\n 20900: a5 = u8 [a0 + 0x3]\n 20903: a2 = a2 << 0x8\n 20906: a2 = a2 | a3\n 20909: a4 = a4 << 0x10\n 20912: a5 = a5 << 0x18\n 20915: a4 = a4 | a5\n 20918: a2 = a2 | a4\n 20921: a3 = u8 [a0 + 0x5]\n 20924: a4 = u8 [a0 + 0x4]\n 20927: a5 = u8 [a0 + 0x6]\n 20930: s1 = u8 [a0 + 0x7]\n 20933: a3 = a3 << 0x8\n 20936: a3 = a3 | a4\n 20939: a5 = a5 << 0x10\n 20942: s1 = s1 << 0x18\n 20945: a5 = a5 | s1\n 20948: a3 = a3 | a5\n 20951: a3 = a3 << 0x20\n 20954: a2 = a2 | a3\n 20957: a3 = u8 [a0 + 0x19]\n 20960: a4 = u8 [a0 + 0x18]\n 20963: a5 = u8 [a0 + 0x1a]\n 20966: s1 = u8 [a0 + 0x1b]\n 20969: a3 = a3 << 0x8\n 20972: a3 = a3 | a4\n 20975: a5 = a5 << 0x10\n 20978: s1 = s1 << 0x18\n 20981: a5 = a5 | s1\n 20984: a3 = a3 | a5\n 20987: a4 = u8 [a0 + 0x1d]\n 20990: a5 = u8 [a0 + 0x1c]\n 20993: s1 = u8 [a0 + 0x1e]\n 20996: a1 = u8 [a0 + 0x1f]\n 20999: a4 = a4 << 0x8\n 21002: a4 = a4 | a5\n 21005: s1 = s1 << 0x10\n 21008: a1 = a1 << 0x18\n 21011: a1 = a1 | s1\n 21014: a1 = a1 | a4\n 21017: a1 = a1 << 0x20\n 21020: a3 = a3 | a1\n 21023: a1 = u8 [a0 + 0x9]\n 21026: a4 = u8 [a0 + 0x8]\n 21029: a5 = u8 [a0 + 0xa]\n 21032: s1 = u8 [a0 + 0xb]\n 21035: a1 = a1 << 0x8\n 21038: a1 = a1 | a4\n 21041: a5 = a5 << 0x10\n 21044: s1 = s1 << 0x18\n 21047: a5 = a5 | s1\n 21050: a1 = a1 | a5\n 21053: a4 = u8 [a0 + 0xd]\n 21056: a5 = u8 [a0 + 0xc]\n 21059: s1 = u8 [a0 + 0xe]\n 21062: a0 = u8 [a0 + 0xf]\n 21065: a4 = a4 << 0x8\n 21068: a4 = a4 | a5\n 21071: s1 = s1 << 0x10\n 21074: a0 = a0 << 0x18\n 21077: a0 = a0 | s1\n 21080: a0 = a0 | a4\n 21083: a0 = a0 << 0x20\n 21086: a0 = a0 | a1\n 21089: a1 = reverse a0\n 21091: a0 = reverse a3\n 21093: a2 = reverse a2\n 21095: a3 = reverse t0\n 21097: a2 = a2 | a3\n 21100: a3 = a0 | a1\n 21103: a3 = a3 | a2\n 21106: a3 = a3 >> 0x20\n 21109: a1 = a1 | a2\n 21112: a1 = a1 << 0x20\n 21115: a1 = a1 | a3\n 21118: jump @304 if a1 == 0\n      : @301 (gas: 1)\n 21121: trap\n      : @302 (gas: 3)\n 21122: a0 = 0\n 21124: a1 = 0\n 21126: ra = 270, jump @0\n      : @303 [@dyn 135] (gas: 5)\n 21132: i32 a1 = a0 + 0\n 21134: a0 = 0x1\n 21137: a2 = 0\n 21139: ecalli 14 // 'seal_return'\n 21141: fallthrough\n      : @304 (gas: 4)\n 21142: i32 s1 = a0 + 0\n 21144: a1 = 0x20\n 21147: a0 = s1\n 21149: ra = 272, jump @0\n      : @305 [@dyn 136] (gas: 71)\n 21155: a1 = u64 [sp]\n 21157: a1 = reverse a1\n 21159: a2 = u64 [sp + 0x8]\n 21162: a2 = reverse a2\n 21164: a3 = u64 [sp + 0x10]\n 21167: a3 = reverse a3\n 21169: a4 = u64 [sp + 0x18]\n 21172: a4 = reverse a4\n 21174: a5 = a4 >> 0x38\n 21177: u8 [a0 + 0x1f] = a5\n 21180: a5 = a4 >> 0x30\n 21183: u8 [a0 + 0x1e] = a5\n 21186: a5 = a4 >> 0x28\n 21189: u8 [a0 + 0x1d] = a5\n 21192: a5 = a4 >> 0x20\n 21195: u8 [a0 + 0x1c] = a5\n 21198: a5 = a4 >> 0x18\n 21201: u8 [a0 + 0x1b] = a5\n 21204: a5 = a4 >> 0x10\n 21207: u8 [a0 + 0x1a] = a5\n 21210: a5 = a4 >> 0x8\n 21213: u8 [a0 + 0x19] = a5\n 21216: u8 [a0 + 0x18] = a4\n 21219: u8 [a0 + 0x10] = a3\n 21222: a4 = a3 >> 0x38\n 21225: u8 [a0 + 0x17] = a4\n 21228: a4 = a3 >> 0x30\n 21231: u8 [a0 + 0x16] = a4\n 21234: a4 = a3 >> 0x28\n 21237: u8 [a0 + 0x15] = a4\n 21240: a4 = a3 >> 0x20\n 21243: u8 [a0 + 0x14] = a4\n 21246: a4 = a3 >> 0x18\n 21249: u8 [a0 + 0x13] = a4\n 21252: a4 = a3 >> 0x10\n 21255: u8 [a0 + 0x12] = a4\n 21258: a3 = a3 >> 0x8\n 21261: u8 [a0 + 0x11] = a3\n 21264: u8 [a0 + 0x8] = a2\n 21267: a3 = a2 >> 0x38\n 21270: u8 [a0 + 0xf] = a3\n 21273: a3 = a2 >> 0x30\n 21276: u8 [a0 + 0xe] = a3\n 21279: a3 = a2 >> 0x28\n 21282: u8 [a0 + 0xd] = a3\n 21285: a3 = a2 >> 0x20\n 21288: u8 [a0 + 0xc] = a3\n 21291: a3 = a2 >> 0x18\n 21294: u8 [a0 + 0xb] = a3\n 21297: a3 = a2 >> 0x10\n 21300: u8 [a0 + 0xa] = a3\n 21303: a2 = a2 >> 0x8\n 21306: u8 [a0 + 0x9] = a2\n 21309: u8 [a0] = a1\n 21311: a2 = a1 >> 0x38\n 21314: u8 [a0 + 0x7] = a2\n 21317: a2 = a1 >> 0x30\n 21320: u8 [a0 + 0x6] = a2\n 21323: a2 = a1 >> 0x28\n 21326: u8 [a0 + 0x5] = a2\n 21329: a2 = a1 >> 0x20\n 21332: u8 [a0 + 0x4] = a2\n 21335: a2 = a1 >> 0x18\n 21338: u8 [a0 + 0x3] = a2\n 21341: a2 = a1 >> 0x10\n 21344: u8 [a0 + 0x2] = a2\n 21347: a1 = a1 >> 0x8\n 21350: u8 [a0 + 0x1] = a1\n 21353: a1 = 0x20\n 21356: a0 = s1\n 21358: ra = 274, jump @0\n      : @306 [@dyn 137] (gas: 6)\n 21364: i32 a1 = a0 + 0\n 21366: a2 = 0x20\n 21369: a0 = 0\n 21371: ra = 0x114\n 21375: ecalli 14 // 'seal_return'\n 21377: fallthrough\n      : @307 [@dyn 138] (gas: 20)\n 21378: sp = sp + 0xffffffffffffffb0\n 21381: u64 [sp + 0x48] = ra\n 21384: u64 [sp + 0x40] = s0\n 21387: u64 [sp + 0x38] = s1\n 21390: a4 = u64 [a1 + 0x10]\n 21393: a3 = u64 [a1 + 0x18]\n 21396: a5 = u64 [a1 + 0x8]\n 21399: s0 = u64 [a1]\n 21401: u64 [sp + 0x28] = a3\n 21404: u64 [sp + 0x20] = a5\n 21407: a1 = a5 | a3\n 21410: a3 = s0 | a4\n 21413: a3 = a3 | a1\n 21416: a3 = a3 >> 0x20\n 21419: u64 [sp + 0x30] = a4\n 21422: a1 = a1 | a4\n 21425: a1 = a1 << 0x20\n 21428: a1 = a1 | a3\n 21431: u64 [sp + 0x18] = a0\n 21434: jump @310 if a1 != 0\n      : @308 (gas: 10)\n 21438: a0 = u64 [a2 + 0x18]\n 21441: u64 [sp] = a0\n 21443: s1 = u64 [a2 + 0x10]\n 21446: a0 = u64 [a2 + 0x8]\n 21449: u64 [sp + 0x8] = a0\n 21452: a0 = u64 [a2]\n 21454: u64 [sp + 0x10] = a0\n 21457: i32 a0 = s0 + 0\n 21459: a1 = 0x20\n 21462: ra = 278, jump @0\n      : @309 [@dyn 139] (gas: 88)\n 21468: a1 = u64 [sp]\n 21470: a1 = reverse a1\n 21472: a2 = reverse s1\n 21474: a3 = u64 [sp + 0x8]\n 21477: a3 = reverse a3\n 21479: a4 = u64 [sp + 0x10]\n 21482: a4 = reverse a4\n 21484: a5 = a4 >> 0x38\n 21487: u8 [a0 + 0x1f] = a5\n 21490: a5 = a4 >> 0x30\n 21493: u8 [a0 + 0x1e] = a5\n 21496: a5 = a4 >> 0x28\n 21499: u8 [a0 + 0x1d] = a5\n 21502: a5 = a4 >> 0x20\n 21505: u8 [a0 + 0x1c] = a5\n 21508: a5 = a4 >> 0x18\n 21511: u8 [a0 + 0x1b] = a5\n 21514: a5 = a4 >> 0x10\n 21517: u8 [a0 + 0x1a] = a5\n 21520: a5 = a4 >> 0x8\n 21523: u8 [a0 + 0x19] = a5\n 21526: u8 [a0 + 0x18] = a4\n 21529: u8 [a0 + 0x10] = a3\n 21532: a4 = a3 >> 0x38\n 21535: u8 [a0 + 0x17] = a4\n 21538: a4 = a3 >> 0x30\n 21541: u8 [a0 + 0x16] = a4\n 21544: a4 = a3 >> 0x28\n 21547: u8 [a0 + 0x15] = a4\n 21550: a4 = a3 >> 0x20\n 21553: u8 [a0 + 0x14] = a4\n 21556: a4 = a3 >> 0x18\n 21559: u8 [a0 + 0x13] = a4\n 21562: a4 = a3 >> 0x10\n 21565: u8 [a0 + 0x12] = a4\n 21568: a3 = a3 >> 0x8\n 21571: u8 [a0 + 0x11] = a3\n 21574: u8 [a0 + 0x8] = a2\n 21577: a3 = a2 >> 0x38\n 21580: u8 [a0 + 0xf] = a3\n 21583: a3 = a2 >> 0x30\n 21586: u8 [a0 + 0xe] = a3\n 21589: a3 = a2 >> 0x28\n 21592: u8 [a0 + 0xd] = a3\n 21595: a3 = a2 >> 0x20\n 21598: u8 [a0 + 0xc] = a3\n 21601: a3 = a2 >> 0x18\n 21604: u8 [a0 + 0xb] = a3\n 21607: a3 = a2 >> 0x10\n 21610: u8 [a0 + 0xa] = a3\n 21613: a2 = a2 >> 0x8\n 21616: u8 [a0 + 0x9] = a2\n 21619: u8 [a0] = a1\n 21621: a2 = a1 >> 0x38\n 21624: u8 [a0 + 0x7] = a2\n 21627: a2 = a1 >> 0x30\n 21630: u8 [a0 + 0x6] = a2\n 21633: a2 = a1 >> 0x28\n 21636: u8 [a0 + 0x5] = a2\n 21639: a2 = a1 >> 0x20\n 21642: u8 [a0 + 0x4] = a2\n 21645: a2 = a1 >> 0x18\n 21648: u8 [a0 + 0x3] = a2\n 21651: a2 = a1 >> 0x10\n 21654: u8 [a0 + 0x2] = a2\n 21657: a1 = a1 >> 0x8\n 21660: u8 [a0 + 0x1] = a1\n 21663: a0 = s0 + 0x20\n 21666: a1 = a0 <u s0\n 21669: a3 = u64 [sp + 0x20]\n 21672: a2 = a3 + a1\n 21675: a3 = a2 <u a3\n 21678: a3 = a1 if a1 == 0\n 21681: a1 = u64 [sp + 0x30]\n 21684: a3 = a3 + a1\n 21687: a1 = a3 <u a1\n 21690: a4 = u64 [sp + 0x28]\n 21693: a1 = a1 + a4\n 21696: a4 = u64 [sp + 0x18]\n 21699: u64 [a4] = a0\n 21701: u64 [a4 + 0x8] = a2\n 21704: u64 [a4 + 0x10] = a3\n 21707: u64 [a4 + 0x18] = a1\n 21710: ra = u64 [sp + 0x48]\n 21713: s0 = u64 [sp + 0x40]\n 21716: s1 = u64 [sp + 0x38]\n 21719: sp = sp + 0x50\n 21722: ret\n      : @310 (gas: 1)\n 21724: trap\n      : @311 (gas: 17)\n 21725: sp = sp + 0xffffffffffffffa0\n 21728: u64 [sp + 0x58] = ra\n 21731: u64 [sp + 0x50] = s0\n 21734: u64 [sp + 0x48] = s1\n 21737: a3 = u64 [a1 + 0x18]\n 21740: a4 = u64 [a1 + 0x10]\n 21743: a5 = u64 [a1 + 0x8]\n 21746: s1 = u64 [a1]\n 21748: a1 = a5 | a3\n 21751: a2 = s1 | a4\n 21754: a2 = a2 | a1\n 21757: a2 = a2 >> 0x20\n 21760: a1 = a1 | a4\n 21763: a1 = a1 << 0x20\n 21766: a1 = a1 | a2\n 21769: u64 [sp + 0x28] = a0\n 21772: jump @318 if a1 != 0\n      : @312 (gas: 19)\n 21776: a0 = s1 + 0x20\n 21779: u64 [sp + 0x30] = a0\n 21782: a0 = a0 <u s1\n 21785: a1 = a5 + a0\n 21788: u64 [sp + 0x40] = a1\n 21791: u64 [sp + 0x8] = a5\n 21794: s0 = a1 <u a5\n 21797: s0 = a0 if a0 == 0\n 21800: s0 = s0 + a4\n 21803: u64 [sp + 0x10] = a4\n 21806: a0 = s0 <u a4\n 21809: u64 [sp + 0x18] = a3\n 21812: a0 = a0 + a3\n 21815: u64 [sp + 0x38] = a0\n 21818: u64 [sp] = s1\n 21820: i32 a0 = s1 + 0\n 21822: a1 = 0x20\n 21825: s1 = 0x20\n 21828: ra = 280, jump @0\n      : @313 [@dyn 140] (gas: 45)\n 21834: u8 [a0 + 0x1f] = s1\n 21837: a1 = u64 [sp + 0x30]\n 21840: s1 = a1\n 21842: a1 = a1 | s0\n 21845: a2 = u64 [sp + 0x40]\n 21848: a4 = u64 [sp + 0x38]\n 21851: a2 = a2 | a4\n 21854: a1 = a1 | a2\n 21857: a1 = a1 >> 0x20\n 21860: u64 [sp + 0x20] = s0\n 21863: a2 = a2 | s0\n 21866: a2 = a2 << 0x20\n 21869: a1 = a1 | a2\n 21872: u8 [a0 + 30] = 0\n 21875: u8 [a0 + 29] = 0\n 21878: u8 [a0 + 28] = 0\n 21881: u8 [a0 + 27] = 0\n 21884: u8 [a0 + 26] = 0\n 21887: u8 [a0 + 25] = 0\n 21890: u8 [a0 + 24] = 0\n 21893: u8 [a0 + 23] = 0\n 21896: u8 [a0 + 22] = 0\n 21899: u8 [a0 + 21] = 0\n 21902: u8 [a0 + 20] = 0\n 21905: u8 [a0 + 19] = 0\n 21908: u8 [a0 + 18] = 0\n 21911: u8 [a0 + 17] = 0\n 21914: u8 [a0 + 16] = 0\n 21917: u8 [a0 + 15] = 0\n 21920: u8 [a0 + 14] = 0\n 21923: u8 [a0 + 13] = 0\n 21926: u8 [a0 + 12] = 0\n 21929: u8 [a0 + 11] = 0\n 21932: u8 [a0 + 10] = 0\n 21935: u8 [a0 + 9] = 0\n 21938: u8 [a0 + 8] = 0\n 21941: u8 [a0 + 7] = 0\n 21944: u8 [a0 + 6] = 0\n 21947: u8 [a0 + 5] = 0\n 21950: u8 [a0 + 4] = 0\n 21953: u8 [a0 + 3] = 0\n 21956: u8 [a0 + 2] = 0\n 21959: u8 [a0 + 1] = 0\n 21962: u8 [a0 + 0] = 0\n 21964: jump @318 if a1 != 0\n      : @314 (gas: 4)\n 21968: i32 s0 = s1 + 0\n 21970: a1 = 0x20\n 21973: a0 = s0\n 21975: ra = 282, jump @0\n      : @315 [@dyn 141] (gas: 41)\n 21981: u8 [a0 + 31] = 0x16\n 21985: u8 [a0 + 30] = 0\n 21988: u8 [a0 + 29] = 0\n 21991: u8 [a0 + 28] = 0\n 21994: u8 [a0 + 27] = 0\n 21997: u8 [a0 + 26] = 0\n 22000: u8 [a0 + 25] = 0\n 22003: u8 [a0 + 24] = 0\n 22006: u8 [a0 + 23] = 0\n 22009: u8 [a0 + 22] = 0\n 22012: u8 [a0 + 21] = 0\n 22015: u8 [a0 + 20] = 0\n 22018: u8 [a0 + 19] = 0\n 22021: u8 [a0 + 18] = 0\n 22024: u8 [a0 + 17] = 0\n 22027: u8 [a0 + 16] = 0\n 22030: u8 [a0 + 15] = 0\n 22033: u8 [a0 + 14] = 0\n 22036: u8 [a0 + 13] = 0\n 22039: u8 [a0 + 12] = 0\n 22042: u8 [a0 + 11] = 0\n 22045: u8 [a0 + 10] = 0\n 22048: u8 [a0 + 9] = 0\n 22051: u8 [a0 + 8] = 0\n 22054: u8 [a0 + 7] = 0\n 22057: u8 [a0 + 6] = 0\n 22060: u8 [a0 + 5] = 0\n 22063: u8 [a0 + 4] = 0\n 22066: u8 [a0 + 3] = 0\n 22069: u8 [a0 + 2] = 0\n 22072: u8 [a0 + 1] = 0\n 22075: a1 = u64 [sp + 0x20]\n 22078: a2 = u64 [sp + 0x38]\n 22081: a1 = a1 | a2\n 22084: a2 = 0xffffffe0\n 22094: a2 = s1 <u a2\n 22097: a3 = u64 [sp + 0x40]\n 22100: a2 = 0 if a3 != 0\n 22102: a2 = 0 if a1 != 0\n 22104: u8 [a0 + 0] = 0\n 22106: jump @318 if a2 == 0\n      : @316 (gas: 3)\n 22110: i32 a0 = s0 + 0x20\n 22113: a1 = 0x20\n 22116: ra = 284, jump @0\n      : @317 [@dyn 142] (gas: 55)\n 22122: u8 [a0 + 31] = 0\n 22125: u8 [a0 + 30] = 0\n 22128: u8 [a0 + 29] = 0\n 22131: u8 [a0 + 28] = 0\n 22134: u8 [a0 + 27] = 0\n 22137: u8 [a0 + 26] = 0\n 22140: u8 [a0 + 25] = 0\n 22143: u8 [a0 + 24] = 0\n 22146: u8 [a0 + 23] = 0\n 22149: u8 [a0 + 22] = 0\n 22152: u8 [a0 + 21] = 0x72\n 22156: u8 [a0 + 20] = 0x65\n 22160: u8 [a0 + 19] = 0x6e\n 22164: u8 [a0 + 18] = 0x6e\n 22168: u8 [a0 + 17] = 0x69\n 22172: u8 [a0 + 16] = 0x77\n 22176: u8 [a0 + 15] = 0x20\n 22180: a5 = 0x64\n 22183: u8 [a0 + 0xe] = a5\n 22186: u8 [a0 + 13] = 0x69\n 22190: u8 [a0 + 12] = 0x62\n 22194: u8 [a0 + 11] = 0x20\n 22198: u8 [a0 + 10] = 0x74\n 22202: u8 [a0 + 9] = 0x6f\n 22206: u8 [a0 + 8] = 0x6e\n 22210: u8 [a0 + 7] = 0x20\n 22214: u8 [a0 + 6] = 0x65\n 22218: u8 [a0 + 5] = 0x72\n 22222: u8 [a0 + 4] = 0x61\n 22226: u8 [a0 + 3] = 0x20\n 22230: u8 [a0 + 2] = 0x75\n 22234: u8 [a0 + 1] = 0x6f\n 22238: u8 [a0 + 0] = 0x79\n 22241: a1 = u64 [sp]\n 22243: a0 = a1 + 0x60\n 22246: a1 = a0 <u a1\n 22249: a3 = u64 [sp + 0x8]\n 22252: a2 = a3 + a1\n 22255: a3 = a2 <u a3\n 22258: a3 = a1 if a1 == 0\n 22261: a1 = u64 [sp + 0x10]\n 22264: a3 = a3 + a1\n 22267: a1 = a3 <u a1\n 22270: a4 = u64 [sp + 0x18]\n 22273: a1 = a1 + a4\n 22276: a4 = u64 [sp + 0x28]\n 22279: u64 [a4] = a0\n 22281: u64 [a4 + 0x8] = a2\n 22284: u64 [a4 + 0x10] = a3\n 22287: u64 [a4 + 0x18] = a1\n 22290: ra = u64 [sp + 0x58]\n 22293: s0 = u64 [sp + 0x50]\n 22296: s1 = u64 [sp + 0x48]\n 22299: sp = sp + 0x60\n 22302: ret\n      : @318 (gas: 1)\n 22304: trap\n      : @319 (gas: 17)\n 22305: sp = sp + 0xffffffffffffffa0\n 22308: u64 [sp + 0x58] = ra\n 22311: u64 [sp + 0x50] = s0\n 22314: u64 [sp + 0x48] = s1\n 22317: a3 = u64 [a1 + 0x18]\n 22320: a4 = u64 [a1 + 0x10]\n 22323: a5 = u64 [a1 + 0x8]\n 22326: s1 = u64 [a1]\n 22328: a1 = a5 | a3\n 22331: a2 = s1 | a4\n 22334: a2 = a2 | a1\n 22337: a2 = a2 >> 0x20\n 22340: a1 = a1 | a4\n 22343: a1 = a1 << 0x20\n 22346: a1 = a1 | a2\n 22349: u64 [sp + 0x28] = a0\n 22352: jump @326 if a1 != 0\n      : @320 (gas: 19)\n 22356: a0 = s1 + 0x20\n 22359: u64 [sp + 0x30] = a0\n 22362: a0 = a0 <u s1\n 22365: a1 = a5 + a0\n 22368: u64 [sp + 0x40] = a1\n 22371: u64 [sp + 0x8] = a5\n 22374: s0 = a1 <u a5\n 22377: s0 = a0 if a0 == 0\n 22380: s0 = s0 + a4\n 22383: u64 [sp + 0x10] = a4\n 22386: a0 = s0 <u a4\n 22389: u64 [sp + 0x18] = a3\n 22392: a0 = a0 + a3\n 22395: u64 [sp + 0x38] = a0\n 22398: u64 [sp] = s1\n 22400: i32 a0 = s1 + 0\n 22402: a1 = 0x20\n 22405: s1 = 0x20\n 22408: ra = 286, jump @0\n      : @321 [@dyn 143] (gas: 45)\n 22414: u8 [a0 + 0x1f] = s1\n 22417: a1 = u64 [sp + 0x30]\n 22420: s1 = a1\n 22422: a1 = a1 | s0\n 22425: a2 = u64 [sp + 0x40]\n 22428: a4 = u64 [sp + 0x38]\n 22431: a2 = a2 | a4\n 22434: a1 = a1 | a2\n 22437: a1 = a1 >> 0x20\n 22440: u64 [sp + 0x20] = s0\n 22443: a2 = a2 | s0\n 22446: a2 = a2 << 0x20\n 22449: a1 = a1 | a2\n 22452: u8 [a0 + 30] = 0\n 22455: u8 [a0 + 29] = 0\n 22458: u8 [a0 + 28] = 0\n 22461: u8 [a0 + 27] = 0\n 22464: u8 [a0 + 26] = 0\n 22467: u8 [a0 + 25] = 0\n 22470: u8 [a0 + 24] = 0\n 22473: u8 [a0 + 23] = 0\n 22476: u8 [a0 + 22] = 0\n 22479: u8 [a0 + 21] = 0\n 22482: u8 [a0 + 20] = 0\n 22485: u8 [a0 + 19] = 0\n 22488: u8 [a0 + 18] = 0\n 22491: u8 [a0 + 17] = 0\n 22494: u8 [a0 + 16] = 0\n 22497: u8 [a0 + 15] = 0\n 22500: u8 [a0 + 14] = 0\n 22503: u8 [a0 + 13] = 0\n 22506: u8 [a0 + 12] = 0\n 22509: u8 [a0 + 11] = 0\n 22512: u8 [a0 + 10] = 0\n 22515: u8 [a0 + 9] = 0\n 22518: u8 [a0 + 8] = 0\n 22521: u8 [a0 + 7] = 0\n 22524: u8 [a0 + 6] = 0\n 22527: u8 [a0 + 5] = 0\n 22530: u8 [a0 + 4] = 0\n 22533: u8 [a0 + 3] = 0\n 22536: u8 [a0 + 2] = 0\n 22539: u8 [a0 + 1] = 0\n 22542: u8 [a0 + 0] = 0\n 22544: jump @326 if a1 != 0\n      : @322 (gas: 4)\n 22548: i32 s0 = s1 + 0\n 22550: a1 = 0x20\n 22553: a0 = s0\n 22555: ra = 288, jump @0\n      : @323 [@dyn 144] (gas: 41)\n 22561: u8 [a0 + 31] = 0x13\n 22565: u8 [a0 + 30] = 0\n 22568: u8 [a0 + 29] = 0\n 22571: u8 [a0 + 28] = 0\n 22574: u8 [a0 + 27] = 0\n 22577: u8 [a0 + 26] = 0\n 22580: u8 [a0 + 25] = 0\n 22583: u8 [a0 + 24] = 0\n 22586: u8 [a0 + 23] = 0\n 22589: u8 [a0 + 22] = 0\n 22592: u8 [a0 + 21] = 0\n 22595: u8 [a0 + 20] = 0\n 22598: u8 [a0 + 19] = 0\n 22601: u8 [a0 + 18] = 0\n 22604: u8 [a0 + 17] = 0\n 22607: u8 [a0 + 16] = 0\n 22610: u8 [a0 + 15] = 0\n 22613: u8 [a0 + 14] = 0\n 22616: u8 [a0 + 13] = 0\n 22619: u8 [a0 + 12] = 0\n 22622: u8 [a0 + 11] = 0\n 22625: u8 [a0 + 10] = 0\n 22628: u8 [a0 + 9] = 0\n 22631: u8 [a0 + 8] = 0\n 22634: u8 [a0 + 7] = 0\n 22637: u8 [a0 + 6] = 0\n 22640: u8 [a0 + 5] = 0\n 22643: u8 [a0 + 4] = 0\n 22646: u8 [a0 + 3] = 0\n 22649: u8 [a0 + 2] = 0\n 22652: u8 [a0 + 1] = 0\n 22655: a1 = u64 [sp + 0x20]\n 22658: a2 = u64 [sp + 0x38]\n 22661: a1 = a1 | a2\n 22664: a2 = 0xffffffe0\n 22674: a2 = s1 <u a2\n 22677: a3 = u64 [sp + 0x40]\n 22680: a2 = 0 if a3 != 0\n 22682: a2 = 0 if a1 != 0\n 22684: u8 [a0 + 0] = 0\n 22686: jump @326 if a2 == 0\n      : @324 (gas: 3)\n 22690: i32 a0 = s0 + 0x20\n 22693: a1 = 0x20\n 22696: ra = 290, jump @0\n      : @325 [@dyn 145] (gas: 54)\n 22702: u8 [a0 + 31] = 0\n 22705: u8 [a0 + 30] = 0\n 22708: u8 [a0 + 29] = 0\n 22711: u8 [a0 + 28] = 0\n 22714: u8 [a0 + 27] = 0\n 22717: u8 [a0 + 26] = 0\n 22720: u8 [a0 + 25] = 0\n 22723: u8 [a0 + 24] = 0\n 22726: u8 [a0 + 23] = 0\n 22729: u8 [a0 + 22] = 0\n 22732: u8 [a0 + 21] = 0\n 22735: u8 [a0 + 20] = 0\n 22738: u8 [a0 + 19] = 0\n 22741: u8 [a0 + 18] = 0x64\n 22745: u8 [a0 + 17] = 0x65\n 22749: u8 [a0 + 16] = 0x74\n 22753: u8 [a0 + 15] = 0x72\n 22757: u8 [a0 + 14] = 0x65\n 22761: u8 [a0 + 13] = 0x76\n 22765: u8 [a0 + 12] = 0x65\n 22769: u8 [a0 + 11] = 0x72\n 22773: u8 [a0 + 10] = 0x20\n 22777: u8 [a0 + 9] = 0x6e\n 22781: u8 [a0 + 8] = 0x6f\n 22785: u8 [a0 + 7] = 0x69\n 22789: u8 [a0 + 6] = 0x74\n 22793: u8 [a0 + 5] = 0x61\n 22797: u8 [a0 + 4] = 0x67\n 22801: u8 [a0 + 3] = 0x69\n 22805: u8 [a0 + 2] = 0x6c\n 22809: u8 [a0 + 1] = 0x62\n 22813: u8 [a0 + 0] = 0x6f\n 22816: a1 = u64 [sp]\n 22818: a0 = a1 + 0x60\n 22821: a1 = a0 <u a1\n 22824: a3 = u64 [sp + 0x8]\n 22827: a2 = a3 + a1\n 22830: a3 = a2 <u a3\n 22833: a3 = a1 if a1 == 0\n 22836: a1 = u64 [sp + 0x10]\n 22839: a3 = a3 + a1\n 22842: a1 = a3 <u a1\n 22845: a4 = u64 [sp + 0x18]\n 22848: a1 = a1 + a4\n 22851: a4 = u64 [sp + 0x28]\n 22854: u64 [a4] = a0\n 22856: u64 [a4 + 0x8] = a2\n 22859: u64 [a4 + 0x10] = a3\n 22862: u64 [a4 + 0x18] = a1\n 22865: ra = u64 [sp + 0x58]\n 22868: s0 = u64 [sp + 0x50]\n 22871: s1 = u64 [sp + 0x48]\n 22874: sp = sp + 0x60\n 22877: ret\n      : @326 (gas: 1)\n 22879: trap\n      : @327 (gas: 18)\n 22880: sp = sp + 0xffffffffffffff60\n 22884: u64 [sp + 0x98] = ra\n 22888: u64 [sp + 0x90] = s0\n 22892: u64 [sp + 0x88] = s1\n 22896: s0 = sp + 0xa0\n 22900: sp = sp & 0xfffffffffffffff0\n 22903: a2 = u64 [a1 + 0x18]\n 22906: u64 [sp + 0x30] = a2\n 22909: a2 = u64 [a1 + 0x10]\n 22912: u64 [sp + 0x28] = a2\n 22915: a2 = u64 [a1 + 0x8]\n 22918: u64 [sp + 0x20] = a2\n 22921: a1 = u64 [a1]\n 22923: u64 [sp + 0x18] = a1\n 22926: u64 [sp + 0x38] = a0\n 22929: a0 = 0x40\n 22932: a1 = 0x20\n 22935: ra = 292, jump @0\n      : @328 [@dyn 146] (gas: 130)\n 22941: a1 = u8 [a0 + 0x19]\n 22944: a2 = u8 [a0 + 0x18]\n 22947: a3 = u8 [a0 + 0x1a]\n 22950: a4 = u8 [a0 + 0x1b]\n 22953: a1 = a1 << 0x8\n 22956: a1 = a1 | a2\n 22959: a3 = a3 << 0x10\n 22962: a4 = a4 << 0x18\n 22965: a3 = a3 | a4\n 22968: a1 = a1 | a3\n 22971: a2 = u8 [a0 + 0x1d]\n 22974: a3 = u8 [a0 + 0x1c]\n 22977: a4 = u8 [a0 + 0x1e]\n 22980: a5 = u8 [a0 + 0x1f]\n 22983: a2 = a2 << 0x8\n 22986: a2 = a2 | a3\n 22989: a4 = a4 << 0x10\n 22992: a5 = a5 << 0x18\n 22995: a4 = a4 | a5\n 22998: a2 = a2 | a4\n 23001: a2 = a2 << 0x20\n 23004: t0 = a2 | a1\n 23007: a2 = u8 [a0 + 0x11]\n 23010: a3 = u8 [a0 + 0x10]\n 23013: a4 = u8 [a0 + 0x12]\n 23016: a5 = u8 [a0 + 0x13]\n 23019: a2 = a2 << 0x8\n 23022: a2 = a2 | a3\n 23025: a4 = a4 << 0x10\n 23028: a5 = a5 << 0x18\n 23031: a4 = a4 | a5\n 23034: a2 = a2 | a4\n 23037: a3 = u8 [a0 + 0x15]\n 23040: a4 = u8 [a0 + 0x14]\n 23043: a5 = u8 [a0 + 0x16]\n 23046: s1 = u8 [a0 + 0x17]\n 23049: a3 = a3 << 0x8\n 23052: a3 = a3 | a4\n 23055: a5 = a5 << 0x10\n 23058: s1 = s1 << 0x18\n 23061: a5 = a5 | s1\n 23064: a3 = a3 | a5\n 23067: a3 = a3 << 0x20\n 23070: a2 = a2 | a3\n 23073: a3 = u8 [a0 + 0x9]\n 23076: a4 = u8 [a0 + 0x8]\n 23079: a5 = u8 [a0 + 0xa]\n 23082: s1 = u8 [a0 + 0xb]\n 23085: a3 = a3 << 0x8\n 23088: a3 = a3 | a4\n 23091: a5 = a5 << 0x10\n 23094: s1 = s1 << 0x18\n 23097: a5 = a5 | s1\n 23100: a3 = a3 | a5\n 23103: a4 = u8 [a0 + 0xd]\n 23106: a5 = u8 [a0 + 0xc]\n 23109: s1 = u8 [a0 + 0xe]\n 23112: a1 = u8 [a0 + 0xf]\n 23115: a4 = a4 << 0x8\n 23118: a4 = a4 | a5\n 23121: s1 = s1 << 0x10\n 23124: a1 = a1 << 0x18\n 23127: a1 = a1 | s1\n 23130: a1 = a1 | a4\n 23133: a1 = a1 << 0x20\n 23136: a3 = a3 | a1\n 23139: a1 = u8 [a0 + 0x1]\n 23142: a4 = u8 [a0]\n 23144: a5 = u8 [a0 + 0x2]\n 23147: s1 = u8 [a0 + 0x3]\n 23150: a1 = a1 << 0x8\n 23153: a1 = a1 | a4\n 23156: a5 = a5 << 0x10\n 23159: s1 = s1 << 0x18\n 23162: a5 = a5 | s1\n 23165: a1 = a1 | a5\n 23168: a4 = u8 [a0 + 0x5]\n 23171: a5 = u8 [a0 + 0x4]\n 23174: s1 = u8 [a0 + 0x6]\n 23177: a0 = u8 [a0 + 0x7]\n 23180: a4 = a4 << 0x8\n 23183: a4 = a4 | a5\n 23186: s1 = s1 << 0x10\n 23189: a0 = a0 << 0x18\n 23192: a0 = a0 | s1\n 23195: a0 = a0 | a4\n 23198: a0 = a0 << 0x20\n 23201: a0 = a0 | a1\n 23204: t1 = reverse a0\n 23206: t2 = reverse a3\n 23208: s1 = reverse a2\n 23210: a5 = reverse t0\n 23212: a1 = u64 [sp + 0x18]\n 23215: a0 = a1 + 0x1f\n 23218: a1 = a0 <u a1\n 23221: a3 = u64 [sp + 0x20]\n 23224: a2 = a3 + a1\n 23227: a3 = a2 <u a3\n 23230: a3 = a1 if a1 == 0\n 23233: a1 = u64 [sp + 0x28]\n 23236: a3 = a3 + a1\n 23239: a1 = a3 <u a1\n 23242: a4 = u64 [sp + 0x30]\n 23245: a1 = a1 + a4\n 23248: a0 = a0 & 0xffffffffffffffe0\n 23251: a0 = a0 + a5\n 23254: u64 [sp + 0x28] = a5\n 23257: u64 [sp + 0x10] = a0\n 23260: a4 = a0 <u a5\n 23263: a2 = a2 + s1\n 23266: a5 = a2 + a4\n 23269: a2 = a5 ^ s1\n 23272: u64 [sp + 0x30] = s1\n 23275: a0 = a5 <u s1\n 23278: a0 = a4 if a2 == 0\n 23281: a3 = a3 + t2\n 23284: a4 = a3 + a0\n 23287: s1 = a4 <u a3\n 23290: a2 = a3 <u t2\n 23293: a1 = a1 + t1\n 23296: a1 = a1 + a2\n 23299: s1 = s1 + a1\n 23302: a1 = a4 >u 0\n 23304: a2 = s1 >u 0\n 23306: a2 = a1 if s1 == 0\n 23309: a1 = a4 | s1\n 23312: u64 [sp + 0x8] = a5\n 23315: a3 = a5 >u 0\n 23317: a3 = a2 if a1 != 0\n 23320: jump @332 if a3 != 0\n      : @329 (gas: 8)\n 23324: a1 = a4 <u t2\n 23327: a2 = s1 ^ t1\n 23330: a3 = s1 <u t1\n 23333: a3 = a1 if a2 == 0\n 23336: a1 = a4 ^ t2\n 23339: a1 = a1 | a2\n 23342: a0 = a3 if a1 != 0\n 23345: jump @332 if a0 != 0\n      : @330 (gas: 6)\n 23349: a0 = 0x40\n 23352: a1 = 0x20\n 23355: u64 [sp + 0x20] = t2\n 23358: u64 [sp + 0x18] = t1\n 23361: u64 [sp] = a4\n 23363: ra = 294, jump @0\n      : @331 [@dyn 147] (gas: 82)\n 23369: a1 = reverse s1\n 23371: a2 = u64 [sp]\n 23373: a2 = reverse a2\n 23375: a3 = u64 [sp + 0x8]\n 23378: a3 = reverse a3\n 23380: a4 = u64 [sp + 0x10]\n 23383: a4 = reverse a4\n 23385: u8 [a0 + 0x18] = a4\n 23388: a5 = a4 >> 0x38\n 23391: u8 [a0 + 0x1f] = a5\n 23394: a5 = a4 >> 0x30\n 23397: u8 [a0 + 0x1e] = a5\n 23400: a5 = a4 >> 0x28\n 23403: u8 [a0 + 0x1d] = a5\n 23406: a5 = a4 >> 0x20\n 23409: u8 [a0 + 0x1c] = a5\n 23412: a5 = a4 >> 0x18\n 23415: u8 [a0 + 0x1b] = a5\n 23418: a5 = a4 >> 0x10\n 23421: u8 [a0 + 0x1a] = a5\n 23424: a4 = a4 >> 0x8\n 23427: u8 [a0 + 0x19] = a4\n 23430: u8 [a0 + 0x10] = a3\n 23433: a4 = a3 >> 0x38\n 23436: u8 [a0 + 0x17] = a4\n 23439: a4 = a3 >> 0x30\n 23442: u8 [a0 + 0x16] = a4\n 23445: a4 = a3 >> 0x28\n 23448: u8 [a0 + 0x15] = a4\n 23451: a4 = a3 >> 0x20\n 23454: u8 [a0 + 0x14] = a4\n 23457: a4 = a3 >> 0x18\n 23460: u8 [a0 + 0x13] = a4\n 23463: a4 = a3 >> 0x10\n 23466: u8 [a0 + 0x12] = a4\n 23469: a3 = a3 >> 0x8\n 23472: u8 [a0 + 0x11] = a3\n 23475: u8 [a0 + 0x8] = a2\n 23478: a3 = a2 >> 0x38\n 23481: u8 [a0 + 0xf] = a3\n 23484: a3 = a2 >> 0x30\n 23487: u8 [a0 + 0xe] = a3\n 23490: a3 = a2 >> 0x28\n 23493: u8 [a0 + 0xd] = a3\n 23496: a3 = a2 >> 0x20\n 23499: u8 [a0 + 0xc] = a3\n 23502: a3 = a2 >> 0x18\n 23505: u8 [a0 + 0xb] = a3\n 23508: a3 = a2 >> 0x10\n 23511: u8 [a0 + 0xa] = a3\n 23514: a2 = a2 >> 0x8\n 23517: u8 [a0 + 0x9] = a2\n 23520: u8 [a0] = a1\n 23522: a2 = a1 >> 0x38\n 23525: u8 [a0 + 0x7] = a2\n 23528: a2 = a1 >> 0x30\n 23531: u8 [a0 + 0x6] = a2\n 23534: a2 = a1 >> 0x28\n 23537: u8 [a0 + 0x5] = a2\n 23540: a2 = a1 >> 0x20\n 23543: u8 [a0 + 0x4] = a2\n 23546: a2 = a1 >> 0x18\n 23549: u8 [a0 + 0x3] = a2\n 23552: a2 = a1 >> 0x10\n 23555: u8 [a0 + 0x2] = a2\n 23558: a1 = a1 >> 0x8\n 23561: u8 [a0 + 0x1] = a1\n 23564: a0 = u64 [sp + 0x38]\n 23567: a1 = u64 [sp + 0x28]\n 23570: u64 [a0] = a1\n 23572: a1 = u64 [sp + 0x18]\n 23575: u64 [a0 + 0x18] = a1\n 23578: a1 = u64 [sp + 0x30]\n 23581: u64 [a0 + 0x8] = a1\n 23584: a1 = u64 [sp + 0x20]\n 23587: u64 [a0 + 0x10] = a1\n 23590: sp = s0 + 0xffffffffffffff60\n 23594: ra = u64 [sp + 0x98]\n 23598: s0 = u64 [sp + 0x90]\n 23602: s1 = u64 [sp + 0x88]\n 23606: sp = sp + 0xa0\n 23610: ret\n      : @332 (gas: 8)\n 23612: u64 [sp + 112] = 0\n 23615: u64 [sp + 104] = 0\n 23618: u64 [sp + 96] = 0\n 23621: a0 = 0x4e487b7100000000\n 23631: a1 = sp + 0x60\n 23634: u64 [sp + 0x78] = a0\n 23637: a0 = 0\n 23639: ra = 296, jump @8\n      : @333 [@dyn 148] (gas: 7)\n 23645: u64 [sp + 88] = 0\n 23648: u64 [sp + 80] = 0\n 23651: u64 [sp + 64] = 0x41\n 23655: a0 = 0x4\n 23658: a1 = sp + 0x40\n 23661: u64 [sp + 72] = 0\n 23664: ra = 298, jump @8\n      : @334 [@dyn 149] (gas: 3)\n 23670: a1 = 0x24\n 23673: a0 = 0\n 23675: ra = 300, jump @0\n      : @335 [@dyn 150] (gas: 6)\n 23681: i32 a1 = a0 + 0\n 23683: a0 = 0x1\n 23686: a2 = 0x24\n 23689: ra = 0x12e\n 23693: ecalli 14 // 'seal_return'\n 23695: fallthrough\n      : @336 [@dyn 151] (gas: 7)\n 23696: a3 = u64 [a1 + 0x18]\n 23699: a4 = u64 [a1 + 0x10]\n 23702: a2 = u64 [a1 + 0x8]\n 23705: a3 = a3 | a4\n 23708: a4 = a2 <u 0x1\n 23711: a4 = 0 if a3 != 0\n 23713: jump @338 if a4 == 0\n      : @337 (gas: 16)\n 23716: a1 = u64 [a1]\n 23718: a3 = a1 + 0x1f\n 23721: a1 = a3 <u a1\n 23724: a1 = a1 + a2\n 23727: a1 = a1 & 0x1\n 23730: a3 = a3 & 0xffffffffffffffe0\n 23733: a2 = a3 + 0x20\n 23736: a3 = a2 <u a3\n 23739: a4 = a1 + a3\n 23742: a1 = a4 <u a1\n 23745: a1 = a3 if a3 == 0\n 23748: u64 [a0 + 24] = 0\n 23751: u64 [a0] = a2\n 23753: u64 [a0 + 0x8] = a4\n 23756: u64 [a0 + 0x10] = a1\n 23759: ret\n      : @338 (gas: 13)\n 23761: sp = sp + 0xffffffffffffffb0\n 23764: u64 [sp + 0x48] = ra\n 23767: u64 [sp + 0x40] = s0\n 23770: s0 = sp + 0x50\n 23773: sp = sp & 0xfffffffffffffff0\n 23776: u64 [sp + 48] = 0\n 23779: u64 [sp + 40] = 0\n 23782: u64 [sp + 32] = 0\n 23785: a0 = 0x4e487b7100000000\n 23795: a1 = sp + 0x20\n 23798: u64 [sp + 0x38] = a0\n 23801: a0 = 0\n 23803: ra = 304, jump @8\n      : @339 [@dyn 152] (gas: 7)\n 23809: u64 [sp + 24] = 0\n 23812: u64 [sp + 16] = 0\n 23815: u64 [sp + 0] = 0x41\n 23818: a0 = 0x4\n 23821: a1 = sp\n 23823: u64 [sp + 8] = 0\n 23826: ra = 306, jump @8\n      : @340 [@dyn 153] (gas: 3)\n 23832: a1 = 0x24\n 23835: a0 = 0\n 23837: ra = 308, jump @0\n      : @341 [@dyn 154] (gas: 6)\n 23843: i32 a1 = a0 + 0\n 23845: a0 = 0x1\n 23848: a2 = 0x24\n 23851: ra = 0x136\n 23855: ecalli 14 // 'seal_return'\n 23857: fallthrough\n      : @342 [@dyn 155] (gas: 16)\n 23858: sp = sp + 0xffffffffffffff20\n 23862: u64 [sp + 0xd8] = ra\n 23866: u64 [sp + 0xd0] = s0\n 23870: u64 [sp + 0xc8] = s1\n 23874: s0 = sp + 0xe0\n 23878: sp = sp & 0xfffffffffffffff0\n 23881: a3 = u64 [a1 + 0x18]\n 23884: a2 = u64 [a1 + 0x10]\n 23887: a4 = u64 [a1 + 0x8]\n 23890: u64 [sp + 0x10] = a2\n 23893: u64 [sp + 0x8] = a3\n 23896: a2 = a2 | a3\n 23899: a3 = a4 <u 0x1\n 23902: a3 = 0 if a2 != 0\n 23904: u64 [sp + 0x38] = a0\n 23907: jump @348 if a3 == 0\n      : @343 (gas: 19)\n 23911: s1 = u64 [a1]\n 23913: a0 = s1 + 0x1f\n 23916: a1 = a0 <u s1\n 23919: u64 [sp + 0x18] = a4\n 23922: a1 = a1 + a4\n 23925: a1 = a1 & 0x1\n 23928: a0 = a0 & 0xffffffffffffffe0\n 23931: a2 = a0 + 0x20\n 23934: a0 = a2 <u a0\n 23937: a3 = a1 + a0\n 23940: a4 = a3 <u a1\n 23943: a4 = a0 if a0 == 0\n 23946: u64 [sp + 152] = 0\n 23950: u64 [sp + 0x80] = a2\n 23954: u64 [sp + 0x88] = a3\n 23958: a0 = sp + 0xa0\n 23962: a1 = sp + 0x80\n 23966: u64 [sp + 0x90] = a4\n 23970: ra = 312, jump @327\n      : @344 [@dyn 156] (gas: 15)\n 23976: a0 = u64 [sp + 0xb8]\n 23980: a2 = u64 [sp + 0xb0]\n 23984: a1 = u64 [sp + 0xa8]\n 23988: a3 = u64 [sp + 0xa0]\n 23992: u64 [sp + 0x28] = a0\n 23995: u64 [sp + 0x20] = a1\n 23998: a0 = a0 | a1\n 24001: a1 = a3 | a2\n 24004: a1 = a1 | a0\n 24007: a1 = a1 >> 0x20\n 24010: u64 [sp + 0x30] = a2\n 24013: a0 = a0 | a2\n 24016: a0 = a0 << 0x20\n 24019: a0 = a0 | a1\n 24022: jump @347 if a0 != 0\n      : @345 (gas: 4)\n 24026: i32 a0 = a3 + 0\n 24028: a1 = 0x20\n 24031: u64 [sp] = a3\n 24033: ra = 314, jump @0\n      : @346 [@dyn 157] (gas: 82)\n 24039: a1 = u64 [sp + 0x8]\n 24042: a1 = reverse a1\n 24044: a2 = u64 [sp + 0x10]\n 24047: a2 = reverse a2\n 24049: a3 = u64 [sp + 0x18]\n 24052: a3 = reverse a3\n 24054: a4 = reverse s1\n 24056: a5 = a4 >> 0x38\n 24059: u8 [a0 + 0x1f] = a5\n 24062: a5 = a4 >> 0x30\n 24065: u8 [a0 + 0x1e] = a5\n 24068: a5 = a4 >> 0x28\n 24071: u8 [a0 + 0x1d] = a5\n 24074: a5 = a4 >> 0x20\n 24077: u8 [a0 + 0x1c] = a5\n 24080: a5 = a4 >> 0x18\n 24083: u8 [a0 + 0x1b] = a5\n 24086: a5 = a4 >> 0x10\n 24089: u8 [a0 + 0x1a] = a5\n 24092: a5 = a4 >> 0x8\n 24095: u8 [a0 + 0x19] = a5\n 24098: u8 [a0 + 0x18] = a4\n 24101: u8 [a0 + 0x10] = a3\n 24104: a4 = a3 >> 0x38\n 24107: u8 [a0 + 0x17] = a4\n 24110: a4 = a3 >> 0x30\n 24113: u8 [a0 + 0x16] = a4\n 24116: a4 = a3 >> 0x28\n 24119: u8 [a0 + 0x15] = a4\n 24122: a4 = a3 >> 0x20\n 24125: u8 [a0 + 0x14] = a4\n 24128: a4 = a3 >> 0x18\n 24131: u8 [a0 + 0x13] = a4\n 24134: a4 = a3 >> 0x10\n 24137: u8 [a0 + 0x12] = a4\n 24140: a3 = a3 >> 0x8\n 24143: u8 [a0 + 0x11] = a3\n 24146: u8 [a0 + 0x8] = a2\n 24149: a3 = a2 >> 0x38\n 24152: u8 [a0 + 0xf] = a3\n 24155: a3 = a2 >> 0x30\n 24158: u8 [a0 + 0xe] = a3\n 24161: a3 = a2 >> 0x28\n 24164: u8 [a0 + 0xd] = a3\n 24167: a3 = a2 >> 0x20\n 24170: u8 [a0 + 0xc] = a3\n 24173: a3 = a2 >> 0x18\n 24176: u8 [a0 + 0xb] = a3\n 24179: a3 = a2 >> 0x10\n 24182: u8 [a0 + 0xa] = a3\n 24185: a2 = a2 >> 0x8\n 24188: u8 [a0 + 0x9] = a2\n 24191: u8 [a0] = a1\n 24193: a2 = a1 >> 0x38\n 24196: u8 [a0 + 0x7] = a2\n 24199: a2 = a1 >> 0x30\n 24202: u8 [a0 + 0x6] = a2\n 24205: a2 = a1 >> 0x28\n 24208: u8 [a0 + 0x5] = a2\n 24211: a2 = a1 >> 0x20\n 24214: u8 [a0 + 0x4] = a2\n 24217: a2 = a1 >> 0x18\n 24220: u8 [a0 + 0x3] = a2\n 24223: a2 = a1 >> 0x10\n 24226: u8 [a0 + 0x2] = a2\n 24229: a1 = a1 >> 0x8\n 24232: u8 [a0 + 0x1] = a1\n 24235: a0 = u64 [sp + 0x38]\n 24238: a1 = u64 [sp]\n 24240: u64 [a0] = a1\n 24242: a1 = u64 [sp + 0x28]\n 24245: u64 [a0 + 0x18] = a1\n 24248: a1 = u64 [sp + 0x20]\n 24251: u64 [a0 + 0x8] = a1\n 24254: a1 = u64 [sp + 0x30]\n 24257: u64 [a0 + 0x10] = a1\n 24260: sp = s0 + 0xffffffffffffff20\n 24264: ra = u64 [sp + 0xd8]\n 24268: s0 = u64 [sp + 0xd0]\n 24272: s1 = u64 [sp + 0xc8]\n 24276: sp = sp + 0xe0\n 24280: ret\n      : @347 (gas: 1)\n 24282: trap\n      : @348 (gas: 8)\n 24283: u64 [sp + 112] = 0\n 24286: u64 [sp + 104] = 0\n 24289: u64 [sp + 96] = 0\n 24292: a0 = 0x4e487b7100000000\n 24302: a1 = sp + 0x60\n 24305: u64 [sp + 0x78] = a0\n 24308: a0 = 0\n 24310: ra = 316, jump @8\n      : @349 [@dyn 158] (gas: 7)\n 24316: u64 [sp + 88] = 0\n 24319: u64 [sp + 80] = 0\n 24322: u64 [sp + 64] = 0x41\n 24326: a0 = 0x4\n 24329: a1 = sp + 0x40\n 24332: u64 [sp + 72] = 0\n 24335: ra = 318, jump @8\n      : @350 [@dyn 159] (gas: 3)\n 24341: a1 = 0x24\n 24344: a0 = 0\n 24346: ra = 320, jump @0\n      : @351 [@dyn 160] (gas: 6)\n 24352: i32 a1 = a0 + 0\n 24354: a0 = 0x1\n 24357: a2 = 0x24\n 24360: ra = 0x142\n 24364: ecalli 14 // 'seal_return'\n 24366: fallthrough\n      : @352 [@dyn 161] (gas: 6)\n 24367: u64 [a0 + 24] = 0\n 24370: u64 [a0 + 16] = 0\n 24373: u64 [a0 + 8] = 0\n 24376: a1 = 0x60\n 24379: u64 [a0] = a1\n 24381: ret\n      : @353 (gas: 9)\n 24383: sp = sp + 0xffffffffffffff60\n 24387: u64 [sp + 0x98] = ra\n 24391: u64 [sp + 0x90] = s0\n 24395: u64 [sp + 0x88] = s1\n 24399: s0 = sp + 0xa0\n 24403: sp = sp & 0xffffffffffffffe0\n 24406: s1 = a0\n 24408: ecalli 13 // 'return_data_size'\n 24410: fallthrough\n      : @354 (gas: 1)\n 24411: jump @363 if a0 == 0\n      : @355 (gas: 9)\n 24415: u64 [sp + 0x20] = s1\n 24418: ecalli 13 // 'return_data_size'\n 24420: u64 [sp + 88] = 0\n 24423: u64 [sp + 80] = 0\n 24426: u64 [sp + 0x40] = a0\n 24429: a0 = sp + 0x60\n 24432: a1 = sp + 0x40\n 24435: u64 [sp + 72] = 0\n 24438: ra = 324, jump @342\n      : @356 [@dyn 162] (gas: 9)\n 24444: a0 = u64 [sp + 0x78]\n 24447: u64 [sp + 0x38] = a0\n 24450: a0 = u64 [sp + 0x70]\n 24453: u64 [sp + 0x30] = a0\n 24456: a0 = u64 [sp + 0x68]\n 24459: u64 [sp + 0x28] = a0\n 24462: s1 = u64 [sp + 0x60]\n 24465: ecalli 13 // 'return_data_size'\n 24467: fallthrough\n      : @357 (gas: 20)\n 24468: a1 = s1 + 0x20\n 24471: u64 [sp + 0x18] = s1\n 24474: a2 = a1 <u s1\n 24477: a4 = u64 [sp + 0x28]\n 24480: a3 = a4 + a2\n 24483: a4 = a3 <u a4\n 24486: a4 = a2 if a2 == 0\n 24489: a2 = u64 [sp + 0x30]\n 24492: a4 = a4 + a2\n 24495: a2 = a4 <u a2\n 24498: a5 = u64 [sp + 0x38]\n 24501: a2 = a2 + a5\n 24504: a5 = a1 | a4\n 24507: a2 = a2 | a3\n 24510: a5 = a5 | a2\n 24513: a5 = a5 >> 0x20\n 24516: a2 = a2 | a4\n 24519: a2 = a2 << 0x20\n 24522: a2 = a2 | a5\n 24525: jump @362 if a2 != 0\n      : @358 (gas: 3)\n 24528: s1 = a0\n 24530: a0 = a0 >> 0x20\n 24533: jump @362 if a0 != 0\n      : @359 (gas: 4)\n 24536: i32 a0 = a1 + 0\n 24538: i32 a1 = s1 + 0\n 24540: u64 [sp + 0x10] = a1\n 24543: ra = 326, jump @0\n      : @360 [@dyn 163] (gas: 6)\n 24549: u32 [sp + 0x80] = s1\n 24553: i32 a0 = a0 + 0\n 24555: i32 a1 = sp + 0x80\n 24559: a2 = 0\n 24561: ecalli 12 // 'return_data_copy'\n 24563: fallthrough\n      : @361 (gas: 8)\n 24564: a0 = i32 [sp + 0x80]\n 24568: s1 = u64 [sp + 0x20]\n 24571: a1 = u64 [sp + 0x38]\n 24574: a2 = u64 [sp + 0x30]\n 24577: a3 = u64 [sp + 0x28]\n 24580: a4 = u64 [sp + 0x18]\n 24583: a5 = u64 [sp + 0x10]\n 24586: jump @364 if a0 >=u a5\n      : @362 (gas: 1)\n 24589: trap\n      : @363 (gas: 5)\n 24590: a3 = 0\n 24592: a2 = 0\n 24594: a1 = 0\n 24596: a4 = 0x60\n 24599: fallthrough\n      : @364 (gas: 10)\n 24600: u64 [s1] = a4\n 24602: u64 [s1 + 0x8] = a3\n 24605: u64 [s1 + 0x10] = a2\n 24608: u64 [s1 + 0x18] = a1\n 24611: sp = s0 + 0xffffffffffffff60\n 24615: ra = u64 [sp + 0x98]\n 24619: s0 = u64 [sp + 0x90]\n 24623: s1 = u64 [sp + 0x88]\n 24627: sp = sp + 0xa0\n 24631: ret\n      : @365 (gas: 17)\n 24633: sp = sp + 0xffffffffffffffa0\n 24636: u64 [sp + 0x58] = ra\n 24639: u64 [sp + 0x50] = s0\n 24642: u64 [sp + 0x48] = s1\n 24645: a3 = u64 [a1 + 0x18]\n 24648: a4 = u64 [a1 + 0x10]\n 24651: a5 = u64 [a1 + 0x8]\n 24654: s1 = u64 [a1]\n 24656: a1 = a5 | a3\n 24659: a2 = s1 | a4\n 24662: a2 = a2 | a1\n 24665: a2 = a2 >> 0x20\n 24668: a1 = a1 | a4\n 24671: a1 = a1 << 0x20\n 24674: a1 = a1 | a2\n 24677: u64 [sp + 0x28] = a0\n 24680: jump @372 if a1 != 0\n      : @366 (gas: 19)\n 24684: a0 = s1 + 0x20\n 24687: u64 [sp + 0x30] = a0\n 24690: a0 = a0 <u s1\n 24693: a1 = a5 + a0\n 24696: u64 [sp + 0x40] = a1\n 24699: u64 [sp + 0x8] = a5\n 24702: s0 = a1 <u a5\n 24705: s0 = a0 if a0 == 0\n 24708: s0 = s0 + a4\n 24711: u64 [sp + 0x10] = a4\n 24714: a0 = s0 <u a4\n 24717: u64 [sp + 0x18] = a3\n 24720: a0 = a0 + a3\n 24723: u64 [sp + 0x38] = a0\n 24726: u64 [sp] = s1\n 24728: i32 a0 = s1 + 0\n 24730: a1 = 0x20\n 24733: s1 = 0x20\n 24736: ra = 328, jump @0\n      : @367 [@dyn 164] (gas: 45)\n 24742: u8 [a0 + 0x1f] = s1\n 24745: a1 = u64 [sp + 0x30]\n 24748: s1 = a1\n 24750: a1 = a1 | s0\n 24753: a2 = u64 [sp + 0x40]\n 24756: a4 = u64 [sp + 0x38]\n 24759: a2 = a2 | a4\n 24762: a1 = a1 | a2\n 24765: a1 = a1 >> 0x20\n 24768: u64 [sp + 0x20] = s0\n 24771: a2 = a2 | s0\n 24774: a2 = a2 << 0x20\n 24777: a1 = a1 | a2\n 24780: u8 [a0 + 30] = 0\n 24783: u8 [a0 + 29] = 0\n 24786: u8 [a0 + 28] = 0\n 24789: u8 [a0 + 27] = 0\n 24792: u8 [a0 + 26] = 0\n 24795: u8 [a0 + 25] = 0\n 24798: u8 [a0 + 24] = 0\n 24801: u8 [a0 + 23] = 0\n 24804: u8 [a0 + 22] = 0\n 24807: u8 [a0 + 21] = 0\n 24810: u8 [a0 + 20] = 0\n 24813: u8 [a0 + 19] = 0\n 24816: u8 [a0 + 18] = 0\n 24819: u8 [a0 + 17] = 0\n 24822: u8 [a0 + 16] = 0\n 24825: u8 [a0 + 15] = 0\n 24828: u8 [a0 + 14] = 0\n 24831: u8 [a0 + 13] = 0\n 24834: u8 [a0 + 12] = 0\n 24837: u8 [a0 + 11] = 0\n 24840: u8 [a0 + 10] = 0\n 24843: u8 [a0 + 9] = 0\n 24846: u8 [a0 + 8] = 0\n 24849: u8 [a0 + 7] = 0\n 24852: u8 [a0 + 6] = 0\n 24855: u8 [a0 + 5] = 0\n 24858: u8 [a0 + 4] = 0\n 24861: u8 [a0 + 3] = 0\n 24864: u8 [a0 + 2] = 0\n 24867: u8 [a0 + 1] = 0\n 24870: u8 [a0 + 0] = 0\n 24872: jump @372 if a1 != 0\n      : @368 (gas: 4)\n 24876: i32 s0 = s1 + 0\n 24878: a1 = 0x20\n 24881: a0 = s0\n 24883: ra = 330, jump @0\n      : @369 [@dyn 165] (gas: 41)\n 24889: u8 [a0 + 31] = 0x6\n 24893: u8 [a0 + 30] = 0\n 24896: u8 [a0 + 29] = 0\n 24899: u8 [a0 + 28] = 0\n 24902: u8 [a0 + 27] = 0\n 24905: u8 [a0 + 26] = 0\n 24908: u8 [a0 + 25] = 0\n 24911: u8 [a0 + 24] = 0\n 24914: u8 [a0 + 23] = 0\n 24917: u8 [a0 + 22] = 0\n 24920: u8 [a0 + 21] = 0\n 24923: u8 [a0 + 20] = 0\n 24926: u8 [a0 + 19] = 0\n 24929: u8 [a0 + 18] = 0\n 24932: u8 [a0 + 17] = 0\n 24935: u8 [a0 + 16] = 0\n 24938: u8 [a0 + 15] = 0\n 24941: u8 [a0 + 14] = 0\n 24944: u8 [a0 + 13] = 0\n 24947: u8 [a0 + 12] = 0\n 24950: u8 [a0 + 11] = 0\n 24953: u8 [a0 + 10] = 0\n 24956: u8 [a0 + 9] = 0\n 24959: u8 [a0 + 8] = 0\n 24962: u8 [a0 + 7] = 0\n 24965: u8 [a0 + 6] = 0\n 24968: u8 [a0 + 5] = 0\n 24971: u8 [a0 + 4] = 0\n 24974: u8 [a0 + 3] = 0\n 24977: u8 [a0 + 2] = 0\n 24980: u8 [a0 + 1] = 0\n 24983: a1 = u64 [sp + 0x20]\n 24986: a2 = u64 [sp + 0x38]\n 24989: a1 = a1 | a2\n 24992: a2 = 0xffffffe0\n 25002: a2 = s1 <u a2\n 25005: a3 = u64 [sp + 0x40]\n 25008: a2 = 0 if a3 != 0\n 25010: a2 = 0 if a1 != 0\n 25012: u8 [a0 + 0] = 0\n 25014: jump @372 if a2 == 0\n      : @370 (gas: 3)\n 25018: i32 a0 = s0 + 0x20\n 25021: a1 = 0x20\n 25024: ra = 332, jump @0\n      : @371 [@dyn 166] (gas: 54)\n 25030: u8 [a0 + 31] = 0\n 25033: u8 [a0 + 30] = 0\n 25036: u8 [a0 + 29] = 0\n 25039: u8 [a0 + 28] = 0\n 25042: u8 [a0 + 27] = 0\n 25045: u8 [a0 + 26] = 0\n 25048: u8 [a0 + 25] = 0\n 25051: u8 [a0 + 24] = 0\n 25054: u8 [a0 + 23] = 0\n 25057: u8 [a0 + 22] = 0\n 25060: u8 [a0 + 21] = 0\n 25063: u8 [a0 + 20] = 0\n 25066: u8 [a0 + 19] = 0\n 25069: u8 [a0 + 18] = 0\n 25072: u8 [a0 + 17] = 0\n 25075: u8 [a0 + 16] = 0\n 25078: u8 [a0 + 15] = 0\n 25081: u8 [a0 + 14] = 0\n 25084: u8 [a0 + 13] = 0\n 25087: u8 [a0 + 12] = 0\n 25090: u8 [a0 + 11] = 0\n 25093: u8 [a0 + 10] = 0\n 25096: u8 [a0 + 9] = 0\n 25099: u8 [a0 + 8] = 0\n 25102: u8 [a0 + 7] = 0\n 25105: u8 [a0 + 6] = 0\n 25108: u8 [a0 + 5] = 0x64\n 25112: u8 [a0 + 4] = 0x65\n 25116: u8 [a0 + 3] = 0x6c\n 25120: u8 [a0 + 2] = 0x69\n 25124: u8 [a0 + 1] = 0x61\n 25128: u8 [a0 + 0] = 0x66\n 25131: a1 = u64 [sp]\n 25133: a0 = a1 + 0x60\n 25136: a1 = a0 <u a1\n 25139: a3 = u64 [sp + 0x8]\n 25142: a2 = a3 + a1\n 25145: a3 = a2 <u a3\n 25148: a3 = a1 if a1 == 0\n 25151: a1 = u64 [sp + 0x10]\n 25154: a3 = a3 + a1\n 25157: a1 = a3 <u a1\n 25160: a4 = u64 [sp + 0x18]\n 25163: a1 = a1 + a4\n 25166: a4 = u64 [sp + 0x28]\n 25169: u64 [a4] = a0\n 25171: u64 [a4 + 0x8] = a2\n 25174: u64 [a4 + 0x10] = a3\n 25177: u64 [a4 + 0x18] = a1\n 25180: ra = u64 [sp + 0x58]\n 25183: s0 = u64 [sp + 0x50]\n 25186: s1 = u64 [sp + 0x48]\n 25189: sp = sp + 0x60\n 25192: ret\n      : @372 (gas: 1)\n 25194: trap\n      : @373 [@dyn 167] (gas: 6)\n 25195: i32 a1 = a0 + 0\n 25197: a0 = 0x1\n 25200: a2 = 0\n 25202: ra = 0x150\n 25206: ecalli 14 // 'seal_return'\n 25208: fallthrough\n      : @374 [@dyn 168] (gas: 7)\n 25209: a1 = u64 [a1]\n 25211: a1 = a1 << 0x20\n 25214: u64 [a0 + 0x18] = a1\n 25217: u64 [a0 + 16] = 0\n 25220: u64 [a0 + 8] = 0\n 25223: u64 [a0 + 0] = 0\n 25225: ret\n      : @375 (gas: 9)\n 25227: sp = sp + 0xffffffffffffffc0\n 25230: u64 [sp + 0x38] = ra\n 25233: u64 [sp + 0x30] = s0\n 25236: u64 [sp + 0x28] = s1\n 25239: s0 = sp + 0x40\n 25242: sp = sp & 0xffffffffffffffe0\n 25245: a0 = 0x40\n 25248: a1 = 0x20\n 25251: ra = 338, jump @0\n      : @376 [@dyn 169] (gas: 97)\n 25257: a1 = u8 [a0 + 0x11]\n 25260: a2 = u8 [a0 + 0x10]\n 25263: a3 = u8 [a0 + 0x12]\n 25266: a4 = u8 [a0 + 0x13]\n 25269: a1 = a1 << 0x8\n 25272: a1 = a1 | a2\n 25275: a3 = a3 << 0x10\n 25278: a4 = a4 << 0x18\n 25281: a3 = a3 | a4\n 25284: a1 = a1 | a3\n 25287: a2 = u8 [a0 + 0x15]\n 25290: a3 = u8 [a0 + 0x14]\n 25293: a4 = u8 [a0 + 0x16]\n 25296: a5 = u8 [a0 + 0x17]\n 25299: a2 = a2 << 0x8\n 25302: a2 = a2 | a3\n 25305: a4 = a4 << 0x10\n 25308: a5 = a5 << 0x18\n 25311: a4 = a4 | a5\n 25314: a2 = a2 | a4\n 25317: a2 = a2 << 0x20\n 25320: t0 = a2 | a1\n 25323: a2 = u8 [a0 + 0x1]\n 25326: a3 = u8 [a0]\n 25328: a4 = u8 [a0 + 0x2]\n 25331: a5 = u8 [a0 + 0x3]\n 25334: a2 = a2 << 0x8\n 25337: a2 = a2 | a3\n 25340: a4 = a4 << 0x10\n 25343: a5 = a5 << 0x18\n 25346: a4 = a4 | a5\n 25349: a2 = a2 | a4\n 25352: a3 = u8 [a0 + 0x5]\n 25355: a4 = u8 [a0 + 0x4]\n 25358: a5 = u8 [a0 + 0x6]\n 25361: s1 = u8 [a0 + 0x7]\n 25364: a3 = a3 << 0x8\n 25367: a3 = a3 | a4\n 25370: a5 = a5 << 0x10\n 25373: s1 = s1 << 0x18\n 25376: a5 = a5 | s1\n 25379: a3 = a3 | a5\n 25382: a3 = a3 << 0x20\n 25385: a2 = a2 | a3\n 25388: a3 = u8 [a0 + 0x19]\n 25391: a4 = u8 [a0 + 0x18]\n 25394: a5 = u8 [a0 + 0x1a]\n 25397: s1 = u8 [a0 + 0x1b]\n 25400: a3 = a3 << 0x8\n 25403: a3 = a3 | a4\n 25406: a5 = a5 << 0x10\n 25409: s1 = s1 << 0x18\n 25412: a5 = a5 | s1\n 25415: a3 = a3 | a5\n 25418: a4 = u8 [a0 + 0x1d]\n 25421: a5 = u8 [a0 + 0x1c]\n 25424: s1 = u8 [a0 + 0x1e]\n 25427: a1 = u8 [a0 + 0x1f]\n 25430: a4 = a4 << 0x8\n 25433: a4 = a4 | a5\n 25436: s1 = s1 << 0x10\n 25439: a1 = a1 << 0x18\n 25442: a1 = a1 | s1\n 25445: a1 = a1 | a4\n 25448: a1 = a1 << 0x20\n 25451: a3 = a3 | a1\n 25454: a1 = u8 [a0 + 0x9]\n 25457: a4 = u8 [a0 + 0x8]\n 25460: a5 = u8 [a0 + 0xa]\n 25463: s1 = u8 [a0 + 0xb]\n 25466: a1 = a1 << 0x8\n 25469: a1 = a1 | a4\n 25472: a5 = a5 << 0x10\n 25475: s1 = s1 << 0x18\n 25478: a5 = a5 | s1\n 25481: a1 = a1 | a5\n 25484: a4 = u8 [a0 + 0xd]\n 25487: a5 = u8 [a0 + 0xc]\n 25490: s1 = u8 [a0 + 0xe]\n 25493: a0 = u8 [a0 + 0xf]\n 25496: a4 = a4 << 0x8\n 25499: a4 = a4 | a5\n 25502: s1 = s1 << 0x10\n 25505: a0 = a0 << 0x18\n 25508: a0 = a0 | s1\n 25511: a0 = a0 | a4\n 25514: a0 = a0 << 0x20\n 25517: a0 = a0 | a1\n 25520: s1 = reverse a0\n 25522: a0 = reverse a3\n 25524: u64 [sp + 0x8] = a0\n 25527: a0 = reverse a2\n 25529: u64 [sp + 0x18] = a0\n 25532: a0 = reverse t0\n 25534: u64 [sp + 0x10] = a0\n 25537: ecalli 13 // 'return_data_size'\n 25539: fallthrough\n      : @377 (gas: 11)\n 25540: a3 = u64 [sp + 0x8]\n 25543: a1 = u64 [sp + 0x18]\n 25546: a2 = u64 [sp + 0x10]\n 25549: a1 = a1 | a2\n 25552: a2 = a3 | s1\n 25555: a2 = a2 | a1\n 25558: a2 = a2 >> 0x20\n 25561: a1 = a1 | s1\n 25564: a1 = a1 << 0x20\n 25567: a1 = a1 | a2\n 25570: jump @384 if a1 != 0\n      : @378 (gas: 3)\n 25573: s1 = a0\n 25575: a0 = a0 >> 0x20\n 25578: jump @384 if a0 != 0\n      : @379 (gas: 5)\n 25581: i32 a0 = a3 + 0\n 25583: i32 a1 = s1 + 0\n 25585: u64 [sp + 0x18] = a1\n 25588: u64 [sp + 0x10] = a0\n 25591: ra = 340, jump @0\n      : @380 [@dyn 170] (gas: 6)\n 25597: u32 [sp + 0x20] = s1\n 25600: i32 a0 = a0 + 0\n 25602: i32 a1 = sp + 0x20\n 25605: a2 = 0\n 25607: ecalli 12 // 'return_data_copy'\n 25609: fallthrough\n      : @381 (gas: 3)\n 25610: a0 = i32 [sp + 0x20]\n 25613: a1 = u64 [sp + 0x18]\n 25616: jump @384 if a0 <u a1\n      : @382 (gas: 2)\n 25619: ecalli 13 // 'return_data_size'\n 25621: fallthrough\n      : @383 (gas: 2)\n 25622: a1 = a0 >> 0x20\n 25625: jump @385 if a1 == 0\n      : @384 (gas: 1)\n 25628: trap\n      : @385 (gas: 4)\n 25629: i32 s1 = a0 + 0\n 25631: a0 = u64 [sp + 0x10]\n 25634: a1 = s1\n 25636: ra = 342, jump @0\n      : @386 [@dyn 171] (gas: 6)\n 25642: i32 a1 = a0 + 0\n 25644: a0 = 0x1\n 25647: a2 = s1\n 25649: ra = 0x158\n 25653: ecalli 14 // 'seal_return'\n 25655: fallthrough\n      : @387 [@dyn 172] (gas: 19)\n 25656: sp = sp + 0xfffffffffffffbe0\n 25660: u64 [sp + 0x418] = ra\n 25664: u64 [sp + 0x410] = s0\n 25668: u64 [sp + 0x408] = s1\n 25672: s0 = sp + 0x420\n 25676: sp = sp & 0xffffffffffffffe0\n 25679: s1 = sp\n 25681: a1 = u64 [a0 + 0x10]\n 25684: a2 = u64 [a0]\n 25686: u64 [s1 + 0x118] = a2\n 25690: a0 = u64 [a0 + 0x8]\n 25693: u64 [s1 + 0x110] = a0\n 25697: u64 [s1 + 0x58] = a1\n 25700: a0 = a1 << 0x20\n 25703: a0 = a0 >> 0x20\n 25706: u64 [s1 + 0x108] = a0\n 25710: a1 = 0x20\n 25713: a0 = 0\n 25715: ra = 346, jump @0\n      : @388 [@dyn 173] (gas: 80)\n 25721: a1 = u64 [s1 + 0x108]\n 25725: a1 = reverse a1\n 25727: a2 = u64 [s1 + 0x110]\n 25731: a2 = reverse a2\n 25733: a3 = u64 [s1 + 0x118]\n 25737: a3 = reverse a3\n 25739: u8 [a0 + 0x18] = a3\n 25742: u8 [a0 + 0x10] = a2\n 25745: u8 [a0 + 11] = 0\n 25748: u8 [a0 + 10] = 0\n 25751: u8 [a0 + 9] = 0\n 25754: u8 [a0 + 7] = 0\n 25757: u8 [a0 + 6] = 0\n 25760: u8 [a0 + 5] = 0\n 25763: u8 [a0 + 4] = 0\n 25766: u8 [a0 + 3] = 0\n 25769: u8 [a0 + 2] = 0\n 25772: u8 [a0 + 1] = 0\n 25775: u8 [a0 + 0] = 0\n 25777: a4 = a3 >> 0x38\n 25780: u64 [s1 + 0xf8] = a4\n 25784: u8 [a0 + 0x1f] = a4\n 25787: a4 = a3 >> 0x30\n 25790: u64 [s1 + 0xe8] = a4\n 25794: u8 [a0 + 0x1e] = a4\n 25797: a4 = a3 >> 0x28\n 25800: u64 [s1 + 0xe0] = a4\n 25804: u8 [a0 + 0x1d] = a4\n 25807: a4 = a3 >> 0x20\n 25810: u64 [s1 + 0x118] = a4\n 25814: u8 [a0 + 0x1c] = a4\n 25817: a4 = a3 >> 0x18\n 25820: u64 [s1 + 0xd8] = a4\n 25824: u8 [a0 + 0x1b] = a4\n 25827: a4 = a3 >> 0x10\n 25830: u64 [s1 + 0xd0] = a4\n 25834: u8 [a0 + 0x1a] = a4\n 25837: u64 [s1 + 0x110] = a3\n 25841: a3 = a3 >> 0x8\n 25844: u64 [s1 + 0xc8] = a3\n 25848: u8 [a0 + 0x19] = a3\n 25851: a3 = a2 >> 0x38\n 25854: u64 [s1 + 0xc0] = a3\n 25858: u8 [a0 + 0x17] = a3\n 25861: a3 = a2 >> 0x30\n 25864: u64 [s1 + 0xb8] = a3\n 25868: u8 [a0 + 0x16] = a3\n 25871: a3 = a2 >> 0x28\n 25874: u64 [s1 + 0xb0] = a3\n 25878: u8 [a0 + 0x15] = a3\n 25881: a3 = a2 >> 0x20\n 25884: u64 [s1 + 0x100] = a3\n 25888: u8 [a0 + 0x14] = a3\n 25891: a3 = a2 >> 0x18\n 25894: u64 [s1 + 0xa8] = a3\n 25898: u8 [a0 + 0x13] = a3\n 25901: a3 = a2 >> 0x10\n 25904: u64 [s1 + 0xa0] = a3\n 25908: u8 [a0 + 0x12] = a3\n 25911: u64 [s1 + 0x108] = a2\n 25915: a2 = a2 >> 0x8\n 25918: u64 [s1 + 0x98] = a2\n 25922: u8 [a0 + 0x11] = a2\n 25925: u8 [a0 + 0x8] = a1\n 25928: a2 = a1 >> 0x38\n 25931: u64 [s1 + 0x90] = a2\n 25935: u8 [a0 + 0xf] = a2\n 25938: a2 = a1 >> 0x30\n 25941: u64 [s1 + 0x88] = a2\n 25945: u8 [a0 + 0xe] = a2\n 25948: a2 = a1 >> 0x28\n 25951: u64 [s1 + 0x80] = a2\n 25955: u8 [a0 + 0xd] = a2\n 25958: u64 [s1 + 0xf0] = a1\n 25962: a1 = a1 >> 0x20\n 25965: u64 [s1 + 0x78] = a1\n 25968: u8 [a0 + 0xc] = a1\n 25971: a0 = 0x20\n 25974: a1 = 0x20\n 25977: ra = 348, jump @0\n      : @389 [@dyn 174] (gas: 35)\n 25983: u8 [a0 + 31] = 0x2\n 25987: u8 [a0 + 30] = 0\n 25990: u8 [a0 + 29] = 0\n 25993: u8 [a0 + 28] = 0\n 25996: u8 [a0 + 27] = 0\n 25999: u8 [a0 + 26] = 0\n 26002: u8 [a0 + 25] = 0\n 26005: u8 [a0 + 24] = 0\n 26008: u8 [a0 + 23] = 0\n 26011: u8 [a0 + 22] = 0\n 26014: u8 [a0 + 21] = 0\n 26017: u8 [a0 + 20] = 0\n 26020: u8 [a0 + 19] = 0\n 26023: u8 [a0 + 18] = 0\n 26026: u8 [a0 + 17] = 0\n 26029: u8 [a0 + 16] = 0\n 26032: u8 [a0 + 15] = 0\n 26035: u8 [a0 + 14] = 0\n 26038: u8 [a0 + 13] = 0\n 26041: u8 [a0 + 12] = 0\n 26044: u8 [a0 + 11] = 0\n 26047: u8 [a0 + 10] = 0\n 26050: u8 [a0 + 9] = 0\n 26053: u8 [a0 + 8] = 0\n 26056: u8 [a0 + 7] = 0\n 26059: u8 [a0 + 6] = 0\n 26062: u8 [a0 + 5] = 0\n 26065: u8 [a0 + 4] = 0\n 26068: u8 [a0 + 3] = 0\n 26071: u8 [a0 + 2] = 0\n 26074: u8 [a0 + 1] = 0\n 26077: u8 [a0 + 0] = 0\n 26079: a1 = 0x40\n 26082: a0 = 0\n 26084: ra = 350, jump @0\n      : @390 [@dyn 175] (gas: 44)\n 26090: i32 a0 = a0 + 0\n 26092: i32 a2 = s1 + 0x3e0\n 26096: a1 = 0x40\n 26099: ecalli 8 // 'hash_keccak_256'\n 26101: a0 = u64 [s1 + 0x3e0]\n 26105: a1 = u64 [s1 + 0x3e8]\n 26109: a2 = u64 [s1 + 0x3f0]\n 26113: a3 = u64 [s1 + 0x3f8]\n 26117: a0 = reverse a0\n 26119: a1 = reverse a1\n 26121: a2 = reverse a2\n 26123: a3 = reverse a3\n 26125: a4 = a3 + 0x5\n 26128: a3 = a4 <u a3\n 26131: a5 = a2 + a3\n 26134: a2 = a5 <u a2\n 26137: a2 = a3 if a3 == 0\n 26140: a2 = a2 + a1\n 26143: a1 = a2 <u a1\n 26146: a0 = a0 + a1\n 26149: u64 [s1 + 0x3c8] = a5\n 26153: u64 [s1 + 0x3c0] = a4\n 26157: u64 [s1 + 0x3d0] = a2\n 26161: u64 [s1 + 0x3d8] = a0\n 26165: u64 [s1 + 1016] = 0\n 26169: u64 [s1 + 1008] = 0\n 26173: u64 [s1 + 1000] = 0\n 26177: u64 [s1 + 992] = 0\n 26181: u32 [s1 + 1024] = 0x20\n 26186: i32 a1 = s1 + 0x3c0\n 26190: i32 a3 = s1 + 0x3e0\n 26194: i32 a4 = s1 + 0x400\n 26198: a2 = 0xffffffffffffffff\n 26201: a0 = 0\n 26203: ecalli 7 // 'get_storage'\n 26205: a0 = u64 [s1 + 0x3e8]\n 26209: u64 [s1 + 0x70] = a0\n 26212: a0 = u64 [s1 + 0x3e0]\n 26216: u64 [s1 + 0x68] = a0\n 26219: a0 = u32 [s1 + 0x3f0]\n 26223: u64 [s1 + 0x60] = a0\n 26226: i32 a0 = s1 + 0x240\n 26230: ecalli 5 // 'caller'\n 26232: fallthrough\n      : @391 (gas: 22)\n 26233: a0 = u64 [s1 + 0x248]\n 26237: a1 = u64 [s1 + 0x240]\n 26241: a2 = i32 [s1 + 0x250]\n 26245: a0 = reverse a0\n 26247: a3 = a0 >> 0x20\n 26250: a1 = reverse a1\n 26252: a4 = a1 << 0x20\n 26255: a3 = a3 | a4\n 26258: a0 = a0 << 0x20\n 26261: a2 = reverse a2\n 26263: a2 = a2 >> 0x20\n 26266: a0 = a0 | a2\n 26269: a1 = a1 >> 0x20\n 26272: a2 = u64 [s1 + 0x60]\n 26275: a1 = a1 ^ a2\n 26278: a2 = u64 [s1 + 0x68]\n 26281: a0 = a0 ^ a2\n 26284: a0 = a0 | a1\n 26287: a1 = u64 [s1 + 0x70]\n 26290: a1 = a1 ^ a3\n 26293: a0 = a0 | a1\n 26296: jump @425 if a0 != 0\n      : @392 (gas: 35)\n 26300: a0 = u64 [s1 + 0x108]\n 26304: a0 = a0 << 0x20\n 26307: a1 = u64 [s1 + 0x58]\n 26310: a1 = reverse a1\n 26312: a1 = a1 >> 0x20\n 26315: a1 = a1 | a0\n 26318: a0 = u64 [s1 + 0x110]\n 26322: a0 = a0 << 0x20\n 26325: a2 = u64 [s1 + 0x100]\n 26329: a0 = a0 | a2\n 26332: a2 = u64 [s1 + 0x118]\n 26336: u32 [s1 + 0x270] = a2\n 26340: u64 [s1 + 0x48] = a0\n 26343: u64 [s1 + 0x268] = a0\n 26347: u64 [s1 + 0x50] = a1\n 26350: u64 [s1 + 0x260] = a1\n 26354: a0 = sp + 0xffffffffffffffe0\n 26357: a0 = a0 & 0xffffffffffffffe0\n 26360: u64 [s1 + 0x60] = a0\n 26363: sp = a0\n 26365: i32 a1 = a0 + 0\n 26367: i32 a0 = s1 + 0x260\n 26371: ecalli 0 // 'balance_of'\n 26372: a1 = u64 [s1 + 0x60]\n 26375: a0 = u64 [a1]\n 26377: u64 [s1 + 0x70] = a0\n 26380: a0 = u64 [a1 + 0x8]\n 26383: u64 [s1 + 0x68] = a0\n 26386: a0 = u64 [a1 + 0x10]\n 26389: u64 [s1 + 0x58] = a0\n 26392: a0 = u64 [a1 + 0x18]\n 26395: u64 [s1 + 0x60] = a0\n 26398: a1 = 0x20\n 26401: a0 = 0\n 26403: ra = 352, jump @0\n      : @393 [@dyn 176] (gas: 62)\n 26409: a1 = u64 [s1 + 0xf8]\n 26413: u8 [a0 + 0x1f] = a1\n 26416: a1 = u64 [s1 + 0xe8]\n 26420: u8 [a0 + 0x1e] = a1\n 26423: a1 = u64 [s1 + 0xe0]\n 26427: u8 [a0 + 0x1d] = a1\n 26430: a1 = u64 [s1 + 0x118]\n 26434: u8 [a0 + 0x1c] = a1\n 26437: a1 = u64 [s1 + 0xd8]\n 26441: u8 [a0 + 0x1b] = a1\n 26444: a1 = u64 [s1 + 0xd0]\n 26448: u8 [a0 + 0x1a] = a1\n 26451: a1 = u64 [s1 + 0xc8]\n 26455: u8 [a0 + 0x19] = a1\n 26458: a1 = u64 [s1 + 0x110]\n 26462: u8 [a0 + 0x18] = a1\n 26465: a1 = u64 [s1 + 0xc0]\n 26469: u8 [a0 + 0x17] = a1\n 26472: a1 = u64 [s1 + 0xb8]\n 26476: u8 [a0 + 0x16] = a1\n 26479: a1 = u64 [s1 + 0xb0]\n 26483: u8 [a0 + 0x15] = a1\n 26486: a1 = u64 [s1 + 0x100]\n 26490: u8 [a0 + 0x14] = a1\n 26493: a1 = u64 [s1 + 0xa8]\n 26497: u8 [a0 + 0x13] = a1\n 26500: a1 = u64 [s1 + 0xa0]\n 26504: u8 [a0 + 0x12] = a1\n 26507: a1 = u64 [s1 + 0x98]\n 26511: u8 [a0 + 0x11] = a1\n 26514: a1 = u64 [s1 + 0x108]\n 26518: u8 [a0 + 0x10] = a1\n 26521: a1 = u64 [s1 + 0x90]\n 26525: u8 [a0 + 0xf] = a1\n 26528: a1 = u64 [s1 + 0x88]\n 26532: u8 [a0 + 0xe] = a1\n 26535: a1 = u64 [s1 + 0x80]\n 26539: u8 [a0 + 0xd] = a1\n 26542: a1 = u64 [s1 + 0x78]\n 26545: u8 [a0 + 0xc] = a1\n 26548: a1 = u64 [s1 + 0xf0]\n 26552: a2 = a1 >> 0x18\n 26555: u64 [s1 + 0x28] = a2\n 26558: u8 [a0 + 0xb] = a2\n 26561: a2 = a1 >> 0x10\n 26564: u64 [s1 + 0x20] = a2\n 26567: u8 [a0 + 0xa] = a2\n 26570: a2 = a1 >> 0x8\n 26573: u64 [s1 + 0x18] = a2\n 26576: u8 [a0 + 0x9] = a2\n 26579: u8 [a0 + 0x8] = a1\n 26582: u8 [a0 + 7] = 0\n 26585: u8 [a0 + 6] = 0\n 26588: u8 [a0 + 5] = 0\n 26591: u8 [a0 + 4] = 0\n 26594: u8 [a0 + 3] = 0\n 26597: u8 [a0 + 2] = 0\n 26600: u8 [a0 + 1] = 0\n 26603: u8 [a0 + 0] = 0\n 26605: a0 = 0x20\n 26608: a1 = 0x20\n 26611: ra = 354, jump @0\n      : @394 [@dyn 177] (gas: 35)\n 26617: u8 [a0 + 31] = 0x2\n 26621: u8 [a0 + 30] = 0\n 26624: u8 [a0 + 29] = 0\n 26627: u8 [a0 + 28] = 0\n 26630: u8 [a0 + 27] = 0\n 26633: u8 [a0 + 26] = 0\n 26636: u8 [a0 + 25] = 0\n 26639: u8 [a0 + 24] = 0\n 26642: u8 [a0 + 23] = 0\n 26645: u8 [a0 + 22] = 0\n 26648: u8 [a0 + 21] = 0\n 26651: u8 [a0 + 20] = 0\n 26654: u8 [a0 + 19] = 0\n 26657: u8 [a0 + 18] = 0\n 26660: u8 [a0 + 17] = 0\n 26663: u8 [a0 + 16] = 0\n 26666: u8 [a0 + 15] = 0\n 26669: u8 [a0 + 14] = 0\n 26672: u8 [a0 + 13] = 0\n 26675: u8 [a0 + 12] = 0\n 26678: u8 [a0 + 11] = 0\n 26681: u8 [a0 + 10] = 0\n 26684: u8 [a0 + 9] = 0\n 26687: u8 [a0 + 8] = 0\n 26690: u8 [a0 + 7] = 0\n 26693: u8 [a0 + 6] = 0\n 26696: u8 [a0 + 5] = 0\n 26699: u8 [a0 + 4] = 0\n 26702: u8 [a0 + 3] = 0\n 26705: u8 [a0 + 2] = 0\n 26708: u8 [a0 + 1] = 0\n 26711: u8 [a0 + 0] = 0\n 26713: a1 = 0x40\n 26716: a0 = 0\n 26718: ra = 356, jump @0\n      : @395 [@dyn 178] (gas: 36)\n 26724: i32 a0 = a0 + 0\n 26726: i32 a2 = s1 + 0x3e0\n 26730: a1 = 0x40\n 26733: ecalli 8 // 'hash_keccak_256'\n 26735: a0 = u64 [s1 + 0x3e0]\n 26739: a1 = u64 [s1 + 0x3e8]\n 26743: a2 = u64 [s1 + 0x3f0]\n 26747: a3 = u64 [s1 + 0x3f8]\n 26751: a0 = reverse a0\n 26753: a1 = reverse a1\n 26755: a2 = reverse a2\n 26757: a3 = reverse a3\n 26759: a4 = a3 + 0x3\n 26762: a3 = a4 <u a3\n 26765: a5 = a2 + a3\n 26768: a2 = a5 <u a2\n 26771: a2 = a3 if a3 == 0\n 26774: a2 = a2 + a1\n 26777: a1 = a2 <u a1\n 26780: a0 = a0 + a1\n 26783: u64 [s1 + 0x3c8] = a5\n 26787: u64 [s1 + 0x3c0] = a4\n 26791: u64 [s1 + 0x3d0] = a2\n 26795: u64 [s1 + 0x3d8] = a0\n 26799: u64 [s1 + 1016] = 0\n 26803: u64 [s1 + 1008] = 0\n 26807: u64 [s1 + 1000] = 0\n 26811: u64 [s1 + 992] = 0\n 26815: u32 [s1 + 1024] = 0x20\n 26820: i32 a1 = s1 + 0x3c0\n 26824: i32 a3 = s1 + 0x3e0\n 26828: i32 a4 = s1 + 0x400\n 26832: a2 = 0xffffffffffffffff\n 26835: a0 = 0\n 26837: ecalli 7 // 'get_storage'\n 26839: fallthrough\n      : @396 (gas: 24)\n 26840: t1 = u64 [s1 + 0x3f8]\n 26844: ra = u64 [s1 + 0x3f0]\n 26848: t0 = u64 [s1 + 0x3e8]\n 26852: a3 = u64 [s1 + 0x3e0]\n 26856: a0 = u64 [s1 + 0x60]\n 26859: a4 = a0 ^ t1\n 26862: a5 = a0 <u t1\n 26865: a2 = u64 [s1 + 0x58]\n 26868: a0 = a2 <u ra\n 26871: u64 [s1 + 0x38] = a0\n 26874: a5 = a0 if a4 == 0\n 26877: a0 = u64 [s1 + 0x68]\n 26880: a1 = a0 ^ t0\n 26883: u64 [s1 + 0x30] = a1\n 26886: a0 = a0 <u t0\n 26889: a1 = u64 [s1 + 0x70]\n 26892: u64 [s1 + 0x40] = a3\n 26895: t2 = a1 <u a3\n 26898: a1 = u64 [s1 + 0x30]\n 26901: a0 = t2 if a1 == 0\n 26904: a1 = a2 ^ ra\n 26907: a1 = a1 | a4\n 26910: a5 = a0 if a1 == 0\n 26913: jump @398 if a5 == 0\n      : @397 (gas: 1)\n 26916: jump @443\n      : @398 (gas: 29)\n 26919: a1 = a2 - ra\n 26922: a2 = a1 - a0\n 26925: u64 [s1 + 0x58] = a2\n 26928: a0 = a1 <u a0\n 26931: a1 = u64 [s1 + 0x60]\n 26934: a1 = a1 - t1\n 26937: a2 = u64 [s1 + 0x38]\n 26940: a1 = a1 - a2\n 26943: a1 = a1 - a0\n 26946: u64 [s1 + 0x60] = a1\n 26949: a0 = u64 [s1 + 0x68]\n 26952: a0 = a0 - t0\n 26955: a0 = a0 - t2\n 26958: u64 [s1 + 0x68] = a0\n 26961: a0 = u64 [s1 + 0x70]\n 26964: a1 = u64 [s1 + 0x40]\n 26967: a0 = a0 - a1\n 26970: u64 [s1 + 0x70] = a0\n 26973: a0 = sp + 0xffffffffffffffe0\n 26976: a0 = a0 & 0xffffffffffffffe0\n 26979: u64 [s1 + 0x40] = a0\n 26982: sp = a0\n 26984: u64 [a0 + 24] = 0\n 26987: u64 [a0 + 16] = 0\n 26990: u64 [a0 + 8] = 0\n 26993: u64 [a0 + 0] = 0\n 26995: i32 a0 = a0 + 0\n 26997: ecalli 17 // 'value_transferred'\n 26999: fallthrough\n      : @399 (gas: 17)\n 27000: a3 = u64 [s1 + 0x40]\n 27003: a0 = u64 [a3 + 0x18]\n 27006: a1 = u64 [a3 + 0x8]\n 27009: a2 = u64 [a3]\n 27011: a3 = u64 [a3 + 0x10]\n 27014: a4 = u64 [s1 + 0x60]\n 27017: a0 = a0 ^ a4\n 27020: a4 = u64 [s1 + 0x68]\n 27023: a1 = a1 ^ a4\n 27026: a0 = a0 | a1\n 27029: a1 = u64 [s1 + 0x58]\n 27032: a1 = a1 ^ a3\n 27035: a3 = u64 [s1 + 0x70]\n 27038: a2 = a2 ^ a3\n 27041: a1 = a1 | a2\n 27044: a0 = a0 | a1\n 27047: jump @430 if a0 != 0\n      : @400 (gas: 2)\n 27051: a1 = 0x20\n 27054: ra = 358, jump @0\n      : @401 [@dyn 179] (gas: 59)\n 27060: a1 = u64 [s1 + 0x108]\n 27064: u8 [a0 + 0x10] = a1\n 27067: a1 = u64 [s1 + 0x90]\n 27071: u8 [a0 + 0xf] = a1\n 27074: a1 = u64 [s1 + 0x88]\n 27078: u8 [a0 + 0xe] = a1\n 27081: a1 = u64 [s1 + 0x80]\n 27085: u8 [a0 + 0xd] = a1\n 27088: a1 = u64 [s1 + 0x78]\n 27091: u8 [a0 + 0xc] = a1\n 27094: a1 = u64 [s1 + 0x28]\n 27097: u8 [a0 + 0xb] = a1\n 27100: a1 = u64 [s1 + 0x20]\n 27103: u8 [a0 + 0xa] = a1\n 27106: a1 = u64 [s1 + 0x18]\n 27109: u8 [a0 + 0x9] = a1\n 27112: a1 = u64 [s1 + 0xf0]\n 27116: u8 [a0 + 0x8] = a1\n 27119: a1 = u64 [s1 + 0x110]\n 27123: u8 [a0 + 0x18] = a1\n 27126: a1 = u64 [s1 + 0xc0]\n 27130: u8 [a0 + 0x17] = a1\n 27133: a1 = u64 [s1 + 0xb8]\n 27137: u8 [a0 + 0x16] = a1\n 27140: a1 = u64 [s1 + 0xb0]\n 27144: u8 [a0 + 0x15] = a1\n 27147: a1 = u64 [s1 + 0x100]\n 27151: u8 [a0 + 0x14] = a1\n 27154: a1 = u64 [s1 + 0xa8]\n 27158: u8 [a0 + 0x13] = a1\n 27161: a1 = u64 [s1 + 0xa0]\n 27165: u8 [a0 + 0x12] = a1\n 27168: a1 = u64 [s1 + 0x98]\n 27172: u8 [a0 + 0x11] = a1\n 27175: a1 = u64 [s1 + 0xf8]\n 27179: u8 [a0 + 0x1f] = a1\n 27182: a1 = u64 [s1 + 0xe8]\n 27186: u8 [a0 + 0x1e] = a1\n 27189: a1 = u64 [s1 + 0xe0]\n 27193: u8 [a0 + 0x1d] = a1\n 27196: a1 = u64 [s1 + 0xd8]\n 27200: u8 [a0 + 0x1b] = a1\n 27203: a1 = u64 [s1 + 0xd0]\n 27207: u8 [a0 + 0x1a] = a1\n 27210: a1 = u64 [s1 + 0xc8]\n 27214: u8 [a0 + 0x19] = a1\n 27217: u8 [a0 + 7] = 0\n 27220: u8 [a0 + 6] = 0\n 27223: u8 [a0 + 5] = 0\n 27226: u8 [a0 + 4] = 0\n 27229: u8 [a0 + 3] = 0\n 27232: u8 [a0 + 2] = 0\n 27235: u8 [a0 + 1] = 0\n 27238: u8 [a0 + 0] = 0\n 27240: a1 = u64 [s1 + 0x118]\n 27244: u8 [a0 + 0x1c] = a1\n 27247: a0 = 0x20\n 27250: a1 = 0x20\n 27253: ra = 360, jump @0\n      : @402 [@dyn 180] (gas: 35)\n 27259: u8 [a0 + 31] = 0x2\n 27263: u8 [a0 + 30] = 0\n 27266: u8 [a0 + 29] = 0\n 27269: u8 [a0 + 28] = 0\n 27272: u8 [a0 + 27] = 0\n 27275: u8 [a0 + 26] = 0\n 27278: u8 [a0 + 25] = 0\n 27281: u8 [a0 + 24] = 0\n 27284: u8 [a0 + 23] = 0\n 27287: u8 [a0 + 22] = 0\n 27290: u8 [a0 + 21] = 0\n 27293: u8 [a0 + 20] = 0\n 27296: u8 [a0 + 19] = 0\n 27299: u8 [a0 + 18] = 0\n 27302: u8 [a0 + 17] = 0\n 27305: u8 [a0 + 16] = 0\n 27308: u8 [a0 + 15] = 0\n 27311: u8 [a0 + 14] = 0\n 27314: u8 [a0 + 13] = 0\n 27317: u8 [a0 + 12] = 0\n 27320: u8 [a0 + 11] = 0\n 27323: u8 [a0 + 10] = 0\n 27326: u8 [a0 + 9] = 0\n 27329: u8 [a0 + 8] = 0\n 27332: u8 [a0 + 7] = 0\n 27335: u8 [a0 + 6] = 0\n 27338: u8 [a0 + 5] = 0\n 27341: u8 [a0 + 4] = 0\n 27344: u8 [a0 + 3] = 0\n 27347: u8 [a0 + 2] = 0\n 27350: u8 [a0 + 1] = 0\n 27353: u8 [a0 + 0] = 0\n 27355: a1 = 0x40\n 27358: a0 = 0\n 27360: ra = 362, jump @0\n      : @403 [@dyn 181] (gas: 44)\n 27366: i32 a0 = a0 + 0\n 27368: i32 a2 = s1 + 0x3e0\n 27372: a1 = 0x40\n 27375: ecalli 8 // 'hash_keccak_256'\n 27377: a0 = u64 [s1 + 0x3e0]\n 27381: a1 = u64 [s1 + 0x3e8]\n 27385: a2 = u64 [s1 + 0x3f0]\n 27389: a3 = u64 [s1 + 0x3f8]\n 27393: a0 = reverse a0\n 27395: a1 = reverse a1\n 27397: a2 = reverse a2\n 27399: a3 = reverse a3\n 27401: a4 = a3 + 0x6\n 27404: a3 = a4 <u a3\n 27407: a5 = a2 + a3\n 27410: a2 = a5 <u a2\n 27413: a2 = a3 if a3 == 0\n 27416: a2 = a2 + a1\n 27419: a1 = a2 <u a1\n 27422: a0 = a0 + a1\n 27425: u64 [s1 + 0x3c8] = a5\n 27429: u64 [s1 + 0x3c0] = a4\n 27433: u64 [s1 + 0x3d0] = a2\n 27437: u64 [s1 + 0x3d8] = a0\n 27441: u64 [s1 + 1016] = 0\n 27445: u64 [s1 + 1008] = 0\n 27449: u64 [s1 + 1000] = 0\n 27453: u64 [s1 + 992] = 0\n 27457: u32 [s1 + 1024] = 0x20\n 27462: i32 a1 = s1 + 0x3c0\n 27466: i32 a3 = s1 + 0x3e0\n 27470: i32 a4 = s1 + 0x400\n 27474: a2 = 0xffffffffffffffff\n 27477: a0 = 0\n 27479: ecalli 7 // 'get_storage'\n 27481: a0 = u64 [s1 + 0x3e0]\n 27485: u64 [s1 + 0x110] = a0\n 27489: a0 = u64 [s1 + 0x3f0]\n 27493: u64 [s1 + 0x108] = a0\n 27497: a0 = u64 [s1 + 0x3e8]\n 27501: u64 [s1 + 0x100] = a0\n 27505: a0 = 0x40\n 27508: a1 = 0x20\n 27511: ra = 364, jump @0\n      : @404 [@dyn 182] (gas: 98)\n 27517: a1 = u8 [a0 + 0x11]\n 27520: a2 = u8 [a0 + 0x10]\n 27523: a3 = u8 [a0 + 0x12]\n 27526: a4 = u8 [a0 + 0x13]\n 27529: a1 = a1 << 0x8\n 27532: a1 = a1 | a2\n 27535: a3 = a3 << 0x10\n 27538: a4 = a4 << 0x18\n 27541: a3 = a3 | a4\n 27544: a1 = a1 | a3\n 27547: a2 = u8 [a0 + 0x15]\n 27550: a3 = u8 [a0 + 0x14]\n 27553: a4 = u8 [a0 + 0x16]\n 27556: a5 = u8 [a0 + 0x17]\n 27559: a2 = a2 << 0x8\n 27562: a2 = a2 | a3\n 27565: a4 = a4 << 0x10\n 27568: a5 = a5 << 0x18\n 27571: a4 = a4 | a5\n 27574: a2 = a2 | a4\n 27577: a2 = a2 << 0x20\n 27580: t0 = a2 | a1\n 27583: a2 = u8 [a0 + 0x1]\n 27586: a3 = u8 [a0]\n 27588: a4 = u8 [a0 + 0x2]\n 27591: a5 = u8 [a0 + 0x3]\n 27594: a2 = a2 << 0x8\n 27597: a2 = a2 | a3\n 27600: a4 = a4 << 0x10\n 27603: a5 = a5 << 0x18\n 27606: a4 = a4 | a5\n 27609: a2 = a2 | a4\n 27612: a3 = u8 [a0 + 0x5]\n 27615: a4 = u8 [a0 + 0x4]\n 27618: a5 = u8 [a0 + 0x6]\n 27621: a1 = u8 [a0 + 0x7]\n 27624: a3 = a3 << 0x8\n 27627: a3 = a3 | a4\n 27630: a5 = a5 << 0x10\n 27633: a1 = a1 << 0x18\n 27636: a1 = a1 | a5\n 27639: a1 = a1 | a3\n 27642: a1 = a1 << 0x20\n 27645: t1 = a1 | a2\n 27648: a1 = u8 [a0 + 0x19]\n 27651: a3 = u8 [a0 + 0x18]\n 27654: a4 = u8 [a0 + 0x1a]\n 27657: a5 = u8 [a0 + 0x1b]\n 27660: a1 = a1 << 0x8\n 27663: a1 = a1 | a3\n 27666: a4 = a4 << 0x10\n 27669: a5 = a5 << 0x18\n 27672: a4 = a4 | a5\n 27675: a1 = a1 | a4\n 27678: a3 = u8 [a0 + 0x1d]\n 27681: a4 = u8 [a0 + 0x1c]\n 27684: a5 = u8 [a0 + 0x1e]\n 27687: a2 = u8 [a0 + 0x1f]\n 27690: a3 = a3 << 0x8\n 27693: a3 = a3 | a4\n 27696: a5 = a5 << 0x10\n 27699: a2 = a2 << 0x18\n 27702: a2 = a2 | a5\n 27705: a2 = a2 | a3\n 27708: a2 = a2 << 0x20\n 27711: a3 = a2 | a1\n 27714: a1 = u8 [a0 + 0x9]\n 27717: a2 = u8 [a0 + 0x8]\n 27720: a4 = u8 [a0 + 0xa]\n 27723: a5 = u8 [a0 + 0xb]\n 27726: a1 = a1 << 0x8\n 27729: a1 = a1 | a2\n 27732: a4 = a4 << 0x10\n 27735: a5 = a5 << 0x18\n 27738: a4 = a4 | a5\n 27741: a1 = a1 | a4\n 27744: a2 = u8 [a0 + 0xd]\n 27747: a4 = u8 [a0 + 0xc]\n 27750: a5 = u8 [a0 + 0xe]\n 27753: a0 = u8 [a0 + 0xf]\n 27756: a2 = a2 << 0x8\n 27759: a2 = a2 | a4\n 27762: a5 = a5 << 0x10\n 27765: a0 = a0 << 0x18\n 27768: a0 = a0 | a5\n 27771: a0 = a0 | a2\n 27774: a0 = a0 << 0x20\n 27777: a0 = a0 | a1\n 27780: a0 = reverse a0\n 27782: u64 [s1 + 0xf8] = a0\n 27786: a0 = reverse a3\n 27788: u64 [s1 + 0xe0] = a0\n 27792: a0 = reverse t1\n 27794: u64 [s1 + 0xf0] = a0\n 27798: a0 = reverse t0\n 27800: u64 [s1 + 0xe8] = a0\n 27804: ecalli 11 // 'ref_time_left'\n 27806: fallthrough\n      : @405 (gas: 37)\n 27807: u64 [s1 + 0xd8] = a0\n 27811: a0 = u64 [s1 + 0x100]\n 27815: a0 = reverse a0\n 27817: a1 = u64 [s1 + 0x108]\n 27821: a1 = reverse a1\n 27823: a1 = a1 >> 0x20\n 27826: a2 = a0 << 0x20\n 27829: a1 = a1 | a2\n 27832: a0 = a0 >> 0x20\n 27835: a2 = u64 [s1 + 0x110]\n 27839: a2 = reverse a2\n 27841: a3 = a2 << 0x20\n 27844: a0 = a0 | a3\n 27847: u64 [s1 + 0x288] = a0\n 27851: u64 [s1 + 0x280] = a1\n 27855: a2 = a2 >> 0x20\n 27858: u32 [s1 + 0x290] = a2\n 27862: a2 = u64 [s1 + 0xe0]\n 27866: a0 = u64 [s1 + 0x60]\n 27869: u64 [s1 + 0x2b8] = a0\n 27873: a0 = u64 [s1 + 0x58]\n 27876: u64 [s1 + 0x2b0] = a0\n 27880: a0 = u64 [s1 + 0x68]\n 27883: u64 [s1 + 0x2a8] = a0\n 27887: a0 = u64 [s1 + 0xf0]\n 27891: a1 = u64 [s1 + 0xe8]\n 27895: a0 = a0 | a1\n 27898: a3 = u64 [s1 + 0xf8]\n 27902: a1 = a2 | a3\n 27905: a1 = a1 | a0\n 27908: a0 = a0 | a3\n 27911: a1 = a1 >> 0x20\n 27914: a0 = a0 << 0x20\n 27917: a0 = a0 | a1\n 27920: a1 = u64 [s1 + 0x70]\n 27923: u64 [s1 + 0x2a0] = a1\n 27927: jump @441 if a0 != 0\n      : @406 (gas: 3)\n 27931: i32 a0 = a2 + 0\n 27933: a1 = 0\n 27935: ra = 366, jump @0\n      : @407 [@dyn 183] (gas: 4)\n 27941: u64 [s1 + 0x110] = a0\n 27945: a0 = 0\n 27947: a1 = 0\n 27949: ra = 368, jump @0\n      : @408 [@dyn 184] (gas: 34)\n 27955: u32 [s1 + 704] = 0\n 27959: a2 = u64 [s1 + 0xd8]\n 27963: a1 = a2 >u 0x8fc\n 27967: a2 = -a1\n 27969: u64 [s1 + 0x2f8] = a2\n 27973: u64 [s1 + 0x2f0] = a2\n 27977: u64 [s1 + 0x2e8] = a2\n 27981: u64 [s1 + 0x2e0] = a2\n 27985: a2 = s1 + 0x280\n 27989: a2 = a2 << 0x20\n 27992: a2 = a2 >> 0x20\n 27995: a1 = a1 << 0x23\n 27998: t0 = a1 | a2\n 28001: a1 = s1 + 0x2a0\n 28005: a1 = a1 << 0x20\n 28008: a1 = a1 >> 0x20\n 28011: a2 = s1 + 0x2e0\n 28015: a2 = a2 << 0x20\n 28018: a3 = a2 | a1\n 28021: a4 = u64 [s1 + 0x110]\n 28025: a4 = a4 << 0x20\n 28028: a4 = a4 >> 0x20\n 28031: a0 = a0 << 0x20\n 28034: a0 = a0 >> 0x20\n 28037: a1 = s1 + 0x2c0\n 28041: a1 = a1 << 0x20\n 28044: a5 = a1 | a0\n 28047: a1 = 0xffffffffffffffff\n 28050: a2 = 0xffffffffffffffff\n 28053: a0 = t0\n 28055: ecalli 1 // 'call'\n 28057: u64 [s1 + 0x110] = a0\n 28061: a0 = s1 + 0x1a0\n 28065: ra = 370, jump @353\n      : @409 [@dyn 185] (gas: 2)\n 28071: a0 = u64 [s1 + 0x110]\n 28075: jump @435 if a0 != 0\n      : @410 (gas: 17)\n 28079: i32 a0 = s1 + 0x300\n 28083: ecalli 5 // 'caller'\n 28085: a0 = i32 [s1 + 0x310]\n 28089: u64 [s1 + 0xe8] = a0\n 28093: a0 = u64 [s1 + 0x300]\n 28097: u64 [s1 + 0xe0] = a0\n 28101: a0 = u64 [s1 + 0x308]\n 28105: u64 [s1 + 0xd8] = a0\n 28109: a0 = u64 [s1 + 0x48]\n 28112: u64 [s1 + 0x328] = a0\n 28116: a0 = u64 [s1 + 0x50]\n 28119: u64 [s1 + 0x320] = a0\n 28123: a0 = u64 [s1 + 0x118]\n 28127: u32 [s1 + 0x330] = a0\n 28131: i32 a0 = s1 + 0x320\n 28135: ecalli 6 // 'code_size'\n 28137: fallthrough\n      : @411 (gas: 1)\n 28138: jump @447 if a0 == 0\n      : @412 (gas: 3)\n 28142: a0 = 0x40\n 28145: a1 = 0x20\n 28148: ra = 372, jump @0\n      : @413 [@dyn 186] (gas: 107)\n 28154: a1 = u8 [a0 + 0x11]\n 28157: a2 = u8 [a0 + 0x10]\n 28160: a3 = u8 [a0 + 0x12]\n 28163: a4 = u8 [a0 + 0x13]\n 28166: a1 = a1 << 0x8\n 28169: a1 = a1 | a2\n 28172: a3 = a3 << 0x10\n 28175: a4 = a4 << 0x18\n 28178: a3 = a3 | a4\n 28181: a1 = a1 | a3\n 28184: a2 = u8 [a0 + 0x15]\n 28187: a3 = u8 [a0 + 0x14]\n 28190: a4 = u8 [a0 + 0x16]\n 28193: a5 = u8 [a0 + 0x17]\n 28196: a2 = a2 << 0x8\n 28199: a2 = a2 | a3\n 28202: a4 = a4 << 0x10\n 28205: a5 = a5 << 0x18\n 28208: a4 = a4 | a5\n 28211: a2 = a2 | a4\n 28214: a2 = a2 << 0x20\n 28217: t1 = a2 | a1\n 28220: a1 = u8 [a0 + 0x1]\n 28223: a2 = u8 [a0]\n 28225: a3 = u8 [a0 + 0x2]\n 28228: a4 = u8 [a0 + 0x3]\n 28231: a1 = a1 << 0x8\n 28234: a1 = a1 | a2\n 28237: a3 = a3 << 0x10\n 28240: a4 = a4 << 0x18\n 28243: a3 = a3 | a4\n 28246: a1 = a1 | a3\n 28249: a2 = u8 [a0 + 0x5]\n 28252: a3 = u8 [a0 + 0x4]\n 28255: a4 = u8 [a0 + 0x6]\n 28258: a5 = u8 [a0 + 0x7]\n 28261: a2 = a2 << 0x8\n 28264: a2 = a2 | a3\n 28267: a4 = a4 << 0x10\n 28270: a5 = a5 << 0x18\n 28273: a4 = a4 | a5\n 28276: a2 = a2 | a4\n 28279: a2 = a2 << 0x20\n 28282: t0 = a2 | a1\n 28285: a1 = u8 [a0 + 0x19]\n 28288: a2 = u8 [a0 + 0x18]\n 28291: a3 = u8 [a0 + 0x1a]\n 28294: a4 = u8 [a0 + 0x1b]\n 28297: a1 = a1 << 0x8\n 28300: a1 = a1 | a2\n 28303: a3 = a3 << 0x10\n 28306: a4 = a4 << 0x18\n 28309: a3 = a3 | a4\n 28312: a1 = a1 | a3\n 28315: a2 = u8 [a0 + 0x1d]\n 28318: a3 = u8 [a0 + 0x1c]\n 28321: a4 = u8 [a0 + 0x1e]\n 28324: a5 = u8 [a0 + 0x1f]\n 28327: a2 = a2 << 0x8\n 28330: a2 = a2 | a3\n 28333: a4 = a4 << 0x10\n 28336: a5 = a5 << 0x18\n 28339: a4 = a4 | a5\n 28342: a2 = a2 | a4\n 28345: a2 = a2 << 0x20\n 28348: a5 = a2 | a1\n 28351: a1 = u8 [a0 + 0x9]\n 28354: a2 = u8 [a0 + 0x8]\n 28357: a3 = u8 [a0 + 0xa]\n 28360: a4 = u8 [a0 + 0xb]\n 28363: a1 = a1 << 0x8\n 28366: a1 = a1 | a2\n 28369: a3 = a3 << 0x10\n 28372: a4 = a4 << 0x18\n 28375: a3 = a3 | a4\n 28378: a1 = a1 | a3\n 28381: a2 = u8 [a0 + 0xd]\n 28384: a3 = u8 [a0 + 0xc]\n 28387: a4 = u8 [a0 + 0xe]\n 28390: a0 = u8 [a0 + 0xf]\n 28393: a2 = a2 << 0x8\n 28396: a2 = a2 | a3\n 28399: a4 = a4 << 0x10\n 28402: a0 = a0 << 0x18\n 28405: a0 = a0 | a4\n 28408: a0 = a0 | a2\n 28411: a0 = a0 << 0x20\n 28414: a0 = a0 | a1\n 28417: u64 [s1 + 0xb8] = a0\n 28421: a3 = reverse a0\n 28423: u64 [s1 + 0xc0] = a5\n 28427: a2 = reverse a5\n 28429: u64 [s1 + 0xd0] = t0\n 28433: a1 = reverse t0\n 28435: u64 [s1 + 0xc8] = t1\n 28439: a0 = reverse t1\n 28441: u64 [s1 + 0x108] = a0\n 28445: u64 [s1 + 0xf0] = a1\n 28449: a0 = a0 | a1\n 28452: a1 = a2 | a3\n 28455: a1 = a1 | a0\n 28458: a1 = a1 >> 0x20\n 28461: u64 [s1 + 0xf8] = a3\n 28465: a0 = a0 | a3\n 28468: a0 = a0 << 0x20\n 28471: a0 = a0 | a1\n 28474: jump @441 if a0 != 0\n      : @414 (gas: 5)\n 28478: i32 a0 = a2 + 0\n 28480: a1 = 0x20\n 28483: u64 [s1 + 0x110] = a0\n 28487: u64 [s1 + 0x100] = a2\n 28491: ra = 374, jump @0\n      : @415 [@dyn 187] (gas: 45)\n 28497: u8 [a0 + 31] = 0\n 28500: u8 [a0 + 30] = 0\n 28503: u8 [a0 + 29] = 0\n 28506: u8 [a0 + 28] = 0\n 28509: u8 [a0 + 27] = 0\n 28512: u8 [a0 + 26] = 0\n 28515: u8 [a0 + 25] = 0\n 28518: u8 [a0 + 24] = 0\n 28521: u8 [a0 + 23] = 0\n 28524: u8 [a0 + 22] = 0\n 28527: u8 [a0 + 21] = 0\n 28530: u8 [a0 + 20] = 0\n 28533: u8 [a0 + 19] = 0\n 28536: u8 [a0 + 18] = 0\n 28539: u8 [a0 + 17] = 0\n 28542: u8 [a0 + 16] = 0\n 28545: u8 [a0 + 15] = 0\n 28548: u8 [a0 + 14] = 0\n 28551: u8 [a0 + 13] = 0\n 28554: u8 [a0 + 12] = 0\n 28557: u8 [a0 + 11] = 0\n 28560: u8 [a0 + 10] = 0\n 28563: u8 [a0 + 9] = 0\n 28566: u8 [a0 + 8] = 0\n 28569: u8 [a0 + 7] = 0\n 28572: u8 [a0 + 6] = 0\n 28575: u8 [a0 + 5] = 0\n 28578: u8 [a0 + 4] = 0\n 28581: u8 [a0 + 3] = 0x1\n 28585: u8 [a0 + 2] = 0xe4\n 28590: u8 [a0 + 1] = 0x37\n 28594: a3 = u64 [s1 + 0xf8]\n 28598: a4 = u64 [s1 + 0xf0]\n 28602: a4 = a4 | a3\n 28605: a1 = 0x100000000\n 28615: u64 [s1 + 0xf0] = a1\n 28619: a1 = 0xfffffffc\n 28629: a3 = u64 [s1 + 0x100]\n 28633: a1 = a3 <u a1\n 28636: a3 = u64 [s1 + 0x108]\n 28640: a1 = 0 if a3 != 0\n 28642: u64 [s1 + 0xf8] = a4\n 28646: a1 = 0 if a4 != 0\n 28648: u8 [a0 + 0] = 0x54\n 28651: jump @441 if a1 == 0\n      : @416 (gas: 20)\n 28655: a0 = u64 [s1 + 0xd8]\n 28659: a0 = reverse a0\n 28661: a1 = a0 >> 0x20\n 28664: a2 = u64 [s1 + 0xe0]\n 28668: a2 = reverse a2\n 28670: a3 = a2 << 0x20\n 28673: a1 = a1 | a3\n 28676: u64 [s1 + 0xe0] = a1\n 28680: a0 = a0 << 0x20\n 28683: a1 = u64 [s1 + 0xe8]\n 28687: a1 = reverse a1\n 28689: a1 = a1 >> 0x20\n 28692: a0 = a0 | a1\n 28695: u64 [s1 + 0xe8] = a0\n 28699: a2 = a2 >> 0x20\n 28702: u64 [s1 + 0xd8] = a2\n 28706: a0 = u64 [s1 + 0x110]\n 28710: i32 a0 = a0 + 0x4\n 28713: a1 = 0x20\n 28716: ra = 376, jump @0\n      : @417 [@dyn 188] (gas: 65)\n 28722: a1 = u64 [s1 + 0xd8]\n 28726: a1 = reverse a1\n 28728: a2 = u64 [s1 + 0xe0]\n 28732: a2 = reverse a2\n 28734: a3 = u64 [s1 + 0xe8]\n 28738: a3 = reverse a3\n 28740: a4 = a3 >> 0x38\n 28743: u8 [a0 + 0x1f] = a4\n 28746: a4 = a3 >> 0x30\n 28749: u8 [a0 + 0x1e] = a4\n 28752: a4 = a3 >> 0x28\n 28755: u8 [a0 + 0x1d] = a4\n 28758: a4 = a3 >> 0x20\n 28761: u8 [a0 + 0x1c] = a4\n 28764: a4 = a3 >> 0x18\n 28767: u8 [a0 + 0x1b] = a4\n 28770: a4 = a3 >> 0x10\n 28773: u8 [a0 + 0x1a] = a4\n 28776: a4 = a3 >> 0x8\n 28779: u8 [a0 + 0x19] = a4\n 28782: u8 [a0 + 0x18] = a3\n 28785: u8 [a0 + 0x10] = a2\n 28788: u8 [a0 + 11] = 0\n 28791: u8 [a0 + 10] = 0\n 28794: u8 [a0 + 9] = 0\n 28797: u8 [a0 + 7] = 0\n 28800: u8 [a0 + 6] = 0\n 28803: u8 [a0 + 5] = 0\n 28806: u8 [a0 + 4] = 0\n 28809: u8 [a0 + 3] = 0\n 28812: u8 [a0 + 2] = 0\n 28815: u8 [a0 + 1] = 0\n 28818: u8 [a0 + 0] = 0\n 28820: a3 = a2 >> 0x38\n 28823: u8 [a0 + 0x17] = a3\n 28826: a3 = a2 >> 0x30\n 28829: u8 [a0 + 0x16] = a3\n 28832: a3 = a2 >> 0x28\n 28835: u8 [a0 + 0x15] = a3\n 28838: a3 = a2 >> 0x20\n 28841: u8 [a0 + 0x14] = a3\n 28844: a3 = a2 >> 0x18\n 28847: u8 [a0 + 0x13] = a3\n 28850: a3 = a2 >> 0x10\n 28853: u8 [a0 + 0x12] = a3\n 28856: a2 = a2 >> 0x8\n 28859: u8 [a0 + 0x11] = a2\n 28862: u8 [a0 + 0x8] = a1\n 28865: a2 = a1 >> 0x38\n 28868: u8 [a0 + 0xf] = a2\n 28871: a2 = a1 >> 0x30\n 28874: u8 [a0 + 0xe] = a2\n 28877: a2 = a1 >> 0x28\n 28880: u8 [a0 + 0xd] = a2\n 28883: a1 = a1 >> 0x20\n 28886: a2 = u64 [s1 + 0xf0]\n 28890: a2 = a2 + 0xffffffffffffffdc\n 28893: a3 = u64 [s1 + 0x100]\n 28897: a2 = a3 <u a2\n 28900: a3 = u64 [s1 + 0x108]\n 28904: a2 = 0 if a3 != 0\n 28906: a3 = u64 [s1 + 0xf8]\n 28910: a2 = 0 if a3 != 0\n 28912: u8 [a0 + 0xc] = a1\n 28915: jump @441 if a2 == 0\n      : @418 (gas: 4)\n 28919: a0 = u64 [s1 + 0x110]\n 28923: i32 a0 = a0 + 0x24\n 28926: a1 = 0x20\n 28929: ra = 378, jump @0\n      : @419 [@dyn 189] (gas: 46)\n 28935: u8 [a0 + 31] = 0x1\n 28939: u8 [a0 + 30] = 0\n 28942: u8 [a0 + 29] = 0\n 28945: u8 [a0 + 28] = 0\n 28948: u8 [a0 + 27] = 0\n 28951: u8 [a0 + 26] = 0\n 28954: u8 [a0 + 25] = 0\n 28957: u8 [a0 + 24] = 0\n 28960: u8 [a0 + 23] = 0\n 28963: u8 [a0 + 22] = 0\n 28966: u8 [a0 + 21] = 0\n 28969: u8 [a0 + 20] = 0\n 28972: u8 [a0 + 19] = 0\n 28975: u8 [a0 + 18] = 0\n 28978: u8 [a0 + 17] = 0\n 28981: u8 [a0 + 16] = 0\n 28984: u8 [a0 + 15] = 0\n 28987: u8 [a0 + 14] = 0\n 28990: u8 [a0 + 13] = 0\n 28993: u8 [a0 + 12] = 0\n 28996: u8 [a0 + 11] = 0\n 28999: u8 [a0 + 10] = 0\n 29002: u8 [a0 + 9] = 0\n 29005: u8 [a0 + 8] = 0\n 29008: u8 [a0 + 7] = 0\n 29011: u8 [a0 + 6] = 0\n 29014: u8 [a0 + 5] = 0\n 29017: u8 [a0 + 4] = 0\n 29020: u8 [a0 + 3] = 0\n 29023: u8 [a0 + 2] = 0\n 29026: u8 [a0 + 1] = 0\n 29029: u8 [a0 + 0] = 0\n 29031: ecalli 11 // 'ref_time_left'\n 29033: a0 = u64 [s1 + 0x48]\n 29036: u64 [s1 + 0x348] = a0\n 29040: a0 = u64 [s1 + 0x50]\n 29043: u64 [s1 + 0x340] = a0\n 29047: a0 = u64 [s1 + 0x118]\n 29051: u32 [s1 + 0x350] = a0\n 29055: u64 [s1 + 888] = 0\n 29059: u64 [s1 + 880] = 0\n 29063: u64 [s1 + 872] = 0\n 29067: u64 [s1 + 864] = 0\n 29071: a1 = 0x44\n 29074: a0 = u64 [s1 + 0x110]\n 29078: ra = 380, jump @0\n      : @420 [@dyn 190] (gas: 4)\n 29084: u64 [s1 + 0x118] = a0\n 29088: a0 = u64 [s1 + 0x110]\n 29092: a1 = 0\n 29094: ra = 382, jump @0\n      : @421 [@dyn 191] (gas: 31)\n 29100: u32 [s1 + 896] = 0\n 29104: u64 [s1 + 952] = 0xffffffffffffffff\n 29109: u64 [s1 + 944] = 0xffffffffffffffff\n 29114: u64 [s1 + 936] = 0xffffffffffffffff\n 29119: u64 [s1 + 928] = 0xffffffffffffffff\n 29124: a1 = s1 + 0x340\n 29128: a1 = a1 << 0x20\n 29131: a1 = a1 >> 0x20\n 29134: a2 = 0x800000000\n 29144: t0 = a1 | a2\n 29147: a1 = s1 + 0x360\n 29151: a1 = a1 << 0x20\n 29154: a1 = a1 >> 0x20\n 29157: a2 = s1 + 0x3a0\n 29161: a2 = a2 << 0x20\n 29164: a3 = a2 | a1\n 29167: a1 = u64 [s1 + 0x118]\n 29171: a1 = a1 << 0x20\n 29174: a1 = a1 >> 0x20\n 29177: a2 = 0x4400000000\n 29187: a4 = a1 | a2\n 29190: a0 = a0 << 0x20\n 29193: a0 = a0 >> 0x20\n 29196: a1 = s1 + 0x380\n 29200: a1 = a1 << 0x20\n 29203: a5 = a1 | a0\n 29206: a1 = 0xffffffffffffffff\n 29209: a2 = 0xffffffffffffffff\n 29212: a0 = t0\n 29214: ecalli 1 // 'call'\n 29216: fallthrough\n      : @422 (gas: 1)\n 29217: jump @442 if a0 != 0\n      : @423 (gas: 4)\n 29221: ecalli 13 // 'return_data_size'\n 29223: a0 = 0x40\n 29226: a1 = 0x20\n 29229: ra = 384, jump @0\n      : @424 [@dyn 192] (gas: 70)\n 29235: a3 = u64 [s1 + 0xc0]\n 29239: u8 [a0 + 0x18] = a3\n 29242: a2 = u64 [s1 + 0xc8]\n 29246: a1 = a2 >> 0x38\n 29249: u8 [a0 + 0x17] = a1\n 29252: a1 = a2 >> 0x30\n 29255: u8 [a0 + 0x16] = a1\n 29258: a1 = a2 >> 0x28\n 29261: u8 [a0 + 0x15] = a1\n 29264: a1 = a2 >> 0x20\n 29267: u8 [a0 + 0x14] = a1\n 29270: a1 = a2 >> 0x18\n 29273: u8 [a0 + 0x13] = a1\n 29276: a1 = a2 >> 0x10\n 29279: u8 [a0 + 0x12] = a1\n 29282: a1 = a2 >> 0x8\n 29285: u8 [a0 + 0x11] = a1\n 29288: u8 [a0 + 0x10] = a2\n 29291: a2 = u64 [s1 + 0xb8]\n 29295: a1 = a2 >> 0x38\n 29298: u8 [a0 + 0xf] = a1\n 29301: a1 = a2 >> 0x30\n 29304: u8 [a0 + 0xe] = a1\n 29307: a1 = a2 >> 0x28\n 29310: u8 [a0 + 0xd] = a1\n 29313: a1 = a2 >> 0x20\n 29316: u8 [a0 + 0xc] = a1\n 29319: a1 = a2 >> 0x18\n 29322: u8 [a0 + 0xb] = a1\n 29325: a1 = a2 >> 0x10\n 29328: u8 [a0 + 0xa] = a1\n 29331: a1 = a2 >> 0x8\n 29334: u8 [a0 + 0x9] = a1\n 29337: u8 [a0 + 0x8] = a2\n 29340: a2 = u64 [s1 + 0xd0]\n 29344: a1 = a2 >> 0x38\n 29347: u8 [a0 + 0x7] = a1\n 29350: a1 = a2 >> 0x30\n 29353: u8 [a0 + 0x6] = a1\n 29356: a1 = a2 >> 0x28\n 29359: u8 [a0 + 0x5] = a1\n 29362: a1 = a2 >> 0x20\n 29365: u8 [a0 + 0x4] = a1\n 29368: a1 = a2 >> 0x18\n 29371: u8 [a0 + 0x3] = a1\n 29374: a1 = a2 >> 0x10\n 29377: u8 [a0 + 0x2] = a1\n 29380: a1 = a2 >> 0x8\n 29383: u8 [a0 + 0x1] = a1\n 29386: u8 [a0] = a2\n 29388: a1 = a3 >> 0x38\n 29391: u8 [a0 + 0x1f] = a1\n 29394: a1 = a3 >> 0x30\n 29397: u8 [a0 + 0x1e] = a1\n 29400: a1 = a3 >> 0x28\n 29403: u8 [a0 + 0x1d] = a1\n 29406: a1 = a3 >> 0x20\n 29409: u8 [a0 + 0x1c] = a1\n 29412: a1 = a3 >> 0x18\n 29415: u8 [a0 + 0x1b] = a1\n 29418: a1 = a3 >> 0x10\n 29421: u8 [a0 + 0x1a] = a1\n 29424: a1 = a3 >> 0x8\n 29427: u8 [a0 + 0x19] = a1\n 29430: sp = s0 + 0xfffffffffffffbe0\n 29434: ra = u64 [sp + 0x418]\n 29438: s0 = u64 [sp + 0x410]\n 29442: s1 = u64 [sp + 0x408]\n 29446: sp = sp + 0x420\n 29450: ret\n      : @425 (gas: 3)\n 29452: a0 = 0x40\n 29455: a1 = 0x20\n 29458: ra = 386, jump @0\n      : @426 [@dyn 193] (gas: 104)\n 29464: a1 = u8 [a0 + 0x11]\n 29467: a2 = u8 [a0 + 0x10]\n 29470: a3 = u8 [a0 + 0x12]\n 29473: a4 = u8 [a0 + 0x13]\n 29476: a1 = a1 << 0x8\n 29479: a1 = a1 | a2\n 29482: a3 = a3 << 0x10\n 29485: a4 = a4 << 0x18\n 29488: a3 = a3 | a4\n 29491: a1 = a1 | a3\n 29494: a2 = u8 [a0 + 0x15]\n 29497: a3 = u8 [a0 + 0x14]\n 29500: a4 = u8 [a0 + 0x16]\n 29503: a5 = u8 [a0 + 0x17]\n 29506: a2 = a2 << 0x8\n 29509: a2 = a2 | a3\n 29512: a4 = a4 << 0x10\n 29515: a5 = a5 << 0x18\n 29518: a4 = a4 | a5\n 29521: a2 = a2 | a4\n 29524: a2 = a2 << 0x20\n 29527: t0 = a2 | a1\n 29530: a2 = u8 [a0 + 0x1]\n 29533: a3 = u8 [a0]\n 29535: a4 = u8 [a0 + 0x2]\n 29538: a5 = u8 [a0 + 0x3]\n 29541: a2 = a2 << 0x8\n 29544: a2 = a2 | a3\n 29547: a4 = a4 << 0x10\n 29550: a5 = a5 << 0x18\n 29553: a4 = a4 | a5\n 29556: a2 = a2 | a4\n 29559: a3 = u8 [a0 + 0x5]\n 29562: a4 = u8 [a0 + 0x4]\n 29565: a5 = u8 [a0 + 0x6]\n 29568: a1 = u8 [a0 + 0x7]\n 29571: a3 = a3 << 0x8\n 29574: a3 = a3 | a4\n 29577: a5 = a5 << 0x10\n 29580: a1 = a1 << 0x18\n 29583: a1 = a1 | a5\n 29586: a1 = a1 | a3\n 29589: a1 = a1 << 0x20\n 29592: t1 = a1 | a2\n 29595: a1 = u8 [a0 + 0x19]\n 29598: a3 = u8 [a0 + 0x18]\n 29601: a4 = u8 [a0 + 0x1a]\n 29604: a5 = u8 [a0 + 0x1b]\n 29607: a1 = a1 << 0x8\n 29610: a1 = a1 | a3\n 29613: a4 = a4 << 0x10\n 29616: a5 = a5 << 0x18\n 29619: a4 = a4 | a5\n 29622: a1 = a1 | a4\n 29625: a3 = u8 [a0 + 0x1d]\n 29628: a4 = u8 [a0 + 0x1c]\n 29631: a5 = u8 [a0 + 0x1e]\n 29634: a2 = u8 [a0 + 0x1f]\n 29637: a3 = a3 << 0x8\n 29640: a3 = a3 | a4\n 29643: a5 = a5 << 0x10\n 29646: a2 = a2 << 0x18\n 29649: a2 = a2 | a5\n 29652: a2 = a2 | a3\n 29655: a2 = a2 << 0x20\n 29658: a3 = a2 | a1\n 29661: a1 = u8 [a0 + 0x9]\n 29664: a2 = u8 [a0 + 0x8]\n 29667: a4 = u8 [a0 + 0xa]\n 29670: a5 = u8 [a0 + 0xb]\n 29673: a1 = a1 << 0x8\n 29676: a1 = a1 | a2\n 29679: a4 = a4 << 0x10\n 29682: a5 = a5 << 0x18\n 29685: a4 = a4 | a5\n 29688: a1 = a1 | a4\n 29691: a2 = u8 [a0 + 0xd]\n 29694: a4 = u8 [a0 + 0xc]\n 29697: a5 = u8 [a0 + 0xe]\n 29700: a0 = u8 [a0 + 0xf]\n 29703: a2 = a2 << 0x8\n 29706: a2 = a2 | a4\n 29709: a5 = a5 << 0x10\n 29712: a0 = a0 << 0x18\n 29715: a0 = a0 | a5\n 29718: a0 = a0 | a2\n 29721: a0 = a0 << 0x20\n 29724: a0 = a0 | a1\n 29727: a4 = reverse a0\n 29729: a1 = reverse a3\n 29731: a2 = reverse t1\n 29733: a0 = reverse t0\n 29735: u64 [s1 + 0x118] = a0\n 29739: u64 [s1 + 0x108] = a2\n 29743: a0 = a0 | a2\n 29746: a2 = a1\n 29748: a1 = a1 | a4\n 29751: a1 = a1 | a0\n 29754: a1 = a1 >> 0x20\n 29757: u64 [s1 + 0x110] = a4\n 29761: a0 = a0 | a4\n 29764: a0 = a0 << 0x20\n 29767: a0 = a0 | a1\n 29770: jump @441 if a0 != 0\n      : @427 (gas: 5)\n 29774: u64 [s1 + 0x100] = a2\n 29778: i32 a0 = a2 + 0\n 29780: a1 = 0x20\n 29783: u64 [s1 + 0xf8] = a0\n 29787: ra = 388, jump @0\n      : @428 [@dyn 194] (gas: 51)\n 29793: u8 [a0 + 31] = 0\n 29796: u8 [a0 + 30] = 0\n 29799: u8 [a0 + 29] = 0\n 29802: u8 [a0 + 28] = 0\n 29805: u8 [a0 + 27] = 0\n 29808: u8 [a0 + 26] = 0\n 29811: u8 [a0 + 25] = 0\n 29814: u8 [a0 + 24] = 0\n 29817: u8 [a0 + 23] = 0\n 29820: u8 [a0 + 22] = 0\n 29823: u8 [a0 + 21] = 0\n 29826: u8 [a0 + 20] = 0\n 29829: u8 [a0 + 19] = 0\n 29832: u8 [a0 + 18] = 0\n 29835: u8 [a0 + 17] = 0\n 29838: u8 [a0 + 16] = 0\n 29841: u8 [a0 + 15] = 0\n 29844: u8 [a0 + 14] = 0\n 29847: u8 [a0 + 13] = 0\n 29850: u8 [a0 + 12] = 0\n 29853: u8 [a0 + 11] = 0\n 29856: u8 [a0 + 10] = 0\n 29859: u8 [a0 + 9] = 0\n 29862: u8 [a0 + 8] = 0\n 29865: u8 [a0 + 7] = 0\n 29868: u8 [a0 + 6] = 0\n 29871: u8 [a0 + 5] = 0\n 29874: u8 [a0 + 4] = 0\n 29877: u8 [a0 + 3] = 0xa0\n 29882: u8 [a0 + 2] = 0x79\n 29886: u8 [a0 + 1] = 0xc3\n 29891: u8 [a0 + 0] = 0x8\n 29894: a1 = u64 [s1 + 0x100]\n 29898: a0 = a1 + 0x4\n 29901: a1 = a0 <u a1\n 29904: a3 = u64 [s1 + 0x118]\n 29908: a2 = a3 + a1\n 29911: a3 = a2 <u a3\n 29914: a3 = a1 if a1 == 0\n 29917: a1 = u64 [s1 + 0x110]\n 29921: a3 = a3 + a1\n 29924: a1 = a3 <u a1\n 29927: a4 = u64 [s1 + 0x108]\n 29931: a4 = a4 + a1\n 29934: u64 [s1 + 0x208] = a2\n 29938: u64 [s1 + 0x200] = a0\n 29942: u64 [s1 + 0x210] = a3\n 29946: a0 = s1 + 0x220\n 29950: a1 = s1 + 0x200\n 29954: u64 [s1 + 0x218] = a4\n 29958: ra = 390, jump @311\n      : @429 [@dyn 195] (gas: 5)\n 29964: a0 = u64 [s1 + 0x228]\n 29968: t0 = u64 [s1 + 0x238]\n 29972: t1 = u64 [s1 + 0x220]\n 29976: a3 = u64 [s1 + 0x230]\n 29980: jump @440\n      : @430 (gas: 3)\n 29983: a0 = 0x40\n 29986: a1 = 0x20\n 29989: ra = 392, jump @0\n      : @431 [@dyn 196] (gas: 104)\n 29995: a1 = u8 [a0 + 0x11]\n 29998: a2 = u8 [a0 + 0x10]\n 30001: a3 = u8 [a0 + 0x12]\n 30004: a4 = u8 [a0 + 0x13]\n 30007: a1 = a1 << 0x8\n 30010: a1 = a1 | a2\n 30013: a3 = a3 << 0x10\n 30016: a4 = a4 << 0x18\n 30019: a3 = a3 | a4\n 30022: a1 = a1 | a3\n 30025: a2 = u8 [a0 + 0x15]\n 30028: a3 = u8 [a0 + 0x14]\n 30031: a4 = u8 [a0 + 0x16]\n 30034: a5 = u8 [a0 + 0x17]\n 30037: a2 = a2 << 0x8\n 30040: a2 = a2 | a3\n 30043: a4 = a4 << 0x10\n 30046: a5 = a5 << 0x18\n 30049: a4 = a4 | a5\n 30052: a2 = a2 | a4\n 30055: a2 = a2 << 0x20\n 30058: t0 = a2 | a1\n 30061: a2 = u8 [a0 + 0x1]\n 30064: a3 = u8 [a0]\n 30066: a4 = u8 [a0 + 0x2]\n 30069: a5 = u8 [a0 + 0x3]\n 30072: a2 = a2 << 0x8\n 30075: a2 = a2 | a3\n 30078: a4 = a4 << 0x10\n 30081: a5 = a5 << 0x18\n 30084: a4 = a4 | a5\n 30087: a2 = a2 | a4\n 30090: a3 = u8 [a0 + 0x5]\n 30093: a4 = u8 [a0 + 0x4]\n 30096: a5 = u8 [a0 + 0x6]\n 30099: a1 = u8 [a0 + 0x7]\n 30102: a3 = a3 << 0x8\n 30105: a3 = a3 | a4\n 30108: a5 = a5 << 0x10\n 30111: a1 = a1 << 0x18\n 30114: a1 = a1 | a5\n 30117: a1 = a1 | a3\n 30120: a1 = a1 << 0x20\n 30123: t1 = a1 | a2\n 30126: a1 = u8 [a0 + 0x19]\n 30129: a3 = u8 [a0 + 0x18]\n 30132: a4 = u8 [a0 + 0x1a]\n 30135: a5 = u8 [a0 + 0x1b]\n 30138: a1 = a1 << 0x8\n 30141: a1 = a1 | a3\n 30144: a4 = a4 << 0x10\n 30147: a5 = a5 << 0x18\n 30150: a4 = a4 | a5\n 30153: a1 = a1 | a4\n 30156: a3 = u8 [a0 + 0x1d]\n 30159: a4 = u8 [a0 + 0x1c]\n 30162: a5 = u8 [a0 + 0x1e]\n 30165: a2 = u8 [a0 + 0x1f]\n 30168: a3 = a3 << 0x8\n 30171: a3 = a3 | a4\n 30174: a5 = a5 << 0x10\n 30177: a2 = a2 << 0x18\n 30180: a2 = a2 | a5\n 30183: a2 = a2 | a3\n 30186: a2 = a2 << 0x20\n 30189: a3 = a2 | a1\n 30192: a1 = u8 [a0 + 0x9]\n 30195: a2 = u8 [a0 + 0x8]\n 30198: a4 = u8 [a0 + 0xa]\n 30201: a5 = u8 [a0 + 0xb]\n 30204: a1 = a1 << 0x8\n 30207: a1 = a1 | a2\n 30210: a4 = a4 << 0x10\n 30213: a5 = a5 << 0x18\n 30216: a4 = a4 | a5\n 30219: a1 = a1 | a4\n 30222: a2 = u8 [a0 + 0xd]\n 30225: a4 = u8 [a0 + 0xc]\n 30228: a5 = u8 [a0 + 0xe]\n 30231: a0 = u8 [a0 + 0xf]\n 30234: a2 = a2 << 0x8\n 30237: a2 = a2 | a4\n 30240: a5 = a5 << 0x10\n 30243: a0 = a0 << 0x18\n 30246: a0 = a0 | a5\n 30249: a0 = a0 | a2\n 30252: a0 = a0 << 0x20\n 30255: a0 = a0 | a1\n 30258: a4 = reverse a0\n 30260: a1 = reverse a3\n 30262: a2 = reverse t1\n 30264: a0 = reverse t0\n 30266: u64 [s1 + 0x118] = a0\n 30270: u64 [s1 + 0x108] = a2\n 30274: a0 = a0 | a2\n 30277: a2 = a1\n 30279: a1 = a1 | a4\n 30282: a1 = a1 | a0\n 30285: a1 = a1 >> 0x20\n 30288: u64 [s1 + 0x110] = a4\n 30292: a0 = a0 | a4\n 30295: a0 = a0 << 0x20\n 30298: a0 = a0 | a1\n 30301: jump @441 if a0 != 0\n      : @432 (gas: 5)\n 30305: u64 [s1 + 0x100] = a2\n 30309: i32 a0 = a2 + 0\n 30311: a1 = 0x20\n 30314: u64 [s1 + 0xf8] = a0\n 30318: ra = 394, jump @0\n      : @433 [@dyn 197] (gas: 51)\n 30324: u8 [a0 + 31] = 0\n 30327: u8 [a0 + 30] = 0\n 30330: u8 [a0 + 29] = 0\n 30333: u8 [a0 + 28] = 0\n 30336: u8 [a0 + 27] = 0\n 30339: u8 [a0 + 26] = 0\n 30342: u8 [a0 + 25] = 0\n 30345: u8 [a0 + 24] = 0\n 30348: u8 [a0 + 23] = 0\n 30351: u8 [a0 + 22] = 0\n 30354: u8 [a0 + 21] = 0\n 30357: u8 [a0 + 20] = 0\n 30360: u8 [a0 + 19] = 0\n 30363: u8 [a0 + 18] = 0\n 30366: u8 [a0 + 17] = 0\n 30369: u8 [a0 + 16] = 0\n 30372: u8 [a0 + 15] = 0\n 30375: u8 [a0 + 14] = 0\n 30378: u8 [a0 + 13] = 0\n 30381: u8 [a0 + 12] = 0\n 30384: u8 [a0 + 11] = 0\n 30387: u8 [a0 + 10] = 0\n 30390: u8 [a0 + 9] = 0\n 30393: u8 [a0 + 8] = 0\n 30396: u8 [a0 + 7] = 0\n 30399: u8 [a0 + 6] = 0\n 30402: u8 [a0 + 5] = 0\n 30405: u8 [a0 + 4] = 0\n 30408: u8 [a0 + 3] = 0xa0\n 30413: u8 [a0 + 2] = 0x79\n 30417: u8 [a0 + 1] = 0xc3\n 30422: u8 [a0 + 0] = 0x8\n 30425: a1 = u64 [s1 + 0x100]\n 30429: a0 = a1 + 0x4\n 30432: a1 = a0 <u a1\n 30435: a3 = u64 [s1 + 0x118]\n 30439: a2 = a3 + a1\n 30442: a3 = a2 <u a3\n 30445: a3 = a1 if a1 == 0\n 30448: a1 = u64 [s1 + 0x110]\n 30452: a3 = a3 + a1\n 30455: a1 = a3 <u a1\n 30458: a4 = u64 [s1 + 0x108]\n 30462: a4 = a4 + a1\n 30465: u64 [s1 + 0x1c8] = a2\n 30469: u64 [s1 + 0x1c0] = a0\n 30473: u64 [s1 + 0x1d0] = a3\n 30477: a0 = s1 + 0x1e0\n 30481: a1 = s1 + 0x1c0\n 30485: u64 [s1 + 0x1d8] = a4\n 30489: ra = 396, jump @319\n      : @434 [@dyn 198] (gas: 5)\n 30495: a0 = u64 [s1 + 0x1e8]\n 30499: t0 = u64 [s1 + 0x1f8]\n 30503: t1 = u64 [s1 + 0x1e0]\n 30507: a3 = u64 [s1 + 0x1f0]\n 30511: jump @440\n      : @435 (gas: 3)\n 30514: a0 = 0x40\n 30517: a1 = 0x20\n 30520: ra = 398, jump @0\n      : @436 [@dyn 199] (gas: 104)\n 30526: a1 = u8 [a0 + 0x11]\n 30529: a2 = u8 [a0 + 0x10]\n 30532: a3 = u8 [a0 + 0x12]\n 30535: a4 = u8 [a0 + 0x13]\n 30538: a1 = a1 << 0x8\n 30541: a1 = a1 | a2\n 30544: a3 = a3 << 0x10\n 30547: a4 = a4 << 0x18\n 30550: a3 = a3 | a4\n 30553: a1 = a1 | a3\n 30556: a2 = u8 [a0 + 0x15]\n 30559: a3 = u8 [a0 + 0x14]\n 30562: a4 = u8 [a0 + 0x16]\n 30565: a5 = u8 [a0 + 0x17]\n 30568: a2 = a2 << 0x8\n 30571: a2 = a2 | a3\n 30574: a4 = a4 << 0x10\n 30577: a5 = a5 << 0x18\n 30580: a4 = a4 | a5\n 30583: a2 = a2 | a4\n 30586: a2 = a2 << 0x20\n 30589: t0 = a2 | a1\n 30592: a2 = u8 [a0 + 0x1]\n 30595: a3 = u8 [a0]\n 30597: a4 = u8 [a0 + 0x2]\n 30600: a5 = u8 [a0 + 0x3]\n 30603: a2 = a2 << 0x8\n 30606: a2 = a2 | a3\n 30609: a4 = a4 << 0x10\n 30612: a5 = a5 << 0x18\n 30615: a4 = a4 | a5\n 30618: a2 = a2 | a4\n 30621: a3 = u8 [a0 + 0x5]\n 30624: a4 = u8 [a0 + 0x4]\n 30627: a5 = u8 [a0 + 0x6]\n 30630: a1 = u8 [a0 + 0x7]\n 30633: a3 = a3 << 0x8\n 30636: a3 = a3 | a4\n 30639: a5 = a5 << 0x10\n 30642: a1 = a1 << 0x18\n 30645: a1 = a1 | a5\n 30648: a1 = a1 | a3\n 30651: a1 = a1 << 0x20\n 30654: t1 = a1 | a2\n 30657: a1 = u8 [a0 + 0x19]\n 30660: a3 = u8 [a0 + 0x18]\n 30663: a4 = u8 [a0 + 0x1a]\n 30666: a5 = u8 [a0 + 0x1b]\n 30669: a1 = a1 << 0x8\n 30672: a1 = a1 | a3\n 30675: a4 = a4 << 0x10\n 30678: a5 = a5 << 0x18\n 30681: a4 = a4 | a5\n 30684: a1 = a1 | a4\n 30687: a3 = u8 [a0 + 0x1d]\n 30690: a4 = u8 [a0 + 0x1c]\n 30693: a5 = u8 [a0 + 0x1e]\n 30696: a2 = u8 [a0 + 0x1f]\n 30699: a3 = a3 << 0x8\n 30702: a3 = a3 | a4\n 30705: a5 = a5 << 0x10\n 30708: a2 = a2 << 0x18\n 30711: a2 = a2 | a5\n 30714: a2 = a2 | a3\n 30717: a2 = a2 << 0x20\n 30720: a3 = a2 | a1\n 30723: a1 = u8 [a0 + 0x9]\n 30726: a2 = u8 [a0 + 0x8]\n 30729: a4 = u8 [a0 + 0xa]\n 30732: a5 = u8 [a0 + 0xb]\n 30735: a1 = a1 << 0x8\n 30738: a1 = a1 | a2\n 30741: a4 = a4 << 0x10\n 30744: a5 = a5 << 0x18\n 30747: a4 = a4 | a5\n 30750: a1 = a1 | a4\n 30753: a2 = u8 [a0 + 0xd]\n 30756: a4 = u8 [a0 + 0xc]\n 30759: a5 = u8 [a0 + 0xe]\n 30762: a0 = u8 [a0 + 0xf]\n 30765: a2 = a2 << 0x8\n 30768: a2 = a2 | a4\n 30771: a5 = a5 << 0x10\n 30774: a0 = a0 << 0x18\n 30777: a0 = a0 | a5\n 30780: a0 = a0 | a2\n 30783: a0 = a0 << 0x20\n 30786: a0 = a0 | a1\n 30789: a4 = reverse a0\n 30791: a1 = reverse a3\n 30793: a2 = reverse t1\n 30795: a0 = reverse t0\n 30797: u64 [s1 + 0x118] = a0\n 30801: u64 [s1 + 0x108] = a2\n 30805: a0 = a0 | a2\n 30808: a2 = a1\n 30810: a1 = a1 | a4\n 30813: a1 = a1 | a0\n 30816: a1 = a1 >> 0x20\n 30819: u64 [s1 + 0x110] = a4\n 30823: a0 = a0 | a4\n 30826: a0 = a0 << 0x20\n 30829: a0 = a0 | a1\n 30832: jump @441 if a0 != 0\n      : @437 (gas: 5)\n 30836: u64 [s1 + 0x100] = a2\n 30840: i32 a0 = a2 + 0\n 30842: a1 = 0x20\n 30845: u64 [s1 + 0xf8] = a0\n 30849: ra = 400, jump @0\n      : @438 [@dyn 200] (gas: 51)\n 30855: u8 [a0 + 31] = 0\n 30858: u8 [a0 + 30] = 0\n 30861: u8 [a0 + 29] = 0\n 30864: u8 [a0 + 28] = 0\n 30867: u8 [a0 + 27] = 0\n 30870: u8 [a0 + 26] = 0\n 30873: u8 [a0 + 25] = 0\n 30876: u8 [a0 + 24] = 0\n 30879: u8 [a0 + 23] = 0\n 30882: u8 [a0 + 22] = 0\n 30885: u8 [a0 + 21] = 0\n 30888: u8 [a0 + 20] = 0\n 30891: u8 [a0 + 19] = 0\n 30894: u8 [a0 + 18] = 0\n 30897: u8 [a0 + 17] = 0\n 30900: u8 [a0 + 16] = 0\n 30903: u8 [a0 + 15] = 0\n 30906: u8 [a0 + 14] = 0\n 30909: u8 [a0 + 13] = 0\n 30912: u8 [a0 + 12] = 0\n 30915: u8 [a0 + 11] = 0\n 30918: u8 [a0 + 10] = 0\n 30921: u8 [a0 + 9] = 0\n 30924: u8 [a0 + 8] = 0\n 30927: u8 [a0 + 7] = 0\n 30930: u8 [a0 + 6] = 0\n 30933: u8 [a0 + 5] = 0\n 30936: u8 [a0 + 4] = 0\n 30939: u8 [a0 + 3] = 0xa0\n 30944: u8 [a0 + 2] = 0x79\n 30948: u8 [a0 + 1] = 0xc3\n 30953: u8 [a0 + 0] = 0x8\n 30956: a1 = u64 [s1 + 0x100]\n 30960: a0 = a1 + 0x4\n 30963: a1 = a0 <u a1\n 30966: a3 = u64 [s1 + 0x118]\n 30970: a2 = a3 + a1\n 30973: a3 = a2 <u a3\n 30976: a3 = a1 if a1 == 0\n 30979: a1 = u64 [s1 + 0x110]\n 30983: a3 = a3 + a1\n 30986: a1 = a3 <u a1\n 30989: a4 = u64 [s1 + 0x108]\n 30993: a4 = a4 + a1\n 30996: u64 [s1 + 0x168] = a2\n 31000: u64 [s1 + 0x160] = a0\n 31004: u64 [s1 + 0x170] = a3\n 31008: a0 = s1 + 0x180\n 31012: a1 = s1 + 0x160\n 31016: u64 [s1 + 0x178] = a4\n 31020: ra = 402, jump @365\n      : @439 [@dyn 201] (gas: 5)\n 31026: a0 = u64 [s1 + 0x188]\n 31030: t0 = u64 [s1 + 0x198]\n 31034: t1 = u64 [s1 + 0x180]\n 31038: a3 = u64 [s1 + 0x190]\n 31042: fallthrough\n      : @440 (gas: 27)\n 31043: a1 = u64 [s1 + 0x118]\n 31047: a4 = a0 ^ a1\n 31050: a5 = a0 <u a1\n 31053: ra = a1\n 31055: t2 = u64 [s1 + 0x100]\n 31059: a1 = t1 <u t2\n 31062: a5 = a1 if a4 == 0\n 31065: a2 = u64 [s1 + 0x110]\n 31069: a4 = a3 - a2\n 31072: a3 = a3 <u a2\n 31075: a2 = u64 [s1 + 0x108]\n 31079: a2 = t0 - a2\n 31082: a2 = a2 - a3\n 31085: a3 = a4 <u a5\n 31088: a2 = a2 - a3\n 31091: a4 = a4 - a5\n 31094: a0 = a0 - ra\n 31097: a1 = a0 - a1\n 31100: a0 = t1 - t2\n 31103: a1 = a1 | a2\n 31106: a2 = a0 | a4\n 31109: a2 = a2 | a1\n 31112: a1 = a1 | a4\n 31115: a2 = a2 >> 0x20\n 31118: a1 = a1 << 0x20\n 31121: a1 = a1 | a2\n 31124: jump @449 if a1 == 0\n      : @441 (gas: 1)\n 31127: trap\n      : @442 (gas: 1)\n 31128: ra = 404, jump @375\n      : @443 [@dyn 202] (gas: 8)\n 31134: u64 [s1 + 336] = 0\n 31138: u64 [s1 + 328] = 0\n 31142: u64 [s1 + 320] = 0\n 31146: a0 = 0x4e487b7100000000\n 31156: a1 = s1 + 0x140\n 31160: u64 [s1 + 0x158] = a0\n 31164: a0 = 0\n 31166: ra = 406, jump @8\n      : @444 [@dyn 203] (gas: 7)\n 31172: u64 [s1 + 312] = 0\n 31176: u64 [s1 + 304] = 0\n 31180: u64 [s1 + 288] = 0x11\n 31185: a0 = 0x4\n 31188: a1 = s1 + 0x120\n 31192: u64 [s1 + 296] = 0\n 31196: ra = 408, jump @8\n      : @445 [@dyn 204] (gas: 3)\n 31202: a1 = 0x24\n 31205: a0 = 0\n 31207: ra = 410, jump @0\n      : @446 [@dyn 205] (gas: 7)\n 31213: i32 a1 = a0 + 0\n 31215: a0 = 0x1\n 31218: a2 = 0x24\n 31221: ecalli 14 // 'seal_return'\n 31223: a1 = 0\n 31225: ra = 0x19c\n 31229: jump @0\n      : @447 (gas: 2)\n 31232: a1 = 0\n 31234: ra = 412, jump @0\n      : @448 [@dyn 206] (gas: 5)\n 31240: i32 a1 = a0 + 0\n 31242: a0 = 0x1\n 31245: a2 = 0\n 31247: ecalli 14 // 'seal_return'\n 31249: fallthrough\n      : @449 (gas: 4)\n 31250: i32 a1 = a0 + 0\n 31252: u64 [s1 + 0x118] = a1\n 31256: a0 = u64 [s1 + 0xf8]\n 31260: ra = 414, jump @0\n      : @450 [@dyn 207] (gas: 6)\n 31266: i32 a1 = a0 + 0\n 31268: a0 = 0x1\n 31271: a2 = u64 [s1 + 0x118]\n 31275: ra = 0x1a0\n 31279: ecalli 14 // 'seal_return'\n 31281: fallthrough\n      : @451 [@dyn 208] (gas: 9)\n 31282: a2 = u64 [a1 + 0x18]\n 31285: a3 = u64 [a1 + 0x10]\n 31288: a4 = u64 [a1 + 0x8]\n 31291: a1 = u64 [a1]\n 31293: u64 [a0 + 0x18] = a2\n 31296: u64 [a0 + 0x10] = a3\n 31299: u64 [a0 + 0x8] = a4\n 31302: u64 [a0] = a1\n 31304: ret\n      : @452 (gas: 7)\n 31306: a4 = u64 [sp + 0x218]\n 31310: a3 = u64 [sp + 0x210]\n 31314: a2 = u64 [sp + 0x208]\n 31318: a0 = a3 | a4\n 31321: a1 = a2 <u 0x1\n 31324: a1 = 0 if a0 != 0\n 31326: jump @455 if a1 == 0\n      : @453 (gas: 50)\n 31330: a0 = u64 [sp + 0x200]\n 31334: u64 [sp + 0x58] = a0\n 31337: a0 = a0 + 0x1\n 31340: a1 = a0 <u 0x1\n 31343: a1 = a1 + a2\n 31346: u64 [sp + 0x200] = a0\n 31350: a0 = a0 | a1\n 31353: u64 [sp + 0x208] = a1\n 31357: a0 = a0 <u 0x1\n 31360: a0 = a0 + a3\n 31363: u64 [sp + 0x210] = a0\n 31367: a0 = a0 <u a3\n 31370: a0 = a0 + a4\n 31373: u64 [sp + 0x218] = a0\n 31377: a0 = u64 [sp + 0x70]\n 31380: u64 [sp + 0x1e8] = a0\n 31384: a0 = u64 [sp + 0x78]\n 31387: u64 [sp + 0x1e0] = a0\n 31391: a0 = u64 [sp + 0x68]\n 31394: u64 [sp + 0x1f0] = a0\n 31398: s1 = u64 [sp + 0x60]\n 31401: u64 [sp + 0x1f8] = s1\n 31405: i32 a1 = sp + 0x1e0\n 31409: u64 [sp + 0x50] = a3\n 31412: i32 a3 = sp + 0x200\n 31416: u64 [sp + 0x48] = a2\n 31419: a2 = 0xffffffffffffffff\n 31422: u64 [sp + 0x40] = a4\n 31425: a4 = 0x20\n 31428: a0 = 0\n 31430: ecalli 16 // 'set_storage'\n 31432: a0 = u64 [sp + 0x40]\n 31435: u64 [sp + 0x158] = a0\n 31439: a0 = u64 [sp + 0x50]\n 31442: u64 [sp + 0x150] = a0\n 31446: a0 = u64 [sp + 0x48]\n 31449: u64 [sp + 0x148] = a0\n 31453: a0 = u64 [sp + 0x58]\n 31456: u64 [sp + 0x140] = a0\n 31460: u64 [sp + 0x178] = s1\n 31464: a0 = u64 [sp + 0x68]\n 31467: u64 [sp + 0x170] = a0\n 31471: a0 = u64 [sp + 0x70]\n 31474: u64 [sp + 0x168] = a0\n 31478: a0 = sp + 0x180\n 31482: a1 = sp + 0x160\n 31486: a2 = sp + 0x140\n 31490: a3 = u64 [sp + 0x78]\n 31493: u64 [sp + 0x160] = a3\n 31497: ra = 418, jump @75\n      : @454 [@dyn 209] (gas: 444)\n 31503: a0 = u64 [sp + 0x1b8]\n 31507: u64 [sp + 0x58] = a0\n 31510: a0 = u64 [sp + 0x1b0]\n 31514: u64 [sp + 0x50] = a0\n 31517: s1 = u64 [sp + 0x1a8]\n 31521: a0 = u64 [sp + 0x1a0]\n 31525: u64 [sp + 0x20] = a0\n 31528: a3 = u64 [sp + 0x198]\n 31532: u64 [sp + 0x60] = a3\n 31535: a2 = u64 [sp + 0x190]\n 31539: u64 [sp + 0x68] = a2\n 31542: a1 = u64 [sp + 0x188]\n 31546: u64 [sp + 0x70] = a1\n 31549: a0 = u64 [sp + 0x180]\n 31553: u64 [sp + 0x78] = a0\n 31556: u64 [sp + 0x1f8] = a3\n 31560: u64 [sp + 0x1f0] = a2\n 31564: u64 [sp + 0x1e8] = a1\n 31568: u64 [sp + 0x1e0] = a0\n 31572: u64 [sp + 536] = 0\n 31576: u64 [sp + 528] = 0\n 31580: u64 [sp + 520] = 0\n 31584: u64 [sp + 512] = 0\n 31588: u32 [sp + 448] = 0x20\n 31593: i32 a1 = sp + 0x1e0\n 31597: i32 a3 = sp + 0x200\n 31601: i32 a4 = sp + 0x1c0\n 31605: a2 = 0xffffffffffffffff\n 31608: a0 = 0\n 31610: ecalli 7 // 'get_storage'\n 31612: a2 = u64 [sp + 0x20]\n 31615: a0 = a2 >> 0x3d\n 31618: a1 = s1 << 0x3\n 31621: a0 = a0 | a1\n 31624: a1 = a2 << 0x3\n 31627: a1 = a1 <u 0x100\n 31631: t1 = a1 ^ 0x1\n 31634: a1 = a0 >u 0\n 31636: t1 = a1 if a0 != 0\n 31639: s1 = s1 >> 0x3d\n 31642: a1 = u64 [sp + 0x50]\n 31645: a0 = a1 << 0x3\n 31648: a0 = a0 | s1\n 31651: a1 = a1 >> 0x3d\n 31654: a3 = u64 [sp + 0x58]\n 31657: a3 = a3 << 0x3\n 31660: a1 = a1 | a3\n 31663: a3 = a1 >u 0\n 31665: a4 = a0 >u 0\n 31667: a4 = a3 if a1 != 0\n 31670: a0 = a0 | a1\n 31673: t1 = a4 if a0 != 0\n 31676: a0 = u64 [sp + 0x200]\n 31680: u64 [sp + 0x58] = a0\n 31683: a0 = u64 [sp + 0x208]\n 31687: u64 [sp + 0x50] = a0\n 31690: a0 = u64 [sp + 0x210]\n 31694: u64 [sp + 0x48] = a0\n 31697: a0 = u64 [sp + 0x218]\n 31701: u64 [sp + 0x40] = a0\n 31704: u8 [sp + 307] = 0xff\n 31710: u8 [sp + 303] = 0xff\n 31716: u8 [sp + 302] = 0xff\n 31722: u8 [sp + 301] = 0xff\n 31728: u8 [sp + 299] = 0xff\n 31734: u8 [sp + 295] = 0xff\n 31740: u8 [sp + 294] = 0xff\n 31746: u8 [sp + 293] = 0xff\n 31752: u8 [sp + 291] = 0xff\n 31758: a0 = 0xffffffff\n 31768: u8 [sp + 0x12c] = a0\n 31772: u8 [sp + 0x124] = a0\n 31776: a0 = 0xffffffffffff\n 31786: u8 [sp + 0x132] = a0\n 31790: u8 [sp + 0x12a] = a0\n 31794: u8 [sp + 0x122] = a0\n 31798: u8 [sp + 304] = 0xffffffffffffffff\n 31803: u8 [sp + 296] = 0xffffffffffffffff\n 31808: u8 [sp + 288] = 0xffffffffffffffff\n 31813: a0 = 0xffffffffffffff\n 31823: u8 [sp + 0x131] = a0\n 31827: u8 [sp + 0x129] = a0\n 31831: u8 [sp + 0x121] = a0\n 31835: u8 [sp + 319] = 0\n 31839: u8 [sp + 318] = 0\n 31843: u8 [sp + 317] = 0\n 31847: u8 [sp + 316] = 0\n 31851: u8 [sp + 315] = 0\n 31855: u8 [sp + 314] = 0\n 31859: u8 [sp + 313] = 0\n 31863: u8 [sp + 312] = 0\n 31867: u8 [sp + 311] = 0\n 31871: u8 [sp + 310] = 0\n 31875: u8 [sp + 309] = 0\n 31879: u8 [sp + 308] = 0\n 31883: u8 [sp + 287] = 0\n 31887: u8 [sp + 286] = 0\n 31891: u8 [sp + 285] = 0\n 31895: u8 [sp + 284] = 0\n 31899: u8 [sp + 283] = 0\n 31903: u8 [sp + 282] = 0\n 31907: u8 [sp + 281] = 0\n 31911: u8 [sp + 280] = 0\n 31915: u8 [sp + 279] = 0\n 31919: u8 [sp + 278] = 0\n 31923: u8 [sp + 277] = 0\n 31927: u8 [sp + 276] = 0\n 31931: u8 [sp + 275] = 0\n 31935: u8 [sp + 274] = 0\n 31939: u8 [sp + 273] = 0\n 31943: u8 [sp + 272] = 0\n 31947: u8 [sp + 271] = 0\n 31951: u8 [sp + 270] = 0\n 31955: u8 [sp + 269] = 0\n 31959: u8 [sp + 268] = 0\n 31963: u8 [sp + 267] = 0\n 31967: u8 [sp + 266] = 0\n 31971: u8 [sp + 265] = 0\n 31975: u8 [sp + 264] = 0\n 31979: u8 [sp + 263] = 0\n 31983: u8 [sp + 262] = 0\n 31987: u8 [sp + 261] = 0\n 31991: u8 [sp + 260] = 0\n 31995: u8 [sp + 259] = 0\n 31999: u8 [sp + 258] = 0\n 32003: u8 [sp + 257] = 0\n 32007: u8 [sp + 256] = 0\n 32011: a4 = a2 & 0x1f\n 32014: a3 = sp + 0x120\n 32018: a3 = a3 - a4\n 32021: a0 = u8 [a3 + 0x19]\n 32024: a1 = u8 [a3 + 0x18]\n 32027: a5 = u8 [a3 + 0x1a]\n 32030: s1 = u8 [a3 + 0x1b]\n 32033: a0 = a0 << 0x8\n 32036: a0 = a0 | a1\n 32039: a5 = a5 << 0x10\n 32042: s1 = s1 << 0x18\n 32045: a5 = a5 | s1\n 32048: t0 = a5 | a0\n 32051: a1 = u8 [a3 + 0x1d]\n 32054: a5 = u8 [a3 + 0x1c]\n 32057: s1 = u8 [a3 + 0x1e]\n 32060: a0 = u8 [a3 + 0x1f]\n 32063: a1 = a1 << 0x8\n 32066: a1 = a1 | a5\n 32069: s1 = s1 << 0x10\n 32072: a0 = a0 << 0x18\n 32075: a0 = a0 | s1\n 32078: a0 = a0 | a1\n 32081: a0 = a0 << 0x20\n 32084: a0 = a0 | t0\n 32087: u64 [sp + 0x20] = a0\n 32090: a0 = u8 [a3 + 0x11]\n 32093: a1 = u8 [a3 + 0x10]\n 32096: a5 = u8 [a3 + 0x12]\n 32099: s1 = u8 [a3 + 0x13]\n 32102: a0 = a0 << 0x8\n 32105: a0 = a0 | a1\n 32108: a5 = a5 << 0x10\n 32111: s1 = s1 << 0x18\n 32114: a5 = a5 | s1\n 32117: t0 = a5 | a0\n 32120: a1 = u8 [a3 + 0x15]\n 32123: a5 = u8 [a3 + 0x14]\n 32126: s1 = u8 [a3 + 0x16]\n 32129: a0 = u8 [a3 + 0x17]\n 32132: a1 = a1 << 0x8\n 32135: a1 = a1 | a5\n 32138: s1 = s1 << 0x10\n 32141: a0 = a0 << 0x18\n 32144: a0 = a0 | s1\n 32147: a0 = a0 | a1\n 32150: a0 = a0 << 0x20\n 32153: a0 = a0 | t0\n 32156: u64 [sp + 0x18] = a0\n 32159: a0 = u8 [a3 + 0x9]\n 32162: a1 = u8 [a3 + 0x8]\n 32165: a5 = u8 [a3 + 0xa]\n 32168: s1 = u8 [a3 + 0xb]\n 32171: a0 = a0 << 0x8\n 32174: a0 = a0 | a1\n 32177: a5 = a5 << 0x10\n 32180: s1 = s1 << 0x18\n 32183: a5 = a5 | s1\n 32186: a2 = a5 | a0\n 32189: a1 = u8 [a3 + 0xd]\n 32192: a5 = u8 [a3 + 0xc]\n 32195: s1 = u8 [a3 + 0xe]\n 32198: a0 = u8 [a3 + 0xf]\n 32201: a1 = a1 << 0x8\n 32204: a1 = a1 | a5\n 32207: s1 = s1 << 0x10\n 32210: a0 = a0 << 0x18\n 32213: a0 = a0 | s1\n 32216: a0 = a0 | a1\n 32219: a0 = a0 << 0x20\n 32222: ra = a0 | a2\n 32225: a0 = u8 [a3 + 0x1]\n 32228: a1 = u8 [a3]\n 32230: a2 = u8 [a3 + 0x2]\n 32233: s1 = u8 [a3 + 0x3]\n 32236: a0 = a0 << 0x8\n 32239: a0 = a0 | a1\n 32242: a2 = a2 << 0x10\n 32245: s1 = s1 << 0x18\n 32248: a2 = a2 | s1\n 32251: a0 = a0 | a2\n 32254: a1 = u8 [a3 + 0x5]\n 32257: a2 = u8 [a3 + 0x4]\n 32260: s1 = u8 [a3 + 0x6]\n 32263: a3 = u8 [a3 + 0x7]\n 32266: a1 = a1 << 0x8\n 32269: a1 = a1 | a2\n 32272: s1 = s1 << 0x10\n 32275: a3 = a3 << 0x18\n 32278: a3 = a3 | s1\n 32281: a1 = a1 | a3\n 32284: a1 = a1 << 0x20\n 32287: t2 = a1 | a0\n 32290: a1 = u64 [sp + 0x28]\n 32293: a0 = a1 >> 0x38\n 32296: u8 [sp + 0xe7] = a0\n 32300: a0 = a1 >> 0x30\n 32303: u8 [sp + 0xe6] = a0\n 32307: a0 = a1 >> 0x28\n 32310: u8 [sp + 0xe5] = a0\n 32314: a0 = a1 >> 0x20\n 32317: u8 [sp + 0xe4] = a0\n 32321: a0 = a1 >> 0x18\n 32324: u8 [sp + 0xe3] = a0\n 32328: a0 = a1 >> 0x10\n 32331: u8 [sp + 0xe2] = a0\n 32335: u8 [sp + 0xe0] = a1\n 32339: a0 = a1 >> 0x8\n 32342: u8 [sp + 0xe1] = a0\n 32346: a1 = u64 [sp + 0x30]\n 32349: a0 = a1 >> 0x38\n 32352: u8 [sp + 0xef] = a0\n 32356: a0 = a1 >> 0x30\n 32359: u8 [sp + 0xee] = a0\n 32363: a0 = a1 >> 0x28\n 32366: u8 [sp + 0xed] = a0\n 32370: a0 = a1 >> 0x20\n 32373: u8 [sp + 0xec] = a0\n 32377: a0 = a1 >> 0x18\n 32380: u8 [sp + 0xeb] = a0\n 32384: a0 = a1 >> 0x10\n 32387: u8 [sp + 0xea] = a0\n 32391: u8 [sp + 0xe8] = a1\n 32395: a0 = a1 >> 0x8\n 32398: u8 [sp + 0xe9] = a0\n 32402: a1 = u64 [sp + 0x38]\n 32405: a0 = a1 >> 0x18\n 32408: u8 [sp + 0xf3] = a0\n 32412: a0 = a1 >> 0x10\n 32415: u8 [sp + 0xf2] = a0\n 32419: u8 [sp + 0xf0] = a1\n 32423: a0 = a1 >> 0x8\n 32426: u8 [sp + 0xf1] = a0\n 32430: a0 = sp + 0xe0\n 32434: a4 = a0 - a4\n 32437: u8 [sp + 255] = 0\n 32441: u8 [sp + 254] = 0\n 32445: u8 [sp + 253] = 0\n 32449: u8 [sp + 252] = 0\n 32453: u8 [sp + 251] = 0\n 32457: u8 [sp + 250] = 0\n 32461: u8 [sp + 249] = 0\n 32465: u8 [sp + 248] = 0\n 32469: u8 [sp + 247] = 0\n 32473: u8 [sp + 246] = 0\n 32477: u8 [sp + 245] = 0\n 32481: u8 [sp + 244] = 0\n 32485: u8 [sp + 223] = 0\n 32489: u8 [sp + 222] = 0\n 32493: u8 [sp + 221] = 0\n 32497: u8 [sp + 220] = 0\n 32501: u8 [sp + 219] = 0\n 32505: u8 [sp + 218] = 0\n 32509: u8 [sp + 217] = 0\n 32513: u8 [sp + 216] = 0\n 32517: u8 [sp + 215] = 0\n 32521: u8 [sp + 214] = 0\n 32525: u8 [sp + 213] = 0\n 32529: u8 [sp + 212] = 0\n 32533: u8 [sp + 211] = 0\n 32537: u8 [sp + 210] = 0\n 32541: u8 [sp + 209] = 0\n 32545: u8 [sp + 208] = 0\n 32549: u8 [sp + 207] = 0\n 32553: u8 [sp + 206] = 0\n 32557: u8 [sp + 205] = 0\n 32561: u8 [sp + 204] = 0\n 32565: u8 [sp + 203] = 0\n 32569: u8 [sp + 202] = 0\n 32573: u8 [sp + 201] = 0\n 32577: u8 [sp + 200] = 0\n 32581: u8 [sp + 199] = 0\n 32585: u8 [sp + 198] = 0\n 32589: u8 [sp + 197] = 0\n 32593: u8 [sp + 196] = 0\n 32597: u8 [sp + 195] = 0\n 32601: u8 [sp + 194] = 0\n 32605: u8 [sp + 193] = 0\n 32609: u8 [sp + 192] = 0\n 32613: a0 = u8 [a4 + 0x19]\n 32616: a1 = u8 [a4 + 0x18]\n 32619: a2 = u8 [a4 + 0x1a]\n 32622: s1 = u8 [a4 + 0x1b]\n 32625: a0 = a0 << 0x8\n 32628: a0 = a0 | a1\n 32631: a2 = a2 << 0x10\n 32634: s1 = s1 << 0x18\n 32637: a2 = a2 | s1\n 32640: a3 = a2 | a0\n 32643: a1 = u8 [a4 + 0x1d]\n 32646: a2 = u8 [a4 + 0x1c]\n 32649: s1 = u8 [a4 + 0x1e]\n 32652: a0 = u8 [a4 + 0x1f]\n 32655: a1 = a1 << 0x8\n 32658: a1 = a1 | a2\n 32661: s1 = s1 << 0x10\n 32664: a0 = a0 << 0x18\n 32667: a0 = a0 | s1\n 32670: a0 = a0 | a1\n 32673: a0 = a0 << 0x20\n 32676: s1 = a0 | a3\n 32679: a0 = u8 [a4 + 0x11]\n 32682: a1 = u8 [a4 + 0x10]\n 32685: a2 = u8 [a4 + 0x12]\n 32688: a3 = u8 [a4 + 0x13]\n 32691: a0 = a0 << 0x8\n 32694: a0 = a0 | a1\n 32697: a2 = a2 << 0x10\n 32700: a3 = a3 << 0x18\n 32703: a2 = a2 | a3\n 32706: a5 = a2 | a0\n 32709: a1 = u8 [a4 + 0x15]\n 32712: a2 = u8 [a4 + 0x14]\n 32715: a3 = u8 [a4 + 0x16]\n 32718: a0 = u8 [a4 + 0x17]\n 32721: a1 = a1 << 0x8\n 32724: a1 = a1 | a2\n 32727: a3 = a3 << 0x10\n 32730: a0 = a0 << 0x18\n 32733: a0 = a0 | a3\n 32736: a0 = a0 | a1\n 32739: a0 = a0 << 0x20\n 32742: t0 = a0 | a5\n 32745: a0 = u8 [a4 + 0x9]\n 32748: a2 = u8 [a4 + 0x8]\n 32751: a3 = u8 [a4 + 0xa]\n 32754: a5 = u8 [a4 + 0xb]\n 32757: a0 = a0 << 0x8\n 32760: a0 = a0 | a2\n 32763: a3 = a3 << 0x10\n 32766: a5 = a5 << 0x18\n 32769: a3 = a3 | a5\n 32772: a1 = a3 | a0\n 32775: a2 = u8 [a4 + 0xd]\n 32778: a3 = u8 [a4 + 0xc]\n 32781: a5 = u8 [a4 + 0xe]\n 32784: a0 = u8 [a4 + 0xf]\n 32787: a2 = a2 << 0x8\n 32790: a2 = a2 | a3\n 32793: a5 = a5 << 0x10\n 32796: a0 = a0 << 0x18\n 32799: a0 = a0 | a5\n 32802: a0 = a0 | a2\n 32805: a0 = a0 << 0x20\n 32808: a0 = a0 | a1\n 32811: a1 = u8 [a4 + 0x1]\n 32814: a2 = u8 [a4]\n 32816: a3 = u8 [a4 + 0x2]\n 32819: a5 = u8 [a4 + 0x3]\n 32822: a1 = a1 << 0x8\n 32825: a1 = a1 | a2\n 32828: a3 = a3 << 0x10\n 32831: a5 = a5 << 0x18\n 32834: a3 = a3 | a5\n 32837: a1 = a1 | a3\n 32840: a2 = u8 [a4 + 0x5]\n 32843: a3 = u8 [a4 + 0x4]\n 32846: a5 = u8 [a4 + 0x6]\n 32849: a4 = u8 [a4 + 0x7]\n 32852: a2 = a2 << 0x8\n 32855: a2 = a2 | a3\n 32858: a5 = a5 << 0x10\n 32861: a4 = a4 << 0x18\n 32864: a4 = a4 | a5\n 32867: a2 = a2 | a4\n 32870: a2 = a2 << 0x20\n 32873: a4 = a2 | a1\n 32876: t2 = 0 if t1 != 0\n 32878: ra = 0 if t1 != 0\n 32880: a5 = u64 [sp + 0x18]\n 32883: a5 = 0 if t1 != 0\n 32885: a2 = u64 [sp + 0x20]\n 32888: a2 = 0 if t1 != 0\n 32890: a4 = 0 if t1 != 0\n 32892: a0 = 0 if t1 != 0\n 32894: t0 = 0 if t1 != 0\n 32896: s1 = 0 if t1 != 0\n 32898: a1 = u64 [sp + 0x40]\n 32901: t1 = a1 & ~a2\n 32904: a2 = a2 & s1\n 32907: a1 = u64 [sp + 0x48]\n 32910: a3 = a1 & ~a5\n 32913: a5 = t0 & a5\n 32916: a1 = u64 [sp + 0x50]\n 32919: s1 = a1 & ~ra\n 32922: a0 = a0 & ra\n 32925: a1 = u64 [sp + 0x58]\n 32928: a1 = a1 & ~t2\n 32931: a4 = a4 & t2\n 32934: a1 = a1 | a4\n 32937: a0 = a0 | s1\n 32940: a3 = a3 | a5\n 32943: a2 = t1 | a2\n 32946: a4 = u64 [sp + 0x60]\n 32949: u64 [sp + 0x1f8] = a4\n 32953: a4 = u64 [sp + 0x68]\n 32956: u64 [sp + 0x1f0] = a4\n 32960: a4 = u64 [sp + 0x70]\n 32963: u64 [sp + 0x1e8] = a4\n 32967: a4 = u64 [sp + 0x78]\n 32970: u64 [sp + 0x1e0] = a4\n 32974: u64 [sp + 0x218] = a2\n 32978: u64 [sp + 0x210] = a3\n 32982: u64 [sp + 0x208] = a0\n 32986: u64 [sp + 0x200] = a1\n 32990: i32 a1 = sp + 0x1e0\n 32994: i32 a3 = sp + 0x200\n 32998: a2 = 0xffffffffffffffff\n 33001: a4 = 0x20\n 33004: a0 = 0\n 33006: ecalli 16 // 'set_storage'\n 33008: sp = s0 + 0xfffffffffffffdc0\n 33012: ra = u64 [sp + 0x238]\n 33016: s0 = u64 [sp + 0x230]\n 33020: s1 = u64 [sp + 0x228]\n 33024: sp = sp + 0x240\n 33028: ret\n      : @455 (gas: 8)\n 33030: u64 [sp + 176] = 0\n 33034: u64 [sp + 168] = 0\n 33038: u64 [sp + 160] = 0\n 33042: a0 = 0x4e487b7100000000\n 33052: a1 = sp + 0xa0\n 33056: u64 [sp + 0xb8] = a0\n 33060: a0 = 0\n 33062: ra = 420, jump @8\n      : @456 [@dyn 210] (gas: 7)\n 33069: u64 [sp + 152] = 0\n 33073: u64 [sp + 144] = 0\n 33077: u64 [sp + 128] = 0x41\n 33082: a0 = 0x4\n 33085: a1 = sp + 0x80\n 33089: u64 [sp + 136] = 0\n 33093: ra = 422, jump @8\n      : @457 [@dyn 211] (gas: 3)\n 33100: a1 = 0x24\n 33103: a0 = 0\n 33105: ra = 424, jump @0\n      : @458 [@dyn 212] (gas: 6)\n 33112: i32 a1 = a0 + 0\n 33114: a0 = 0x1\n 33117: a2 = 0x24\n 33120: ra = 0x1aa\n 33124: ecalli 14 // 'seal_return'\n 33126: fallthrough\n      : @459 [@dyn 213] (gas: 9)\n 33127: sp = sp + 0xfffffffffffffe80\n 33131: u64 [sp + 0x178] = ra\n 33135: u64 [sp + 0x170] = s0\n 33139: u64 [sp + 0x168] = s1\n 33143: s0 = sp + 0x180\n 33147: sp = sp & 0xffffffffffffffe0\n 33150: a0 = 0x40\n 33153: a1 = 0x20\n 33156: ra = 428, jump @0\n      : @460 [@dyn 214] (gas: 97)\n 33163: a1 = u8 [a0 + 0x9]\n 33166: a2 = u8 [a0 + 0x8]\n 33169: a3 = u8 [a0 + 0xa]\n 33172: a4 = u8 [a0 + 0xb]\n 33175: a1 = a1 << 0x8\n 33178: a1 = a1 | a2\n 33181: a3 = a3 << 0x10\n 33184: a4 = a4 << 0x18\n 33187: a3 = a3 | a4\n 33190: a1 = a1 | a3\n 33193: a2 = u8 [a0 + 0xd]\n 33196: a3 = u8 [a0 + 0xc]\n 33199: a4 = u8 [a0 + 0xe]\n 33202: a5 = u8 [a0 + 0xf]\n 33205: a2 = a2 << 0x8\n 33208: a2 = a2 | a3\n 33211: a4 = a4 << 0x10\n 33214: a5 = a5 << 0x18\n 33217: a4 = a4 | a5\n 33220: a2 = a2 | a4\n 33223: a2 = a2 << 0x20\n 33226: t0 = a2 | a1\n 33229: a2 = u8 [a0 + 0x1]\n 33232: a3 = u8 [a0]\n 33234: a4 = u8 [a0 + 0x2]\n 33237: a5 = u8 [a0 + 0x3]\n 33240: a2 = a2 << 0x8\n 33243: a2 = a2 | a3\n 33246: a4 = a4 << 0x10\n 33249: a5 = a5 << 0x18\n 33252: a4 = a4 | a5\n 33255: a2 = a2 | a4\n 33258: a3 = u8 [a0 + 0x5]\n 33261: a4 = u8 [a0 + 0x4]\n 33264: a5 = u8 [a0 + 0x6]\n 33267: s1 = u8 [a0 + 0x7]\n 33270: a3 = a3 << 0x8\n 33273: a3 = a3 | a4\n 33276: a5 = a5 << 0x10\n 33279: s1 = s1 << 0x18\n 33282: a5 = a5 | s1\n 33285: a3 = a3 | a5\n 33288: a3 = a3 << 0x20\n 33291: a2 = a2 | a3\n 33294: a3 = u8 [a0 + 0x19]\n 33297: a4 = u8 [a0 + 0x18]\n 33300: a5 = u8 [a0 + 0x1a]\n 33303: s1 = u8 [a0 + 0x1b]\n 33306: a3 = a3 << 0x8\n 33309: a3 = a3 | a4\n 33312: a5 = a5 << 0x10\n 33315: s1 = s1 << 0x18\n 33318: a5 = a5 | s1\n 33321: a3 = a3 | a5\n 33324: a4 = u8 [a0 + 0x1d]\n 33327: a5 = u8 [a0 + 0x1c]\n 33330: s1 = u8 [a0 + 0x1e]\n 33333: a1 = u8 [a0 + 0x1f]\n 33336: a4 = a4 << 0x8\n 33339: a4 = a4 | a5\n 33342: s1 = s1 << 0x10\n 33345: a1 = a1 << 0x18\n 33348: a1 = a1 | s1\n 33351: a1 = a1 | a4\n 33354: a1 = a1 << 0x20\n 33357: a3 = a3 | a1\n 33360: a1 = u8 [a0 + 0x11]\n 33363: a4 = u8 [a0 + 0x10]\n 33366: a5 = u8 [a0 + 0x12]\n 33369: s1 = u8 [a0 + 0x13]\n 33372: a1 = a1 << 0x8\n 33375: a1 = a1 | a4\n 33378: a5 = a5 << 0x10\n 33381: s1 = s1 << 0x18\n 33384: a5 = a5 | s1\n 33387: a1 = a1 | a5\n 33390: a4 = u8 [a0 + 0x15]\n 33393: a5 = u8 [a0 + 0x14]\n 33396: s1 = u8 [a0 + 0x16]\n 33399: a0 = u8 [a0 + 0x17]\n 33402: a4 = a4 << 0x8\n 33405: a4 = a4 | a5\n 33408: s1 = s1 << 0x10\n 33411: a0 = a0 << 0x18\n 33414: a0 = a0 | s1\n 33417: a0 = a0 | a4\n 33420: a0 = a0 << 0x20\n 33423: a0 = a0 | a1\n 33426: a0 = reverse a0\n 33428: s1 = reverse a3\n 33430: a2 = reverse a2\n 33432: a1 = reverse t0\n 33434: a3 = a1 | a2\n 33437: a4 = s1 <u 0xffffffffffffffe0\n 33440: a4 = 0 if a0 != 0\n 33442: a4 = 0 if a3 != 0\n 33444: jump @473 if a4 == 0\n      : @461 (gas: 8)\n 33448: a3 = s1 | a1\n 33451: a0 = a0 | a2\n 33454: a3 = a3 | a0\n 33457: a3 = a3 >> 0x20\n 33460: a0 = a0 | a1\n 33463: a0 = a0 << 0x20\n 33466: a0 = a0 | a3\n 33469: jump @471 if a0 != 0\n      : @462 (gas: 4)\n 33473: i32 s1 = s1 + 0\n 33475: a1 = 0x20\n 33478: a0 = s1\n 33480: ra = 430, jump @0\n      : @463 [@dyn 215] (gas: 35)\n 33487: u8 [a0 + 31] = 0xc\n 33491: u8 [a0 + 30] = 0x59\n 33495: u8 [a0 + 29] = 0x34\n 33499: u8 [a0 + 28] = 0xf8\n 33504: u8 [a0 + 27] = 0x3\n 33508: u8 [a0 + 26] = 0x33\n 33512: u8 [a0 + 25] = 0xf4\n 33517: u8 [a0 + 24] = 0xfe\n 33522: u8 [a0 + 23] = 0x52\n 33526: u8 [a0 + 22] = 0x82\n 33531: u8 [a0 + 21] = 0x58\n 33535: u8 [a0 + 20] = 0x9a\n 33540: u8 [a0 + 19] = 0xf3\n 33545: u8 [a0 + 18] = 0xb0\n 33550: u8 [a0 + 17] = 0xd8\n 33555: u8 [a0 + 16] = 0xf0\n 33560: u8 [a0 + 15] = 0x6a\n 33564: u8 [a0 + 14] = 0x50\n 33568: u8 [a0 + 13] = 0xcf\n 33573: u8 [a0 + 12] = 0xed\n 33578: u8 [a0 + 11] = 0x5e\n 33582: u8 [a0 + 10] = 0x98\n 33587: u8 [a0 + 9] = 0x44\n 33591: u8 [a0 + 8] = 0x94\n 33596: u8 [a0 + 7] = 0x68\n 33600: u8 [a0 + 6] = 0xda\n 33605: u8 [a0 + 5] = 0x9c\n 33610: u8 [a0 + 4] = 0xe1\n 33615: u8 [a0 + 3] = 0x65\n 33619: u8 [a0 + 2] = 0xe8\n 33624: u8 [a0 + 1] = 0x93\n 33629: u8 [a0 + 0] = 0x37\n 33632: a1 = 0x20\n 33635: a0 = s1\n 33637: ra = 432, jump @0\n      : @464 [@dyn 216] (gas: 31)\n 33644: u64 [sp + 216] = 0\n 33648: u64 [sp + 208] = 0\n 33652: u64 [sp + 200] = 0\n 33656: u64 [sp + 192] = 0\n 33660: u64 [sp + 248] = 0\n 33664: u64 [sp + 240] = 0\n 33668: u64 [sp + 232] = 0\n 33672: u64 [sp + 224] = 0\n 33676: u64 [sp + 280] = 0xffffffffffffffff\n 33681: u64 [sp + 272] = 0xffffffffffffffff\n 33686: u64 [sp + 264] = 0xffffffffffffffff\n 33691: u64 [sp + 256] = 0xffffffffffffffff\n 33696: a2 = sp + 0xc0\n 33700: a2 = a2 << 0x20\n 33703: a2 = a2 >> 0x20\n 33706: a3 = sp + 0x100\n 33710: a3 = a3 << 0x20\n 33713: a2 = a2 | a3\n 33716: a0 = a0 << 0x20\n 33719: a0 = a0 >> 0x20\n 33722: a3 = 0x2000000000\n 33732: a3 = a3 | a0\n 33735: a0 = sp + 0xe0\n 33739: a0 = a0 << 0x20\n 33742: a1 = 0xffffffff\n 33752: a5 = a0 | a1\n 33755: a0 = 0xffffffffffffffff\n 33758: a1 = 0xffffffffffffffff\n 33761: a4 = 0xffffffffffffffff\n 33764: ecalli 9 // 'instantiate'\n 33766: fallthrough\n      : @465 (gas: 6)\n 33767: a1 = u32 [sp + 0xf0]\n 33771: a0 = u64 [sp + 0xe0]\n 33775: a2 = u64 [sp + 0xe8]\n 33779: a3 = a0 | a1\n 33782: a3 = a3 | a2\n 33785: jump @472 if a3 == 0\n      : @466 (gas: 32)\n 33789: a2 = reverse a2\n 33791: a3 = a2 << 0x20\n 33794: a1 = reverse a1\n 33796: a1 = a1 >> 0x20\n 33799: a1 = a1 | a3\n 33802: u64 [sp + 0x38] = a1\n 33805: a0 = reverse a0\n 33807: a1 = a0 << 0x20\n 33810: a2 = a2 >> 0x20\n 33813: a1 = a1 | a2\n 33816: u64 [sp + 0x30] = a1\n 33819: a0 = a0 >> 0x20\n 33822: u64 [sp + 0x28] = a0\n 33825: i32 a0 = sp + 0x120\n 33829: ecalli 5 // 'caller'\n 33831: a0 = u64 [sp + 0x128]\n 33835: a1 = i32 [sp + 0x130]\n 33839: s1 = u64 [sp + 0x120]\n 33843: a0 = reverse a0\n 33845: a2 = a0 << 0x20\n 33848: a1 = reverse a1\n 33850: a1 = a1 >> 0x20\n 33853: a1 = a1 | a2\n 33856: u64 [sp + 0x20] = a1\n 33859: a0 = a0 >> 0x20\n 33862: a1 = reverse s1\n 33864: a1 = a1 << 0x20\n 33867: a0 = a0 | a1\n 33870: u64 [sp + 0x18] = a0\n 33873: a1 = 0x20\n 33876: a0 = 0\n 33878: ra = 434, jump @0\n      : @467 [@dyn 217] (gas: 56)\n 33885: a1 = u64 [sp + 0x18]\n 33888: a1 = reverse a1\n 33890: a2 = u64 [sp + 0x20]\n 33893: a2 = reverse a2\n 33895: a3 = s1 >> 0x18\n 33898: u8 [a0 + 0xf] = a3\n 33901: a3 = s1 >> 0x10\n 33904: u8 [a0 + 0xe] = a3\n 33907: a3 = s1 >> 0x8\n 33910: u8 [a0 + 0xd] = a3\n 33913: u8 [a0 + 0xc] = s1\n 33916: u8 [a0 + 11] = 0\n 33919: u8 [a0 + 10] = 0\n 33922: u8 [a0 + 9] = 0\n 33925: u8 [a0 + 8] = 0\n 33928: u8 [a0 + 7] = 0\n 33931: u8 [a0 + 6] = 0\n 33934: u8 [a0 + 5] = 0\n 33937: u8 [a0 + 4] = 0\n 33940: u8 [a0 + 3] = 0\n 33943: u8 [a0 + 2] = 0\n 33946: u8 [a0 + 1] = 0\n 33949: u8 [a0 + 0] = 0\n 33951: u8 [a0 + 0x18] = a2\n 33954: u8 [a0 + 0x10] = a1\n 33957: a3 = a2 >> 0x38\n 33960: u8 [a0 + 0x1f] = a3\n 33963: a3 = a2 >> 0x30\n 33966: u8 [a0 + 0x1e] = a3\n 33969: a3 = a2 >> 0x28\n 33972: u8 [a0 + 0x1d] = a3\n 33975: a3 = a2 >> 0x20\n 33978: u8 [a0 + 0x1c] = a3\n 33981: a3 = a2 >> 0x18\n 33984: u8 [a0 + 0x1b] = a3\n 33987: a3 = a2 >> 0x10\n 33990: u8 [a0 + 0x1a] = a3\n 33993: a2 = a2 >> 0x8\n 33996: u8 [a0 + 0x19] = a2\n 33999: a2 = a1 >> 0x38\n 34002: u8 [a0 + 0x17] = a2\n 34005: a2 = a1 >> 0x30\n 34008: u8 [a0 + 0x16] = a2\n 34011: a2 = a1 >> 0x28\n 34014: u8 [a0 + 0x15] = a2\n 34017: a2 = a1 >> 0x20\n 34020: u8 [a0 + 0x14] = a2\n 34023: a2 = a1 >> 0x18\n 34026: u8 [a0 + 0x13] = a2\n 34029: a2 = a1 >> 0x10\n 34032: u8 [a0 + 0x12] = a2\n 34035: a1 = a1 >> 0x8\n 34038: u8 [a0 + 0x11] = a1\n 34041: a0 = 0x20\n 34044: a1 = 0x20\n 34047: ra = 436, jump @0\n      : @468 [@dyn 218] (gas: 35)\n 34054: u8 [a0 + 31] = 0x1\n 34058: u8 [a0 + 30] = 0\n 34061: u8 [a0 + 29] = 0\n 34064: u8 [a0 + 28] = 0\n 34067: u8 [a0 + 27] = 0\n 34070: u8 [a0 + 26] = 0\n 34073: u8 [a0 + 25] = 0\n 34076: u8 [a0 + 24] = 0\n 34079: u8 [a0 + 23] = 0\n 34082: u8 [a0 + 22] = 0\n 34085: u8 [a0 + 21] = 0\n 34088: u8 [a0 + 20] = 0\n 34091: u8 [a0 + 19] = 0\n 34094: u8 [a0 + 18] = 0\n 34097: u8 [a0 + 17] = 0\n 34100: u8 [a0 + 16] = 0\n 34103: u8 [a0 + 15] = 0\n 34106: u8 [a0 + 14] = 0\n 34109: u8 [a0 + 13] = 0\n 34112: u8 [a0 + 12] = 0\n 34115: u8 [a0 + 11] = 0\n 34118: u8 [a0 + 10] = 0\n 34121: u8 [a0 + 9] = 0\n 34124: u8 [a0 + 8] = 0\n 34127: u8 [a0 + 7] = 0\n 34130: u8 [a0 + 6] = 0\n 34133: u8 [a0 + 5] = 0\n 34136: u8 [a0 + 4] = 0\n 34139: u8 [a0 + 3] = 0\n 34142: u8 [a0 + 2] = 0\n 34145: u8 [a0 + 1] = 0\n 34148: u8 [a0 + 0] = 0\n 34150: a1 = 0x40\n 34153: a0 = 0\n 34155: ra = 438, jump @0\n      : @469 [@dyn 219] (gas: 62)\n 34162: i32 a0 = a0 + 0\n 34164: i32 a2 = sp + 0x140\n 34168: a1 = 0x40\n 34171: ecalli 8 // 'hash_keccak_256'\n 34173: a0 = u64 [sp + 0x158]\n 34177: a1 = u64 [sp + 0x150]\n 34181: a2 = u64 [sp + 0x148]\n 34185: a3 = u64 [sp + 0x140]\n 34189: a4 = reverse a0\n 34191: a0 = reverse a1\n 34193: a1 = reverse a2\n 34195: a2 = reverse a3\n 34197: u64 [sp + 152] = 0\n 34201: a3 = u64 [sp + 0x28]\n 34204: u64 [sp + 0x90] = a3\n 34208: a3 = u64 [sp + 0x30]\n 34211: u64 [sp + 0x88] = a3\n 34215: a3 = u64 [sp + 0x38]\n 34218: u64 [sp + 0x80] = a3\n 34222: u64 [sp + 0xb8] = a2\n 34226: u64 [sp + 0xb0] = a1\n 34230: u64 [sp + 0xa8] = a0\n 34234: a0 = sp + 0xa0\n 34238: a1 = sp + 0x80\n 34242: u64 [sp + 0xa0] = a4\n 34246: ra = 0x1b8\n 34250: sp = sp + 0xfffffffffffffdc0\n 34254: u64 [sp + 0x238] = ra\n 34258: u64 [sp + 0x230] = s0\n 34262: u64 [sp + 0x228] = s1\n 34266: s0 = sp + 0x240\n 34270: sp = sp & 0xffffffffffffffe0\n 34273: a2 = u64 [a1 + 0x10]\n 34276: u64 [sp + 0x38] = a2\n 34279: a2 = u64 [a1 + 0x8]\n 34282: u64 [sp + 0x30] = a2\n 34285: a1 = u64 [a1]\n 34287: u64 [sp + 0x28] = a1\n 34290: a3 = u64 [a0 + 0x18]\n 34293: a2 = u64 [a0 + 0x10]\n 34296: a1 = u64 [a0 + 0x8]\n 34299: a0 = u64 [a0]\n 34301: u64 [sp + 0x60] = a3\n 34304: u64 [sp + 0x1f8] = a3\n 34308: u64 [sp + 0x68] = a2\n 34311: u64 [sp + 0x1f0] = a2\n 34315: u64 [sp + 0x70] = a1\n 34318: u64 [sp + 0x1e8] = a1\n 34322: u64 [sp + 0x78] = a0\n 34325: u64 [sp + 0x1e0] = a0\n 34329: u64 [sp + 536] = 0\n 34333: u64 [sp + 528] = 0\n 34337: u64 [sp + 520] = 0\n 34341: u64 [sp + 512] = 0\n 34345: u32 [sp + 448] = 0x20\n 34350: i32 a1 = sp + 0x1e0\n 34354: i32 a3 = sp + 0x200\n 34358: i32 a4 = sp + 0x1c0\n 34362: a2 = 0xffffffffffffffff\n 34365: a0 = 0\n 34367: ecalli 7 // 'get_storage'\n 34369: jump @452\n      : @470 [@dyn 220] (gas: 6)\n 34372: sp = s0 + 0xfffffffffffffe80\n 34376: ra = u64 [sp + 0x178]\n 34380: s0 = u64 [sp + 0x170]\n 34384: s1 = u64 [sp + 0x168]\n 34388: sp = sp + 0x180\n 34392: ret\n      : @471 (gas: 1)\n 34394: trap\n      : @472 (gas: 1)\n 34395: ra = 442, jump @375\n      : @473 [@dyn 221] (gas: 8)\n 34401: u64 [sp + 112] = 0\n 34404: u64 [sp + 104] = 0\n 34407: u64 [sp + 96] = 0\n 34410: a0 = 0x4e487b7100000000\n 34420: a1 = sp + 0x60\n 34423: u64 [sp + 0x78] = a0\n 34426: a0 = 0\n 34428: ra = 444, jump @8\n      : @474 [@dyn 222] (gas: 7)\n 34435: u64 [sp + 88] = 0\n 34438: u64 [sp + 80] = 0\n 34441: u64 [sp + 64] = 0x41\n 34445: a0 = 0x4\n 34448: a1 = sp + 0x40\n 34451: u64 [sp + 72] = 0\n 34454: ra = 446, jump @8\n      : @475 [@dyn 223] (gas: 3)\n 34461: a1 = 0x24\n 34464: a0 = 0\n 34466: ra = 448, jump @0\n      : @476 [@dyn 224] (gas: 6)\n 34473: i32 a1 = a0 + 0\n 34475: a0 = 0x1\n 34478: a2 = 0x24\n 34481: ra = 0x1c2\n 34485: ecalli 14 // 'seal_return'\n 34487: fallthrough\n      : @477 [@dyn 225] (gas: 5)\n 34488: u64 [a0 + 24] = 0\n 34491: u64 [a0 + 16] = 0\n 34494: u64 [a0 + 8] = 0\n 34497: u64 [a0 + 0] = 0\n 34499: ret\n      : @478 (gas: 15)\n 34501: sp = sp + 0xfffffffffffffe40\n 34505: u64 [sp + 0x1b8] = ra\n 34509: u64 [sp + 0x1b0] = s0\n 34513: u64 [sp + 0x1a8] = s1\n 34517: s0 = sp + 0x1c0\n 34521: sp = sp & 0xffffffffffffffe0\n 34524: a2 = u64 [a1]\n 34526: u64 [sp + 0xd0] = a2\n 34530: a2 = u64 [a1 + 0x8]\n 34533: u64 [sp + 0xc8] = a2\n 34537: s1 = u32 [a1 + 0x10]\n 34540: u64 [sp + 0xd8] = a0\n 34544: a1 = 0x20\n 34547: a0 = 0\n 34549: ra = 452, jump @0\n      : @479 [@dyn 226] (gas: 79)\n 34556: a3 = reverse s1\n 34558: a1 = u64 [sp + 0xc8]\n 34562: a4 = reverse a1\n 34564: a1 = u64 [sp + 0xd0]\n 34568: a2 = reverse a1\n 34570: a1 = a2 >> 0x38\n 34573: u64 [sp + 0xd0] = a1\n 34577: u8 [a0 + 0x1f] = a1\n 34580: a1 = a2 >> 0x30\n 34583: u64 [sp + 0xc8] = a1\n 34587: u8 [a0 + 0x1e] = a1\n 34590: a1 = a2 >> 0x28\n 34593: u64 [sp + 0xc0] = a1\n 34597: u8 [a0 + 0x1d] = a1\n 34600: a1 = a2 >> 0x20\n 34603: u64 [sp + 0xb8] = a1\n 34607: u8 [a0 + 0x1c] = a1\n 34610: a1 = a2 >> 0x18\n 34613: u64 [sp + 0xb0] = a1\n 34617: u8 [a0 + 0x1b] = a1\n 34620: a1 = a2 >> 0x10\n 34623: u64 [sp + 0xa8] = a1\n 34627: u8 [a0 + 0x1a] = a1\n 34630: a1 = a2 >> 0x8\n 34633: u64 [sp + 0xa0] = a1\n 34637: u8 [a0 + 0x19] = a1\n 34640: u64 [sp + 0x98] = a2\n 34644: u8 [a0 + 0x18] = a2\n 34647: a1 = a4 >> 0x38\n 34650: u64 [sp + 0x80] = a1\n 34654: u8 [a0 + 0x17] = a1\n 34657: a1 = a4 >> 0x30\n 34660: u64 [sp + 0x78] = a1\n 34663: u8 [a0 + 0x16] = a1\n 34666: a1 = a4 >> 0x28\n 34669: u64 [sp + 0x70] = a1\n 34672: u8 [a0 + 0x15] = a1\n 34675: a1 = a4 >> 0x20\n 34678: u64 [sp + 0x60] = a1\n 34681: u8 [a0 + 0x14] = a1\n 34684: a1 = a4 >> 0x18\n 34687: u64 [sp + 0x50] = a1\n 34690: u8 [a0 + 0x13] = a1\n 34693: a1 = a4 >> 0x10\n 34696: u64 [sp + 0x48] = a1\n 34699: u8 [a0 + 0x12] = a1\n 34702: a1 = a4 >> 0x8\n 34705: u64 [sp + 0x40] = a1\n 34708: u8 [a0 + 0x11] = a1\n 34711: u64 [sp + 0x58] = a4\n 34714: u8 [a0 + 0x10] = a4\n 34717: a1 = a3 >> 0x38\n 34720: u64 [sp + 0x30] = a1\n 34723: u8 [a0 + 0xf] = a1\n 34726: a1 = a3 >> 0x30\n 34729: u64 [sp + 0x28] = a1\n 34732: u8 [a0 + 0xe] = a1\n 34735: a1 = a3 >> 0x28\n 34738: u64 [sp + 0x20] = a1\n 34741: u8 [a0 + 0xd] = a1\n 34744: a1 = a3 >> 0x20\n 34747: u64 [sp + 0x18] = a1\n 34750: u8 [a0 + 0xc] = a1\n 34753: u8 [a0 + 11] = 0\n 34756: u8 [a0 + 10] = 0\n 34759: u8 [a0 + 9] = 0\n 34762: u64 [sp + 0x90] = a3\n 34766: u8 [a0 + 0x8] = a3\n 34769: u8 [a0 + 7] = 0\n 34772: u8 [a0 + 6] = 0\n 34775: u8 [a0 + 5] = 0\n 34778: u8 [a0 + 4] = 0\n 34781: u8 [a0 + 3] = 0\n 34784: u8 [a0 + 2] = 0\n 34787: u8 [a0 + 1] = 0\n 34790: u8 [a0 + 0] = 0\n 34792: a0 = 0x20\n 34795: a1 = 0x20\n 34798: ra = 454, jump @0\n      : @480 [@dyn 227] (gas: 35)\n 34805: u8 [a0 + 31] = 0x2\n 34809: u8 [a0 + 30] = 0\n 34812: u8 [a0 + 29] = 0\n 34815: u8 [a0 + 28] = 0\n 34818: u8 [a0 + 27] = 0\n 34821: u8 [a0 + 26] = 0\n 34824: u8 [a0 + 25] = 0\n 34827: u8 [a0 + 24] = 0\n 34830: u8 [a0 + 23] = 0\n 34833: u8 [a0 + 22] = 0\n 34836: u8 [a0 + 21] = 0\n 34839: u8 [a0 + 20] = 0\n 34842: u8 [a0 + 19] = 0\n 34845: u8 [a0 + 18] = 0\n 34848: u8 [a0 + 17] = 0\n 34851: u8 [a0 + 16] = 0\n 34854: u8 [a0 + 15] = 0\n 34857: u8 [a0 + 14] = 0\n 34860: u8 [a0 + 13] = 0\n 34863: u8 [a0 + 12] = 0\n 34866: u8 [a0 + 11] = 0\n 34869: u8 [a0 + 10] = 0\n 34872: u8 [a0 + 9] = 0\n 34875: u8 [a0 + 8] = 0\n 34878: u8 [a0 + 7] = 0\n 34881: u8 [a0 + 6] = 0\n 34884: u8 [a0 + 5] = 0\n 34887: u8 [a0 + 4] = 0\n 34890: u8 [a0 + 3] = 0\n 34893: u8 [a0 + 2] = 0\n 34896: u8 [a0 + 1] = 0\n 34899: u8 [a0 + 0] = 0\n 34901: a1 = 0x40\n 34904: a0 = 0\n 34906: ra = 456, jump @0\n      : @481 [@dyn 228] (gas: 36)\n 34913: i32 a0 = a0 + 0\n 34915: i32 a2 = sp + 0x180\n 34919: a1 = 0x40\n 34922: ecalli 8 // 'hash_keccak_256'\n 34924: a0 = u64 [sp + 0x180]\n 34928: a1 = u64 [sp + 0x188]\n 34932: a2 = u64 [sp + 0x190]\n 34936: a3 = u64 [sp + 0x198]\n 34940: a0 = reverse a0\n 34942: a1 = reverse a1\n 34944: a2 = reverse a2\n 34946: a3 = reverse a3\n 34948: a4 = a3 + 0x2\n 34951: a3 = a4 <u a3\n 34954: a5 = a2 + a3\n 34957: a2 = a5 <u a2\n 34960: a2 = a3 if a3 == 0\n 34963: a2 = a2 + a1\n 34966: a1 = a2 <u a1\n 34969: a0 = a0 + a1\n 34972: u64 [sp + 0x168] = a5\n 34976: u64 [sp + 0x160] = a4\n 34980: u64 [sp + 0x170] = a2\n 34984: u64 [sp + 0x178] = a0\n 34988: u64 [sp + 408] = 0\n 34992: u64 [sp + 400] = 0\n 34996: u64 [sp + 392] = 0\n 35000: u64 [sp + 384] = 0\n 35004: u32 [sp + 416] = 0x20\n 35009: i32 a1 = sp + 0x160\n 35013: i32 a3 = sp + 0x180\n 35017: i32 a4 = sp + 0x1a0\n 35021: a2 = 0xffffffffffffffff\n 35024: a0 = 0\n 35026: ecalli 7 // 'get_storage'\n 35028: fallthrough\n      : @482 (gas: 28)\n 35029: a1 = u64 [sp + 0x198]\n 35033: a3 = u64 [sp + 0x190]\n 35037: a4 = u64 [sp + 0x188]\n 35041: a0 = u64 [sp + 0x180]\n 35045: a2 = 0x429d069189e0000\n 35055: a5 = a0 mulhu a2\n 35058: s1 = a4 * a2\n 35061: a5 = a5 + s1\n 35064: u64 [sp + 0x88] = a5\n 35068: a5 = a5 <u s1\n 35071: a4 = a4 mulhu a2\n 35074: a4 = a4 + a5\n 35077: a5 = a3 * a2\n 35080: a5 = a5 + a4\n 35083: u64 [sp + 0x68] = a5\n 35086: a4 = a5 <u a4\n 35089: a5 = a1 * a2\n 35092: s1 = a3 mulhu a2\n 35095: a3 = s1 + a5\n 35098: a5 = a3 + a4\n 35101: u64 [sp + 0x38] = a5\n 35104: a4 = 0 if a5 != 0\n 35106: a3 = a3 <u s1\n 35109: a1 = a1 mulhu a2\n 35112: a1 = a1 >u 0\n 35114: a1 = a1 | a3\n 35117: a1 = a1 | a4\n 35120: jump @489 if a1 != 0\n      : @483 (gas: 5)\n 35124: s1 = a0 * a2\n 35127: u64 [sp + 0x10] = s1\n 35130: a1 = 0x20\n 35133: a0 = 0\n 35135: ra = 458, jump @0\n      : @484 [@dyn 229] (gas: 59)\n 35142: a1 = u64 [sp + 0x58]\n 35145: u8 [a0 + 0x10] = a1\n 35148: a1 = u64 [sp + 0x30]\n 35151: u8 [a0 + 0xf] = a1\n 35154: a1 = u64 [sp + 0x28]\n 35157: u8 [a0 + 0xe] = a1\n 35160: a1 = u64 [sp + 0x20]\n 35163: u8 [a0 + 0xd] = a1\n 35166: a1 = u64 [sp + 0x18]\n 35169: u8 [a0 + 0xc] = a1\n 35172: a2 = u64 [sp + 0x90]\n 35176: a1 = a2 >> 0x18\n 35179: u8 [a0 + 0xb] = a1\n 35182: a1 = a2 >> 0x10\n 35185: u8 [a0 + 0xa] = a1\n 35188: a1 = a2 >> 0x8\n 35191: u8 [a0 + 0x9] = a1\n 35194: u8 [a0 + 0x8] = a2\n 35197: a1 = u64 [sp + 0x98]\n 35201: u8 [a0 + 0x18] = a1\n 35204: a1 = u64 [sp + 0x80]\n 35208: u8 [a0 + 0x17] = a1\n 35211: a1 = u64 [sp + 0x78]\n 35214: u8 [a0 + 0x16] = a1\n 35217: a1 = u64 [sp + 0x70]\n 35220: u8 [a0 + 0x15] = a1\n 35223: a1 = u64 [sp + 0x60]\n 35226: u8 [a0 + 0x14] = a1\n 35229: a1 = u64 [sp + 0x50]\n 35232: u8 [a0 + 0x13] = a1\n 35235: a1 = u64 [sp + 0x48]\n 35238: u8 [a0 + 0x12] = a1\n 35241: a1 = u64 [sp + 0x40]\n 35244: u8 [a0 + 0x11] = a1\n 35247: a1 = u64 [sp + 0xd0]\n 35251: u8 [a0 + 0x1f] = a1\n 35254: a1 = u64 [sp + 0xc8]\n 35258: u8 [a0 + 0x1e] = a1\n 35261: a1 = u64 [sp + 0xc0]\n 35265: u8 [a0 + 0x1d] = a1\n 35268: a1 = u64 [sp + 0xb8]\n 35272: u8 [a0 + 0x1c] = a1\n 35275: a1 = u64 [sp + 0xb0]\n 35279: u8 [a0 + 0x1b] = a1\n 35282: a1 = u64 [sp + 0xa8]\n 35286: u8 [a0 + 0x1a] = a1\n 35289: a1 = u64 [sp + 0xa0]\n 35293: u8 [a0 + 0x19] = a1\n 35296: u8 [a0 + 7] = 0\n 35299: u8 [a0 + 6] = 0\n 35302: u8 [a0 + 5] = 0\n 35305: u8 [a0 + 4] = 0\n 35308: u8 [a0 + 3] = 0\n 35311: u8 [a0 + 2] = 0\n 35314: u8 [a0 + 1] = 0\n 35317: u8 [a0 + 0] = 0\n 35319: a0 = 0x20\n 35322: a1 = 0x20\n 35325: ra = 460, jump @0\n      : @485 [@dyn 230] (gas: 35)\n 35332: u8 [a0 + 31] = 0x2\n 35336: u8 [a0 + 30] = 0\n 35339: u8 [a0 + 29] = 0\n 35342: u8 [a0 + 28] = 0\n 35345: u8 [a0 + 27] = 0\n 35348: u8 [a0 + 26] = 0\n 35351: u8 [a0 + 25] = 0\n 35354: u8 [a0 + 24] = 0\n 35357: u8 [a0 + 23] = 0\n 35360: u8 [a0 + 22] = 0\n 35363: u8 [a0 + 21] = 0\n 35366: u8 [a0 + 20] = 0\n 35369: u8 [a0 + 19] = 0\n 35372: u8 [a0 + 18] = 0\n 35375: u8 [a0 + 17] = 0\n 35378: u8 [a0 + 16] = 0\n 35381: u8 [a0 + 15] = 0\n 35384: u8 [a0 + 14] = 0\n 35387: u8 [a0 + 13] = 0\n 35390: u8 [a0 + 12] = 0\n 35393: u8 [a0 + 11] = 0\n 35396: u8 [a0 + 10] = 0\n 35399: u8 [a0 + 9] = 0\n 35402: u8 [a0 + 8] = 0\n 35405: u8 [a0 + 7] = 0\n 35408: u8 [a0 + 6] = 0\n 35411: u8 [a0 + 5] = 0\n 35414: u8 [a0 + 4] = 0\n 35417: u8 [a0 + 3] = 0\n 35420: u8 [a0 + 2] = 0\n 35423: u8 [a0 + 1] = 0\n 35426: u8 [a0 + 0] = 0\n 35428: a1 = 0x40\n 35431: a0 = 0\n 35433: ra = 462, jump @0\n      : @486 [@dyn 231] (gas: 36)\n 35440: i32 a0 = a0 + 0\n 35442: i32 a2 = sp + 0x180\n 35446: a1 = 0x40\n 35449: ecalli 8 // 'hash_keccak_256'\n 35451: a0 = u64 [sp + 0x180]\n 35455: a1 = u64 [sp + 0x188]\n 35459: a2 = u64 [sp + 0x190]\n 35463: a3 = u64 [sp + 0x198]\n 35467: a0 = reverse a0\n 35469: a1 = reverse a1\n 35471: a2 = reverse a2\n 35473: a3 = reverse a3\n 35475: a4 = a3 + 0x3\n 35478: a3 = a4 <u a3\n 35481: a5 = a2 + a3\n 35484: a2 = a5 <u a2\n 35487: a2 = a3 if a3 == 0\n 35490: a2 = a2 + a1\n 35493: a1 = a2 <u a1\n 35496: a0 = a0 + a1\n 35499: u64 [sp + 0x168] = a5\n 35503: u64 [sp + 0x160] = a4\n 35507: u64 [sp + 0x170] = a2\n 35511: u64 [sp + 0x178] = a0\n 35515: u64 [sp + 408] = 0\n 35519: u64 [sp + 400] = 0\n 35523: u64 [sp + 392] = 0\n 35527: u64 [sp + 384] = 0\n 35531: u32 [sp + 416] = 0x20\n 35536: i32 a1 = sp + 0x160\n 35540: i32 a3 = sp + 0x180\n 35544: i32 a4 = sp + 0x1a0\n 35548: a2 = 0xffffffffffffffff\n 35551: a0 = 0\n 35553: ecalli 7 // 'get_storage'\n 35555: fallthrough\n      : @487 (gas: 34)\n 35556: a2 = u64 [sp + 0x188]\n 35560: a1 = u64 [sp + 0x180]\n 35564: t0 = u64 [sp + 0x198]\n 35568: a4 = u64 [sp + 0x190]\n 35572: ra = u64 [sp + 0x88]\n 35576: a5 = a2 + ra\n 35579: t2 = a1 + s1\n 35582: s1 = t2 <u a1\n 35585: a1 = a5 + s1\n 35588: a5 = a1 ^ a2\n 35591: a2 = a1 <u a2\n 35594: a2 = s1 if a5 == 0\n 35597: a0 = u64 [sp + 0x68]\n 35600: a5 = a4 + a0\n 35603: a2 = a2 + a5\n 35606: a3 = a2 <u a5\n 35609: s1 = u64 [sp + 0x38]\n 35612: t0 = t0 + s1\n 35615: a4 = a5 <u a4\n 35618: a4 = a4 + t0\n 35621: a3 = a3 + a4\n 35624: a4 = a2 <u a0\n 35627: a5 = a3 ^ s1\n 35630: s1 = a3 <u s1\n 35633: s1 = a4 if a5 == 0\n 35636: a4 = a2 ^ a0\n 35639: t0 = a4 | a5\n 35642: t1 = a1 ^ ra\n 35645: a4 = a1 <u ra\n 35648: a0 = u64 [sp + 0x10]\n 35651: a5 = t2 <u a0\n 35654: a5 = a4 if t1 != 0\n 35657: a5 = s1 if t0 != 0\n 35660: jump @491 if a5 != 0\n      : @488 (gas: 11)\n 35663: a4 = u64 [sp + 0xd8]\n 35667: u64 [a4] = t2\n 35669: u64 [a4 + 0x8] = a1\n 35672: u64 [a4 + 0x10] = a2\n 35675: u64 [a4 + 0x18] = a3\n 35678: sp = s0 + 0xfffffffffffffe40\n 35682: ra = u64 [sp + 0x1b8]\n 35686: s0 = u64 [sp + 0x1b0]\n 35690: s1 = u64 [sp + 0x1a8]\n 35694: sp = sp + 0x1c0\n 35698: ret\n      : @489 (gas: 8)\n 35700: u64 [sp + 272] = 0\n 35704: u64 [sp + 264] = 0\n 35708: u64 [sp + 256] = 0\n 35712: a0 = 0x4e487b7100000000\n 35722: a1 = sp + 0x100\n 35726: u64 [sp + 0x118] = a0\n 35730: a0 = 0\n 35732: ra = 464, jump @8\n      : @490 [@dyn 232] (gas: 8)\n 35739: u64 [sp + 248] = 0\n 35743: u64 [sp + 240] = 0\n 35747: u64 [sp + 224] = 0x11\n 35752: a0 = 0x4\n 35755: a1 = sp + 0xe0\n 35759: u64 [sp + 232] = 0\n 35763: ra = 0x1d4\n 35767: jump @8\n      : @491 (gas: 8)\n 35771: u64 [sp + 336] = 0\n 35775: u64 [sp + 328] = 0\n 35779: u64 [sp + 320] = 0\n 35783: a0 = 0x4e487b7100000000\n 35793: a1 = sp + 0x140\n 35797: u64 [sp + 0x158] = a0\n 35801: a0 = 0\n 35803: ra = 466, jump @8\n      : @492 [@dyn 233] (gas: 7)\n 35810: u64 [sp + 312] = 0\n 35814: u64 [sp + 304] = 0\n 35818: u64 [sp + 288] = 0x11\n 35823: a0 = 0x4\n 35826: a1 = sp + 0x120\n 35830: u64 [sp + 296] = 0\n 35834: ra = 468, jump @8\n      : @493 [@dyn 234] (gas: 3)\n 35841: a1 = 0x24\n 35844: a0 = 0\n 35846: ra = 470, jump @0\n      : @494 [@dyn 235] (gas: 6)\n 35853: i32 a1 = a0 + 0\n 35855: a0 = 0x1\n 35858: a2 = 0x24\n 35861: ra = 0x1d8\n 35865: ecalli 14 // 'seal_return'\n 35867: fallthrough\n      : @495 [@dyn 236] (gas: 12)\n 35868: a1 = u64 [a0 + 0x10]\n 35871: a2 = u64 [a0 + 0x18]\n 35874: a3 = u64 [a0 + 0x8]\n 35877: a0 = u64 [a0]\n 35879: a2 = a2 | a3\n 35882: a3 = a0 | a1\n 35885: a3 = a3 | a2\n 35888: a3 = a3 >> 0x20\n 35891: a1 = a1 | a2\n 35894: a1 = a1 << 0x20\n 35897: a1 = a1 | a3\n 35900: jump @498 if a1 != 0\n      : @496 (gas: 8)\n 35904: sp = sp + 0xffffffffffffffe8\n 35907: u64 [sp + 0x10] = ra\n 35910: u64 [sp + 0x8] = s0\n 35913: u64 [sp] = s1\n 35915: i32 a0 = a0 + 0\n 35917: a1 = 0x20\n 35920: s1 = 0x20\n 35923: ra = 474, jump @0\n      : @497 [@dyn 237] (gas: 42)\n 35930: u8 [a0 + 31] = 0\n 35933: u8 [a0 + 30] = 0\n 35936: u8 [a0 + 29] = 0\n 35939: u8 [a0 + 28] = 0\n 35942: u8 [a0 + 27] = 0\n 35945: u8 [a0 + 26] = 0\n 35948: u8 [a0 + 25] = 0\n 35951: u8 [a0 + 24] = 0\n 35954: u8 [a0 + 23] = 0\n 35957: u8 [a0 + 22] = 0\n 35960: u8 [a0 + 21] = 0\n 35963: u8 [a0 + 20] = 0x72\n 35967: u8 [a0 + 19] = 0x6f\n 35971: u8 [a0 + 18] = 0x74\n 35975: a4 = 0x61\n 35978: u8 [a0 + 0x11] = a4\n 35981: a5 = 0x69\n 35984: u8 [a0 + 0x10] = a5\n 35987: u8 [a0 + 15] = 0x74\n 35991: u8 [a0 + 0xe] = a5\n 35994: u8 [a0 + 13] = 0x6e\n 35998: u8 [a0 + 0xc] = a5\n 36001: u8 [a0 + 0xb] = s1\n 36004: u8 [a0 + 10] = 0x74\n 36008: u8 [a0 + 9] = 0x6f\n 36012: u8 [a0 + 8] = 0x6e\n 36016: u8 [a0 + 0x7] = s1\n 36019: a3 = 0x65\n 36022: u8 [a0 + 0x6] = a3\n 36025: u8 [a0 + 5] = 0x72\n 36029: u8 [a0 + 0x4] = a4\n 36032: u8 [a0 + 0x3] = s1\n 36035: a2 = 0x75\n 36038: u8 [a0 + 0x2] = a2\n 36041: u8 [a0 + 1] = 0x6f\n 36045: a1 = 0x79\n 36048: u8 [a0] = a1\n 36050: ra = u64 [sp + 0x10]\n 36053: s0 = u64 [sp + 0x8]\n 36056: s1 = u64 [sp]\n 36058: sp = sp + 0x18\n 36061: ret\n      : @498 (gas: 1)\n 36063: trap\n      : @499 (gas: 17)\n 36064: sp = sp + 0xffffffffffffffa0\n 36067: u64 [sp + 0x58] = ra\n 36070: u64 [sp + 0x50] = s0\n 36073: u64 [sp + 0x48] = s1\n 36076: a3 = u64 [a1 + 0x18]\n 36079: a4 = u64 [a1 + 0x10]\n 36082: a5 = u64 [a1 + 0x8]\n 36085: s1 = u64 [a1]\n 36087: a1 = a5 | a3\n 36090: a2 = s1 | a4\n 36093: a2 = a2 | a1\n 36096: a2 = a2 >> 0x20\n 36099: a1 = a1 | a4\n 36102: a1 = a1 << 0x20\n 36105: a1 = a1 | a2\n 36108: u64 [sp + 0x28] = a0\n 36111: jump @506 if a1 != 0\n      : @500 (gas: 19)\n 36115: a0 = s1 + 0x20\n 36118: u64 [sp + 0x30] = a0\n 36121: a0 = a0 <u s1\n 36124: a1 = a5 + a0\n 36127: u64 [sp + 0x40] = a1\n 36130: u64 [sp + 0x8] = a5\n 36133: s0 = a1 <u a5\n 36136: s0 = a0 if a0 == 0\n 36139: s0 = s0 + a4\n 36142: u64 [sp + 0x10] = a4\n 36145: a0 = s0 <u a4\n 36148: u64 [sp + 0x18] = a3\n 36151: a0 = a0 + a3\n 36154: u64 [sp + 0x38] = a0\n 36157: u64 [sp] = s1\n 36159: i32 a0 = s1 + 0\n 36161: a1 = 0x20\n 36164: s1 = 0x20\n 36167: ra = 476, jump @0\n      : @501 [@dyn 238] (gas: 45)\n 36174: u8 [a0 + 0x1f] = s1\n 36177: a1 = u64 [sp + 0x30]\n 36180: s1 = a1\n 36182: a1 = a1 | s0\n 36185: a2 = u64 [sp + 0x40]\n 36188: a4 = u64 [sp + 0x38]\n 36191: a2 = a2 | a4\n 36194: a1 = a1 | a2\n 36197: a1 = a1 >> 0x20\n 36200: u64 [sp + 0x20] = s0\n 36203: a2 = a2 | s0\n 36206: a2 = a2 << 0x20\n 36209: a1 = a1 | a2\n 36212: u8 [a0 + 30] = 0\n 36215: u8 [a0 + 29] = 0\n 36218: u8 [a0 + 28] = 0\n 36221: u8 [a0 + 27] = 0\n 36224: u8 [a0 + 26] = 0\n 36227: u8 [a0 + 25] = 0\n 36230: u8 [a0 + 24] = 0\n 36233: u8 [a0 + 23] = 0\n 36236: u8 [a0 + 22] = 0\n 36239: u8 [a0 + 21] = 0\n 36242: u8 [a0 + 20] = 0\n 36245: u8 [a0 + 19] = 0\n 36248: u8 [a0 + 18] = 0\n 36251: u8 [a0 + 17] = 0\n 36254: u8 [a0 + 16] = 0\n 36257: u8 [a0 + 15] = 0\n 36260: u8 [a0 + 14] = 0\n 36263: u8 [a0 + 13] = 0\n 36266: u8 [a0 + 12] = 0\n 36269: u8 [a0 + 11] = 0\n 36272: u8 [a0 + 10] = 0\n 36275: u8 [a0 + 9] = 0\n 36278: u8 [a0 + 8] = 0\n 36281: u8 [a0 + 7] = 0\n 36284: u8 [a0 + 6] = 0\n 36287: u8 [a0 + 5] = 0\n 36290: u8 [a0 + 4] = 0\n 36293: u8 [a0 + 3] = 0\n 36296: u8 [a0 + 2] = 0\n 36299: u8 [a0 + 1] = 0\n 36302: u8 [a0 + 0] = 0\n 36304: jump @506 if a1 != 0\n      : @502 (gas: 4)\n 36308: i32 s0 = s1 + 0\n 36310: a1 = 0x20\n 36313: a0 = s0\n 36315: ra = 478, jump @0\n      : @503 [@dyn 239] (gas: 41)\n 36322: u8 [a0 + 31] = 0x15\n 36326: u8 [a0 + 30] = 0\n 36329: u8 [a0 + 29] = 0\n 36332: u8 [a0 + 28] = 0\n 36335: u8 [a0 + 27] = 0\n 36338: u8 [a0 + 26] = 0\n 36341: u8 [a0 + 25] = 0\n 36344: u8 [a0 + 24] = 0\n 36347: u8 [a0 + 23] = 0\n 36350: u8 [a0 + 22] = 0\n 36353: u8 [a0 + 21] = 0\n 36356: u8 [a0 + 20] = 0\n 36359: u8 [a0 + 19] = 0\n 36362: u8 [a0 + 18] = 0\n 36365: u8 [a0 + 17] = 0\n 36368: u8 [a0 + 16] = 0\n 36371: u8 [a0 + 15] = 0\n 36374: u8 [a0 + 14] = 0\n 36377: u8 [a0 + 13] = 0\n 36380: u8 [a0 + 12] = 0\n 36383: u8 [a0 + 11] = 0\n 36386: u8 [a0 + 10] = 0\n 36389: u8 [a0 + 9] = 0\n 36392: u8 [a0 + 8] = 0\n 36395: u8 [a0 + 7] = 0\n 36398: u8 [a0 + 6] = 0\n 36401: u8 [a0 + 5] = 0\n 36404: u8 [a0 + 4] = 0\n 36407: u8 [a0 + 3] = 0\n 36410: u8 [a0 + 2] = 0\n 36413: u8 [a0 + 1] = 0\n 36416: a1 = u64 [sp + 0x20]\n 36419: a2 = u64 [sp + 0x38]\n 36422: a1 = a1 | a2\n 36425: a2 = 0xffffffe0\n 36435: a2 = s1 <u a2\n 36438: a3 = u64 [sp + 0x40]\n 36441: a2 = 0 if a3 != 0\n 36443: a2 = 0 if a1 != 0\n 36445: u8 [a0 + 0] = 0\n 36447: jump @506 if a2 == 0\n      : @504 (gas: 3)\n 36451: i32 a0 = s0 + 0x20\n 36454: a1 = 0x20\n 36457: ra = 480, jump @0\n      : @505 [@dyn 240] (gas: 54)\n 36464: u8 [a0 + 16] = 0x69\n 36468: u8 [a0 + 14] = 0x69\n 36472: u8 [a0 + 12] = 0x69\n 36476: u8 [a0 + 18] = 0x74\n 36480: u8 [a0 + 15] = 0x74\n 36484: u8 [a0 + 10] = 0x74\n 36488: u8 [a0 + 13] = 0x6e\n 36492: u8 [a0 + 8] = 0x6e\n 36496: u8 [a0 + 6] = 0x65\n 36500: u8 [a0 + 20] = 0x72\n 36504: u8 [a0 + 5] = 0x72\n 36508: u8 [a0 + 17] = 0x61\n 36512: u8 [a0 + 4] = 0x61\n 36516: u8 [a0 + 31] = 0\n 36519: u8 [a0 + 30] = 0\n 36522: u8 [a0 + 29] = 0\n 36525: u8 [a0 + 28] = 0\n 36528: u8 [a0 + 27] = 0\n 36531: u8 [a0 + 26] = 0\n 36534: u8 [a0 + 25] = 0\n 36537: u8 [a0 + 24] = 0\n 36540: u8 [a0 + 23] = 0\n 36543: u8 [a0 + 22] = 0\n 36546: u8 [a0 + 21] = 0\n 36549: u8 [a0 + 11] = 0x20\n 36553: u8 [a0 + 7] = 0x20\n 36557: u8 [a0 + 3] = 0x20\n 36561: u8 [a0 + 2] = 0x75\n 36565: u8 [a0 + 19] = 0x6f\n 36569: u8 [a0 + 9] = 0x6f\n 36573: u8 [a0 + 1] = 0x6f\n 36577: u8 [a0 + 0] = 0x79\n 36580: a1 = u64 [sp]\n 36582: a0 = a1 + 0x60\n 36585: a1 = a0 <u a1\n 36588: a3 = u64 [sp + 0x8]\n 36591: a2 = a3 + a1\n 36594: a3 = a2 <u a3\n 36597: a3 = a1 if a1 == 0\n 36600: a1 = u64 [sp + 0x10]\n 36603: a3 = a3 + a1\n 36606: a1 = a3 <u a1\n 36609: a4 = u64 [sp + 0x18]\n 36612: a1 = a1 + a4\n 36615: a4 = u64 [sp + 0x28]\n 36618: u64 [a4] = a0\n 36620: u64 [a4 + 0x8] = a2\n 36623: u64 [a4 + 0x10] = a3\n 36626: u64 [a4 + 0x18] = a1\n 36629: ra = u64 [sp + 0x58]\n 36632: s0 = u64 [sp + 0x50]\n 36635: s1 = u64 [sp + 0x48]\n 36638: sp = sp + 0x60\n 36641: ret\n      : @506 (gas: 1)\n 36643: trap\n      : @507 [@dyn 241] (gas: 62)\n 36644: a1 = reverse s1\n 36646: a2 = u64 [sp + 0x70]\n 36649: a4 = reverse a2\n 36651: a2 = u64 [sp + 0x78]\n 36654: a3 = reverse a2\n 36656: u8 [a0 + 0x18] = a3\n 36659: u8 [a0 + 0x10] = a4\n 36662: u8 [a0 + 11] = 0\n 36665: u8 [a0 + 10] = 0\n 36668: u8 [a0 + 9] = 0\n 36671: u8 [a0 + 7] = 0\n 36674: u8 [a0 + 6] = 0\n 36677: u8 [a0 + 5] = 0\n 36680: u8 [a0 + 4] = 0\n 36683: u8 [a0 + 3] = 0\n 36686: u8 [a0 + 2] = 0\n 36689: u8 [a0 + 1] = 0\n 36692: u8 [a0 + 0] = 0\n 36694: a2 = a3 >> 0x38\n 36697: u8 [a0 + 0x1f] = a2\n 36700: a2 = a3 >> 0x30\n 36703: u8 [a0 + 0x1e] = a2\n 36706: a2 = a3 >> 0x28\n 36709: u8 [a0 + 0x1d] = a2\n 36712: a2 = a3 >> 0x20\n 36715: u64 [sp + 0x78] = a2\n 36718: u8 [a0 + 0x1c] = a2\n 36721: a2 = a3 >> 0x18\n 36724: u8 [a0 + 0x1b] = a2\n 36727: a2 = a3 >> 0x10\n 36730: u8 [a0 + 0x1a] = a2\n 36733: u64 [sp + 0x58] = a3\n 36736: a2 = a3 >> 0x8\n 36739: u8 [a0 + 0x19] = a2\n 36742: a2 = a4 >> 0x38\n 36745: u8 [a0 + 0x17] = a2\n 36748: a2 = a4 >> 0x30\n 36751: u8 [a0 + 0x16] = a2\n 36754: a2 = a4 >> 0x28\n 36757: u8 [a0 + 0x15] = a2\n 36760: a2 = a4 >> 0x20\n 36763: u64 [sp + 0x48] = a2\n 36766: u8 [a0 + 0x14] = a2\n 36769: a2 = a4 >> 0x18\n 36772: u8 [a0 + 0x13] = a2\n 36775: a2 = a4 >> 0x10\n 36778: u8 [a0 + 0x12] = a2\n 36781: u64 [sp + 0x50] = a4\n 36784: a2 = a4 >> 0x8\n 36787: u8 [a0 + 0x11] = a2\n 36790: u8 [a0 + 0x8] = a1\n 36793: a2 = a1 >> 0x38\n 36796: u8 [a0 + 0xf] = a2\n 36799: a2 = a1 >> 0x30\n 36802: u8 [a0 + 0xe] = a2\n 36805: a2 = a1 >> 0x28\n 36808: u8 [a0 + 0xd] = a2\n 36811: a1 = a1 >> 0x20\n 36814: u8 [a0 + 0xc] = a1\n 36817: a0 = 0x20\n 36820: a1 = 0x20\n 36823: ra = 484, jump @0\n      : @508 [@dyn 242] (gas: 35)\n 36830: u8 [a0 + 31] = 0x2\n 36834: u8 [a0 + 30] = 0\n 36837: u8 [a0 + 29] = 0\n 36840: u8 [a0 + 28] = 0\n 36843: u8 [a0 + 27] = 0\n 36846: u8 [a0 + 26] = 0\n 36849: u8 [a0 + 25] = 0\n 36852: u8 [a0 + 24] = 0\n 36855: u8 [a0 + 23] = 0\n 36858: u8 [a0 + 22] = 0\n 36861: u8 [a0 + 21] = 0\n 36864: u8 [a0 + 20] = 0\n 36867: u8 [a0 + 19] = 0\n 36870: u8 [a0 + 18] = 0\n 36873: u8 [a0 + 17] = 0\n 36876: u8 [a0 + 16] = 0\n 36879: u8 [a0 + 15] = 0\n 36882: u8 [a0 + 14] = 0\n 36885: u8 [a0 + 13] = 0\n 36888: u8 [a0 + 12] = 0\n 36891: u8 [a0 + 11] = 0\n 36894: u8 [a0 + 10] = 0\n 36897: u8 [a0 + 9] = 0\n 36900: u8 [a0 + 8] = 0\n 36903: u8 [a0 + 7] = 0\n 36906: u8 [a0 + 6] = 0\n 36909: u8 [a0 + 5] = 0\n 36912: u8 [a0 + 4] = 0\n 36915: u8 [a0 + 3] = 0\n 36918: u8 [a0 + 2] = 0\n 36921: u8 [a0 + 1] = 0\n 36924: u8 [a0 + 0] = 0\n 36926: a1 = 0x40\n 36929: a0 = 0\n 36931: ra = 486, jump @0\n      : @509 [@dyn 243] (gas: 43)\n 36938: i32 a0 = a0 + 0\n 36940: i32 a2 = sp + 0x1c0\n 36944: a1 = 0x40\n 36947: ecalli 8 // 'hash_keccak_256'\n 36949: a0 = u64 [sp + 0x1c0]\n 36953: a1 = u64 [sp + 0x1c8]\n 36957: a2 = u64 [sp + 0x1d0]\n 36961: a3 = u64 [sp + 0x1d8]\n 36965: a0 = reverse a0\n 36967: a1 = reverse a1\n 36969: a2 = reverse a2\n 36971: a3 = reverse a3\n 36973: a4 = a3 + 0x6\n 36976: a3 = a4 <u a3\n 36979: a5 = a2 + a3\n 36982: a2 = a5 <u a2\n 36985: a2 = a3 if a3 == 0\n 36988: a2 = a2 + a1\n 36991: a1 = a2 <u a1\n 36994: a0 = a0 + a1\n 36997: u64 [sp + 0x1a8] = a5\n 37001: u64 [sp + 0x1a0] = a4\n 37005: u64 [sp + 0x1b0] = a2\n 37009: u64 [sp + 0x1b8] = a0\n 37013: u64 [sp + 472] = 0\n 37017: u64 [sp + 464] = 0\n 37021: u64 [sp + 456] = 0\n 37025: u64 [sp + 448] = 0\n 37029: u32 [sp + 480] = 0x20\n 37034: i32 a1 = sp + 0x1a0\n 37038: i32 a3 = sp + 0x1c0\n 37042: i32 a4 = sp + 0x1e0\n 37046: a2 = 0xffffffffffffffff\n 37049: a0 = 0\n 37051: ecalli 7 // 'get_storage'\n 37053: a0 = u64 [sp + 0x1c8]\n 37057: u64 [sp + 0x70] = a0\n 37060: a0 = u64 [sp + 0x1c0]\n 37064: u64 [sp + 0x68] = a0\n 37067: s1 = u32 [sp + 0x1d0]\n 37071: i32 a0 = sp + 0xc0\n 37075: ecalli 5 // 'caller'\n 37077: fallthrough\n      : @510 (gas: 21)\n 37078: a0 = u64 [sp + 0xc8]\n 37082: a1 = u64 [sp + 0xc0]\n 37086: a2 = i32 [sp + 0xd0]\n 37090: a0 = reverse a0\n 37092: a3 = a0 >> 0x20\n 37095: a1 = reverse a1\n 37097: a4 = a1 << 0x20\n 37100: a3 = a3 | a4\n 37103: a0 = a0 << 0x20\n 37106: a2 = reverse a2\n 37108: a2 = a2 >> 0x20\n 37111: a0 = a0 | a2\n 37114: a1 = a1 >> 0x20\n 37117: a1 = a1 ^ s1\n 37120: a2 = u64 [sp + 0x68]\n 37123: a0 = a0 ^ a2\n 37126: a0 = a0 | a1\n 37129: a1 = u64 [sp + 0x70]\n 37132: a1 = a1 ^ a3\n 37135: a0 = a0 | a1\n 37138: jump @526 if a0 != 0\n      : @511 (gas: 27)\n 37142: i32 a0 = sp + 0xe0\n 37146: ecalli 5 // 'caller'\n 37148: a0 = i32 [sp + 0xf0]\n 37152: u64 [sp + 0x40] = a0\n 37155: a0 = u64 [sp + 0xe0]\n 37159: u64 [sp + 0x38] = a0\n 37162: a0 = u64 [sp + 0xe8]\n 37166: u64 [sp + 0x30] = a0\n 37169: a0 = u64 [sp + 0x50]\n 37172: a0 = a0 << 0x20\n 37175: a1 = u64 [sp + 0x60]\n 37178: a1 = reverse a1\n 37180: a1 = a1 >> 0x20\n 37183: a1 = a1 | a0\n 37186: a0 = u64 [sp + 0x58]\n 37189: a0 = a0 << 0x20\n 37192: a2 = u64 [sp + 0x48]\n 37195: a0 = a0 | a2\n 37198: a2 = u64 [sp + 0x78]\n 37201: u32 [sp + 0x110] = a2\n 37205: u64 [sp + 0x48] = a0\n 37208: u64 [sp + 0x108] = a0\n 37212: u64 [sp + 0x50] = a1\n 37215: u64 [sp + 0x100] = a1\n 37219: i32 a0 = sp + 0x100\n 37223: ecalli 6 // 'code_size'\n 37225: fallthrough\n      : @512 (gas: 1)\n 37226: jump @533 if a0 == 0\n      : @513 (gas: 3)\n 37230: a0 = 0x40\n 37233: a1 = 0x20\n 37236: ra = 488, jump @0\n      : @514 [@dyn 244] (gas: 106)\n 37243: a1 = u8 [a0 + 0x11]\n 37246: a2 = u8 [a0 + 0x10]\n 37249: a3 = u8 [a0 + 0x12]\n 37252: a4 = u8 [a0 + 0x13]\n 37255: a1 = a1 << 0x8\n 37258: a1 = a1 | a2\n 37261: a3 = a3 << 0x10\n 37264: a4 = a4 << 0x18\n 37267: a3 = a3 | a4\n 37270: a1 = a1 | a3\n 37273: a2 = u8 [a0 + 0x15]\n 37276: a3 = u8 [a0 + 0x14]\n 37279: a4 = u8 [a0 + 0x16]\n 37282: a5 = u8 [a0 + 0x17]\n 37285: a2 = a2 << 0x8\n 37288: a2 = a2 | a3\n 37291: a4 = a4 << 0x10\n 37294: a5 = a5 << 0x18\n 37297: a4 = a4 | a5\n 37300: a2 = a2 | a4\n 37303: a2 = a2 << 0x20\n 37306: t1 = a2 | a1\n 37309: a1 = u8 [a0 + 0x1]\n 37312: a2 = u8 [a0]\n 37314: a3 = u8 [a0 + 0x2]\n 37317: a4 = u8 [a0 + 0x3]\n 37320: a1 = a1 << 0x8\n 37323: a1 = a1 | a2\n 37326: a3 = a3 << 0x10\n 37329: a4 = a4 << 0x18\n 37332: a3 = a3 | a4\n 37335: a1 = a1 | a3\n 37338: a2 = u8 [a0 + 0x5]\n 37341: a3 = u8 [a0 + 0x4]\n 37344: a4 = u8 [a0 + 0x6]\n 37347: a5 = u8 [a0 + 0x7]\n 37350: a2 = a2 << 0x8\n 37353: a2 = a2 | a3\n 37356: a4 = a4 << 0x10\n 37359: a5 = a5 << 0x18\n 37362: a4 = a4 | a5\n 37365: a2 = a2 | a4\n 37368: a2 = a2 << 0x20\n 37371: t0 = a2 | a1\n 37374: a1 = u8 [a0 + 0x19]\n 37377: a2 = u8 [a0 + 0x18]\n 37380: a3 = u8 [a0 + 0x1a]\n 37383: a4 = u8 [a0 + 0x1b]\n 37386: a1 = a1 << 0x8\n 37389: a1 = a1 | a2\n 37392: a3 = a3 << 0x10\n 37395: a4 = a4 << 0x18\n 37398: a3 = a3 | a4\n 37401: a1 = a1 | a3\n 37404: a2 = u8 [a0 + 0x1d]\n 37407: a3 = u8 [a0 + 0x1c]\n 37410: a4 = u8 [a0 + 0x1e]\n 37413: a5 = u8 [a0 + 0x1f]\n 37416: a2 = a2 << 0x8\n 37419: a2 = a2 | a3\n 37422: a4 = a4 << 0x10\n 37425: a5 = a5 << 0x18\n 37428: a4 = a4 | a5\n 37431: a2 = a2 | a4\n 37434: a2 = a2 << 0x20\n 37437: a5 = a2 | a1\n 37440: a1 = u8 [a0 + 0x9]\n 37443: a2 = u8 [a0 + 0x8]\n 37446: a3 = u8 [a0 + 0xa]\n 37449: a4 = u8 [a0 + 0xb]\n 37452: a1 = a1 << 0x8\n 37455: a1 = a1 | a2\n 37458: a3 = a3 << 0x10\n 37461: a4 = a4 << 0x18\n 37464: a3 = a3 | a4\n 37467: a1 = a1 | a3\n 37470: a2 = u8 [a0 + 0xd]\n 37473: a3 = u8 [a0 + 0xc]\n 37476: a4 = u8 [a0 + 0xe]\n 37479: a0 = u8 [a0 + 0xf]\n 37482: a2 = a2 << 0x8\n 37485: a2 = a2 | a3\n 37488: a4 = a4 << 0x10\n 37491: a0 = a0 << 0x18\n 37494: a0 = a0 | a4\n 37497: a0 = a0 | a2\n 37500: a0 = a0 << 0x20\n 37503: a0 = a0 | a1\n 37506: u64 [sp + 0x8] = a0\n 37509: s1 = reverse a0\n 37511: u64 [sp + 0x10] = a5\n 37514: a2 = reverse a5\n 37516: u64 [sp + 0x20] = t0\n 37519: a1 = reverse t0\n 37521: u64 [sp + 0x18] = t1\n 37524: a0 = reverse t1\n 37526: u64 [sp + 0x70] = a0\n 37529: u64 [sp + 0x58] = a1\n 37532: a0 = a0 | a1\n 37535: a1 = a2 | s1\n 37538: a1 = a1 | a0\n 37541: a1 = a1 >> 0x20\n 37544: a0 = a0 | s1\n 37547: a0 = a0 << 0x20\n 37550: a0 = a0 | a1\n 37553: jump @531 if a0 != 0\n      : @515 (gas: 5)\n 37557: i32 a0 = a2 + 0\n 37559: a1 = 0x20\n 37562: u64 [sp + 0x60] = a0\n 37565: u64 [sp + 0x68] = a2\n 37568: ra = 490, jump @0\n      : @516 [@dyn 245] (gas: 44)\n 37575: u8 [a0 + 31] = 0\n 37578: u8 [a0 + 30] = 0\n 37581: u8 [a0 + 29] = 0\n 37584: u8 [a0 + 28] = 0\n 37587: u8 [a0 + 27] = 0\n 37590: u8 [a0 + 26] = 0\n 37593: u8 [a0 + 25] = 0\n 37596: u8 [a0 + 24] = 0\n 37599: u8 [a0 + 23] = 0\n 37602: u8 [a0 + 22] = 0\n 37605: u8 [a0 + 21] = 0\n 37608: u8 [a0 + 20] = 0\n 37611: u8 [a0 + 19] = 0\n 37614: u8 [a0 + 18] = 0\n 37617: u8 [a0 + 17] = 0\n 37620: u8 [a0 + 16] = 0\n 37623: u8 [a0 + 15] = 0\n 37626: u8 [a0 + 14] = 0\n 37629: u8 [a0 + 13] = 0\n 37632: u8 [a0 + 12] = 0\n 37635: u8 [a0 + 11] = 0\n 37638: u8 [a0 + 10] = 0\n 37641: u8 [a0 + 9] = 0\n 37644: u8 [a0 + 8] = 0\n 37647: u8 [a0 + 7] = 0\n 37650: u8 [a0 + 6] = 0\n 37653: u8 [a0 + 5] = 0\n 37656: u8 [a0 + 4] = 0\n 37659: u8 [a0 + 3] = 0x1\n 37663: u8 [a0 + 2] = 0xe4\n 37668: u8 [a0 + 1] = 0x37\n 37672: a4 = u64 [sp + 0x58]\n 37675: a4 = a4 | s1\n 37678: a1 = 0x100000000\n 37688: u64 [sp + 0x28] = a1\n 37691: a1 = 0xfffffffc\n 37701: a3 = u64 [sp + 0x68]\n 37704: a1 = a3 <u a1\n 37707: a3 = u64 [sp + 0x70]\n 37710: a1 = 0 if a3 != 0\n 37712: u64 [sp + 0x58] = a4\n 37715: a1 = 0 if a4 != 0\n 37717: u8 [a0 + 0] = 0x54\n 37720: jump @531 if a1 == 0\n      : @517 (gas: 19)\n 37724: a0 = u64 [sp + 0x30]\n 37727: a0 = reverse a0\n 37729: a1 = a0 >> 0x20\n 37732: a2 = u64 [sp + 0x38]\n 37735: a2 = reverse a2\n 37737: a3 = a2 << 0x20\n 37740: a1 = a1 | a3\n 37743: u64 [sp + 0x38] = a1\n 37746: a0 = a0 << 0x20\n 37749: a1 = u64 [sp + 0x40]\n 37752: a1 = reverse a1\n 37754: a1 = a1 >> 0x20\n 37757: a0 = a0 | a1\n 37760: u64 [sp + 0x40] = a0\n 37763: s1 = a2 >> 0x20\n 37766: a0 = u64 [sp + 0x60]\n 37769: i32 a0 = a0 + 0x4\n 37772: a1 = 0x20\n 37775: ra = 492, jump @0\n      : @518 [@dyn 246] (gas: 64)\n 37782: a1 = reverse s1\n 37784: a2 = u64 [sp + 0x38]\n 37787: a2 = reverse a2\n 37789: a3 = u64 [sp + 0x40]\n 37792: a3 = reverse a3\n 37794: a4 = a3 >> 0x38\n 37797: u8 [a0 + 0x1f] = a4\n 37800: a4 = a3 >> 0x30\n 37803: u8 [a0 + 0x1e] = a4\n 37806: a4 = a3 >> 0x28\n 37809: u8 [a0 + 0x1d] = a4\n 37812: a4 = a3 >> 0x20\n 37815: u8 [a0 + 0x1c] = a4\n 37818: a4 = a3 >> 0x18\n 37821: u8 [a0 + 0x1b] = a4\n 37824: a4 = a3 >> 0x10\n 37827: u8 [a0 + 0x1a] = a4\n 37830: a4 = a3 >> 0x8\n 37833: u8 [a0 + 0x19] = a4\n 37836: u8 [a0 + 0x18] = a3\n 37839: u8 [a0 + 0x10] = a2\n 37842: u8 [a0 + 11] = 0\n 37845: u8 [a0 + 10] = 0\n 37848: u8 [a0 + 9] = 0\n 37851: u8 [a0 + 7] = 0\n 37854: u8 [a0 + 6] = 0\n 37857: u8 [a0 + 5] = 0\n 37860: u8 [a0 + 4] = 0\n 37863: u8 [a0 + 3] = 0\n 37866: u8 [a0 + 2] = 0\n 37869: u8 [a0 + 1] = 0\n 37872: u8 [a0 + 0] = 0\n 37874: a3 = a2 >> 0x38\n 37877: u8 [a0 + 0x17] = a3\n 37880: a3 = a2 >> 0x30\n 37883: u8 [a0 + 0x16] = a3\n 37886: a3 = a2 >> 0x28\n 37889: u8 [a0 + 0x15] = a3\n 37892: a3 = a2 >> 0x20\n 37895: u8 [a0 + 0x14] = a3\n 37898: a3 = a2 >> 0x18\n 37901: u8 [a0 + 0x13] = a3\n 37904: a3 = a2 >> 0x10\n 37907: u8 [a0 + 0x12] = a3\n 37910: a2 = a2 >> 0x8\n 37913: u8 [a0 + 0x11] = a2\n 37916: u8 [a0 + 0x8] = a1\n 37919: a2 = a1 >> 0x38\n 37922: u8 [a0 + 0xf] = a2\n 37925: a2 = a1 >> 0x30\n 37928: u8 [a0 + 0xe] = a2\n 37931: a2 = a1 >> 0x28\n 37934: u8 [a0 + 0xd] = a2\n 37937: a1 = a1 >> 0x20\n 37940: a2 = u64 [sp + 0x28]\n 37943: a2 = a2 + 0xffffffffffffffdc\n 37946: a3 = u64 [sp + 0x68]\n 37949: a2 = a3 <u a2\n 37952: a3 = u64 [sp + 0x70]\n 37955: a2 = 0 if a3 != 0\n 37957: a3 = u64 [sp + 0x58]\n 37960: a2 = 0 if a3 != 0\n 37962: u8 [a0 + 0xc] = a1\n 37965: jump @531 if a2 == 0\n      : @519 (gas: 4)\n 37969: s1 = u64 [sp + 0x60]\n 37972: i32 a0 = s1 + 0x24\n 37975: a1 = 0x20\n 37978: ra = 494, jump @0\n      : @520 [@dyn 247] (gas: 46)\n 37985: u8 [a0 + 31] = 0\n 37988: u8 [a0 + 30] = 0\n 37991: u8 [a0 + 29] = 0\n 37994: u8 [a0 + 28] = 0\n 37997: u8 [a0 + 27] = 0\n 38000: u8 [a0 + 26] = 0\n 38003: u8 [a0 + 25] = 0\n 38006: u8 [a0 + 24] = 0\n 38009: u8 [a0 + 23] = 0\n 38012: u8 [a0 + 22] = 0\n 38015: u8 [a0 + 21] = 0\n 38018: u8 [a0 + 20] = 0\n 38021: u8 [a0 + 19] = 0\n 38024: u8 [a0 + 18] = 0\n 38027: u8 [a0 + 17] = 0\n 38030: u8 [a0 + 16] = 0\n 38033: u8 [a0 + 15] = 0\n 38036: u8 [a0 + 14] = 0\n 38039: u8 [a0 + 13] = 0\n 38042: u8 [a0 + 12] = 0\n 38045: u8 [a0 + 11] = 0\n 38048: u8 [a0 + 10] = 0\n 38051: u8 [a0 + 9] = 0\n 38054: u8 [a0 + 8] = 0\n 38057: u8 [a0 + 7] = 0\n 38060: u8 [a0 + 6] = 0\n 38063: u8 [a0 + 5] = 0\n 38066: u8 [a0 + 4] = 0\n 38069: u8 [a0 + 3] = 0\n 38072: u8 [a0 + 2] = 0\n 38075: u8 [a0 + 1] = 0\n 38078: u8 [a0 + 0] = 0\n 38080: ecalli 11 // 'ref_time_left'\n 38082: a0 = u64 [sp + 0x48]\n 38085: u64 [sp + 0x128] = a0\n 38089: a0 = u64 [sp + 0x50]\n 38092: u64 [sp + 0x120] = a0\n 38096: a0 = u64 [sp + 0x78]\n 38099: u32 [sp + 0x130] = a0\n 38103: u64 [sp + 344] = 0\n 38107: u64 [sp + 336] = 0\n 38111: u64 [sp + 328] = 0\n 38115: u64 [sp + 320] = 0\n 38119: a1 = 0x44\n 38122: a0 = s1\n 38124: ra = 496, jump @0\n      : @521 [@dyn 248] (gas: 4)\n 38131: u64 [sp + 0x78] = a0\n 38134: a0 = s1\n 38136: a1 = 0\n 38138: ra = 498, jump @0\n      : @522 [@dyn 249] (gas: 31)\n 38145: u32 [sp + 352] = 0\n 38149: u64 [sp + 408] = 0xffffffffffffffff\n 38154: u64 [sp + 400] = 0xffffffffffffffff\n 38159: u64 [sp + 392] = 0xffffffffffffffff\n 38164: u64 [sp + 384] = 0xffffffffffffffff\n 38169: a1 = sp + 0x120\n 38173: a1 = a1 << 0x20\n 38176: a1 = a1 >> 0x20\n 38179: a2 = 0x800000000\n 38189: s1 = a1 | a2\n 38192: a1 = sp + 0x140\n 38196: a1 = a1 << 0x20\n 38199: a1 = a1 >> 0x20\n 38202: a2 = sp + 0x180\n 38206: a2 = a2 << 0x20\n 38209: a3 = a2 | a1\n 38212: a1 = u64 [sp + 0x78]\n 38215: a1 = a1 << 0x20\n 38218: a1 = a1 >> 0x20\n 38221: a2 = 0x4400000000\n 38231: a4 = a1 | a2\n 38234: a0 = a0 << 0x20\n 38237: a0 = a0 >> 0x20\n 38240: a1 = sp + 0x160\n 38244: a1 = a1 << 0x20\n 38247: a5 = a1 | a0\n 38250: a1 = 0xffffffffffffffff\n 38253: a2 = 0xffffffffffffffff\n 38256: a0 = s1\n 38258: ecalli 1 // 'call'\n 38260: fallthrough\n      : @523 (gas: 1)\n 38261: jump @532 if a0 != 0\n      : @524 (gas: 4)\n 38265: ecalli 13 // 'return_data_size'\n 38267: a0 = 0x40\n 38270: a1 = 0x20\n 38273: ra = 500, jump @0\n      : @525 [@dyn 250] (gas: 70)\n 38280: a3 = u64 [sp + 0x10]\n 38283: u8 [a0 + 0x18] = a3\n 38286: a2 = u64 [sp + 0x18]\n 38289: a1 = a2 >> 0x38\n 38292: u8 [a0 + 0x17] = a1\n 38295: a1 = a2 >> 0x30\n 38298: u8 [a0 + 0x16] = a1\n 38301: a1 = a2 >> 0x28\n 38304: u8 [a0 + 0x15] = a1\n 38307: a1 = a2 >> 0x20\n 38310: u8 [a0 + 0x14] = a1\n 38313: a1 = a2 >> 0x18\n 38316: u8 [a0 + 0x13] = a1\n 38319: a1 = a2 >> 0x10\n 38322: u8 [a0 + 0x12] = a1\n 38325: a1 = a2 >> 0x8\n 38328: u8 [a0 + 0x11] = a1\n 38331: u8 [a0 + 0x10] = a2\n 38334: a2 = u64 [sp + 0x8]\n 38337: a1 = a2 >> 0x38\n 38340: u8 [a0 + 0xf] = a1\n 38343: a1 = a2 >> 0x30\n 38346: u8 [a0 + 0xe] = a1\n 38349: a1 = a2 >> 0x28\n 38352: u8 [a0 + 0xd] = a1\n 38355: a1 = a2 >> 0x20\n 38358: u8 [a0 + 0xc] = a1\n 38361: a1 = a2 >> 0x18\n 38364: u8 [a0 + 0xb] = a1\n 38367: a1 = a2 >> 0x10\n 38370: u8 [a0 + 0xa] = a1\n 38373: a1 = a2 >> 0x8\n 38376: u8 [a0 + 0x9] = a1\n 38379: u8 [a0 + 0x8] = a2\n 38382: a2 = u64 [sp + 0x20]\n 38385: a1 = a2 >> 0x38\n 38388: u8 [a0 + 0x7] = a1\n 38391: a1 = a2 >> 0x30\n 38394: u8 [a0 + 0x6] = a1\n 38397: a1 = a2 >> 0x28\n 38400: u8 [a0 + 0x5] = a1\n 38403: a1 = a2 >> 0x20\n 38406: u8 [a0 + 0x4] = a1\n 38409: a1 = a2 >> 0x18\n 38412: u8 [a0 + 0x3] = a1\n 38415: a1 = a2 >> 0x10\n 38418: u8 [a0 + 0x2] = a1\n 38421: a1 = a2 >> 0x8\n 38424: u8 [a0 + 0x1] = a1\n 38427: u8 [a0] = a2\n 38429: a1 = a3 >> 0x38\n 38432: u8 [a0 + 0x1f] = a1\n 38435: a1 = a3 >> 0x30\n 38438: u8 [a0 + 0x1e] = a1\n 38441: a1 = a3 >> 0x28\n 38444: u8 [a0 + 0x1d] = a1\n 38447: a1 = a3 >> 0x20\n 38450: u8 [a0 + 0x1c] = a1\n 38453: a1 = a3 >> 0x18\n 38456: u8 [a0 + 0x1b] = a1\n 38459: a1 = a3 >> 0x10\n 38462: u8 [a0 + 0x1a] = a1\n 38465: a1 = a3 >> 0x8\n 38468: u8 [a0 + 0x19] = a1\n 38471: sp = s0 + 0xfffffffffffffe00\n 38475: ra = u64 [sp + 0x1f8]\n 38479: s0 = u64 [sp + 0x1f0]\n 38483: s1 = u64 [sp + 0x1e8]\n 38487: sp = sp + 0x200\n 38491: ret\n      : @526 (gas: 3)\n 38493: a0 = 0x40\n 38496: a1 = 0x20\n 38499: ra = 502, jump @0\n      : @527 [@dyn 251] (gas: 103)\n 38506: a1 = u8 [a0 + 0x11]\n 38509: a2 = u8 [a0 + 0x10]\n 38512: a3 = u8 [a0 + 0x12]\n 38515: a4 = u8 [a0 + 0x13]\n 38518: a1 = a1 << 0x8\n 38521: a1 = a1 | a2\n 38524: a3 = a3 << 0x10\n 38527: a4 = a4 << 0x18\n 38530: a3 = a3 | a4\n 38533: a1 = a1 | a3\n 38536: a2 = u8 [a0 + 0x15]\n 38539: a3 = u8 [a0 + 0x14]\n 38542: a4 = u8 [a0 + 0x16]\n 38545: a5 = u8 [a0 + 0x17]\n 38548: a2 = a2 << 0x8\n 38551: a2 = a2 | a3\n 38554: a4 = a4 << 0x10\n 38557: a5 = a5 << 0x18\n 38560: a4 = a4 | a5\n 38563: a2 = a2 | a4\n 38566: a2 = a2 << 0x20\n 38569: t0 = a2 | a1\n 38572: a2 = u8 [a0 + 0x1]\n 38575: a3 = u8 [a0]\n 38577: a4 = u8 [a0 + 0x2]\n 38580: a5 = u8 [a0 + 0x3]\n 38583: a2 = a2 << 0x8\n 38586: a2 = a2 | a3\n 38589: a4 = a4 << 0x10\n 38592: a5 = a5 << 0x18\n 38595: a4 = a4 | a5\n 38598: a2 = a2 | a4\n 38601: a3 = u8 [a0 + 0x5]\n 38604: a4 = u8 [a0 + 0x4]\n 38607: a5 = u8 [a0 + 0x6]\n 38610: s1 = u8 [a0 + 0x7]\n 38613: a3 = a3 << 0x8\n 38616: a3 = a3 | a4\n 38619: a5 = a5 << 0x10\n 38622: s1 = s1 << 0x18\n 38625: a5 = a5 | s1\n 38628: a3 = a3 | a5\n 38631: a3 = a3 << 0x20\n 38634: a2 = a2 | a3\n 38637: a3 = u8 [a0 + 0x19]\n 38640: a4 = u8 [a0 + 0x18]\n 38643: a5 = u8 [a0 + 0x1a]\n 38646: s1 = u8 [a0 + 0x1b]\n 38649: a3 = a3 << 0x8\n 38652: a3 = a3 | a4\n 38655: a5 = a5 << 0x10\n 38658: s1 = s1 << 0x18\n 38661: a5 = a5 | s1\n 38664: a3 = a3 | a5\n 38667: a4 = u8 [a0 + 0x1d]\n 38670: a5 = u8 [a0 + 0x1c]\n 38673: s1 = u8 [a0 + 0x1e]\n 38676: a1 = u8 [a0 + 0x1f]\n 38679: a4 = a4 << 0x8\n 38682: a4 = a4 | a5\n 38685: s1 = s1 << 0x10\n 38688: a1 = a1 << 0x18\n 38691: a1 = a1 | s1\n 38694: a1 = a1 | a4\n 38697: a1 = a1 << 0x20\n 38700: a3 = a3 | a1\n 38703: a1 = u8 [a0 + 0x9]\n 38706: a4 = u8 [a0 + 0x8]\n 38709: a5 = u8 [a0 + 0xa]\n 38712: s1 = u8 [a0 + 0xb]\n 38715: a1 = a1 << 0x8\n 38718: a1 = a1 | a4\n 38721: a5 = a5 << 0x10\n 38724: s1 = s1 << 0x18\n 38727: a5 = a5 | s1\n 38730: a1 = a1 | a5\n 38733: a4 = u8 [a0 + 0xd]\n 38736: a5 = u8 [a0 + 0xc]\n 38739: s1 = u8 [a0 + 0xe]\n 38742: a0 = u8 [a0 + 0xf]\n 38745: a4 = a4 << 0x8\n 38748: a4 = a4 | a5\n 38751: s1 = s1 << 0x10\n 38754: a0 = a0 << 0x18\n 38757: a0 = a0 | s1\n 38760: a0 = a0 | a4\n 38763: a0 = a0 << 0x20\n 38766: a0 = a0 | a1\n 38769: s1 = reverse a0\n 38771: a1 = reverse a3\n 38773: a2 = reverse a2\n 38775: a0 = reverse t0\n 38777: u64 [sp + 0x78] = a0\n 38780: u64 [sp + 0x70] = a2\n 38783: a0 = a0 | a2\n 38786: a2 = a1\n 38788: a1 = a1 | s1\n 38791: a1 = a1 | a0\n 38794: a1 = a1 >> 0x20\n 38797: a0 = a0 | s1\n 38800: a0 = a0 << 0x20\n 38803: a0 = a0 | a1\n 38806: jump @531 if a0 != 0\n      : @528 (gas: 5)\n 38810: u64 [sp + 0x68] = a2\n 38813: i32 a0 = a2 + 0\n 38815: a1 = 0x20\n 38818: u64 [sp + 0x60] = a0\n 38821: ra = 504, jump @0\n      : @529 [@dyn 252] (gas: 50)\n 38828: u8 [a0 + 31] = 0\n 38831: u8 [a0 + 30] = 0\n 38834: u8 [a0 + 29] = 0\n 38837: u8 [a0 + 28] = 0\n 38840: u8 [a0 + 27] = 0\n 38843: u8 [a0 + 26] = 0\n 38846: u8 [a0 + 25] = 0\n 38849: u8 [a0 + 24] = 0\n 38852: u8 [a0 + 23] = 0\n 38855: u8 [a0 + 22] = 0\n 38858: u8 [a0 + 21] = 0\n 38861: u8 [a0 + 20] = 0\n 38864: u8 [a0 + 19] = 0\n 38867: u8 [a0 + 18] = 0\n 38870: u8 [a0 + 17] = 0\n 38873: u8 [a0 + 16] = 0\n 38876: u8 [a0 + 15] = 0\n 38879: u8 [a0 + 14] = 0\n 38882: u8 [a0 + 13] = 0\n 38885: u8 [a0 + 12] = 0\n 38888: u8 [a0 + 11] = 0\n 38891: u8 [a0 + 10] = 0\n 38894: u8 [a0 + 9] = 0\n 38897: u8 [a0 + 8] = 0\n 38900: u8 [a0 + 7] = 0\n 38903: u8 [a0 + 6] = 0\n 38906: u8 [a0 + 5] = 0\n 38909: u8 [a0 + 4] = 0\n 38912: u8 [a0 + 3] = 0xa0\n 38917: u8 [a0 + 2] = 0x79\n 38921: u8 [a0 + 1] = 0xc3\n 38926: u8 [a0 + 0] = 0x8\n 38929: a1 = u64 [sp + 0x68]\n 38932: a0 = a1 + 0x4\n 38935: a1 = a0 <u a1\n 38938: a3 = u64 [sp + 0x78]\n 38941: a2 = a3 + a1\n 38944: a3 = a2 <u a3\n 38947: a3 = a1 if a1 == 0\n 38950: a3 = a3 + s1\n 38953: a1 = a3 <u s1\n 38956: a4 = u64 [sp + 0x70]\n 38959: a4 = a4 + a1\n 38962: u64 [sp + 0x88] = a2\n 38966: u64 [sp + 0x80] = a0\n 38970: u64 [sp + 0x90] = a3\n 38974: a0 = sp + 0xa0\n 38978: a1 = sp + 0x80\n 38982: u64 [sp + 0x98] = a4\n 38986: ra = 506, jump @499\n      : @530 [@dyn 253] (gas: 30)\n 38992: a0 = u64 [sp + 0xa8]\n 38996: t0 = u64 [sp + 0xb8]\n 39000: t1 = u64 [sp + 0xa0]\n 39004: a3 = u64 [sp + 0xb0]\n 39008: a1 = u64 [sp + 0x78]\n 39011: a4 = a0 ^ a1\n 39014: a5 = a0 <u a1\n 39017: t2 = a1\n 39019: a2 = u64 [sp + 0x68]\n 39022: a1 = t1 <u a2\n 39025: a5 = a1 if a4 == 0\n 39028: a4 = a3 - s1\n 39031: a3 = a3 <u s1\n 39034: s1 = u64 [sp + 0x70]\n 39037: s1 = t0 - s1\n 39040: s1 = s1 - a3\n 39043: a3 = a4 <u a5\n 39046: s1 = s1 - a3\n 39049: a4 = a4 - a5\n 39052: a0 = a0 - t2\n 39055: a1 = a0 - a1\n 39058: a0 = t1 - a2\n 39061: a1 = a1 | s1\n 39064: a2 = a0 | a4\n 39067: a2 = a2 | a1\n 39070: a1 = a1 | a4\n 39073: a2 = a2 >> 0x20\n 39076: a1 = a1 << 0x20\n 39079: a1 = a1 | a2\n 39082: jump @535 if a1 == 0\n      : @531 (gas: 1)\n 39085: trap\n      : @532 (gas: 1)\n 39086: ra = 508, jump @375\n      : @533 [@dyn 254] (gas: 2)\n 39092: a1 = 0\n 39094: ra = 510, jump @0\n      : @534 [@dyn 255] (gas: 5)\n 39101: i32 a1 = a0 + 0\n 39103: a0 = 0x1\n 39106: a2 = 0\n 39108: ecalli 14 // 'seal_return'\n 39110: fallthrough\n      : @535 (gas: 4)\n 39111: i32 s1 = a0 + 0\n 39113: a0 = u64 [sp + 0x60]\n 39116: a1 = s1\n 39118: ra = 512, jump @0\n      : @536 [@dyn 256] (gas: 6)\n 39125: i32 a1 = a0 + 0\n 39127: a0 = 0x1\n 39130: a2 = s1\n 39132: ra = 0x202\n 39136: ecalli 14 // 'seal_return'\n 39138: fallthrough\n      : @537 [@dyn 257] (gas: 14)\n 39139: sp = sp + 0xffffffffffffffa0\n 39142: u64 [sp + 0x58] = ra\n 39145: u64 [sp + 0x50] = s0\n 39148: u64 [sp + 0x48] = s1\n 39151: s0 = sp + 0x60\n 39154: sp = sp & 0xfffffffffffffff0\n 39157: s1 = a0\n 39159: u64 [sp + 24] = 0\n 39162: u64 [sp + 16] = 0\n 39165: u64 [sp + 0] = 0xe0\n 39169: a0 = sp + 0x20\n 39172: a1 = sp\n 39174: u64 [sp + 8] = 0\n 39177: ra = 516, jump @327\n      : @538 [@dyn 258] (gas: 14)\n 39183: a0 = u64 [sp + 0x30]\n 39186: a1 = u64 [sp + 0x38]\n 39189: a2 = u64 [sp + 0x20]\n 39192: a3 = u64 [sp + 0x28]\n 39195: u64 [s1 + 0x10] = a0\n 39198: u64 [s1 + 0x18] = a1\n 39201: u64 [s1] = a2\n 39203: u64 [s1 + 0x8] = a3\n 39206: sp = s0 + 0xffffffffffffffa0\n 39209: ra = u64 [sp + 0x58]\n 39212: s0 = u64 [sp + 0x50]\n 39215: s1 = u64 [sp + 0x48]\n 39218: sp = sp + 0x60\n 39221: ret\n      : @539 [@dyn 259] (gas: 15)\n 39223: a2 = u64 [sp + 0x78]\n 39226: s1 = u64 [sp + 0x70]\n 39229: a0 = u64 [sp + 0x68]\n 39232: a1 = u64 [sp + 0x60]\n 39235: u64 [sp + 0x30] = a0\n 39238: u64 [sp + 0x18] = a2\n 39241: a0 = a0 | a2\n 39244: u64 [sp + 0x38] = a1\n 39247: a1 = a1 | s1\n 39250: a1 = a1 | a0\n 39253: a1 = a1 >> 0x20\n 39256: a0 = a0 | s1\n 39259: a0 = a0 << 0x20\n 39262: a0 = a0 | a1\n 39265: jump @554 if a0 != 0\n      : @540 (gas: 4)\n 39269: a0 = i32 [sp + 0x38]\n 39272: a1 = 0x20\n 39275: u64 [sp + 0x28] = a0\n 39278: ra = 520, jump @0\n      : @541 [@dyn 260] (gas: 44)\n 39285: u8 [a0 + 31] = 0\n 39288: u8 [a0 + 30] = 0\n 39291: u8 [a0 + 29] = 0\n 39294: u8 [a0 + 28] = 0\n 39297: u8 [a0 + 27] = 0\n 39300: u8 [a0 + 26] = 0\n 39303: u8 [a0 + 25] = 0\n 39306: u8 [a0 + 24] = 0\n 39309: u8 [a0 + 23] = 0\n 39312: u8 [a0 + 22] = 0\n 39315: u8 [a0 + 21] = 0\n 39318: u8 [a0 + 20] = 0\n 39321: u8 [a0 + 19] = 0\n 39324: u8 [a0 + 18] = 0\n 39327: u8 [a0 + 17] = 0\n 39330: u8 [a0 + 16] = 0\n 39333: u8 [a0 + 15] = 0\n 39336: u8 [a0 + 14] = 0\n 39339: u8 [a0 + 13] = 0\n 39342: u8 [a0 + 12] = 0\n 39345: u8 [a0 + 11] = 0\n 39348: u8 [a0 + 10] = 0\n 39351: u8 [a0 + 9] = 0\n 39354: u8 [a0 + 8] = 0\n 39357: u8 [a0 + 7] = 0\n 39360: u8 [a0 + 6] = 0\n 39363: u8 [a0 + 5] = 0\n 39366: u8 [a0 + 4] = 0\n 39369: u8 [a0 + 3] = 0\n 39372: u8 [a0 + 2] = 0\n 39375: u8 [a0 + 1] = 0\n 39378: u64 [sp + 0x8] = s1\n 39381: a3 = u64 [sp + 0x18]\n 39384: a3 = a3 | s1\n 39387: s1 = 0x100000000\n 39397: a1 = 0xffffffe0\n 39407: a2 = u64 [sp + 0x38]\n 39410: a1 = a2 <u a1\n 39413: a2 = u64 [sp + 0x30]\n 39416: a1 = 0 if a2 != 0\n 39418: u64 [sp + 0x20] = a3\n 39421: a1 = 0 if a3 != 0\n 39423: u8 [a0 + 0] = 0\n 39425: jump @554 if a1 == 0\n      : @542 (gas: 4)\n 39429: a0 = u64 [sp + 0x28]\n 39432: i32 a0 = a0 + 0x20\n 39435: a1 = 0x20\n 39438: ra = 522, jump @0\n      : @543 [@dyn 261] (gas: 40)\n 39445: u8 [a0 + 31] = 0\n 39448: u8 [a0 + 30] = 0\n 39451: u8 [a0 + 29] = 0\n 39454: u8 [a0 + 28] = 0\n 39457: u8 [a0 + 27] = 0\n 39460: u8 [a0 + 26] = 0\n 39463: u8 [a0 + 25] = 0\n 39466: u8 [a0 + 24] = 0\n 39469: u8 [a0 + 23] = 0\n 39472: u8 [a0 + 22] = 0\n 39475: u8 [a0 + 21] = 0\n 39478: u8 [a0 + 20] = 0\n 39481: u8 [a0 + 19] = 0\n 39484: u8 [a0 + 18] = 0\n 39487: u8 [a0 + 17] = 0\n 39490: u8 [a0 + 16] = 0\n 39493: u8 [a0 + 15] = 0\n 39496: u8 [a0 + 14] = 0\n 39499: u8 [a0 + 13] = 0\n 39502: u8 [a0 + 12] = 0\n 39505: u8 [a0 + 11] = 0\n 39508: u8 [a0 + 10] = 0\n 39511: u8 [a0 + 9] = 0\n 39514: u8 [a0 + 8] = 0\n 39517: u8 [a0 + 7] = 0\n 39520: u8 [a0 + 6] = 0\n 39523: u8 [a0 + 5] = 0\n 39526: u8 [a0 + 4] = 0\n 39529: u8 [a0 + 3] = 0\n 39532: u8 [a0 + 2] = 0\n 39535: u8 [a0 + 1] = 0\n 39538: a1 = s1 + 0xffffffffffffffc0\n 39541: a2 = u64 [sp + 0x38]\n 39544: a1 = a2 <u a1\n 39547: a2 = u64 [sp + 0x30]\n 39550: a1 = 0 if a2 != 0\n 39552: a2 = u64 [sp + 0x20]\n 39555: a1 = 0 if a2 != 0\n 39557: u8 [a0 + 0] = 0\n 39559: jump @554 if a1 == 0\n      : @544 (gas: 4)\n 39563: a0 = u64 [sp + 0x28]\n 39566: i32 a0 = a0 + 0x40\n 39569: a1 = 0x20\n 39572: ra = 524, jump @0\n      : @545 [@dyn 262] (gas: 41)\n 39579: u8 [a0 + 31] = 0\n 39582: u8 [a0 + 30] = 0\n 39585: u8 [a0 + 29] = 0\n 39588: u8 [a0 + 28] = 0\n 39591: u8 [a0 + 27] = 0\n 39594: u8 [a0 + 26] = 0\n 39597: u8 [a0 + 25] = 0\n 39600: u8 [a0 + 24] = 0\n 39603: u8 [a0 + 23] = 0\n 39606: u8 [a0 + 22] = 0\n 39609: u8 [a0 + 21] = 0\n 39612: u8 [a0 + 20] = 0\n 39615: u8 [a0 + 19] = 0\n 39618: u8 [a0 + 18] = 0\n 39621: u8 [a0 + 17] = 0\n 39624: u8 [a0 + 16] = 0\n 39627: u8 [a0 + 15] = 0\n 39630: u8 [a0 + 14] = 0\n 39633: u8 [a0 + 13] = 0\n 39636: u8 [a0 + 12] = 0\n 39639: u8 [a0 + 11] = 0\n 39642: u8 [a0 + 10] = 0\n 39645: u8 [a0 + 9] = 0\n 39648: u8 [a0 + 8] = 0\n 39651: u8 [a0 + 7] = 0\n 39654: u8 [a0 + 6] = 0\n 39657: u8 [a0 + 5] = 0\n 39660: u8 [a0 + 4] = 0\n 39663: u8 [a0 + 3] = 0\n 39666: u8 [a0 + 2] = 0\n 39669: u8 [a0 + 1] = 0\n 39672: s1 = 0x100000000\n 39682: a1 = 0xffffffa0\n 39692: a2 = u64 [sp + 0x38]\n 39695: a1 = a2 <u a1\n 39698: a2 = u64 [sp + 0x30]\n 39701: a1 = 0 if a2 != 0\n 39703: a2 = u64 [sp + 0x20]\n 39706: a1 = 0 if a2 != 0\n 39708: u8 [a0 + 0] = 0\n 39710: jump @554 if a1 == 0\n      : @546 (gas: 4)\n 39714: a0 = u64 [sp + 0x28]\n 39717: i32 a0 = a0 + 0x60\n 39720: a1 = 0x20\n 39723: ra = 526, jump @0\n      : @547 [@dyn 263] (gas: 40)\n 39730: u8 [a0 + 31] = 0\n 39733: u8 [a0 + 30] = 0\n 39736: u8 [a0 + 29] = 0\n 39739: u8 [a0 + 28] = 0\n 39742: u8 [a0 + 27] = 0\n 39745: u8 [a0 + 26] = 0\n 39748: u8 [a0 + 25] = 0\n 39751: u8 [a0 + 24] = 0\n 39754: u8 [a0 + 23] = 0\n 39757: u8 [a0 + 22] = 0\n 39760: u8 [a0 + 21] = 0\n 39763: u8 [a0 + 20] = 0\n 39766: u8 [a0 + 19] = 0\n 39769: u8 [a0 + 18] = 0\n 39772: u8 [a0 + 17] = 0\n 39775: u8 [a0 + 16] = 0\n 39778: u8 [a0 + 15] = 0\n 39781: u8 [a0 + 14] = 0\n 39784: u8 [a0 + 13] = 0\n 39787: u8 [a0 + 12] = 0\n 39790: u8 [a0 + 11] = 0\n 39793: u8 [a0 + 10] = 0\n 39796: u8 [a0 + 9] = 0\n 39799: u8 [a0 + 8] = 0\n 39802: u8 [a0 + 7] = 0\n 39805: u8 [a0 + 6] = 0\n 39808: u8 [a0 + 5] = 0\n 39811: u8 [a0 + 4] = 0\n 39814: u8 [a0 + 3] = 0\n 39817: u8 [a0 + 2] = 0\n 39820: u8 [a0 + 1] = 0\n 39823: a1 = s1 + 0xffffffffffffff80\n 39826: a2 = u64 [sp + 0x38]\n 39829: a1 = a2 <u a1\n 39832: a2 = u64 [sp + 0x30]\n 39835: a1 = 0 if a2 != 0\n 39837: a2 = u64 [sp + 0x20]\n 39840: a1 = 0 if a2 != 0\n 39842: u8 [a0 + 0] = 0\n 39844: jump @554 if a1 == 0\n      : @548 (gas: 4)\n 39848: a0 = u64 [sp + 0x28]\n 39851: i32 a0 = a0 + 0x80\n 39855: a1 = 0x20\n 39858: ra = 528, jump @0\n      : @549 [@dyn 264] (gas: 41)\n 39865: u8 [a0 + 31] = 0\n 39868: u8 [a0 + 30] = 0\n 39871: u8 [a0 + 29] = 0\n 39874: u8 [a0 + 28] = 0\n 39877: u8 [a0 + 27] = 0\n 39880: u8 [a0 + 26] = 0\n 39883: u8 [a0 + 25] = 0\n 39886: u8 [a0 + 24] = 0\n 39889: u8 [a0 + 23] = 0\n 39892: u8 [a0 + 22] = 0\n 39895: u8 [a0 + 21] = 0\n 39898: u8 [a0 + 20] = 0\n 39901: u8 [a0 + 19] = 0\n 39904: u8 [a0 + 18] = 0\n 39907: u8 [a0 + 17] = 0\n 39910: u8 [a0 + 16] = 0\n 39913: u8 [a0 + 15] = 0\n 39916: u8 [a0 + 14] = 0\n 39919: u8 [a0 + 13] = 0\n 39922: u8 [a0 + 12] = 0\n 39925: u8 [a0 + 11] = 0\n 39928: u8 [a0 + 10] = 0\n 39931: u8 [a0 + 9] = 0\n 39934: u8 [a0 + 8] = 0\n 39937: u8 [a0 + 7] = 0\n 39940: u8 [a0 + 6] = 0\n 39943: u8 [a0 + 5] = 0\n 39946: u8 [a0 + 4] = 0\n 39949: u8 [a0 + 3] = 0\n 39952: u8 [a0 + 2] = 0\n 39955: u8 [a0 + 1] = 0\n 39958: s1 = 0x100000000\n 39968: a1 = 0xffffff60\n 39978: a2 = u64 [sp + 0x38]\n 39981: a1 = a2 <u a1\n 39984: a2 = u64 [sp + 0x30]\n 39987: a1 = 0 if a2 != 0\n 39989: a2 = u64 [sp + 0x20]\n 39992: a1 = 0 if a2 != 0\n 39994: u8 [a0 + 0] = 0\n 39996: jump @554 if a1 == 0\n      : @550 (gas: 4)\n 40000: a0 = u64 [sp + 0x28]\n 40003: i32 a0 = a0 + 0xa0\n 40007: a1 = 0x20\n 40010: ra = 530, jump @0\n      : @551 [@dyn 265] (gas: 40)\n 40017: u8 [a0 + 31] = 0\n 40020: u8 [a0 + 30] = 0\n 40023: u8 [a0 + 29] = 0\n 40026: u8 [a0 + 28] = 0\n 40029: u8 [a0 + 27] = 0\n 40032: u8 [a0 + 26] = 0\n 40035: u8 [a0 + 25] = 0\n 40038: u8 [a0 + 24] = 0\n 40041: u8 [a0 + 23] = 0\n 40044: u8 [a0 + 22] = 0\n 40047: u8 [a0 + 21] = 0\n 40050: u8 [a0 + 20] = 0\n 40053: u8 [a0 + 19] = 0\n 40056: u8 [a0 + 18] = 0\n 40059: u8 [a0 + 17] = 0\n 40062: u8 [a0 + 16] = 0\n 40065: u8 [a0 + 15] = 0\n 40068: u8 [a0 + 14] = 0\n 40071: u8 [a0 + 13] = 0\n 40074: u8 [a0 + 12] = 0\n 40077: u8 [a0 + 11] = 0\n 40080: u8 [a0 + 10] = 0\n 40083: u8 [a0 + 9] = 0\n 40086: u8 [a0 + 8] = 0\n 40089: u8 [a0 + 7] = 0\n 40092: u8 [a0 + 6] = 0\n 40095: u8 [a0 + 5] = 0\n 40098: u8 [a0 + 4] = 0\n 40101: u8 [a0 + 3] = 0\n 40104: u8 [a0 + 2] = 0\n 40107: u8 [a0 + 1] = 0\n 40110: a1 = s1 + 0xffffffffffffff40\n 40114: a2 = u64 [sp + 0x38]\n 40117: a1 = a2 <u a1\n 40120: a2 = u64 [sp + 0x30]\n 40123: a1 = 0 if a2 != 0\n 40125: a2 = u64 [sp + 0x20]\n 40128: a1 = 0 if a2 != 0\n 40130: u8 [a0 + 0] = 0\n 40132: jump @554 if a1 == 0\n      : @552 (gas: 4)\n 40136: a0 = u64 [sp + 0x28]\n 40139: i32 a0 = a0 + 0xc0\n 40143: a1 = 0x20\n 40146: ra = 532, jump @0\n      : @553 [@dyn 266] (gas: 47)\n 40153: u8 [a0 + 31] = 0\n 40156: u8 [a0 + 30] = 0\n 40159: u8 [a0 + 29] = 0\n 40162: u8 [a0 + 28] = 0\n 40165: u8 [a0 + 27] = 0\n 40168: u8 [a0 + 26] = 0\n 40171: u8 [a0 + 25] = 0\n 40174: u8 [a0 + 24] = 0\n 40177: u8 [a0 + 23] = 0\n 40180: u8 [a0 + 22] = 0\n 40183: u8 [a0 + 21] = 0\n 40186: u8 [a0 + 20] = 0\n 40189: u8 [a0 + 19] = 0\n 40192: u8 [a0 + 18] = 0\n 40195: u8 [a0 + 17] = 0\n 40198: u8 [a0 + 16] = 0\n 40201: u8 [a0 + 15] = 0\n 40204: u8 [a0 + 14] = 0\n 40207: u8 [a0 + 13] = 0\n 40210: u8 [a0 + 12] = 0\n 40213: u8 [a0 + 11] = 0\n 40216: u8 [a0 + 10] = 0\n 40219: u8 [a0 + 9] = 0\n 40222: u8 [a0 + 8] = 0\n 40225: u8 [a0 + 7] = 0\n 40228: u8 [a0 + 6] = 0\n 40231: u8 [a0 + 5] = 0\n 40234: u8 [a0 + 4] = 0\n 40237: u8 [a0 + 3] = 0\n 40240: u8 [a0 + 2] = 0\n 40243: u8 [a0 + 1] = 0\n 40246: u8 [a0 + 0] = 0\n 40248: a0 = u64 [sp + 0x10]\n 40251: a1 = u64 [sp + 0x38]\n 40254: u64 [a0] = a1\n 40256: a1 = u64 [sp + 0x18]\n 40259: u64 [a0 + 0x18] = a1\n 40262: a1 = u64 [sp + 0x30]\n 40265: u64 [a0 + 0x8] = a1\n 40268: a1 = u64 [sp + 0x8]\n 40271: u64 [a0 + 0x10] = a1\n 40274: sp = s0 + 0xffffffffffffff60\n 40278: ra = u64 [sp + 0x98]\n 40282: s0 = u64 [sp + 0x90]\n 40286: s1 = u64 [sp + 0x88]\n 40290: sp = sp + 0xa0\n 40294: ret\n      : @554 (gas: 1)\n 40296: trap\n      : @555 [@dyn 267] (gas: 27)\n 40297: a0 = u64 [sp + 0xb8]\n 40301: u64 [sp + 0x38] = a0\n 40304: s1 = u64 [sp + 0xb0]\n 40308: a0 = u64 [sp + 0xa8]\n 40312: u64 [sp + 0x70] = a0\n 40315: a0 = u64 [sp + 0xa0]\n 40319: u64 [sp + 0x78] = a0\n 40322: a0 = u64 [sp + 0x60]\n 40325: u64 [sp + 0xd8] = a0\n 40329: a0 = u64 [sp + 0x68]\n 40332: u64 [sp + 0xd0] = a0\n 40336: a0 = u64 [sp + 0x58]\n 40339: u64 [sp + 0xc8] = a0\n 40343: a0 = u64 [sp + 0x50]\n 40346: u64 [sp + 0xc0] = a0\n 40350: u64 [sp + 248] = 0\n 40354: u64 [sp + 240] = 0\n 40358: u64 [sp + 232] = 0\n 40362: u64 [sp + 224] = 0\n 40366: u32 [sp + 256] = 0x20\n 40371: i32 a1 = sp + 0xc0\n 40375: i32 a3 = sp + 0xe0\n 40379: i32 a4 = sp + 0x100\n 40383: a2 = 0xffffffffffffffff\n 40386: a0 = 0\n 40388: ecalli 7 // 'get_storage'\n 40390: fallthrough\n      : @556 (gas: 12)\n 40391: a0 = u64 [sp + 0x38]\n 40394: a1 = u64 [sp + 0x70]\n 40397: a0 = a0 | a1\n 40400: a1 = u64 [sp + 0x78]\n 40403: a1 = a1 | s1\n 40406: a1 = a1 | a0\n 40409: a1 = a1 >> 0x20\n 40412: u64 [sp + 0x30] = s1\n 40415: a0 = a0 | s1\n 40418: a0 = a0 << 0x20\n 40421: a0 = a0 | a1\n 40424: jump @577 if a0 != 0\n      : @557 (gas: 11)\n 40428: s1 = u64 [sp + 0xf8]\n 40432: a0 = u64 [sp + 0xf0]\n 40436: u64 [sp + 0x20] = a0\n 40439: a0 = u64 [sp + 0xe8]\n 40443: u64 [sp + 0x28] = a0\n 40446: a0 = u64 [sp + 0xe0]\n 40450: u64 [sp + 0x40] = a0\n 40453: a0 = i32 [sp + 0x78]\n 40456: a1 = 0x20\n 40459: u64 [sp + 0x48] = a0\n 40462: ra = 536, jump @0\n      : @558 [@dyn 268] (gas: 95)\n 40469: a1 = reverse s1\n 40471: a2 = u64 [sp + 0x20]\n 40474: a2 = reverse a2\n 40476: a3 = u64 [sp + 0x28]\n 40479: a3 = reverse a3\n 40481: a4 = u64 [sp + 0x40]\n 40484: a4 = reverse a4\n 40486: a5 = a4 >> 0x38\n 40489: u8 [a0 + 0x1f] = a5\n 40492: a5 = a4 >> 0x30\n 40495: u8 [a0 + 0x1e] = a5\n 40498: a5 = a4 >> 0x28\n 40501: u8 [a0 + 0x1d] = a5\n 40504: a5 = a4 >> 0x20\n 40507: u8 [a0 + 0x1c] = a5\n 40510: a5 = a4 >> 0x18\n 40513: u8 [a0 + 0x1b] = a5\n 40516: a5 = a4 >> 0x10\n 40519: u8 [a0 + 0x1a] = a5\n 40522: a5 = a4 >> 0x8\n 40525: u8 [a0 + 0x19] = a5\n 40528: u8 [a0 + 0x18] = a4\n 40531: u8 [a0 + 0x10] = a3\n 40534: a4 = a3 >> 0x38\n 40537: u8 [a0 + 0x17] = a4\n 40540: a4 = a3 >> 0x30\n 40543: u8 [a0 + 0x16] = a4\n 40546: a4 = a3 >> 0x28\n 40549: u8 [a0 + 0x15] = a4\n 40552: a4 = a3 >> 0x20\n 40555: u8 [a0 + 0x14] = a4\n 40558: a4 = a3 >> 0x18\n 40561: u8 [a0 + 0x13] = a4\n 40564: a4 = a3 >> 0x10\n 40567: u8 [a0 + 0x12] = a4\n 40570: a3 = a3 >> 0x8\n 40573: u8 [a0 + 0x11] = a3\n 40576: u8 [a0 + 0x8] = a2\n 40579: a3 = a2 >> 0x38\n 40582: u8 [a0 + 0xf] = a3\n 40585: a3 = a2 >> 0x30\n 40588: u8 [a0 + 0xe] = a3\n 40591: a3 = a2 >> 0x28\n 40594: u8 [a0 + 0xd] = a3\n 40597: a3 = a2 >> 0x20\n 40600: u8 [a0 + 0xc] = a3\n 40603: a3 = a2 >> 0x18\n 40606: u8 [a0 + 0xb] = a3\n 40609: a3 = a2 >> 0x10\n 40612: u8 [a0 + 0xa] = a3\n 40615: a2 = a2 >> 0x8\n 40618: u8 [a0 + 0x9] = a2\n 40621: u8 [a0] = a1\n 40623: a2 = a1 >> 0x38\n 40626: u8 [a0 + 0x7] = a2\n 40629: a2 = a1 >> 0x30\n 40632: u8 [a0 + 0x6] = a2\n 40635: a2 = a1 >> 0x28\n 40638: u8 [a0 + 0x5] = a2\n 40641: a2 = a1 >> 0x20\n 40644: u8 [a0 + 0x4] = a2\n 40647: a2 = a1 >> 0x18\n 40650: u8 [a0 + 0x3] = a2\n 40653: a2 = a1 >> 0x10\n 40656: u8 [a0 + 0x2] = a2\n 40659: a1 = a1 >> 0x8\n 40662: u8 [a0 + 0x1] = a1\n 40665: a0 = u64 [sp + 0x50]\n 40668: a0 = a0 + 0x1\n 40671: a1 = a0 <u 0x1\n 40674: a2 = u64 [sp + 0x58]\n 40677: a1 = a1 + a2\n 40680: a2 = a0 | a1\n 40683: a2 = a2 <u 0x1\n 40686: a3 = u64 [sp + 0x68]\n 40689: a2 = a2 + a3\n 40692: a3 = a2 <u a3\n 40695: a4 = u64 [sp + 0x60]\n 40698: a3 = a3 + a4\n 40701: u64 [sp + 0xd8] = a3\n 40705: u64 [sp + 0xd0] = a2\n 40709: u64 [sp + 0xc8] = a1\n 40713: u64 [sp + 0xc0] = a0\n 40717: u64 [sp + 248] = 0\n 40721: u64 [sp + 240] = 0\n 40725: u64 [sp + 232] = 0\n 40729: u64 [sp + 224] = 0\n 40733: u32 [sp + 256] = 0x20\n 40738: i32 a1 = sp + 0xc0\n 40742: i32 a3 = sp + 0xe0\n 40746: i32 a4 = sp + 0x100\n 40750: a2 = 0xffffffffffffffff\n 40753: a0 = 0\n 40755: ecalli 7 // 'get_storage'\n 40757: fallthrough\n      : @559 (gas: 13)\n 40758: a0 = u64 [sp + 0x38]\n 40761: a2 = u64 [sp + 0x30]\n 40764: a2 = a2 | a0\n 40767: a0 = 0x100000000\n 40777: u64 [sp + 0x28] = a0\n 40780: a0 = 0xffffffe0\n 40790: a1 = u64 [sp + 0x78]\n 40793: a0 = a1 <u a0\n 40796: a1 = u64 [sp + 0x70]\n 40799: a0 = 0 if a1 != 0\n 40801: u64 [sp + 0x40] = a2\n 40804: a0 = 0 if a2 != 0\n 40806: jump @577 if a0 == 0\n      : @560 (gas: 11)\n 40810: s1 = u64 [sp + 0xf8]\n 40814: a0 = u64 [sp + 0xf0]\n 40818: u64 [sp + 0x10] = a0\n 40821: a0 = u64 [sp + 0xe8]\n 40825: u64 [sp + 0x18] = a0\n 40828: a0 = u64 [sp + 0xe0]\n 40832: u64 [sp + 0x20] = a0\n 40835: a0 = u64 [sp + 0x48]\n 40838: i32 a0 = a0 + 0x20\n 40841: a1 = 0x20\n 40844: ra = 538, jump @0\n      : @561 [@dyn 269] (gas: 95)\n 40851: a1 = reverse s1\n 40853: a2 = u64 [sp + 0x10]\n 40856: a2 = reverse a2\n 40858: a3 = u64 [sp + 0x18]\n 40861: a3 = reverse a3\n 40863: a4 = u64 [sp + 0x20]\n 40866: a4 = reverse a4\n 40868: a5 = a4 >> 0x38\n 40871: u8 [a0 + 0x1f] = a5\n 40874: a5 = a4 >> 0x30\n 40877: u8 [a0 + 0x1e] = a5\n 40880: a5 = a4 >> 0x28\n 40883: u8 [a0 + 0x1d] = a5\n 40886: a5 = a4 >> 0x20\n 40889: u8 [a0 + 0x1c] = a5\n 40892: a5 = a4 >> 0x18\n 40895: u8 [a0 + 0x1b] = a5\n 40898: a5 = a4 >> 0x10\n 40901: u8 [a0 + 0x1a] = a5\n 40904: a5 = a4 >> 0x8\n 40907: u8 [a0 + 0x19] = a5\n 40910: u8 [a0 + 0x18] = a4\n 40913: u8 [a0 + 0x10] = a3\n 40916: a4 = a3 >> 0x38\n 40919: u8 [a0 + 0x17] = a4\n 40922: a4 = a3 >> 0x30\n 40925: u8 [a0 + 0x16] = a4\n 40928: a4 = a3 >> 0x28\n 40931: u8 [a0 + 0x15] = a4\n 40934: a4 = a3 >> 0x20\n 40937: u8 [a0 + 0x14] = a4\n 40940: a4 = a3 >> 0x18\n 40943: u8 [a0 + 0x13] = a4\n 40946: a4 = a3 >> 0x10\n 40949: u8 [a0 + 0x12] = a4\n 40952: a3 = a3 >> 0x8\n 40955: u8 [a0 + 0x11] = a3\n 40958: u8 [a0 + 0x8] = a2\n 40961: a3 = a2 >> 0x38\n 40964: u8 [a0 + 0xf] = a3\n 40967: a3 = a2 >> 0x30\n 40970: u8 [a0 + 0xe] = a3\n 40973: a3 = a2 >> 0x28\n 40976: u8 [a0 + 0xd] = a3\n 40979: a3 = a2 >> 0x20\n 40982: u8 [a0 + 0xc] = a3\n 40985: a3 = a2 >> 0x18\n 40988: u8 [a0 + 0xb] = a3\n 40991: a3 = a2 >> 0x10\n 40994: u8 [a0 + 0xa] = a3\n 40997: a2 = a2 >> 0x8\n 41000: u8 [a0 + 0x9] = a2\n 41003: u8 [a0] = a1\n 41005: a2 = a1 >> 0x38\n 41008: u8 [a0 + 0x7] = a2\n 41011: a2 = a1 >> 0x30\n 41014: u8 [a0 + 0x6] = a2\n 41017: a2 = a1 >> 0x28\n 41020: u8 [a0 + 0x5] = a2\n 41023: a2 = a1 >> 0x20\n 41026: u8 [a0 + 0x4] = a2\n 41029: a2 = a1 >> 0x18\n 41032: u8 [a0 + 0x3] = a2\n 41035: a2 = a1 >> 0x10\n 41038: u8 [a0 + 0x2] = a2\n 41041: a1 = a1 >> 0x8\n 41044: u8 [a0 + 0x1] = a1\n 41047: a1 = u64 [sp + 0x50]\n 41050: a0 = a1 + 0x2\n 41053: a1 = a0 <u a1\n 41056: a3 = u64 [sp + 0x58]\n 41059: a2 = a3 + a1\n 41062: a3 = a2 <u a3\n 41065: a3 = a1 if a1 == 0\n 41068: a1 = u64 [sp + 0x68]\n 41071: a3 = a3 + a1\n 41074: a1 = a3 <u a1\n 41077: a4 = u64 [sp + 0x60]\n 41080: a1 = a1 + a4\n 41083: u64 [sp + 0xd8] = a1\n 41087: u64 [sp + 0xd0] = a3\n 41091: u64 [sp + 0xc8] = a2\n 41095: u64 [sp + 0xc0] = a0\n 41099: u64 [sp + 248] = 0\n 41103: u64 [sp + 240] = 0\n 41107: u64 [sp + 232] = 0\n 41111: u64 [sp + 224] = 0\n 41115: u32 [sp + 256] = 0x20\n 41120: i32 a1 = sp + 0xc0\n 41124: i32 a3 = sp + 0xe0\n 41128: i32 a4 = sp + 0x100\n 41132: a2 = 0xffffffffffffffff\n 41135: a0 = 0\n 41137: ecalli 7 // 'get_storage'\n 41139: fallthrough\n      : @562 (gas: 9)\n 41140: a0 = u64 [sp + 0x28]\n 41143: a0 = a0 + 0xffffffffffffffc0\n 41146: a1 = u64 [sp + 0x78]\n 41149: a0 = a1 <u a0\n 41152: a1 = u64 [sp + 0x70]\n 41155: a0 = 0 if a1 != 0\n 41157: a1 = u64 [sp + 0x40]\n 41160: a0 = 0 if a1 != 0\n 41162: jump @577 if a0 == 0\n      : @563 (gas: 11)\n 41166: s1 = u64 [sp + 0xf8]\n 41170: a0 = u64 [sp + 0xf0]\n 41174: u64 [sp + 0x18] = a0\n 41177: a0 = u64 [sp + 0xe8]\n 41181: u64 [sp + 0x20] = a0\n 41184: a0 = u64 [sp + 0xe0]\n 41188: u64 [sp + 0x28] = a0\n 41191: a0 = u64 [sp + 0x48]\n 41194: i32 a0 = a0 + 0x40\n 41197: a1 = 0x20\n 41200: ra = 540, jump @0\n      : @564 [@dyn 270] (gas: 95)\n 41207: a1 = reverse s1\n 41209: a2 = u64 [sp + 0x18]\n 41212: a2 = reverse a2\n 41214: a3 = u64 [sp + 0x20]\n 41217: a3 = reverse a3\n 41219: a4 = u64 [sp + 0x28]\n 41222: a4 = reverse a4\n 41224: a5 = a4 >> 0x38\n 41227: u8 [a0 + 0x1f] = a5\n 41230: a5 = a4 >> 0x30\n 41233: u8 [a0 + 0x1e] = a5\n 41236: a5 = a4 >> 0x28\n 41239: u8 [a0 + 0x1d] = a5\n 41242: a5 = a4 >> 0x20\n 41245: u8 [a0 + 0x1c] = a5\n 41248: a5 = a4 >> 0x18\n 41251: u8 [a0 + 0x1b] = a5\n 41254: a5 = a4 >> 0x10\n 41257: u8 [a0 + 0x1a] = a5\n 41260: a5 = a4 >> 0x8\n 41263: u8 [a0 + 0x19] = a5\n 41266: u8 [a0 + 0x18] = a4\n 41269: u8 [a0 + 0x10] = a3\n 41272: a4 = a3 >> 0x38\n 41275: u8 [a0 + 0x17] = a4\n 41278: a4 = a3 >> 0x30\n 41281: u8 [a0 + 0x16] = a4\n 41284: a4 = a3 >> 0x28\n 41287: u8 [a0 + 0x15] = a4\n 41290: a4 = a3 >> 0x20\n 41293: u8 [a0 + 0x14] = a4\n 41296: a4 = a3 >> 0x18\n 41299: u8 [a0 + 0x13] = a4\n 41302: a4 = a3 >> 0x10\n 41305: u8 [a0 + 0x12] = a4\n 41308: a3 = a3 >> 0x8\n 41311: u8 [a0 + 0x11] = a3\n 41314: u8 [a0 + 0x8] = a2\n 41317: a3 = a2 >> 0x38\n 41320: u8 [a0 + 0xf] = a3\n 41323: a3 = a2 >> 0x30\n 41326: u8 [a0 + 0xe] = a3\n 41329: a3 = a2 >> 0x28\n 41332: u8 [a0 + 0xd] = a3\n 41335: a3 = a2 >> 0x20\n 41338: u8 [a0 + 0xc] = a3\n 41341: a3 = a2 >> 0x18\n 41344: u8 [a0 + 0xb] = a3\n 41347: a3 = a2 >> 0x10\n 41350: u8 [a0 + 0xa] = a3\n 41353: a2 = a2 >> 0x8\n 41356: u8 [a0 + 0x9] = a2\n 41359: u8 [a0] = a1\n 41361: a2 = a1 >> 0x38\n 41364: u8 [a0 + 0x7] = a2\n 41367: a2 = a1 >> 0x30\n 41370: u8 [a0 + 0x6] = a2\n 41373: a2 = a1 >> 0x28\n 41376: u8 [a0 + 0x5] = a2\n 41379: a2 = a1 >> 0x20\n 41382: u8 [a0 + 0x4] = a2\n 41385: a2 = a1 >> 0x18\n 41388: u8 [a0 + 0x3] = a2\n 41391: a2 = a1 >> 0x10\n 41394: u8 [a0 + 0x2] = a2\n 41397: a1 = a1 >> 0x8\n 41400: u8 [a0 + 0x1] = a1\n 41403: a1 = u64 [sp + 0x50]\n 41406: a0 = a1 + 0x3\n 41409: a1 = a0 <u a1\n 41412: a3 = u64 [sp + 0x58]\n 41415: a2 = a3 + a1\n 41418: a3 = a2 <u a3\n 41421: a3 = a1 if a1 == 0\n 41424: a1 = u64 [sp + 0x68]\n 41427: a3 = a3 + a1\n 41430: a1 = a3 <u a1\n 41433: a4 = u64 [sp + 0x60]\n 41436: a1 = a1 + a4\n 41439: u64 [sp + 0xd8] = a1\n 41443: u64 [sp + 0xd0] = a3\n 41447: u64 [sp + 0xc8] = a2\n 41451: u64 [sp + 0xc0] = a0\n 41455: u64 [sp + 248] = 0\n 41459: u64 [sp + 240] = 0\n 41463: u64 [sp + 232] = 0\n 41467: u64 [sp + 224] = 0\n 41471: u32 [sp + 256] = 0x20\n 41476: i32 a1 = sp + 0xc0\n 41480: i32 a3 = sp + 0xe0\n 41484: i32 a4 = sp + 0x100\n 41488: a2 = 0xffffffffffffffff\n 41491: a0 = 0\n 41493: ecalli 7 // 'get_storage'\n 41495: fallthrough\n      : @565 (gas: 10)\n 41496: s1 = 0x100000000\n 41506: u64 [sp + 0x28] = s1\n 41509: a0 = 0xffffffa0\n 41519: a1 = u64 [sp + 0x78]\n 41522: a0 = a1 <u a0\n 41525: a1 = u64 [sp + 0x70]\n 41528: a0 = 0 if a1 != 0\n 41530: a1 = u64 [sp + 0x40]\n 41533: a0 = 0 if a1 != 0\n 41535: jump @577 if a0 == 0\n      : @566 (gas: 11)\n 41539: s1 = u64 [sp + 0xf8]\n 41543: a0 = u64 [sp + 0xf0]\n 41547: u64 [sp + 0x10] = a0\n 41550: a0 = u64 [sp + 0xe8]\n 41554: u64 [sp + 0x18] = a0\n 41557: a0 = u64 [sp + 0xe0]\n 41561: u64 [sp + 0x20] = a0\n 41564: a0 = u64 [sp + 0x48]\n 41567: i32 a0 = a0 + 0x60\n 41570: a1 = 0x20\n 41573: ra = 542, jump @0\n      : @567 [@dyn 271] (gas: 95)\n 41580: a1 = reverse s1\n 41582: a2 = u64 [sp + 0x10]\n 41585: a2 = reverse a2\n 41587: a3 = u64 [sp + 0x18]\n 41590: a3 = reverse a3\n 41592: a4 = u64 [sp + 0x20]\n 41595: a4 = reverse a4\n 41597: a5 = a4 >> 0x38\n 41600: u8 [a0 + 0x1f] = a5\n 41603: a5 = a4 >> 0x30\n 41606: u8 [a0 + 0x1e] = a5\n 41609: a5 = a4 >> 0x28\n 41612: u8 [a0 + 0x1d] = a5\n 41615: a5 = a4 >> 0x20\n 41618: u8 [a0 + 0x1c] = a5\n 41621: a5 = a4 >> 0x18\n 41624: u8 [a0 + 0x1b] = a5\n 41627: a5 = a4 >> 0x10\n 41630: u8 [a0 + 0x1a] = a5\n 41633: a5 = a4 >> 0x8\n 41636: u8 [a0 + 0x19] = a5\n 41639: u8 [a0 + 0x18] = a4\n 41642: u8 [a0 + 0x10] = a3\n 41645: a4 = a3 >> 0x38\n 41648: u8 [a0 + 0x17] = a4\n 41651: a4 = a3 >> 0x30\n 41654: u8 [a0 + 0x16] = a4\n 41657: a4 = a3 >> 0x28\n 41660: u8 [a0 + 0x15] = a4\n 41663: a4 = a3 >> 0x20\n 41666: u8 [a0 + 0x14] = a4\n 41669: a4 = a3 >> 0x18\n 41672: u8 [a0 + 0x13] = a4\n 41675: a4 = a3 >> 0x10\n 41678: u8 [a0 + 0x12] = a4\n 41681: a3 = a3 >> 0x8\n 41684: u8 [a0 + 0x11] = a3\n 41687: u8 [a0 + 0x8] = a2\n 41690: a3 = a2 >> 0x38\n 41693: u8 [a0 + 0xf] = a3\n 41696: a3 = a2 >> 0x30\n 41699: u8 [a0 + 0xe] = a3\n 41702: a3 = a2 >> 0x28\n 41705: u8 [a0 + 0xd] = a3\n 41708: a3 = a2 >> 0x20\n 41711: u8 [a0 + 0xc] = a3\n 41714: a3 = a2 >> 0x18\n 41717: u8 [a0 + 0xb] = a3\n 41720: a3 = a2 >> 0x10\n 41723: u8 [a0 + 0xa] = a3\n 41726: a2 = a2 >> 0x8\n 41729: u8 [a0 + 0x9] = a2\n 41732: u8 [a0] = a1\n 41734: a2 = a1 >> 0x38\n 41737: u8 [a0 + 0x7] = a2\n 41740: a2 = a1 >> 0x30\n 41743: u8 [a0 + 0x6] = a2\n 41746: a2 = a1 >> 0x28\n 41749: u8 [a0 + 0x5] = a2\n 41752: a2 = a1 >> 0x20\n 41755: u8 [a0 + 0x4] = a2\n 41758: a2 = a1 >> 0x18\n 41761: u8 [a0 + 0x3] = a2\n 41764: a2 = a1 >> 0x10\n 41767: u8 [a0 + 0x2] = a2\n 41770: a1 = a1 >> 0x8\n 41773: u8 [a0 + 0x1] = a1\n 41776: a1 = u64 [sp + 0x50]\n 41779: a0 = a1 + 0x4\n 41782: a1 = a0 <u a1\n 41785: a3 = u64 [sp + 0x58]\n 41788: a2 = a3 + a1\n 41791: a3 = a2 <u a3\n 41794: a3 = a1 if a1 == 0\n 41797: a1 = u64 [sp + 0x68]\n 41800: a3 = a3 + a1\n 41803: a1 = a3 <u a1\n 41806: a4 = u64 [sp + 0x60]\n 41809: a1 = a1 + a4\n 41812: u64 [sp + 0xd8] = a1\n 41816: u64 [sp + 0xd0] = a3\n 41820: u64 [sp + 0xc8] = a2\n 41824: u64 [sp + 0xc0] = a0\n 41828: u64 [sp + 248] = 0\n 41832: u64 [sp + 240] = 0\n 41836: u64 [sp + 232] = 0\n 41840: u64 [sp + 224] = 0\n 41844: u32 [sp + 256] = 0x20\n 41849: i32 a1 = sp + 0xc0\n 41853: i32 a3 = sp + 0xe0\n 41857: i32 a4 = sp + 0x100\n 41861: a2 = 0xffffffffffffffff\n 41864: a0 = 0\n 41866: ecalli 7 // 'get_storage'\n 41868: fallthrough\n      : @568 (gas: 9)\n 41869: a0 = u64 [sp + 0x28]\n 41872: a0 = a0 + 0xffffffffffffff80\n 41875: a1 = u64 [sp + 0x78]\n 41878: a0 = a1 <u a0\n 41881: a1 = u64 [sp + 0x70]\n 41884: a0 = 0 if a1 != 0\n 41886: a1 = u64 [sp + 0x40]\n 41889: a0 = 0 if a1 != 0\n 41891: jump @577 if a0 == 0\n      : @569 (gas: 11)\n 41895: s1 = u64 [sp + 0xf8]\n 41899: a0 = u64 [sp + 0xf0]\n 41903: u64 [sp + 0x18] = a0\n 41906: a0 = u64 [sp + 0xe8]\n 41910: u64 [sp + 0x20] = a0\n 41913: a0 = u64 [sp + 0xe0]\n 41917: u64 [sp + 0x28] = a0\n 41920: a0 = u64 [sp + 0x48]\n 41923: i32 a0 = a0 + 0x80\n 41927: a1 = 0x20\n 41930: ra = 544, jump @0\n      : @570 [@dyn 272] (gas: 95)\n 41937: a1 = reverse s1\n 41939: a2 = u64 [sp + 0x18]\n 41942: a2 = reverse a2\n 41944: a3 = u64 [sp + 0x20]\n 41947: a3 = reverse a3\n 41949: a4 = u64 [sp + 0x28]\n 41952: a4 = reverse a4\n 41954: a5 = a4 >> 0x38\n 41957: u8 [a0 + 0x1f] = a5\n 41960: a5 = a4 >> 0x30\n 41963: u8 [a0 + 0x1e] = a5\n 41966: a5 = a4 >> 0x28\n 41969: u8 [a0 + 0x1d] = a5\n 41972: a5 = a4 >> 0x20\n 41975: u8 [a0 + 0x1c] = a5\n 41978: a5 = a4 >> 0x18\n 41981: u8 [a0 + 0x1b] = a5\n 41984: a5 = a4 >> 0x10\n 41987: u8 [a0 + 0x1a] = a5\n 41990: a5 = a4 >> 0x8\n 41993: u8 [a0 + 0x19] = a5\n 41996: u8 [a0 + 0x18] = a4\n 41999: u8 [a0 + 0x10] = a3\n 42002: a4 = a3 >> 0x38\n 42005: u8 [a0 + 0x17] = a4\n 42008: a4 = a3 >> 0x30\n 42011: u8 [a0 + 0x16] = a4\n 42014: a4 = a3 >> 0x28\n 42017: u8 [a0 + 0x15] = a4\n 42020: a4 = a3 >> 0x20\n 42023: u8 [a0 + 0x14] = a4\n 42026: a4 = a3 >> 0x18\n 42029: u8 [a0 + 0x13] = a4\n 42032: a4 = a3 >> 0x10\n 42035: u8 [a0 + 0x12] = a4\n 42038: a3 = a3 >> 0x8\n 42041: u8 [a0 + 0x11] = a3\n 42044: u8 [a0 + 0x8] = a2\n 42047: a3 = a2 >> 0x38\n 42050: u8 [a0 + 0xf] = a3\n 42053: a3 = a2 >> 0x30\n 42056: u8 [a0 + 0xe] = a3\n 42059: a3 = a2 >> 0x28\n 42062: u8 [a0 + 0xd] = a3\n 42065: a3 = a2 >> 0x20\n 42068: u8 [a0 + 0xc] = a3\n 42071: a3 = a2 >> 0x18\n 42074: u8 [a0 + 0xb] = a3\n 42077: a3 = a2 >> 0x10\n 42080: u8 [a0 + 0xa] = a3\n 42083: a2 = a2 >> 0x8\n 42086: u8 [a0 + 0x9] = a2\n 42089: u8 [a0] = a1\n 42091: a2 = a1 >> 0x38\n 42094: u8 [a0 + 0x7] = a2\n 42097: a2 = a1 >> 0x30\n 42100: u8 [a0 + 0x6] = a2\n 42103: a2 = a1 >> 0x28\n 42106: u8 [a0 + 0x5] = a2\n 42109: a2 = a1 >> 0x20\n 42112: u8 [a0 + 0x4] = a2\n 42115: a2 = a1 >> 0x18\n 42118: u8 [a0 + 0x3] = a2\n 42121: a2 = a1 >> 0x10\n 42124: u8 [a0 + 0x2] = a2\n 42127: a1 = a1 >> 0x8\n 42130: u8 [a0 + 0x1] = a1\n 42133: a1 = u64 [sp + 0x50]\n 42136: a0 = a1 + 0x5\n 42139: a1 = a0 <u a1\n 42142: a3 = u64 [sp + 0x58]\n 42145: a2 = a3 + a1\n 42148: a3 = a2 <u a3\n 42151: a3 = a1 if a1 == 0\n 42154: a1 = u64 [sp + 0x68]\n 42157: a3 = a3 + a1\n 42160: a1 = a3 <u a1\n 42163: a4 = u64 [sp + 0x60]\n 42166: a1 = a1 + a4\n 42169: u64 [sp + 0xd8] = a1\n 42173: u64 [sp + 0xd0] = a3\n 42177: u64 [sp + 0xc8] = a2\n 42181: u64 [sp + 0xc0] = a0\n 42185: u64 [sp + 248] = 0\n 42189: u64 [sp + 240] = 0\n 42193: u64 [sp + 232] = 0\n 42197: u64 [sp + 224] = 0\n 42201: u32 [sp + 256] = 0x20\n 42206: i32 a1 = sp + 0xc0\n 42210: i32 a3 = sp + 0xe0\n 42214: i32 a4 = sp + 0x100\n 42218: a2 = 0xffffffffffffffff\n 42221: a0 = 0\n 42223: ecalli 7 // 'get_storage'\n 42225: fallthrough\n      : @571 (gas: 10)\n 42226: s1 = 0x100000000\n 42236: u64 [sp + 0x28] = s1\n 42239: a0 = 0xffffff60\n 42249: a1 = u64 [sp + 0x78]\n 42252: a0 = a1 <u a0\n 42255: a1 = u64 [sp + 0x70]\n 42258: a0 = 0 if a1 != 0\n 42260: a1 = u64 [sp + 0x40]\n 42263: a0 = 0 if a1 != 0\n 42265: jump @577 if a0 == 0\n      : @572 (gas: 11)\n 42269: a0 = u64 [sp + 0xf0]\n 42273: a1 = u64 [sp + 0xe8]\n 42277: u64 [sp + 0x18] = a1\n 42280: a1 = u64 [sp + 0xe0]\n 42284: u64 [sp + 0x20] = a1\n 42287: a0 = a0 << 0x20\n 42290: s1 = a0 >> 0x20\n 42293: a0 = u64 [sp + 0x48]\n 42296: i32 a0 = a0 + 0xa0\n 42300: a1 = 0x20\n 42303: ra = 546, jump @0\n      : @573 [@dyn 273] (gas: 83)\n 42310: a1 = reverse s1\n 42312: a2 = u64 [sp + 0x18]\n 42315: a2 = reverse a2\n 42317: a3 = u64 [sp + 0x20]\n 42320: a3 = reverse a3\n 42322: a4 = a3 >> 0x38\n 42325: u8 [a0 + 0x1f] = a4\n 42328: a4 = a3 >> 0x30\n 42331: u8 [a0 + 0x1e] = a4\n 42334: a4 = a3 >> 0x28\n 42337: u8 [a0 + 0x1d] = a4\n 42340: a4 = a3 >> 0x20\n 42343: u8 [a0 + 0x1c] = a4\n 42346: a4 = a3 >> 0x18\n 42349: u8 [a0 + 0x1b] = a4\n 42352: a4 = a3 >> 0x10\n 42355: u8 [a0 + 0x1a] = a4\n 42358: a4 = a3 >> 0x8\n 42361: u8 [a0 + 0x19] = a4\n 42364: u8 [a0 + 0x18] = a3\n 42367: u8 [a0 + 0x10] = a2\n 42370: u8 [a0 + 11] = 0\n 42373: u8 [a0 + 10] = 0\n 42376: u8 [a0 + 9] = 0\n 42379: u8 [a0 + 7] = 0\n 42382: u8 [a0 + 6] = 0\n 42385: u8 [a0 + 5] = 0\n 42388: u8 [a0 + 4] = 0\n 42391: u8 [a0 + 3] = 0\n 42394: u8 [a0 + 2] = 0\n 42397: u8 [a0 + 1] = 0\n 42400: u8 [a0 + 0] = 0\n 42402: a3 = a2 >> 0x38\n 42405: u8 [a0 + 0x17] = a3\n 42408: a3 = a2 >> 0x30\n 42411: u8 [a0 + 0x16] = a3\n 42414: a3 = a2 >> 0x28\n 42417: u8 [a0 + 0x15] = a3\n 42420: a3 = a2 >> 0x20\n 42423: u8 [a0 + 0x14] = a3\n 42426: a3 = a2 >> 0x18\n 42429: u8 [a0 + 0x13] = a3\n 42432: a3 = a2 >> 0x10\n 42435: u8 [a0 + 0x12] = a3\n 42438: a2 = a2 >> 0x8\n 42441: u8 [a0 + 0x11] = a2\n 42444: u8 [a0 + 0x8] = a1\n 42447: a2 = a1 >> 0x38\n 42450: u8 [a0 + 0xf] = a2\n 42453: a2 = a1 >> 0x30\n 42456: u8 [a0 + 0xe] = a2\n 42459: a2 = a1 >> 0x28\n 42462: u8 [a0 + 0xd] = a2\n 42465: a1 = a1 >> 0x20\n 42468: u8 [a0 + 0xc] = a1\n 42471: a1 = u64 [sp + 0x50]\n 42474: a0 = a1 + 0x6\n 42477: a1 = a0 <u a1\n 42480: a3 = u64 [sp + 0x58]\n 42483: a2 = a3 + a1\n 42486: a3 = a2 <u a3\n 42489: a3 = a1 if a1 == 0\n 42492: a1 = u64 [sp + 0x68]\n 42495: a3 = a3 + a1\n 42498: a1 = a3 <u a1\n 42501: a4 = u64 [sp + 0x60]\n 42504: a1 = a1 + a4\n 42507: u64 [sp + 0xd8] = a1\n 42511: u64 [sp + 0xd0] = a3\n 42515: u64 [sp + 0xc8] = a2\n 42519: u64 [sp + 0xc0] = a0\n 42523: u64 [sp + 248] = 0\n 42527: u64 [sp + 240] = 0\n 42531: u64 [sp + 232] = 0\n 42535: u64 [sp + 224] = 0\n 42539: u32 [sp + 256] = 0x20\n 42544: i32 a1 = sp + 0xc0\n 42548: i32 a3 = sp + 0xe0\n 42552: i32 a4 = sp + 0x100\n 42556: a2 = 0xffffffffffffffff\n 42559: a0 = 0\n 42561: ecalli 7 // 'get_storage'\n 42563: fallthrough\n      : @574 (gas: 9)\n 42564: a0 = u64 [sp + 0x28]\n 42567: a0 = a0 + 0xffffffffffffff40\n 42571: a1 = u64 [sp + 0x78]\n 42574: a0 = a1 <u a0\n 42577: a1 = u64 [sp + 0x70]\n 42580: a0 = 0 if a1 != 0\n 42582: a1 = u64 [sp + 0x40]\n 42585: a0 = 0 if a1 != 0\n 42587: jump @577 if a0 == 0\n      : @575 (gas: 14)\n 42591: a0 = u64 [sp + 0xe0]\n 42595: a1 = u64 [sp + 0xe8]\n 42599: a2 = u64 [sp + 0xf0]\n 42603: a4 = 0xffffffffffffffff\n 42606: a3 = 0xffffffff\n 42616: a0 = a0 & a4\n 42619: u64 [sp + 0x68] = a0\n 42622: a1 = a1 & a4\n 42625: u64 [sp + 0x60] = a1\n 42628: s1 = a2 & a3\n 42631: a0 = u64 [sp + 0x48]\n 42634: i32 a0 = a0 + 0xc0\n 42638: a1 = 0x20\n 42641: ra = 548, jump @0\n      : @576 [@dyn 274] (gas: 70)\n 42648: a1 = reverse s1\n 42650: a2 = u64 [sp + 0x60]\n 42653: a2 = reverse a2\n 42655: a3 = u64 [sp + 0x68]\n 42658: a3 = reverse a3\n 42660: u8 [a0 + 0x18] = a3\n 42663: u8 [a0 + 11] = 0\n 42666: u8 [a0 + 10] = 0\n 42669: u8 [a0 + 9] = 0\n 42672: u8 [a0 + 7] = 0\n 42675: u8 [a0 + 6] = 0\n 42678: u8 [a0 + 5] = 0\n 42681: u8 [a0 + 4] = 0\n 42684: u8 [a0 + 3] = 0\n 42687: u8 [a0 + 2] = 0\n 42690: u8 [a0 + 1] = 0\n 42693: u8 [a0 + 0] = 0\n 42695: a4 = a3 >> 0x38\n 42698: u8 [a0 + 0x1f] = a4\n 42701: a4 = a3 >> 0x30\n 42704: u8 [a0 + 0x1e] = a4\n 42707: a4 = a3 >> 0x28\n 42710: u8 [a0 + 0x1d] = a4\n 42713: a4 = a3 >> 0x20\n 42716: u8 [a0 + 0x1c] = a4\n 42719: a4 = a3 >> 0x18\n 42722: u8 [a0 + 0x1b] = a4\n 42725: a4 = a3 >> 0x10\n 42728: u8 [a0 + 0x1a] = a4\n 42731: a3 = a3 >> 0x8\n 42734: u8 [a0 + 0x19] = a3\n 42737: u8 [a0 + 0x10] = a2\n 42740: a3 = a2 >> 0x38\n 42743: u8 [a0 + 0x17] = a3\n 42746: a3 = a2 >> 0x30\n 42749: u8 [a0 + 0x16] = a3\n 42752: a3 = a2 >> 0x28\n 42755: u8 [a0 + 0x15] = a3\n 42758: a3 = a2 >> 0x20\n 42761: u8 [a0 + 0x14] = a3\n 42764: a3 = a2 >> 0x18\n 42767: u8 [a0 + 0x13] = a3\n 42770: a3 = a2 >> 0x10\n 42773: u8 [a0 + 0x12] = a3\n 42776: a2 = a2 >> 0x8\n 42779: u8 [a0 + 0x11] = a2\n 42782: u8 [a0 + 0x8] = a1\n 42785: a2 = a1 >> 0x38\n 42788: u8 [a0 + 0xf] = a2\n 42791: a2 = a1 >> 0x30\n 42794: u8 [a0 + 0xe] = a2\n 42797: a2 = a1 >> 0x28\n 42800: u8 [a0 + 0xd] = a2\n 42803: a1 = a1 >> 0x20\n 42806: u8 [a0 + 0xc] = a1\n 42809: a0 = u64 [sp + 0x8]\n 42812: a1 = u64 [sp + 0x78]\n 42815: u64 [a0] = a1\n 42817: a1 = u64 [sp + 0x38]\n 42820: u64 [a0 + 0x18] = a1\n 42823: a1 = u64 [sp + 0x70]\n 42826: u64 [a0 + 0x8] = a1\n 42829: a1 = u64 [sp + 0x30]\n 42832: u64 [a0 + 0x10] = a1\n 42835: sp = s0 + 0xfffffffffffffee0\n 42839: ra = u64 [sp + 0x118]\n 42843: s0 = u64 [sp + 0x110]\n 42847: s1 = u64 [sp + 0x108]\n 42851: sp = sp + 0x120\n 42855: ret\n      : @577 (gas: 1)\n 42857: trap\n      : @578 (gas: 17)\n 42858: sp = sp + 0xffffffffffffffa0\n 42861: u64 [sp + 0x58] = ra\n 42864: u64 [sp + 0x50] = s0\n 42867: u64 [sp + 0x48] = s1\n 42870: a3 = u64 [a1 + 0x18]\n 42873: a4 = u64 [a1 + 0x10]\n 42876: a5 = u64 [a1 + 0x8]\n 42879: s1 = u64 [a1]\n 42881: a1 = a5 | a3\n 42884: a2 = s1 | a4\n 42887: a2 = a2 | a1\n 42890: a2 = a2 >> 0x20\n 42893: a1 = a1 | a4\n 42896: a1 = a1 << 0x20\n 42899: a1 = a1 | a2\n 42902: u64 [sp + 0x28] = a0\n 42905: jump @585 if a1 != 0\n      : @579 (gas: 19)\n 42909: a0 = s1 + 0x20\n 42912: u64 [sp + 0x30] = a0\n 42915: a0 = a0 <u s1\n 42918: a1 = a5 + a0\n 42921: u64 [sp + 0x40] = a1\n 42924: u64 [sp + 0x8] = a5\n 42927: s0 = a1 <u a5\n 42930: s0 = a0 if a0 == 0\n 42933: s0 = s0 + a4\n 42936: u64 [sp + 0x10] = a4\n 42939: a0 = s0 <u a4\n 42942: u64 [sp + 0x18] = a3\n 42945: a0 = a0 + a3\n 42948: u64 [sp + 0x38] = a0\n 42951: u64 [sp] = s1\n 42953: i32 a0 = s1 + 0\n 42955: a1 = 0x20\n 42958: s1 = 0x20\n 42961: ra = 550, jump @0\n      : @580 [@dyn 275] (gas: 45)\n 42968: u8 [a0 + 0x1f] = s1\n 42971: a1 = u64 [sp + 0x30]\n 42974: s1 = a1\n 42976: a1 = a1 | s0\n 42979: a2 = u64 [sp + 0x40]\n 42982: a4 = u64 [sp + 0x38]\n 42985: a2 = a2 | a4\n 42988: a1 = a1 | a2\n 42991: a1 = a1 >> 0x20\n 42994: u64 [sp + 0x20] = s0\n 42997: a2 = a2 | s0\n 43000: a2 = a2 << 0x20\n 43003: a1 = a1 | a2\n 43006: u8 [a0 + 30] = 0\n 43009: u8 [a0 + 29] = 0\n 43012: u8 [a0 + 28] = 0\n 43015: u8 [a0 + 27] = 0\n 43018: u8 [a0 + 26] = 0\n 43021: u8 [a0 + 25] = 0\n 43024: u8 [a0 + 24] = 0\n 43027: u8 [a0 + 23] = 0\n 43030: u8 [a0 + 22] = 0\n 43033: u8 [a0 + 21] = 0\n 43036: u8 [a0 + 20] = 0\n 43039: u8 [a0 + 19] = 0\n 43042: u8 [a0 + 18] = 0\n 43045: u8 [a0 + 17] = 0\n 43048: u8 [a0 + 16] = 0\n 43051: u8 [a0 + 15] = 0\n 43054: u8 [a0 + 14] = 0\n 43057: u8 [a0 + 13] = 0\n 43060: u8 [a0 + 12] = 0\n 43063: u8 [a0 + 11] = 0\n 43066: u8 [a0 + 10] = 0\n 43069: u8 [a0 + 9] = 0\n 43072: u8 [a0 + 8] = 0\n 43075: u8 [a0 + 7] = 0\n 43078: u8 [a0 + 6] = 0\n 43081: u8 [a0 + 5] = 0\n 43084: u8 [a0 + 4] = 0\n 43087: u8 [a0 + 3] = 0\n 43090: u8 [a0 + 2] = 0\n 43093: u8 [a0 + 1] = 0\n 43096: u8 [a0 + 0] = 0\n 43098: jump @585 if a1 != 0\n      : @581 (gas: 4)\n 43102: i32 s0 = s1 + 0\n 43104: a1 = 0x20\n 43107: a0 = s0\n 43109: ra = 552, jump @0\n      : @582 [@dyn 276] (gas: 41)\n 43116: u8 [a0 + 31] = 0xf\n 43120: u8 [a0 + 30] = 0\n 43123: u8 [a0 + 29] = 0\n 43126: u8 [a0 + 28] = 0\n 43129: u8 [a0 + 27] = 0\n 43132: u8 [a0 + 26] = 0\n 43135: u8 [a0 + 25] = 0\n 43138: u8 [a0 + 24] = 0\n 43141: u8 [a0 + 23] = 0\n 43144: u8 [a0 + 22] = 0\n 43147: u8 [a0 + 21] = 0\n 43150: u8 [a0 + 20] = 0\n 43153: u8 [a0 + 19] = 0\n 43156: u8 [a0 + 18] = 0\n 43159: u8 [a0 + 17] = 0\n 43162: u8 [a0 + 16] = 0\n 43165: u8 [a0 + 15] = 0\n 43168: u8 [a0 + 14] = 0\n 43171: u8 [a0 + 13] = 0\n 43174: u8 [a0 + 12] = 0\n 43177: u8 [a0 + 11] = 0\n 43180: u8 [a0 + 10] = 0\n 43183: u8 [a0 + 9] = 0\n 43186: u8 [a0 + 8] = 0\n 43189: u8 [a0 + 7] = 0\n 43192: u8 [a0 + 6] = 0\n 43195: u8 [a0 + 5] = 0\n 43198: u8 [a0 + 4] = 0\n 43201: u8 [a0 + 3] = 0\n 43204: u8 [a0 + 2] = 0\n 43207: u8 [a0 + 1] = 0\n 43210: a1 = u64 [sp + 0x20]\n 43213: a2 = u64 [sp + 0x38]\n 43216: a1 = a1 | a2\n 43219: a2 = 0xffffffe0\n 43229: a2 = s1 <u a2\n 43232: a3 = u64 [sp + 0x40]\n 43235: a2 = 0 if a3 != 0\n 43237: a2 = 0 if a1 != 0\n 43239: u8 [a0 + 0] = 0\n 43241: jump @585 if a2 == 0\n      : @583 (gas: 3)\n 43245: i32 a0 = s0 + 0x20\n 43248: a1 = 0x20\n 43251: ra = 554, jump @0\n      : @584 [@dyn 277] (gas: 55)\n 43258: u8 [a0 + 31] = 0\n 43261: u8 [a0 + 30] = 0\n 43264: u8 [a0 + 29] = 0\n 43267: u8 [a0 + 28] = 0\n 43270: u8 [a0 + 27] = 0\n 43273: u8 [a0 + 26] = 0\n 43276: u8 [a0 + 25] = 0\n 43279: u8 [a0 + 24] = 0\n 43282: u8 [a0 + 23] = 0\n 43285: u8 [a0 + 22] = 0\n 43288: u8 [a0 + 21] = 0\n 43291: u8 [a0 + 20] = 0\n 43294: u8 [a0 + 19] = 0\n 43297: u8 [a0 + 18] = 0\n 43300: u8 [a0 + 17] = 0\n 43303: u8 [a0 + 16] = 0\n 43306: u8 [a0 + 15] = 0\n 43309: u8 [a0 + 14] = 0x6e\n 43313: u8 [a0 + 13] = 0x77\n 43317: u8 [a0 + 12] = 0x6f\n 43321: a5 = 0x20\n 43324: u8 [a0 + 0xb] = a5\n 43327: u8 [a0 + 10] = 0x79\n 43331: u8 [a0 + 9] = 0x64\n 43335: u8 [a0 + 8] = 0x61\n 43339: u8 [a0 + 7] = 0x65\n 43343: u8 [a0 + 6] = 0x72\n 43347: u8 [a0 + 5] = 0x6c\n 43351: u8 [a0 + 4] = 0x61\n 43355: u8 [a0 + 0x3] = a5\n 43358: u8 [a0 + 2] = 0x75\n 43362: u8 [a0 + 1] = 0x6f\n 43366: u8 [a0 + 0] = 0x79\n 43369: a1 = u64 [sp]\n 43371: a0 = a1 + 0x60\n 43374: a1 = a0 <u a1\n 43377: a3 = u64 [sp + 0x8]\n 43380: a2 = a3 + a1\n 43383: a3 = a2 <u a3\n 43386: a3 = a1 if a1 == 0\n 43389: a1 = u64 [sp + 0x10]\n 43392: a3 = a3 + a1\n 43395: a1 = a3 <u a1\n 43398: a4 = u64 [sp + 0x18]\n 43401: a1 = a1 + a4\n 43404: a4 = u64 [sp + 0x28]\n 43407: u64 [a4] = a0\n 43409: u64 [a4 + 0x8] = a2\n 43412: u64 [a4 + 0x10] = a3\n 43415: u64 [a4 + 0x18] = a1\n 43418: ra = u64 [sp + 0x58]\n 43421: s0 = u64 [sp + 0x50]\n 43424: s1 = u64 [sp + 0x48]\n 43427: sp = sp + 0x60\n 43430: ret\n      : @585 (gas: 1)\n 43432: trap\n      : @586 (gas: 29)\n 43433: sp = sp + 0xfffffffffffff9a0\n 43437: u64 [sp + 0x658] = ra\n 43441: u64 [sp + 0x650] = s0\n 43445: u64 [sp + 0x648] = s1\n 43449: s0 = sp + 0x660\n 43453: sp = sp & 0xffffffffffffffe0\n 43456: s1 = sp\n 43458: a2 = u64 [a1 + 0x18]\n 43461: u64 [s1 + 0xe0] = a2\n 43465: a2 = u64 [a1 + 0x10]\n 43468: u64 [s1 + 0xe8] = a2\n 43472: a2 = u64 [a1 + 0x8]\n 43475: u64 [s1 + 0xf0] = a2\n 43479: a1 = u64 [a1]\n 43481: u64 [s1 + 0xf8] = a1\n 43485: a1 = u64 [a0 + 0x18]\n 43488: u64 [s1 + 0x1e8] = a1\n 43492: a1 = u64 [a0 + 0x10]\n 43495: a2 = u64 [a0]\n 43497: u64 [s1 + 0x210] = a2\n 43501: a0 = u64 [a0 + 0x8]\n 43504: u64 [s1 + 0x208] = a0\n 43508: u64 [s1 + 0x1e0] = a1\n 43512: a0 = a1 << 0x20\n 43515: a0 = a0 >> 0x20\n 43518: u64 [s1 + 0x218] = a0\n 43522: a1 = 0x20\n 43525: a0 = 0\n 43527: ra = 556, jump @0\n      : @587 [@dyn 278] (gas: 80)\n 43534: a1 = u64 [s1 + 0x218]\n 43538: a4 = reverse a1\n 43540: a1 = u64 [s1 + 0x208]\n 43544: a3 = reverse a1\n 43546: a1 = u64 [s1 + 0x210]\n 43550: a1 = reverse a1\n 43552: u8 [a0 + 0x18] = a1\n 43555: u8 [a0 + 0x10] = a3\n 43558: u8 [a0 + 11] = 0\n 43561: u8 [a0 + 10] = 0\n 43564: u8 [a0 + 9] = 0\n 43567: u8 [a0 + 7] = 0\n 43570: u8 [a0 + 6] = 0\n 43573: u8 [a0 + 5] = 0\n 43576: u8 [a0 + 4] = 0\n 43579: u8 [a0 + 3] = 0\n 43582: u8 [a0 + 2] = 0\n 43585: u8 [a0 + 1] = 0\n 43588: u8 [a0 + 0] = 0\n 43590: a2 = a1 >> 0x38\n 43593: u64 [s1 + 0x1a8] = a2\n 43597: u8 [a0 + 0x1f] = a2\n 43600: a2 = a1 >> 0x30\n 43603: u64 [s1 + 0x1a0] = a2\n 43607: u8 [a0 + 0x1e] = a2\n 43610: a2 = a1 >> 0x28\n 43613: u64 [s1 + 0x198] = a2\n 43617: u8 [a0 + 0x1d] = a2\n 43620: a2 = a1 >> 0x20\n 43623: u64 [s1 + 0x190] = a2\n 43627: u8 [a0 + 0x1c] = a2\n 43630: a2 = a1 >> 0x18\n 43633: u64 [s1 + 0x188] = a2\n 43637: u8 [a0 + 0x1b] = a2\n 43640: a2 = a1 >> 0x10\n 43643: u64 [s1 + 0x180] = a2\n 43647: u8 [a0 + 0x1a] = a2\n 43650: u64 [s1 + 0x1b0] = a1\n 43654: a1 = a1 >> 0x8\n 43657: u64 [s1 + 0x178] = a1\n 43661: u8 [a0 + 0x19] = a1\n 43664: a1 = a3 >> 0x38\n 43667: u64 [s1 + 0x168] = a1\n 43671: u8 [a0 + 0x17] = a1\n 43674: a1 = a3 >> 0x30\n 43677: u64 [s1 + 0x160] = a1\n 43681: u8 [a0 + 0x16] = a1\n 43684: a1 = a3 >> 0x28\n 43687: u64 [s1 + 0x158] = a1\n 43691: u8 [a0 + 0x15] = a1\n 43694: a1 = a3 >> 0x20\n 43697: u64 [s1 + 0x150] = a1\n 43701: u8 [a0 + 0x14] = a1\n 43704: a1 = a3 >> 0x18\n 43707: u64 [s1 + 0x148] = a1\n 43711: u8 [a0 + 0x13] = a1\n 43714: a1 = a3 >> 0x10\n 43717: u64 [s1 + 0x140] = a1\n 43721: u8 [a0 + 0x12] = a1\n 43724: u64 [s1 + 0x170] = a3\n 43728: a3 = a3 >> 0x8\n 43731: u64 [s1 + 0x138] = a3\n 43735: u8 [a0 + 0x11] = a3\n 43738: u8 [a0 + 0x8] = a4\n 43741: a1 = a4 >> 0x38\n 43744: u64 [s1 + 0x130] = a1\n 43748: u8 [a0 + 0xf] = a1\n 43751: a1 = a4 >> 0x30\n 43754: u64 [s1 + 0x128] = a1\n 43758: u8 [a0 + 0xe] = a1\n 43761: a1 = a4 >> 0x28\n 43764: u64 [s1 + 0x120] = a1\n 43768: u8 [a0 + 0xd] = a1\n 43771: u64 [s1 + 0x218] = a4\n 43775: a1 = a4 >> 0x20\n 43778: u64 [s1 + 0x118] = a1\n 43782: u8 [a0 + 0xc] = a1\n 43785: a0 = 0x20\n 43788: a1 = 0x20\n 43791: ra = 558, jump @0\n      : @588 [@dyn 279] (gas: 35)\n 43798: u8 [a0 + 31] = 0x2\n 43802: u8 [a0 + 30] = 0\n 43805: u8 [a0 + 29] = 0\n 43808: u8 [a0 + 28] = 0\n 43811: u8 [a0 + 27] = 0\n 43814: u8 [a0 + 26] = 0\n 43817: u8 [a0 + 25] = 0\n 43820: u8 [a0 + 24] = 0\n 43823: u8 [a0 + 23] = 0\n 43826: u8 [a0 + 22] = 0\n 43829: u8 [a0 + 21] = 0\n 43832: u8 [a0 + 20] = 0\n 43835: u8 [a0 + 19] = 0\n 43838: u8 [a0 + 18] = 0\n 43841: u8 [a0 + 17] = 0\n 43844: u8 [a0 + 16] = 0\n 43847: u8 [a0 + 15] = 0\n 43850: u8 [a0 + 14] = 0\n 43853: u8 [a0 + 13] = 0\n 43856: u8 [a0 + 12] = 0\n 43859: u8 [a0 + 11] = 0\n 43862: u8 [a0 + 10] = 0\n 43865: u8 [a0 + 9] = 0\n 43868: u8 [a0 + 8] = 0\n 43871: u8 [a0 + 7] = 0\n 43874: u8 [a0 + 6] = 0\n 43877: u8 [a0 + 5] = 0\n 43880: u8 [a0 + 4] = 0\n 43883: u8 [a0 + 3] = 0\n 43886: u8 [a0 + 2] = 0\n 43889: u8 [a0 + 1] = 0\n 43892: u8 [a0 + 0] = 0\n 43894: a1 = 0x40\n 43897: a0 = 0\n 43899: ra = 560, jump @0\n      : @589 [@dyn 280] (gas: 44)\n 43906: i32 a0 = a0 + 0\n 43908: i32 a2 = s1 + 0x620\n 43912: a1 = 0x40\n 43915: ecalli 8 // 'hash_keccak_256'\n 43917: a0 = u64 [s1 + 0x620]\n 43921: a1 = u64 [s1 + 0x628]\n 43925: a2 = u64 [s1 + 0x630]\n 43929: a3 = u64 [s1 + 0x638]\n 43933: a0 = reverse a0\n 43935: a1 = reverse a1\n 43937: a2 = reverse a2\n 43939: a3 = reverse a3\n 43941: a4 = a3 + 0x5\n 43944: a3 = a4 <u a3\n 43947: a5 = a2 + a3\n 43950: a2 = a5 <u a2\n 43953: a2 = a3 if a3 == 0\n 43956: a2 = a2 + a1\n 43959: a1 = a2 <u a1\n 43962: a0 = a0 + a1\n 43965: u64 [s1 + 0x608] = a5\n 43969: u64 [s1 + 0x600] = a4\n 43973: u64 [s1 + 0x610] = a2\n 43977: u64 [s1 + 0x618] = a0\n 43981: u64 [s1 + 1592] = 0\n 43985: u64 [s1 + 1584] = 0\n 43989: u64 [s1 + 1576] = 0\n 43993: u64 [s1 + 1568] = 0\n 43997: u32 [s1 + 1504] = 0x20\n 44002: i32 a1 = s1 + 0x600\n 44006: i32 a3 = s1 + 0x620\n 44010: i32 a4 = s1 + 0x5e0\n 44014: a2 = 0xffffffffffffffff\n 44017: a0 = 0\n 44019: ecalli 7 // 'get_storage'\n 44021: a0 = u64 [s1 + 0x628]\n 44025: u64 [s1 + 0x200] = a0\n 44029: a0 = u64 [s1 + 0x620]\n 44033: u64 [s1 + 0x1f8] = a0\n 44037: a0 = u32 [s1 + 0x630]\n 44041: u64 [s1 + 0x1f0] = a0\n 44045: i32 a0 = s1 + 0x460\n 44049: ecalli 5 // 'caller'\n 44051: fallthrough\n      : @590 (gas: 22)\n 44052: a0 = u64 [s1 + 0x468]\n 44056: a1 = u64 [s1 + 0x460]\n 44060: a2 = i32 [s1 + 0x470]\n 44064: a0 = reverse a0\n 44066: a3 = a0 >> 0x20\n 44069: a1 = reverse a1\n 44071: a4 = a1 << 0x20\n 44074: a3 = a3 | a4\n 44077: a0 = a0 << 0x20\n 44080: a2 = reverse a2\n 44082: a2 = a2 >> 0x20\n 44085: a0 = a0 | a2\n 44088: a1 = a1 >> 0x20\n 44091: a2 = u64 [s1 + 0x1f0]\n 44095: a1 = a1 ^ a2\n 44098: a2 = u64 [s1 + 0x1f8]\n 44102: a0 = a0 ^ a2\n 44105: a0 = a0 | a1\n 44108: a1 = u64 [s1 + 0x200]\n 44112: a1 = a1 ^ a3\n 44115: a0 = a0 | a1\n 44118: jump @592 if a0 != 0\n      : @591 (gas: 1)\n 44121: jump @662\n      : @592 (gas: 11)\n 44124: a0 = u64 [s1 + 0x210]\n 44128: u64 [s1 + 0x420] = a0\n 44132: a0 = u64 [s1 + 0x208]\n 44136: u64 [s1 + 0x428] = a0\n 44140: a0 = u64 [s1 + 0x1e0]\n 44144: u64 [s1 + 0x430] = a0\n 44148: a0 = s1 + 0x440\n 44152: a1 = s1 + 0x420\n 44156: a2 = u64 [s1 + 0x1e8]\n 44160: u64 [s1 + 0x438] = a2\n 44164: ra = 562, jump @478\n      : @593 [@dyn 281] (gas: 27)\n 44170: a0 = u64 [s1 + 0x448]\n 44174: a1 = u64 [s1 + 0x440]\n 44178: a2 = u64 [s1 + 0x450]\n 44182: a3 = u64 [s1 + 0x458]\n 44186: a5 = u64 [s1 + 0xf0]\n 44190: a4 = a0 ^ a5\n 44193: a0 = a5 <u a0\n 44196: a5 = u64 [s1 + 0xf8]\n 44200: a1 = a5 <u a1\n 44203: a1 = a0 if a4 != 0\n 44206: a4 = u64 [s1 + 0xe0]\n 44210: a0 = a3 ^ a4\n 44213: a3 = a4 <u a3\n 44216: a5 = u64 [s1 + 0xe8]\n 44220: a4 = a5 <u a2\n 44223: a4 = a3 if a0 != 0\n 44226: a2 = a2 ^ a5\n 44229: a0 = a0 | a2\n 44232: a1 = a4 if a0 != 0\n 44235: a0 = u64 [s1 + 0x218]\n 44239: a2 = a0 >> 0x18\n 44242: u64 [s1 + 0x110] = a2\n 44246: a2 = a0 >> 0x10\n 44249: u64 [s1 + 0x108] = a2\n 44253: a0 = a0 >> 0x8\n 44256: u64 [s1 + 0x100] = a0\n 44260: jump @595 if a1 == 0\n      : @594 (gas: 1)\n 44263: jump @653\n      : @595 (gas: 3)\n 44266: a1 = 0x20\n 44269: a0 = 0\n 44271: ra = 564, jump @0\n      : @596 [@dyn 282] (gas: 59)\n 44278: a1 = u64 [s1 + 0x170]\n 44282: u8 [a0 + 0x10] = a1\n 44285: a1 = u64 [s1 + 0x130]\n 44289: u8 [a0 + 0xf] = a1\n 44292: a1 = u64 [s1 + 0x128]\n 44296: u8 [a0 + 0xe] = a1\n 44299: a1 = u64 [s1 + 0x120]\n 44303: u8 [a0 + 0xd] = a1\n 44306: a1 = u64 [s1 + 0x118]\n 44310: u8 [a0 + 0xc] = a1\n 44313: a1 = u64 [s1 + 0x110]\n 44317: u8 [a0 + 0xb] = a1\n 44320: a1 = u64 [s1 + 0x108]\n 44324: u8 [a0 + 0xa] = a1\n 44327: a1 = u64 [s1 + 0x100]\n 44331: u8 [a0 + 0x9] = a1\n 44334: a1 = u64 [s1 + 0x218]\n 44338: u8 [a0 + 0x8] = a1\n 44341: u8 [a0 + 7] = 0\n 44344: u8 [a0 + 6] = 0\n 44347: u8 [a0 + 5] = 0\n 44350: u8 [a0 + 4] = 0\n 44353: u8 [a0 + 3] = 0\n 44356: u8 [a0 + 2] = 0\n 44359: u8 [a0 + 1] = 0\n 44362: u8 [a0 + 0] = 0\n 44364: a1 = u64 [s1 + 0x1b0]\n 44368: u8 [a0 + 0x18] = a1\n 44371: a1 = u64 [s1 + 0x168]\n 44375: u8 [a0 + 0x17] = a1\n 44378: a1 = u64 [s1 + 0x160]\n 44382: u8 [a0 + 0x16] = a1\n 44385: a1 = u64 [s1 + 0x158]\n 44389: u8 [a0 + 0x15] = a1\n 44392: a1 = u64 [s1 + 0x150]\n 44396: u8 [a0 + 0x14] = a1\n 44399: a1 = u64 [s1 + 0x148]\n 44403: u8 [a0 + 0x13] = a1\n 44406: a1 = u64 [s1 + 0x140]\n 44410: u8 [a0 + 0x12] = a1\n 44413: a1 = u64 [s1 + 0x138]\n 44417: u8 [a0 + 0x11] = a1\n 44420: a1 = u64 [s1 + 0x1a8]\n 44424: u8 [a0 + 0x1f] = a1\n 44427: a1 = u64 [s1 + 0x1a0]\n 44431: u8 [a0 + 0x1e] = a1\n 44434: a1 = u64 [s1 + 0x198]\n 44438: u8 [a0 + 0x1d] = a1\n 44441: a1 = u64 [s1 + 0x190]\n 44445: u8 [a0 + 0x1c] = a1\n 44448: a1 = u64 [s1 + 0x188]\n 44452: u8 [a0 + 0x1b] = a1\n 44455: a1 = u64 [s1 + 0x180]\n 44459: u8 [a0 + 0x1a] = a1\n 44462: a1 = u64 [s1 + 0x178]\n 44466: u8 [a0 + 0x19] = a1\n 44469: a0 = 0x20\n 44472: a1 = 0x20\n 44475: ra = 566, jump @0\n      : @597 [@dyn 283] (gas: 35)\n 44482: u8 [a0 + 31] = 0x2\n 44486: u8 [a0 + 30] = 0\n 44489: u8 [a0 + 29] = 0\n 44492: u8 [a0 + 28] = 0\n 44495: u8 [a0 + 27] = 0\n 44498: u8 [a0 + 26] = 0\n 44501: u8 [a0 + 25] = 0\n 44504: u8 [a0 + 24] = 0\n 44507: u8 [a0 + 23] = 0\n 44510: u8 [a0 + 22] = 0\n 44513: u8 [a0 + 21] = 0\n 44516: u8 [a0 + 20] = 0\n 44519: u8 [a0 + 19] = 0\n 44522: u8 [a0 + 18] = 0\n 44525: u8 [a0 + 17] = 0\n 44528: u8 [a0 + 16] = 0\n 44531: u8 [a0 + 15] = 0\n 44534: u8 [a0 + 14] = 0\n 44537: u8 [a0 + 13] = 0\n 44540: u8 [a0 + 12] = 0\n 44543: u8 [a0 + 11] = 0\n 44546: u8 [a0 + 10] = 0\n 44549: u8 [a0 + 9] = 0\n 44552: u8 [a0 + 8] = 0\n 44555: u8 [a0 + 7] = 0\n 44558: u8 [a0 + 6] = 0\n 44561: u8 [a0 + 5] = 0\n 44564: u8 [a0 + 4] = 0\n 44567: u8 [a0 + 3] = 0\n 44570: u8 [a0 + 2] = 0\n 44573: u8 [a0 + 1] = 0\n 44576: u8 [a0 + 0] = 0\n 44578: a1 = 0x40\n 44581: a0 = 0\n 44583: ra = 568, jump @0\n      : @598 [@dyn 284] (gas: 36)\n 44590: i32 a0 = a0 + 0\n 44592: i32 a2 = s1 + 0x620\n 44596: a1 = 0x40\n 44599: ecalli 8 // 'hash_keccak_256'\n 44601: a0 = u64 [s1 + 0x620]\n 44605: a1 = u64 [s1 + 0x628]\n 44609: a2 = u64 [s1 + 0x630]\n 44613: a3 = u64 [s1 + 0x638]\n 44617: a0 = reverse a0\n 44619: a1 = reverse a1\n 44621: a2 = reverse a2\n 44623: a3 = reverse a3\n 44625: a4 = a3 + 0x4\n 44628: a3 = a4 <u a3\n 44631: a5 = a2 + a3\n 44634: a2 = a5 <u a2\n 44637: a2 = a3 if a3 == 0\n 44640: a2 = a2 + a1\n 44643: a1 = a2 <u a1\n 44646: a0 = a0 + a1\n 44649: u64 [s1 + 0x608] = a5\n 44653: u64 [s1 + 0x600] = a4\n 44657: u64 [s1 + 0x610] = a2\n 44661: u64 [s1 + 0x618] = a0\n 44665: u64 [s1 + 1592] = 0\n 44669: u64 [s1 + 1584] = 0\n 44673: u64 [s1 + 1576] = 0\n 44677: u64 [s1 + 1568] = 0\n 44681: u32 [s1 + 1504] = 0x20\n 44686: i32 a1 = s1 + 0x600\n 44690: i32 a3 = s1 + 0x620\n 44694: i32 a4 = s1 + 0x5e0\n 44698: a2 = 0xffffffffffffffff\n 44701: a0 = 0\n 44703: ecalli 7 // 'get_storage'\n 44705: fallthrough\n      : @599 (gas: 20)\n 44706: a5 = u64 [s1 + 0xe0]\n 44710: t1 = u64 [s1 + 0xe8]\n 44714: a1 = u64 [s1 + 0xf0]\n 44718: a0 = u64 [s1 + 0x638]\n 44722: t0 = u64 [s1 + 0x620]\n 44726: a2 = u64 [s1 + 0x630]\n 44730: a3 = u64 [s1 + 0x628]\n 44734: a4 = a0 ^ a5\n 44737: a0 = a0 <u a5\n 44740: a5 = a2 <u t1\n 44743: a5 = a0 if a4 != 0\n 44746: a0 = a3 ^ a1\n 44749: a3 = a3 <u a1\n 44752: a1 = u64 [s1 + 0xf8]\n 44756: a1 = t0 <u a1\n 44759: a1 = a3 if a0 != 0\n 44762: a0 = a2 ^ t1\n 44765: a0 = a0 | a4\n 44768: a1 = a5 if a0 != 0\n 44771: jump @601 if a1 != 0\n      : @600 (gas: 1)\n 44774: jump @653\n      : @601 (gas: 11)\n 44777: a0 = sp + 0xffffffffffffffe0\n 44780: a0 = a0 & 0xffffffffffffffe0\n 44783: u64 [s1 + 0x210] = a0\n 44787: sp = a0\n 44789: u64 [a0 + 24] = 0\n 44792: u64 [a0 + 16] = 0\n 44795: u64 [a0 + 8] = 0\n 44798: u64 [a0 + 0] = 0\n 44800: i32 a0 = a0 + 0\n 44802: ecalli 17 // 'value_transferred'\n 44804: fallthrough\n      : @602 (gas: 17)\n 44805: t2 = u64 [s1 + 0xe0]\n 44809: ra = u64 [s1 + 0xe8]\n 44813: t1 = u64 [s1 + 0xf0]\n 44817: a4 = u64 [s1 + 0xf8]\n 44821: a3 = u64 [s1 + 0x210]\n 44825: a0 = u64 [a3 + 0x18]\n 44828: a1 = u64 [a3 + 0x8]\n 44831: a2 = u64 [a3]\n 44833: a3 = u64 [a3 + 0x10]\n 44836: a0 = a0 ^ t2\n 44839: a1 = a1 ^ t1\n 44842: a0 = a0 | a1\n 44845: a1 = a3 ^ ra\n 44848: a2 = a2 ^ a4\n 44851: a1 = a1 | a2\n 44854: a0 = a0 | a1\n 44857: jump @604 if a0 == 0\n      : @603 (gas: 1)\n 44860: jump @681\n      : @604 (gas: 46)\n 44863: a0 = a4 | ra\n 44866: a1 = t1 | t2\n 44869: a0 = a0 | a1\n 44872: a0 = a0 <u 0x1\n 44875: u64 [s1 + 0x210] = a0\n 44879: a1 = clz ra\n 44881: a1 = a1 + 0x40\n 44884: a2 = clz t2\n 44886: a2 = a1 if t2 == 0\n 44889: a1 = clz a4\n 44891: a1 = a1 + 0x40\n 44894: a3 = clz t1\n 44896: a3 = a1 if t1 == 0\n 44899: a1 = a3 + 0x80\n 44903: a4 = ra | t2\n 44906: a2 = a1 if a4 == 0\n 44909: a1 = a1 <u a3\n 44912: a1 = 0 if a4 != 0\n 44914: a5 = a1 >u 0\n 44916: a3 = a2 <u 0xfa\n 44920: a0 = a3 ^ 0x1\n 44923: a5 = a0 if a1 == 0\n 44926: a3 = a5 <u 0x1\n 44929: a3 = a3 + 0xffffffffffffffff\n 44932: t0 = -a5\n 44934: a1 = -a1\n 44936: a1 = a1 - a0\n 44939: a4 = 0xf9 - a2\n 44943: a0 = t0 >u 0\n 44945: a2 = a3 >u 0\n 44947: a2 = a0 if a3 == 0\n 44950: a0 = a1 >u 0\n 44952: u64 [s1 + 0x208] = a4\n 44956: a4 = a4 <u 0x100\n 44960: a4 = a4 ^ 0x1\n 44963: a4 = a0 if a1 != 0\n 44966: a4 = a2 if a5 != 0\n 44969: a0 = u64 [s1 + 0x210]\n 44973: a0 = a0 | a4\n 44976: a4 = u64 [s1 + 0xf8]\n 44980: t2 = 0 if a0 != 0\n 44982: ra = 0 if a0 != 0\n 44984: t1 = 0 if a0 != 0\n 44986: a5 = a4\n 44988: a5 = 0 if a0 != 0\n 44990: jump @612 if a0 != 0\n      : @605 (gas: 6)\n 44994: a0 = u64 [s1 + 0x208]\n 44998: a0 = a0 ^ 0xff\n 45002: a0 = a0 | t0\n 45005: a2 = a1 | a3\n 45008: a0 = a0 | a2\n 45011: jump @612 if a0 == 0\n      : @606 (gas: 257)\n 45015: a5 = u64 [s1 + 0x208]\n 45019: a2 = a5 + 0x1\n 45022: u64 [s1 + 0x210] = a2\n 45026: a0 = a2 <u 0x1\n 45029: a0 = a0 + a1\n 45032: u64 [s1 + 0x1e8] = a0\n 45036: a0 = a0 | a2\n 45039: a0 = a0 <u 0x1\n 45042: a0 = a0 + t0\n 45045: u64 [s1 + 0x1d8] = a0\n 45049: a0 = a0 <u t0\n 45052: a0 = a0 + a3\n 45055: u64 [s1 + 0x1e0] = a0\n 45059: u8 [s1 + 0x400] = a4\n 45063: u8 [s1 + 1023] = 0\n 45067: u8 [s1 + 1022] = 0\n 45071: u8 [s1 + 1021] = 0\n 45075: u8 [s1 + 1020] = 0\n 45079: u8 [s1 + 1019] = 0\n 45083: u8 [s1 + 1018] = 0\n 45087: u8 [s1 + 1017] = 0\n 45091: u8 [s1 + 1016] = 0\n 45095: u8 [s1 + 1015] = 0\n 45099: u8 [s1 + 1014] = 0\n 45103: u8 [s1 + 1013] = 0\n 45107: u8 [s1 + 1012] = 0\n 45111: u8 [s1 + 1011] = 0\n 45115: u8 [s1 + 1010] = 0\n 45119: u8 [s1 + 1009] = 0\n 45123: u8 [s1 + 1008] = 0\n 45127: u8 [s1 + 1007] = 0\n 45131: u8 [s1 + 1006] = 0\n 45135: u8 [s1 + 1005] = 0\n 45139: u8 [s1 + 1004] = 0\n 45143: u8 [s1 + 1003] = 0\n 45147: u8 [s1 + 1002] = 0\n 45151: u8 [s1 + 1001] = 0\n 45155: u8 [s1 + 1000] = 0\n 45159: u8 [s1 + 999] = 0\n 45163: u8 [s1 + 998] = 0\n 45167: u8 [s1 + 997] = 0\n 45171: u8 [s1 + 996] = 0\n 45175: u8 [s1 + 995] = 0\n 45179: u8 [s1 + 994] = 0\n 45183: u8 [s1 + 993] = 0\n 45187: u8 [s1 + 992] = 0\n 45191: a1 = u64 [s1 + 0xf0]\n 45195: u8 [s1 + 0x408] = a1\n 45199: a0 = a4 >> 0x38\n 45202: u64 [s1 + 0x1c0] = a0\n 45206: u8 [s1 + 0x407] = a0\n 45210: a0 = a4 >> 0x30\n 45213: u64 [s1 + 0x1b8] = a0\n 45217: u8 [s1 + 0x406] = a0\n 45221: a0 = a4 >> 0x28\n 45224: u64 [s1 + 0xd8] = a0\n 45228: u8 [s1 + 0x405] = a0\n 45232: i32 t0 = 0xff - a5\n 45236: a0 = t0 << 0x38\n 45239: a0 = a0 >> 0x3b\n 45242: a3 = s1 + 0x400\n 45246: a3 = a3 - a0\n 45249: a0 = a4 >> 0x20\n 45252: u64 [s1 + 0x90] = a0\n 45256: u8 [s1 + 0x404] = a0\n 45260: a0 = a4 >> 0x18\n 45263: u64 [s1 + 0x88] = a0\n 45267: u8 [s1 + 0x403] = a0\n 45271: a0 = a4 >> 0x10\n 45274: u64 [s1 + 0x80] = a0\n 45278: u8 [s1 + 0x402] = a0\n 45282: a0 = a4 >> 0x8\n 45285: u64 [s1 + 0x78] = a0\n 45288: u8 [s1 + 0x401] = a0\n 45292: a0 = u64 [s1 + 0xe8]\n 45296: u8 [s1 + 0x410] = a0\n 45300: a2 = a1 >> 0x38\n 45303: u64 [s1 + 0x70] = a2\n 45306: u8 [s1 + 0x40f] = a2\n 45310: a2 = a1 >> 0x30\n 45313: u64 [s1 + 0x68] = a2\n 45316: u8 [s1 + 0x40e] = a2\n 45320: a2 = a1 >> 0x28\n 45323: u64 [s1 + 0x60] = a2\n 45326: u8 [s1 + 0x40d] = a2\n 45330: a2 = a1 >> 0x20\n 45333: u64 [s1 + 0x58] = a2\n 45336: u8 [s1 + 0x40c] = a2\n 45340: a2 = a1 >> 0x18\n 45343: u64 [s1 + 0x50] = a2\n 45346: u8 [s1 + 0x40b] = a2\n 45350: a2 = a1 >> 0x10\n 45353: u64 [s1 + 0x48] = a2\n 45356: u8 [s1 + 0x40a] = a2\n 45360: a1 = a1 >> 0x8\n 45363: u64 [s1 + 0x40] = a1\n 45366: u8 [s1 + 0x409] = a1\n 45370: ra = u64 [s1 + 0xe0]\n 45374: u8 [s1 + 0x418] = ra\n 45378: a1 = a0 >> 0x38\n 45381: u64 [s1 + 0x38] = a1\n 45384: u8 [s1 + 0x417] = a1\n 45388: a1 = a0 >> 0x30\n 45391: u64 [s1 + 0x30] = a1\n 45394: u8 [s1 + 0x416] = a1\n 45398: a1 = a0 >> 0x28\n 45401: u64 [s1 + 0x28] = a1\n 45404: u8 [s1 + 0x415] = a1\n 45408: a1 = a0 >> 0x20\n 45411: u64 [s1 + 0x20] = a1\n 45414: u8 [s1 + 0x414] = a1\n 45418: a1 = a0 >> 0x18\n 45421: u64 [s1 + 0x18] = a1\n 45424: u8 [s1 + 0x413] = a1\n 45428: a1 = a0 >> 0x10\n 45431: u64 [s1 + 0x10] = a1\n 45434: u8 [s1 + 0x412] = a1\n 45438: a0 = a0 >> 0x8\n 45441: u64 [s1 + 0xd0] = a0\n 45445: u8 [s1 + 0x411] = a0\n 45449: a0 = ra >> 0x38\n 45452: u64 [s1 + 0xc8] = a0\n 45456: u8 [s1 + 0x41f] = a0\n 45460: a0 = ra >> 0x30\n 45463: u64 [s1 + 0xc0] = a0\n 45467: u8 [s1 + 0x41e] = a0\n 45471: a0 = ra >> 0x28\n 45474: u64 [s1 + 0xb8] = a0\n 45478: u8 [s1 + 0x41d] = a0\n 45482: a0 = ra >> 0x20\n 45485: u64 [s1 + 0xb0] = a0\n 45489: u8 [s1 + 0x41c] = a0\n 45493: a0 = ra >> 0x18\n 45496: u64 [s1 + 0xa8] = a0\n 45500: u8 [s1 + 0x41b] = a0\n 45504: a0 = ra >> 0x10\n 45507: u64 [s1 + 0xa0] = a0\n 45511: u8 [s1 + 0x41a] = a0\n 45515: a0 = ra >> 0x8\n 45518: u64 [s1 + 0x98] = a0\n 45522: u8 [s1 + 0x419] = a0\n 45526: a0 = u8 [a3 + 0x19]\n 45529: a1 = u8 [a3 + 0x18]\n 45532: a4 = u8 [a3 + 0x1a]\n 45535: a5 = u8 [a3 + 0x1b]\n 45538: a0 = a0 << 0x8\n 45541: a0 = a0 | a1\n 45544: a4 = a4 << 0x10\n 45547: a5 = a5 << 0x18\n 45550: a4 = a4 | a5\n 45553: a0 = a0 | a4\n 45556: a1 = u8 [a3 + 0x1d]\n 45559: a4 = u8 [a3 + 0x1c]\n 45562: a5 = u8 [a3 + 0x1e]\n 45565: a2 = u8 [a3 + 0x1f]\n 45568: a1 = a1 << 0x8\n 45571: a1 = a1 | a4\n 45574: a5 = a5 << 0x10\n 45577: a2 = a2 << 0x18\n 45580: a2 = a2 | a5\n 45583: a1 = a1 | a2\n 45586: a1 = a1 << 0x20\n 45589: t1 = a1 | a0\n 45592: a0 = u8 [a3 + 0x11]\n 45595: a2 = u8 [a3 + 0x10]\n 45598: a4 = u8 [a3 + 0x12]\n 45601: a5 = u8 [a3 + 0x13]\n 45604: a0 = a0 << 0x8\n 45607: a0 = a0 | a2\n 45610: a4 = a4 << 0x10\n 45613: a5 = a5 << 0x18\n 45616: a4 = a4 | a5\n 45619: a0 = a0 | a4\n 45622: a2 = u8 [a3 + 0x15]\n 45625: a4 = u8 [a3 + 0x14]\n 45628: a5 = u8 [a3 + 0x16]\n 45631: a1 = u8 [a3 + 0x17]\n 45634: a2 = a2 << 0x8\n 45637: a2 = a2 | a4\n 45640: a5 = a5 << 0x10\n 45643: a1 = a1 << 0x18\n 45646: a1 = a1 | a5\n 45649: a1 = a1 | a2\n 45652: a1 = a1 << 0x20\n 45655: t2 = a1 | a0\n 45658: a2 = t0 & 0x7\n 45661: a0 = t1 << a2\n 45664: a1 = t2 >> 0x1\n 45667: t0 = a2 ^ 0x3f\n 45670: a1 = a1 >> t0\n 45673: a0 = a0 | a1\n 45676: u64 [s1 + 0x208] = a0\n 45680: a0 = u8 [a3 + 0x9]\n 45683: a1 = u8 [a3 + 0x8]\n 45686: a4 = u8 [a3 + 0xa]\n 45689: a5 = u8 [a3 + 0xb]\n 45692: a0 = a0 << 0x8\n 45695: a0 = a0 | a1\n 45698: a4 = a4 << 0x10\n 45701: a5 = a5 << 0x18\n 45704: a4 = a4 | a5\n 45707: t1 = a4 | a0\n 45710: a1 = u8 [a3 + 0xd]\n 45713: a4 = u8 [a3 + 0xc]\n 45716: a5 = u8 [a3 + 0xe]\n 45719: a0 = u8 [a3 + 0xf]\n 45722: a1 = a1 << 0x8\n 45725: a1 = a1 | a4\n 45728: a5 = a5 << 0x10\n 45731: a0 = a0 << 0x18\n 45734: a0 = a0 | a5\n 45737: a0 = a0 | a1\n 45740: a0 = a0 << 0x20\n 45743: t1 = a0 | t1\n 45746: a0 = t1 >> 0x1\n 45749: a1 = a2 ^ 0xffffffffffffffff\n 45752: a0 = a0 >> a1\n 45755: a1 = t2 << a2\n 45758: t2 = u64 [s1 + 0x1d8]\n 45762: a0 = a0 | a1\n 45765: u64 [s1 + 0x200] = a0\n 45769: a0 = u8 [a3 + 0x1]\n 45772: a1 = u8 [a3]\n 45774: a5 = u8 [a3 + 0x2]\n 45777: a4 = u8 [a3 + 0x3]\n 45780: a0 = a0 << 0x8\n 45783: a0 = a0 | a1\n 45786: a5 = a5 << 0x10\n 45789: a4 = a4 << 0x18\n 45792: a4 = a4 | a5\n 45795: a0 = a0 | a4\n 45798: a1 = u8 [a3 + 0x5]\n 45801: a4 = u8 [a3 + 0x4]\n 45804: a5 = u8 [a3 + 0x6]\n 45807: a3 = u8 [a3 + 0x7]\n 45810: a1 = a1 << 0x8\n 45813: a1 = a1 | a4\n 45816: a4 = u64 [s1 + 0x1e8]\n 45820: a5 = a5 << 0x10\n 45823: a3 = a3 << 0x18\n 45826: a3 = a3 | a5\n 45829: a5 = u64 [s1 + 0x1e0]\n 45833: a1 = a1 | a3\n 45836: a1 = a1 << 0x20\n 45839: a0 = a0 | a1\n 45842: a1 = a0 >> 0x1\n 45845: a1 = a1 >> t0\n 45848: a3 = t1 << a2\n 45851: a1 = a1 | a3\n 45854: u64 [s1 + 0x1f0] = a1\n 45858: a1 = a4 | a5\n 45861: a3 = u64 [s1 + 0x210]\n 45865: a3 = a3 | t2\n 45868: a1 = a1 | a3\n 45871: a0 = a0 << a2\n 45874: u64 [s1 + 0x1f8] = a0\n 45878: jump @610 if a1 == 0\n      : @607 (gas: 214)\n 45882: u64 [s1 + 464] = 0\n 45886: u64 [s1 + 456] = 0\n 45890: a0 = u64 [s1 + 0x1c0]\n 45894: u8 [s1 + 0x3a7] = a0\n 45898: a0 = u64 [s1 + 0x1b8]\n 45902: u8 [s1 + 0x3a6] = a0\n 45906: a0 = u64 [s1 + 0xd8]\n 45910: u8 [s1 + 0x3a5] = a0\n 45914: a0 = u64 [s1 + 0x90]\n 45918: u8 [s1 + 0x3a4] = a0\n 45922: a0 = u64 [s1 + 0x88]\n 45926: u8 [s1 + 0x3a3] = a0\n 45930: a0 = u64 [s1 + 0x80]\n 45934: u8 [s1 + 0x3a2] = a0\n 45938: a0 = u64 [s1 + 0x78]\n 45941: u8 [s1 + 0x3a1] = a0\n 45945: a0 = u64 [s1 + 0x70]\n 45948: u8 [s1 + 0x3af] = a0\n 45952: a0 = u64 [s1 + 0x68]\n 45955: u8 [s1 + 0x3ae] = a0\n 45959: a0 = u64 [s1 + 0x60]\n 45962: u8 [s1 + 0x3ad] = a0\n 45966: a0 = u64 [s1 + 0x58]\n 45969: u8 [s1 + 0x3ac] = a0\n 45973: a0 = u64 [s1 + 0x50]\n 45976: u8 [s1 + 0x3ab] = a0\n 45980: a0 = u64 [s1 + 0x48]\n 45983: u8 [s1 + 0x3aa] = a0\n 45987: a0 = u64 [s1 + 0x40]\n 45990: u8 [s1 + 0x3a9] = a0\n 45994: a0 = u64 [s1 + 0x38]\n 45997: u8 [s1 + 0x3b7] = a0\n 46001: a0 = u64 [s1 + 0x30]\n 46004: u8 [s1 + 0x3b6] = a0\n 46008: a0 = u64 [s1 + 0x28]\n 46011: u8 [s1 + 0x3b5] = a0\n 46015: a0 = u64 [s1 + 0x20]\n 46018: u8 [s1 + 0x3b4] = a0\n 46022: a0 = u64 [s1 + 0x18]\n 46025: u8 [s1 + 0x3b3] = a0\n 46029: a0 = u64 [s1 + 0x10]\n 46032: u8 [s1 + 0x3b2] = a0\n 46036: u8 [s1 + 991] = 0\n 46040: u8 [s1 + 990] = 0\n 46044: u8 [s1 + 989] = 0\n 46048: u8 [s1 + 988] = 0\n 46052: u8 [s1 + 987] = 0\n 46056: u8 [s1 + 986] = 0\n 46060: u8 [s1 + 985] = 0\n 46064: u8 [s1 + 984] = 0\n 46068: u8 [s1 + 983] = 0\n 46072: u8 [s1 + 982] = 0\n 46076: u8 [s1 + 981] = 0\n 46080: u8 [s1 + 980] = 0\n 46084: u8 [s1 + 979] = 0\n 46088: u8 [s1 + 978] = 0\n 46092: u8 [s1 + 977] = 0\n 46096: u8 [s1 + 976] = 0\n 46100: u8 [s1 + 975] = 0\n 46104: u8 [s1 + 974] = 0\n 46108: u8 [s1 + 973] = 0\n 46112: u8 [s1 + 972] = 0\n 46116: u8 [s1 + 971] = 0\n 46120: u8 [s1 + 970] = 0\n 46124: u8 [s1 + 969] = 0\n 46128: u8 [s1 + 968] = 0\n 46132: u8 [s1 + 967] = 0\n 46136: u8 [s1 + 966] = 0\n 46140: u8 [s1 + 965] = 0\n 46144: u8 [s1 + 964] = 0\n 46148: u8 [s1 + 963] = 0\n 46152: u8 [s1 + 962] = 0\n 46156: u8 [s1 + 961] = 0\n 46160: u8 [s1 + 960] = 0\n 46164: a0 = u64 [s1 + 0xf8]\n 46168: u8 [s1 + 0x3a0] = a0\n 46172: a0 = u64 [s1 + 0xf0]\n 46176: u8 [s1 + 0x3a8] = a0\n 46180: a0 = u64 [s1 + 0xe8]\n 46184: u8 [s1 + 0x3b0] = a0\n 46188: u8 [s1 + 0x3b8] = ra\n 46192: a0 = u64 [s1 + 0xd0]\n 46196: u8 [s1 + 0x3b1] = a0\n 46200: a0 = u64 [s1 + 0xc8]\n 46204: u8 [s1 + 0x3bf] = a0\n 46208: a0 = u64 [s1 + 0xc0]\n 46212: u8 [s1 + 0x3be] = a0\n 46216: a0 = u64 [s1 + 0xb8]\n 46220: u8 [s1 + 0x3bd] = a0\n 46224: a0 = u64 [s1 + 0xb0]\n 46228: u8 [s1 + 0x3bc] = a0\n 46232: a0 = u64 [s1 + 0xa8]\n 46236: u8 [s1 + 0x3bb] = a0\n 46240: a0 = u64 [s1 + 0xa0]\n 46244: u8 [s1 + 0x3ba] = a0\n 46248: a0 = u64 [s1 + 0x98]\n 46252: u8 [s1 + 0x3b9] = a0\n 46256: t0 = u64 [s1 + 0x210]\n 46260: a0 = t0 << 0x38\n 46263: a0 = a0 >> 0x3b\n 46266: a2 = s1 + 0x3a0\n 46270: a2 = a2 + a0\n 46273: a0 = u8 [a2 + 0x11]\n 46276: a1 = u8 [a2 + 0x10]\n 46279: a3 = u8 [a2 + 0x12]\n 46282: a4 = u8 [a2 + 0x13]\n 46285: a0 = a0 << 0x8\n 46288: a0 = a0 | a1\n 46291: a3 = a3 << 0x10\n 46294: a4 = a4 << 0x18\n 46297: a3 = a3 | a4\n 46300: a0 = a0 | a3\n 46303: a1 = u8 [a2 + 0x15]\n 46306: a3 = u8 [a2 + 0x14]\n 46309: a4 = u8 [a2 + 0x16]\n 46312: a5 = u8 [a2 + 0x17]\n 46315: a1 = a1 << 0x8\n 46318: a1 = a1 | a3\n 46321: a4 = a4 << 0x10\n 46324: a5 = a5 << 0x18\n 46327: a4 = a4 | a5\n 46330: a1 = a1 | a4\n 46333: a1 = a1 << 0x20\n 46336: t1 = a1 | a0\n 46339: a3 = t0 & 0x7\n 46342: a0 = u8 [a2 + 0x19]\n 46345: a1 = u8 [a2 + 0x18]\n 46348: a4 = u8 [a2 + 0x1a]\n 46351: a5 = u8 [a2 + 0x1b]\n 46354: a0 = a0 << 0x8\n 46357: a0 = a0 | a1\n 46360: a4 = a4 << 0x10\n 46363: a5 = a5 << 0x18\n 46366: a1 = u8 [a2 + 0x1d]\n 46369: a4 = a4 | a5\n 46372: t0 = a4 | a0\n 46375: a4 = u8 [a2 + 0x1c]\n 46378: a1 = a1 << 0x8\n 46381: a5 = u8 [a2 + 0x1e]\n 46384: a0 = u8 [a2 + 0x1f]\n 46387: a1 = a1 | a4\n 46390: a4 = t1 >> a3\n 46393: a5 = a5 << 0x10\n 46396: a0 = a0 << 0x18\n 46399: a0 = a0 | a5\n 46402: a0 = a0 | a1\n 46405: a0 = a0 << 0x20\n 46408: t0 = a0 | t0\n 46411: a0 = t0 << 0x1\n 46414: t2 = a3 ^ 0x3f\n 46417: a0 = a0 << t2\n 46420: a0 = a0 | a4\n 46423: u64 [s1 + 0x1c0] = a0\n 46427: a0 = u8 [a2 + 0x9]\n 46430: a4 = u8 [a2 + 0x8]\n 46433: a1 = u8 [a2 + 0xa]\n 46436: a5 = u8 [a2 + 0xb]\n 46439: a0 = a0 << 0x8\n 46442: a0 = a0 | a4\n 46445: a1 = a1 << 0x10\n 46448: a5 = a5 << 0x18\n 46451: a1 = a1 | a5\n 46454: ra = a1 | a0\n 46457: a1 = u8 [a2 + 0xd]\n 46460: a4 = u8 [a2 + 0xc]\n 46463: a5 = u8 [a2 + 0xe]\n 46466: a0 = u8 [a2 + 0xf]\n 46469: a1 = a1 << 0x8\n 46472: a1 = a1 | a4\n 46475: a5 = a5 << 0x10\n 46478: a0 = a0 << 0x18\n 46481: a0 = a0 | a5\n 46484: a0 = a0 | a1\n 46487: a0 = a0 << 0x20\n 46490: ra = a0 | ra\n 46493: t1 = t1 << 0x1\n 46496: a1 = a3 ^ 0xffffffffffffffff\n 46499: a1 = t1 << a1\n 46502: a4 = ra >> a3\n 46505: a1 = a1 | a4\n 46508: u64 [s1 + 0x1b8] = a1\n 46512: a1 = u8 [a2 + 0x1]\n 46515: a4 = u8 [a2]\n 46517: a5 = u8 [a2 + 0x2]\n 46520: a0 = u8 [a2 + 0x3]\n 46523: a1 = a1 << 0x8\n 46526: a1 = a1 | a4\n 46529: a5 = a5 << 0x10\n 46532: a0 = a0 << 0x18\n 46535: a0 = a0 | a5\n 46538: a0 = a0 | a1\n 46541: a1 = u8 [a2 + 0x5]\n 46544: a4 = u8 [a2 + 0x4]\n 46547: a5 = u8 [a2 + 0x6]\n 46550: a2 = u8 [a2 + 0x7]\n 46553: a1 = a1 << 0x8\n 46556: a1 = a1 | a4\n 46559: a4 = u64 [s1 + 0x1d0]\n 46563: a5 = a5 << 0x10\n 46566: a2 = a2 << 0x18\n 46569: a2 = a2 | a5\n 46572: a1 = a1 | a2\n 46575: a1 = a1 << 0x20\n 46578: a0 = a0 | a1\n 46581: ra = ra << 0x1\n 46584: a1 = ra << t2\n 46587: a5 = a0 >> a3\n 46590: a5 = a5 | a1\n 46593: t1 = t0 >> a3\n 46596: u64 [s1 + 208] = 0x63\n 46601: u64 [s1 + 200] = 0\n 46605: t0 = u64 [s1 + 0x1b8]\n 46609: t2 = u64 [s1 + 0x208]\n 46613: fallthrough\n      : @608 (gas: 92)\n 46614: u64 [s1 + 0x208] = t1\n 46618: u64 [s1 + 0x1d0] = a4\n 46622: u64 [s1 + 216] = 0\n 46626: a0 = a5 >> 0x3f\n 46629: a3 = t0\n 46631: a1 = t0 << 0x1\n 46634: t1 = a1 | a0\n 46637: a5 = a5 << 0x1\n 46640: t0 = t2\n 46642: a0 = t2 >> 0x3f\n 46645: ra = a5 | a0\n 46648: a1 = u64 [s1 + 0xc8]\n 46652: a2 = a1 ^ t1\n 46655: t2 = a3\n 46657: a4 = a1 <u t1\n 46660: a0 = u64 [s1 + 0xd0]\n 46664: a5 = a0 <u ra\n 46667: a5 = a4 if a2 != 0\n 46670: a3 = u64 [s1 + 0x208]\n 46674: a3 = a3 << 0x1\n 46677: a4 = u64 [s1 + 0x1c0]\n 46681: a2 = a4 >> 0x3f\n 46684: a2 = a2 | a3\n 46687: u64 [s1 + 0x1b8] = a2\n 46691: a2 = t2 >> 0x3f\n 46694: a4 = a4 << 0x1\n 46697: t2 = a4 | a2\n 46700: a2 = t0 << 0x1\n 46703: a0 = u64 [s1 + 0x200]\n 46707: a4 = a0 >> 0x3f\n 46710: t0 = a2 | a4\n 46713: a4 = a0 << 0x1\n 46716: a0 = u64 [s1 + 0x1f0]\n 46720: a3 = a0 >> 0x3f\n 46723: a3 = a3 | a4\n 46726: a0 = a0 << 0x1\n 46729: a4 = u64 [s1 + 0x1f8]\n 46733: a2 = a4 >> 0x3f\n 46736: a2 = a2 | a0\n 46739: a4 = a4 << 0x1\n 46742: a0 = u64 [s1 + 0x1d0]\n 46746: a4 = a4 | a0\n 46749: u64 [s1 + 0x1f8] = a4\n 46753: a4 = u64 [s1 + 0x1c8]\n 46757: a2 = a2 | a4\n 46760: u64 [s1 + 0x1f0] = a2\n 46764: a3 = a3 | a4\n 46767: u64 [s1 + 0x200] = a3\n 46771: a0 = a4 | t0\n 46774: u64 [s1 + 0x208] = a0\n 46778: a2 = a1 - t2\n 46781: a2 = a2 <u a5\n 46784: a3 = a1 <u t2\n 46787: a5 = u64 [s1 + 0x1b8]\n 46791: a4 = a1 - a5\n 46794: a4 = a4 - a3\n 46797: a4 = a4 - a2\n 46800: a4 = a4 >>a 0x3f\n 46803: a2 = a4 & 0x64\n 46806: a0 = ra - a2\n 46809: u64 [s1 + 0x1d0] = a0\n 46813: a0 = ra <u a2\n 46816: t0 = t1 - a0\n 46819: a0 = 0 if t1 != 0\n 46821: a1 = t2 - a0\n 46824: u64 [s1 + 0x1c0] = a1\n 46828: a0 = t2 <u a0\n 46831: t1 = a5 - a0\n 46834: a1 = u64 [s1 + 0x210]\n 46838: a5 = u64 [s1 + 0x1e8]\n 46842: a0 = a1 | a5\n 46845: a0 = a0 <u 0x1\n 46848: a2 = u64 [s1 + 0x1d8]\n 46852: a3 = a2 <u a0\n 46855: a2 = a2 - a0\n 46858: a0 = a1 <u 0x1\n 46861: a5 = a5 - a0\n 46864: a0 = u64 [s1 + 0x1e0]\n 46868: a0 = a0 - a3\n 46871: a1 = a1 + 0xffffffffffffffff\n 46874: u64 [s1 + 0x1e8] = a5\n 46878: u64 [s1 + 0x1e0] = a0\n 46882: a0 = a0 | a5\n 46885: a5 = u64 [s1 + 0x1d0]\n 46889: t2 = u64 [s1 + 0x208]\n 46893: u64 [s1 + 0x210] = a1\n 46897: a1 = a1 | a2\n 46900: a0 = a0 | a1\n 46903: a4 = a4 & 0x1\n 46906: u64 [s1 + 0x1d8] = a2\n 46910: u64 [s1 + 456] = 0\n 46914: jump @608 if a0 != 0\n      : @609 (gas: 1)\n 46918: jump @611\n      : @610 (gas: 4)\n 46920: a4 = 0\n 46922: u64 [s1 + 216] = 0\n 46926: t2 = u64 [s1 + 0x208]\n 46930: fallthrough\n      : @611 (gas: 20)\n 46931: a2 = u64 [s1 + 0x200]\n 46935: a0 = a2 >> 0x3f\n 46938: a1 = t2 << 0x1\n 46941: a0 = a0 | a1\n 46944: a3 = u64 [s1 + 0x1f0]\n 46948: a1 = a3 >> 0x3f\n 46951: a2 = a2 << 0x1\n 46954: a1 = a1 | a2\n 46957: a5 = u64 [s1 + 0x1f8]\n 46961: a2 = a5 >> 0x3f\n 46964: a3 = a3 << 0x1\n 46967: a5 = a5 << 0x1\n 46970: a5 = a5 | a4\n 46973: a4 = u64 [s1 + 0xd8]\n 46977: a2 = a2 | a4\n 46980: t1 = a2 | a3\n 46983: ra = a4 | a1\n 46986: t2 = a4 | a0\n 46989: a4 = u64 [s1 + 0xf8]\n 46993: fallthrough\n      : @612 (gas: 29)\n 46994: t0 = a4 <u a5\n 46997: a4 = u64 [s1 + 0xf0]\n 47001: a1 = a4 ^ t1\n 47004: a2 = a4 <u t1\n 47007: a2 = t0 if a1 == 0\n 47010: a3 = u64 [s1 + 0xe8]\n 47014: a0 = a3 - ra\n 47017: a1 = a0 - a2\n 47020: u64 [s1 + 0x208] = a1\n 47024: a1 = a0 <u a2\n 47027: u64 [s1 + 0xc8] = ra\n 47031: a2 = a3 <u ra\n 47034: a3 = u64 [s1 + 0xe0]\n 47038: u64 [s1 + 0xc0] = t2\n 47042: a3 = a3 - t2\n 47045: a3 = a3 - a2\n 47048: a3 = a3 - a1\n 47051: u64 [s1 + 0x200] = a3\n 47055: u64 [s1 + 0xd0] = t1\n 47059: a1 = a4 - t1\n 47062: a0 = a1 - t0\n 47065: u64 [s1 + 0x1f8] = a0\n 47069: u64 [s1 + 0xd8] = a5\n 47073: a0 = u64 [s1 + 0xf8]\n 47077: a0 = a0 - a5\n 47080: u64 [s1 + 0x210] = a0\n 47084: a1 = 0x20\n 47087: a0 = 0\n 47089: ra = 570, jump @0\n      : @613 [@dyn 285] (gas: 59)\n 47096: a1 = u64 [s1 + 0x170]\n 47100: u8 [a0 + 0x10] = a1\n 47103: a1 = u64 [s1 + 0x130]\n 47107: u8 [a0 + 0xf] = a1\n 47110: a1 = u64 [s1 + 0x128]\n 47114: u8 [a0 + 0xe] = a1\n 47117: a1 = u64 [s1 + 0x120]\n 47121: u8 [a0 + 0xd] = a1\n 47124: a1 = u64 [s1 + 0x118]\n 47128: u8 [a0 + 0xc] = a1\n 47131: a1 = u64 [s1 + 0x110]\n 47135: u8 [a0 + 0xb] = a1\n 47138: a1 = u64 [s1 + 0x108]\n 47142: u8 [a0 + 0xa] = a1\n 47145: a1 = u64 [s1 + 0x100]\n 47149: u8 [a0 + 0x9] = a1\n 47152: a1 = u64 [s1 + 0x218]\n 47156: u8 [a0 + 0x8] = a1\n 47159: u8 [a0 + 7] = 0\n 47162: u8 [a0 + 6] = 0\n 47165: u8 [a0 + 5] = 0\n 47168: u8 [a0 + 4] = 0\n 47171: u8 [a0 + 3] = 0\n 47174: u8 [a0 + 2] = 0\n 47177: u8 [a0 + 1] = 0\n 47180: u8 [a0 + 0] = 0\n 47182: a1 = u64 [s1 + 0x1b0]\n 47186: u8 [a0 + 0x18] = a1\n 47189: a1 = u64 [s1 + 0x168]\n 47193: u8 [a0 + 0x17] = a1\n 47196: a1 = u64 [s1 + 0x160]\n 47200: u8 [a0 + 0x16] = a1\n 47203: a1 = u64 [s1 + 0x158]\n 47207: u8 [a0 + 0x15] = a1\n 47210: a1 = u64 [s1 + 0x150]\n 47214: u8 [a0 + 0x14] = a1\n 47217: a1 = u64 [s1 + 0x148]\n 47221: u8 [a0 + 0x13] = a1\n 47224: a1 = u64 [s1 + 0x140]\n 47228: u8 [a0 + 0x12] = a1\n 47231: a1 = u64 [s1 + 0x138]\n 47235: u8 [a0 + 0x11] = a1\n 47238: a1 = u64 [s1 + 0x1a8]\n 47242: u8 [a0 + 0x1f] = a1\n 47245: a1 = u64 [s1 + 0x1a0]\n 47249: u8 [a0 + 0x1e] = a1\n 47252: a1 = u64 [s1 + 0x198]\n 47256: u8 [a0 + 0x1d] = a1\n 47259: a1 = u64 [s1 + 0x190]\n 47263: u8 [a0 + 0x1c] = a1\n 47266: a1 = u64 [s1 + 0x188]\n 47270: u8 [a0 + 0x1b] = a1\n 47273: a1 = u64 [s1 + 0x180]\n 47277: u8 [a0 + 0x1a] = a1\n 47280: a1 = u64 [s1 + 0x178]\n 47284: u8 [a0 + 0x19] = a1\n 47287: a0 = 0x20\n 47290: a1 = 0x20\n 47293: ra = 572, jump @0\n      : @614 [@dyn 286] (gas: 35)\n 47300: u8 [a0 + 31] = 0x2\n 47304: u8 [a0 + 30] = 0\n 47307: u8 [a0 + 29] = 0\n 47310: u8 [a0 + 28] = 0\n 47313: u8 [a0 + 27] = 0\n 47316: u8 [a0 + 26] = 0\n 47319: u8 [a0 + 25] = 0\n 47322: u8 [a0 + 24] = 0\n 47325: u8 [a0 + 23] = 0\n 47328: u8 [a0 + 22] = 0\n 47331: u8 [a0 + 21] = 0\n 47334: u8 [a0 + 20] = 0\n 47337: u8 [a0 + 19] = 0\n 47340: u8 [a0 + 18] = 0\n 47343: u8 [a0 + 17] = 0\n 47346: u8 [a0 + 16] = 0\n 47349: u8 [a0 + 15] = 0\n 47352: u8 [a0 + 14] = 0\n 47355: u8 [a0 + 13] = 0\n 47358: u8 [a0 + 12] = 0\n 47361: u8 [a0 + 11] = 0\n 47364: u8 [a0 + 10] = 0\n 47367: u8 [a0 + 9] = 0\n 47370: u8 [a0 + 8] = 0\n 47373: u8 [a0 + 7] = 0\n 47376: u8 [a0 + 6] = 0\n 47379: u8 [a0 + 5] = 0\n 47382: u8 [a0 + 4] = 0\n 47385: u8 [a0 + 3] = 0\n 47388: u8 [a0 + 2] = 0\n 47391: u8 [a0 + 1] = 0\n 47394: u8 [a0 + 0] = 0\n 47396: a1 = 0x40\n 47399: a0 = 0\n 47401: ra = 574, jump @0\n      : @615 [@dyn 287] (gas: 44)\n 47408: i32 a0 = a0 + 0\n 47410: i32 a2 = s1 + 0x620\n 47414: a1 = 0x40\n 47417: ecalli 8 // 'hash_keccak_256'\n 47419: a0 = u64 [s1 + 0x620]\n 47423: a1 = u64 [s1 + 0x628]\n 47427: a2 = u64 [s1 + 0x630]\n 47431: a3 = u64 [s1 + 0x638]\n 47435: a0 = reverse a0\n 47437: a1 = reverse a1\n 47439: a2 = reverse a2\n 47441: a3 = reverse a3\n 47443: a4 = a3 + 0x5\n 47446: a3 = a4 <u a3\n 47449: a5 = a2 + a3\n 47452: a2 = a5 <u a2\n 47455: a2 = a3 if a3 == 0\n 47458: a2 = a2 + a1\n 47461: a1 = a2 <u a1\n 47464: a0 = a0 + a1\n 47467: u64 [s1 + 0x608] = a5\n 47471: u64 [s1 + 0x600] = a4\n 47475: u64 [s1 + 0x610] = a2\n 47479: u64 [s1 + 0x618] = a0\n 47483: u64 [s1 + 1592] = 0\n 47487: u64 [s1 + 1584] = 0\n 47491: u64 [s1 + 1576] = 0\n 47495: u64 [s1 + 1568] = 0\n 47499: u32 [s1 + 1504] = 0x20\n 47504: i32 a1 = s1 + 0x600\n 47508: i32 a3 = s1 + 0x620\n 47512: i32 a4 = s1 + 0x5e0\n 47516: a2 = 0xffffffffffffffff\n 47519: a0 = 0\n 47521: ecalli 7 // 'get_storage'\n 47523: a0 = u64 [s1 + 0x620]\n 47527: u64 [s1 + 0x1f0] = a0\n 47531: a0 = u64 [s1 + 0x630]\n 47535: u64 [s1 + 0x1e8] = a0\n 47539: a0 = u64 [s1 + 0x628]\n 47543: u64 [s1 + 0x1e0] = a0\n 47547: a0 = 0x40\n 47550: a1 = 0x20\n 47553: ra = 576, jump @0\n      : @616 [@dyn 288] (gas: 98)\n 47560: a1 = u8 [a0 + 0x11]\n 47563: a2 = u8 [a0 + 0x10]\n 47566: a3 = u8 [a0 + 0x12]\n 47569: a4 = u8 [a0 + 0x13]\n 47572: a1 = a1 << 0x8\n 47575: a1 = a1 | a2\n 47578: a3 = a3 << 0x10\n 47581: a4 = a4 << 0x18\n 47584: a3 = a3 | a4\n 47587: a1 = a1 | a3\n 47590: a2 = u8 [a0 + 0x15]\n 47593: a3 = u8 [a0 + 0x14]\n 47596: a4 = u8 [a0 + 0x16]\n 47599: a5 = u8 [a0 + 0x17]\n 47602: a2 = a2 << 0x8\n 47605: a2 = a2 | a3\n 47608: a4 = a4 << 0x10\n 47611: a5 = a5 << 0x18\n 47614: a4 = a4 | a5\n 47617: a2 = a2 | a4\n 47620: a2 = a2 << 0x20\n 47623: t0 = a2 | a1\n 47626: a2 = u8 [a0 + 0x1]\n 47629: a3 = u8 [a0]\n 47631: a4 = u8 [a0 + 0x2]\n 47634: a5 = u8 [a0 + 0x3]\n 47637: a2 = a2 << 0x8\n 47640: a2 = a2 | a3\n 47643: a4 = a4 << 0x10\n 47646: a5 = a5 << 0x18\n 47649: a4 = a4 | a5\n 47652: a2 = a2 | a4\n 47655: a3 = u8 [a0 + 0x5]\n 47658: a4 = u8 [a0 + 0x4]\n 47661: a5 = u8 [a0 + 0x6]\n 47664: a1 = u8 [a0 + 0x7]\n 47667: a3 = a3 << 0x8\n 47670: a3 = a3 | a4\n 47673: a5 = a5 << 0x10\n 47676: a1 = a1 << 0x18\n 47679: a1 = a1 | a5\n 47682: a1 = a1 | a3\n 47685: a1 = a1 << 0x20\n 47688: t1 = a1 | a2\n 47691: a1 = u8 [a0 + 0x19]\n 47694: a3 = u8 [a0 + 0x18]\n 47697: a4 = u8 [a0 + 0x1a]\n 47700: a5 = u8 [a0 + 0x1b]\n 47703: a1 = a1 << 0x8\n 47706: a1 = a1 | a3\n 47709: a4 = a4 << 0x10\n 47712: a5 = a5 << 0x18\n 47715: a4 = a4 | a5\n 47718: a1 = a1 | a4\n 47721: a3 = u8 [a0 + 0x1d]\n 47724: a4 = u8 [a0 + 0x1c]\n 47727: a5 = u8 [a0 + 0x1e]\n 47730: a2 = u8 [a0 + 0x1f]\n 47733: a3 = a3 << 0x8\n 47736: a3 = a3 | a4\n 47739: a5 = a5 << 0x10\n 47742: a2 = a2 << 0x18\n 47745: a2 = a2 | a5\n 47748: a2 = a2 | a3\n 47751: a2 = a2 << 0x20\n 47754: a3 = a2 | a1\n 47757: a1 = u8 [a0 + 0x9]\n 47760: a2 = u8 [a0 + 0x8]\n 47763: a4 = u8 [a0 + 0xa]\n 47766: a5 = u8 [a0 + 0xb]\n 47769: a1 = a1 << 0x8\n 47772: a1 = a1 | a2\n 47775: a4 = a4 << 0x10\n 47778: a5 = a5 << 0x18\n 47781: a4 = a4 | a5\n 47784: a1 = a1 | a4\n 47787: a2 = u8 [a0 + 0xd]\n 47790: a4 = u8 [a0 + 0xc]\n 47793: a5 = u8 [a0 + 0xe]\n 47796: a0 = u8 [a0 + 0xf]\n 47799: a2 = a2 << 0x8\n 47802: a2 = a2 | a4\n 47805: a5 = a5 << 0x10\n 47808: a0 = a0 << 0x18\n 47811: a0 = a0 | a5\n 47814: a0 = a0 | a2\n 47817: a0 = a0 << 0x20\n 47820: a0 = a0 | a1\n 47823: a0 = reverse a0\n 47825: u64 [s1 + 0x1d8] = a0\n 47829: a0 = reverse a3\n 47831: u64 [s1 + 0x1c0] = a0\n 47835: a0 = reverse t1\n 47837: u64 [s1 + 0x1d0] = a0\n 47841: a0 = reverse t0\n 47843: u64 [s1 + 0x1c8] = a0\n 47847: ecalli 11 // 'ref_time_left'\n 47849: fallthrough\n      : @617 (gas: 37)\n 47850: u64 [s1 + 0x1b8] = a0\n 47854: a0 = u64 [s1 + 0x1e0]\n 47858: a0 = reverse a0\n 47860: a1 = u64 [s1 + 0x1e8]\n 47864: a1 = reverse a1\n 47866: a1 = a1 >> 0x20\n 47869: a2 = a0 << 0x20\n 47872: a1 = a1 | a2\n 47875: a0 = a0 >> 0x20\n 47878: a2 = u64 [s1 + 0x1f0]\n 47882: a2 = reverse a2\n 47884: a3 = a2 << 0x20\n 47887: a0 = a0 | a3\n 47890: u64 [s1 + 0x488] = a0\n 47894: u64 [s1 + 0x480] = a1\n 47898: a2 = a2 >> 0x20\n 47901: u32 [s1 + 0x490] = a2\n 47905: a2 = u64 [s1 + 0x1c0]\n 47909: a0 = u64 [s1 + 0x200]\n 47913: u64 [s1 + 0x4b8] = a0\n 47917: a0 = u64 [s1 + 0x208]\n 47921: u64 [s1 + 0x4b0] = a0\n 47925: a0 = u64 [s1 + 0x1f8]\n 47929: u64 [s1 + 0x4a8] = a0\n 47933: a0 = u64 [s1 + 0x1d0]\n 47937: a1 = u64 [s1 + 0x1c8]\n 47941: a0 = a0 | a1\n 47944: a3 = u64 [s1 + 0x1d8]\n 47948: a1 = a2 | a3\n 47951: a1 = a1 | a0\n 47954: a0 = a0 | a3\n 47957: a1 = a1 >> 0x20\n 47960: a0 = a0 << 0x20\n 47963: a0 = a0 | a1\n 47966: a1 = u64 [s1 + 0x210]\n 47970: u64 [s1 + 0x4a0] = a1\n 47974: jump @619 if a0 == 0\n      : @618 (gas: 1)\n 47977: jump @668\n      : @619 (gas: 3)\n 47980: i32 a0 = a2 + 0\n 47982: a1 = 0\n 47984: ra = 578, jump @0\n      : @620 [@dyn 289] (gas: 4)\n 47991: u64 [s1 + 0x210] = a0\n 47995: a0 = 0\n 47997: a1 = 0\n 47999: ra = 580, jump @0\n      : @621 [@dyn 290] (gas: 34)\n 48006: u32 [s1 + 1216] = 0\n 48010: a2 = u64 [s1 + 0x1b8]\n 48014: a1 = a2 >u 0x8fc\n 48018: a2 = -a1\n 48020: u64 [s1 + 0x4f8] = a2\n 48024: u64 [s1 + 0x4f0] = a2\n 48028: u64 [s1 + 0x4e8] = a2\n 48032: u64 [s1 + 0x4e0] = a2\n 48036: a2 = s1 + 0x480\n 48040: a2 = a2 << 0x20\n 48043: a2 = a2 >> 0x20\n 48046: a1 = a1 << 0x23\n 48049: t0 = a1 | a2\n 48052: a1 = s1 + 0x4a0\n 48056: a1 = a1 << 0x20\n 48059: a1 = a1 >> 0x20\n 48062: a2 = s1 + 0x4e0\n 48066: a2 = a2 << 0x20\n 48069: a3 = a2 | a1\n 48072: a4 = u64 [s1 + 0x210]\n 48076: a4 = a4 << 0x20\n 48079: a4 = a4 >> 0x20\n 48082: a0 = a0 << 0x20\n 48085: a0 = a0 >> 0x20\n 48088: a1 = s1 + 0x4c0\n 48092: a1 = a1 << 0x20\n 48095: a5 = a1 | a0\n 48098: a1 = 0xffffffffffffffff\n 48101: a2 = 0xffffffffffffffff\n 48104: a0 = t0\n 48106: ecalli 1 // 'call'\n 48108: u64 [s1 + 0x210] = a0\n 48112: a0 = s1 + 0x380\n 48116: ra = 582, jump @353\n      : @622 [@dyn 291] (gas: 2)\n 48122: a0 = u64 [s1 + 0x210]\n 48126: jump @624 if a0 == 0\n      : @623 (gas: 1)\n 48129: jump @669\n      : @624 (gas: 2)\n 48132: a1 = 0x20\n 48135: ra = 584, jump @0\n      : @625 [@dyn 292] (gas: 59)\n 48142: a1 = u64 [s1 + 0x170]\n 48146: u8 [a0 + 0x10] = a1\n 48149: a1 = u64 [s1 + 0x130]\n 48153: u8 [a0 + 0xf] = a1\n 48156: a1 = u64 [s1 + 0x128]\n 48160: u8 [a0 + 0xe] = a1\n 48163: a1 = u64 [s1 + 0x120]\n 48167: u8 [a0 + 0xd] = a1\n 48170: a1 = u64 [s1 + 0x118]\n 48174: u8 [a0 + 0xc] = a1\n 48177: a1 = u64 [s1 + 0x110]\n 48181: u8 [a0 + 0xb] = a1\n 48184: a1 = u64 [s1 + 0x108]\n 48188: u8 [a0 + 0xa] = a1\n 48191: a1 = u64 [s1 + 0x100]\n 48195: u8 [a0 + 0x9] = a1\n 48198: a1 = u64 [s1 + 0x218]\n 48202: u8 [a0 + 0x8] = a1\n 48205: u8 [a0 + 7] = 0\n 48208: u8 [a0 + 6] = 0\n 48211: u8 [a0 + 5] = 0\n 48214: u8 [a0 + 4] = 0\n 48217: u8 [a0 + 3] = 0\n 48220: u8 [a0 + 2] = 0\n 48223: u8 [a0 + 1] = 0\n 48226: u8 [a0 + 0] = 0\n 48228: a1 = u64 [s1 + 0x1b0]\n 48232: u8 [a0 + 0x18] = a1\n 48235: a1 = u64 [s1 + 0x168]\n 48239: u8 [a0 + 0x17] = a1\n 48242: a1 = u64 [s1 + 0x160]\n 48246: u8 [a0 + 0x16] = a1\n 48249: a1 = u64 [s1 + 0x158]\n 48253: u8 [a0 + 0x15] = a1\n 48256: a1 = u64 [s1 + 0x150]\n 48260: u8 [a0 + 0x14] = a1\n 48263: a1 = u64 [s1 + 0x148]\n 48267: u8 [a0 + 0x13] = a1\n 48270: a1 = u64 [s1 + 0x140]\n 48274: u8 [a0 + 0x12] = a1\n 48277: a1 = u64 [s1 + 0x138]\n 48281: u8 [a0 + 0x11] = a1\n 48284: a1 = u64 [s1 + 0x1a8]\n 48288: u8 [a0 + 0x1f] = a1\n 48291: a1 = u64 [s1 + 0x1a0]\n 48295: u8 [a0 + 0x1e] = a1\n 48298: a1 = u64 [s1 + 0x198]\n 48302: u8 [a0 + 0x1d] = a1\n 48305: a1 = u64 [s1 + 0x190]\n 48309: u8 [a0 + 0x1c] = a1\n 48312: a1 = u64 [s1 + 0x188]\n 48316: u8 [a0 + 0x1b] = a1\n 48319: a1 = u64 [s1 + 0x180]\n 48323: u8 [a0 + 0x1a] = a1\n 48326: a1 = u64 [s1 + 0x178]\n 48330: u8 [a0 + 0x19] = a1\n 48333: a0 = 0x20\n 48336: a1 = 0x20\n 48339: ra = 586, jump @0\n      : @626 [@dyn 293] (gas: 35)\n 48346: u8 [a0 + 31] = 0x2\n 48350: u8 [a0 + 30] = 0\n 48353: u8 [a0 + 29] = 0\n 48356: u8 [a0 + 28] = 0\n 48359: u8 [a0 + 27] = 0\n 48362: u8 [a0 + 26] = 0\n 48365: u8 [a0 + 25] = 0\n 48368: u8 [a0 + 24] = 0\n 48371: u8 [a0 + 23] = 0\n 48374: u8 [a0 + 22] = 0\n 48377: u8 [a0 + 21] = 0\n 48380: u8 [a0 + 20] = 0\n 48383: u8 [a0 + 19] = 0\n 48386: u8 [a0 + 18] = 0\n 48389: u8 [a0 + 17] = 0\n 48392: u8 [a0 + 16] = 0\n 48395: u8 [a0 + 15] = 0\n 48398: u8 [a0 + 14] = 0\n 48401: u8 [a0 + 13] = 0\n 48404: u8 [a0 + 12] = 0\n 48407: u8 [a0 + 11] = 0\n 48410: u8 [a0 + 10] = 0\n 48413: u8 [a0 + 9] = 0\n 48416: u8 [a0 + 8] = 0\n 48419: u8 [a0 + 7] = 0\n 48422: u8 [a0 + 6] = 0\n 48425: u8 [a0 + 5] = 0\n 48428: u8 [a0 + 4] = 0\n 48431: u8 [a0 + 3] = 0\n 48434: u8 [a0 + 2] = 0\n 48437: u8 [a0 + 1] = 0\n 48440: u8 [a0 + 0] = 0\n 48442: a1 = 0x40\n 48445: a0 = 0\n 48447: ra = 588, jump @0\n      : @627 [@dyn 294] (gas: 44)\n 48454: i32 a0 = a0 + 0\n 48456: i32 a2 = s1 + 0x620\n 48460: a1 = 0x40\n 48463: ecalli 8 // 'hash_keccak_256'\n 48465: a0 = u64 [s1 + 0x620]\n 48469: a1 = u64 [s1 + 0x628]\n 48473: a2 = u64 [s1 + 0x630]\n 48477: a3 = u64 [s1 + 0x638]\n 48481: a0 = reverse a0\n 48483: a1 = reverse a1\n 48485: a2 = reverse a2\n 48487: a3 = reverse a3\n 48489: a4 = a3 + 0x6\n 48492: a3 = a4 <u a3\n 48495: a5 = a2 + a3\n 48498: a2 = a5 <u a2\n 48501: a2 = a3 if a3 == 0\n 48504: a2 = a2 + a1\n 48507: a1 = a2 <u a1\n 48510: a0 = a0 + a1\n 48513: u64 [s1 + 0x608] = a5\n 48517: u64 [s1 + 0x600] = a4\n 48521: u64 [s1 + 0x610] = a2\n 48525: u64 [s1 + 0x618] = a0\n 48529: u64 [s1 + 1592] = 0\n 48533: u64 [s1 + 1584] = 0\n 48537: u64 [s1 + 1576] = 0\n 48541: u64 [s1 + 1568] = 0\n 48545: u32 [s1 + 1504] = 0x20\n 48550: i32 a1 = s1 + 0x600\n 48554: i32 a3 = s1 + 0x620\n 48558: i32 a4 = s1 + 0x5e0\n 48562: a2 = 0xffffffffffffffff\n 48565: a0 = 0\n 48567: ecalli 7 // 'get_storage'\n 48569: a0 = u64 [s1 + 0x620]\n 48573: u64 [s1 + 0x210] = a0\n 48577: a0 = u64 [s1 + 0x630]\n 48581: u64 [s1 + 0x208] = a0\n 48585: a0 = u64 [s1 + 0x628]\n 48589: u64 [s1 + 0x200] = a0\n 48593: a0 = 0x40\n 48596: a1 = 0x20\n 48599: ra = 590, jump @0\n      : @628 [@dyn 295] (gas: 98)\n 48606: a1 = u8 [a0 + 0x11]\n 48609: a2 = u8 [a0 + 0x10]\n 48612: a3 = u8 [a0 + 0x12]\n 48615: a4 = u8 [a0 + 0x13]\n 48618: a1 = a1 << 0x8\n 48621: a1 = a1 | a2\n 48624: a3 = a3 << 0x10\n 48627: a4 = a4 << 0x18\n 48630: a3 = a3 | a4\n 48633: a1 = a1 | a3\n 48636: a2 = u8 [a0 + 0x15]\n 48639: a3 = u8 [a0 + 0x14]\n 48642: a4 = u8 [a0 + 0x16]\n 48645: a5 = u8 [a0 + 0x17]\n 48648: a2 = a2 << 0x8\n 48651: a2 = a2 | a3\n 48654: a4 = a4 << 0x10\n 48657: a5 = a5 << 0x18\n 48660: a4 = a4 | a5\n 48663: a2 = a2 | a4\n 48666: a2 = a2 << 0x20\n 48669: t0 = a2 | a1\n 48672: a2 = u8 [a0 + 0x1]\n 48675: a3 = u8 [a0]\n 48677: a4 = u8 [a0 + 0x2]\n 48680: a5 = u8 [a0 + 0x3]\n 48683: a2 = a2 << 0x8\n 48686: a2 = a2 | a3\n 48689: a4 = a4 << 0x10\n 48692: a5 = a5 << 0x18\n 48695: a4 = a4 | a5\n 48698: a2 = a2 | a4\n 48701: a3 = u8 [a0 + 0x5]\n 48704: a4 = u8 [a0 + 0x4]\n 48707: a5 = u8 [a0 + 0x6]\n 48710: a1 = u8 [a0 + 0x7]\n 48713: a3 = a3 << 0x8\n 48716: a3 = a3 | a4\n 48719: a5 = a5 << 0x10\n 48722: a1 = a1 << 0x18\n 48725: a1 = a1 | a5\n 48728: a1 = a1 | a3\n 48731: a1 = a1 << 0x20\n 48734: t1 = a1 | a2\n 48737: a1 = u8 [a0 + 0x19]\n 48740: a3 = u8 [a0 + 0x18]\n 48743: a4 = u8 [a0 + 0x1a]\n 48746: a5 = u8 [a0 + 0x1b]\n 48749: a1 = a1 << 0x8\n 48752: a1 = a1 | a3\n 48755: a4 = a4 << 0x10\n 48758: a5 = a5 << 0x18\n 48761: a4 = a4 | a5\n 48764: a1 = a1 | a4\n 48767: a3 = u8 [a0 + 0x1d]\n 48770: a4 = u8 [a0 + 0x1c]\n 48773: a5 = u8 [a0 + 0x1e]\n 48776: a2 = u8 [a0 + 0x1f]\n 48779: a3 = a3 << 0x8\n 48782: a3 = a3 | a4\n 48785: a5 = a5 << 0x10\n 48788: a2 = a2 << 0x18\n 48791: a2 = a2 | a5\n 48794: a2 = a2 | a3\n 48797: a2 = a2 << 0x20\n 48800: a3 = a2 | a1\n 48803: a1 = u8 [a0 + 0x9]\n 48806: a2 = u8 [a0 + 0x8]\n 48809: a4 = u8 [a0 + 0xa]\n 48812: a5 = u8 [a0 + 0xb]\n 48815: a1 = a1 << 0x8\n 48818: a1 = a1 | a2\n 48821: a4 = a4 << 0x10\n 48824: a5 = a5 << 0x18\n 48827: a4 = a4 | a5\n 48830: a1 = a1 | a4\n 48833: a2 = u8 [a0 + 0xd]\n 48836: a4 = u8 [a0 + 0xc]\n 48839: a5 = u8 [a0 + 0xe]\n 48842: a0 = u8 [a0 + 0xf]\n 48845: a2 = a2 << 0x8\n 48848: a2 = a2 | a4\n 48851: a5 = a5 << 0x10\n 48854: a0 = a0 << 0x18\n 48857: a0 = a0 | a5\n 48860: a0 = a0 | a2\n 48863: a0 = a0 << 0x20\n 48866: a0 = a0 | a1\n 48869: a0 = reverse a0\n 48871: u64 [s1 + 0x1f8] = a0\n 48875: a0 = reverse a3\n 48877: u64 [s1 + 0x1e0] = a0\n 48881: a0 = reverse t1\n 48883: u64 [s1 + 0x1f0] = a0\n 48887: a0 = reverse t0\n 48889: u64 [s1 + 0x1e8] = a0\n 48893: ecalli 11 // 'ref_time_left'\n 48895: fallthrough\n      : @629 (gas: 37)\n 48896: u64 [s1 + 0x1d8] = a0\n 48900: a0 = u64 [s1 + 0x200]\n 48904: a0 = reverse a0\n 48906: a1 = u64 [s1 + 0x208]\n 48910: a1 = reverse a1\n 48912: a1 = a1 >> 0x20\n 48915: a2 = a0 << 0x20\n 48918: a1 = a1 | a2\n 48921: a0 = a0 >> 0x20\n 48924: a2 = u64 [s1 + 0x210]\n 48928: a2 = reverse a2\n 48930: a3 = a2 << 0x20\n 48933: a0 = a0 | a3\n 48936: u64 [s1 + 0x508] = a0\n 48940: u64 [s1 + 0x500] = a1\n 48944: a2 = a2 >> 0x20\n 48947: u32 [s1 + 0x510] = a2\n 48951: a2 = u64 [s1 + 0x1e0]\n 48955: a0 = u64 [s1 + 0xc0]\n 48959: u64 [s1 + 0x538] = a0\n 48963: a0 = u64 [s1 + 0xc8]\n 48967: u64 [s1 + 0x530] = a0\n 48971: a0 = u64 [s1 + 0xd0]\n 48975: u64 [s1 + 0x528] = a0\n 48979: a0 = u64 [s1 + 0x1f0]\n 48983: a1 = u64 [s1 + 0x1e8]\n 48987: a0 = a0 | a1\n 48990: a3 = u64 [s1 + 0x1f8]\n 48994: a1 = a2 | a3\n 48997: a1 = a1 | a0\n 49000: a0 = a0 | a3\n 49003: a1 = a1 >> 0x20\n 49006: a0 = a0 << 0x20\n 49009: a0 = a0 | a1\n 49012: a1 = u64 [s1 + 0xd8]\n 49016: u64 [s1 + 0x520] = a1\n 49020: jump @631 if a0 == 0\n      : @630 (gas: 1)\n 49023: jump @668\n      : @631 (gas: 3)\n 49026: i32 a0 = a2 + 0\n 49028: a1 = 0\n 49030: ra = 592, jump @0\n      : @632 [@dyn 296] (gas: 4)\n 49037: u64 [s1 + 0x210] = a0\n 49041: a0 = 0\n 49043: a1 = 0\n 49045: ra = 594, jump @0\n      : @633 [@dyn 297] (gas: 34)\n 49052: u32 [s1 + 1344] = 0\n 49056: a2 = u64 [s1 + 0x1d8]\n 49060: a1 = a2 >u 0x8fc\n 49064: a2 = -a1\n 49066: u64 [s1 + 0x578] = a2\n 49070: u64 [s1 + 0x570] = a2\n 49074: u64 [s1 + 0x568] = a2\n 49078: u64 [s1 + 0x560] = a2\n 49082: a2 = s1 + 0x500\n 49086: a2 = a2 << 0x20\n 49089: a2 = a2 >> 0x20\n 49092: a1 = a1 << 0x23\n 49095: t0 = a1 | a2\n 49098: a1 = s1 + 0x520\n 49102: a1 = a1 << 0x20\n 49105: a1 = a1 >> 0x20\n 49108: a2 = s1 + 0x560\n 49112: a2 = a2 << 0x20\n 49115: a3 = a2 | a1\n 49118: a4 = u64 [s1 + 0x210]\n 49122: a4 = a4 << 0x20\n 49125: a4 = a4 >> 0x20\n 49128: a0 = a0 << 0x20\n 49131: a0 = a0 >> 0x20\n 49134: a1 = s1 + 0x540\n 49138: a1 = a1 << 0x20\n 49141: a5 = a1 | a0\n 49144: a1 = 0xffffffffffffffff\n 49147: a2 = 0xffffffffffffffff\n 49150: a0 = t0\n 49152: ecalli 1 // 'call'\n 49154: u64 [s1 + 0x210] = a0\n 49158: a0 = s1 + 0x320\n 49162: ra = 596, jump @353\n      : @634 [@dyn 298] (gas: 2)\n 49168: a0 = u64 [s1 + 0x210]\n 49172: jump @636 if a0 == 0\n      : @635 (gas: 1)\n 49175: jump @674\n      : @636 (gas: 21)\n 49178: i32 a0 = s1 + 0x580\n 49182: ecalli 5 // 'caller'\n 49184: a0 = u64 [s1 + 0x588]\n 49188: a1 = i32 [s1 + 0x590]\n 49192: a2 = u64 [s1 + 0x580]\n 49196: a0 = reverse a0\n 49198: a3 = a0 << 0x20\n 49201: a1 = reverse a1\n 49203: a1 = a1 >> 0x20\n 49206: a1 = a1 | a3\n 49209: u64 [s1 + 0x210] = a1\n 49213: a0 = a0 >> 0x20\n 49216: a1 = reverse a2\n 49218: a2 = a1 << 0x20\n 49221: a0 = a0 | a2\n 49224: u64 [s1 + 0x208] = a0\n 49228: a1 = a1 >> 0x20\n 49231: u64 [s1 + 0x200] = a1\n 49235: a1 = 0x20\n 49238: a0 = 0\n 49240: ra = 598, jump @0\n      : @637 [@dyn 299] (gas: 59)\n 49247: a1 = u64 [s1 + 0x1a8]\n 49251: u8 [a0 + 0x1f] = a1\n 49254: a1 = u64 [s1 + 0x1a0]\n 49258: u8 [a0 + 0x1e] = a1\n 49261: a1 = u64 [s1 + 0x198]\n 49265: u8 [a0 + 0x1d] = a1\n 49268: a1 = u64 [s1 + 0x190]\n 49272: u8 [a0 + 0x1c] = a1\n 49275: a1 = u64 [s1 + 0x188]\n 49279: u8 [a0 + 0x1b] = a1\n 49282: a1 = u64 [s1 + 0x180]\n 49286: u8 [a0 + 0x1a] = a1\n 49289: a1 = u64 [s1 + 0x178]\n 49293: u8 [a0 + 0x19] = a1\n 49296: a1 = u64 [s1 + 0x1b0]\n 49300: u8 [a0 + 0x18] = a1\n 49303: a1 = u64 [s1 + 0x168]\n 49307: u8 [a0 + 0x17] = a1\n 49310: a1 = u64 [s1 + 0x160]\n 49314: u8 [a0 + 0x16] = a1\n 49317: a1 = u64 [s1 + 0x158]\n 49321: u8 [a0 + 0x15] = a1\n 49324: a1 = u64 [s1 + 0x150]\n 49328: u8 [a0 + 0x14] = a1\n 49331: a1 = u64 [s1 + 0x148]\n 49335: u8 [a0 + 0x13] = a1\n 49338: a1 = u64 [s1 + 0x140]\n 49342: u8 [a0 + 0x12] = a1\n 49345: a1 = u64 [s1 + 0x138]\n 49349: u8 [a0 + 0x11] = a1\n 49352: a1 = u64 [s1 + 0x170]\n 49356: u8 [a0 + 0x10] = a1\n 49359: a1 = u64 [s1 + 0x130]\n 49363: u8 [a0 + 0xf] = a1\n 49366: a1 = u64 [s1 + 0x128]\n 49370: u8 [a0 + 0xe] = a1\n 49373: a1 = u64 [s1 + 0x120]\n 49377: u8 [a0 + 0xd] = a1\n 49380: a1 = u64 [s1 + 0x118]\n 49384: u8 [a0 + 0xc] = a1\n 49387: a1 = u64 [s1 + 0x110]\n 49391: u8 [a0 + 0xb] = a1\n 49394: a1 = u64 [s1 + 0x108]\n 49398: u8 [a0 + 0xa] = a1\n 49401: a1 = u64 [s1 + 0x100]\n 49405: u8 [a0 + 0x9] = a1\n 49408: a1 = u64 [s1 + 0x218]\n 49412: u8 [a0 + 0x8] = a1\n 49415: u8 [a0 + 7] = 0\n 49418: u8 [a0 + 6] = 0\n 49421: u8 [a0 + 5] = 0\n 49424: u8 [a0 + 4] = 0\n 49427: u8 [a0 + 3] = 0\n 49430: u8 [a0 + 2] = 0\n 49433: u8 [a0 + 1] = 0\n 49436: u8 [a0 + 0] = 0\n 49438: a0 = 0x20\n 49441: a1 = 0x20\n 49444: ra = 600, jump @0\n      : @638 [@dyn 300] (gas: 35)\n 49451: u8 [a0 + 31] = 0x2\n 49455: u8 [a0 + 30] = 0\n 49458: u8 [a0 + 29] = 0\n 49461: u8 [a0 + 28] = 0\n 49464: u8 [a0 + 27] = 0\n 49467: u8 [a0 + 26] = 0\n 49470: u8 [a0 + 25] = 0\n 49473: u8 [a0 + 24] = 0\n 49476: u8 [a0 + 23] = 0\n 49479: u8 [a0 + 22] = 0\n 49482: u8 [a0 + 21] = 0\n 49485: u8 [a0 + 20] = 0\n 49488: u8 [a0 + 19] = 0\n 49491: u8 [a0 + 18] = 0\n 49494: u8 [a0 + 17] = 0\n 49497: u8 [a0 + 16] = 0\n 49500: u8 [a0 + 15] = 0\n 49503: u8 [a0 + 14] = 0\n 49506: u8 [a0 + 13] = 0\n 49509: u8 [a0 + 12] = 0\n 49512: u8 [a0 + 11] = 0\n 49515: u8 [a0 + 10] = 0\n 49518: u8 [a0 + 9] = 0\n 49521: u8 [a0 + 8] = 0\n 49524: u8 [a0 + 7] = 0\n 49527: u8 [a0 + 6] = 0\n 49530: u8 [a0 + 5] = 0\n 49533: u8 [a0 + 4] = 0\n 49536: u8 [a0 + 3] = 0\n 49539: u8 [a0 + 2] = 0\n 49542: u8 [a0 + 1] = 0\n 49545: u8 [a0 + 0] = 0\n 49547: a1 = 0x40\n 49550: a0 = 0\n 49552: ra = 602, jump @0\n      : @639 [@dyn 301] (gas: 67)\n 49559: i32 a0 = a0 + 0\n 49561: i32 a2 = s1 + 0x620\n 49565: a1 = 0x40\n 49568: ecalli 8 // 'hash_keccak_256'\n 49570: a0 = u64 [s1 + 0x620]\n 49574: a1 = u64 [s1 + 0x628]\n 49578: a2 = u64 [s1 + 0x630]\n 49582: a3 = u64 [s1 + 0x638]\n 49586: a0 = reverse a0\n 49588: a1 = reverse a1\n 49590: a2 = reverse a2\n 49592: a3 = reverse a3\n 49594: a4 = a3 + 0x5\n 49597: u64 [s1 + 0x1f8] = a4\n 49601: a3 = a4 <u a3\n 49604: a5 = a2 + a3\n 49607: u64 [s1 + 0x1f0] = a5\n 49611: a2 = a5 <u a2\n 49614: a2 = a3 if a3 == 0\n 49617: a2 = a2 + a1\n 49620: u64 [s1 + 0x1e8] = a2\n 49624: a1 = a2 <u a1\n 49627: a0 = a0 + a1\n 49630: u64 [s1 + 0x1e0] = a0\n 49634: u64 [s1 + 0x608] = a5\n 49638: u64 [s1 + 0x600] = a4\n 49642: u64 [s1 + 0x610] = a2\n 49646: u64 [s1 + 0x618] = a0\n 49650: u64 [s1 + 1592] = 0\n 49654: u64 [s1 + 1584] = 0\n 49658: u64 [s1 + 1576] = 0\n 49662: u64 [s1 + 1568] = 0\n 49666: u32 [s1 + 1504] = 0x20\n 49671: i32 a1 = s1 + 0x600\n 49675: i32 a3 = s1 + 0x620\n 49679: i32 a4 = s1 + 0x5e0\n 49683: a2 = 0xffffffffffffffff\n 49686: a0 = 0\n 49688: ecalli 7 // 'get_storage'\n 49690: a0 = u32 [s1 + 0x634]\n 49694: a0 = a0 << 0x20\n 49697: a1 = u64 [s1 + 0x638]\n 49701: a2 = u64 [s1 + 0x200]\n 49705: a0 = a0 | a2\n 49708: a2 = u64 [s1 + 0x1e0]\n 49712: u64 [s1 + 0x618] = a2\n 49716: a2 = u64 [s1 + 0x1e8]\n 49720: u64 [s1 + 0x610] = a2\n 49724: a2 = u64 [s1 + 0x1f0]\n 49728: u64 [s1 + 0x608] = a2\n 49732: a2 = u64 [s1 + 0x1f8]\n 49736: u64 [s1 + 0x600] = a2\n 49740: u64 [s1 + 0x638] = a1\n 49744: u64 [s1 + 0x630] = a0\n 49748: a0 = u64 [s1 + 0x208]\n 49752: u64 [s1 + 0x628] = a0\n 49756: a0 = u64 [s1 + 0x210]\n 49760: u64 [s1 + 0x620] = a0\n 49764: i32 a1 = s1 + 0x600\n 49768: i32 a3 = s1 + 0x620\n 49772: a2 = 0xffffffffffffffff\n 49775: a4 = 0x20\n 49778: a0 = 0\n 49780: ecalli 16 // 'set_storage'\n 49782: a1 = 0x20\n 49785: a0 = 0\n 49787: ra = 604, jump @0\n      : @640 [@dyn 302] (gas: 59)\n 49794: a1 = u64 [s1 + 0x1a8]\n 49798: u8 [a0 + 0x1f] = a1\n 49801: a1 = u64 [s1 + 0x1a0]\n 49805: u8 [a0 + 0x1e] = a1\n 49808: a1 = u64 [s1 + 0x198]\n 49812: u8 [a0 + 0x1d] = a1\n 49815: a1 = u64 [s1 + 0x190]\n 49819: u8 [a0 + 0x1c] = a1\n 49822: a1 = u64 [s1 + 0x188]\n 49826: u8 [a0 + 0x1b] = a1\n 49829: a1 = u64 [s1 + 0x180]\n 49833: u8 [a0 + 0x1a] = a1\n 49836: a1 = u64 [s1 + 0x178]\n 49840: u8 [a0 + 0x19] = a1\n 49843: a1 = u64 [s1 + 0x1b0]\n 49847: u8 [a0 + 0x18] = a1\n 49850: a1 = u64 [s1 + 0x168]\n 49854: u8 [a0 + 0x17] = a1\n 49857: a1 = u64 [s1 + 0x160]\n 49861: u8 [a0 + 0x16] = a1\n 49864: a1 = u64 [s1 + 0x158]\n 49868: u8 [a0 + 0x15] = a1\n 49871: a1 = u64 [s1 + 0x150]\n 49875: u8 [a0 + 0x14] = a1\n 49878: a1 = u64 [s1 + 0x148]\n 49882: u8 [a0 + 0x13] = a1\n 49885: a1 = u64 [s1 + 0x140]\n 49889: u8 [a0 + 0x12] = a1\n 49892: a1 = u64 [s1 + 0x138]\n 49896: u8 [a0 + 0x11] = a1\n 49899: a1 = u64 [s1 + 0x170]\n 49903: u8 [a0 + 0x10] = a1\n 49906: a1 = u64 [s1 + 0x130]\n 49910: u8 [a0 + 0xf] = a1\n 49913: a1 = u64 [s1 + 0x128]\n 49917: u8 [a0 + 0xe] = a1\n 49920: a1 = u64 [s1 + 0x120]\n 49924: u8 [a0 + 0xd] = a1\n 49927: a1 = u64 [s1 + 0x118]\n 49931: u8 [a0 + 0xc] = a1\n 49934: a1 = u64 [s1 + 0x110]\n 49938: u8 [a0 + 0xb] = a1\n 49941: a1 = u64 [s1 + 0x108]\n 49945: u8 [a0 + 0xa] = a1\n 49948: a1 = u64 [s1 + 0x100]\n 49952: u8 [a0 + 0x9] = a1\n 49955: a1 = u64 [s1 + 0x218]\n 49959: u8 [a0 + 0x8] = a1\n 49962: u8 [a0 + 7] = 0\n 49965: u8 [a0 + 6] = 0\n 49968: u8 [a0 + 5] = 0\n 49971: u8 [a0 + 4] = 0\n 49974: u8 [a0 + 3] = 0\n 49977: u8 [a0 + 2] = 0\n 49980: u8 [a0 + 1] = 0\n 49983: u8 [a0 + 0] = 0\n 49985: a0 = 0x20\n 49988: a1 = 0x20\n 49991: ra = 606, jump @0\n      : @641 [@dyn 303] (gas: 35)\n 49998: u8 [a0 + 31] = 0x2\n 50002: u8 [a0 + 30] = 0\n 50005: u8 [a0 + 29] = 0\n 50008: u8 [a0 + 28] = 0\n 50011: u8 [a0 + 27] = 0\n 50014: u8 [a0 + 26] = 0\n 50017: u8 [a0 + 25] = 0\n 50020: u8 [a0 + 24] = 0\n 50023: u8 [a0 + 23] = 0\n 50026: u8 [a0 + 22] = 0\n 50029: u8 [a0 + 21] = 0\n 50032: u8 [a0 + 20] = 0\n 50035: u8 [a0 + 19] = 0\n 50038: u8 [a0 + 18] = 0\n 50041: u8 [a0 + 17] = 0\n 50044: u8 [a0 + 16] = 0\n 50047: u8 [a0 + 15] = 0\n 50050: u8 [a0 + 14] = 0\n 50053: u8 [a0 + 13] = 0\n 50056: u8 [a0 + 12] = 0\n 50059: u8 [a0 + 11] = 0\n 50062: u8 [a0 + 10] = 0\n 50065: u8 [a0 + 9] = 0\n 50068: u8 [a0 + 8] = 0\n 50071: u8 [a0 + 7] = 0\n 50074: u8 [a0 + 6] = 0\n 50077: u8 [a0 + 5] = 0\n 50080: u8 [a0 + 4] = 0\n 50083: u8 [a0 + 3] = 0\n 50086: u8 [a0 + 2] = 0\n 50089: u8 [a0 + 1] = 0\n 50092: u8 [a0 + 0] = 0\n 50094: a1 = 0x40\n 50097: a0 = 0\n 50099: ra = 608, jump @0\n      : @642 [@dyn 304] (gas: 64)\n 50106: i32 a0 = a0 + 0\n 50108: i32 a2 = s1 + 0x620\n 50112: a1 = 0x40\n 50115: ecalli 8 // 'hash_keccak_256'\n 50117: a0 = u64 [s1 + 0x620]\n 50121: a1 = u64 [s1 + 0x628]\n 50125: a2 = u64 [s1 + 0x630]\n 50129: a3 = u64 [s1 + 0x638]\n 50133: a0 = reverse a0\n 50135: a1 = reverse a1\n 50137: a2 = reverse a2\n 50139: a3 = reverse a3\n 50141: a4 = a3 + 0x4\n 50144: u64 [s1 + 0x210] = a4\n 50148: a3 = a4 <u a3\n 50151: a5 = a2 + a3\n 50154: u64 [s1 + 0x208] = a5\n 50158: a2 = a5 <u a2\n 50161: a2 = a3 if a3 == 0\n 50164: a2 = a2 + a1\n 50167: u64 [s1 + 0x200] = a2\n 50171: a1 = a2 <u a1\n 50174: a0 = a0 + a1\n 50177: u64 [s1 + 0x1f8] = a0\n 50181: u64 [s1 + 0x608] = a5\n 50185: u64 [s1 + 0x600] = a4\n 50189: u64 [s1 + 0x610] = a2\n 50193: u64 [s1 + 0x618] = a0\n 50197: u64 [s1 + 1592] = 0\n 50201: u64 [s1 + 1584] = 0\n 50205: u64 [s1 + 1576] = 0\n 50209: u64 [s1 + 1568] = 0\n 50213: u32 [s1 + 1504] = 0x20\n 50218: i32 a1 = s1 + 0x600\n 50222: i32 a3 = s1 + 0x620\n 50226: i32 a4 = s1 + 0x5e0\n 50230: a2 = 0xffffffffffffffff\n 50233: a0 = 0\n 50235: ecalli 7 // 'get_storage'\n 50237: a0 = u64 [s1 + 0x1f8]\n 50241: u64 [s1 + 0x618] = a0\n 50245: a0 = u64 [s1 + 0x200]\n 50249: u64 [s1 + 0x610] = a0\n 50253: a0 = u64 [s1 + 0x208]\n 50257: u64 [s1 + 0x608] = a0\n 50261: a0 = u64 [s1 + 0x210]\n 50265: u64 [s1 + 0x600] = a0\n 50269: a0 = u64 [s1 + 0xe0]\n 50273: u64 [s1 + 0x638] = a0\n 50277: a0 = u64 [s1 + 0xe8]\n 50281: u64 [s1 + 0x630] = a0\n 50285: a0 = u64 [s1 + 0xf0]\n 50289: u64 [s1 + 0x628] = a0\n 50293: a0 = u64 [s1 + 0xf8]\n 50297: u64 [s1 + 0x620] = a0\n 50301: i32 a1 = s1 + 0x600\n 50305: i32 a3 = s1 + 0x620\n 50309: a2 = 0xffffffffffffffff\n 50312: a4 = 0x20\n 50315: a0 = 0\n 50317: ecalli 16 // 'set_storage'\n 50319: a1 = 0x20\n 50322: a0 = 0\n 50324: ra = 610, jump @0\n      : @643 [@dyn 305] (gas: 59)\n 50331: a1 = u64 [s1 + 0x1a8]\n 50335: u8 [a0 + 0x1f] = a1\n 50338: a1 = u64 [s1 + 0x1a0]\n 50342: u8 [a0 + 0x1e] = a1\n 50345: a1 = u64 [s1 + 0x198]\n 50349: u8 [a0 + 0x1d] = a1\n 50352: a1 = u64 [s1 + 0x190]\n 50356: u8 [a0 + 0x1c] = a1\n 50359: a1 = u64 [s1 + 0x188]\n 50363: u8 [a0 + 0x1b] = a1\n 50366: a1 = u64 [s1 + 0x180]\n 50370: u8 [a0 + 0x1a] = a1\n 50373: a1 = u64 [s1 + 0x178]\n 50377: u8 [a0 + 0x19] = a1\n 50380: a1 = u64 [s1 + 0x1b0]\n 50384: u8 [a0 + 0x18] = a1\n 50387: a1 = u64 [s1 + 0x168]\n 50391: u8 [a0 + 0x17] = a1\n 50394: a1 = u64 [s1 + 0x160]\n 50398: u8 [a0 + 0x16] = a1\n 50401: a1 = u64 [s1 + 0x158]\n 50405: u8 [a0 + 0x15] = a1\n 50408: a1 = u64 [s1 + 0x150]\n 50412: u8 [a0 + 0x14] = a1\n 50415: a1 = u64 [s1 + 0x148]\n 50419: u8 [a0 + 0x13] = a1\n 50422: a1 = u64 [s1 + 0x140]\n 50426: u8 [a0 + 0x12] = a1\n 50429: a1 = u64 [s1 + 0x138]\n 50433: u8 [a0 + 0x11] = a1\n 50436: a1 = u64 [s1 + 0x170]\n 50440: u8 [a0 + 0x10] = a1\n 50443: a1 = u64 [s1 + 0x130]\n 50447: u8 [a0 + 0xf] = a1\n 50450: a1 = u64 [s1 + 0x128]\n 50454: u8 [a0 + 0xe] = a1\n 50457: a1 = u64 [s1 + 0x120]\n 50461: u8 [a0 + 0xd] = a1\n 50464: a1 = u64 [s1 + 0x118]\n 50468: u8 [a0 + 0xc] = a1\n 50471: a1 = u64 [s1 + 0x110]\n 50475: u8 [a0 + 0xb] = a1\n 50478: a1 = u64 [s1 + 0x108]\n 50482: u8 [a0 + 0xa] = a1\n 50485: a1 = u64 [s1 + 0x100]\n 50489: u8 [a0 + 0x9] = a1\n 50492: a1 = u64 [s1 + 0x218]\n 50496: u8 [a0 + 0x8] = a1\n 50499: u8 [a0 + 7] = 0\n 50502: u8 [a0 + 6] = 0\n 50505: u8 [a0 + 5] = 0\n 50508: u8 [a0 + 4] = 0\n 50511: u8 [a0 + 3] = 0\n 50514: u8 [a0 + 2] = 0\n 50517: u8 [a0 + 1] = 0\n 50520: u8 [a0 + 0] = 0\n 50522: a0 = 0x20\n 50525: a1 = 0x20\n 50528: ra = 612, jump @0\n      : @644 [@dyn 306] (gas: 35)\n 50535: u8 [a0 + 31] = 0x2\n 50539: u8 [a0 + 30] = 0\n 50542: u8 [a0 + 29] = 0\n 50545: u8 [a0 + 28] = 0\n 50548: u8 [a0 + 27] = 0\n 50551: u8 [a0 + 26] = 0\n 50554: u8 [a0 + 25] = 0\n 50557: u8 [a0 + 24] = 0\n 50560: u8 [a0 + 23] = 0\n 50563: u8 [a0 + 22] = 0\n 50566: u8 [a0 + 21] = 0\n 50569: u8 [a0 + 20] = 0\n 50572: u8 [a0 + 19] = 0\n 50575: u8 [a0 + 18] = 0\n 50578: u8 [a0 + 17] = 0\n 50581: u8 [a0 + 16] = 0\n 50584: u8 [a0 + 15] = 0\n 50587: u8 [a0 + 14] = 0\n 50590: u8 [a0 + 13] = 0\n 50593: u8 [a0 + 12] = 0\n 50596: u8 [a0 + 11] = 0\n 50599: u8 [a0 + 10] = 0\n 50602: u8 [a0 + 9] = 0\n 50605: u8 [a0 + 8] = 0\n 50608: u8 [a0 + 7] = 0\n 50611: u8 [a0 + 6] = 0\n 50614: u8 [a0 + 5] = 0\n 50617: u8 [a0 + 4] = 0\n 50620: u8 [a0 + 3] = 0\n 50623: u8 [a0 + 2] = 0\n 50626: u8 [a0 + 1] = 0\n 50629: u8 [a0 + 0] = 0\n 50631: a1 = 0x40\n 50634: a0 = 0\n 50636: ra = 614, jump @0\n      : @645 [@dyn 307] (gas: 40)\n 50643: i32 a0 = a0 + 0\n 50645: i32 a2 = s1 + 0x620\n 50649: a1 = 0x40\n 50652: ecalli 8 // 'hash_keccak_256'\n 50654: a0 = u64 [s1 + 0x620]\n 50658: a1 = u64 [s1 + 0x628]\n 50662: a2 = u64 [s1 + 0x630]\n 50666: a3 = u64 [s1 + 0x638]\n 50670: a0 = reverse a0\n 50672: a1 = reverse a1\n 50674: a2 = reverse a2\n 50676: a3 = reverse a3\n 50678: a4 = a3 + 0x2\n 50681: a3 = a4 <u a3\n 50684: a5 = a2 + a3\n 50687: a2 = a5 <u a2\n 50690: a2 = a3 if a3 == 0\n 50693: a2 = a2 + a1\n 50696: a1 = a2 <u a1\n 50699: a0 = a0 + a1\n 50702: u64 [s1 + 0x208] = a5\n 50706: u64 [s1 + 0x608] = a5\n 50710: u64 [s1 + 0x210] = a4\n 50714: u64 [s1 + 0x600] = a4\n 50718: u64 [s1 + 0x200] = a2\n 50722: u64 [s1 + 0x610] = a2\n 50726: u64 [s1 + 0x1f8] = a0\n 50730: u64 [s1 + 0x618] = a0\n 50734: u64 [s1 + 1592] = 0\n 50738: u64 [s1 + 1584] = 0\n 50742: u64 [s1 + 1576] = 0\n 50746: u64 [s1 + 1568] = 0\n 50750: u32 [s1 + 1504] = 0x20\n 50755: i32 a1 = s1 + 0x600\n 50759: i32 a3 = s1 + 0x620\n 50763: i32 a4 = s1 + 0x5e0\n 50767: a2 = 0xffffffffffffffff\n 50770: a0 = 0\n 50772: ecalli 7 // 'get_storage'\n 50774: fallthrough\n      : @646 (gas: 20)\n 50775: a0 = u64 [s1 + 0x620]\n 50779: a1 = u64 [s1 + 0x638]\n 50783: a2 = u64 [s1 + 0x628]\n 50787: a3 = u64 [s1 + 0x630]\n 50791: a4 = a0 + 0x1\n 50794: a0 = a4 <u 0x1\n 50797: a2 = a2 + a0\n 50800: a0 = a4 | a2\n 50803: a0 = a0 <u 0x1\n 50806: a5 = a3 + a0\n 50809: a0 = a5 <u a3\n 50812: a0 = a0 + a1\n 50815: u64 [s1 + 0x1e8] = a2\n 50819: u64 [s1 + 0x1d8] = a0\n 50823: a0 = a0 | a2\n 50826: u64 [s1 + 0x1f0] = a4\n 50830: u64 [s1 + 0x1e0] = a5\n 50834: a1 = a4 | a5\n 50837: a0 = a0 | a1\n 50840: jump @682 if a0 == 0\n      : @647 (gas: 44)\n 50844: a0 = u64 [s1 + 0x200]\n 50848: u64 [s1 + 0x610] = a0\n 50852: a0 = u64 [s1 + 0x208]\n 50856: u64 [s1 + 0x608] = a0\n 50860: a0 = u64 [s1 + 0x210]\n 50864: u64 [s1 + 0x600] = a0\n 50868: a0 = u64 [s1 + 0x1f8]\n 50872: u64 [s1 + 0x618] = a0\n 50876: u64 [s1 + 1592] = 0\n 50880: u64 [s1 + 1584] = 0\n 50884: u64 [s1 + 1576] = 0\n 50888: u64 [s1 + 1568] = 0\n 50892: u32 [s1 + 1504] = 0x20\n 50897: i32 a1 = s1 + 0x600\n 50901: i32 a3 = s1 + 0x620\n 50905: i32 a4 = s1 + 0x5e0\n 50909: a2 = 0xffffffffffffffff\n 50912: a0 = 0\n 50914: ecalli 7 // 'get_storage'\n 50916: a0 = u64 [s1 + 0x1f8]\n 50920: u64 [s1 + 0x618] = a0\n 50924: a0 = u64 [s1 + 0x200]\n 50928: u64 [s1 + 0x610] = a0\n 50932: a0 = u64 [s1 + 0x208]\n 50936: u64 [s1 + 0x608] = a0\n 50940: a0 = u64 [s1 + 0x210]\n 50944: u64 [s1 + 0x600] = a0\n 50948: a0 = u64 [s1 + 0x1d8]\n 50952: u64 [s1 + 0x638] = a0\n 50956: a0 = u64 [s1 + 0x1e0]\n 50960: u64 [s1 + 0x630] = a0\n 50964: a0 = u64 [s1 + 0x1e8]\n 50968: u64 [s1 + 0x628] = a0\n 50972: a0 = u64 [s1 + 0x1f0]\n 50976: u64 [s1 + 0x620] = a0\n 50980: i32 a1 = s1 + 0x600\n 50984: i32 a3 = s1 + 0x620\n 50988: a2 = 0xffffffffffffffff\n 50991: a4 = 0x20\n 50994: a0 = 0\n 50996: ecalli 16 // 'set_storage'\n 50998: i32 a0 = s1 + 0x5a0\n 51002: ecalli 10 // 'now'\n 51004: fallthrough\n      : @648 (gas: 16)\n 51005: a3 = u64 [s1 + 0x5b8]\n 51009: a1 = u64 [s1 + 0x5b0]\n 51013: a2 = u64 [s1 + 0x5a8]\n 51017: t2 = u64 [s1 + 0x5a0]\n 51021: t0 = a3 + 0x1\n 51024: a5 = a3 <u 0xffffffffffffffff\n 51027: a4 = a1 <u 0xffffffffffffffff\n 51030: a4 = a5 if t0 != 0\n 51033: t0 = a2 + 0x1\n 51036: t1 = a2 <u 0xffffffffffffffff\n 51039: a5 = t2 <u 0xfffffffffffffa24\n 51043: a5 = t1 if t0 != 0\n 51046: a0 = a1 & a3\n 51049: a0 = a0 + 0x1\n 51052: a5 = a4 if a0 != 0\n 51055: jump @684 if a5 == 0\n      : @649 (gas: 15)\n 51059: a0 = t2 + 0x5dc\n 51063: u64 [s1 + 0x210] = a0\n 51067: a0 = a0 <u t2\n 51070: a4 = a2 + a0\n 51073: u64 [s1 + 0x208] = a4\n 51077: a2 = a4 <u a2\n 51080: a2 = a0 if a0 == 0\n 51083: a2 = a2 + a1\n 51086: u64 [s1 + 0x200] = a2\n 51090: a0 = a2 <u a1\n 51093: a0 = a0 + a3\n 51096: u64 [s1 + 0x1f8] = a0\n 51100: a1 = 0x20\n 51103: a0 = 0\n 51105: ra = 616, jump @0\n      : @650 [@dyn 308] (gas: 59)\n 51112: a1 = u64 [s1 + 0x170]\n 51116: u8 [a0 + 0x10] = a1\n 51119: a1 = u64 [s1 + 0x130]\n 51123: u8 [a0 + 0xf] = a1\n 51126: a1 = u64 [s1 + 0x128]\n 51130: u8 [a0 + 0xe] = a1\n 51133: a1 = u64 [s1 + 0x120]\n 51137: u8 [a0 + 0xd] = a1\n 51140: a1 = u64 [s1 + 0x118]\n 51144: u8 [a0 + 0xc] = a1\n 51147: a1 = u64 [s1 + 0x110]\n 51151: u8 [a0 + 0xb] = a1\n 51154: a1 = u64 [s1 + 0x108]\n 51158: u8 [a0 + 0xa] = a1\n 51161: a1 = u64 [s1 + 0x100]\n 51165: u8 [a0 + 0x9] = a1\n 51168: a1 = u64 [s1 + 0x218]\n 51172: u8 [a0 + 0x8] = a1\n 51175: u8 [a0 + 7] = 0\n 51178: u8 [a0 + 6] = 0\n 51181: u8 [a0 + 5] = 0\n 51184: u8 [a0 + 4] = 0\n 51187: u8 [a0 + 3] = 0\n 51190: u8 [a0 + 2] = 0\n 51193: u8 [a0 + 1] = 0\n 51196: u8 [a0 + 0] = 0\n 51198: a1 = u64 [s1 + 0x1b0]\n 51202: u8 [a0 + 0x18] = a1\n 51205: a1 = u64 [s1 + 0x168]\n 51209: u8 [a0 + 0x17] = a1\n 51212: a1 = u64 [s1 + 0x160]\n 51216: u8 [a0 + 0x16] = a1\n 51219: a1 = u64 [s1 + 0x158]\n 51223: u8 [a0 + 0x15] = a1\n 51226: a1 = u64 [s1 + 0x150]\n 51230: u8 [a0 + 0x14] = a1\n 51233: a1 = u64 [s1 + 0x148]\n 51237: u8 [a0 + 0x13] = a1\n 51240: a1 = u64 [s1 + 0x140]\n 51244: u8 [a0 + 0x12] = a1\n 51247: a1 = u64 [s1 + 0x138]\n 51251: u8 [a0 + 0x11] = a1\n 51254: a1 = u64 [s1 + 0x1a8]\n 51258: u8 [a0 + 0x1f] = a1\n 51261: a1 = u64 [s1 + 0x1a0]\n 51265: u8 [a0 + 0x1e] = a1\n 51268: a1 = u64 [s1 + 0x198]\n 51272: u8 [a0 + 0x1d] = a1\n 51275: a1 = u64 [s1 + 0x190]\n 51279: u8 [a0 + 0x1c] = a1\n 51282: a1 = u64 [s1 + 0x188]\n 51286: u8 [a0 + 0x1b] = a1\n 51289: a1 = u64 [s1 + 0x180]\n 51293: u8 [a0 + 0x1a] = a1\n 51296: a1 = u64 [s1 + 0x178]\n 51300: u8 [a0 + 0x19] = a1\n 51303: a0 = 0x20\n 51306: a1 = 0x20\n 51309: ra = 618, jump @0\n      : @651 [@dyn 309] (gas: 35)\n 51316: u8 [a0 + 31] = 0x2\n 51320: u8 [a0 + 30] = 0\n 51323: u8 [a0 + 29] = 0\n 51326: u8 [a0 + 28] = 0\n 51329: u8 [a0 + 27] = 0\n 51332: u8 [a0 + 26] = 0\n 51335: u8 [a0 + 25] = 0\n 51338: u8 [a0 + 24] = 0\n 51341: u8 [a0 + 23] = 0\n 51344: u8 [a0 + 22] = 0\n 51347: u8 [a0 + 21] = 0\n 51350: u8 [a0 + 20] = 0\n 51353: u8 [a0 + 19] = 0\n 51356: u8 [a0 + 18] = 0\n 51359: u8 [a0 + 17] = 0\n 51362: u8 [a0 + 16] = 0\n 51365: u8 [a0 + 15] = 0\n 51368: u8 [a0 + 14] = 0\n 51371: u8 [a0 + 13] = 0\n 51374: u8 [a0 + 12] = 0\n 51377: u8 [a0 + 11] = 0\n 51380: u8 [a0 + 10] = 0\n 51383: u8 [a0 + 9] = 0\n 51386: u8 [a0 + 8] = 0\n 51389: u8 [a0 + 7] = 0\n 51392: u8 [a0 + 6] = 0\n 51395: u8 [a0 + 5] = 0\n 51398: u8 [a0 + 4] = 0\n 51401: u8 [a0 + 3] = 0\n 51404: u8 [a0 + 2] = 0\n 51407: u8 [a0 + 1] = 0\n 51410: u8 [a0 + 0] = 0\n 51412: a1 = 0x40\n 51415: a0 = 0\n 51417: ra = 620, jump @0\n      : @652 [@dyn 310] (gas: 62)\n 51424: i32 a0 = a0 + 0\n 51426: i32 a2 = s1 + 0x620\n 51430: a1 = 0x40\n 51433: ecalli 8 // 'hash_keccak_256'\n 51435: a0 = u64 [s1 + 0x620]\n 51439: a1 = u64 [s1 + 0x628]\n 51443: a2 = u64 [s1 + 0x630]\n 51447: a3 = u64 [s1 + 0x638]\n 51451: a0 = reverse a0\n 51453: a1 = reverse a1\n 51455: a2 = reverse a2\n 51457: a3 = reverse a3\n 51459: a4 = a3 + 0x1\n 51462: u64 [s1 + 0x1f0] = a4\n 51466: a3 = a4 <u 0x1\n 51469: a3 = a3 + a2\n 51472: u64 [s1 + 0x1e8] = a3\n 51476: a2 = a4 | a3\n 51479: a2 = a2 <u 0x1\n 51482: a2 = a2 + a1\n 51485: u64 [s1 + 0x1e0] = a2\n 51489: a1 = a2 <u a1\n 51492: a0 = a0 + a1\n 51495: u64 [s1 + 0x1d8] = a0\n 51499: u64 [s1 + 0x608] = a3\n 51503: u64 [s1 + 0x600] = a4\n 51507: u64 [s1 + 0x610] = a2\n 51511: u64 [s1 + 0x618] = a0\n 51515: u64 [s1 + 1592] = 0\n 51519: u64 [s1 + 1584] = 0\n 51523: u64 [s1 + 1576] = 0\n 51527: u64 [s1 + 1568] = 0\n 51531: u32 [s1 + 1504] = 0x20\n 51536: i32 a1 = s1 + 0x600\n 51540: i32 a3 = s1 + 0x620\n 51544: i32 a4 = s1 + 0x5e0\n 51548: a2 = 0xffffffffffffffff\n 51551: a0 = 0\n 51553: ecalli 7 // 'get_storage'\n 51555: a0 = u64 [s1 + 0x1d8]\n 51559: u64 [s1 + 0x618] = a0\n 51563: a0 = u64 [s1 + 0x1e0]\n 51567: u64 [s1 + 0x610] = a0\n 51571: a0 = u64 [s1 + 0x1e8]\n 51575: u64 [s1 + 0x608] = a0\n 51579: a0 = u64 [s1 + 0x1f0]\n 51583: u64 [s1 + 0x600] = a0\n 51587: a0 = u64 [s1 + 0x1f8]\n 51591: u64 [s1 + 0x638] = a0\n 51595: a0 = u64 [s1 + 0x200]\n 51599: u64 [s1 + 0x630] = a0\n 51603: a0 = u64 [s1 + 0x208]\n 51607: u64 [s1 + 0x628] = a0\n 51611: a0 = u64 [s1 + 0x210]\n 51615: u64 [s1 + 0x620] = a0\n 51619: i32 a1 = s1 + 0x600\n 51623: i32 a3 = s1 + 0x620\n 51627: a2 = 0xffffffffffffffff\n 51630: a4 = 0x20\n 51633: a0 = 0\n 51635: ecalli 16 // 'set_storage'\n 51637: fallthrough\n      : @653 (gas: 3)\n 51638: a1 = 0x20\n 51641: a0 = 0\n 51643: ra = 622, jump @0\n      : @654 [@dyn 311] (gas: 59)\n 51650: a1 = u64 [s1 + 0x170]\n 51654: u8 [a0 + 0x10] = a1\n 51657: a1 = u64 [s1 + 0x130]\n 51661: u8 [a0 + 0xf] = a1\n 51664: a1 = u64 [s1 + 0x128]\n 51668: u8 [a0 + 0xe] = a1\n 51671: a1 = u64 [s1 + 0x120]\n 51675: u8 [a0 + 0xd] = a1\n 51678: a1 = u64 [s1 + 0x118]\n 51682: u8 [a0 + 0xc] = a1\n 51685: a1 = u64 [s1 + 0x110]\n 51689: u8 [a0 + 0xb] = a1\n 51692: a1 = u64 [s1 + 0x108]\n 51696: u8 [a0 + 0xa] = a1\n 51699: a1 = u64 [s1 + 0x100]\n 51703: u8 [a0 + 0x9] = a1\n 51706: a1 = u64 [s1 + 0x218]\n 51710: u8 [a0 + 0x8] = a1\n 51713: u8 [a0 + 7] = 0\n 51716: u8 [a0 + 6] = 0\n 51719: u8 [a0 + 5] = 0\n 51722: u8 [a0 + 4] = 0\n 51725: u8 [a0 + 3] = 0\n 51728: u8 [a0 + 2] = 0\n 51731: u8 [a0 + 1] = 0\n 51734: u8 [a0 + 0] = 0\n 51736: a1 = u64 [s1 + 0x1b0]\n 51740: u8 [a0 + 0x18] = a1\n 51743: a1 = u64 [s1 + 0x168]\n 51747: u8 [a0 + 0x17] = a1\n 51750: a1 = u64 [s1 + 0x160]\n 51754: u8 [a0 + 0x16] = a1\n 51757: a1 = u64 [s1 + 0x158]\n 51761: u8 [a0 + 0x15] = a1\n 51764: a1 = u64 [s1 + 0x150]\n 51768: u8 [a0 + 0x14] = a1\n 51771: a1 = u64 [s1 + 0x148]\n 51775: u8 [a0 + 0x13] = a1\n 51778: a1 = u64 [s1 + 0x140]\n 51782: u8 [a0 + 0x12] = a1\n 51785: a1 = u64 [s1 + 0x138]\n 51789: u8 [a0 + 0x11] = a1\n 51792: a1 = u64 [s1 + 0x1a8]\n 51796: u8 [a0 + 0x1f] = a1\n 51799: a1 = u64 [s1 + 0x1a0]\n 51803: u8 [a0 + 0x1e] = a1\n 51806: a1 = u64 [s1 + 0x198]\n 51810: u8 [a0 + 0x1d] = a1\n 51813: a1 = u64 [s1 + 0x190]\n 51817: u8 [a0 + 0x1c] = a1\n 51820: a1 = u64 [s1 + 0x188]\n 51824: u8 [a0 + 0x1b] = a1\n 51827: a1 = u64 [s1 + 0x180]\n 51831: u8 [a0 + 0x1a] = a1\n 51834: a1 = u64 [s1 + 0x178]\n 51838: u8 [a0 + 0x19] = a1\n 51841: a0 = 0x20\n 51844: a1 = 0x20\n 51847: ra = 624, jump @0\n      : @655 [@dyn 312] (gas: 35)\n 51854: u8 [a0 + 31] = 0x2\n 51858: u8 [a0 + 30] = 0\n 51861: u8 [a0 + 29] = 0\n 51864: u8 [a0 + 28] = 0\n 51867: u8 [a0 + 27] = 0\n 51870: u8 [a0 + 26] = 0\n 51873: u8 [a0 + 25] = 0\n 51876: u8 [a0 + 24] = 0\n 51879: u8 [a0 + 23] = 0\n 51882: u8 [a0 + 22] = 0\n 51885: u8 [a0 + 21] = 0\n 51888: u8 [a0 + 20] = 0\n 51891: u8 [a0 + 19] = 0\n 51894: u8 [a0 + 18] = 0\n 51897: u8 [a0 + 17] = 0\n 51900: u8 [a0 + 16] = 0\n 51903: u8 [a0 + 15] = 0\n 51906: u8 [a0 + 14] = 0\n 51909: u8 [a0 + 13] = 0\n 51912: u8 [a0 + 12] = 0\n 51915: u8 [a0 + 11] = 0\n 51918: u8 [a0 + 10] = 0\n 51921: u8 [a0 + 9] = 0\n 51924: u8 [a0 + 8] = 0\n 51927: u8 [a0 + 7] = 0\n 51930: u8 [a0 + 6] = 0\n 51933: u8 [a0 + 5] = 0\n 51936: u8 [a0 + 4] = 0\n 51939: u8 [a0 + 3] = 0\n 51942: u8 [a0 + 2] = 0\n 51945: u8 [a0 + 1] = 0\n 51948: u8 [a0 + 0] = 0\n 51950: a1 = 0x40\n 51953: a0 = 0\n 51955: ra = 626, jump @0\n      : @656 [@dyn 313] (gas: 46)\n 51962: i32 a0 = a0 + 0\n 51964: i32 a2 = s1 + 0x620\n 51968: a1 = 0x40\n 51971: ecalli 8 // 'hash_keccak_256'\n 51973: a0 = u64 [s1 + 0x620]\n 51977: a1 = u64 [s1 + 0x628]\n 51981: a2 = u64 [s1 + 0x630]\n 51985: a3 = u64 [s1 + 0x638]\n 51989: a0 = reverse a0\n 51991: a1 = reverse a1\n 51993: a2 = reverse a2\n 51995: a3 = reverse a3\n 51997: a3 = a3 + 0x1\n 52000: a4 = a3 <u 0x1\n 52003: a2 = a2 + a4\n 52006: a4 = a3 | a2\n 52009: a4 = a4 <u 0x1\n 52012: a4 = a4 + a1\n 52015: a1 = a4 <u a1\n 52018: a0 = a0 + a1\n 52021: u64 [s1 + 0x608] = a2\n 52025: u64 [s1 + 0x600] = a3\n 52029: u64 [s1 + 0x610] = a4\n 52033: u64 [s1 + 0x618] = a0\n 52037: u64 [s1 + 1592] = 0\n 52041: u64 [s1 + 1584] = 0\n 52045: u64 [s1 + 1576] = 0\n 52049: u64 [s1 + 1568] = 0\n 52053: u32 [s1 + 1504] = 0x20\n 52058: i32 a1 = s1 + 0x600\n 52062: i32 a3 = s1 + 0x620\n 52066: i32 a4 = s1 + 0x5e0\n 52070: a2 = 0xffffffffffffffff\n 52073: a0 = 0\n 52075: ecalli 7 // 'get_storage'\n 52077: a0 = u64 [s1 + 0x620]\n 52081: u64 [s1 + 0x210] = a0\n 52085: a0 = u64 [s1 + 0x628]\n 52089: u64 [s1 + 0x208] = a0\n 52093: a0 = u64 [s1 + 0x630]\n 52097: u64 [s1 + 0x200] = a0\n 52101: a0 = u64 [s1 + 0x638]\n 52105: u64 [s1 + 0x1f8] = a0\n 52109: i32 a0 = s1 + 0x5c0\n 52113: ecalli 10 // 'now'\n 52115: fallthrough\n      : @657 (gas: 20)\n 52116: a0 = u64 [s1 + 0x5d8]\n 52120: t0 = u64 [s1 + 0x5c0]\n 52124: a2 = u64 [s1 + 0x5d0]\n 52128: a3 = u64 [s1 + 0x5c8]\n 52132: a1 = u64 [s1 + 0x1f8]\n 52136: a4 = a1 ^ a0\n 52139: a1 = a1 <u a0\n 52142: a0 = u64 [s1 + 0x200]\n 52146: a5 = a0 <u a2\n 52149: a5 = a1 if a4 != 0\n 52152: a1 = u64 [s1 + 0x208]\n 52156: t1 = a1 ^ a3\n 52159: a3 = a1 <u a3\n 52162: a1 = u64 [s1 + 0x210]\n 52166: a1 = a1 <u t0\n 52169: a1 = a3 if t1 != 0\n 52172: a0 = a0 ^ a2\n 52175: a0 = a0 | a4\n 52178: a1 = a5 if a0 != 0\n 52181: jump @679 if a1 == 0\n      : @658 (gas: 3)\n 52185: a1 = 0x20\n 52188: a0 = 0\n 52190: ra = 628, jump @0\n      : @659 [@dyn 314] (gas: 59)\n 52197: a1 = u64 [s1 + 0x170]\n 52201: u8 [a0 + 0x10] = a1\n 52204: a1 = u64 [s1 + 0x130]\n 52208: u8 [a0 + 0xf] = a1\n 52211: a1 = u64 [s1 + 0x128]\n 52215: u8 [a0 + 0xe] = a1\n 52218: a1 = u64 [s1 + 0x120]\n 52222: u8 [a0 + 0xd] = a1\n 52225: a1 = u64 [s1 + 0x118]\n 52229: u8 [a0 + 0xc] = a1\n 52232: a1 = u64 [s1 + 0x110]\n 52236: u8 [a0 + 0xb] = a1\n 52239: a1 = u64 [s1 + 0x108]\n 52243: u8 [a0 + 0xa] = a1\n 52246: a1 = u64 [s1 + 0x100]\n 52250: u8 [a0 + 0x9] = a1\n 52253: a1 = u64 [s1 + 0x218]\n 52257: u8 [a0 + 0x8] = a1\n 52260: a1 = u64 [s1 + 0x1b0]\n 52264: u8 [a0 + 0x18] = a1\n 52267: a1 = u64 [s1 + 0x168]\n 52271: u8 [a0 + 0x17] = a1\n 52274: a1 = u64 [s1 + 0x160]\n 52278: u8 [a0 + 0x16] = a1\n 52281: a1 = u64 [s1 + 0x158]\n 52285: u8 [a0 + 0x15] = a1\n 52288: a1 = u64 [s1 + 0x150]\n 52292: u8 [a0 + 0x14] = a1\n 52295: a1 = u64 [s1 + 0x148]\n 52299: u8 [a0 + 0x13] = a1\n 52302: a1 = u64 [s1 + 0x140]\n 52306: u8 [a0 + 0x12] = a1\n 52309: a1 = u64 [s1 + 0x138]\n 52313: u8 [a0 + 0x11] = a1\n 52316: a1 = u64 [s1 + 0x1a8]\n 52320: u8 [a0 + 0x1f] = a1\n 52323: a1 = u64 [s1 + 0x1a0]\n 52327: u8 [a0 + 0x1e] = a1\n 52330: a1 = u64 [s1 + 0x198]\n 52334: u8 [a0 + 0x1d] = a1\n 52337: a1 = u64 [s1 + 0x190]\n 52341: u8 [a0 + 0x1c] = a1\n 52344: a1 = u64 [s1 + 0x188]\n 52348: u8 [a0 + 0x1b] = a1\n 52351: a1 = u64 [s1 + 0x180]\n 52355: u8 [a0 + 0x1a] = a1\n 52358: a1 = u64 [s1 + 0x178]\n 52362: u8 [a0 + 0x19] = a1\n 52365: u8 [a0 + 7] = 0\n 52368: u8 [a0 + 6] = 0\n 52371: u8 [a0 + 5] = 0\n 52374: u8 [a0 + 4] = 0\n 52377: u8 [a0 + 3] = 0\n 52380: u8 [a0 + 2] = 0\n 52383: u8 [a0 + 1] = 0\n 52386: u8 [a0 + 0] = 0\n 52388: a0 = 0x20\n 52391: a1 = 0x20\n 52394: ra = 630, jump @0\n      : @660 [@dyn 315] (gas: 35)\n 52401: u8 [a0 + 31] = 0x2\n 52405: u8 [a0 + 30] = 0\n 52408: u8 [a0 + 29] = 0\n 52411: u8 [a0 + 28] = 0\n 52414: u8 [a0 + 27] = 0\n 52417: u8 [a0 + 26] = 0\n 52420: u8 [a0 + 25] = 0\n 52423: u8 [a0 + 24] = 0\n 52426: u8 [a0 + 23] = 0\n 52429: u8 [a0 + 22] = 0\n 52432: u8 [a0 + 21] = 0\n 52435: u8 [a0 + 20] = 0\n 52438: u8 [a0 + 19] = 0\n 52441: u8 [a0 + 18] = 0\n 52444: u8 [a0 + 17] = 0\n 52447: u8 [a0 + 16] = 0\n 52450: u8 [a0 + 15] = 0\n 52453: u8 [a0 + 14] = 0\n 52456: u8 [a0 + 13] = 0\n 52459: u8 [a0 + 12] = 0\n 52462: u8 [a0 + 11] = 0\n 52465: u8 [a0 + 10] = 0\n 52468: u8 [a0 + 9] = 0\n 52471: u8 [a0 + 8] = 0\n 52474: u8 [a0 + 7] = 0\n 52477: u8 [a0 + 6] = 0\n 52480: u8 [a0 + 5] = 0\n 52483: u8 [a0 + 4] = 0\n 52486: u8 [a0 + 3] = 0\n 52489: u8 [a0 + 2] = 0\n 52492: u8 [a0 + 1] = 0\n 52495: u8 [a0 + 0] = 0\n 52497: a1 = 0x40\n 52500: a0 = 0\n 52502: ra = 632, jump @0\n      : @661 [@dyn 316] (gas: 63)\n 52509: i32 a0 = a0 + 0\n 52511: i32 a2 = s1 + 0x620\n 52515: a1 = 0x40\n 52518: ecalli 8 // 'hash_keccak_256'\n 52520: a0 = u64 [s1 + 0x620]\n 52524: a1 = u64 [s1 + 0x628]\n 52528: a2 = u64 [s1 + 0x630]\n 52532: a3 = u64 [s1 + 0x638]\n 52536: a0 = reverse a0\n 52538: a1 = reverse a1\n 52540: a2 = reverse a2\n 52542: a3 = reverse a3\n 52544: a4 = a3 + 0x2\n 52547: u64 [s1 + 0x218] = a4\n 52551: a3 = a4 <u a3\n 52554: a5 = a2 + a3\n 52557: u64 [s1 + 0x210] = a5\n 52561: a2 = a5 <u a2\n 52564: a2 = a3 if a3 == 0\n 52567: a2 = a2 + a1\n 52570: u64 [s1 + 0x208] = a2\n 52574: a1 = a2 <u a1\n 52577: a0 = a0 + a1\n 52580: u64 [s1 + 0x200] = a0\n 52584: u64 [s1 + 0x608] = a5\n 52588: u64 [s1 + 0x600] = a4\n 52592: u64 [s1 + 0x610] = a2\n 52596: u64 [s1 + 0x618] = a0\n 52600: u64 [s1 + 1592] = 0\n 52604: u64 [s1 + 1584] = 0\n 52608: u64 [s1 + 1576] = 0\n 52612: u64 [s1 + 1568] = 0\n 52616: u32 [s1 + 1504] = 0x20\n 52621: i32 a1 = s1 + 0x600\n 52625: i32 a3 = s1 + 0x620\n 52629: i32 a4 = s1 + 0x5e0\n 52633: a2 = 0xffffffffffffffff\n 52636: a0 = 0\n 52638: ecalli 7 // 'get_storage'\n 52640: a0 = u64 [s1 + 0x200]\n 52644: u64 [s1 + 0x618] = a0\n 52648: a0 = u64 [s1 + 0x208]\n 52652: u64 [s1 + 0x610] = a0\n 52656: a0 = u64 [s1 + 0x210]\n 52660: u64 [s1 + 0x608] = a0\n 52664: a0 = u64 [s1 + 0x218]\n 52668: u64 [s1 + 0x600] = a0\n 52672: u64 [s1 + 1592] = 0\n 52676: u64 [s1 + 1584] = 0\n 52680: u64 [s1 + 1576] = 0\n 52684: u64 [s1 + 1568] = 0\n 52688: i32 a1 = s1 + 0x600\n 52692: i32 a3 = s1 + 0x620\n 52696: a2 = 0xffffffffffffffff\n 52699: a4 = 0x20\n 52702: a0 = 0\n 52704: ecalli 16 // 'set_storage'\n 52706: sp = s0 + 0xfffffffffffff9a0\n 52710: ra = u64 [sp + 0x658]\n 52714: s0 = u64 [sp + 0x650]\n 52718: s1 = u64 [sp + 0x648]\n 52722: sp = sp + 0x660\n 52726: ret\n      : @662 (gas: 3)\n 52728: a0 = 0x40\n 52731: a1 = 0x20\n 52734: ra = 634, jump @0\n      : @663 [@dyn 317] (gas: 104)\n 52741: a1 = u8 [a0 + 0x11]\n 52744: a2 = u8 [a0 + 0x10]\n 52747: a3 = u8 [a0 + 0x12]\n 52750: a4 = u8 [a0 + 0x13]\n 52753: a1 = a1 << 0x8\n 52756: a1 = a1 | a2\n 52759: a3 = a3 << 0x10\n 52762: a4 = a4 << 0x18\n 52765: a3 = a3 | a4\n 52768: a1 = a1 | a3\n 52771: a2 = u8 [a0 + 0x15]\n 52774: a3 = u8 [a0 + 0x14]\n 52777: a4 = u8 [a0 + 0x16]\n 52780: a5 = u8 [a0 + 0x17]\n 52783: a2 = a2 << 0x8\n 52786: a2 = a2 | a3\n 52789: a4 = a4 << 0x10\n 52792: a5 = a5 << 0x18\n 52795: a4 = a4 | a5\n 52798: a2 = a2 | a4\n 52801: a2 = a2 << 0x20\n 52804: t0 = a2 | a1\n 52807: a2 = u8 [a0 + 0x1]\n 52810: a3 = u8 [a0]\n 52812: a4 = u8 [a0 + 0x2]\n 52815: a5 = u8 [a0 + 0x3]\n 52818: a2 = a2 << 0x8\n 52821: a2 = a2 | a3\n 52824: a4 = a4 << 0x10\n 52827: a5 = a5 << 0x18\n 52830: a4 = a4 | a5\n 52833: a2 = a2 | a4\n 52836: a3 = u8 [a0 + 0x5]\n 52839: a4 = u8 [a0 + 0x4]\n 52842: a5 = u8 [a0 + 0x6]\n 52845: a1 = u8 [a0 + 0x7]\n 52848: a3 = a3 << 0x8\n 52851: a3 = a3 | a4\n 52854: a5 = a5 << 0x10\n 52857: a1 = a1 << 0x18\n 52860: a1 = a1 | a5\n 52863: a1 = a1 | a3\n 52866: a1 = a1 << 0x20\n 52869: t1 = a1 | a2\n 52872: a1 = u8 [a0 + 0x19]\n 52875: a3 = u8 [a0 + 0x18]\n 52878: a4 = u8 [a0 + 0x1a]\n 52881: a5 = u8 [a0 + 0x1b]\n 52884: a1 = a1 << 0x8\n 52887: a1 = a1 | a3\n 52890: a4 = a4 << 0x10\n 52893: a5 = a5 << 0x18\n 52896: a4 = a4 | a5\n 52899: a1 = a1 | a4\n 52902: a3 = u8 [a0 + 0x1d]\n 52905: a4 = u8 [a0 + 0x1c]\n 52908: a5 = u8 [a0 + 0x1e]\n 52911: a2 = u8 [a0 + 0x1f]\n 52914: a3 = a3 << 0x8\n 52917: a3 = a3 | a4\n 52920: a5 = a5 << 0x10\n 52923: a2 = a2 << 0x18\n 52926: a2 = a2 | a5\n 52929: a2 = a2 | a3\n 52932: a2 = a2 << 0x20\n 52935: a3 = a2 | a1\n 52938: a1 = u8 [a0 + 0x9]\n 52941: a2 = u8 [a0 + 0x8]\n 52944: a4 = u8 [a0 + 0xa]\n 52947: a5 = u8 [a0 + 0xb]\n 52950: a1 = a1 << 0x8\n 52953: a1 = a1 | a2\n 52956: a4 = a4 << 0x10\n 52959: a5 = a5 << 0x18\n 52962: a4 = a4 | a5\n 52965: a1 = a1 | a4\n 52968: a2 = u8 [a0 + 0xd]\n 52971: a4 = u8 [a0 + 0xc]\n 52974: a5 = u8 [a0 + 0xe]\n 52977: a0 = u8 [a0 + 0xf]\n 52980: a2 = a2 << 0x8\n 52983: a2 = a2 | a4\n 52986: a5 = a5 << 0x10\n 52989: a0 = a0 << 0x18\n 52992: a0 = a0 | a5\n 52995: a0 = a0 | a2\n 52998: a0 = a0 << 0x20\n 53001: a0 = a0 | a1\n 53004: a4 = reverse a0\n 53006: a1 = reverse a3\n 53008: a2 = reverse t1\n 53010: a0 = reverse t0\n 53012: u64 [s1 + 0x218] = a0\n 53016: u64 [s1 + 0x208] = a2\n 53020: a0 = a0 | a2\n 53023: a2 = a1\n 53025: a1 = a1 | a4\n 53028: a1 = a1 | a0\n 53031: a1 = a1 >> 0x20\n 53034: u64 [s1 + 0x210] = a4\n 53038: a0 = a0 | a4\n 53041: a0 = a0 << 0x20\n 53044: a0 = a0 | a1\n 53047: jump @668 if a0 != 0\n      : @664 (gas: 5)\n 53051: u64 [s1 + 0x200] = a2\n 53055: i32 a0 = a2 + 0\n 53057: a1 = 0x20\n 53060: u64 [s1 + 0x1f8] = a0\n 53064: ra = 636, jump @0\n      : @665 [@dyn 318] (gas: 51)\n 53071: u8 [a0 + 31] = 0\n 53074: u8 [a0 + 30] = 0\n 53077: u8 [a0 + 29] = 0\n 53080: u8 [a0 + 28] = 0\n 53083: u8 [a0 + 27] = 0\n 53086: u8 [a0 + 26] = 0\n 53089: u8 [a0 + 25] = 0\n 53092: u8 [a0 + 24] = 0\n 53095: u8 [a0 + 23] = 0\n 53098: u8 [a0 + 22] = 0\n 53101: u8 [a0 + 21] = 0\n 53104: u8 [a0 + 20] = 0\n 53107: u8 [a0 + 19] = 0\n 53110: u8 [a0 + 18] = 0\n 53113: u8 [a0 + 17] = 0\n 53116: u8 [a0 + 16] = 0\n 53119: u8 [a0 + 15] = 0\n 53122: u8 [a0 + 14] = 0\n 53125: u8 [a0 + 13] = 0\n 53128: u8 [a0 + 12] = 0\n 53131: u8 [a0 + 11] = 0\n 53134: u8 [a0 + 10] = 0\n 53137: u8 [a0 + 9] = 0\n 53140: u8 [a0 + 8] = 0\n 53143: u8 [a0 + 7] = 0\n 53146: u8 [a0 + 6] = 0\n 53149: u8 [a0 + 5] = 0\n 53152: u8 [a0 + 4] = 0\n 53155: u8 [a0 + 3] = 0xa0\n 53160: u8 [a0 + 2] = 0x79\n 53164: u8 [a0 + 1] = 0xc3\n 53169: u8 [a0 + 0] = 0x8\n 53172: a1 = u64 [s1 + 0x200]\n 53176: a0 = a1 + 0x4\n 53179: a1 = a0 <u a1\n 53182: a3 = u64 [s1 + 0x218]\n 53186: a2 = a3 + a1\n 53189: a3 = a2 <u a3\n 53192: a3 = a1 if a1 == 0\n 53195: a1 = u64 [s1 + 0x210]\n 53199: a3 = a3 + a1\n 53202: a1 = a3 <u a1\n 53205: a4 = u64 [s1 + 0x208]\n 53209: a4 = a4 + a1\n 53212: u64 [s1 + 0x228] = a2\n 53216: u64 [s1 + 0x220] = a0\n 53220: u64 [s1 + 0x230] = a3\n 53224: a0 = s1 + 0x240\n 53228: a1 = s1 + 0x220\n 53232: u64 [s1 + 0x238] = a4\n 53236: ra = 638, jump @578\n      : @666 [@dyn 319] (gas: 5)\n 53242: a0 = u64 [s1 + 0x248]\n 53246: t0 = u64 [s1 + 0x258]\n 53250: t1 = u64 [s1 + 0x240]\n 53254: a3 = u64 [s1 + 0x250]\n 53258: fallthrough\n      : @667 (gas: 27)\n 53259: a1 = u64 [s1 + 0x218]\n 53263: a4 = a0 ^ a1\n 53266: a5 = a0 <u a1\n 53269: ra = a1\n 53271: t2 = u64 [s1 + 0x200]\n 53275: a1 = t1 <u t2\n 53278: a5 = a1 if a4 == 0\n 53281: a2 = u64 [s1 + 0x210]\n 53285: a4 = a3 - a2\n 53288: a3 = a3 <u a2\n 53291: a2 = u64 [s1 + 0x208]\n 53295: a2 = t0 - a2\n 53298: a2 = a2 - a3\n 53301: a3 = a4 <u a5\n 53304: a2 = a2 - a3\n 53307: a4 = a4 - a5\n 53310: a0 = a0 - ra\n 53313: a1 = a0 - a1\n 53316: a0 = t1 - t2\n 53319: a1 = a1 | a2\n 53322: a2 = a0 | a4\n 53325: a2 = a2 | a1\n 53328: a1 = a1 | a4\n 53331: a2 = a2 >> 0x20\n 53334: a1 = a1 << 0x20\n 53337: a1 = a1 | a2\n 53340: jump @688 if a1 == 0\n      : @668 (gas: 1)\n 53344: trap\n      : @669 (gas: 3)\n 53345: a0 = 0x40\n 53348: a1 = 0x20\n 53351: ra = 640, jump @0\n      : @670 [@dyn 320] (gas: 104)\n 53358: a1 = u8 [a0 + 0x11]\n 53361: a2 = u8 [a0 + 0x10]\n 53364: a3 = u8 [a0 + 0x12]\n 53367: a4 = u8 [a0 + 0x13]\n 53370: a1 = a1 << 0x8\n 53373: a1 = a1 | a2\n 53376: a3 = a3 << 0x10\n 53379: a4 = a4 << 0x18\n 53382: a3 = a3 | a4\n 53385: a1 = a1 | a3\n 53388: a2 = u8 [a0 + 0x15]\n 53391: a3 = u8 [a0 + 0x14]\n 53394: a4 = u8 [a0 + 0x16]\n 53397: a5 = u8 [a0 + 0x17]\n 53400: a2 = a2 << 0x8\n 53403: a2 = a2 | a3\n 53406: a4 = a4 << 0x10\n 53409: a5 = a5 << 0x18\n 53412: a4 = a4 | a5\n 53415: a2 = a2 | a4\n 53418: a2 = a2 << 0x20\n 53421: t0 = a2 | a1\n 53424: a2 = u8 [a0 + 0x1]\n 53427: a3 = u8 [a0]\n 53429: a4 = u8 [a0 + 0x2]\n 53432: a5 = u8 [a0 + 0x3]\n 53435: a2 = a2 << 0x8\n 53438: a2 = a2 | a3\n 53441: a4 = a4 << 0x10\n 53444: a5 = a5 << 0x18\n 53447: a4 = a4 | a5\n 53450: a2 = a2 | a4\n 53453: a3 = u8 [a0 + 0x5]\n 53456: a4 = u8 [a0 + 0x4]\n 53459: a5 = u8 [a0 + 0x6]\n 53462: a1 = u8 [a0 + 0x7]\n 53465: a3 = a3 << 0x8\n 53468: a3 = a3 | a4\n 53471: a5 = a5 << 0x10\n 53474: a1 = a1 << 0x18\n 53477: a1 = a1 | a5\n 53480: a1 = a1 | a3\n 53483: a1 = a1 << 0x20\n 53486: t1 = a1 | a2\n 53489: a1 = u8 [a0 + 0x19]\n 53492: a3 = u8 [a0 + 0x18]\n 53495: a4 = u8 [a0 + 0x1a]\n 53498: a5 = u8 [a0 + 0x1b]\n 53501: a1 = a1 << 0x8\n 53504: a1 = a1 | a3\n 53507: a4 = a4 << 0x10\n 53510: a5 = a5 << 0x18\n 53513: a4 = a4 | a5\n 53516: a1 = a1 | a4\n 53519: a3 = u8 [a0 + 0x1d]\n 53522: a4 = u8 [a0 + 0x1c]\n 53525: a5 = u8 [a0 + 0x1e]\n 53528: a2 = u8 [a0 + 0x1f]\n 53531: a3 = a3 << 0x8\n 53534: a3 = a3 | a4\n 53537: a5 = a5 << 0x10\n 53540: a2 = a2 << 0x18\n 53543: a2 = a2 | a5\n 53546: a2 = a2 | a3\n 53549: a2 = a2 << 0x20\n 53552: a3 = a2 | a1\n 53555: a1 = u8 [a0 + 0x9]\n 53558: a2 = u8 [a0 + 0x8]\n 53561: a4 = u8 [a0 + 0xa]\n 53564: a5 = u8 [a0 + 0xb]\n 53567: a1 = a1 << 0x8\n 53570: a1 = a1 | a2\n 53573: a4 = a4 << 0x10\n 53576: a5 = a5 << 0x18\n 53579: a4 = a4 | a5\n 53582: a1 = a1 | a4\n 53585: a2 = u8 [a0 + 0xd]\n 53588: a4 = u8 [a0 + 0xc]\n 53591: a5 = u8 [a0 + 0xe]\n 53594: a0 = u8 [a0 + 0xf]\n 53597: a2 = a2 << 0x8\n 53600: a2 = a2 | a4\n 53603: a5 = a5 << 0x10\n 53606: a0 = a0 << 0x18\n 53609: a0 = a0 | a5\n 53612: a0 = a0 | a2\n 53615: a0 = a0 << 0x20\n 53618: a0 = a0 | a1\n 53621: a4 = reverse a0\n 53623: a1 = reverse a3\n 53625: a2 = reverse t1\n 53627: a0 = reverse t0\n 53629: u64 [s1 + 0x218] = a0\n 53633: u64 [s1 + 0x208] = a2\n 53637: a0 = a0 | a2\n 53640: a2 = a1\n 53642: a1 = a1 | a4\n 53645: a1 = a1 | a0\n 53648: a1 = a1 >> 0x20\n 53651: u64 [s1 + 0x210] = a4\n 53655: a0 = a0 | a4\n 53658: a0 = a0 << 0x20\n 53661: a0 = a0 | a1\n 53664: jump @668 if a0 != 0\n      : @671 (gas: 5)\n 53668: u64 [s1 + 0x200] = a2\n 53672: i32 a0 = a2 + 0\n 53674: a1 = 0x20\n 53677: u64 [s1 + 0x1f8] = a0\n 53681: ra = 642, jump @0\n      : @672 [@dyn 321] (gas: 51)\n 53688: u8 [a0 + 31] = 0\n 53691: u8 [a0 + 30] = 0\n 53694: u8 [a0 + 29] = 0\n 53697: u8 [a0 + 28] = 0\n 53700: u8 [a0 + 27] = 0\n 53703: u8 [a0 + 26] = 0\n 53706: u8 [a0 + 25] = 0\n 53709: u8 [a0 + 24] = 0\n 53712: u8 [a0 + 23] = 0\n 53715: u8 [a0 + 22] = 0\n 53718: u8 [a0 + 21] = 0\n 53721: u8 [a0 + 20] = 0\n 53724: u8 [a0 + 19] = 0\n 53727: u8 [a0 + 18] = 0\n 53730: u8 [a0 + 17] = 0\n 53733: u8 [a0 + 16] = 0\n 53736: u8 [a0 + 15] = 0\n 53739: u8 [a0 + 14] = 0\n 53742: u8 [a0 + 13] = 0\n 53745: u8 [a0 + 12] = 0\n 53748: u8 [a0 + 11] = 0\n 53751: u8 [a0 + 10] = 0\n 53754: u8 [a0 + 9] = 0\n 53757: u8 [a0 + 8] = 0\n 53760: u8 [a0 + 7] = 0\n 53763: u8 [a0 + 6] = 0\n 53766: u8 [a0 + 5] = 0\n 53769: u8 [a0 + 4] = 0\n 53772: u8 [a0 + 3] = 0xa0\n 53777: u8 [a0 + 2] = 0x79\n 53781: u8 [a0 + 1] = 0xc3\n 53786: u8 [a0 + 0] = 0x8\n 53789: a1 = u64 [s1 + 0x200]\n 53793: a0 = a1 + 0x4\n 53796: a1 = a0 <u a1\n 53799: a3 = u64 [s1 + 0x218]\n 53803: a2 = a3 + a1\n 53806: a3 = a2 <u a3\n 53809: a3 = a1 if a1 == 0\n 53812: a1 = u64 [s1 + 0x210]\n 53816: a3 = a3 + a1\n 53819: a1 = a3 <u a1\n 53822: a4 = u64 [s1 + 0x208]\n 53826: a4 = a4 + a1\n 53829: u64 [s1 + 0x348] = a2\n 53833: u64 [s1 + 0x340] = a0\n 53837: u64 [s1 + 0x350] = a3\n 53841: a0 = s1 + 0x360\n 53845: a1 = s1 + 0x340\n 53849: u64 [s1 + 0x358] = a4\n 53853: ra = 644, jump @365\n      : @673 [@dyn 322] (gas: 5)\n 53859: a0 = u64 [s1 + 0x368]\n 53863: t0 = u64 [s1 + 0x378]\n 53867: t1 = u64 [s1 + 0x360]\n 53871: a3 = u64 [s1 + 0x370]\n 53875: jump @667\n      : @674 (gas: 3)\n 53878: a0 = 0x40\n 53881: a1 = 0x20\n 53884: ra = 646, jump @0\n      : @675 [@dyn 323] (gas: 104)\n 53891: a1 = u8 [a0 + 0x11]\n 53894: a2 = u8 [a0 + 0x10]\n 53897: a3 = u8 [a0 + 0x12]\n 53900: a4 = u8 [a0 + 0x13]\n 53903: a1 = a1 << 0x8\n 53906: a1 = a1 | a2\n 53909: a3 = a3 << 0x10\n 53912: a4 = a4 << 0x18\n 53915: a3 = a3 | a4\n 53918: a1 = a1 | a3\n 53921: a2 = u8 [a0 + 0x15]\n 53924: a3 = u8 [a0 + 0x14]\n 53927: a4 = u8 [a0 + 0x16]\n 53930: a5 = u8 [a0 + 0x17]\n 53933: a2 = a2 << 0x8\n 53936: a2 = a2 | a3\n 53939: a4 = a4 << 0x10\n 53942: a5 = a5 << 0x18\n 53945: a4 = a4 | a5\n 53948: a2 = a2 | a4\n 53951: a2 = a2 << 0x20\n 53954: t0 = a2 | a1\n 53957: a2 = u8 [a0 + 0x1]\n 53960: a3 = u8 [a0]\n 53962: a4 = u8 [a0 + 0x2]\n 53965: a5 = u8 [a0 + 0x3]\n 53968: a2 = a2 << 0x8\n 53971: a2 = a2 | a3\n 53974: a4 = a4 << 0x10\n 53977: a5 = a5 << 0x18\n 53980: a4 = a4 | a5\n 53983: a2 = a2 | a4\n 53986: a3 = u8 [a0 + 0x5]\n 53989: a4 = u8 [a0 + 0x4]\n 53992: a5 = u8 [a0 + 0x6]\n 53995: a1 = u8 [a0 + 0x7]\n 53998: a3 = a3 << 0x8\n 54001: a3 = a3 | a4\n 54004: a5 = a5 << 0x10\n 54007: a1 = a1 << 0x18\n 54010: a1 = a1 | a5\n 54013: a1 = a1 | a3\n 54016: a1 = a1 << 0x20\n 54019: t1 = a1 | a2\n 54022: a1 = u8 [a0 + 0x19]\n 54025: a3 = u8 [a0 + 0x18]\n 54028: a4 = u8 [a0 + 0x1a]\n 54031: a5 = u8 [a0 + 0x1b]\n 54034: a1 = a1 << 0x8\n 54037: a1 = a1 | a3\n 54040: a4 = a4 << 0x10\n 54043: a5 = a5 << 0x18\n 54046: a4 = a4 | a5\n 54049: a1 = a1 | a4\n 54052: a3 = u8 [a0 + 0x1d]\n 54055: a4 = u8 [a0 + 0x1c]\n 54058: a5 = u8 [a0 + 0x1e]\n 54061: a2 = u8 [a0 + 0x1f]\n 54064: a3 = a3 << 0x8\n 54067: a3 = a3 | a4\n 54070: a5 = a5 << 0x10\n 54073: a2 = a2 << 0x18\n 54076: a2 = a2 | a5\n 54079: a2 = a2 | a3\n 54082: a2 = a2 << 0x20\n 54085: a3 = a2 | a1\n 54088: a1 = u8 [a0 + 0x9]\n 54091: a2 = u8 [a0 + 0x8]\n 54094: a4 = u8 [a0 + 0xa]\n 54097: a5 = u8 [a0 + 0xb]\n 54100: a1 = a1 << 0x8\n 54103: a1 = a1 | a2\n 54106: a4 = a4 << 0x10\n 54109: a5 = a5 << 0x18\n 54112: a4 = a4 | a5\n 54115: a1 = a1 | a4\n 54118: a2 = u8 [a0 + 0xd]\n 54121: a4 = u8 [a0 + 0xc]\n 54124: a5 = u8 [a0 + 0xe]\n 54127: a0 = u8 [a0 + 0xf]\n 54130: a2 = a2 << 0x8\n 54133: a2 = a2 | a4\n 54136: a5 = a5 << 0x10\n 54139: a0 = a0 << 0x18\n 54142: a0 = a0 | a5\n 54145: a0 = a0 | a2\n 54148: a0 = a0 << 0x20\n 54151: a0 = a0 | a1\n 54154: a4 = reverse a0\n 54156: a1 = reverse a3\n 54158: a2 = reverse t1\n 54160: a0 = reverse t0\n 54162: u64 [s1 + 0x218] = a0\n 54166: u64 [s1 + 0x208] = a2\n 54170: a0 = a0 | a2\n 54173: a2 = a1\n 54175: a1 = a1 | a4\n 54178: a1 = a1 | a0\n 54181: a1 = a1 >> 0x20\n 54184: u64 [s1 + 0x210] = a4\n 54188: a0 = a0 | a4\n 54191: a0 = a0 << 0x20\n 54194: a0 = a0 | a1\n 54197: jump @668 if a0 != 0\n      : @676 (gas: 5)\n 54201: u64 [s1 + 0x200] = a2\n 54205: i32 a0 = a2 + 0\n 54207: a1 = 0x20\n 54210: u64 [s1 + 0x1f8] = a0\n 54214: ra = 648, jump @0\n      : @677 [@dyn 324] (gas: 51)\n 54221: u8 [a0 + 31] = 0\n 54224: u8 [a0 + 30] = 0\n 54227: u8 [a0 + 29] = 0\n 54230: u8 [a0 + 28] = 0\n 54233: u8 [a0 + 27] = 0\n 54236: u8 [a0 + 26] = 0\n 54239: u8 [a0 + 25] = 0\n 54242: u8 [a0 + 24] = 0\n 54245: u8 [a0 + 23] = 0\n 54248: u8 [a0 + 22] = 0\n 54251: u8 [a0 + 21] = 0\n 54254: u8 [a0 + 20] = 0\n 54257: u8 [a0 + 19] = 0\n 54260: u8 [a0 + 18] = 0\n 54263: u8 [a0 + 17] = 0\n 54266: u8 [a0 + 16] = 0\n 54269: u8 [a0 + 15] = 0\n 54272: u8 [a0 + 14] = 0\n 54275: u8 [a0 + 13] = 0\n 54278: u8 [a0 + 12] = 0\n 54281: u8 [a0 + 11] = 0\n 54284: u8 [a0 + 10] = 0\n 54287: u8 [a0 + 9] = 0\n 54290: u8 [a0 + 8] = 0\n 54293: u8 [a0 + 7] = 0\n 54296: u8 [a0 + 6] = 0\n 54299: u8 [a0 + 5] = 0\n 54302: u8 [a0 + 4] = 0\n 54305: u8 [a0 + 3] = 0xa0\n 54310: u8 [a0 + 2] = 0x79\n 54314: u8 [a0 + 1] = 0xc3\n 54319: u8 [a0 + 0] = 0x8\n 54322: a1 = u64 [s1 + 0x200]\n 54326: a0 = a1 + 0x4\n 54329: a1 = a0 <u a1\n 54332: a3 = u64 [s1 + 0x218]\n 54336: a2 = a3 + a1\n 54339: a3 = a2 <u a3\n 54342: a3 = a1 if a1 == 0\n 54345: a1 = u64 [s1 + 0x210]\n 54349: a3 = a3 + a1\n 54352: a1 = a3 <u a1\n 54355: a4 = u64 [s1 + 0x208]\n 54359: a4 = a4 + a1\n 54362: u64 [s1 + 0x2e8] = a2\n 54366: u64 [s1 + 0x2e0] = a0\n 54370: u64 [s1 + 0x2f0] = a3\n 54374: a0 = s1 + 0x300\n 54378: a1 = s1 + 0x2e0\n 54382: u64 [s1 + 0x2f8] = a4\n 54386: ra = 650, jump @365\n      : @678 [@dyn 325] (gas: 5)\n 54392: a0 = u64 [s1 + 0x308]\n 54396: t0 = u64 [s1 + 0x318]\n 54400: t1 = u64 [s1 + 0x300]\n 54404: a3 = u64 [s1 + 0x310]\n 54408: jump @667\n      : @679 (gas: 2)\n 54411: a0 = 0\n 54413: ra = 652, jump @0\n      : @680 [@dyn 326] (gas: 5)\n 54420: i32 a1 = a0 + 0\n 54422: a0 = 0x1\n 54425: a2 = 0\n 54427: ecalli 14 // 'seal_return'\n 54429: fallthrough\n      : @681 (gas: 4)\n 54430: a0 = 0\n 54432: a1 = 0\n 54434: ra = 0x28c\n 54438: jump @0\n      : @682 (gas: 8)\n 54442: u64 [s1 + 656] = 0\n 54446: u64 [s1 + 648] = 0\n 54450: u64 [s1 + 640] = 0\n 54454: a0 = 0x4e487b7100000000\n 54464: a1 = s1 + 0x280\n 54468: u64 [s1 + 0x298] = a0\n 54472: a0 = 0\n 54474: ra = 654, jump @8\n      : @683 [@dyn 327] (gas: 8)\n 54481: u64 [s1 + 632] = 0\n 54485: u64 [s1 + 624] = 0\n 54489: u64 [s1 + 608] = 0x11\n 54494: a0 = 0x4\n 54497: a1 = s1 + 0x260\n 54501: u64 [s1 + 616] = 0\n 54505: ra = 0x292\n 54509: jump @8\n      : @684 (gas: 8)\n 54513: u64 [s1 + 720] = 0\n 54517: u64 [s1 + 712] = 0\n 54521: u64 [s1 + 704] = 0\n 54525: a0 = 0x4e487b7100000000\n 54535: a1 = s1 + 0x2c0\n 54539: u64 [s1 + 0x2d8] = a0\n 54543: a0 = 0\n 54545: ra = 656, jump @8\n      : @685 [@dyn 328] (gas: 7)\n 54552: u64 [s1 + 696] = 0\n 54556: u64 [s1 + 688] = 0\n 54560: u64 [s1 + 672] = 0x11\n 54565: a0 = 0x4\n 54568: a1 = s1 + 0x2a0\n 54572: u64 [s1 + 680] = 0\n 54576: ra = 658, jump @8\n      : @686 [@dyn 329] (gas: 3)\n 54583: a1 = 0x24\n 54586: a0 = 0\n 54588: ra = 660, jump @0\n      : @687 [@dyn 330] (gas: 5)\n 54595: i32 a1 = a0 + 0\n 54597: a0 = 0x1\n 54600: a2 = 0x24\n 54603: ecalli 14 // 'seal_return'\n 54605: fallthrough\n      : @688 (gas: 4)\n 54606: i32 a1 = a0 + 0\n 54608: u64 [s1 + 0x218] = a1\n 54612: a0 = u64 [s1 + 0x1f8]\n 54616: ra = 662, jump @0\n      : @689 [@dyn 331] (gas: 6)\n 54623: i32 a1 = a0 + 0\n 54625: a0 = 0x1\n 54628: a2 = u64 [s1 + 0x218]\n 54632: ra = 0x298\n 54636: ecalli 14 // 'seal_return'\n 54638: fallthrough\n      : @690 [@dyn 332] (gas: 12)\n 54639: a1 = u64 [a0 + 0x10]\n 54642: a2 = u64 [a0 + 0x18]\n 54645: a3 = u64 [a0 + 0x8]\n 54648: a0 = u64 [a0]\n 54650: a2 = a2 | a3\n 54653: a3 = a0 | a1\n 54656: a3 = a3 | a2\n 54659: a3 = a3 >> 0x20\n 54662: a1 = a1 | a2\n 54665: a1 = a1 << 0x20\n 54668: a1 = a1 | a3\n 54671: jump @693 if a1 != 0\n      : @691 (gas: 7)\n 54675: sp = sp + 0xfffffffffffffff0\n 54678: u64 [sp + 0x8] = ra\n 54681: u64 [sp] = s0\n 54683: i32 a0 = a0 + 0\n 54685: a1 = 0x20\n 54688: s0 = 0x20\n 54691: ra = 666, jump @0\n      : @692 [@dyn 333] (gas: 40)\n 54698: u8 [a0 + 31] = 0\n 54701: u8 [a0 + 30] = 0\n 54704: u8 [a0 + 29] = 0\n 54707: u8 [a0 + 28] = 0\n 54710: u8 [a0 + 27] = 0\n 54713: u8 [a0 + 26] = 0\n 54716: u8 [a0 + 25] = 0\n 54719: u8 [a0 + 24] = 0\n 54722: u8 [a0 + 23] = 0\n 54725: u8 [a0 + 22] = 0\n 54728: u8 [a0 + 21] = 0\n 54731: u8 [a0 + 20] = 0\n 54734: u8 [a0 + 19] = 0\n 54737: u8 [a0 + 18] = 0\n 54740: u8 [a0 + 17] = 0\n 54743: u8 [a0 + 16] = 0x78\n 54747: u8 [a0 + 15] = 0x65\n 54751: a2 = 0x64\n 54754: u8 [a0 + 0xe] = a2\n 54757: a3 = 0x6e\n 54760: u8 [a0 + 0xd] = a3\n 54763: a4 = 0x69\n 54766: u8 [a0 + 0xc] = a4\n 54769: u8 [a0 + 0xb] = s0\n 54772: u8 [a0 + 10] = 0x78\n 54776: u8 [a0 + 9] = 0x6f\n 54780: u8 [a0 + 8] = 0x62\n 54784: u8 [a0 + 0x7] = s0\n 54787: u8 [a0 + 0x6] = a2\n 54790: u8 [a0 + 0x5] = a4\n 54793: u8 [a0 + 4] = 0x6c\n 54797: u8 [a0 + 3] = 0x61\n 54801: u8 [a0 + 2] = 0x76\n 54805: u8 [a0 + 0x1] = a3\n 54808: a1 = 0x49\n 54811: u8 [a0] = a1\n 54813: ra = u64 [sp + 0x8]\n 54816: s0 = u64 [sp]\n 54818: sp = sp + 0x10\n 54821: ret\n      : @693 (gas: 1)\n 54823: trap\n      : @694 (gas: 17)\n 54824: sp = sp + 0xffffffffffffffa0\n 54827: u64 [sp + 0x58] = ra\n 54830: u64 [sp + 0x50] = s0\n 54833: u64 [sp + 0x48] = s1\n 54836: a3 = u64 [a1 + 0x18]\n 54839: a4 = u64 [a1 + 0x10]\n 54842: a5 = u64 [a1 + 0x8]\n 54845: s1 = u64 [a1]\n 54847: a1 = a5 | a3\n 54850: a2 = s1 | a4\n 54853: a2 = a2 | a1\n 54856: a2 = a2 >> 0x20\n 54859: a1 = a1 | a4\n 54862: a1 = a1 << 0x20\n 54865: a1 = a1 | a2\n 54868: u64 [sp + 0x28] = a0\n 54871: jump @701 if a1 != 0\n      : @695 (gas: 19)\n 54875: a0 = s1 + 0x20\n 54878: u64 [sp + 0x30] = a0\n 54881: a0 = a0 <u s1\n 54884: a1 = a5 + a0\n 54887: u64 [sp + 0x40] = a1\n 54890: u64 [sp + 0x8] = a5\n 54893: s0 = a1 <u a5\n 54896: s0 = a0 if a0 == 0\n 54899: s0 = s0 + a4\n 54902: u64 [sp + 0x10] = a4\n 54905: a0 = s0 <u a4\n 54908: u64 [sp + 0x18] = a3\n 54911: a0 = a0 + a3\n 54914: u64 [sp + 0x38] = a0\n 54917: u64 [sp] = s1\n 54919: i32 a0 = s1 + 0\n 54921: a1 = 0x20\n 54924: s1 = 0x20\n 54927: ra = 668, jump @0\n      : @696 [@dyn 334] (gas: 45)\n 54934: u8 [a0 + 0x1f] = s1\n 54937: a1 = u64 [sp + 0x30]\n 54940: s1 = a1\n 54942: a1 = a1 | s0\n 54945: a2 = u64 [sp + 0x40]\n 54948: a4 = u64 [sp + 0x38]\n 54951: a2 = a2 | a4\n 54954: a1 = a1 | a2\n 54957: a1 = a1 >> 0x20\n 54960: u64 [sp + 0x20] = s0\n 54963: a2 = a2 | s0\n 54966: a2 = a2 << 0x20\n 54969: a1 = a1 | a2\n 54972: u8 [a0 + 30] = 0\n 54975: u8 [a0 + 29] = 0\n 54978: u8 [a0 + 28] = 0\n 54981: u8 [a0 + 27] = 0\n 54984: u8 [a0 + 26] = 0\n 54987: u8 [a0 + 25] = 0\n 54990: u8 [a0 + 24] = 0\n 54993: u8 [a0 + 23] = 0\n 54996: u8 [a0 + 22] = 0\n 54999: u8 [a0 + 21] = 0\n 55002: u8 [a0 + 20] = 0\n 55005: u8 [a0 + 19] = 0\n 55008: u8 [a0 + 18] = 0\n 55011: u8 [a0 + 17] = 0\n 55014: u8 [a0 + 16] = 0\n 55017: u8 [a0 + 15] = 0\n 55020: u8 [a0 + 14] = 0\n 55023: u8 [a0 + 13] = 0\n 55026: u8 [a0 + 12] = 0\n 55029: u8 [a0 + 11] = 0\n 55032: u8 [a0 + 10] = 0\n 55035: u8 [a0 + 9] = 0\n 55038: u8 [a0 + 8] = 0\n 55041: u8 [a0 + 7] = 0\n 55044: u8 [a0 + 6] = 0\n 55047: u8 [a0 + 5] = 0\n 55050: u8 [a0 + 4] = 0\n 55053: u8 [a0 + 3] = 0\n 55056: u8 [a0 + 2] = 0\n 55059: u8 [a0 + 1] = 0\n 55062: u8 [a0 + 0] = 0\n 55064: jump @701 if a1 != 0\n      : @697 (gas: 4)\n 55068: i32 s0 = s1 + 0\n 55070: a1 = 0x20\n 55073: a0 = s0\n 55075: ra = 670, jump @0\n      : @698 [@dyn 335] (gas: 41)\n 55082: u8 [a0 + 31] = 0x11\n 55086: u8 [a0 + 30] = 0\n 55089: u8 [a0 + 29] = 0\n 55092: u8 [a0 + 28] = 0\n 55095: u8 [a0 + 27] = 0\n 55098: u8 [a0 + 26] = 0\n 55101: u8 [a0 + 25] = 0\n 55104: u8 [a0 + 24] = 0\n 55107: u8 [a0 + 23] = 0\n 55110: u8 [a0 + 22] = 0\n 55113: u8 [a0 + 21] = 0\n 55116: u8 [a0 + 20] = 0\n 55119: u8 [a0 + 19] = 0\n 55122: u8 [a0 + 18] = 0\n 55125: u8 [a0 + 17] = 0\n 55128: u8 [a0 + 16] = 0\n 55131: u8 [a0 + 15] = 0\n 55134: u8 [a0 + 14] = 0\n 55137: u8 [a0 + 13] = 0\n 55140: u8 [a0 + 12] = 0\n 55143: u8 [a0 + 11] = 0\n 55146: u8 [a0 + 10] = 0\n 55149: u8 [a0 + 9] = 0\n 55152: u8 [a0 + 8] = 0\n 55155: u8 [a0 + 7] = 0\n 55158: u8 [a0 + 6] = 0\n 55161: u8 [a0 + 5] = 0\n 55164: u8 [a0 + 4] = 0\n 55167: u8 [a0 + 3] = 0\n 55170: u8 [a0 + 2] = 0\n 55173: u8 [a0 + 1] = 0\n 55176: a1 = u64 [sp + 0x20]\n 55179: a2 = u64 [sp + 0x38]\n 55182: a1 = a1 | a2\n 55185: a2 = 0xffffffe0\n 55195: a2 = s1 <u a2\n 55198: a3 = u64 [sp + 0x40]\n 55201: a2 = 0 if a3 != 0\n 55203: a2 = 0 if a1 != 0\n 55205: u8 [a0 + 0] = 0\n 55207: jump @701 if a2 == 0\n      : @699 (gas: 3)\n 55211: i32 a0 = s0 + 0x20\n 55214: a1 = 0x20\n 55217: ra = 672, jump @0\n      : @700 [@dyn 336] (gas: 55)\n 55224: u8 [a0 + 31] = 0\n 55227: u8 [a0 + 30] = 0\n 55230: u8 [a0 + 29] = 0\n 55233: u8 [a0 + 28] = 0\n 55236: u8 [a0 + 27] = 0\n 55239: u8 [a0 + 26] = 0\n 55242: u8 [a0 + 25] = 0\n 55245: u8 [a0 + 24] = 0\n 55248: u8 [a0 + 23] = 0\n 55251: u8 [a0 + 22] = 0\n 55254: u8 [a0 + 21] = 0\n 55257: u8 [a0 + 20] = 0\n 55260: u8 [a0 + 19] = 0\n 55263: u8 [a0 + 18] = 0\n 55266: u8 [a0 + 17] = 0\n 55269: u8 [a0 + 16] = 0x78\n 55273: u8 [a0 + 15] = 0x65\n 55277: u8 [a0 + 14] = 0x64\n 55281: u8 [a0 + 13] = 0x6e\n 55285: u8 [a0 + 12] = 0x69\n 55289: a5 = 0x20\n 55292: u8 [a0 + 0xb] = a5\n 55295: u8 [a0 + 10] = 0x78\n 55299: u8 [a0 + 9] = 0x6f\n 55303: u8 [a0 + 8] = 0x62\n 55307: u8 [a0 + 0x7] = a5\n 55310: u8 [a0 + 6] = 0x64\n 55314: u8 [a0 + 5] = 0x69\n 55318: u8 [a0 + 4] = 0x6c\n 55322: u8 [a0 + 3] = 0x61\n 55326: u8 [a0 + 2] = 0x76\n 55330: u8 [a0 + 1] = 0x6e\n 55334: u8 [a0 + 0] = 0x49\n 55337: a1 = u64 [sp]\n 55339: a0 = a1 + 0x60\n 55342: a1 = a0 <u a1\n 55345: a3 = u64 [sp + 0x8]\n 55348: a2 = a3 + a1\n 55351: a3 = a2 <u a3\n 55354: a3 = a1 if a1 == 0\n 55357: a1 = u64 [sp + 0x10]\n 55360: a3 = a3 + a1\n 55363: a1 = a3 <u a1\n 55366: a4 = u64 [sp + 0x18]\n 55369: a1 = a1 + a4\n 55372: a4 = u64 [sp + 0x28]\n 55375: u64 [a4] = a0\n 55377: u64 [a4 + 0x8] = a2\n 55380: u64 [a4 + 0x10] = a3\n 55383: u64 [a4 + 0x18] = a1\n 55386: ra = u64 [sp + 0x58]\n 55389: s0 = u64 [sp + 0x50]\n 55392: s1 = u64 [sp + 0x48]\n 55395: sp = sp + 0x60\n 55398: ret\n      : @701 (gas: 1)\n 55400: trap\n      : @702 (gas: 17)\n 55401: sp = sp + 0xffffffffffffffa0\n 55404: u64 [sp + 0x58] = ra\n 55407: u64 [sp + 0x50] = s0\n 55410: u64 [sp + 0x48] = s1\n 55413: a3 = u64 [a1 + 0x18]\n 55416: a4 = u64 [a1 + 0x10]\n 55419: a5 = u64 [a1 + 0x8]\n 55422: s1 = u64 [a1]\n 55424: a1 = a5 | a3\n 55427: a2 = s1 | a4\n 55430: a2 = a2 | a1\n 55433: a2 = a2 >> 0x20\n 55436: a1 = a1 | a4\n 55439: a1 = a1 << 0x20\n 55442: a1 = a1 | a2\n 55445: u64 [sp + 0x28] = a0\n 55448: jump @709 if a1 != 0\n      : @703 (gas: 19)\n 55452: a0 = s1 + 0x20\n 55455: u64 [sp + 0x30] = a0\n 55458: a0 = a0 <u s1\n 55461: a1 = a5 + a0\n 55464: u64 [sp + 0x40] = a1\n 55467: u64 [sp + 0x8] = a5\n 55470: s0 = a1 <u a5\n 55473: s0 = a0 if a0 == 0\n 55476: s0 = s0 + a4\n 55479: u64 [sp + 0x10] = a4\n 55482: a0 = s0 <u a4\n 55485: u64 [sp + 0x18] = a3\n 55488: a0 = a0 + a3\n 55491: u64 [sp + 0x38] = a0\n 55494: u64 [sp] = s1\n 55496: i32 a0 = s1 + 0\n 55498: a1 = 0x20\n 55501: s1 = 0x20\n 55504: ra = 674, jump @0\n      : @704 [@dyn 337] (gas: 45)\n 55511: u8 [a0 + 0x1f] = s1\n 55514: a1 = u64 [sp + 0x30]\n 55517: s1 = a1\n 55519: a1 = a1 | s0\n 55522: a2 = u64 [sp + 0x40]\n 55525: a4 = u64 [sp + 0x38]\n 55528: a2 = a2 | a4\n 55531: a1 = a1 | a2\n 55534: a1 = a1 >> 0x20\n 55537: u64 [sp + 0x20] = s0\n 55540: a2 = a2 | s0\n 55543: a2 = a2 << 0x20\n 55546: a1 = a1 | a2\n 55549: u8 [a0 + 30] = 0\n 55552: u8 [a0 + 29] = 0\n 55555: u8 [a0 + 28] = 0\n 55558: u8 [a0 + 27] = 0\n 55561: u8 [a0 + 26] = 0\n 55564: u8 [a0 + 25] = 0\n 55567: u8 [a0 + 24] = 0\n 55570: u8 [a0 + 23] = 0\n 55573: u8 [a0 + 22] = 0\n 55576: u8 [a0 + 21] = 0\n 55579: u8 [a0 + 20] = 0\n 55582: u8 [a0 + 19] = 0\n 55585: u8 [a0 + 18] = 0\n 55588: u8 [a0 + 17] = 0\n 55591: u8 [a0 + 16] = 0\n 55594: u8 [a0 + 15] = 0\n 55597: u8 [a0 + 14] = 0\n 55600: u8 [a0 + 13] = 0\n 55603: u8 [a0 + 12] = 0\n 55606: u8 [a0 + 11] = 0\n 55609: u8 [a0 + 10] = 0\n 55612: u8 [a0 + 9] = 0\n 55615: u8 [a0 + 8] = 0\n 55618: u8 [a0 + 7] = 0\n 55621: u8 [a0 + 6] = 0\n 55624: u8 [a0 + 5] = 0\n 55627: u8 [a0 + 4] = 0\n 55630: u8 [a0 + 3] = 0\n 55633: u8 [a0 + 2] = 0\n 55636: u8 [a0 + 1] = 0\n 55639: u8 [a0 + 0] = 0\n 55641: jump @709 if a1 != 0\n      : @705 (gas: 4)\n 55645: i32 s0 = s1 + 0\n 55647: a1 = 0x20\n 55650: a0 = s0\n 55652: ra = 676, jump @0\n      : @706 [@dyn 338] (gas: 41)\n 55659: u8 [a0 + 31] = 0x1e\n 55663: u8 [a0 + 30] = 0\n 55666: u8 [a0 + 29] = 0\n 55669: u8 [a0 + 28] = 0\n 55672: u8 [a0 + 27] = 0\n 55675: u8 [a0 + 26] = 0\n 55678: u8 [a0 + 25] = 0\n 55681: u8 [a0 + 24] = 0\n 55684: u8 [a0 + 23] = 0\n 55687: u8 [a0 + 22] = 0\n 55690: u8 [a0 + 21] = 0\n 55693: u8 [a0 + 20] = 0\n 55696: u8 [a0 + 19] = 0\n 55699: u8 [a0 + 18] = 0\n 55702: u8 [a0 + 17] = 0\n 55705: u8 [a0 + 16] = 0\n 55708: u8 [a0 + 15] = 0\n 55711: u8 [a0 + 14] = 0\n 55714: u8 [a0 + 13] = 0\n 55717: u8 [a0 + 12] = 0\n 55720: u8 [a0 + 11] = 0\n 55723: u8 [a0 + 10] = 0\n 55726: u8 [a0 + 9] = 0\n 55729: u8 [a0 + 8] = 0\n 55732: u8 [a0 + 7] = 0\n 55735: u8 [a0 + 6] = 0\n 55738: u8 [a0 + 5] = 0\n 55741: u8 [a0 + 4] = 0\n 55744: u8 [a0 + 3] = 0\n 55747: u8 [a0 + 2] = 0\n 55750: u8 [a0 + 1] = 0\n 55753: a1 = u64 [sp + 0x20]\n 55756: a2 = u64 [sp + 0x38]\n 55759: a1 = a1 | a2\n 55762: a2 = 0xffffffe0\n 55772: a2 = s1 <u a2\n 55775: a3 = u64 [sp + 0x40]\n 55778: a2 = 0 if a3 != 0\n 55780: a2 = 0 if a1 != 0\n 55782: u8 [a0 + 0] = 0\n 55784: jump @709 if a2 == 0\n      : @707 (gas: 3)\n 55788: i32 a0 = s0 + 0x20\n 55791: a1 = 0x20\n 55794: ra = 678, jump @0\n      : @708 [@dyn 339] (gas: 55)\n 55801: u8 [a0 + 31] = 0\n 55804: u8 [a0 + 30] = 0\n 55807: u8 [a0 + 29] = 0x30\n 55811: a5 = 0x20\n 55814: u8 [a0 + 0x1c] = a5\n 55817: u8 [a0 + 27] = 0x6e\n 55821: u8 [a0 + 26] = 0x61\n 55825: u8 [a0 + 25] = 0x68\n 55829: u8 [a0 + 24] = 0x74\n 55833: u8 [a0 + 0x17] = a5\n 55836: u8 [a0 + 22] = 0x72\n 55840: u8 [a0 + 21] = 0x65\n 55844: u8 [a0 + 20] = 0x74\n 55848: u8 [a0 + 19] = 0x61\n 55852: u8 [a0 + 18] = 0x65\n 55856: u8 [a0 + 17] = 0x72\n 55860: u8 [a0 + 16] = 0x67\n 55864: u8 [a0 + 0xf] = a5\n 55867: u8 [a0 + 14] = 0x65\n 55871: u8 [a0 + 13] = 0x62\n 55875: u8 [a0 + 0xc] = a5\n 55878: u8 [a0 + 11] = 0x74\n 55882: u8 [a0 + 10] = 0x73\n 55886: u8 [a0 + 9] = 0x75\n 55890: u8 [a0 + 8] = 0x6d\n 55894: u8 [a0 + 0x7] = a5\n 55897: u8 [a0 + 6] = 0x74\n 55901: u8 [a0 + 5] = 0x69\n 55905: u8 [a0 + 4] = 0x73\n 55909: u8 [a0 + 3] = 0x6f\n 55913: u8 [a0 + 2] = 0x70\n 55917: u8 [a0 + 1] = 0x65\n 55921: u8 [a0 + 0] = 0x64\n 55924: a1 = u64 [sp]\n 55926: a0 = a1 + 0x60\n 55929: a1 = a0 <u a1\n 55932: a3 = u64 [sp + 0x8]\n 55935: a2 = a3 + a1\n 55938: a3 = a2 <u a3\n 55941: a3 = a1 if a1 == 0\n 55944: a1 = u64 [sp + 0x10]\n 55947: a3 = a3 + a1\n 55950: a1 = a3 <u a1\n 55953: a4 = u64 [sp + 0x18]\n 55956: a1 = a1 + a4\n 55959: a4 = u64 [sp + 0x28]\n 55962: u64 [a4] = a0\n 55964: u64 [a4 + 0x8] = a2\n 55967: u64 [a4 + 0x10] = a3\n 55970: u64 [a4 + 0x18] = a1\n 55973: ra = u64 [sp + 0x58]\n 55976: s0 = u64 [sp + 0x50]\n 55979: s1 = u64 [sp + 0x48]\n 55982: sp = sp + 0x60\n 55985: ret\n      : @709 (gas: 1)\n 55987: trap\n      : @710 (gas: 22)\n 55988: sp = sp + 0xfffffffffffffee0\n 55992: u64 [sp + 0x118] = ra\n 55996: u64 [sp + 0x110] = s0\n 56000: u64 [sp + 0x108] = s1\n 56004: s0 = sp + 0x120\n 56008: sp = sp & 0xffffffffffffffe0\n 56011: a4 = u64 [a1 + 0x10]\n 56014: a5 = u64 [a1 + 0x18]\n 56017: a2 = u64 [a1 + 0x8]\n 56020: a3 = u64 [a1]\n 56022: u64 [sp + 0x70] = a2\n 56025: u64 [sp + 0x58] = a5\n 56028: a1 = a2 | a5\n 56031: u64 [sp + 0x80] = a3\n 56035: a2 = a3 | a4\n 56038: a2 = a2 | a1\n 56041: a2 = a2 >> 0x20\n 56044: u64 [sp + 0x60] = a4\n 56047: a1 = a1 | a4\n 56050: a1 = a1 << 0x20\n 56053: a1 = a1 | a2\n 56056: jump @731 if a1 != 0\n      : @711 (gas: 12)\n 56060: a1 = u64 [a0 + 0x18]\n 56063: u64 [sp + 0x78] = a1\n 56066: a1 = u64 [a0 + 0x10]\n 56069: u64 [sp + 0x98] = a1\n 56073: a1 = u64 [a0 + 0x8]\n 56076: u64 [sp + 0x90] = a1\n 56080: a0 = u64 [a0]\n 56082: u64 [sp + 0x88] = a0\n 56086: a0 = i32 [sp + 0x80]\n 56090: a1 = 0x20\n 56093: u64 [sp + 0x68] = a0\n 56096: ra = 680, jump @0\n      : @712 [@dyn 340] (gas: 137)\n 56103: a1 = u8 [a0 + 0x1]\n 56106: a2 = u8 [a0]\n 56108: a3 = u8 [a0 + 0x2]\n 56111: a4 = u8 [a0 + 0x3]\n 56114: a1 = a1 << 0x8\n 56117: a1 = a1 | a2\n 56120: a3 = a3 << 0x10\n 56123: a4 = a4 << 0x18\n 56126: a3 = a3 | a4\n 56129: a1 = a1 | a3\n 56132: a2 = u8 [a0 + 0x5]\n 56135: a3 = u8 [a0 + 0x4]\n 56138: a4 = u8 [a0 + 0x6]\n 56141: a5 = u8 [a0 + 0x7]\n 56144: a2 = a2 << 0x8\n 56147: a2 = a2 | a3\n 56150: a4 = a4 << 0x10\n 56153: a5 = a5 << 0x18\n 56156: a4 = a4 | a5\n 56159: a2 = a2 | a4\n 56162: a2 = a2 << 0x20\n 56165: t0 = a2 | a1\n 56168: a2 = u8 [a0 + 0x9]\n 56171: a3 = u8 [a0 + 0x8]\n 56174: a4 = u8 [a0 + 0xa]\n 56177: a5 = u8 [a0 + 0xb]\n 56180: a2 = a2 << 0x8\n 56183: a2 = a2 | a3\n 56186: a4 = a4 << 0x10\n 56189: a5 = a5 << 0x18\n 56192: a4 = a4 | a5\n 56195: a2 = a2 | a4\n 56198: a3 = u8 [a0 + 0xd]\n 56201: a4 = u8 [a0 + 0xc]\n 56204: a5 = u8 [a0 + 0xe]\n 56207: s1 = u8 [a0 + 0xf]\n 56210: a3 = a3 << 0x8\n 56213: a3 = a3 | a4\n 56216: a5 = a5 << 0x10\n 56219: s1 = s1 << 0x18\n 56222: a5 = a5 | s1\n 56225: a3 = a3 | a5\n 56228: a3 = a3 << 0x20\n 56231: a2 = a2 | a3\n 56234: a3 = u8 [a0 + 0x11]\n 56237: a4 = u8 [a0 + 0x10]\n 56240: a5 = u8 [a0 + 0x12]\n 56243: s1 = u8 [a0 + 0x13]\n 56246: a3 = a3 << 0x8\n 56249: a3 = a3 | a4\n 56252: a5 = a5 << 0x10\n 56255: s1 = s1 << 0x18\n 56258: a5 = a5 | s1\n 56261: a3 = a3 | a5\n 56264: a4 = u8 [a0 + 0x15]\n 56267: a5 = u8 [a0 + 0x14]\n 56270: s1 = u8 [a0 + 0x16]\n 56273: a1 = u8 [a0 + 0x17]\n 56276: a4 = a4 << 0x8\n 56279: a4 = a4 | a5\n 56282: s1 = s1 << 0x10\n 56285: a1 = a1 << 0x18\n 56288: a1 = a1 | s1\n 56291: a1 = a1 | a4\n 56294: a1 = a1 << 0x20\n 56297: a3 = a3 | a1\n 56300: a1 = u8 [a0 + 0x19]\n 56303: a4 = u8 [a0 + 0x18]\n 56306: a5 = u8 [a0 + 0x1a]\n 56309: s1 = u8 [a0 + 0x1b]\n 56312: a1 = a1 << 0x8\n 56315: a1 = a1 | a4\n 56318: a5 = a5 << 0x10\n 56321: s1 = s1 << 0x18\n 56324: a5 = a5 | s1\n 56327: a1 = a1 | a5\n 56330: a4 = u8 [a0 + 0x1d]\n 56333: a5 = u8 [a0 + 0x1c]\n 56336: s1 = u8 [a0 + 0x1e]\n 56339: a0 = u8 [a0 + 0x1f]\n 56342: a4 = a4 << 0x8\n 56345: a4 = a4 | a5\n 56348: s1 = s1 << 0x10\n 56351: a0 = a0 << 0x18\n 56354: a0 = a0 | s1\n 56357: a0 = a0 | a4\n 56360: a0 = a0 << 0x20\n 56363: a0 = a0 | a1\n 56366: a0 = reverse a0\n 56368: u64 [sp + 0x50] = a0\n 56371: a0 = reverse a3\n 56373: u64 [sp + 0x48] = a0\n 56376: a0 = reverse a2\n 56378: u64 [sp + 0x40] = a0\n 56381: a0 = reverse t0\n 56383: u64 [sp + 0x38] = a0\n 56386: s1 = u64 [sp + 0x78]\n 56389: u64 [sp + 0xd8] = s1\n 56393: a0 = u64 [sp + 0x98]\n 56397: u64 [sp + 0xd0] = a0\n 56401: a0 = u64 [sp + 0x90]\n 56405: u64 [sp + 0xc8] = a0\n 56409: a0 = u64 [sp + 0x88]\n 56413: u64 [sp + 0xc0] = a0\n 56417: u64 [sp + 248] = 0\n 56421: u64 [sp + 240] = 0\n 56425: u64 [sp + 232] = 0\n 56429: u64 [sp + 224] = 0\n 56433: u32 [sp + 160] = 0x20\n 56438: i32 a1 = sp + 0xc0\n 56442: i32 a3 = sp + 0xe0\n 56446: i32 a4 = sp + 0xa0\n 56450: a2 = 0xffffffffffffffff\n 56453: a0 = 0\n 56455: ecalli 7 // 'get_storage'\n 56457: u64 [sp + 0xd8] = s1\n 56461: a0 = u64 [sp + 0x98]\n 56465: u64 [sp + 0xd0] = a0\n 56469: a0 = u64 [sp + 0x90]\n 56473: u64 [sp + 0xc8] = a0\n 56477: a0 = u64 [sp + 0x88]\n 56481: u64 [sp + 0xc0] = a0\n 56485: a0 = u64 [sp + 0x38]\n 56488: u64 [sp + 0xf8] = a0\n 56492: a0 = u64 [sp + 0x40]\n 56495: u64 [sp + 0xf0] = a0\n 56499: a0 = u64 [sp + 0x48]\n 56502: u64 [sp + 0xe8] = a0\n 56506: a0 = u64 [sp + 0x50]\n 56509: u64 [sp + 0xe0] = a0\n 56513: i32 a1 = sp + 0xc0\n 56517: i32 a3 = sp + 0xe0\n 56521: a2 = 0xffffffffffffffff\n 56524: a4 = 0x20\n 56527: a0 = 0\n 56529: ecalli 16 // 'set_storage'\n 56531: fallthrough\n      : @713 (gas: 13)\n 56532: a0 = u64 [sp + 0x60]\n 56535: a2 = u64 [sp + 0x58]\n 56538: a2 = a2 | a0\n 56541: a0 = 0x100000000\n 56551: u64 [sp + 0x40] = a0\n 56554: a0 = 0xffffffe0\n 56564: a1 = u64 [sp + 0x80]\n 56568: a0 = a1 <u a0\n 56571: a1 = u64 [sp + 0x70]\n 56574: a0 = 0 if a1 != 0\n 56576: u64 [sp + 0x60] = a2\n 56579: a0 = 0 if a2 != 0\n 56581: jump @731 if a0 == 0\n      : @714 (gas: 20)\n 56585: a0 = u64 [sp + 0x88]\n 56589: a2 = a0 + 0x1\n 56592: u64 [sp + 0x48] = a2\n 56595: a0 = a2 <u 0x1\n 56598: a1 = u64 [sp + 0x90]\n 56602: a0 = a0 + a1\n 56605: u64 [sp + 0x58] = a0\n 56608: a0 = a0 | a2\n 56611: a0 = a0 <u 0x1\n 56614: a1 = u64 [sp + 0x98]\n 56618: a0 = a0 + a1\n 56621: u64 [sp + 0x50] = a0\n 56624: a0 = a0 <u a1\n 56627: a1 = u64 [sp + 0x78]\n 56630: a0 = a0 + a1\n 56633: u64 [sp + 0x38] = a0\n 56636: a0 = u64 [sp + 0x68]\n 56639: i32 a0 = a0 + 0x20\n 56642: a1 = 0x20\n 56645: ra = 682, jump @0\n      : @715 [@dyn 341] (gas: 137)\n 56652: a1 = u8 [a0 + 0x1]\n 56655: a2 = u8 [a0]\n 56657: a3 = u8 [a0 + 0x2]\n 56660: a4 = u8 [a0 + 0x3]\n 56663: a1 = a1 << 0x8\n 56666: a1 = a1 | a2\n 56669: a3 = a3 << 0x10\n 56672: a4 = a4 << 0x18\n 56675: a3 = a3 | a4\n 56678: a1 = a1 | a3\n 56681: a2 = u8 [a0 + 0x5]\n 56684: a3 = u8 [a0 + 0x4]\n 56687: a4 = u8 [a0 + 0x6]\n 56690: a5 = u8 [a0 + 0x7]\n 56693: a2 = a2 << 0x8\n 56696: a2 = a2 | a3\n 56699: a4 = a4 << 0x10\n 56702: a5 = a5 << 0x18\n 56705: a4 = a4 | a5\n 56708: a2 = a2 | a4\n 56711: a2 = a2 << 0x20\n 56714: t0 = a2 | a1\n 56717: a2 = u8 [a0 + 0x9]\n 56720: a3 = u8 [a0 + 0x8]\n 56723: a4 = u8 [a0 + 0xa]\n 56726: a5 = u8 [a0 + 0xb]\n 56729: a2 = a2 << 0x8\n 56732: a2 = a2 | a3\n 56735: a4 = a4 << 0x10\n 56738: a5 = a5 << 0x18\n 56741: a4 = a4 | a5\n 56744: a2 = a2 | a4\n 56747: a3 = u8 [a0 + 0xd]\n 56750: a4 = u8 [a0 + 0xc]\n 56753: a5 = u8 [a0 + 0xe]\n 56756: s1 = u8 [a0 + 0xf]\n 56759: a3 = a3 << 0x8\n 56762: a3 = a3 | a4\n 56765: a5 = a5 << 0x10\n 56768: s1 = s1 << 0x18\n 56771: a5 = a5 | s1\n 56774: a3 = a3 | a5\n 56777: a3 = a3 << 0x20\n 56780: a2 = a2 | a3\n 56783: a3 = u8 [a0 + 0x11]\n 56786: a4 = u8 [a0 + 0x10]\n 56789: a5 = u8 [a0 + 0x12]\n 56792: s1 = u8 [a0 + 0x13]\n 56795: a3 = a3 << 0x8\n 56798: a3 = a3 | a4\n 56801: a5 = a5 << 0x10\n 56804: s1 = s1 << 0x18\n 56807: a5 = a5 | s1\n 56810: a3 = a3 | a5\n 56813: a4 = u8 [a0 + 0x15]\n 56816: a5 = u8 [a0 + 0x14]\n 56819: s1 = u8 [a0 + 0x16]\n 56822: a1 = u8 [a0 + 0x17]\n 56825: a4 = a4 << 0x8\n 56828: a4 = a4 | a5\n 56831: s1 = s1 << 0x10\n 56834: a1 = a1 << 0x18\n 56837: a1 = a1 | s1\n 56840: a1 = a1 | a4\n 56843: a1 = a1 << 0x20\n 56846: a3 = a3 | a1\n 56849: a1 = u8 [a0 + 0x19]\n 56852: a4 = u8 [a0 + 0x18]\n 56855: a5 = u8 [a0 + 0x1a]\n 56858: s1 = u8 [a0 + 0x1b]\n 56861: a1 = a1 << 0x8\n 56864: a1 = a1 | a4\n 56867: a5 = a5 << 0x10\n 56870: s1 = s1 << 0x18\n 56873: a5 = a5 | s1\n 56876: a1 = a1 | a5\n 56879: a4 = u8 [a0 + 0x1d]\n 56882: a5 = u8 [a0 + 0x1c]\n 56885: s1 = u8 [a0 + 0x1e]\n 56888: a0 = u8 [a0 + 0x1f]\n 56891: a4 = a4 << 0x8\n 56894: a4 = a4 | a5\n 56897: s1 = s1 << 0x10\n 56900: a0 = a0 << 0x18\n 56903: a0 = a0 | s1\n 56906: a0 = a0 | a4\n 56909: a0 = a0 << 0x20\n 56912: a0 = a0 | a1\n 56915: u32 [sp + 160] = 0x20\n 56920: a0 = reverse a0\n 56922: u64 [sp + 0x30] = a0\n 56925: a0 = reverse a3\n 56927: u64 [sp + 0x28] = a0\n 56930: a0 = reverse a2\n 56932: u64 [sp + 0x20] = a0\n 56935: a0 = reverse t0\n 56937: u64 [sp + 0x18] = a0\n 56940: a0 = u64 [sp + 0x50]\n 56943: u64 [sp + 0xd0] = a0\n 56947: a0 = u64 [sp + 0x58]\n 56950: u64 [sp + 0xc8] = a0\n 56954: a0 = u64 [sp + 0x48]\n 56957: u64 [sp + 0xc0] = a0\n 56961: s1 = u64 [sp + 0x38]\n 56964: u64 [sp + 0xd8] = s1\n 56968: u64 [sp + 248] = 0\n 56972: u64 [sp + 240] = 0\n 56976: u64 [sp + 232] = 0\n 56980: u64 [sp + 224] = 0\n 56984: i32 a1 = sp + 0xc0\n 56988: i32 a3 = sp + 0xe0\n 56992: i32 a4 = sp + 0xa0\n 56996: a2 = 0xffffffffffffffff\n 56999: a0 = 0\n 57001: ecalli 7 // 'get_storage'\n 57003: u64 [sp + 0xd8] = s1\n 57007: a0 = u64 [sp + 0x50]\n 57010: u64 [sp + 0xd0] = a0\n 57014: a0 = u64 [sp + 0x58]\n 57017: u64 [sp + 0xc8] = a0\n 57021: a0 = u64 [sp + 0x48]\n 57024: u64 [sp + 0xc0] = a0\n 57028: a0 = u64 [sp + 0x18]\n 57031: u64 [sp + 0xf8] = a0\n 57035: a0 = u64 [sp + 0x20]\n 57038: u64 [sp + 0xf0] = a0\n 57042: a0 = u64 [sp + 0x28]\n 57045: u64 [sp + 0xe8] = a0\n 57049: a0 = u64 [sp + 0x30]\n 57052: u64 [sp + 0xe0] = a0\n 57056: i32 a1 = sp + 0xc0\n 57060: i32 a3 = sp + 0xe0\n 57064: a2 = 0xffffffffffffffff\n 57067: a4 = 0x20\n 57070: a0 = 0\n 57072: ecalli 16 // 'set_storage'\n 57074: fallthrough\n      : @716 (gas: 9)\n 57075: a0 = u64 [sp + 0x40]\n 57078: a0 = a0 + 0xffffffffffffffc0\n 57081: a1 = u64 [sp + 0x80]\n 57085: a0 = a1 <u a0\n 57088: a1 = u64 [sp + 0x70]\n 57091: a0 = 0 if a1 != 0\n 57093: a1 = u64 [sp + 0x60]\n 57096: a0 = 0 if a1 != 0\n 57098: jump @731 if a0 == 0\n      : @717 (gas: 20)\n 57102: a0 = u64 [sp + 0x88]\n 57106: a1 = a0 + 0x2\n 57109: u64 [sp + 0x48] = a1\n 57112: a0 = a1 <u a0\n 57115: a1 = u64 [sp + 0x90]\n 57119: a2 = a1 + a0\n 57122: u64 [sp + 0x58] = a2\n 57125: a1 = a2 <u a1\n 57128: a1 = a0 if a0 == 0\n 57131: a0 = u64 [sp + 0x98]\n 57135: a1 = a1 + a0\n 57138: u64 [sp + 0x50] = a1\n 57141: a0 = a1 <u a0\n 57144: a1 = u64 [sp + 0x78]\n 57147: a0 = a0 + a1\n 57150: u64 [sp + 0x40] = a0\n 57153: a0 = u64 [sp + 0x68]\n 57156: i32 a0 = a0 + 0x40\n 57159: a1 = 0x20\n 57162: ra = 684, jump @0\n      : @718 [@dyn 342] (gas: 137)\n 57169: a1 = u8 [a0 + 0x1]\n 57172: a2 = u8 [a0]\n 57174: a3 = u8 [a0 + 0x2]\n 57177: a4 = u8 [a0 + 0x3]\n 57180: a1 = a1 << 0x8\n 57183: a1 = a1 | a2\n 57186: a3 = a3 << 0x10\n 57189: a4 = a4 << 0x18\n 57192: a3 = a3 | a4\n 57195: a1 = a1 | a3\n 57198: a2 = u8 [a0 + 0x5]\n 57201: a3 = u8 [a0 + 0x4]\n 57204: a4 = u8 [a0 + 0x6]\n 57207: a5 = u8 [a0 + 0x7]\n 57210: a2 = a2 << 0x8\n 57213: a2 = a2 | a3\n 57216: a4 = a4 << 0x10\n 57219: a5 = a5 << 0x18\n 57222: a4 = a4 | a5\n 57225: a2 = a2 | a4\n 57228: a2 = a2 << 0x20\n 57231: t0 = a2 | a1\n 57234: a2 = u8 [a0 + 0x9]\n 57237: a3 = u8 [a0 + 0x8]\n 57240: a4 = u8 [a0 + 0xa]\n 57243: a5 = u8 [a0 + 0xb]\n 57246: a2 = a2 << 0x8\n 57249: a2 = a2 | a3\n 57252: a4 = a4 << 0x10\n 57255: a5 = a5 << 0x18\n 57258: a4 = a4 | a5\n 57261: a2 = a2 | a4\n 57264: a3 = u8 [a0 + 0xd]\n 57267: a4 = u8 [a0 + 0xc]\n 57270: a5 = u8 [a0 + 0xe]\n 57273: s1 = u8 [a0 + 0xf]\n 57276: a3 = a3 << 0x8\n 57279: a3 = a3 | a4\n 57282: a5 = a5 << 0x10\n 57285: s1 = s1 << 0x18\n 57288: a5 = a5 | s1\n 57291: a3 = a3 | a5\n 57294: a3 = a3 << 0x20\n 57297: a2 = a2 | a3\n 57300: a3 = u8 [a0 + 0x11]\n 57303: a4 = u8 [a0 + 0x10]\n 57306: a5 = u8 [a0 + 0x12]\n 57309: s1 = u8 [a0 + 0x13]\n 57312: a3 = a3 << 0x8\n 57315: a3 = a3 | a4\n 57318: a5 = a5 << 0x10\n 57321: s1 = s1 << 0x18\n 57324: a5 = a5 | s1\n 57327: a3 = a3 | a5\n 57330: a4 = u8 [a0 + 0x15]\n 57333: a5 = u8 [a0 + 0x14]\n 57336: s1 = u8 [a0 + 0x16]\n 57339: a1 = u8 [a0 + 0x17]\n 57342: a4 = a4 << 0x8\n 57345: a4 = a4 | a5\n 57348: s1 = s1 << 0x10\n 57351: a1 = a1 << 0x18\n 57354: a1 = a1 | s1\n 57357: a1 = a1 | a4\n 57360: a1 = a1 << 0x20\n 57363: a3 = a3 | a1\n 57366: a1 = u8 [a0 + 0x19]\n 57369: a4 = u8 [a0 + 0x18]\n 57372: a5 = u8 [a0 + 0x1a]\n 57375: s1 = u8 [a0 + 0x1b]\n 57378: a1 = a1 << 0x8\n 57381: a1 = a1 | a4\n 57384: a5 = a5 << 0x10\n 57387: s1 = s1 << 0x18\n 57390: a5 = a5 | s1\n 57393: a1 = a1 | a5\n 57396: a4 = u8 [a0 + 0x1d]\n 57399: a5 = u8 [a0 + 0x1c]\n 57402: s1 = u8 [a0 + 0x1e]\n 57405: a0 = u8 [a0 + 0x1f]\n 57408: a4 = a4 << 0x8\n 57411: a4 = a4 | a5\n 57414: s1 = s1 << 0x10\n 57417: a0 = a0 << 0x18\n 57420: a0 = a0 | s1\n 57423: a0 = a0 | a4\n 57426: a0 = a0 << 0x20\n 57429: a0 = a0 | a1\n 57432: a0 = reverse a0\n 57434: u64 [sp + 0x38] = a0\n 57437: a0 = reverse a3\n 57439: u64 [sp + 0x30] = a0\n 57442: a0 = reverse a2\n 57444: u64 [sp + 0x28] = a0\n 57447: a0 = reverse t0\n 57449: u64 [sp + 0x20] = a0\n 57452: a0 = u64 [sp + 0x50]\n 57455: u64 [sp + 0xd0] = a0\n 57459: a0 = u64 [sp + 0x58]\n 57462: u64 [sp + 0xc8] = a0\n 57466: a0 = u64 [sp + 0x48]\n 57469: u64 [sp + 0xc0] = a0\n 57473: s1 = u64 [sp + 0x40]\n 57476: u64 [sp + 0xd8] = s1\n 57480: u64 [sp + 248] = 0\n 57484: u64 [sp + 240] = 0\n 57488: u64 [sp + 232] = 0\n 57492: u64 [sp + 224] = 0\n 57496: u32 [sp + 160] = 0x20\n 57501: i32 a1 = sp + 0xc0\n 57505: i32 a3 = sp + 0xe0\n 57509: i32 a4 = sp + 0xa0\n 57513: a2 = 0xffffffffffffffff\n 57516: a0 = 0\n 57518: ecalli 7 // 'get_storage'\n 57520: u64 [sp + 0xd8] = s1\n 57524: a0 = u64 [sp + 0x50]\n 57527: u64 [sp + 0xd0] = a0\n 57531: a0 = u64 [sp + 0x58]\n 57534: u64 [sp + 0xc8] = a0\n 57538: a0 = u64 [sp + 0x48]\n 57541: u64 [sp + 0xc0] = a0\n 57545: a0 = u64 [sp + 0x20]\n 57548: u64 [sp + 0xf8] = a0\n 57552: a0 = u64 [sp + 0x28]\n 57555: u64 [sp + 0xf0] = a0\n 57559: a0 = u64 [sp + 0x30]\n 57562: u64 [sp + 0xe8] = a0\n 57566: a0 = u64 [sp + 0x38]\n 57569: u64 [sp + 0xe0] = a0\n 57573: i32 a1 = sp + 0xc0\n 57577: i32 a3 = sp + 0xe0\n 57581: a2 = 0xffffffffffffffff\n 57584: a4 = 0x20\n 57587: a0 = 0\n 57589: ecalli 16 // 'set_storage'\n 57591: fallthrough\n      : @719 (gas: 10)\n 57592: a0 = 0x100000000\n 57602: u64 [sp + 0x40] = a0\n 57605: a0 = 0xffffffa0\n 57615: a1 = u64 [sp + 0x80]\n 57619: a0 = a1 <u a0\n 57622: a1 = u64 [sp + 0x70]\n 57625: a0 = 0 if a1 != 0\n 57627: a1 = u64 [sp + 0x60]\n 57630: a0 = 0 if a1 != 0\n 57632: jump @731 if a0 == 0\n      : @720 (gas: 20)\n 57636: a0 = u64 [sp + 0x88]\n 57640: a1 = a0 + 0x3\n 57643: u64 [sp + 0x48] = a1\n 57646: a0 = a1 <u a0\n 57649: a1 = u64 [sp + 0x90]\n 57653: a2 = a1 + a0\n 57656: u64 [sp + 0x58] = a2\n 57659: a1 = a2 <u a1\n 57662: a1 = a0 if a0 == 0\n 57665: a0 = u64 [sp + 0x98]\n 57669: a1 = a1 + a0\n 57672: u64 [sp + 0x50] = a1\n 57675: a0 = a1 <u a0\n 57678: a1 = u64 [sp + 0x78]\n 57681: a0 = a0 + a1\n 57684: u64 [sp + 0x38] = a0\n 57687: a0 = u64 [sp + 0x68]\n 57690: i32 a0 = a0 + 0x60\n 57693: a1 = 0x20\n 57696: ra = 686, jump @0\n      : @721 [@dyn 343] (gas: 137)\n 57703: a1 = u8 [a0 + 0x1]\n 57706: a2 = u8 [a0]\n 57708: a3 = u8 [a0 + 0x2]\n 57711: a4 = u8 [a0 + 0x3]\n 57714: a1 = a1 << 0x8\n 57717: a1 = a1 | a2\n 57720: a3 = a3 << 0x10\n 57723: a4 = a4 << 0x18\n 57726: a3 = a3 | a4\n 57729: a1 = a1 | a3\n 57732: a2 = u8 [a0 + 0x5]\n 57735: a3 = u8 [a0 + 0x4]\n 57738: a4 = u8 [a0 + 0x6]\n 57741: a5 = u8 [a0 + 0x7]\n 57744: a2 = a2 << 0x8\n 57747: a2 = a2 | a3\n 57750: a4 = a4 << 0x10\n 57753: a5 = a5 << 0x18\n 57756: a4 = a4 | a5\n 57759: a2 = a2 | a4\n 57762: a2 = a2 << 0x20\n 57765: t0 = a2 | a1\n 57768: a2 = u8 [a0 + 0x9]\n 57771: a3 = u8 [a0 + 0x8]\n 57774: a4 = u8 [a0 + 0xa]\n 57777: a5 = u8 [a0 + 0xb]\n 57780: a2 = a2 << 0x8\n 57783: a2 = a2 | a3\n 57786: a4 = a4 << 0x10\n 57789: a5 = a5 << 0x18\n 57792: a4 = a4 | a5\n 57795: a2 = a2 | a4\n 57798: a3 = u8 [a0 + 0xd]\n 57801: a4 = u8 [a0 + 0xc]\n 57804: a5 = u8 [a0 + 0xe]\n 57807: s1 = u8 [a0 + 0xf]\n 57810: a3 = a3 << 0x8\n 57813: a3 = a3 | a4\n 57816: a5 = a5 << 0x10\n 57819: s1 = s1 << 0x18\n 57822: a5 = a5 | s1\n 57825: a3 = a3 | a5\n 57828: a3 = a3 << 0x20\n 57831: a2 = a2 | a3\n 57834: a3 = u8 [a0 + 0x11]\n 57837: a4 = u8 [a0 + 0x10]\n 57840: a5 = u8 [a0 + 0x12]\n 57843: s1 = u8 [a0 + 0x13]\n 57846: a3 = a3 << 0x8\n 57849: a3 = a3 | a4\n 57852: a5 = a5 << 0x10\n 57855: s1 = s1 << 0x18\n 57858: a5 = a5 | s1\n 57861: a3 = a3 | a5\n 57864: a4 = u8 [a0 + 0x15]\n 57867: a5 = u8 [a0 + 0x14]\n 57870: s1 = u8 [a0 + 0x16]\n 57873: a1 = u8 [a0 + 0x17]\n 57876: a4 = a4 << 0x8\n 57879: a4 = a4 | a5\n 57882: s1 = s1 << 0x10\n 57885: a1 = a1 << 0x18\n 57888: a1 = a1 | s1\n 57891: a1 = a1 | a4\n 57894: a1 = a1 << 0x20\n 57897: a3 = a3 | a1\n 57900: a1 = u8 [a0 + 0x19]\n 57903: a4 = u8 [a0 + 0x18]\n 57906: a5 = u8 [a0 + 0x1a]\n 57909: s1 = u8 [a0 + 0x1b]\n 57912: a1 = a1 << 0x8\n 57915: a1 = a1 | a4\n 57918: a5 = a5 << 0x10\n 57921: s1 = s1 << 0x18\n 57924: a5 = a5 | s1\n 57927: a1 = a1 | a5\n 57930: a4 = u8 [a0 + 0x1d]\n 57933: a5 = u8 [a0 + 0x1c]\n 57936: s1 = u8 [a0 + 0x1e]\n 57939: a0 = u8 [a0 + 0x1f]\n 57942: a4 = a4 << 0x8\n 57945: a4 = a4 | a5\n 57948: s1 = s1 << 0x10\n 57951: a0 = a0 << 0x18\n 57954: a0 = a0 | s1\n 57957: a0 = a0 | a4\n 57960: a0 = a0 << 0x20\n 57963: a0 = a0 | a1\n 57966: u32 [sp + 160] = 0x20\n 57971: a0 = reverse a0\n 57973: u64 [sp + 0x30] = a0\n 57976: a0 = reverse a3\n 57978: u64 [sp + 0x28] = a0\n 57981: a0 = reverse a2\n 57983: u64 [sp + 0x20] = a0\n 57986: a0 = reverse t0\n 57988: u64 [sp + 0x18] = a0\n 57991: a0 = u64 [sp + 0x50]\n 57994: u64 [sp + 0xd0] = a0\n 57998: a0 = u64 [sp + 0x58]\n 58001: u64 [sp + 0xc8] = a0\n 58005: a0 = u64 [sp + 0x48]\n 58008: u64 [sp + 0xc0] = a0\n 58012: s1 = u64 [sp + 0x38]\n 58015: u64 [sp + 0xd8] = s1\n 58019: u64 [sp + 248] = 0\n 58023: u64 [sp + 240] = 0\n 58027: u64 [sp + 232] = 0\n 58031: u64 [sp + 224] = 0\n 58035: i32 a1 = sp + 0xc0\n 58039: i32 a3 = sp + 0xe0\n 58043: i32 a4 = sp + 0xa0\n 58047: a2 = 0xffffffffffffffff\n 58050: a0 = 0\n 58052: ecalli 7 // 'get_storage'\n 58054: u64 [sp + 0xd8] = s1\n 58058: a0 = u64 [sp + 0x50]\n 58061: u64 [sp + 0xd0] = a0\n 58065: a0 = u64 [sp + 0x58]\n 58068: u64 [sp + 0xc8] = a0\n 58072: a0 = u64 [sp + 0x48]\n 58075: u64 [sp + 0xc0] = a0\n 58079: a0 = u64 [sp + 0x18]\n 58082: u64 [sp + 0xf8] = a0\n 58086: a0 = u64 [sp + 0x20]\n 58089: u64 [sp + 0xf0] = a0\n 58093: a0 = u64 [sp + 0x28]\n 58096: u64 [sp + 0xe8] = a0\n 58100: a0 = u64 [sp + 0x30]\n 58103: u64 [sp + 0xe0] = a0\n 58107: i32 a1 = sp + 0xc0\n 58111: i32 a3 = sp + 0xe0\n 58115: a2 = 0xffffffffffffffff\n 58118: a4 = 0x20\n 58121: a0 = 0\n 58123: ecalli 16 // 'set_storage'\n 58125: fallthrough\n      : @722 (gas: 9)\n 58126: a0 = u64 [sp + 0x40]\n 58129: a0 = a0 + 0xffffffffffffff80\n 58132: a1 = u64 [sp + 0x80]\n 58136: a0 = a1 <u a0\n 58139: a1 = u64 [sp + 0x70]\n 58142: a0 = 0 if a1 != 0\n 58144: a1 = u64 [sp + 0x60]\n 58147: a0 = 0 if a1 != 0\n 58149: jump @731 if a0 == 0\n      : @723 (gas: 20)\n 58153: a0 = u64 [sp + 0x88]\n 58157: a1 = a0 + 0x4\n 58160: u64 [sp + 0x48] = a1\n 58163: a0 = a1 <u a0\n 58166: a1 = u64 [sp + 0x90]\n 58170: a2 = a1 + a0\n 58173: u64 [sp + 0x58] = a2\n 58176: a1 = a2 <u a1\n 58179: a1 = a0 if a0 == 0\n 58182: a0 = u64 [sp + 0x98]\n 58186: a1 = a1 + a0\n 58189: u64 [sp + 0x50] = a1\n 58192: a0 = a1 <u a0\n 58195: a1 = u64 [sp + 0x78]\n 58198: a0 = a0 + a1\n 58201: u64 [sp + 0x40] = a0\n 58204: a0 = u64 [sp + 0x68]\n 58207: i32 a0 = a0 + 0x80\n 58211: a1 = 0x20\n 58214: ra = 688, jump @0\n      : @724 [@dyn 344] (gas: 137)\n 58221: a1 = u8 [a0 + 0x1]\n 58224: a2 = u8 [a0]\n 58226: a3 = u8 [a0 + 0x2]\n 58229: a4 = u8 [a0 + 0x3]\n 58232: a1 = a1 << 0x8\n 58235: a1 = a1 | a2\n 58238: a3 = a3 << 0x10\n 58241: a4 = a4 << 0x18\n 58244: a3 = a3 | a4\n 58247: a1 = a1 | a3\n 58250: a2 = u8 [a0 + 0x5]\n 58253: a3 = u8 [a0 + 0x4]\n 58256: a4 = u8 [a0 + 0x6]\n 58259: a5 = u8 [a0 + 0x7]\n 58262: a2 = a2 << 0x8\n 58265: a2 = a2 | a3\n 58268: a4 = a4 << 0x10\n 58271: a5 = a5 << 0x18\n 58274: a4 = a4 | a5\n 58277: a2 = a2 | a4\n 58280: a2 = a2 << 0x20\n 58283: t0 = a2 | a1\n 58286: a2 = u8 [a0 + 0x9]\n 58289: a3 = u8 [a0 + 0x8]\n 58292: a4 = u8 [a0 + 0xa]\n 58295: a5 = u8 [a0 + 0xb]\n 58298: a2 = a2 << 0x8\n 58301: a2 = a2 | a3\n 58304: a4 = a4 << 0x10\n 58307: a5 = a5 << 0x18\n 58310: a4 = a4 | a5\n 58313: a2 = a2 | a4\n 58316: a3 = u8 [a0 + 0xd]\n 58319: a4 = u8 [a0 + 0xc]\n 58322: a5 = u8 [a0 + 0xe]\n 58325: s1 = u8 [a0 + 0xf]\n 58328: a3 = a3 << 0x8\n 58331: a3 = a3 | a4\n 58334: a5 = a5 << 0x10\n 58337: s1 = s1 << 0x18\n 58340: a5 = a5 | s1\n 58343: a3 = a3 | a5\n 58346: a3 = a3 << 0x20\n 58349: a2 = a2 | a3\n 58352: a3 = u8 [a0 + 0x11]\n 58355: a4 = u8 [a0 + 0x10]\n 58358: a5 = u8 [a0 + 0x12]\n 58361: s1 = u8 [a0 + 0x13]\n 58364: a3 = a3 << 0x8\n 58367: a3 = a3 | a4\n 58370: a5 = a5 << 0x10\n 58373: s1 = s1 << 0x18\n 58376: a5 = a5 | s1\n 58379: a3 = a3 | a5\n 58382: a4 = u8 [a0 + 0x15]\n 58385: a5 = u8 [a0 + 0x14]\n 58388: s1 = u8 [a0 + 0x16]\n 58391: a1 = u8 [a0 + 0x17]\n 58394: a4 = a4 << 0x8\n 58397: a4 = a4 | a5\n 58400: s1 = s1 << 0x10\n 58403: a1 = a1 << 0x18\n 58406: a1 = a1 | s1\n 58409: a1 = a1 | a4\n 58412: a1 = a1 << 0x20\n 58415: a3 = a3 | a1\n 58418: a1 = u8 [a0 + 0x19]\n 58421: a4 = u8 [a0 + 0x18]\n 58424: a5 = u8 [a0 + 0x1a]\n 58427: s1 = u8 [a0 + 0x1b]\n 58430: a1 = a1 << 0x8\n 58433: a1 = a1 | a4\n 58436: a5 = a5 << 0x10\n 58439: s1 = s1 << 0x18\n 58442: a5 = a5 | s1\n 58445: a1 = a1 | a5\n 58448: a4 = u8 [a0 + 0x1d]\n 58451: a5 = u8 [a0 + 0x1c]\n 58454: s1 = u8 [a0 + 0x1e]\n 58457: a0 = u8 [a0 + 0x1f]\n 58460: a4 = a4 << 0x8\n 58463: a4 = a4 | a5\n 58466: s1 = s1 << 0x10\n 58469: a0 = a0 << 0x18\n 58472: a0 = a0 | s1\n 58475: a0 = a0 | a4\n 58478: a0 = a0 << 0x20\n 58481: a0 = a0 | a1\n 58484: a0 = reverse a0\n 58486: u64 [sp + 0x38] = a0\n 58489: a0 = reverse a3\n 58491: u64 [sp + 0x30] = a0\n 58494: a0 = reverse a2\n 58496: u64 [sp + 0x28] = a0\n 58499: a0 = reverse t0\n 58501: u64 [sp + 0x20] = a0\n 58504: a0 = u64 [sp + 0x50]\n 58507: u64 [sp + 0xd0] = a0\n 58511: a0 = u64 [sp + 0x58]\n 58514: u64 [sp + 0xc8] = a0\n 58518: a0 = u64 [sp + 0x48]\n 58521: u64 [sp + 0xc0] = a0\n 58525: s1 = u64 [sp + 0x40]\n 58528: u64 [sp + 0xd8] = s1\n 58532: u64 [sp + 248] = 0\n 58536: u64 [sp + 240] = 0\n 58540: u64 [sp + 232] = 0\n 58544: u64 [sp + 224] = 0\n 58548: u32 [sp + 160] = 0x20\n 58553: i32 a1 = sp + 0xc0\n 58557: i32 a3 = sp + 0xe0\n 58561: i32 a4 = sp + 0xa0\n 58565: a2 = 0xffffffffffffffff\n 58568: a0 = 0\n 58570: ecalli 7 // 'get_storage'\n 58572: u64 [sp + 0xd8] = s1\n 58576: a0 = u64 [sp + 0x50]\n 58579: u64 [sp + 0xd0] = a0\n 58583: a0 = u64 [sp + 0x58]\n 58586: u64 [sp + 0xc8] = a0\n 58590: a0 = u64 [sp + 0x48]\n 58593: u64 [sp + 0xc0] = a0\n 58597: a0 = u64 [sp + 0x20]\n 58600: u64 [sp + 0xf8] = a0\n 58604: a0 = u64 [sp + 0x28]\n 58607: u64 [sp + 0xf0] = a0\n 58611: a0 = u64 [sp + 0x30]\n 58614: u64 [sp + 0xe8] = a0\n 58618: a0 = u64 [sp + 0x38]\n 58621: u64 [sp + 0xe0] = a0\n 58625: i32 a1 = sp + 0xc0\n 58629: i32 a3 = sp + 0xe0\n 58633: a2 = 0xffffffffffffffff\n 58636: a4 = 0x20\n 58639: a0 = 0\n 58641: ecalli 16 // 'set_storage'\n 58643: fallthrough\n      : @725 (gas: 10)\n 58644: a0 = 0x100000000\n 58654: u64 [sp + 0x40] = a0\n 58657: a0 = 0xffffff60\n 58667: a1 = u64 [sp + 0x80]\n 58671: a0 = a1 <u a0\n 58674: a1 = u64 [sp + 0x70]\n 58677: a0 = 0 if a1 != 0\n 58679: a1 = u64 [sp + 0x60]\n 58682: a0 = 0 if a1 != 0\n 58684: jump @731 if a0 == 0\n      : @726 (gas: 20)\n 58688: a0 = u64 [sp + 0x88]\n 58692: a1 = a0 + 0x5\n 58695: u64 [sp + 0x48] = a1\n 58698: a0 = a1 <u a0\n 58701: a1 = u64 [sp + 0x90]\n 58705: a2 = a1 + a0\n 58708: u64 [sp + 0x58] = a2\n 58711: a1 = a2 <u a1\n 58714: a1 = a0 if a0 == 0\n 58717: a0 = u64 [sp + 0x98]\n 58721: a1 = a1 + a0\n 58724: u64 [sp + 0x50] = a1\n 58727: a0 = a1 <u a0\n 58730: a1 = u64 [sp + 0x78]\n 58733: a0 = a0 + a1\n 58736: u64 [sp + 0x38] = a0\n 58739: a0 = u64 [sp + 0x68]\n 58742: i32 a0 = a0 + 0xa0\n 58746: a1 = 0x20\n 58749: ra = 690, jump @0\n      : @727 [@dyn 345] (gas: 105)\n 58756: a1 = u8 [a0 + 0x11]\n 58759: a2 = u8 [a0 + 0x10]\n 58762: a3 = u8 [a0 + 0x12]\n 58765: a4 = u8 [a0 + 0x13]\n 58768: a1 = a1 << 0x8\n 58771: a1 = a1 | a2\n 58774: a3 = a3 << 0x10\n 58777: a4 = a4 << 0x18\n 58780: a3 = a3 | a4\n 58783: a1 = a1 | a3\n 58786: a2 = u8 [a0 + 0x15]\n 58789: a3 = u8 [a0 + 0x14]\n 58792: a4 = u8 [a0 + 0x16]\n 58795: a5 = u8 [a0 + 0x17]\n 58798: a2 = a2 << 0x8\n 58801: a2 = a2 | a3\n 58804: a4 = a4 << 0x10\n 58807: a5 = a5 << 0x18\n 58810: a4 = a4 | a5\n 58813: a2 = a2 | a4\n 58816: a2 = a2 << 0x20\n 58819: a1 = a1 | a2\n 58822: a2 = u8 [a0 + 0x19]\n 58825: a3 = u8 [a0 + 0x18]\n 58828: a4 = u8 [a0 + 0x1a]\n 58831: a5 = u8 [a0 + 0x1b]\n 58834: a2 = a2 << 0x8\n 58837: a2 = a2 | a3\n 58840: a4 = a4 << 0x10\n 58843: a5 = a5 << 0x18\n 58846: a4 = a4 | a5\n 58849: a2 = a2 | a4\n 58852: a3 = u8 [a0 + 0x1d]\n 58855: a4 = u8 [a0 + 0x1c]\n 58858: a5 = u8 [a0 + 0x1e]\n 58861: s1 = u8 [a0 + 0x1f]\n 58864: a3 = a3 << 0x8\n 58867: a3 = a3 | a4\n 58870: a5 = a5 << 0x10\n 58873: s1 = s1 << 0x18\n 58876: a5 = a5 | s1\n 58879: a3 = a3 | a5\n 58882: a3 = a3 << 0x20\n 58885: a2 = a2 | a3\n 58888: a3 = u8 [a0 + 0xd]\n 58891: a4 = u8 [a0 + 0xc]\n 58894: a5 = u8 [a0 + 0xe]\n 58897: a0 = u8 [a0 + 0xf]\n 58900: a3 = a3 << 0x8\n 58903: a3 = a3 | a4\n 58906: a5 = a5 << 0x10\n 58909: a0 = a0 << 0x18\n 58912: a0 = a0 | a5\n 58915: a0 = a0 | a3\n 58918: a2 = reverse a2\n 58920: u64 [sp + 0x30] = a2\n 58923: a1 = reverse a1\n 58925: u64 [sp + 0x28] = a1\n 58928: s1 = reverse a0\n 58930: s1 = s1 >> 0x20\n 58933: u64 [sp + 0x20] = s1\n 58936: a0 = u64 [sp + 0x50]\n 58939: u64 [sp + 0xd0] = a0\n 58943: a0 = u64 [sp + 0x58]\n 58946: u64 [sp + 0xc8] = a0\n 58950: a0 = u64 [sp + 0x48]\n 58953: u64 [sp + 0xc0] = a0\n 58957: s1 = u64 [sp + 0x38]\n 58960: u64 [sp + 0xd8] = s1\n 58964: u64 [sp + 248] = 0\n 58968: u64 [sp + 240] = 0\n 58972: u64 [sp + 232] = 0\n 58976: u64 [sp + 224] = 0\n 58980: u32 [sp + 160] = 0x20\n 58985: i32 a1 = sp + 0xc0\n 58989: i32 a3 = sp + 0xe0\n 58993: i32 a4 = sp + 0xa0\n 58997: a2 = 0xffffffffffffffff\n 59000: a0 = 0\n 59002: ecalli 7 // 'get_storage'\n 59004: a0 = u32 [sp + 0xf4]\n 59008: a0 = a0 << 0x20\n 59011: a1 = u64 [sp + 0xf8]\n 59015: a2 = u64 [sp + 0x20]\n 59018: a0 = a0 | a2\n 59021: u64 [sp + 0xd8] = s1\n 59025: a2 = u64 [sp + 0x50]\n 59028: u64 [sp + 0xd0] = a2\n 59032: a2 = u64 [sp + 0x58]\n 59035: u64 [sp + 0xc8] = a2\n 59039: a2 = u64 [sp + 0x48]\n 59042: u64 [sp + 0xc0] = a2\n 59046: u64 [sp + 0xf8] = a1\n 59050: u64 [sp + 0xf0] = a0\n 59054: a0 = u64 [sp + 0x28]\n 59057: u64 [sp + 0xe8] = a0\n 59061: a0 = u64 [sp + 0x30]\n 59064: u64 [sp + 0xe0] = a0\n 59068: i32 a1 = sp + 0xc0\n 59072: i32 a3 = sp + 0xe0\n 59076: a2 = 0xffffffffffffffff\n 59079: a4 = 0x20\n 59082: a0 = 0\n 59084: ecalli 16 // 'set_storage'\n 59086: fallthrough\n      : @728 (gas: 9)\n 59087: a0 = u64 [sp + 0x40]\n 59090: a0 = a0 + 0xffffffffffffff40\n 59094: a1 = u64 [sp + 0x80]\n 59098: a0 = a1 <u a0\n 59101: a1 = u64 [sp + 0x70]\n 59104: a0 = 0 if a1 != 0\n 59106: a1 = u64 [sp + 0x60]\n 59109: a0 = 0 if a1 != 0\n 59111: jump @731 if a0 == 0\n      : @729 (gas: 22)\n 59115: a0 = 0xffffffff00000000\n 59125: u64 [sp + 0x80] = a0\n 59129: a0 = u64 [sp + 0x88]\n 59133: a1 = a0 + 0x6\n 59136: u64 [sp + 0x70] = a1\n 59139: a0 = a1 <u a0\n 59142: a1 = u64 [sp + 0x90]\n 59146: a2 = a1 + a0\n 59149: u64 [sp + 0x88] = a2\n 59153: a1 = a2 <u a1\n 59156: a1 = a0 if a0 == 0\n 59159: a0 = u64 [sp + 0x98]\n 59163: a1 = a1 + a0\n 59166: u64 [sp + 0x90] = a1\n 59170: a0 = a1 <u a0\n 59173: a1 = u64 [sp + 0x78]\n 59176: a0 = a0 + a1\n 59179: u64 [sp + 0x98] = a0\n 59183: a0 = u64 [sp + 0x68]\n 59186: i32 a0 = a0 + 0xc0\n 59190: a1 = 0x20\n 59193: ra = 692, jump @0\n      : @730 [@dyn 346] (gas: 127)\n 59200: a1 = u8 [a0 + 0x19]\n 59203: a2 = u8 [a0 + 0x18]\n 59206: a3 = u8 [a0 + 0x1a]\n 59209: a4 = u8 [a0 + 0x1b]\n 59212: a1 = a1 << 0x8\n 59215: a1 = a1 | a2\n 59218: a3 = a3 << 0x10\n 59221: a4 = a4 << 0x18\n 59224: a3 = a3 | a4\n 59227: a1 = a1 | a3\n 59230: a2 = u8 [a0 + 0x1d]\n 59233: a3 = u8 [a0 + 0x1c]\n 59236: a4 = u8 [a0 + 0x1e]\n 59239: a5 = u8 [a0 + 0x1f]\n 59242: a2 = a2 << 0x8\n 59245: a2 = a2 | a3\n 59248: a4 = a4 << 0x10\n 59251: a5 = a5 << 0x18\n 59254: a4 = a4 | a5\n 59257: a2 = a2 | a4\n 59260: a2 = a2 << 0x20\n 59263: a1 = a1 | a2\n 59266: a2 = u8 [a0 + 0x11]\n 59269: a3 = u8 [a0 + 0x10]\n 59272: a4 = u8 [a0 + 0x12]\n 59275: a5 = u8 [a0 + 0x13]\n 59278: a2 = a2 << 0x8\n 59281: a2 = a2 | a3\n 59284: a4 = a4 << 0x10\n 59287: a5 = a5 << 0x18\n 59290: a4 = a4 | a5\n 59293: a2 = a2 | a4\n 59296: a3 = u8 [a0 + 0x15]\n 59299: a4 = u8 [a0 + 0x14]\n 59302: a5 = u8 [a0 + 0x16]\n 59305: s1 = u8 [a0 + 0x17]\n 59308: a3 = a3 << 0x8\n 59311: a3 = a3 | a4\n 59314: a5 = a5 << 0x10\n 59317: s1 = s1 << 0x18\n 59320: a5 = a5 | s1\n 59323: a3 = a3 | a5\n 59326: a3 = a3 << 0x20\n 59329: a2 = a2 | a3\n 59332: a3 = u8 [a0 + 0x9]\n 59335: a4 = u8 [a0 + 0x8]\n 59338: a5 = u8 [a0 + 0xa]\n 59341: s1 = u8 [a0 + 0xb]\n 59344: a3 = a3 << 0x8\n 59347: a3 = a3 | a4\n 59350: a5 = a5 << 0x10\n 59353: s1 = s1 << 0x18\n 59356: a5 = a5 | s1\n 59359: a3 = a3 | a5\n 59362: a4 = u8 [a0 + 0xd]\n 59365: a5 = u8 [a0 + 0xc]\n 59368: s1 = u8 [a0 + 0xe]\n 59371: a0 = u8 [a0 + 0xf]\n 59374: a4 = a4 << 0x8\n 59377: a4 = a4 | a5\n 59380: s1 = s1 << 0x10\n 59383: a0 = a0 << 0x18\n 59386: a0 = a0 | s1\n 59389: a0 = a0 | a4\n 59392: a0 = a0 << 0x20\n 59395: a0 = a0 | a3\n 59398: u32 [sp + 160] = 0x20\n 59403: a3 = u64 [sp + 0x80]\n 59407: a0 = a0 & a3\n 59410: a2 = a2 & 0xffffffffffffffff\n 59413: a1 = a1 & 0xffffffffffffffff\n 59416: a1 = reverse a1\n 59418: u64 [sp + 0x78] = a1\n 59421: a1 = reverse a2\n 59423: u64 [sp + 0x68] = a1\n 59426: a0 = reverse a0\n 59428: u64 [sp + 0x60] = a0\n 59431: a0 = u64 [sp + 0x90]\n 59435: u64 [sp + 0xd0] = a0\n 59439: a0 = u64 [sp + 0x88]\n 59443: u64 [sp + 0xc8] = a0\n 59447: a0 = u64 [sp + 0x70]\n 59450: u64 [sp + 0xc0] = a0\n 59454: s1 = u64 [sp + 0x98]\n 59458: u64 [sp + 0xd8] = s1\n 59462: u64 [sp + 248] = 0\n 59466: u64 [sp + 240] = 0\n 59470: u64 [sp + 232] = 0\n 59474: u64 [sp + 224] = 0\n 59478: i32 a1 = sp + 0xc0\n 59482: i32 a3 = sp + 0xe0\n 59486: i32 a4 = sp + 0xa0\n 59490: a2 = 0xffffffffffffffff\n 59493: a0 = 0\n 59495: ecalli 7 // 'get_storage'\n 59497: a0 = u64 [sp + 0xf8]\n 59501: a1 = u64 [sp + 0xf0]\n 59505: a0 = a0 & 0xffffffffffffffff\n 59508: a2 = u64 [sp + 0x80]\n 59512: a1 = a1 & a2\n 59515: a2 = u64 [sp + 0x60]\n 59518: a1 = a1 | a2\n 59521: u64 [sp + 0xd8] = s1\n 59525: a2 = u64 [sp + 0x90]\n 59529: u64 [sp + 0xd0] = a2\n 59533: a2 = u64 [sp + 0x88]\n 59537: u64 [sp + 0xc8] = a2\n 59541: a2 = u64 [sp + 0x70]\n 59544: u64 [sp + 0xc0] = a2\n 59548: u64 [sp + 0xf8] = a0\n 59552: u64 [sp + 0xf0] = a1\n 59556: a0 = u64 [sp + 0x68]\n 59559: u64 [sp + 0xe8] = a0\n 59563: a0 = u64 [sp + 0x78]\n 59566: u64 [sp + 0xe0] = a0\n 59570: i32 a1 = sp + 0xc0\n 59574: i32 a3 = sp + 0xe0\n 59578: a2 = 0xffffffffffffffff\n 59581: a4 = 0x20\n 59584: a0 = 0\n 59586: ecalli 16 // 'set_storage'\n 59588: sp = s0 + 0xfffffffffffffee0\n 59592: ra = u64 [sp + 0x118]\n 59596: s0 = u64 [sp + 0x110]\n 59600: s1 = u64 [sp + 0x108]\n 59604: sp = sp + 0x120\n 59608: ret\n      : @731 (gas: 1)\n 59610: trap\n      : @732 [@dyn 347] (gas: 57)\n 59611: a1 = u64 [s1 + 0x168]\n 59615: a1 = reverse a1\n 59617: a2 = u64 [s1 + 0x178]\n 59621: a2 = reverse a2\n 59623: a4 = u64 [s1 + 0x170]\n 59627: a3 = a4 >> 0x18\n 59630: u8 [a0 + 0xf] = a3\n 59633: a3 = a4 >> 0x10\n 59636: u8 [a0 + 0xe] = a3\n 59639: a3 = a4 >> 0x8\n 59642: u8 [a0 + 0xd] = a3\n 59645: u8 [a0 + 0xc] = a4\n 59648: u8 [a0 + 11] = 0\n 59651: u8 [a0 + 10] = 0\n 59654: u8 [a0 + 9] = 0\n 59657: u8 [a0 + 8] = 0\n 59660: u8 [a0 + 7] = 0\n 59663: u8 [a0 + 6] = 0\n 59666: u8 [a0 + 5] = 0\n 59669: u8 [a0 + 4] = 0\n 59672: u8 [a0 + 3] = 0\n 59675: u8 [a0 + 2] = 0\n 59678: u8 [a0 + 1] = 0\n 59681: u8 [a0 + 0] = 0\n 59683: u8 [a0 + 0x18] = a2\n 59686: u8 [a0 + 0x10] = a1\n 59689: a3 = a2 >> 0x38\n 59692: u8 [a0 + 0x1f] = a3\n 59695: a3 = a2 >> 0x30\n 59698: u8 [a0 + 0x1e] = a3\n 59701: a3 = a2 >> 0x28\n 59704: u8 [a0 + 0x1d] = a3\n 59707: a3 = a2 >> 0x20\n 59710: u8 [a0 + 0x1c] = a3\n 59713: a3 = a2 >> 0x18\n 59716: u8 [a0 + 0x1b] = a3\n 59719: a3 = a2 >> 0x10\n 59722: u8 [a0 + 0x1a] = a3\n 59725: a2 = a2 >> 0x8\n 59728: u8 [a0 + 0x19] = a2\n 59731: a2 = a1 >> 0x38\n 59734: u8 [a0 + 0x17] = a2\n 59737: a2 = a1 >> 0x30\n 59740: u8 [a0 + 0x16] = a2\n 59743: a2 = a1 >> 0x28\n 59746: u8 [a0 + 0x15] = a2\n 59749: a2 = a1 >> 0x20\n 59752: u8 [a0 + 0x14] = a2\n 59755: a2 = a1 >> 0x18\n 59758: u8 [a0 + 0x13] = a2\n 59761: a2 = a1 >> 0x10\n 59764: u8 [a0 + 0x12] = a2\n 59767: a1 = a1 >> 0x8\n 59770: u8 [a0 + 0x11] = a1\n 59773: a0 = 0x20\n 59776: a1 = 0x20\n 59779: ra = 696, jump @0\n      : @733 [@dyn 348] (gas: 35)\n 59786: u8 [a0 + 31] = 0x1\n 59790: u8 [a0 + 30] = 0\n 59793: u8 [a0 + 29] = 0\n 59796: u8 [a0 + 28] = 0\n 59799: u8 [a0 + 27] = 0\n 59802: u8 [a0 + 26] = 0\n 59805: u8 [a0 + 25] = 0\n 59808: u8 [a0 + 24] = 0\n 59811: u8 [a0 + 23] = 0\n 59814: u8 [a0 + 22] = 0\n 59817: u8 [a0 + 21] = 0\n 59820: u8 [a0 + 20] = 0\n 59823: u8 [a0 + 19] = 0\n 59826: u8 [a0 + 18] = 0\n 59829: u8 [a0 + 17] = 0\n 59832: u8 [a0 + 16] = 0\n 59835: u8 [a0 + 15] = 0\n 59838: u8 [a0 + 14] = 0\n 59841: u8 [a0 + 13] = 0\n 59844: u8 [a0 + 12] = 0\n 59847: u8 [a0 + 11] = 0\n 59850: u8 [a0 + 10] = 0\n 59853: u8 [a0 + 9] = 0\n 59856: u8 [a0 + 8] = 0\n 59859: u8 [a0 + 7] = 0\n 59862: u8 [a0 + 6] = 0\n 59865: u8 [a0 + 5] = 0\n 59868: u8 [a0 + 4] = 0\n 59871: u8 [a0 + 3] = 0\n 59874: u8 [a0 + 2] = 0\n 59877: u8 [a0 + 1] = 0\n 59880: u8 [a0 + 0] = 0\n 59882: a1 = 0x40\n 59885: a0 = 0\n 59887: ra = 698, jump @0\n      : @734 [@dyn 349] (gas: 28)\n 59894: i32 a0 = a0 + 0\n 59896: i32 a2 = s1 + 0x5c0\n 59900: a1 = 0x40\n 59903: ecalli 8 // 'hash_keccak_256'\n 59905: a0 = u64 [s1 + 0x5d8]\n 59909: a1 = u64 [s1 + 0x5d0]\n 59913: a2 = u64 [s1 + 0x5c8]\n 59917: a3 = u64 [s1 + 0x5c0]\n 59921: a0 = reverse a0\n 59923: a1 = reverse a1\n 59925: a2 = reverse a2\n 59927: a3 = reverse a3\n 59929: u64 [s1 + 0x598] = a3\n 59933: u64 [s1 + 0x590] = a2\n 59937: u64 [s1 + 0x588] = a1\n 59941: u64 [s1 + 0x580] = a0\n 59945: u64 [s1 + 1496] = 0\n 59949: u64 [s1 + 1488] = 0\n 59953: u64 [s1 + 1480] = 0\n 59957: u64 [s1 + 1472] = 0\n 59961: u32 [s1 + 1440] = 0x20\n 59966: i32 a1 = s1 + 0x580\n 59970: i32 a3 = s1 + 0x5c0\n 59974: i32 a4 = s1 + 0x5a0\n 59978: a2 = 0xffffffffffffffff\n 59981: a0 = 0\n 59983: ecalli 7 // 'get_storage'\n 59985: fallthrough\n      : @735 (gas: 20)\n 59986: a0 = u64 [s1 + 0x5d8]\n 59990: t0 = u64 [s1 + 0x5c0]\n 59994: a2 = u64 [s1 + 0x5d0]\n 59998: a3 = u64 [s1 + 0x5c8]\n 60002: a1 = u64 [s1 + 0x180]\n 60006: a4 = a0 ^ a1\n 60009: a1 = a1 <u a0\n 60012: a0 = u64 [s1 + 0x188]\n 60016: a5 = a0 <u a2\n 60019: a5 = a1 if a4 != 0\n 60022: a1 = u64 [s1 + 0x190]\n 60026: t1 = a3 ^ a1\n 60029: a3 = a1 <u a3\n 60032: a1 = u64 [s1 + 0x198]\n 60036: a1 = a1 <u t0\n 60039: a1 = a3 if t1 != 0\n 60042: a0 = a0 ^ a2\n 60045: a0 = a0 | a4\n 60048: a1 = a5 if a0 != 0\n 60051: jump @737 if a1 != 0\n      : @736 (gas: 1)\n 60054: jump @795\n      : @737 (gas: 11)\n 60057: a0 = sp + 0xffffffffffffffe0\n 60060: a0 = a0 & 0xffffffffffffffe0\n 60063: u64 [s1 + 0x178] = a0\n 60067: sp = a0\n 60069: u64 [a0 + 24] = 0\n 60072: u64 [a0 + 16] = 0\n 60075: u64 [a0 + 8] = 0\n 60078: u64 [a0 + 0] = 0\n 60080: i32 a0 = a0 + 0\n 60082: ecalli 17 // 'value_transferred'\n 60084: fallthrough\n      : @738 (gas: 9)\n 60085: a3 = u64 [s1 + 0x178]\n 60089: a0 = u64 [a3 + 0x10]\n 60092: a1 = u64 [a3 + 0x18]\n 60095: a2 = u64 [a3 + 0x8]\n 60098: a3 = u64 [a3]\n 60100: a1 = a1 | a2\n 60103: a0 = a0 | a3\n 60106: a0 = a0 | a1\n 60109: jump @740 if a0 != 0\n      : @739 (gas: 1)\n 60112: jump @800\n      : @740 (gas: 20)\n 60115: i32 a0 = s1 + 0x440\n 60119: ecalli 5 // 'caller'\n 60121: a0 = u64 [s1 + 0x448]\n 60125: a1 = i32 [s1 + 0x450]\n 60129: a3 = u64 [s1 + 0x440]\n 60133: u64 [s1 + 0x170] = a3\n 60137: a0 = reverse a0\n 60139: a2 = a0 << 0x20\n 60142: a1 = reverse a1\n 60144: a1 = a1 >> 0x20\n 60147: a1 = a1 | a2\n 60150: u64 [s1 + 0x178] = a1\n 60154: a0 = a0 >> 0x20\n 60157: a1 = reverse a3\n 60159: a1 = a1 << 0x20\n 60162: a0 = a0 | a1\n 60165: u64 [s1 + 0x168] = a0\n 60169: a1 = 0x20\n 60172: a0 = 0\n 60174: ra = 700, jump @0\n      : @741 [@dyn 350] (gas: 57)\n 60181: a1 = u64 [s1 + 0x168]\n 60185: a1 = reverse a1\n 60187: a2 = u64 [s1 + 0x178]\n 60191: a2 = reverse a2\n 60193: a4 = u64 [s1 + 0x170]\n 60197: a3 = a4 >> 0x18\n 60200: u8 [a0 + 0xf] = a3\n 60203: a3 = a4 >> 0x10\n 60206: u8 [a0 + 0xe] = a3\n 60209: a3 = a4 >> 0x8\n 60212: u8 [a0 + 0xd] = a3\n 60215: u8 [a0 + 0xc] = a4\n 60218: u8 [a0 + 11] = 0\n 60221: u8 [a0 + 10] = 0\n 60224: u8 [a0 + 9] = 0\n 60227: u8 [a0 + 8] = 0\n 60230: u8 [a0 + 7] = 0\n 60233: u8 [a0 + 6] = 0\n 60236: u8 [a0 + 5] = 0\n 60239: u8 [a0 + 4] = 0\n 60242: u8 [a0 + 3] = 0\n 60245: u8 [a0 + 2] = 0\n 60248: u8 [a0 + 1] = 0\n 60251: u8 [a0 + 0] = 0\n 60253: u8 [a0 + 0x18] = a2\n 60256: u8 [a0 + 0x10] = a1\n 60259: a3 = a2 >> 0x38\n 60262: u8 [a0 + 0x1f] = a3\n 60265: a3 = a2 >> 0x30\n 60268: u8 [a0 + 0x1e] = a3\n 60271: a3 = a2 >> 0x28\n 60274: u8 [a0 + 0x1d] = a3\n 60277: a3 = a2 >> 0x20\n 60280: u8 [a0 + 0x1c] = a3\n 60283: a3 = a2 >> 0x18\n 60286: u8 [a0 + 0x1b] = a3\n 60289: a3 = a2 >> 0x10\n 60292: u8 [a0 + 0x1a] = a3\n 60295: a2 = a2 >> 0x8\n 60298: u8 [a0 + 0x19] = a2\n 60301: a2 = a1 >> 0x38\n 60304: u8 [a0 + 0x17] = a2\n 60307: a2 = a1 >> 0x30\n 60310: u8 [a0 + 0x16] = a2\n 60313: a2 = a1 >> 0x28\n 60316: u8 [a0 + 0x15] = a2\n 60319: a2 = a1 >> 0x20\n 60322: u8 [a0 + 0x14] = a2\n 60325: a2 = a1 >> 0x18\n 60328: u8 [a0 + 0x13] = a2\n 60331: a2 = a1 >> 0x10\n 60334: u8 [a0 + 0x12] = a2\n 60337: a1 = a1 >> 0x8\n 60340: u8 [a0 + 0x11] = a1\n 60343: a0 = 0x20\n 60346: a1 = 0x20\n 60349: ra = 702, jump @0\n      : @742 [@dyn 351] (gas: 35)\n 60356: u8 [a0 + 31] = 0x1\n 60360: u8 [a0 + 30] = 0\n 60363: u8 [a0 + 29] = 0\n 60366: u8 [a0 + 28] = 0\n 60369: u8 [a0 + 27] = 0\n 60372: u8 [a0 + 26] = 0\n 60375: u8 [a0 + 25] = 0\n 60378: u8 [a0 + 24] = 0\n 60381: u8 [a0 + 23] = 0\n 60384: u8 [a0 + 22] = 0\n 60387: u8 [a0 + 21] = 0\n 60390: u8 [a0 + 20] = 0\n 60393: u8 [a0 + 19] = 0\n 60396: u8 [a0 + 18] = 0\n 60399: u8 [a0 + 17] = 0\n 60402: u8 [a0 + 16] = 0\n 60405: u8 [a0 + 15] = 0\n 60408: u8 [a0 + 14] = 0\n 60411: u8 [a0 + 13] = 0\n 60414: u8 [a0 + 12] = 0\n 60417: u8 [a0 + 11] = 0\n 60420: u8 [a0 + 10] = 0\n 60423: u8 [a0 + 9] = 0\n 60426: u8 [a0 + 8] = 0\n 60429: u8 [a0 + 7] = 0\n 60432: u8 [a0 + 6] = 0\n 60435: u8 [a0 + 5] = 0\n 60438: u8 [a0 + 4] = 0\n 60441: u8 [a0 + 3] = 0\n 60444: u8 [a0 + 2] = 0\n 60447: u8 [a0 + 1] = 0\n 60450: u8 [a0 + 0] = 0\n 60452: a1 = 0x40\n 60455: a0 = 0\n 60457: ra = 704, jump @0\n      : @743 [@dyn 352] (gas: 28)\n 60464: i32 a0 = a0 + 0\n 60466: i32 a2 = s1 + 0x5c0\n 60470: a1 = 0x40\n 60473: ecalli 8 // 'hash_keccak_256'\n 60475: a0 = u64 [s1 + 0x5d8]\n 60479: a1 = u64 [s1 + 0x5d0]\n 60483: a2 = u64 [s1 + 0x5c8]\n 60487: a3 = u64 [s1 + 0x5c0]\n 60491: a4 = reverse a0\n 60493: a0 = reverse a1\n 60495: a1 = reverse a2\n 60497: a2 = reverse a3\n 60499: a3 = u64 [s1 + 0x180]\n 60503: u64 [s1 + 0x378] = a3\n 60507: a3 = u64 [s1 + 0x188]\n 60511: u64 [s1 + 0x370] = a3\n 60515: a3 = u64 [s1 + 0x190]\n 60519: u64 [s1 + 0x368] = a3\n 60523: a3 = u64 [s1 + 0x198]\n 60527: u64 [s1 + 0x360] = a3\n 60531: u64 [s1 + 0x398] = a2\n 60535: u64 [s1 + 0x390] = a1\n 60539: u64 [s1 + 0x388] = a0\n 60543: a0 = s1 + 0x3a0\n 60547: a1 = s1 + 0x380\n 60551: a2 = s1 + 0x360\n 60555: u64 [s1 + 0x380] = a4\n 60559: ra = 706, jump @75\n      : @744 [@dyn 353] (gas: 69)\n 60566: a0 = u64 [s1 + 0x3b8]\n 60570: a1 = u64 [s1 + 0x3b0]\n 60574: a2 = u64 [s1 + 0x3a8]\n 60578: a3 = u64 [s1 + 0x3a0]\n 60582: u64 [s1 + 0x598] = a0\n 60586: u64 [s1 + 0x590] = a1\n 60590: u64 [s1 + 0x588] = a2\n 60594: u64 [s1 + 0x580] = a3\n 60598: u64 [s1 + 1496] = 0\n 60602: u64 [s1 + 1488] = 0\n 60606: u64 [s1 + 1480] = 0\n 60610: u64 [s1 + 1472] = 0\n 60614: u32 [s1 + 1440] = 0x20\n 60619: i32 a1 = s1 + 0x580\n 60623: i32 a3 = s1 + 0x5c0\n 60627: i32 a4 = s1 + 0x5a0\n 60631: a2 = 0xffffffffffffffff\n 60634: a0 = 0\n 60636: ecalli 7 // 'get_storage'\n 60638: a0 = u64 [s1 + 0x5d0]\n 60642: u64 [s1 + 0x120] = a0\n 60646: a0 = u64 [s1 + 0x5c8]\n 60650: u64 [s1 + 0x190] = a0\n 60654: a0 = u64 [s1 + 0x5c0]\n 60658: u64 [s1 + 0x198] = a0\n 60662: a0 = sp + 0xffffffffffffffe0\n 60665: a0 = a0 & 0xffffffffffffffe0\n 60668: u64 [s1 + 0x188] = a0\n 60672: sp = a0\n 60674: u64 [a0 + 24] = 0\n 60677: u64 [a0 + 16] = 0\n 60680: u64 [a0 + 8] = 0\n 60683: u64 [a0 + 0] = 0\n 60685: i32 a0 = a0 + 0\n 60687: ecalli 17 // 'value_transferred'\n 60689: a1 = u64 [s1 + 0x188]\n 60693: a0 = u64 [a1 + 0x18]\n 60696: u64 [s1 + 0x140] = a0\n 60700: a0 = u64 [a1 + 0x10]\n 60703: u64 [s1 + 0x168] = a0\n 60707: a0 = u64 [a1 + 0x8]\n 60710: u64 [s1 + 0x170] = a0\n 60714: a0 = u64 [a1]\n 60716: u64 [s1 + 0x178] = a0\n 60720: a0 = u64 [s1 + 0x190]\n 60724: a2 = reverse a0\n 60726: a0 = a2 << 0x20\n 60729: a1 = u64 [s1 + 0x120]\n 60733: a1 = reverse a1\n 60735: a1 = a1 >> 0x20\n 60738: a3 = a1 | a0\n 60741: u64 [s1 + 0xf0] = a2\n 60745: a2 = a2 >> 0x20\n 60748: a0 = u64 [s1 + 0x198]\n 60752: a1 = reverse a0\n 60754: a0 = a1 << 0x20\n 60757: u64 [s1 + 0xe8] = a2\n 60761: a0 = a0 | a2\n 60764: u64 [s1 + 0xe0] = a1\n 60768: a1 = a1 >> 0x20\n 60771: u64 [s1 + 0x130] = a0\n 60775: u64 [s1 + 0x468] = a0\n 60779: u64 [s1 + 0x138] = a3\n 60783: u64 [s1 + 0x460] = a3\n 60787: u64 [s1 + 0x118] = a1\n 60791: u32 [s1 + 0x470] = a1\n 60795: i32 a0 = s1 + 0x460\n 60799: ecalli 6 // 'code_size'\n 60801: fallthrough\n      : @745 (gas: 1)\n 60802: jump @747 if a0 != 0\n      : @746 (gas: 1)\n 60805: jump @808\n      : @747 (gas: 3)\n 60808: a0 = 0x40\n 60811: a1 = 0x20\n 60814: ra = 708, jump @0\n      : @748 [@dyn 354] (gas: 107)\n 60821: a1 = u8 [a0 + 0x11]\n 60824: a2 = u8 [a0 + 0x10]\n 60827: a3 = u8 [a0 + 0x12]\n 60830: a4 = u8 [a0 + 0x13]\n 60833: a1 = a1 << 0x8\n 60836: a1 = a1 | a2\n 60839: a3 = a3 << 0x10\n 60842: a4 = a4 << 0x18\n 60845: a3 = a3 | a4\n 60848: a1 = a1 | a3\n 60851: a2 = u8 [a0 + 0x15]\n 60854: a3 = u8 [a0 + 0x14]\n 60857: a4 = u8 [a0 + 0x16]\n 60860: a5 = u8 [a0 + 0x17]\n 60863: a2 = a2 << 0x8\n 60866: a2 = a2 | a3\n 60869: a4 = a4 << 0x10\n 60872: a5 = a5 << 0x18\n 60875: a4 = a4 | a5\n 60878: a2 = a2 | a4\n 60881: a2 = a2 << 0x20\n 60884: t1 = a2 | a1\n 60887: a1 = u8 [a0 + 0x1]\n 60890: a2 = u8 [a0]\n 60892: a3 = u8 [a0 + 0x2]\n 60895: a4 = u8 [a0 + 0x3]\n 60898: a1 = a1 << 0x8\n 60901: a1 = a1 | a2\n 60904: a3 = a3 << 0x10\n 60907: a4 = a4 << 0x18\n 60910: a3 = a3 | a4\n 60913: a1 = a1 | a3\n 60916: a2 = u8 [a0 + 0x5]\n 60919: a3 = u8 [a0 + 0x4]\n 60922: a4 = u8 [a0 + 0x6]\n 60925: a5 = u8 [a0 + 0x7]\n 60928: a2 = a2 << 0x8\n 60931: a2 = a2 | a3\n 60934: a4 = a4 << 0x10\n 60937: a5 = a5 << 0x18\n 60940: a4 = a4 | a5\n 60943: a2 = a2 | a4\n 60946: a2 = a2 << 0x20\n 60949: t0 = a2 | a1\n 60952: a1 = u8 [a0 + 0x19]\n 60955: a2 = u8 [a0 + 0x18]\n 60958: a3 = u8 [a0 + 0x1a]\n 60961: a4 = u8 [a0 + 0x1b]\n 60964: a1 = a1 << 0x8\n 60967: a1 = a1 | a2\n 60970: a3 = a3 << 0x10\n 60973: a4 = a4 << 0x18\n 60976: a3 = a3 | a4\n 60979: a1 = a1 | a3\n 60982: a2 = u8 [a0 + 0x1d]\n 60985: a3 = u8 [a0 + 0x1c]\n 60988: a4 = u8 [a0 + 0x1e]\n 60991: a5 = u8 [a0 + 0x1f]\n 60994: a2 = a2 << 0x8\n 60997: a2 = a2 | a3\n 61000: a4 = a4 << 0x10\n 61003: a5 = a5 << 0x18\n 61006: a4 = a4 | a5\n 61009: a2 = a2 | a4\n 61012: a2 = a2 << 0x20\n 61015: a5 = a2 | a1\n 61018: a1 = u8 [a0 + 0x9]\n 61021: a2 = u8 [a0 + 0x8]\n 61024: a3 = u8 [a0 + 0xa]\n 61027: a4 = u8 [a0 + 0xb]\n 61030: a1 = a1 << 0x8\n 61033: a1 = a1 | a2\n 61036: a3 = a3 << 0x10\n 61039: a4 = a4 << 0x18\n 61042: a3 = a3 | a4\n 61045: a1 = a1 | a3\n 61048: a2 = u8 [a0 + 0xd]\n 61051: a3 = u8 [a0 + 0xc]\n 61054: a4 = u8 [a0 + 0xe]\n 61057: a0 = u8 [a0 + 0xf]\n 61060: a2 = a2 << 0x8\n 61063: a2 = a2 | a3\n 61066: a4 = a4 << 0x10\n 61069: a0 = a0 << 0x18\n 61072: a0 = a0 | a4\n 61075: a0 = a0 | a2\n 61078: a0 = a0 << 0x20\n 61081: a0 = a0 | a1\n 61084: u64 [s1 + 0xf8] = a0\n 61088: a3 = reverse a0\n 61090: u64 [s1 + 0x100] = a5\n 61094: a2 = reverse a5\n 61096: u64 [s1 + 0x110] = t0\n 61100: a1 = reverse t0\n 61102: u64 [s1 + 0x108] = t1\n 61106: a0 = reverse t1\n 61108: u64 [s1 + 0x190] = a0\n 61112: u64 [s1 + 0x180] = a1\n 61116: a0 = a0 | a1\n 61119: a1 = a2 | a3\n 61122: a1 = a1 | a0\n 61125: a1 = a1 >> 0x20\n 61128: u64 [s1 + 0x188] = a3\n 61132: a0 = a0 | a3\n 61135: a0 = a0 << 0x20\n 61138: a0 = a0 | a1\n 61141: jump @750 if a0 == 0\n      : @749 (gas: 1)\n 61144: jump @806\n      : @750 (gas: 5)\n 61147: i32 a0 = a2 + 0\n 61149: a1 = 0x20\n 61152: u64 [s1 + 0x198] = a0\n 61156: u64 [s1 + 0x128] = a2\n 61160: ra = 710, jump @0\n      : @751 [@dyn 355] (gas: 42)\n 61167: u8 [a0 + 31] = 0\n 61170: u8 [a0 + 30] = 0\n 61173: u8 [a0 + 29] = 0\n 61176: u8 [a0 + 28] = 0\n 61179: u8 [a0 + 27] = 0\n 61182: u8 [a0 + 26] = 0\n 61185: u8 [a0 + 25] = 0\n 61188: u8 [a0 + 24] = 0\n 61191: u8 [a0 + 23] = 0\n 61194: u8 [a0 + 22] = 0\n 61197: u8 [a0 + 21] = 0\n 61200: u8 [a0 + 20] = 0\n 61203: u8 [a0 + 19] = 0\n 61206: u8 [a0 + 18] = 0\n 61209: u8 [a0 + 17] = 0\n 61212: u8 [a0 + 16] = 0\n 61215: u8 [a0 + 15] = 0\n 61218: u8 [a0 + 14] = 0\n 61221: u8 [a0 + 13] = 0\n 61224: u8 [a0 + 12] = 0\n 61227: u8 [a0 + 11] = 0\n 61230: u8 [a0 + 10] = 0\n 61233: u8 [a0 + 9] = 0\n 61236: u8 [a0 + 8] = 0\n 61239: u8 [a0 + 7] = 0\n 61242: u8 [a0 + 6] = 0\n 61245: u8 [a0 + 5] = 0\n 61248: u8 [a0 + 4] = 0\n 61251: u8 [a0 + 3] = 0x25\n 61255: u8 [a0 + 2] = 0x5f\n 61259: u8 [a0 + 1] = 0xb5\n 61264: a1 = u64 [s1 + 0x188]\n 61268: a2 = u64 [s1 + 0x180]\n 61272: a1 = a1 | a2\n 61275: a2 = 0xfffffffc\n 61285: a3 = u64 [s1 + 0x128]\n 61289: a2 = a3 <u a2\n 61292: a4 = u64 [s1 + 0x190]\n 61296: a2 = 0 if a4 != 0\n 61298: a2 = 0 if a1 != 0\n 61300: u8 [a0 + 0] = 0xb6\n 61304: jump @753 if a2 != 0\n      : @752 (gas: 1)\n 61307: jump @806\n      : @753 (gas: 4)\n 61310: a0 = u64 [s1 + 0x198]\n 61314: i32 a0 = a0 + 0x4\n 61317: a1 = 0x20\n 61320: ra = 712, jump @0\n      : @754 [@dyn 356] (gas: 86)\n 61327: a1 = u64 [s1 + 0x148]\n 61331: a1 = reverse a1\n 61333: a2 = u64 [s1 + 0x150]\n 61337: a2 = reverse a2\n 61339: a3 = u64 [s1 + 0x158]\n 61343: a3 = reverse a3\n 61345: a4 = u64 [s1 + 0x160]\n 61349: a4 = reverse a4\n 61351: a5 = a4 >> 0x38\n 61354: u8 [a0 + 0x1f] = a5\n 61357: a5 = a4 >> 0x30\n 61360: u8 [a0 + 0x1e] = a5\n 61363: a5 = a4 >> 0x28\n 61366: u8 [a0 + 0x1d] = a5\n 61369: a5 = a4 >> 0x20\n 61372: u8 [a0 + 0x1c] = a5\n 61375: a5 = a4 >> 0x18\n 61378: u8 [a0 + 0x1b] = a5\n 61381: a5 = a4 >> 0x10\n 61384: u8 [a0 + 0x1a] = a5\n 61387: a5 = a4 >> 0x8\n 61390: u8 [a0 + 0x19] = a5\n 61393: u8 [a0 + 0x18] = a4\n 61396: u8 [a0 + 0x10] = a3\n 61399: a4 = a3 >> 0x38\n 61402: u8 [a0 + 0x17] = a4\n 61405: a4 = a3 >> 0x30\n 61408: u8 [a0 + 0x16] = a4\n 61411: a4 = a3 >> 0x28\n 61414: u8 [a0 + 0x15] = a4\n 61417: a4 = a3 >> 0x20\n 61420: u8 [a0 + 0x14] = a4\n 61423: a4 = a3 >> 0x18\n 61426: u8 [a0 + 0x13] = a4\n 61429: a4 = a3 >> 0x10\n 61432: u8 [a0 + 0x12] = a4\n 61435: a3 = a3 >> 0x8\n 61438: u8 [a0 + 0x11] = a3\n 61441: u8 [a0 + 0x8] = a2\n 61444: a3 = a2 >> 0x38\n 61447: u8 [a0 + 0xf] = a3\n 61450: a3 = a2 >> 0x30\n 61453: u8 [a0 + 0xe] = a3\n 61456: a3 = a2 >> 0x28\n 61459: u8 [a0 + 0xd] = a3\n 61462: a3 = a2 >> 0x20\n 61465: u8 [a0 + 0xc] = a3\n 61468: a3 = a2 >> 0x18\n 61471: u8 [a0 + 0xb] = a3\n 61474: a3 = a2 >> 0x10\n 61477: u8 [a0 + 0xa] = a3\n 61480: a2 = a2 >> 0x8\n 61483: u8 [a0 + 0x9] = a2\n 61486: u8 [a0] = a1\n 61488: a2 = a1 >> 0x38\n 61491: u8 [a0 + 0x7] = a2\n 61494: a2 = a1 >> 0x30\n 61497: u8 [a0 + 0x6] = a2\n 61500: a2 = a1 >> 0x28\n 61503: u8 [a0 + 0x5] = a2\n 61506: a2 = a1 >> 0x20\n 61509: u8 [a0 + 0x4] = a2\n 61512: a2 = a1 >> 0x18\n 61515: u8 [a0 + 0x3] = a2\n 61518: a2 = a1 >> 0x10\n 61521: u8 [a0 + 0x2] = a2\n 61524: a1 = a1 >> 0x8\n 61527: u8 [a0 + 0x1] = a1\n 61530: ecalli 11 // 'ref_time_left'\n 61532: a0 = u64 [s1 + 0x130]\n 61536: u64 [s1 + 0x488] = a0\n 61540: a0 = u64 [s1 + 0x138]\n 61544: u64 [s1 + 0x480] = a0\n 61548: a0 = u64 [s1 + 0x118]\n 61552: u32 [s1 + 0x490] = a0\n 61556: a0 = u64 [s1 + 0x140]\n 61560: u64 [s1 + 0x4b8] = a0\n 61564: a0 = u64 [s1 + 0x168]\n 61568: u64 [s1 + 0x4b0] = a0\n 61572: a0 = u64 [s1 + 0x170]\n 61576: u64 [s1 + 0x4a8] = a0\n 61580: a0 = u64 [s1 + 0x178]\n 61584: u64 [s1 + 0x4a0] = a0\n 61588: a1 = 0x24\n 61591: a0 = u64 [s1 + 0x198]\n 61595: ra = 714, jump @0\n      : @755 [@dyn 357] (gas: 4)\n 61602: u64 [s1 + 0x190] = a0\n 61606: a0 = u64 [s1 + 0x198]\n 61610: a1 = 0\n 61612: ra = 716, jump @0\n      : @756 [@dyn 358] (gas: 31)\n 61619: u32 [s1 + 1216] = 0\n 61623: u64 [s1 + 1272] = 0xffffffffffffffff\n 61628: u64 [s1 + 1264] = 0xffffffffffffffff\n 61633: u64 [s1 + 1256] = 0xffffffffffffffff\n 61638: u64 [s1 + 1248] = 0xffffffffffffffff\n 61643: a1 = s1 + 0x480\n 61647: a1 = a1 << 0x20\n 61650: a1 = a1 >> 0x20\n 61653: a2 = 0x800000000\n 61663: t0 = a1 | a2\n 61666: a1 = s1 + 0x4a0\n 61670: a1 = a1 << 0x20\n 61673: a1 = a1 >> 0x20\n 61676: a2 = s1 + 0x4e0\n 61680: a2 = a2 << 0x20\n 61683: a3 = a2 | a1\n 61686: a1 = u64 [s1 + 0x190]\n 61690: a1 = a1 << 0x20\n 61693: a1 = a1 >> 0x20\n 61696: a2 = 0x2400000000\n 61706: a4 = a1 | a2\n 61709: a0 = a0 << 0x20\n 61712: a0 = a0 >> 0x20\n 61715: a1 = s1 + 0x4c0\n 61719: a1 = a1 << 0x20\n 61722: a5 = a1 | a0\n 61725: a1 = 0xffffffffffffffff\n 61728: a2 = 0xffffffffffffffff\n 61731: a0 = t0\n 61733: ecalli 1 // 'call'\n 61735: fallthrough\n      : @757 (gas: 1)\n 61736: jump @759 if a0 == 0\n      : @758 (gas: 1)\n 61739: jump @807\n      : @759 (gas: 4)\n 61742: ecalli 13 // 'return_data_size'\n 61744: a0 = 0x40\n 61747: a1 = 0x20\n 61750: ra = 718, jump @0\n      : @760 [@dyn 359] (gas: 75)\n 61757: a3 = u64 [s1 + 0x100]\n 61761: u8 [a0 + 0x18] = a3\n 61764: a2 = u64 [s1 + 0x108]\n 61768: a1 = a2 >> 0x38\n 61771: u8 [a0 + 0x17] = a1\n 61774: a1 = a2 >> 0x30\n 61777: u8 [a0 + 0x16] = a1\n 61780: a1 = a2 >> 0x28\n 61783: u8 [a0 + 0x15] = a1\n 61786: a1 = a2 >> 0x20\n 61789: u8 [a0 + 0x14] = a1\n 61792: a1 = a2 >> 0x18\n 61795: u8 [a0 + 0x13] = a1\n 61798: a1 = a2 >> 0x10\n 61801: u8 [a0 + 0x12] = a1\n 61804: a1 = a2 >> 0x8\n 61807: u8 [a0 + 0x11] = a1\n 61810: u8 [a0 + 0x10] = a2\n 61813: a2 = u64 [s1 + 0xf8]\n 61817: a1 = a2 >> 0x38\n 61820: u8 [a0 + 0xf] = a1\n 61823: a1 = a2 >> 0x30\n 61826: u8 [a0 + 0xe] = a1\n 61829: a1 = a2 >> 0x28\n 61832: u8 [a0 + 0xd] = a1\n 61835: a1 = a2 >> 0x20\n 61838: u8 [a0 + 0xc] = a1\n 61841: a1 = a2 >> 0x18\n 61844: u8 [a0 + 0xb] = a1\n 61847: a1 = a2 >> 0x10\n 61850: u8 [a0 + 0xa] = a1\n 61853: a1 = a2 >> 0x8\n 61856: u8 [a0 + 0x9] = a1\n 61859: u8 [a0 + 0x8] = a2\n 61862: a2 = u64 [s1 + 0x110]\n 61866: a1 = a2 >> 0x38\n 61869: u8 [a0 + 0x7] = a1\n 61872: a1 = a2 >> 0x30\n 61875: u8 [a0 + 0x6] = a1\n 61878: a1 = a2 >> 0x28\n 61881: u8 [a0 + 0x5] = a1\n 61884: a1 = a2 >> 0x20\n 61887: u8 [a0 + 0x4] = a1\n 61890: a1 = a2 >> 0x18\n 61893: u8 [a0 + 0x3] = a1\n 61896: a1 = a2 >> 0x10\n 61899: u8 [a0 + 0x2] = a1\n 61902: a1 = a2 >> 0x8\n 61905: u8 [a0 + 0x1] = a1\n 61908: u8 [a0] = a2\n 61910: a1 = a3 >> 0x38\n 61913: u8 [a0 + 0x1f] = a1\n 61916: a1 = a3 >> 0x30\n 61919: u8 [a0 + 0x1e] = a1\n 61922: a1 = a3 >> 0x28\n 61925: u8 [a0 + 0x1d] = a1\n 61928: a1 = a3 >> 0x20\n 61931: u8 [a0 + 0x1c] = a1\n 61934: a1 = a3 >> 0x18\n 61937: u8 [a0 + 0x1b] = a1\n 61940: a1 = a3 >> 0x10\n 61943: u8 [a0 + 0x1a] = a1\n 61946: a1 = a3 >> 0x8\n 61949: u8 [a0 + 0x19] = a1\n 61952: a0 = sp + 0xffffffffffffffe0\n 61955: a0 = a0 & 0xffffffffffffffe0\n 61958: u64 [s1 + 0x198] = a0\n 61962: sp = a0\n 61964: u64 [a0 + 24] = 0\n 61967: u64 [a0 + 16] = 0\n 61970: u64 [a0 + 8] = 0\n 61973: u64 [a0 + 0] = 0\n 61975: i32 a0 = a0 + 0\n 61977: ecalli 17 // 'value_transferred'\n 61979: fallthrough\n      : @761 (gas: 24)\n 61980: a0 = u64 [s1 + 0x198]\n 61984: t0 = u64 [a0 + 0x18]\n 61987: t1 = u64 [a0]\n 61989: a2 = u64 [a0 + 0x8]\n 61992: a0 = u64 [a0 + 0x10]\n 61995: a1 = 0xa\n 61998: a3 = t1 mulhu a1\n 62001: a4 = a2 * a1\n 62004: a3 = a3 + a4\n 62007: u64 [s1 + 0x148] = a3\n 62011: a3 = a3 <u a4\n 62014: a4 = a2 mulhu a1\n 62017: a3 = a3 + a4\n 62020: a4 = a0 * a1\n 62023: ra = a3 + a4\n 62026: a3 = ra <u a3\n 62029: a5 = t0 * a1\n 62032: a4 = a0 mulhu a1\n 62035: a5 = a5 + a4\n 62038: a2 = a2 | t0\n 62041: a0 = t1 | a0\n 62044: a0 = a0 | a2\n 62047: t2 = a5 + a3\n 62050: jump @764 if a0 == 0\n      : @762 (gas: 7)\n 62053: a3 = 0 if t2 != 0\n 62055: a0 = a5 <u a4\n 62058: a2 = t0 mulhu a1\n 62061: a2 = a2 >u 0\n 62063: a0 = a0 | a2\n 62066: a0 = a0 | a3\n 62069: jump @764 if a0 == 0\n      : @763 (gas: 1)\n 62072: jump @812\n      : @764 (gas: 55)\n 62075: t1 = t1 * 0xa\n 62078: a0 = t1 | ra\n 62081: t0 = u64 [s1 + 0x148]\n 62085: a1 = t0 | t2\n 62088: a0 = a0 | a1\n 62091: a0 = a0 <u 0x1\n 62094: u64 [s1 + 0x198] = a0\n 62098: a1 = clz ra\n 62100: a1 = a1 + 0x40\n 62103: a2 = clz t2\n 62105: a2 = a1 if t2 == 0\n 62108: a1 = clz t1\n 62110: a1 = a1 + 0x40\n 62113: a3 = clz t0\n 62115: a3 = a1 if t0 == 0\n 62118: a1 = a3 + 0x80\n 62122: a4 = ra | t2\n 62125: a2 = a1 if a4 == 0\n 62128: a1 = a1 <u a3\n 62131: a1 = 0 if a4 != 0\n 62133: a5 = a1 >u 0\n 62135: a3 = a2 <u 0xfa\n 62139: a0 = a3 ^ 0x1\n 62142: a5 = a0 if a1 == 0\n 62145: a3 = a5 <u 0x1\n 62148: a4 = a3 + 0xffffffffffffffff\n 62151: a3 = -a5\n 62153: a1 = -a1\n 62155: a1 = a1 - a0\n 62158: a0 = 0xf9 - a2\n 62162: u64 [s1 + 0x188] = a3\n 62166: a3 = a3 >u 0\n 62168: a2 = a4 >u 0\n 62170: u64 [s1 + 0x190] = a4\n 62174: a2 = a3 if a4 == 0\n 62177: a3 = a1 >u 0\n 62179: u64 [s1 + 0x180] = a0\n 62183: a4 = a0 <u 0x100\n 62187: a4 = a4 ^ 0x1\n 62190: a4 = a3 if a1 != 0\n 62193: a4 = a2 if a5 != 0\n 62196: a0 = u64 [s1 + 0x198]\n 62200: a0 = a0 | a4\n 62203: u64 [s1 + 0x140] = t2\n 62207: a2 = t2\n 62209: t2 = t0\n 62211: a2 = 0 if a0 != 0\n 62213: u64 [s1 + 0x160] = a2\n 62217: a4 = ra\n 62219: a4 = 0 if a0 != 0\n 62221: a3 = t0\n 62223: a3 = 0 if a0 != 0\n 62225: a5 = t1\n 62227: a5 = 0 if a0 != 0\n 62229: jump @772 if a0 != 0\n      : @765 (gas: 9)\n 62233: t0 = ra\n 62235: ra = u64 [s1 + 0x180]\n 62239: a0 = ra ^ 0xff\n 62243: a2 = u64 [s1 + 0x188]\n 62247: a0 = a0 | a2\n 62250: a2 = u64 [s1 + 0x190]\n 62254: a2 = a2 | a1\n 62257: a0 = a0 | a2\n 62260: jump @772 if a0 == 0\n      : @766 (gas: 259)\n 62264: a2 = ra + 0x1\n 62267: u64 [s1 + 0x198] = a2\n 62271: a0 = a2 <u 0x1\n 62274: a0 = a0 + a1\n 62277: u64 [s1 + 0x168] = a0\n 62281: a0 = a0 | a2\n 62284: a0 = a0 <u 0x1\n 62287: a1 = t0\n 62289: a2 = u64 [s1 + 0x188]\n 62293: a0 = a0 + a2\n 62296: u64 [s1 + 0x158] = a0\n 62300: a0 = a0 <u a2\n 62303: a2 = u64 [s1 + 0x190]\n 62307: a0 = a0 + a2\n 62310: u64 [s1 + 0x160] = a0\n 62314: u8 [s1 + 0x300] = t1\n 62318: u8 [s1 + 767] = 0\n 62322: u8 [s1 + 766] = 0\n 62326: u8 [s1 + 765] = 0\n 62330: u8 [s1 + 764] = 0\n 62334: u8 [s1 + 763] = 0\n 62338: u8 [s1 + 762] = 0\n 62342: u8 [s1 + 761] = 0\n 62346: u8 [s1 + 760] = 0\n 62350: u8 [s1 + 759] = 0\n 62354: u8 [s1 + 758] = 0\n 62358: u8 [s1 + 757] = 0\n 62362: u8 [s1 + 756] = 0\n 62366: u8 [s1 + 755] = 0\n 62370: u8 [s1 + 754] = 0\n 62374: u8 [s1 + 753] = 0\n 62378: u8 [s1 + 752] = 0\n 62382: u8 [s1 + 751] = 0\n 62386: u8 [s1 + 750] = 0\n 62390: u8 [s1 + 749] = 0\n 62394: u8 [s1 + 748] = 0\n 62398: u8 [s1 + 747] = 0\n 62402: u8 [s1 + 746] = 0\n 62406: u8 [s1 + 745] = 0\n 62410: u8 [s1 + 744] = 0\n 62414: u8 [s1 + 743] = 0\n 62418: u8 [s1 + 742] = 0\n 62422: u8 [s1 + 741] = 0\n 62426: u8 [s1 + 740] = 0\n 62430: u8 [s1 + 739] = 0\n 62434: u8 [s1 + 738] = 0\n 62438: u8 [s1 + 737] = 0\n 62442: u8 [s1 + 736] = 0\n 62446: u8 [s1 + 0x308] = t2\n 62450: a0 = t1 >> 0x38\n 62453: u64 [s1 + 0x130] = a0\n 62457: u8 [s1 + 0x307] = a0\n 62461: a0 = t1 >> 0x30\n 62464: u64 [s1 + 0x128] = a0\n 62468: u8 [s1 + 0x306] = a0\n 62472: a0 = t1 >> 0x28\n 62475: u64 [s1 + 0x110] = a0\n 62479: u8 [s1 + 0x305] = a0\n 62483: i32 t0 = 0xff - ra\n 62487: a0 = t0 << 0x38\n 62490: a0 = a0 >> 0x3b\n 62493: a3 = s1 + 0x300\n 62497: a3 = a3 - a0\n 62500: a0 = t1 >> 0x20\n 62503: u64 [s1 + 0xb0] = a0\n 62507: u8 [s1 + 0x304] = a0\n 62511: a0 = t1 >> 0x18\n 62514: u64 [s1 + 0xa8] = a0\n 62518: u8 [s1 + 0x303] = a0\n 62522: a0 = t1 >> 0x10\n 62525: u64 [s1 + 0xa0] = a0\n 62529: u8 [s1 + 0x302] = a0\n 62533: a0 = t1 >> 0x8\n 62536: u64 [s1 + 0x98] = a0\n 62540: u8 [s1 + 0x301] = a0\n 62544: u8 [s1 + 0x310] = a1\n 62548: a0 = t2 >> 0x38\n 62551: u64 [s1 + 0x90] = a0\n 62555: u8 [s1 + 0x30f] = a0\n 62559: a0 = t2 >> 0x30\n 62562: u64 [s1 + 0x88] = a0\n 62566: u8 [s1 + 0x30e] = a0\n 62570: a0 = t2 >> 0x28\n 62573: u64 [s1 + 0x80] = a0\n 62577: u8 [s1 + 0x30d] = a0\n 62581: a0 = t2 >> 0x20\n 62584: u64 [s1 + 0x78] = a0\n 62587: u8 [s1 + 0x30c] = a0\n 62591: a0 = t2 >> 0x18\n 62594: u64 [s1 + 0x70] = a0\n 62597: u8 [s1 + 0x30b] = a0\n 62601: a0 = t2 >> 0x10\n 62604: u64 [s1 + 0x68] = a0\n 62607: u8 [s1 + 0x30a] = a0\n 62611: a0 = t2 >> 0x8\n 62614: u64 [s1 + 0x60] = a0\n 62617: u8 [s1 + 0x309] = a0\n 62621: ra = u64 [s1 + 0x140]\n 62625: u8 [s1 + 0x318] = ra\n 62629: a0 = a1 >> 0x38\n 62632: u64 [s1 + 0x58] = a0\n 62635: u8 [s1 + 0x317] = a0\n 62639: a0 = a1 >> 0x30\n 62642: u64 [s1 + 0x50] = a0\n 62645: u8 [s1 + 0x316] = a0\n 62649: a0 = a1 >> 0x28\n 62652: u64 [s1 + 0x48] = a0\n 62655: u8 [s1 + 0x315] = a0\n 62659: a0 = a1 >> 0x20\n 62662: u64 [s1 + 0x40] = a0\n 62665: u8 [s1 + 0x314] = a0\n 62669: a0 = a1 >> 0x18\n 62672: u64 [s1 + 0x38] = a0\n 62675: u8 [s1 + 0x313] = a0\n 62679: a0 = a1 >> 0x10\n 62682: u64 [s1 + 0x30] = a0\n 62685: u8 [s1 + 0x312] = a0\n 62689: u64 [s1 + 0x138] = a1\n 62693: a1 = a1 >> 0x8\n 62696: u64 [s1 + 0x108] = a1\n 62700: u8 [s1 + 0x311] = a1\n 62704: a0 = ra >> 0x38\n 62707: u64 [s1 + 0x100] = a0\n 62711: u8 [s1 + 0x31f] = a0\n 62715: a0 = ra >> 0x30\n 62718: u64 [s1 + 0xf8] = a0\n 62722: u8 [s1 + 0x31e] = a0\n 62726: a0 = ra >> 0x28\n 62729: u64 [s1 + 0xd8] = a0\n 62733: u8 [s1 + 0x31d] = a0\n 62737: a0 = ra >> 0x20\n 62740: u64 [s1 + 0xd0] = a0\n 62744: u8 [s1 + 0x31c] = a0\n 62748: a0 = ra >> 0x18\n 62751: u64 [s1 + 0xc8] = a0\n 62755: u8 [s1 + 0x31b] = a0\n 62759: a0 = ra >> 0x10\n 62762: u64 [s1 + 0xc0] = a0\n 62766: u8 [s1 + 0x31a] = a0\n 62770: a0 = ra >> 0x8\n 62773: u64 [s1 + 0xb8] = a0\n 62777: u8 [s1 + 0x319] = a0\n 62781: a0 = u8 [a3 + 0x19]\n 62784: a1 = u8 [a3 + 0x18]\n 62787: a4 = u8 [a3 + 0x1a]\n 62790: u64 [s1 + 0x28] = t1\n 62793: a5 = u8 [a3 + 0x1b]\n 62796: a0 = a0 << 0x8\n 62799: a0 = a0 | a1\n 62802: a4 = a4 << 0x10\n 62805: a5 = a5 << 0x18\n 62808: a4 = a4 | a5\n 62811: a0 = a0 | a4\n 62814: a1 = u8 [a3 + 0x1d]\n 62817: a4 = u8 [a3 + 0x1c]\n 62820: a5 = u8 [a3 + 0x1e]\n 62823: a2 = u8 [a3 + 0x1f]\n 62826: a1 = a1 << 0x8\n 62829: a1 = a1 | a4\n 62832: a5 = a5 << 0x10\n 62835: a2 = a2 << 0x18\n 62838: a2 = a2 | a5\n 62841: a1 = a1 | a2\n 62844: a1 = a1 << 0x20\n 62847: t1 = a1 | a0\n 62850: a0 = u8 [a3 + 0x11]\n 62853: a2 = u8 [a3 + 0x10]\n 62856: a4 = u8 [a3 + 0x12]\n 62859: a5 = u8 [a3 + 0x13]\n 62862: a0 = a0 << 0x8\n 62865: a0 = a0 | a2\n 62868: a4 = a4 << 0x10\n 62871: a5 = a5 << 0x18\n 62874: a4 = a4 | a5\n 62877: a0 = a0 | a4\n 62880: a2 = u8 [a3 + 0x15]\n 62883: a4 = u8 [a3 + 0x14]\n 62886: a5 = u8 [a3 + 0x16]\n 62889: a1 = u8 [a3 + 0x17]\n 62892: a2 = a2 << 0x8\n 62895: a2 = a2 | a4\n 62898: a5 = a5 << 0x10\n 62901: a1 = a1 << 0x18\n 62904: a1 = a1 | a5\n 62907: a1 = a1 | a2\n 62910: a1 = a1 << 0x20\n 62913: t2 = a1 | a0\n 62916: a2 = t0 & 0x7\n 62919: a0 = t1 << a2\n 62922: a1 = t2 >> 0x1\n 62925: t0 = a2 ^ 0x3f\n 62928: a1 = a1 >> t0\n 62931: a0 = a0 | a1\n 62934: u64 [s1 + 0x190] = a0\n 62938: a0 = u8 [a3 + 0x9]\n 62941: a1 = u8 [a3 + 0x8]\n 62944: a4 = u8 [a3 + 0xa]\n 62947: a5 = u8 [a3 + 0xb]\n 62950: a0 = a0 << 0x8\n 62953: a0 = a0 | a1\n 62956: a4 = a4 << 0x10\n 62959: a5 = a5 << 0x18\n 62962: a4 = a4 | a5\n 62965: t1 = a4 | a0\n 62968: a1 = u8 [a3 + 0xd]\n 62971: a4 = u8 [a3 + 0xc]\n 62974: a5 = u8 [a3 + 0xe]\n 62977: a0 = u8 [a3 + 0xf]\n 62980: a1 = a1 << 0x8\n 62983: a1 = a1 | a4\n 62986: a5 = a5 << 0x10\n 62989: a0 = a0 << 0x18\n 62992: a0 = a0 | a5\n 62995: a0 = a0 | a1\n 62998: a0 = a0 << 0x20\n 63001: t1 = a0 | t1\n 63004: a0 = t1 >> 0x1\n 63007: a1 = a2 ^ 0xffffffffffffffff\n 63010: a0 = a0 >> a1\n 63013: a1 = t2 << a2\n 63016: t2 = u64 [s1 + 0x158]\n 63020: a0 = a0 | a1\n 63023: u64 [s1 + 0x188] = a0\n 63027: a0 = u8 [a3 + 0x1]\n 63030: a1 = u8 [a3]\n 63032: a5 = u8 [a3 + 0x2]\n 63035: a4 = u8 [a3 + 0x3]\n 63038: a0 = a0 << 0x8\n 63041: a0 = a0 | a1\n 63044: a5 = a5 << 0x10\n 63047: a4 = a4 << 0x18\n 63050: a4 = a4 | a5\n 63053: a0 = a0 | a4\n 63056: a1 = u8 [a3 + 0x5]\n 63059: a4 = u8 [a3 + 0x4]\n 63062: a5 = u8 [a3 + 0x6]\n 63065: a3 = u8 [a3 + 0x7]\n 63068: a1 = a1 << 0x8\n 63071: a1 = a1 | a4\n 63074: a4 = u64 [s1 + 0x168]\n 63078: a5 = a5 << 0x10\n 63081: a3 = a3 << 0x18\n 63084: a3 = a3 | a5\n 63087: a5 = u64 [s1 + 0x160]\n 63091: a1 = a1 | a3\n 63094: a1 = a1 << 0x20\n 63097: a0 = a0 | a1\n 63100: a1 = a0 >> 0x1\n 63103: a1 = a1 >> t0\n 63106: t0 = u64 [s1 + 0x198]\n 63110: a3 = t1 << a2\n 63113: a1 = a1 | a3\n 63116: u64 [s1 + 0x178] = a1\n 63120: a1 = a4 | a5\n 63123: a3 = t0 | t2\n 63126: a1 = a1 | a3\n 63129: a0 = a0 << a2\n 63132: u64 [s1 + 0x180] = a0\n 63136: jump @770 if a1 == 0\n      : @767 (gas: 212)\n 63140: u64 [s1 + 368] = 0\n 63144: u64 [s1 + 336] = 0\n 63148: a0 = u64 [s1 + 0x28]\n 63151: u8 [s1 + 0x2a0] = a0\n 63155: a0 = u64 [s1 + 0x148]\n 63159: u8 [s1 + 0x2a8] = a0\n 63163: a0 = u64 [s1 + 0x130]\n 63167: u8 [s1 + 0x2a7] = a0\n 63171: a0 = u64 [s1 + 0x128]\n 63175: u8 [s1 + 0x2a6] = a0\n 63179: a0 = u64 [s1 + 0x110]\n 63183: u8 [s1 + 0x2a5] = a0\n 63187: a0 = u64 [s1 + 0xb0]\n 63191: u8 [s1 + 0x2a4] = a0\n 63195: a0 = u64 [s1 + 0xa8]\n 63199: u8 [s1 + 0x2a3] = a0\n 63203: a0 = u64 [s1 + 0xa0]\n 63207: u8 [s1 + 0x2a2] = a0\n 63211: a0 = u64 [s1 + 0x98]\n 63215: u8 [s1 + 0x2a1] = a0\n 63219: a0 = u64 [s1 + 0x138]\n 63223: u8 [s1 + 0x2b0] = a0\n 63227: a0 = u64 [s1 + 0x90]\n 63231: u8 [s1 + 0x2af] = a0\n 63235: a0 = u64 [s1 + 0x88]\n 63239: u8 [s1 + 0x2ae] = a0\n 63243: a0 = u64 [s1 + 0x80]\n 63247: u8 [s1 + 0x2ad] = a0\n 63251: a0 = u64 [s1 + 0x78]\n 63254: u8 [s1 + 0x2ac] = a0\n 63258: a0 = u64 [s1 + 0x70]\n 63261: u8 [s1 + 0x2ab] = a0\n 63265: a0 = u64 [s1 + 0x68]\n 63268: u8 [s1 + 0x2aa] = a0\n 63272: a0 = u64 [s1 + 0x60]\n 63275: u8 [s1 + 0x2a9] = a0\n 63279: u8 [s1 + 0x2b8] = ra\n 63283: a0 = u64 [s1 + 0x58]\n 63286: u8 [s1 + 0x2b7] = a0\n 63290: a0 = u64 [s1 + 0x50]\n 63293: u8 [s1 + 0x2b6] = a0\n 63297: a0 = u64 [s1 + 0x48]\n 63300: u8 [s1 + 0x2b5] = a0\n 63304: a0 = u64 [s1 + 0x40]\n 63307: u8 [s1 + 0x2b4] = a0\n 63311: a0 = u64 [s1 + 0x38]\n 63314: u8 [s1 + 0x2b3] = a0\n 63318: a0 = u64 [s1 + 0x30]\n 63321: u8 [s1 + 0x2b2] = a0\n 63325: u8 [s1 + 735] = 0\n 63329: u8 [s1 + 734] = 0\n 63333: u8 [s1 + 733] = 0\n 63337: u8 [s1 + 732] = 0\n 63341: u8 [s1 + 731] = 0\n 63345: u8 [s1 + 730] = 0\n 63349: u8 [s1 + 729] = 0\n 63353: u8 [s1 + 728] = 0\n 63357: u8 [s1 + 727] = 0\n 63361: u8 [s1 + 726] = 0\n 63365: u8 [s1 + 725] = 0\n 63369: u8 [s1 + 724] = 0\n 63373: u8 [s1 + 723] = 0\n 63377: u8 [s1 + 722] = 0\n 63381: u8 [s1 + 721] = 0\n 63385: u8 [s1 + 720] = 0\n 63389: u8 [s1 + 719] = 0\n 63393: u8 [s1 + 718] = 0\n 63397: u8 [s1 + 717] = 0\n 63401: u8 [s1 + 716] = 0\n 63405: u8 [s1 + 715] = 0\n 63409: u8 [s1 + 714] = 0\n 63413: u8 [s1 + 713] = 0\n 63417: u8 [s1 + 712] = 0\n 63421: u8 [s1 + 711] = 0\n 63425: u8 [s1 + 710] = 0\n 63429: u8 [s1 + 709] = 0\n 63433: u8 [s1 + 708] = 0\n 63437: u8 [s1 + 707] = 0\n 63441: u8 [s1 + 706] = 0\n 63445: u8 [s1 + 705] = 0\n 63449: u8 [s1 + 704] = 0\n 63453: a0 = u64 [s1 + 0x108]\n 63457: u8 [s1 + 0x2b1] = a0\n 63461: a0 = u64 [s1 + 0x100]\n 63465: u8 [s1 + 0x2bf] = a0\n 63469: a0 = u64 [s1 + 0xf8]\n 63473: u8 [s1 + 0x2be] = a0\n 63477: a0 = u64 [s1 + 0xd8]\n 63481: u8 [s1 + 0x2bd] = a0\n 63485: a0 = u64 [s1 + 0xd0]\n 63489: u8 [s1 + 0x2bc] = a0\n 63493: a0 = u64 [s1 + 0xc8]\n 63497: u8 [s1 + 0x2bb] = a0\n 63501: a0 = u64 [s1 + 0xc0]\n 63505: u8 [s1 + 0x2ba] = a0\n 63509: a0 = u64 [s1 + 0xb8]\n 63513: u8 [s1 + 0x2b9] = a0\n 63517: a0 = t0 << 0x38\n 63520: a0 = a0 >> 0x3b\n 63523: a2 = s1 + 0x2a0\n 63527: a2 = a2 + a0\n 63530: a0 = u8 [a2 + 0x11]\n 63533: a1 = u8 [a2 + 0x10]\n 63536: a3 = u8 [a2 + 0x12]\n 63539: a4 = u8 [a2 + 0x13]\n 63542: a0 = a0 << 0x8\n 63545: a0 = a0 | a1\n 63548: a3 = a3 << 0x10\n 63551: a4 = a4 << 0x18\n 63554: a3 = a3 | a4\n 63557: a0 = a0 | a3\n 63560: a1 = u8 [a2 + 0x15]\n 63563: a3 = u8 [a2 + 0x14]\n 63566: a4 = u8 [a2 + 0x16]\n 63569: a5 = u8 [a2 + 0x17]\n 63572: a1 = a1 << 0x8\n 63575: a1 = a1 | a3\n 63578: a4 = a4 << 0x10\n 63581: a5 = a5 << 0x18\n 63584: a4 = a4 | a5\n 63587: a1 = a1 | a4\n 63590: a1 = a1 << 0x20\n 63593: t2 = a1 | a0\n 63596: t0 = t0 & 0x7\n 63599: a0 = u8 [a2 + 0x19]\n 63602: a1 = u8 [a2 + 0x18]\n 63605: a3 = u8 [a2 + 0x1a]\n 63608: a5 = u8 [a2 + 0x1b]\n 63611: a0 = a0 << 0x8\n 63614: a0 = a0 | a1\n 63617: a3 = a3 << 0x10\n 63620: a5 = a5 << 0x18\n 63623: a1 = u8 [a2 + 0x1d]\n 63626: a3 = a3 | a5\n 63629: a0 = a0 | a3\n 63632: a3 = u8 [a2 + 0x1c]\n 63635: a1 = a1 << 0x8\n 63638: a5 = u8 [a2 + 0x1e]\n 63641: a4 = u8 [a2 + 0x1f]\n 63644: a1 = a1 | a3\n 63647: a3 = t2 >> t0\n 63650: a5 = a5 << 0x10\n 63653: a4 = a4 << 0x18\n 63656: a4 = a4 | a5\n 63659: a1 = a1 | a4\n 63662: a1 = a1 << 0x20\n 63665: a0 = a0 | a1\n 63668: u64 [s1 + 0x140] = a0\n 63672: a0 = a0 << 0x1\n 63675: ra = t0 ^ 0x3f\n 63678: a0 = a0 << ra\n 63681: a0 = a0 | a3\n 63684: u64 [s1 + 0x148] = a0\n 63688: a0 = u8 [a2 + 0x9]\n 63691: a1 = u8 [a2 + 0x8]\n 63694: a3 = u8 [a2 + 0xa]\n 63697: a4 = u8 [a2 + 0xb]\n 63700: a0 = a0 << 0x8\n 63703: a0 = a0 | a1\n 63706: a3 = a3 << 0x10\n 63709: a4 = a4 << 0x18\n 63712: a3 = a3 | a4\n 63715: a5 = a3 | a0\n 63718: a1 = u8 [a2 + 0xd]\n 63721: a3 = u8 [a2 + 0xc]\n 63724: a4 = u8 [a2 + 0xe]\n 63727: a0 = u8 [a2 + 0xf]\n 63730: a1 = a1 << 0x8\n 63733: a1 = a1 | a3\n 63736: a4 = a4 << 0x10\n 63739: a0 = a0 << 0x18\n 63742: a0 = a0 | a4\n 63745: a0 = a0 | a1\n 63748: a0 = a0 << 0x20\n 63751: a0 = a0 | a5\n 63754: t2 = t2 << 0x1\n 63757: a1 = t0 ^ 0xffffffffffffffff\n 63760: a1 = t2 << a1\n 63763: a3 = a0 >> t0\n 63766: t1 = a3 | a1\n 63769: a1 = u8 [a2 + 0x1]\n 63772: a3 = u8 [a2]\n 63774: a4 = u8 [a2 + 0x2]\n 63777: a5 = u8 [a2 + 0x3]\n 63780: a1 = a1 << 0x8\n 63783: a1 = a1 | a3\n 63786: a4 = a4 << 0x10\n 63789: a5 = a5 << 0x18\n 63792: a4 = a4 | a5\n 63795: a1 = a1 | a4\n 63798: a3 = u8 [a2 + 0x5]\n 63801: a4 = u8 [a2 + 0x4]\n 63804: a5 = u8 [a2 + 0x6]\n 63807: a2 = u8 [a2 + 0x7]\n 63810: a3 = a3 << 0x8\n 63813: a3 = a3 | a4\n 63816: a5 = a5 << 0x10\n 63819: a2 = a2 << 0x18\n 63822: a2 = a2 | a5\n 63825: a2 = a2 | a3\n 63828: a2 = a2 << 0x20\n 63831: a1 = a1 | a2\n 63834: a0 = a0 << 0x1\n 63837: a0 = a0 << ra\n 63840: a5 = a1 >> t0\n 63843: t2 = a5 | a0\n 63846: a0 = u64 [s1 + 0x140]\n 63850: t0 = a0 >> t0\n 63853: u64 [s1 + 304] = 0x63\n 63858: u64 [s1 + 296] = 0\n 63862: ra = t1\n 63864: fallthrough\n      : @768 (gas: 88)\n 63865: u64 [s1 + 312] = 0\n 63869: a5 = t2\n 63871: a0 = t2 >> 0x3f\n 63874: a1 = ra << 0x1\n 63877: t2 = u64 [s1 + 0x190]\n 63881: t1 = t0\n 63883: t0 = a1 | a0\n 63886: a5 = a5 << 0x1\n 63889: a0 = t2 >> 0x3f\n 63892: a2 = ra\n 63894: ra = a5 | a0\n 63897: a1 = u64 [s1 + 0x128]\n 63901: a3 = a1 ^ t0\n 63904: a4 = a1 <u t0\n 63907: a0 = u64 [s1 + 0x130]\n 63911: a5 = a0 <u ra\n 63914: a5 = a4 if a3 != 0\n 63917: a0 = t1 << 0x1\n 63920: t1 = u64 [s1 + 0x148]\n 63924: a3 = t1 >> 0x3f\n 63927: a0 = a0 | a3\n 63930: u64 [s1 + 0x140] = a0\n 63934: a4 = a2 >> 0x3f\n 63937: t1 = t1 << 0x1\n 63940: a4 = t1 | a4\n 63943: a2 = t2 << 0x1\n 63946: a0 = u64 [s1 + 0x188]\n 63950: a3 = a0 >> 0x3f\n 63953: t1 = a2 | a3\n 63956: a3 = a0 << 0x1\n 63959: a0 = u64 [s1 + 0x178]\n 63963: a2 = a0 >> 0x3f\n 63966: t2 = a3 | a2\n 63969: a3 = a0 << 0x1\n 63972: a0 = u64 [s1 + 0x180]\n 63976: a2 = a0 >> 0x3f\n 63979: a2 = a2 | a3\n 63982: a3 = a0 << 0x1\n 63985: a0 = u64 [s1 + 0x170]\n 63989: a0 = a0 | a3\n 63992: u64 [s1 + 0x180] = a0\n 63996: a0 = u64 [s1 + 0x150]\n 64000: a2 = a2 | a0\n 64003: u64 [s1 + 0x178] = a2\n 64007: a2 = a0 | t2\n 64010: u64 [s1 + 0x188] = a2\n 64014: a0 = a0 | t1\n 64017: u64 [s1 + 0x190] = a0\n 64021: a2 = a1 - a4\n 64024: a2 = a2 <u a5\n 64027: a3 = a1 <u a4\n 64030: t1 = u64 [s1 + 0x140]\n 64034: a5 = a1 - t1\n 64037: a5 = a5 - a3\n 64040: a5 = a5 - a2\n 64043: a2 = a5 >>a 0x3f\n 64046: a3 = a2 & 0x64\n 64049: t2 = ra - a3\n 64052: a0 = ra <u a3\n 64055: ra = t0 - a0\n 64058: a0 = 0 if t0 != 0\n 64060: a1 = a4 - a0\n 64063: u64 [s1 + 0x148] = a1\n 64067: a0 = a4 <u a0\n 64070: t0 = t1 - a0\n 64073: a4 = u64 [s1 + 0x198]\n 64077: a5 = u64 [s1 + 0x168]\n 64081: a0 = a4 | a5\n 64084: a0 = a0 <u 0x1\n 64087: a3 = u64 [s1 + 0x158]\n 64091: a1 = a3 <u a0\n 64094: a3 = a3 - a0\n 64097: a0 = a4 <u 0x1\n 64100: a5 = a5 - a0\n 64103: a0 = u64 [s1 + 0x160]\n 64107: a0 = a0 - a1\n 64110: a4 = a4 + 0xffffffffffffffff\n 64113: u64 [s1 + 0x168] = a5\n 64117: u64 [s1 + 0x160] = a0\n 64121: a0 = a0 | a5\n 64124: u64 [s1 + 0x198] = a4\n 64128: a1 = a4 | a3\n 64131: a0 = a0 | a1\n 64134: a2 = a2 & 0x1\n 64137: u64 [s1 + 0x170] = a2\n 64141: u64 [s1 + 0x158] = a3\n 64145: u64 [s1 + 336] = 0\n 64149: jump @768 if a0 != 0\n      : @769 (gas: 1)\n 64153: jump @771\n      : @770 (gas: 3)\n 64155: u64 [s1 + 368] = 0\n 64159: u64 [s1 + 312] = 0\n 64163: fallthrough\n      : @771 (gas: 22)\n 64164: a2 = u64 [s1 + 0x188]\n 64168: a0 = a2 >> 0x3f\n 64171: a1 = u64 [s1 + 0x190]\n 64175: a1 = a1 << 0x1\n 64178: t0 = a1 | a0\n 64181: a3 = u64 [s1 + 0x178]\n 64185: a1 = a3 >> 0x3f\n 64188: a2 = a2 << 0x1\n 64191: a1 = a1 | a2\n 64194: a4 = u64 [s1 + 0x180]\n 64198: a2 = a4 >> 0x3f\n 64201: a3 = a3 << 0x1\n 64204: a4 = a4 << 0x1\n 64207: a5 = u64 [s1 + 0x170]\n 64211: a5 = a5 | a4\n 64214: a0 = u64 [s1 + 0x138]\n 64218: a2 = a2 | a0\n 64221: a3 = a3 | a2\n 64224: a4 = a0 | a1\n 64227: a0 = a0 | t0\n 64230: u64 [s1 + 0x160] = a0\n 64234: fallthrough\n      : @772 (gas: 16)\n 64235: u64 [s1 + 0x100] = a4\n 64239: u64 [s1 + 0x108] = a3\n 64243: u64 [s1 + 0x110] = a5\n 64247: i32 a0 = s1 + 0x500\n 64251: ecalli 10 // 'now'\n 64253: a0 = u64 [s1 + 0x518]\n 64257: u64 [s1 + 0x148] = a0\n 64261: a0 = u64 [s1 + 0x510]\n 64265: u64 [s1 + 0x150] = a0\n 64269: a0 = u64 [s1 + 0x508]\n 64273: u64 [s1 + 0x158] = a0\n 64277: a0 = u64 [s1 + 0x500]\n 64281: u64 [s1 + 0x180] = a0\n 64285: i32 a0 = s1 + 0x520\n 64289: ecalli 10 // 'now'\n 64291: fallthrough\n      : @773 (gas: 20)\n 64292: a4 = u64 [s1 + 0x538]\n 64296: a5 = u64 [s1 + 0x530]\n 64300: a3 = u64 [s1 + 0x528]\n 64304: a1 = u64 [s1 + 0x520]\n 64308: t0 = a4 + 0x1\n 64311: a0 = a4 <u 0xffffffffffffffff\n 64314: a2 = a5 <u 0xffffffffffffffff\n 64317: a2 = a0 if t0 != 0\n 64320: u64 [s1 + 0x128] = a1\n 64324: a0 = a1 <u 0xfffffffffffff1f0\n 64328: a1 = a3 + 0x1\n 64331: u64 [s1 + 0x130] = a3\n 64335: a3 = a3 <u 0xffffffffffffffff\n 64338: a3 = a0 if a1 == 0\n 64341: u64 [s1 + 0x140] = a4\n 64345: u64 [s1 + 0x138] = a5\n 64349: a0 = a5 & a4\n 64352: a0 = a0 + 0x1\n 64355: a3 = a2 if a0 != 0\n 64358: jump @775 if a3 != 0\n      : @774 (gas: 1)\n 64361: jump @810\n      : @775 (gas: 23)\n 64364: i32 a0 = s1 + 0x540\n 64368: ecalli 5 // 'caller'\n 64370: a0 = i32 [s1 + 0x550]\n 64374: u64 [s1 + 0xf8] = a0\n 64378: a0 = u64 [s1 + 0x540]\n 64382: u64 [s1 + 0xd8] = a0\n 64386: a0 = u64 [s1 + 0x548]\n 64390: u64 [s1 + 0xd0] = a0\n 64394: i32 a0 = s1 + 0x560\n 64398: ecalli 5 // 'caller'\n 64400: a0 = u32 [s1 + 0x570]\n 64404: u64 [s1 + 0xc8] = a0\n 64408: a0 = u64 [s1 + 0x568]\n 64412: u64 [s1 + 0xc0] = a0\n 64416: a0 = u64 [s1 + 0x560]\n 64420: u64 [s1 + 0x168] = a0\n 64424: u64 [s1 + 632] = 0\n 64428: u64 [s1 + 624] = 0\n 64432: u64 [s1 + 608] = 0xe0\n 64438: a0 = s1 + 0x280\n 64442: a1 = s1 + 0x260\n 64446: u64 [s1 + 616] = 0\n 64450: ra = 720, jump @327\n      : @776 [@dyn 360] (gas: 16)\n 64457: a2 = u64 [s1 + 0x298]\n 64461: a3 = u64 [s1 + 0x290]\n 64465: a0 = u64 [s1 + 0x288]\n 64469: a1 = u64 [s1 + 0x280]\n 64473: u64 [s1 + 0x190] = a0\n 64477: u64 [s1 + 0x170] = a2\n 64481: a0 = a0 | a2\n 64484: u64 [s1 + 0x198] = a1\n 64488: a1 = a1 | a3\n 64491: a1 = a1 | a0\n 64494: a1 = a1 >> 0x20\n 64497: u64 [s1 + 0x178] = a3\n 64501: a0 = a0 | a3\n 64504: a0 = a0 << 0x20\n 64507: a0 = a0 | a1\n 64510: jump @806 if a0 != 0\n      : @777 (gas: 4)\n 64514: a0 = i32 [s1 + 0x198]\n 64518: a1 = 0x20\n 64521: u64 [s1 + 0x188] = a0\n 64525: ra = 722, jump @0\n      : @778 [@dyn 361] (gas: 81)\n 64532: a1 = u64 [s1 + 0x148]\n 64536: a1 = reverse a1\n 64538: a2 = u64 [s1 + 0x150]\n 64542: a2 = reverse a2\n 64544: a3 = u64 [s1 + 0x158]\n 64548: a3 = reverse a3\n 64550: a4 = u64 [s1 + 0x180]\n 64554: a4 = reverse a4\n 64556: a5 = a4 >> 0x38\n 64559: u8 [a0 + 0x1f] = a5\n 64562: a5 = a4 >> 0x30\n 64565: u8 [a0 + 0x1e] = a5\n 64568: a5 = a4 >> 0x28\n 64571: u8 [a0 + 0x1d] = a5\n 64574: a5 = a4 >> 0x20\n 64577: u8 [a0 + 0x1c] = a5\n 64580: a5 = a4 >> 0x18\n 64583: u8 [a0 + 0x1b] = a5\n 64586: a5 = a4 >> 0x10\n 64589: u8 [a0 + 0x1a] = a5\n 64592: a5 = a4 >> 0x8\n 64595: u8 [a0 + 0x19] = a5\n 64598: u8 [a0 + 0x18] = a4\n 64601: u8 [a0 + 0x10] = a3\n 64604: a4 = a3 >> 0x38\n 64607: u8 [a0 + 0x17] = a4\n 64610: a4 = a3 >> 0x30\n 64613: u8 [a0 + 0x16] = a4\n 64616: a4 = a3 >> 0x28\n 64619: u8 [a0 + 0x15] = a4\n 64622: a4 = a3 >> 0x20\n 64625: u8 [a0 + 0x14] = a4\n 64628: a4 = a3 >> 0x18\n 64631: u8 [a0 + 0x13] = a4\n 64634: a4 = a3 >> 0x10\n 64637: u8 [a0 + 0x12] = a4\n 64640: a3 = a3 >> 0x8\n 64643: u8 [a0 + 0x11] = a3\n 64646: u8 [a0 + 0x8] = a2\n 64649: a3 = a2 >> 0x38\n 64652: u8 [a0 + 0xf] = a3\n 64655: a3 = a2 >> 0x30\n 64658: u8 [a0 + 0xe] = a3\n 64661: a3 = a2 >> 0x28\n 64664: u8 [a0 + 0xd] = a3\n 64667: a3 = a2 >> 0x20\n 64670: u8 [a0 + 0xc] = a3\n 64673: a3 = a2 >> 0x18\n 64676: u8 [a0 + 0xb] = a3\n 64679: a3 = a2 >> 0x10\n 64682: u8 [a0 + 0xa] = a3\n 64685: a2 = a2 >> 0x8\n 64688: u8 [a0 + 0x9] = a2\n 64691: u8 [a0] = a1\n 64693: a2 = a1 >> 0x38\n 64696: u8 [a0 + 0x7] = a2\n 64699: a2 = a1 >> 0x30\n 64702: u8 [a0 + 0x6] = a2\n 64705: a2 = a1 >> 0x28\n 64708: u8 [a0 + 0x5] = a2\n 64711: a2 = a1 >> 0x20\n 64714: u8 [a0 + 0x4] = a2\n 64717: a2 = a1 >> 0x18\n 64720: u8 [a0 + 0x3] = a2\n 64723: a2 = a1 >> 0x10\n 64726: u8 [a0 + 0x2] = a2\n 64729: a1 = a1 >> 0x8\n 64732: a2 = u64 [s1 + 0x170]\n 64736: a4 = u64 [s1 + 0x178]\n 64740: a4 = a4 | a2\n 64743: a2 = 0x100000000\n 64753: u64 [s1 + 0x158] = a2\n 64757: a2 = 0xffffffe0\n 64767: a3 = u64 [s1 + 0x198]\n 64771: a2 = a3 <u a2\n 64774: a3 = u64 [s1 + 0x190]\n 64778: a2 = 0 if a3 != 0\n 64780: u64 [s1 + 0x180] = a4\n 64784: a2 = 0 if a4 != 0\n 64786: u8 [a0 + 0x1] = a1\n 64789: jump @806 if a2 == 0\n      : @779 (gas: 21)\n 64793: a1 = u64 [s1 + 0x128]\n 64797: a0 = a1 + 0x7ff\n 64801: a0 = a0 + 0x611\n 64805: u64 [s1 + 0x150] = a0\n 64809: a0 = a0 <u a1\n 64812: a1 = u64 [s1 + 0x130]\n 64816: a2 = a1 + a0\n 64819: u64 [s1 + 0x148] = a2\n 64823: a1 = a2 <u a1\n 64826: a1 = a0 if a0 == 0\n 64829: a0 = u64 [s1 + 0x138]\n 64833: a1 = a1 + a0\n 64836: u64 [s1 + 0x130] = a1\n 64840: a0 = a1 <u a0\n 64843: a1 = u64 [s1 + 0x140]\n 64847: a0 = a0 + a1\n 64850: u64 [s1 + 0x140] = a0\n 64854: a0 = u64 [s1 + 0x188]\n 64858: i32 a0 = a0 + 0x20\n 64861: a1 = 0x20\n 64864: ra = 724, jump @0\n      : @780 [@dyn 362] (gas: 77)\n 64871: a1 = u64 [s1 + 0x140]\n 64875: a1 = reverse a1\n 64877: a2 = u64 [s1 + 0x130]\n 64881: a2 = reverse a2\n 64883: a3 = u64 [s1 + 0x148]\n 64887: a3 = reverse a3\n 64889: a4 = u64 [s1 + 0x150]\n 64893: a4 = reverse a4\n 64895: a5 = a4 >> 0x38\n 64898: u8 [a0 + 0x1f] = a5\n 64901: a5 = a4 >> 0x30\n 64904: u8 [a0 + 0x1e] = a5\n 64907: a5 = a4 >> 0x28\n 64910: u8 [a0 + 0x1d] = a5\n 64913: a5 = a4 >> 0x20\n 64916: u8 [a0 + 0x1c] = a5\n 64919: a5 = a4 >> 0x18\n 64922: u8 [a0 + 0x1b] = a5\n 64925: a5 = a4 >> 0x10\n 64928: u8 [a0 + 0x1a] = a5\n 64931: a5 = a4 >> 0x8\n 64934: u8 [a0 + 0x19] = a5\n 64937: u8 [a0 + 0x18] = a4\n 64940: u8 [a0 + 0x10] = a3\n 64943: a4 = a3 >> 0x38\n 64946: u8 [a0 + 0x17] = a4\n 64949: a4 = a3 >> 0x30\n 64952: u8 [a0 + 0x16] = a4\n 64955: a4 = a3 >> 0x28\n 64958: u8 [a0 + 0x15] = a4\n 64961: a4 = a3 >> 0x20\n 64964: u8 [a0 + 0x14] = a4\n 64967: a4 = a3 >> 0x18\n 64970: u8 [a0 + 0x13] = a4\n 64973: a4 = a3 >> 0x10\n 64976: u8 [a0 + 0x12] = a4\n 64979: a3 = a3 >> 0x8\n 64982: u8 [a0 + 0x11] = a3\n 64985: u8 [a0 + 0x8] = a2\n 64988: a3 = a2 >> 0x38\n 64991: u8 [a0 + 0xf] = a3\n 64994: a3 = a2 >> 0x30\n 64997: u8 [a0 + 0xe] = a3\n 65000: a3 = a2 >> 0x28\n 65003: u8 [a0 + 0xd] = a3\n 65006: a3 = a2 >> 0x20\n 65009: u8 [a0 + 0xc] = a3\n 65012: a3 = a2 >> 0x18\n 65015: u8 [a0 + 0xb] = a3\n 65018: a3 = a2 >> 0x10\n 65021: u8 [a0 + 0xa] = a3\n 65024: a2 = a2 >> 0x8\n 65027: u8 [a0 + 0x9] = a2\n 65030: u8 [a0] = a1\n 65032: a2 = a1 >> 0x38\n 65035: u8 [a0 + 0x7] = a2\n 65038: a2 = a1 >> 0x30\n 65041: u8 [a0 + 0x6] = a2\n 65044: a2 = a1 >> 0x28\n 65047: u8 [a0 + 0x5] = a2\n 65050: a2 = a1 >> 0x20\n 65053: u8 [a0 + 0x4] = a2\n 65056: a2 = a1 >> 0x18\n 65059: u8 [a0 + 0x3] = a2\n 65062: a2 = a1 >> 0x10\n 65065: u8 [a0 + 0x2] = a2\n 65068: a1 = a1 >> 0x8\n 65071: a2 = u64 [s1 + 0x158]\n 65075: a2 = a2 + 0xffffffffffffffc0\n 65078: a3 = u64 [s1 + 0x198]\n 65082: a2 = a3 <u a2\n 65085: a3 = u64 [s1 + 0x190]\n 65089: a2 = 0 if a3 != 0\n 65091: a3 = u64 [s1 + 0x180]\n 65095: a2 = 0 if a3 != 0\n 65097: u8 [a0 + 0x1] = a1\n 65100: jump @806 if a2 == 0\n      : @781 (gas: 4)\n 65104: a0 = u64 [s1 + 0x188]\n 65108: i32 a0 = a0 + 0x40\n 65111: a1 = 0x20\n 65114: ra = 726, jump @0\n      : @782 [@dyn 363] (gas: 42)\n 65121: u8 [a0 + 31] = 0\n 65124: u8 [a0 + 30] = 0\n 65127: u8 [a0 + 29] = 0\n 65130: u8 [a0 + 28] = 0\n 65133: u8 [a0 + 27] = 0\n 65136: u8 [a0 + 26] = 0\n 65139: u8 [a0 + 25] = 0\n 65142: u8 [a0 + 24] = 0\n 65145: u8 [a0 + 23] = 0\n 65148: u8 [a0 + 22] = 0\n 65151: u8 [a0 + 21] = 0\n 65154: u8 [a0 + 20] = 0\n 65157: u8 [a0 + 19] = 0\n 65160: u8 [a0 + 18] = 0\n 65163: u8 [a0 + 17] = 0\n 65166: u8 [a0 + 16] = 0\n 65169: u8 [a0 + 15] = 0\n 65172: u8 [a0 + 14] = 0\n 65175: u8 [a0 + 13] = 0\n 65178: u8 [a0 + 12] = 0\n 65181: u8 [a0 + 11] = 0\n 65184: u8 [a0 + 10] = 0\n 65187: u8 [a0 + 9] = 0\n 65190: u8 [a0 + 8] = 0\n 65193: u8 [a0 + 7] = 0\n 65196: u8 [a0 + 6] = 0\n 65199: u8 [a0 + 5] = 0\n 65202: u8 [a0 + 4] = 0\n 65205: u8 [a0 + 3] = 0\n 65208: u8 [a0 + 2] = 0\n 65211: u8 [a0 + 1] = 0\n 65214: a1 = 0x100000000\n 65224: u64 [s1 + 0x158] = a1\n 65228: a1 = 0xffffffa0\n 65238: a2 = u64 [s1 + 0x198]\n 65242: a1 = a2 <u a1\n 65245: a2 = u64 [s1 + 0x190]\n 65249: a1 = 0 if a2 != 0\n 65251: a2 = u64 [s1 + 0x180]\n 65255: a1 = 0 if a2 != 0\n 65257: u8 [a0 + 0] = 0\n 65259: jump @806 if a1 == 0\n      : @783 (gas: 4)\n 65263: a0 = u64 [s1 + 0x188]\n 65267: i32 a0 = a0 + 0x60\n 65270: a1 = 0x20\n 65273: ra = 728, jump @0\n      : @784 [@dyn 364] (gas: 109)\n 65280: a1 = u64 [s1 + 0x160]\n 65284: a3 = reverse a1\n 65286: a1 = u64 [s1 + 0x100]\n 65290: a4 = reverse a1\n 65292: a1 = u64 [s1 + 0x108]\n 65296: a5 = reverse a1\n 65298: a1 = u64 [s1 + 0x110]\n 65302: a2 = reverse a1\n 65304: a1 = a2 >> 0x38\n 65307: u64 [s1 + 0x150] = a1\n 65311: u8 [a0 + 0x1f] = a1\n 65314: a1 = a2 >> 0x30\n 65317: u64 [s1 + 0x148] = a1\n 65321: u8 [a0 + 0x1e] = a1\n 65324: a1 = a2 >> 0x28\n 65327: u64 [s1 + 0x140] = a1\n 65331: u8 [a0 + 0x1d] = a1\n 65334: a1 = a2 >> 0x20\n 65337: u64 [s1 + 0x138] = a1\n 65341: u8 [a0 + 0x1c] = a1\n 65344: a1 = a2 >> 0x18\n 65347: u64 [s1 + 0x130] = a1\n 65351: u8 [a0 + 0x1b] = a1\n 65354: a1 = a2 >> 0x10\n 65357: u64 [s1 + 0x128] = a1\n 65361: u8 [a0 + 0x1a] = a1\n 65364: a1 = a2 >> 0x8\n 65367: u64 [s1 + 0x160] = a1\n 65371: u8 [a0 + 0x19] = a1\n 65374: u64 [s1 + 0x110] = a2\n 65378: u8 [a0 + 0x18] = a2\n 65381: u8 [a0 + 0x10] = a5\n 65384: a1 = a5 >> 0x38\n 65387: u64 [s1 + 0xb8] = a1\n 65391: u8 [a0 + 0x17] = a1\n 65394: a1 = a5 >> 0x30\n 65397: u64 [s1 + 0xb0] = a1\n 65401: u8 [a0 + 0x16] = a1\n 65404: a1 = a5 >> 0x28\n 65407: u64 [s1 + 0xa8] = a1\n 65411: u8 [a0 + 0x15] = a1\n 65414: a1 = a5 >> 0x20\n 65417: u64 [s1 + 0xa0] = a1\n 65421: u8 [a0 + 0x14] = a1\n 65424: a1 = a5 >> 0x18\n 65427: u64 [s1 + 0x98] = a1\n 65431: u8 [a0 + 0x13] = a1\n 65434: a1 = a5 >> 0x10\n 65437: u64 [s1 + 0x90] = a1\n 65441: u8 [a0 + 0x12] = a1\n 65444: u64 [s1 + 0x100] = a5\n 65448: a5 = a5 >> 0x8\n 65451: u64 [s1 + 0x88] = a5\n 65455: u8 [a0 + 0x11] = a5\n 65458: u8 [a0 + 0x8] = a4\n 65461: a1 = a4 >> 0x38\n 65464: u64 [s1 + 0x80] = a1\n 65468: u8 [a0 + 0xf] = a1\n 65471: a1 = a4 >> 0x30\n 65474: u64 [s1 + 0x78] = a1\n 65477: u8 [a0 + 0xe] = a1\n 65480: a1 = a4 >> 0x28\n 65483: u64 [s1 + 0x70] = a1\n 65486: u8 [a0 + 0xd] = a1\n 65489: a1 = a4 >> 0x20\n 65492: u64 [s1 + 0x68] = a1\n 65495: u8 [a0 + 0xc] = a1\n 65498: a1 = a4 >> 0x18\n 65501: u64 [s1 + 0x60] = a1\n 65504: u8 [a0 + 0xb] = a1\n 65507: a1 = a4 >> 0x10\n 65510: u64 [s1 + 0x58] = a1\n 65513: u8 [a0 + 0xa] = a1\n 65516: u64 [s1 + 0x108] = a4\n 65520: a4 = a4 >> 0x8\n 65523: u64 [s1 + 0x50] = a4\n 65526: u8 [a0 + 0x9] = a4\n 65529: u8 [a0] = a3\n 65531: a1 = a3 >> 0x38\n 65534: u64 [s1 + 0x48] = a1\n 65537: u8 [a0 + 0x7] = a1\n 65540: a1 = a3 >> 0x30\n 65543: u64 [s1 + 0x40] = a1\n 65546: u8 [a0 + 0x6] = a1\n 65549: a1 = a3 >> 0x28\n 65552: u64 [s1 + 0x38] = a1\n 65555: u8 [a0 + 0x5] = a1\n 65558: a1 = a3 >> 0x20\n 65561: u64 [s1 + 0x30] = a1\n 65564: u8 [a0 + 0x4] = a1\n 65567: a1 = a3 >> 0x18\n 65570: u64 [s1 + 0x28] = a1\n 65573: u8 [a0 + 0x3] = a1\n 65576: a1 = a3 >> 0x10\n 65579: u64 [s1 + 0x20] = a1\n 65582: u8 [a0 + 0x2] = a1\n 65585: a1 = u64 [s1 + 0x158]\n 65589: a1 = a1 + 0xffffffffffffff80\n 65592: a2 = u64 [s1 + 0x198]\n 65596: a1 = a2 <u a1\n 65599: a2 = u64 [s1 + 0x190]\n 65603: a1 = 0 if a2 != 0\n 65605: a2 = u64 [s1 + 0x180]\n 65609: a1 = 0 if a2 != 0\n 65611: u64 [s1 + 0x158] = a3\n 65615: a3 = a3 >> 0x8\n 65618: u64 [s1 + 0x18] = a3\n 65621: u8 [a0 + 0x1] = a3\n 65624: jump @806 if a1 == 0\n      : @785 (gas: 4)\n 65628: a0 = u64 [s1 + 0x188]\n 65632: i32 a0 = a0 + 0x80\n 65636: a1 = 0x20\n 65639: ra = 730, jump @0\n      : @786 [@dyn 365] (gas: 74)\n 65646: a1 = u64 [s1 + 0x100]\n 65650: u8 [a0 + 0x10] = a1\n 65653: a1 = u64 [s1 + 0x80]\n 65657: u8 [a0 + 0xf] = a1\n 65660: a1 = u64 [s1 + 0x78]\n 65663: u8 [a0 + 0xe] = a1\n 65666: a1 = u64 [s1 + 0x70]\n 65669: u8 [a0 + 0xd] = a1\n 65672: a1 = u64 [s1 + 0x68]\n 65675: u8 [a0 + 0xc] = a1\n 65678: a1 = u64 [s1 + 0x60]\n 65681: u8 [a0 + 0xb] = a1\n 65684: a1 = u64 [s1 + 0x58]\n 65687: u8 [a0 + 0xa] = a1\n 65690: a1 = u64 [s1 + 0x50]\n 65693: u8 [a0 + 0x9] = a1\n 65696: a1 = u64 [s1 + 0x108]\n 65700: u8 [a0 + 0x8] = a1\n 65703: a1 = u64 [s1 + 0x48]\n 65706: u8 [a0 + 0x7] = a1\n 65709: a1 = u64 [s1 + 0x40]\n 65712: u8 [a0 + 0x6] = a1\n 65715: a1 = u64 [s1 + 0x38]\n 65718: u8 [a0 + 0x5] = a1\n 65721: a1 = u64 [s1 + 0x30]\n 65724: u8 [a0 + 0x4] = a1\n 65727: a1 = u64 [s1 + 0x28]\n 65730: u8 [a0 + 0x3] = a1\n 65733: a1 = u64 [s1 + 0x20]\n 65736: u8 [a0 + 0x2] = a1\n 65739: a1 = u64 [s1 + 0x18]\n 65742: u8 [a0 + 0x1] = a1\n 65745: a1 = u64 [s1 + 0x158]\n 65749: u8 [a0] = a1\n 65751: a1 = u64 [s1 + 0x110]\n 65755: u8 [a0 + 0x18] = a1\n 65758: a1 = u64 [s1 + 0xb8]\n 65762: u8 [a0 + 0x17] = a1\n 65765: a1 = u64 [s1 + 0xb0]\n 65769: u8 [a0 + 0x16] = a1\n 65772: a1 = u64 [s1 + 0xa8]\n 65776: u8 [a0 + 0x15] = a1\n 65779: a1 = u64 [s1 + 0xa0]\n 65783: u8 [a0 + 0x14] = a1\n 65786: a1 = u64 [s1 + 0x98]\n 65790: u8 [a0 + 0x13] = a1\n 65793: a1 = u64 [s1 + 0x90]\n 65797: u8 [a0 + 0x12] = a1\n 65800: a1 = u64 [s1 + 0x88]\n 65804: u8 [a0 + 0x11] = a1\n 65807: a1 = u64 [s1 + 0x150]\n 65811: u8 [a0 + 0x1f] = a1\n 65814: a1 = u64 [s1 + 0x148]\n 65818: u8 [a0 + 0x1e] = a1\n 65821: a1 = u64 [s1 + 0x140]\n 65825: u8 [a0 + 0x1d] = a1\n 65828: a1 = u64 [s1 + 0x138]\n 65832: u8 [a0 + 0x1c] = a1\n 65835: a1 = u64 [s1 + 0x130]\n 65839: u8 [a0 + 0x1b] = a1\n 65842: a1 = u64 [s1 + 0x128]\n 65846: u8 [a0 + 0x1a] = a1\n 65849: a1 = 0x100000000\n 65859: u64 [s1 + 0x158] = a1\n 65863: a1 = 0xffffff60\n 65873: a2 = u64 [s1 + 0x198]\n 65877: a1 = a2 <u a1\n 65880: a2 = u64 [s1 + 0x190]\n 65884: a1 = 0 if a2 != 0\n 65886: a2 = u64 [s1 + 0x180]\n 65890: a1 = 0 if a2 != 0\n 65892: a2 = u64 [s1 + 0x160]\n 65896: u8 [a0 + 0x19] = a2\n 65899: jump @806 if a1 == 0\n      : @787 (gas: 20)\n 65903: a0 = u64 [s1 + 0xd0]\n 65907: a0 = reverse a0\n 65909: a1 = a0 >> 0x20\n 65912: a2 = u64 [s1 + 0xd8]\n 65916: a2 = reverse a2\n 65918: a3 = a2 << 0x20\n 65921: a1 = a1 | a3\n 65924: u64 [s1 + 0x160] = a1\n 65928: a0 = a0 << 0x20\n 65931: a1 = u64 [s1 + 0xf8]\n 65935: a1 = reverse a1\n 65937: a1 = a1 >> 0x20\n 65940: a0 = a0 | a1\n 65943: u64 [s1 + 0x150] = a0\n 65947: a2 = a2 >> 0x20\n 65950: u64 [s1 + 0x148] = a2\n 65954: a0 = u64 [s1 + 0x188]\n 65958: i32 a0 = a0 + 0xa0\n 65962: a1 = 0x20\n 65965: ra = 732, jump @0\n      : @788 [@dyn 366] (gas: 65)\n 65972: a1 = u64 [s1 + 0x148]\n 65976: a1 = reverse a1\n 65978: a2 = u64 [s1 + 0x160]\n 65982: a2 = reverse a2\n 65984: a3 = u64 [s1 + 0x150]\n 65988: a3 = reverse a3\n 65990: a4 = a3 >> 0x38\n 65993: u8 [a0 + 0x1f] = a4\n 65996: a4 = a3 >> 0x30\n 65999: u8 [a0 + 0x1e] = a4\n 66002: a4 = a3 >> 0x28\n 66005: u8 [a0 + 0x1d] = a4\n 66008: a4 = a3 >> 0x20\n 66011: u8 [a0 + 0x1c] = a4\n 66014: a4 = a3 >> 0x18\n 66017: u8 [a0 + 0x1b] = a4\n 66020: a4 = a3 >> 0x10\n 66023: u8 [a0 + 0x1a] = a4\n 66026: a4 = a3 >> 0x8\n 66029: u8 [a0 + 0x19] = a4\n 66032: u8 [a0 + 0x18] = a3\n 66035: u8 [a0 + 0x10] = a2\n 66038: u8 [a0 + 11] = 0\n 66041: u8 [a0 + 10] = 0\n 66044: u8 [a0 + 9] = 0\n 66047: u8 [a0 + 7] = 0\n 66050: u8 [a0 + 6] = 0\n 66053: u8 [a0 + 5] = 0\n 66056: u8 [a0 + 4] = 0\n 66059: u8 [a0 + 3] = 0\n 66062: u8 [a0 + 2] = 0\n 66065: u8 [a0 + 1] = 0\n 66068: u8 [a0 + 0] = 0\n 66070: a3 = a2 >> 0x38\n 66073: u8 [a0 + 0x17] = a3\n 66076: a3 = a2 >> 0x30\n 66079: u8 [a0 + 0x16] = a3\n 66082: a3 = a2 >> 0x28\n 66085: u8 [a0 + 0x15] = a3\n 66088: a3 = a2 >> 0x20\n 66091: u8 [a0 + 0x14] = a3\n 66094: a3 = a2 >> 0x18\n 66097: u8 [a0 + 0x13] = a3\n 66100: a3 = a2 >> 0x10\n 66103: u8 [a0 + 0x12] = a3\n 66106: a2 = a2 >> 0x8\n 66109: u8 [a0 + 0x11] = a2\n 66112: u8 [a0 + 0x8] = a1\n 66115: a2 = a1 >> 0x38\n 66118: u8 [a0 + 0xf] = a2\n 66121: a2 = a1 >> 0x30\n 66124: u8 [a0 + 0xe] = a2\n 66127: a2 = a1 >> 0x28\n 66130: u8 [a0 + 0xd] = a2\n 66133: a1 = a1 >> 0x20\n 66136: a2 = u64 [s1 + 0x158]\n 66140: a2 = a2 + 0xffffffffffffff40\n 66144: a3 = u64 [s1 + 0x198]\n 66148: a2 = a3 <u a2\n 66151: a3 = u64 [s1 + 0x190]\n 66155: a2 = 0 if a3 != 0\n 66157: a3 = u64 [s1 + 0x180]\n 66161: a2 = 0 if a3 != 0\n 66163: u8 [a0 + 0xc] = a1\n 66166: jump @806 if a2 == 0\n      : @789 (gas: 22)\n 66170: a0 = u64 [s1 + 0x168]\n 66174: a0 = reverse a0\n 66176: a0 = a0 << 0x20\n 66179: a1 = u64 [s1 + 0xc0]\n 66183: a1 = reverse a1\n 66185: a2 = a1 >> 0x20\n 66188: a0 = a0 | a2\n 66191: u64 [s1 + 0x160] = a0\n 66195: a1 = a1 << 0x20\n 66198: a0 = u64 [s1 + 0xc8]\n 66202: a0 = reverse a0\n 66204: a0 = a0 >> 0x20\n 66207: a0 = a0 | a1\n 66210: u64 [s1 + 0x158] = a0\n 66214: a0 = u64 [s1 + 0x120]\n 66218: a0 = a0 << 0x20\n 66221: a0 = a0 >> 0x20\n 66224: u64 [s1 + 0x180] = a0\n 66228: a0 = u64 [s1 + 0x188]\n 66232: i32 a0 = a0 + 0xc0\n 66236: a1 = 0x20\n 66239: ra = 734, jump @0\n      : @790 [@dyn 367] (gas: 57)\n 66246: a1 = u64 [s1 + 0x158]\n 66250: a1 = reverse a1\n 66252: a2 = u64 [s1 + 0x160]\n 66256: a2 = reverse a2\n 66258: a4 = u64 [s1 + 0x168]\n 66262: a3 = a4 >> 0x18\n 66265: u8 [a0 + 0xf] = a3\n 66268: a3 = a4 >> 0x10\n 66271: u8 [a0 + 0xe] = a3\n 66274: a3 = a4 >> 0x8\n 66277: u8 [a0 + 0xd] = a3\n 66280: u8 [a0 + 0xc] = a4\n 66283: u8 [a0 + 11] = 0\n 66286: u8 [a0 + 10] = 0\n 66289: u8 [a0 + 9] = 0\n 66292: u8 [a0 + 8] = 0\n 66295: u8 [a0 + 7] = 0\n 66298: u8 [a0 + 6] = 0\n 66301: u8 [a0 + 5] = 0\n 66304: u8 [a0 + 4] = 0\n 66307: u8 [a0 + 3] = 0\n 66310: u8 [a0 + 2] = 0\n 66313: u8 [a0 + 1] = 0\n 66316: u8 [a0 + 0] = 0\n 66318: u8 [a0 + 0x10] = a2\n 66321: u8 [a0 + 0x18] = a1\n 66324: a3 = a2 >> 0x38\n 66327: u8 [a0 + 0x17] = a3\n 66330: a3 = a2 >> 0x30\n 66333: u8 [a0 + 0x16] = a3\n 66336: a3 = a2 >> 0x28\n 66339: u8 [a0 + 0x15] = a3\n 66342: a3 = a2 >> 0x20\n 66345: u8 [a0 + 0x14] = a3\n 66348: a3 = a2 >> 0x18\n 66351: u8 [a0 + 0x13] = a3\n 66354: a3 = a2 >> 0x10\n 66357: u8 [a0 + 0x12] = a3\n 66360: a2 = a2 >> 0x8\n 66363: u8 [a0 + 0x11] = a2\n 66366: a2 = a1 >> 0x38\n 66369: u8 [a0 + 0x1f] = a2\n 66372: a2 = a1 >> 0x30\n 66375: u8 [a0 + 0x1e] = a2\n 66378: a2 = a1 >> 0x28\n 66381: u8 [a0 + 0x1d] = a2\n 66384: a2 = a1 >> 0x20\n 66387: u8 [a0 + 0x1c] = a2\n 66390: a2 = a1 >> 0x18\n 66393: u8 [a0 + 0x1b] = a2\n 66396: a2 = a1 >> 0x10\n 66399: u8 [a0 + 0x1a] = a2\n 66402: a1 = a1 >> 0x8\n 66405: u8 [a0 + 0x19] = a1\n 66408: a1 = 0x20\n 66411: a0 = 0\n 66413: ra = 736, jump @0\n      : @791 [@dyn 368] (gas: 57)\n 66420: a1 = u64 [s1 + 0x180]\n 66424: a1 = reverse a1\n 66426: a3 = u64 [s1 + 0xe0]\n 66430: a2 = a3 >> 0x38\n 66433: u8 [a0 + 0x1f] = a2\n 66436: a2 = a3 >> 0x30\n 66439: u8 [a0 + 0x1e] = a2\n 66442: a2 = a3 >> 0x28\n 66445: u8 [a0 + 0x1d] = a2\n 66448: a2 = u64 [s1 + 0x118]\n 66452: u8 [a0 + 0x1c] = a2\n 66455: a2 = a3 >> 0x18\n 66458: u8 [a0 + 0x1b] = a2\n 66461: a2 = a3 >> 0x10\n 66464: u8 [a0 + 0x1a] = a2\n 66467: a2 = a3 >> 0x8\n 66470: u8 [a0 + 0x19] = a2\n 66473: u8 [a0 + 0x18] = a3\n 66476: a3 = u64 [s1 + 0xf0]\n 66480: a2 = a3 >> 0x38\n 66483: u8 [a0 + 0x17] = a2\n 66486: a2 = a3 >> 0x30\n 66489: u8 [a0 + 0x16] = a2\n 66492: a2 = a3 >> 0x28\n 66495: u8 [a0 + 0x15] = a2\n 66498: a2 = u64 [s1 + 0xe8]\n 66502: u8 [a0 + 0x14] = a2\n 66505: a2 = a3 >> 0x18\n 66508: u8 [a0 + 0x13] = a2\n 66511: a2 = a3 >> 0x10\n 66514: u8 [a0 + 0x12] = a2\n 66517: a2 = a3 >> 0x8\n 66520: u8 [a0 + 0x11] = a2\n 66523: u8 [a0 + 0x10] = a3\n 66526: a2 = a1 >> 0x38\n 66529: u8 [a0 + 0xf] = a2\n 66532: a2 = a1 >> 0x30\n 66535: u8 [a0 + 0xe] = a2\n 66538: a2 = a1 >> 0x28\n 66541: u8 [a0 + 0xd] = a2\n 66544: a2 = a1 >> 0x20\n 66547: u8 [a0 + 0xc] = a2\n 66550: u8 [a0 + 11] = 0\n 66553: u8 [a0 + 10] = 0\n 66556: u8 [a0 + 9] = 0\n 66559: u8 [a0 + 0x8] = a1\n 66562: u8 [a0 + 7] = 0\n 66565: u8 [a0 + 6] = 0\n 66568: u8 [a0 + 5] = 0\n 66571: u8 [a0 + 4] = 0\n 66574: u8 [a0 + 3] = 0\n 66577: u8 [a0 + 2] = 0\n 66580: u8 [a0 + 1] = 0\n 66583: u8 [a0 + 0] = 0\n 66585: a0 = 0x20\n 66588: a1 = 0x20\n 66591: ra = 738, jump @0\n      : @792 [@dyn 369] (gas: 35)\n 66598: u8 [a0 + 31] = 0x2\n 66602: u8 [a0 + 30] = 0\n 66605: u8 [a0 + 29] = 0\n 66608: u8 [a0 + 28] = 0\n 66611: u8 [a0 + 27] = 0\n 66614: u8 [a0 + 26] = 0\n 66617: u8 [a0 + 25] = 0\n 66620: u8 [a0 + 24] = 0\n 66623: u8 [a0 + 23] = 0\n 66626: u8 [a0 + 22] = 0\n 66629: u8 [a0 + 21] = 0\n 66632: u8 [a0 + 20] = 0\n 66635: u8 [a0 + 19] = 0\n 66638: u8 [a0 + 18] = 0\n 66641: u8 [a0 + 17] = 0\n 66644: u8 [a0 + 16] = 0\n 66647: u8 [a0 + 15] = 0\n 66650: u8 [a0 + 14] = 0\n 66653: u8 [a0 + 13] = 0\n 66656: u8 [a0 + 12] = 0\n 66659: u8 [a0 + 11] = 0\n 66662: u8 [a0 + 10] = 0\n 66665: u8 [a0 + 9] = 0\n 66668: u8 [a0 + 8] = 0\n 66671: u8 [a0 + 7] = 0\n 66674: u8 [a0 + 6] = 0\n 66677: u8 [a0 + 5] = 0\n 66680: u8 [a0 + 4] = 0\n 66683: u8 [a0 + 3] = 0\n 66686: u8 [a0 + 2] = 0\n 66689: u8 [a0 + 1] = 0\n 66692: u8 [a0 + 0] = 0\n 66694: a1 = 0x40\n 66697: a0 = 0\n 66699: ra = 740, jump @0\n      : @793 [@dyn 370] (gas: 27)\n 66706: i32 a0 = a0 + 0\n 66708: i32 a2 = s1 + 0x5c0\n 66712: a1 = 0x40\n 66715: ecalli 8 // 'hash_keccak_256'\n 66717: a0 = u64 [s1 + 0x5d8]\n 66721: a1 = u64 [s1 + 0x5d0]\n 66725: a2 = u64 [s1 + 0x5c8]\n 66729: a3 = u64 [s1 + 0x5c0]\n 66733: a4 = reverse a0\n 66735: a0 = reverse a1\n 66737: a1 = reverse a2\n 66739: a2 = reverse a3\n 66741: a3 = u64 [s1 + 0x170]\n 66745: u64 [s1 + 0x238] = a3\n 66749: a3 = u64 [s1 + 0x178]\n 66753: u64 [s1 + 0x230] = a3\n 66757: a3 = u64 [s1 + 0x190]\n 66761: u64 [s1 + 0x228] = a3\n 66765: a3 = u64 [s1 + 0x198]\n 66769: u64 [s1 + 0x220] = a3\n 66773: u64 [s1 + 0x258] = a2\n 66777: u64 [s1 + 0x250] = a1\n 66781: u64 [s1 + 0x248] = a0\n 66785: a0 = s1 + 0x240\n 66789: a1 = s1 + 0x220\n 66793: u64 [s1 + 0x240] = a4\n 66797: ra = 742, jump @710\n      : @794 [@dyn 371] (gas: 6)\n 66803: sp = s0 + 0xfffffffffffffa00\n 66807: ra = u64 [sp + 0x5f8]\n 66811: s0 = u64 [sp + 0x5f0]\n 66815: s1 = u64 [sp + 0x5e8]\n 66819: sp = sp + 0x600\n 66823: ret\n      : @795 (gas: 3)\n 66825: a0 = 0x40\n 66828: a1 = 0x20\n 66831: ra = 744, jump @0\n      : @796 [@dyn 372] (gas: 104)\n 66838: a1 = u8 [a0 + 0x11]\n 66841: a2 = u8 [a0 + 0x10]\n 66844: a3 = u8 [a0 + 0x12]\n 66847: a4 = u8 [a0 + 0x13]\n 66850: a1 = a1 << 0x8\n 66853: a1 = a1 | a2\n 66856: a3 = a3 << 0x10\n 66859: a4 = a4 << 0x18\n 66862: a3 = a3 | a4\n 66865: a1 = a1 | a3\n 66868: a2 = u8 [a0 + 0x15]\n 66871: a3 = u8 [a0 + 0x14]\n 66874: a4 = u8 [a0 + 0x16]\n 66877: a5 = u8 [a0 + 0x17]\n 66880: a2 = a2 << 0x8\n 66883: a2 = a2 | a3\n 66886: a4 = a4 << 0x10\n 66889: a5 = a5 << 0x18\n 66892: a4 = a4 | a5\n 66895: a2 = a2 | a4\n 66898: a2 = a2 << 0x20\n 66901: t0 = a2 | a1\n 66904: a2 = u8 [a0 + 0x1]\n 66907: a3 = u8 [a0]\n 66909: a4 = u8 [a0 + 0x2]\n 66912: a5 = u8 [a0 + 0x3]\n 66915: a2 = a2 << 0x8\n 66918: a2 = a2 | a3\n 66921: a4 = a4 << 0x10\n 66924: a5 = a5 << 0x18\n 66927: a4 = a4 | a5\n 66930: a2 = a2 | a4\n 66933: a3 = u8 [a0 + 0x5]\n 66936: a4 = u8 [a0 + 0x4]\n 66939: a5 = u8 [a0 + 0x6]\n 66942: a1 = u8 [a0 + 0x7]\n 66945: a3 = a3 << 0x8\n 66948: a3 = a3 | a4\n 66951: a5 = a5 << 0x10\n 66954: a1 = a1 << 0x18\n 66957: a1 = a1 | a5\n 66960: a1 = a1 | a3\n 66963: a1 = a1 << 0x20\n 66966: t1 = a1 | a2\n 66969: a1 = u8 [a0 + 0x19]\n 66972: a3 = u8 [a0 + 0x18]\n 66975: a4 = u8 [a0 + 0x1a]\n 66978: a5 = u8 [a0 + 0x1b]\n 66981: a1 = a1 << 0x8\n 66984: a1 = a1 | a3\n 66987: a4 = a4 << 0x10\n 66990: a5 = a5 << 0x18\n 66993: a4 = a4 | a5\n 66996: a1 = a1 | a4\n 66999: a3 = u8 [a0 + 0x1d]\n 67002: a4 = u8 [a0 + 0x1c]\n 67005: a5 = u8 [a0 + 0x1e]\n 67008: a2 = u8 [a0 + 0x1f]\n 67011: a3 = a3 << 0x8\n 67014: a3 = a3 | a4\n 67017: a5 = a5 << 0x10\n 67020: a2 = a2 << 0x18\n 67023: a2 = a2 | a5\n 67026: a2 = a2 | a3\n 67029: a2 = a2 << 0x20\n 67032: a3 = a2 | a1\n 67035: a1 = u8 [a0 + 0x9]\n 67038: a2 = u8 [a0 + 0x8]\n 67041: a4 = u8 [a0 + 0xa]\n 67044: a5 = u8 [a0 + 0xb]\n 67047: a1 = a1 << 0x8\n 67050: a1 = a1 | a2\n 67053: a4 = a4 << 0x10\n 67056: a5 = a5 << 0x18\n 67059: a4 = a4 | a5\n 67062: a1 = a1 | a4\n 67065: a2 = u8 [a0 + 0xd]\n 67068: a4 = u8 [a0 + 0xc]\n 67071: a5 = u8 [a0 + 0xe]\n 67074: a0 = u8 [a0 + 0xf]\n 67077: a2 = a2 << 0x8\n 67080: a2 = a2 | a4\n 67083: a5 = a5 << 0x10\n 67086: a0 = a0 << 0x18\n 67089: a0 = a0 | a5\n 67092: a0 = a0 | a2\n 67095: a0 = a0 << 0x20\n 67098: a0 = a0 | a1\n 67101: a4 = reverse a0\n 67103: a1 = reverse a3\n 67105: a2 = reverse t1\n 67107: a0 = reverse t0\n 67109: u64 [s1 + 0x198] = a0\n 67113: u64 [s1 + 0x188] = a2\n 67117: a0 = a0 | a2\n 67120: a2 = a1\n 67122: a1 = a1 | a4\n 67125: a1 = a1 | a0\n 67128: a1 = a1 >> 0x20\n 67131: u64 [s1 + 0x190] = a4\n 67135: a0 = a0 | a4\n 67138: a0 = a0 << 0x20\n 67141: a0 = a0 | a1\n 67144: jump @806 if a0 != 0\n      : @797 (gas: 5)\n 67148: u64 [s1 + 0x180] = a2\n 67152: i32 a0 = a2 + 0\n 67154: a1 = 0x20\n 67157: u64 [s1 + 0x178] = a0\n 67161: ra = 746, jump @0\n      : @798 [@dyn 373] (gas: 51)\n 67168: u8 [a0 + 31] = 0\n 67171: u8 [a0 + 30] = 0\n 67174: u8 [a0 + 29] = 0\n 67177: u8 [a0 + 28] = 0\n 67180: u8 [a0 + 27] = 0\n 67183: u8 [a0 + 26] = 0\n 67186: u8 [a0 + 25] = 0\n 67189: u8 [a0 + 24] = 0\n 67192: u8 [a0 + 23] = 0\n 67195: u8 [a0 + 22] = 0\n 67198: u8 [a0 + 21] = 0\n 67201: u8 [a0 + 20] = 0\n 67204: u8 [a0 + 19] = 0\n 67207: u8 [a0 + 18] = 0\n 67210: u8 [a0 + 17] = 0\n 67213: u8 [a0 + 16] = 0\n 67216: u8 [a0 + 15] = 0\n 67219: u8 [a0 + 14] = 0\n 67222: u8 [a0 + 13] = 0\n 67225: u8 [a0 + 12] = 0\n 67228: u8 [a0 + 11] = 0\n 67231: u8 [a0 + 10] = 0\n 67234: u8 [a0 + 9] = 0\n 67237: u8 [a0 + 8] = 0\n 67240: u8 [a0 + 7] = 0\n 67243: u8 [a0 + 6] = 0\n 67246: u8 [a0 + 5] = 0\n 67249: u8 [a0 + 4] = 0\n 67252: u8 [a0 + 3] = 0xa0\n 67257: u8 [a0 + 2] = 0x79\n 67261: u8 [a0 + 1] = 0xc3\n 67266: u8 [a0 + 0] = 0x8\n 67269: a1 = u64 [s1 + 0x180]\n 67273: a0 = a1 + 0x4\n 67276: a1 = a0 <u a1\n 67279: a3 = u64 [s1 + 0x198]\n 67283: a2 = a3 + a1\n 67286: a3 = a2 <u a3\n 67289: a3 = a1 if a1 == 0\n 67292: a1 = u64 [s1 + 0x190]\n 67296: a3 = a3 + a1\n 67299: a1 = a3 <u a1\n 67302: a4 = u64 [s1 + 0x188]\n 67306: a4 = a4 + a1\n 67309: u64 [s1 + 0x3e8] = a2\n 67313: u64 [s1 + 0x3e0] = a0\n 67317: u64 [s1 + 0x3f0] = a3\n 67321: a0 = s1 + 0x400\n 67325: a1 = s1 + 0x3e0\n 67329: u64 [s1 + 0x3f8] = a4\n 67333: ra = 748, jump @694\n      : @799 [@dyn 374] (gas: 5)\n 67339: a0 = u64 [s1 + 0x408]\n 67343: t0 = u64 [s1 + 0x418]\n 67347: t1 = u64 [s1 + 0x400]\n 67351: a3 = u64 [s1 + 0x410]\n 67355: jump @805\n      : @800 (gas: 3)\n 67358: a0 = 0x40\n 67361: a1 = 0x20\n 67364: ra = 750, jump @0\n      : @801 [@dyn 375] (gas: 104)\n 67371: a1 = u8 [a0 + 0x11]\n 67374: a2 = u8 [a0 + 0x10]\n 67377: a3 = u8 [a0 + 0x12]\n 67380: a4 = u8 [a0 + 0x13]\n 67383: a1 = a1 << 0x8\n 67386: a1 = a1 | a2\n 67389: a3 = a3 << 0x10\n 67392: a4 = a4 << 0x18\n 67395: a3 = a3 | a4\n 67398: a1 = a1 | a3\n 67401: a2 = u8 [a0 + 0x15]\n 67404: a3 = u8 [a0 + 0x14]\n 67407: a4 = u8 [a0 + 0x16]\n 67410: a5 = u8 [a0 + 0x17]\n 67413: a2 = a2 << 0x8\n 67416: a2 = a2 | a3\n 67419: a4 = a4 << 0x10\n 67422: a5 = a5 << 0x18\n 67425: a4 = a4 | a5\n 67428: a2 = a2 | a4\n 67431: a2 = a2 << 0x20\n 67434: t0 = a2 | a1\n 67437: a2 = u8 [a0 + 0x1]\n 67440: a3 = u8 [a0]\n 67442: a4 = u8 [a0 + 0x2]\n 67445: a5 = u8 [a0 + 0x3]\n 67448: a2 = a2 << 0x8\n 67451: a2 = a2 | a3\n 67454: a4 = a4 << 0x10\n 67457: a5 = a5 << 0x18\n 67460: a4 = a4 | a5\n 67463: a2 = a2 | a4\n 67466: a3 = u8 [a0 + 0x5]\n 67469: a4 = u8 [a0 + 0x4]\n 67472: a5 = u8 [a0 + 0x6]\n 67475: a1 = u8 [a0 + 0x7]\n 67478: a3 = a3 << 0x8\n 67481: a3 = a3 | a4\n 67484: a5 = a5 << 0x10\n 67487: a1 = a1 << 0x18\n 67490: a1 = a1 | a5\n 67493: a1 = a1 | a3\n 67496: a1 = a1 << 0x20\n 67499: t1 = a1 | a2\n 67502: a1 = u8 [a0 + 0x19]\n 67505: a3 = u8 [a0 + 0x18]\n 67508: a4 = u8 [a0 + 0x1a]\n 67511: a5 = u8 [a0 + 0x1b]\n 67514: a1 = a1 << 0x8\n 67517: a1 = a1 | a3\n 67520: a4 = a4 << 0x10\n 67523: a5 = a5 << 0x18\n 67526: a4 = a4 | a5\n 67529: a1 = a1 | a4\n 67532: a3 = u8 [a0 + 0x1d]\n 67535: a4 = u8 [a0 + 0x1c]\n 67538: a5 = u8 [a0 + 0x1e]\n 67541: a2 = u8 [a0 + 0x1f]\n 67544: a3 = a3 << 0x8\n 67547: a3 = a3 | a4\n 67550: a5 = a5 << 0x10\n 67553: a2 = a2 << 0x18\n 67556: a2 = a2 | a5\n 67559: a2 = a2 | a3\n 67562: a2 = a2 << 0x20\n 67565: a3 = a2 | a1\n 67568: a1 = u8 [a0 + 0x9]\n 67571: a2 = u8 [a0 + 0x8]\n 67574: a4 = u8 [a0 + 0xa]\n 67577: a5 = u8 [a0 + 0xb]\n 67580: a1 = a1 << 0x8\n 67583: a1 = a1 | a2\n 67586: a4 = a4 << 0x10\n 67589: a5 = a5 << 0x18\n 67592: a4 = a4 | a5\n 67595: a1 = a1 | a4\n 67598: a2 = u8 [a0 + 0xd]\n 67601: a4 = u8 [a0 + 0xc]\n 67604: a5 = u8 [a0 + 0xe]\n 67607: a0 = u8 [a0 + 0xf]\n 67610: a2 = a2 << 0x8\n 67613: a2 = a2 | a4\n 67616: a5 = a5 << 0x10\n 67619: a0 = a0 << 0x18\n 67622: a0 = a0 | a5\n 67625: a0 = a0 | a2\n 67628: a0 = a0 << 0x20\n 67631: a0 = a0 | a1\n 67634: a4 = reverse a0\n 67636: a1 = reverse a3\n 67638: a2 = reverse t1\n 67640: a0 = reverse t0\n 67642: u64 [s1 + 0x198] = a0\n 67646: u64 [s1 + 0x188] = a2\n 67650: a0 = a0 | a2\n 67653: a2 = a1\n 67655: a1 = a1 | a4\n 67658: a1 = a1 | a0\n 67661: a1 = a1 >> 0x20\n 67664: u64 [s1 + 0x190] = a4\n 67668: a0 = a0 | a4\n 67671: a0 = a0 << 0x20\n 67674: a0 = a0 | a1\n 67677: jump @806 if a0 != 0\n      : @802 (gas: 5)\n 67681: u64 [s1 + 0x180] = a2\n 67685: i32 a0 = a2 + 0\n 67687: a1 = 0x20\n 67690: u64 [s1 + 0x178] = a0\n 67694: ra = 752, jump @0\n      : @803 [@dyn 376] (gas: 51)\n 67701: u8 [a0 + 31] = 0\n 67704: u8 [a0 + 30] = 0\n 67707: u8 [a0 + 29] = 0\n 67710: u8 [a0 + 28] = 0\n 67713: u8 [a0 + 27] = 0\n 67716: u8 [a0 + 26] = 0\n 67719: u8 [a0 + 25] = 0\n 67722: u8 [a0 + 24] = 0\n 67725: u8 [a0 + 23] = 0\n 67728: u8 [a0 + 22] = 0\n 67731: u8 [a0 + 21] = 0\n 67734: u8 [a0 + 20] = 0\n 67737: u8 [a0 + 19] = 0\n 67740: u8 [a0 + 18] = 0\n 67743: u8 [a0 + 17] = 0\n 67746: u8 [a0 + 16] = 0\n 67749: u8 [a0 + 15] = 0\n 67752: u8 [a0 + 14] = 0\n 67755: u8 [a0 + 13] = 0\n 67758: u8 [a0 + 12] = 0\n 67761: u8 [a0 + 11] = 0\n 67764: u8 [a0 + 10] = 0\n 67767: u8 [a0 + 9] = 0\n 67770: u8 [a0 + 8] = 0\n 67773: u8 [a0 + 7] = 0\n 67776: u8 [a0 + 6] = 0\n 67779: u8 [a0 + 5] = 0\n 67782: u8 [a0 + 4] = 0\n 67785: u8 [a0 + 3] = 0xa0\n 67790: u8 [a0 + 2] = 0x79\n 67794: u8 [a0 + 1] = 0xc3\n 67799: u8 [a0 + 0] = 0x8\n 67802: a1 = u64 [s1 + 0x180]\n 67806: a0 = a1 + 0x4\n 67809: a1 = a0 <u a1\n 67812: a3 = u64 [s1 + 0x198]\n 67816: a2 = a3 + a1\n 67819: a3 = a2 <u a3\n 67822: a3 = a1 if a1 == 0\n 67825: a1 = u64 [s1 + 0x190]\n 67829: a3 = a3 + a1\n 67832: a1 = a3 <u a1\n 67835: a4 = u64 [s1 + 0x188]\n 67839: a4 = a4 + a1\n 67842: u64 [s1 + 0x1a8] = a2\n 67846: u64 [s1 + 0x1a0] = a0\n 67850: u64 [s1 + 0x1b0] = a3\n 67854: a0 = s1 + 0x1c0\n 67858: a1 = s1 + 0x1a0\n 67862: u64 [s1 + 0x1b8] = a4\n 67866: ra = 754, jump @702\n      : @804 [@dyn 377] (gas: 5)\n 67872: a0 = u64 [s1 + 0x1c8]\n 67876: t0 = u64 [s1 + 0x1d8]\n 67880: t1 = u64 [s1 + 0x1c0]\n 67884: a3 = u64 [s1 + 0x1d0]\n 67888: fallthrough\n      : @805 (gas: 27)\n 67889: a1 = u64 [s1 + 0x198]\n 67893: a4 = a0 ^ a1\n 67896: a5 = a0 <u a1\n 67899: ra = a1\n 67901: t2 = u64 [s1 + 0x180]\n 67905: a1 = t1 <u t2\n 67908: a5 = a1 if a4 == 0\n 67911: a2 = u64 [s1 + 0x190]\n 67915: a4 = a3 - a2\n 67918: a3 = a3 <u a2\n 67921: a2 = u64 [s1 + 0x188]\n 67925: a2 = t0 - a2\n 67928: a2 = a2 - a3\n 67931: a3 = a4 <u a5\n 67934: a2 = a2 - a3\n 67937: a4 = a4 - a5\n 67940: a0 = a0 - ra\n 67943: a1 = a0 - a1\n 67946: a0 = t1 - t2\n 67949: a1 = a1 | a2\n 67952: a2 = a0 | a4\n 67955: a2 = a2 | a1\n 67958: a1 = a1 | a4\n 67961: a2 = a2 >> 0x20\n 67964: a1 = a1 << 0x20\n 67967: a1 = a1 | a2\n 67970: jump @816 if a1 == 0\n      : @806 (gas: 1)\n 67974: trap\n      : @807 (gas: 1)\n 67975: ra = 756, jump @375\n      : @808 [@dyn 378] (gas: 2)\n 67982: a1 = 0\n 67984: ra = 758, jump @0\n      : @809 [@dyn 379] (gas: 5)\n 67991: i32 a1 = a0 + 0\n 67993: a0 = 0x1\n 67996: a2 = 0\n 67998: ecalli 14 // 'seal_return'\n 68000: fallthrough\n      : @810 (gas: 8)\n 68001: u64 [s1 + 528] = 0\n 68005: u64 [s1 + 520] = 0\n 68009: u64 [s1 + 512] = 0\n 68013: a0 = 0x4e487b7100000000\n 68023: a1 = s1 + 0x200\n 68027: u64 [s1 + 0x218] = a0\n 68031: a0 = 0\n 68033: ra = 760, jump @8\n      : @811 [@dyn 380] (gas: 8)\n 68040: u64 [s1 + 504] = 0\n 68044: u64 [s1 + 496] = 0\n 68048: u64 [s1 + 480] = 0x11\n 68053: a0 = 0x4\n 68056: a1 = s1 + 0x1e0\n 68060: u64 [s1 + 488] = 0\n 68064: ra = 0x2fc\n 68068: jump @8\n      : @812 (gas: 8)\n 68072: u64 [s1 + 848] = 0\n 68076: u64 [s1 + 840] = 0\n 68080: u64 [s1 + 832] = 0\n 68084: a0 = 0x4e487b7100000000\n 68094: a1 = s1 + 0x340\n 68098: u64 [s1 + 0x358] = a0\n 68102: a0 = 0\n 68104: ra = 762, jump @8\n      : @813 [@dyn 381] (gas: 7)\n 68111: u64 [s1 + 824] = 0\n 68115: u64 [s1 + 816] = 0\n 68119: u64 [s1 + 800] = 0x11\n 68124: a0 = 0x4\n 68127: a1 = s1 + 0x320\n 68131: u64 [s1 + 808] = 0\n 68135: ra = 764, jump @8\n      : @814 [@dyn 382] (gas: 3)\n 68142: a1 = 0x24\n 68145: a0 = 0\n 68147: ra = 766, jump @0\n      : @815 [@dyn 383] (gas: 5)\n 68154: i32 a1 = a0 + 0\n 68156: a0 = 0x1\n 68159: a2 = 0x24\n 68162: ecalli 14 // 'seal_return'\n 68164: fallthrough\n      : @816 (gas: 4)\n 68165: i32 a1 = a0 + 0\n 68167: u64 [s1 + 0x198] = a1\n 68171: a0 = u64 [s1 + 0x178]\n 68175: ra = 768, jump @0\n      : @817 [@dyn 384] (gas: 6)\n 68182: i32 a1 = a0 + 0\n 68184: a0 = 0x1\n 68187: a2 = u64 [s1 + 0x198]\n 68191: ra = 0x302\n 68195: ecalli 14 // 'seal_return'\n 68197: fallthrough\n      : @818 [@dyn 385] (gas: 40)\n 68198: sp = sp + 0xffffffffffffffa0\n 68201: u64 [sp + 0x58] = ra\n 68204: u64 [sp + 0x50] = s0\n 68207: u64 [sp + 0x48] = s1\n 68210: s0 = sp + 0x60\n 68213: sp = sp & 0xffffffffffffffe0\n 68216: a2 = u64 [a1 + 0x8]\n 68219: s1 = a0\n 68221: a0 = u64 [a1 + 0x10]\n 68224: a1 = u64 [a1]\n 68226: a2 = reverse a2\n 68228: a3 = a2 << 0x20\n 68231: a0 = reverse a0\n 68233: a0 = a0 >> 0x20\n 68236: a0 = a0 | a3\n 68239: a2 = a2 >> 0x20\n 68242: a1 = reverse a1\n 68244: a3 = a1 << 0x20\n 68247: a2 = a2 | a3\n 68250: a1 = a1 >> 0x20\n 68253: u32 [sp + 0x30] = a1\n 68256: u64 [sp + 0x28] = a2\n 68259: u64 [sp + 0x20] = a0\n 68262: i32 a0 = sp + 0x20\n 68265: i32 a1 = sp + 0\n 68267: ecalli 0 // 'balance_of'\n 68268: a0 = u64 [sp + 0x18]\n 68271: a1 = u64 [sp + 0x10]\n 68274: a2 = u64 [sp + 0x8]\n 68277: a3 = u64 [sp]\n 68279: u64 [s1 + 0x18] = a0\n 68282: u64 [s1 + 0x10] = a1\n 68285: u64 [s1 + 0x8] = a2\n 68288: u64 [s1] = a3\n 68290: sp = s0 + 0xffffffffffffffa0\n 68293: ra = u64 [sp + 0x58]\n 68296: s0 = u64 [sp + 0x50]\n 68299: s1 = u64 [sp + 0x48]\n 68302: sp = sp + 0x60\n 68305: ret\n      : @819 [export #0: 'call'] (gas: 2)\n 68307: a0 = 0\n 68309: ra = 772, jump @10\n      : @820 [@dyn 386] [export #1: 'deploy'] (gas: 2)\n 68316: a0 = 0x1\n 68319: ra = 774, jump @10\n      : @821 [@dyn 387] (gas: 249)\n 68326: sp = sp + 0xffffffffffffff80\n 68329: u64 [sp + 0x78] = ra\n 68332: u64 [sp + 0x70] = s0\n 68335: u64 [sp + 0x68] = s1\n 68338: s0 = sp + 0x80\n 68342: sp = sp & 0xfffffffffffffff0\n 68345: t0 = u64 [a1]\n 68347: t1 = u64 [a1 + 0x8]\n 68350: t2 = u64 [a1 + 0x10]\n 68353: a1 = u64 [a1 + 0x18]\n 68356: a3 = u64 [a2]\n 68358: a4 = u64 [a2 + 0x8]\n 68361: a5 = u64 [a2 + 0x10]\n 68364: a2 = u64 [a2 + 0x18]\n 68367: s1 = a0\n 68369: u64 [sp + 0x18] = a2\n 68372: u64 [sp + 0x10] = a5\n 68375: u64 [sp + 0x8] = a4\n 68378: u64 [sp] = a3\n 68380: u64 [sp + 0x38] = a1\n 68383: u64 [sp + 0x30] = t2\n 68386: u64 [sp + 0x28] = t1\n 68389: a0 = sp + 0x40\n 68392: a1 = sp + 0x20\n 68395: a2 = sp\n 68397: u64 [sp + 0x20] = t0\n 68400: ra = 0x308\n 68404: sp = sp + 0xffffffffffffff40\n 68408: u64 [sp + 0xb8] = ra\n 68412: u64 [sp + 0xb0] = s0\n 68416: u64 [sp + 0xa8] = s1\n 68420: s0 = sp + 0xc0\n 68424: sp = sp & 0xffffffffffffffe0\n 68427: u64 [sp + 0x18] = a0\n 68430: a0 = u64 [a2 + 0x18]\n 68433: u64 [sp + 0x10] = a0\n 68436: a0 = u64 [a2 + 0x10]\n 68439: u64 [sp + 0x8] = a0\n 68442: s1 = u64 [a2 + 0x8]\n 68445: a0 = u64 [a2]\n 68447: u64 [sp] = a0\n 68449: a0 = u64 [a1 + 0x18]\n 68452: a2 = u64 [a1 + 0x10]\n 68455: a3 = u64 [a1 + 0x8]\n 68458: a1 = u64 [a1]\n 68460: u64 [sp + 0x78] = a0\n 68463: u64 [sp + 0x70] = a2\n 68466: u64 [sp + 0x68] = a3\n 68469: u64 [sp + 0x60] = a1\n 68472: u64 [sp + 152] = 0\n 68476: u64 [sp + 144] = 0\n 68480: u64 [sp + 136] = 0\n 68484: u64 [sp + 128] = 0\n 68488: u32 [sp + 160] = 0x20\n 68493: i32 a1 = sp + 0x60\n 68496: i32 a3 = sp + 0x80\n 68500: i32 a4 = sp + 0xa0\n 68504: a2 = 0xffffffffffffffff\n 68507: a0 = 0\n 68509: ecalli 7 // 'get_storage'\n 68511: a1 = u64 [sp + 0x80]\n 68515: a2 = u64 [sp + 0x88]\n 68519: t1 = u64 [sp]\n 68521: a0 = t1 >> 0x3d\n 68524: a3 = s1 << 0x3\n 68527: a3 = a3 | a0\n 68530: s1 = s1 >> 0x3d\n 68533: a4 = u64 [sp + 0x8]\n 68536: a0 = a4 << 0x3\n 68539: s1 = s1 | a0\n 68542: a0 = a4 >> 0x3d\n 68545: a4 = u64 [sp + 0x10]\n 68548: a4 = a4 << 0x3\n 68551: a4 = a4 | a0\n 68554: a0 = t1 << 0x3\n 68557: a5 = a3 >u 0\n 68559: a0 = a0 <u 0x100\n 68563: t0 = a0 ^ 0x1\n 68566: t0 = a5 if a3 != 0\n 68569: a3 = a4 >u 0\n 68571: a5 = s1 >u 0\n 68573: a5 = a3 if a4 != 0\n 68576: a3 = u64 [sp + 0x90]\n 68580: s1 = s1 | a4\n 68583: a4 = u64 [sp + 0x98]\n 68587: t0 = a5 if s1 != 0\n 68590: u8 [sp + 95] = 0\n 68593: u8 [sp + 94] = 0\n 68596: u8 [sp + 93] = 0\n 68599: u8 [sp + 92] = 0\n 68602: u8 [sp + 91] = 0\n 68605: u8 [sp + 90] = 0\n 68608: u8 [sp + 89] = 0\n 68611: u8 [sp + 88] = 0\n 68614: u8 [sp + 87] = 0\n 68617: u8 [sp + 86] = 0\n 68620: u8 [sp + 85] = 0\n 68623: u8 [sp + 84] = 0\n 68626: u8 [sp + 83] = 0\n 68629: u8 [sp + 82] = 0\n 68632: u8 [sp + 81] = 0\n 68635: u8 [sp + 80] = 0\n 68638: u8 [sp + 79] = 0\n 68641: u8 [sp + 78] = 0\n 68644: u8 [sp + 77] = 0\n 68647: u8 [sp + 76] = 0\n 68650: u8 [sp + 75] = 0\n 68653: u8 [sp + 74] = 0\n 68656: u8 [sp + 73] = 0\n 68659: u8 [sp + 72] = 0\n 68662: u8 [sp + 71] = 0\n 68665: u8 [sp + 70] = 0\n 68668: u8 [sp + 69] = 0\n 68671: u8 [sp + 68] = 0\n 68674: u8 [sp + 67] = 0\n 68677: u8 [sp + 66] = 0\n 68680: u8 [sp + 65] = 0\n 68683: u8 [sp + 64] = 0\n 68686: u8 [sp + 0x38] = a4\n 68689: u8 [sp + 0x30] = a3\n 68692: u8 [sp + 0x28] = a2\n 68695: u8 [sp + 0x20] = a1\n 68698: a5 = a4 >> 0x38\n 68701: u8 [sp + 0x3f] = a5\n 68704: a5 = a4 >> 0x30\n 68707: u8 [sp + 0x3e] = a5\n 68710: a5 = a4 >> 0x28\n 68713: u8 [sp + 0x3d] = a5\n 68716: a5 = a4 >> 0x20\n 68719: u8 [sp + 0x3c] = a5\n 68722: a5 = a4 >> 0x18\n 68725: u8 [sp + 0x3b] = a5\n 68728: a5 = a4 >> 0x10\n 68731: u8 [sp + 0x3a] = a5\n 68734: a4 = a4 >> 0x8\n 68737: u8 [sp + 0x39] = a4\n 68740: a4 = a3 >> 0x38\n 68743: u8 [sp + 0x37] = a4\n 68746: a4 = a3 >> 0x30\n 68749: u8 [sp + 0x36] = a4\n 68752: a4 = a3 >> 0x28\n 68755: u8 [sp + 0x35] = a4\n 68758: a4 = a3 >> 0x20\n 68761: u8 [sp + 0x34] = a4\n 68764: a4 = a3 >> 0x18\n 68767: u8 [sp + 0x33] = a4\n 68770: a4 = a3 >> 0x10\n 68773: u8 [sp + 0x32] = a4\n 68776: a3 = a3 >> 0x8\n 68779: u8 [sp + 0x31] = a3\n 68782: a3 = a2 >> 0x38\n 68785: u8 [sp + 0x2f] = a3\n 68788: a3 = a2 >> 0x30\n 68791: u8 [sp + 0x2e] = a3\n 68794: a3 = a2 >> 0x28\n 68797: u8 [sp + 0x2d] = a3\n 68800: a3 = a2 >> 0x20\n 68803: u8 [sp + 0x2c] = a3\n 68806: a3 = a2 >> 0x18\n 68809: u8 [sp + 0x2b] = a3\n 68812: a3 = a2 >> 0x10\n 68815: u8 [sp + 0x2a] = a3\n 68818: a2 = a2 >> 0x8\n 68821: u8 [sp + 0x29] = a2\n 68824: a2 = a1 >> 0x38\n 68827: u8 [sp + 0x27] = a2\n 68830: a2 = a1 >> 0x30\n 68833: u8 [sp + 0x26] = a2\n 68836: a2 = a1 >> 0x28\n 68839: u8 [sp + 0x25] = a2\n 68842: a2 = a1 >> 0x20\n 68845: u8 [sp + 0x24] = a2\n 68848: a2 = a1 >> 0x18\n 68851: u8 [sp + 0x23] = a2\n 68854: a2 = a1 >> 0x10\n 68857: u8 [sp + 0x22] = a2\n 68860: a1 = a1 >> 0x8\n 68863: u8 [sp + 0x21] = a1\n 68866: a1 = t1 & 0x1f\n 68869: a2 = sp + 0x20\n 68872: a1 = a1 | a2\n 68875: a2 = u8 [a1 + 0x9]\n 68878: a3 = u8 [a1 + 0x8]\n 68881: a4 = u8 [a1 + 0xa]\n 68884: a5 = u8 [a1 + 0xb]\n 68887: a2 = a2 << 0x8\n 68890: a2 = a2 | a3\n 68893: a4 = a4 << 0x10\n 68896: a5 = a5 << 0x18\n 68899: a4 = a4 | a5\n 68902: a2 = a2 | a4\n 68905: a3 = u8 [a1 + 0xd]\n 68908: a4 = u8 [a1 + 0xc]\n 68911: a5 = u8 [a1 + 0xe]\n 68914: s1 = u8 [a1 + 0xf]\n 68917: a3 = a3 << 0x8\n 68920: a3 = a3 | a4\n 68923: a5 = a5 << 0x10\n 68926: s1 = s1 << 0x18\n 68929: a5 = a5 | s1\n 68932: a3 = a3 | a5\n 68935: a3 = a3 << 0x20\n 68938: a2 = a2 | a3\n 68941: a3 = u8 [a1 + 0x1]\n 68944: a4 = u8 [a1]\n 68946: a5 = u8 [a1 + 0x2]\n 68949: s1 = u8 [a1 + 0x3]\n 68952: a3 = a3 << 0x8\n 68955: a3 = a3 | a4\n 68958: a5 = a5 << 0x10\n 68961: s1 = s1 << 0x18\n 68964: a5 = a5 | s1\n 68967: a3 = a3 | a5\n 68970: a4 = u8 [a1 + 0x5]\n 68973: a5 = u8 [a1 + 0x4]\n 68976: s1 = u8 [a1 + 0x6]\n 68979: a0 = u8 [a1 + 0x7]\n 68982: a4 = a4 << 0x8\n 68985: a4 = a4 | a5\n 68988: s1 = s1 << 0x10\n 68991: a0 = a0 << 0x18\n 68994: a0 = a0 | s1\n 68997: a0 = a0 | a4\n 69000: a0 = a0 << 0x20\n 69003: a3 = a3 | a0\n 69006: a0 = u8 [a1 + 0x11]\n 69009: a4 = u8 [a1 + 0x10]\n 69012: a5 = u8 [a1 + 0x12]\n 69015: a1 = u8 [a1 + 0x13]\n 69018: a0 = a0 << 0x8\n 69021: a0 = a0 | a4\n 69024: a5 = a5 << 0x10\n 69027: a1 = a1 << 0x18\n 69030: a1 = a1 | a5\n 69033: a0 = a0 | a1\n 69036: a3 = 0 if t0 != 0\n 69038: a2 = 0 if t0 != 0\n 69040: a0 = 0 if t0 != 0\n 69042: a1 = u64 [sp + 0x18]\n 69045: u64 [a1 + 0x10] = a0\n 69048: u64 [a1 + 0x8] = a2\n 69051: u64 [a1] = a3\n 69053: u64 [a1 + 24] = 0\n 69056: sp = s0 + 0xffffffffffffff40\n 69060: ra = u64 [sp + 0xb8]\n 69064: s0 = u64 [sp + 0xb0]\n 69068: s1 = u64 [sp + 0xa8]\n 69072: sp = sp + 0xc0\n 69076: ret\n      : @822 [@dyn 388] (gas: 14)\n 69078: a0 = u64 [sp + 0x50]\n 69081: a1 = u64 [sp + 0x58]\n 69084: a2 = u64 [sp + 0x40]\n 69087: a3 = u64 [sp + 0x48]\n 69090: u64 [s1 + 0x10] = a0\n 69093: u64 [s1 + 0x18] = a1\n 69096: u64 [s1] = a2\n 69098: u64 [s1 + 0x8] = a3\n 69101: sp = s0 + 0xffffffffffffff80\n 69104: ra = u64 [sp + 0x78]\n 69107: s0 = u64 [sp + 0x70]\n 69110: s1 = u64 [sp + 0x68]\n 69113: sp = sp + 0x80\n 69117: ret\n",
						"bytecode": {
							"object": ""
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {
							"bid(address,uint256)": "59d667a5",
							"box()": "754215a1",
							"boxData(address)": "a4e9ea9b",
							"boxes(address,uint256)": "13b980a4",
							"createYourBox()": "328e6997",
							"depositToBox(uint256,uint256)": "5cf510f8",
							"getBalance(address)": "f8b2cb4f",
							"getBoxData(address)": "5565687a",
							"getPrice(address)": "41976e09",
							"obligate(address)": "20c530e6",
							"withdraw(address)": "51cff8d9"
						}
					},
					"irOptimized": "/// @use-src 0:\"contracts/SwappyBox/SwappBox.sol\"\nobject \"SwappyBox_658\" {\n    code {\n        {\n            /// @src 0:1873:5258  \"contract SwappyBox{...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            let _1 := allocate_unbounded()\n            codecopy(_1, dataoffset(\"SwappyBox_658_deployed\"), datasize(\"SwappyBox_658_deployed\"))\n            return(_1, datasize(\"SwappyBox_658_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n    }\n    /// @use-src 0:\"contracts/SwappyBox/SwappBox.sol\"\n    object \"SwappyBox_658_deployed\" {\n        code {\n            {\n                /// @src 0:1873:5258  \"contract SwappyBox{...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let selector := shift_right_unsigned(calldataload(0))\n                    switch selector\n                    case 0x13b980a4 { external_fun_boxes() }\n                    case 0x20c530e6 { external_fun_obligate() }\n                    case 0x328e6997 { external_fun_createYourBox() }\n                    case 0x41976e09 { external_fun_getPrice() }\n                    case 0x51cff8d9 { external_fun_withdraw() }\n                    case 0x5565687a { external_fun_getBoxData() }\n                    case 0x59d667a5 { external_fun_bid() }\n                    case 0x5cf510f8 { external_fun_depositToBox() }\n                    case 0x754215a1 { external_fun_box() }\n                    case 0xa4e9ea9b { external_fun_boxData() }\n                    case 0xf8b2cb4f { external_fun_getBalance() }\n                    default { }\n                }\n                revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            }\n            function shift_right_unsigned(value) -> newValue\n            { newValue := shr(224, value) }\n            function allocate_unbounded() -> memPtr\n            { memPtr := mload(64) }\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            { revert(0, 0) }\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            { revert(0, 0) }\n            function cleanup_uint160(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function cleanup_address(value) -> cleaned\n            {\n                cleaned := cleanup_uint160(value)\n            }\n            function validator_revert_address(value)\n            {\n                if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n            }\n            function abi_decode_address(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_address(value)\n            }\n            function cleanup_uint256(value) -> cleaned\n            { cleaned := value }\n            function validator_revert_uint256(value)\n            {\n                if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n            }\n            function abi_decode_uint256(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_uint256(value)\n            }\n            function abi_decode_addresst_uint256(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n            }\n            function identity(value) -> ret\n            { ret := value }\n            function convert_uint160_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_uint160(value)))\n            }\n            function convert_uint160_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function mapping_index_access_mapping_address_array_address_dyn_storage_of_address(slot, key) -> dataSlot\n            {\n                mstore(0, convert_address_to_address(key))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function panic_error_0x32()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x32)\n                revert(0, 0x24)\n            }\n            function array_length_array_address_dyn_storage(value) -> length\n            { length := sload(value) }\n            function array_dataslot_array_address_dyn_storage(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function storage_array_index_access_address_dyn(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_array_address_dyn_storage(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_array_address_dyn_storage(array)\n                slot := add(dataArea, mul(index, 1))\n                offset := 0\n            }\n            function shift_right_unsigned_dynamic(bits, value) -> newValue\n            { newValue := shr(bits, value) }\n            function cleanup_from_storage_address(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function extract_from_storage_value_dynamict_address(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_address(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_address(sload(slot), offset)\n            }\n            /// @ast-id 241 @src 0:2174:2214  \"mapping(address=>address[]) public boxes\"\n            function getter_fun_boxes(key, key_1) -> ret\n            {\n                let slot := 1\n                let offset := 0\n                slot := mapping_index_access_mapping_address_array_address_dyn_storage_of_address(slot, key)\n                if iszero(lt(key_1, array_length_array_address_dyn_storage(slot))) { revert(0, 0) }\n                slot, offset := storage_array_index_access_address_dyn(slot, key_1)\n                ret := read_from_storage_split_dynamic_address(slot, offset)\n            }\n            /// @src 0:1873:5258  \"contract SwappyBox{...\"\n            function abi_encode_address(value, pos)\n            {\n                mstore(pos, cleanup_address(value))\n            }\n            function abi_encode_tuple_address(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_address(value0, add(headStart, 0))\n            }\n            function external_fun_boxes()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_addresst_uint256(4, calldatasize())\n                let ret := getter_fun_boxes(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_address(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_tuple_address(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n            }\n            function abi_encode_tuple(headStart) -> tail\n            { tail := add(headStart, 0) }\n            function external_fun_obligate()\n            {\n                let param := abi_decode_tuple_address(4, calldatasize())\n                fun_obligate(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function external_fun_createYourBox()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                fun_createYourBox()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_encode_uint256_to_uint256_fromStack(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function abi_encode_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_uint256_to_uint256_fromStack(value0, add(headStart, 0))\n            }\n            function external_fun_getPrice()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_address(4, calldatasize())\n                let ret := fun_getPrice(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_withdraw()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_address(4, calldatasize())\n                fun_withdraw(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_encode_uint256_to_uint256(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function abi_encode_address_to_address(value, pos)\n            {\n                mstore(pos, cleanup_address(value))\n            }\n            function abi_encode_struct_BidTrack_memory_ptr(value, pos)\n            {\n                let memberValue0 := mload(add(value, 0x00))\n                abi_encode_uint256_to_uint256(memberValue0, add(pos, 0x00))\n                let memberValue0_1 := mload(add(value, 0x20))\n                abi_encode_uint256_to_uint256(memberValue0_1, add(pos, 0x20))\n                let memberValue0_2 := mload(add(value, 0x40))\n                abi_encode_uint256_to_uint256(memberValue0_2, add(pos, 0x40))\n                let memberValue0_3 := mload(add(value, 0x60))\n                abi_encode_uint256_to_uint256(memberValue0_3, add(pos, 0x60))\n                let memberValue0_4 := mload(add(value, 0x80))\n                abi_encode_uint256_to_uint256(memberValue0_4, add(pos, 0x80))\n                let memberValue0_5 := mload(add(value, 0xa0))\n                abi_encode_address_to_address(memberValue0_5, add(pos, 0xa0))\n                let memberValue0_6 := mload(add(value, 0xc0))\n                abi_encode_address_to_address(memberValue0_6, add(pos, 0xc0))\n            }\n            function abi_encode_struct_BidTrack(headStart, value0) -> tail\n            {\n                tail := add(headStart, 224)\n                abi_encode_struct_BidTrack_memory_ptr(value0, add(headStart, 0))\n            }\n            function external_fun_getBoxData()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_address(4, calldatasize())\n                let ret := fun_getBoxData(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_struct_BidTrack(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_bid()\n            {\n                let param, param_1 := abi_decode_addresst_uint256(4, calldatasize())\n                fun_bid(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_uint256t_uint256(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n            }\n            function external_fun_depositToBox()\n            {\n                let param, param_1 := abi_decode_uint256t_uint256(4, calldatasize())\n                fun_depositToBox(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function cleanup_from_storage_contract_Box(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function extract_from_storage_value_dynamict_contract_Box(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_contract_Box(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_contract_Box(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_contract_Box(sload(slot), offset)\n            }\n            /// @ast-id 216 @src 0:1898:1912  \"Box public box\"\n            function getter_fun_box() -> ret_address\n            {\n                let slot := 0\n                let offset := 0\n                ret_address := read_from_storage_split_dynamic_contract_Box(slot, offset)\n            }\n            /// @src 0:1873:5258  \"contract SwappyBox{...\"\n            function convert_uint160_to_address_payable(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_contract_Box_to_address_payable(value) -> converted\n            {\n                converted := convert_uint160_to_address_payable(value)\n            }\n            function abi_encode_contract_Box(value, pos)\n            {\n                mstore(pos, convert_contract_Box_to_address_payable(value))\n            }\n            function abi_encode_tuple_contract_Box(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_contract_Box(value0, add(headStart, 0))\n            }\n            function external_fun_box()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_box()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_contract_Box(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function mapping_index_access_mapping_address_struct_BidTrack_storage_of_address(slot, key) -> dataSlot\n            {\n                mstore(0, convert_address_to_address(key))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function shift_right_0_unsigned(value) -> newValue\n            { newValue := shr(0, value) }\n            function cleanup_from_storage_uint256(value) -> cleaned\n            { cleaned := value }\n            function extract_from_storage_value_offset_uint256(slot_value) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_uint256(slot) -> value\n            {\n                value := extract_from_storage_value_offset_uint256(sload(slot))\n            }\n            function extract_from_storage_value_offset_address(slot_value) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_address(slot) -> value\n            {\n                value := extract_from_storage_value_offset_address(sload(slot))\n            }\n            /// @ast-id 246 @src 0:2220:2261  \"mapping(address=>BidTrack) public boxData\"\n            function getter_fun_boxData(key) -> ret, ret_1, ret_2, ret_3, ret_4, ret_5, ret_6\n            {\n                let slot := 2\n                slot := mapping_index_access_mapping_address_struct_BidTrack_storage_of_address(slot, key)\n                ret := read_from_storage_split_offset_uint256(add(slot, 0))\n                ret_1 := read_from_storage_split_offset_uint256(add(slot, 1))\n                ret_2 := read_from_storage_split_offset_uint256(add(slot, 2))\n                ret_3 := read_from_storage_split_offset_uint256(add(slot, 3))\n                ret_4 := read_from_storage_split_offset_uint256(add(slot, 4))\n                ret_5 := read_from_storage_split_offset_address(add(slot, 5))\n                ret_6 := read_from_storage_split_offset_address(add(slot, 6))\n            }\n            /// @src 0:1873:5258  \"contract SwappyBox{...\"\n            function abi_encode_uint256_uint256_uint256_uint256_uint256_address_address(headStart, value0, value1, value2, value3, value4, value5, value6) -> tail\n            {\n                tail := add(headStart, 224)\n                abi_encode_uint256_to_uint256_fromStack(value0, add(headStart, 0))\n                abi_encode_uint256_to_uint256_fromStack(value1, add(headStart, 32))\n                abi_encode_uint256_to_uint256_fromStack(value2, add(headStart, 64))\n                abi_encode_uint256_to_uint256_fromStack(value3, add(headStart, 96))\n                abi_encode_uint256_to_uint256_fromStack(value4, add(headStart, 128))\n                abi_encode_address(value5, add(headStart, 160))\n                abi_encode_address(value6, add(headStart, 192))\n            }\n            function external_fun_boxData()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_address(4, calldatasize())\n                let ret, ret_1, ret_2, ret_3, ret_4, ret_5, ret_6 := getter_fun_boxData(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256_uint256_uint256_uint256_uint256_address_address(memPos, ret, ret_1, ret_2, ret_3, ret_4, ret_5, ret_6)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_getBalance()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_address(4, calldatasize())\n                let ret := fun_getBalance(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            { revert(0, 0) }\n            function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function store_literal_in_memory_c062c36797a8904dcf800cd5f3b643a1f2bf194dc40f30fc48d95c98a8539be8(memPtr)\n            {\n                mstore(add(memPtr, 0), \"you are not bid winner\")\n            }\n            function abi_encode_stringliteral_c062c36797a8904dcf800cd5f3b643a1f2bf194dc40f30fc48d95c98a8539be8(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 22)\n                store_literal_in_memory_c062c36797a8904dcf800cd5f3b643a1f2bf194dc40f30fc48d95c98a8539be8(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_c062(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_c062c36797a8904dcf800cd5f3b643a1f2bf194dc40f30fc48d95c98a8539be8(tail)\n            }\n            function require_helper_stringliteral_c062(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_c062(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function panic_error_0x11()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x11)\n                revert(0, 0x24)\n            }\n            function checked_sub_uint256(x, y) -> diff\n            {\n                x := cleanup_uint256(x)\n                y := cleanup_uint256(y)\n                diff := sub(x, y)\n                if gt(diff, x) { panic_error_0x11() }\n            }\n            function store_literal_in_memory_12290b3403b12487975d597e9b87eb52c50c156c95eb92d900379afdd6bb41e2(memPtr)\n            {\n                mstore(add(memPtr, 0), \"obligation reverted\")\n            }\n            function abi_encode_stringliteral_12290b3403b12487975d597e9b87eb52c50c156c95eb92d900379afdd6bb41e2(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 19)\n                store_literal_in_memory_12290b3403b12487975d597e9b87eb52c50c156c95eb92d900379afdd6bb41e2(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_12290b3403b12487975d597e9b87eb52c50c156c95eb92d900379afdd6bb41e2(tail)\n            }\n            function require_helper_stringliteral(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function convert_address_to_address_payable(value) -> converted\n            {\n                converted := convert_uint160_to_address_payable(value)\n            }\n            function convert_address_payable_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function array_storeLengthForEncoding_bytes_nonPadded_inplace(pos, length) -> updated_pos\n            { updated_pos := pos }\n            function abi_encode_stringliteral_c5d2(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_bytes_nonPadded_inplace(pos, 0)\n                end := add(pos, 0)\n            }\n            function abi_encode_packed_stringliteral_c5d2(pos) -> end\n            {\n                pos := abi_encode_stringliteral_c5d2(pos)\n                end := pos\n            }\n            function round_up_to_mul_of(value) -> result\n            {\n                result := and(add(value, 31), not(31))\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function allocate_memory(size) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                finalize_allocation(memPtr, size)\n            }\n            function array_allocation_size_bytes(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := round_up_to_mul_of(length)\n                size := add(size, 0x20)\n            }\n            function allocate_memory_array_bytes(length) -> memPtr\n            {\n                let allocSize := array_allocation_size_bytes(length)\n                memPtr := allocate_memory(allocSize)\n                mstore(memPtr, length)\n            }\n            function zero_value_for_split_bytes() -> ret\n            { ret := 96 }\n            function extract_returndata() -> data\n            {\n                switch returndatasize()\n                case 0 {\n                    data := zero_value_for_split_bytes()\n                }\n                default {\n                    data := allocate_memory_array_bytes(returndatasize())\n                    returndatacopy(add(data, 0x20), 0, returndatasize())\n                }\n            }\n            function store_literal_in_memory_8f44d68b1a26169d304522fa2f95aa938d98120d628d1db5726120ca84e53b43(memPtr)\n            {\n                mstore(add(memPtr, 0), \"failed\")\n            }\n            function abi_encode_stringliteral_8f44(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 6)\n                store_literal_in_memory_8f44d68b1a26169d304522fa2f95aa938d98120d628d1db5726120ca84e53b43(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_8f44(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_8f44(tail)\n            }\n            function require_helper_stringliteral_8f44(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_8f44(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function convert_uint160_to_contract_Box(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_payable_to_contract_Box(value) -> converted\n            {\n                converted := convert_uint160_to_contract_Box(value)\n            }\n            function convert_contract_Box_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()\n            { revert(0, 0) }\n            function shift_left_224(value) -> newValue\n            { newValue := shl(224, value) }\n            function abi_decode_fromMemory(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function cleanup_bool(value) -> cleaned\n            {\n                cleaned := iszero(iszero(value))\n            }\n            function abi_encode_bool(value, pos)\n            {\n                mstore(pos, cleanup_bool(value))\n            }\n            function abi_encode_address_bool(headStart, value0, value1) -> tail\n            {\n                tail := add(headStart, 64)\n                abi_encode_address(value0, add(headStart, 0))\n                abi_encode_bool(value1, add(headStart, 32))\n            }\n            function revert_forward()\n            {\n                let pos := allocate_unbounded()\n                returndatacopy(pos, 0, returndatasize())\n                revert(pos, returndatasize())\n            }\n            /// @ast-id 426 @src 0:2905:3501  \"function obligate(address _contract) public payable{...\"\n            function fun_obligate(var_contract)\n            {\n                /// @src 0:2974:2981  \"boxData\"\n                let _1_slot := 0x02\n                let expr_354_slot := _1_slot\n                /// @src 0:2982:2991  \"_contract\"\n                let _1 := var_contract\n                let expr := _1\n                /// @src 0:2974:2992  \"boxData[_contract]\"\n                let _2 := mapping_index_access_mapping_address_struct_BidTrack_storage_of_address(expr_354_slot, expr)\n                let _4_slot := _2\n                let expr_356_slot := _4_slot\n                /// @src 0:2974:3006  \"boxData[_contract].currentWinner\"\n                let _3 := add(expr_356_slot, 5)\n                let _4 := read_from_storage_split_offset_address(_3)\n                let expr_1 := _4\n                /// @src 0:3010:3020  \"msg.sender\"\n                let expr_2 := caller()\n                /// @src 0:2974:3020  \"boxData[_contract].currentWinner == msg.sender\"\n                let expr_3 := eq(cleanup_address(expr_1), cleanup_address(expr_2))\n                /// @src 0:2966:3046  \"require(boxData[_contract].currentWinner == msg.sender,\\\"you are not bid winner\\\")\"\n                require_helper_stringliteral_c062(expr_3)\n                /// @src 0:3087:3096  \"_contract\"\n                let _5 := var_contract\n                let expr_4 := _5\n                /// @src 0:3079:3097  \"address(_contract)\"\n                let expr_5 := expr_4\n                /// @src 0:3079:3105  \"address(_contract).balance\"\n                let expr_6 := balance(expr_5)\n                /// @src 0:3056:3105  \"uint depositedAmount = address(_contract).balance\"\n                let var_depositedAmount := expr_6\n                /// @src 0:3136:3143  \"boxData\"\n                let _8_slot := 0x02\n                let expr_374_slot := _8_slot\n                /// @src 0:3144:3153  \"_contract\"\n                let _6 := var_contract\n                let expr_7 := _6\n                /// @src 0:3136:3154  \"boxData[_contract]\"\n                let _7 := mapping_index_access_mapping_address_struct_BidTrack_storage_of_address(expr_374_slot, expr_7)\n                let _11_slot := _7\n                let expr_376_slot := _11_slot\n                /// @src 0:3136:3164  \"boxData[_contract].basePrice\"\n                let _8 := add(expr_376_slot, 3)\n                let _9 := read_from_storage_split_offset_uint256(_8)\n                let expr_8 := _9\n                /// @src 0:3115:3164  \"uint paidBidAmount = boxData[_contract].basePrice\"\n                let var_paidBidAmount := expr_8\n                /// @src 0:3198:3213  \"depositedAmount\"\n                let _10 := var_depositedAmount\n                let expr_9 := _10\n                /// @src 0:3216:3229  \"paidBidAmount\"\n                let _11 := var_paidBidAmount\n                let expr_10 := _11\n                /// @src 0:3198:3229  \"depositedAmount - paidBidAmount\"\n                let expr_11 := checked_sub_uint256(expr_9, expr_10)\n                /// @src 0:3174:3229  \"uint amountToTransfer = depositedAmount - paidBidAmount\"\n                let var_amountToTransfer := expr_11\n                /// @src 0:3247:3263  \"amountToTransfer\"\n                let _12 := var_amountToTransfer\n                let expr_12 := _12\n                /// @src 0:3267:3276  \"msg.value\"\n                let expr_13 := callvalue()\n                /// @src 0:3247:3276  \"amountToTransfer == msg.value\"\n                let expr_14 := eq(cleanup_uint256(expr_12), cleanup_uint256(expr_13))\n                /// @src 0:3239:3299  \"require(amountToTransfer == msg.value,\\\"obligation reverted\\\")\"\n                require_helper_stringliteral(expr_14)\n                /// @src 0:3333:3340  \"boxData\"\n                let _17_slot := 0x02\n                let expr_397_slot := _17_slot\n                /// @src 0:3341:3350  \"_contract\"\n                let _13 := var_contract\n                let expr_15 := _13\n                /// @src 0:3333:3351  \"boxData[_contract]\"\n                let _14 := mapping_index_access_mapping_address_struct_BidTrack_storage_of_address(expr_397_slot, expr_15)\n                let _20_slot := _14\n                let expr_399_slot := _20_slot\n                /// @src 0:3333:3365  \"boxData[_contract].poolInitiator\"\n                let _15 := add(expr_399_slot, 6)\n                let _16 := read_from_storage_split_offset_address(_15)\n                let expr_16 := _16\n                /// @src 0:3325:3366  \"payable(boxData[_contract].poolInitiator)\"\n                let expr_17 := convert_address_to_address_payable(expr_16)\n                /// @src 0:3325:3371  \"payable(boxData[_contract].poolInitiator).call\"\n                let expr_402_address := convert_address_payable_to_address(expr_17)\n                /// @src 0:3378:3394  \"amountToTransfer\"\n                let _17 := var_amountToTransfer\n                let expr_18 := _17\n                /// @src 0:3325:3395  \"payable(boxData[_contract].poolInitiator).call{value:amountToTransfer}\"\n                let expr_404_address := expr_402_address\n                let expr_404_value := expr_18\n                /// @src 0:3325:3399  \"payable(boxData[_contract].poolInitiator).call{value:amountToTransfer}(\\\"\\\")\"\n                let _18 := allocate_unbounded()\n                let _19 := sub(abi_encode_packed_stringliteral_c5d2(_18), _18)\n                let expr_component := call(gas(), expr_404_address, expr_404_value, _18, _19, 0, 0)\n                pop(extract_returndata())\n                /// @src 0:3309:3399  \"(bool success,)=payable(boxData[_contract].poolInitiator).call{value:amountToTransfer}(\\\"\\\")\"\n                let var_success := expr_component\n                /// @src 0:3418:3425  \"success\"\n                let _20 := var_success\n                let expr_19 := _20\n                /// @src 0:3410:3435  \"require(success,\\\"failed\\\")\"\n                require_helper_stringliteral_8f44(expr_19)\n                /// @src 0:3457:3466  \"_contract\"\n                let _21 := var_contract\n                let expr_20 := _21\n                /// @src 0:3449:3467  \"payable(_contract)\"\n                let expr_21 := convert_address_to_address_payable(expr_20)\n                /// @src 0:3445:3468  \"Box(payable(_contract))\"\n                let expr_address := convert_address_payable_to_contract_Box(expr_21)\n                /// @src 0:3445:3477  \"Box(payable(_contract)).withdraw\"\n                let expr_419_address := convert_contract_Box_to_address(expr_address)\n                let expr_419_functionSelector := 0x5437e401\n                /// @src 0:3478:3488  \"msg.sender\"\n                let expr_22 := caller()\n                /// @src 0:3489:3493  \"true\"\n                let expr_23 := 0x01\n                /// @src 0:3445:3494  \"Box(payable(_contract)).withdraw(msg.sender,true)\"\n                if iszero(extcodesize(expr_419_address))\n                {\n                    revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()\n                }\n                let _22 := allocate_unbounded()\n                mstore(_22, shift_left_224(expr_419_functionSelector))\n                let _23 := abi_encode_address_bool(add(_22, 4), expr_22, expr_23)\n                let _24 := call(gas(), expr_419_address, 0, _22, sub(_23, _22), _22, 0)\n                if iszero(_24) { revert_forward() }\n                if _24\n                {\n                    let _25 := 0\n                    if gt(_25, returndatasize()) { _25 := returndatasize() }\n                    finalize_allocation(_22, _25)\n                    abi_decode_fromMemory(_22, add(_22, _25))\n                }\n            }\n            /// @src 0:1873:5258  \"contract SwappyBox{...\"\n            function convert_array_array_address_dyn_storage_to_array_address_dyn_ptr(value) -> converted\n            { converted := value }\n            function array_dataslot_array_address_dyn_storage_ptr(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function array_length_array_address_dyn_storage_ptr(value) -> length\n            { length := sload(value) }\n            function storage_array_index_access_address_dyn_ptr(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_array_address_dyn_storage_ptr(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_array_address_dyn_storage_ptr(array)\n                slot := add(dataArea, mul(index, 1))\n                offset := 0\n            }\n            function shift_left_dynamic(bits, value) -> newValue\n            { newValue := shl(bits, value) }\n            function update_byte_slice_dynamic20(value, shiftBytes, toInsert) -> result\n            {\n                let shiftBits := mul(shiftBytes, 8)\n                let mask := shift_left_dynamic(shiftBits, sub(shl(160, 1), 1))\n                toInsert := shift_left_dynamic(shiftBits, toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function prepare_store_address(value) -> ret\n            { ret := value }\n            function update_storage_value_address_to_address(slot, offset, value)\n            {\n                let convertedValue := convert_address_to_address(value)\n                sstore(slot, update_byte_slice_dynamic20(sload(slot), offset, prepare_store_address(convertedValue)))\n            }\n            function array_push_from_address_to_array_address_dyn_storage_ptr(array, value0)\n            {\n                let oldLen := sload(array)\n                if iszero(lt(oldLen, 18446744073709551616)) { panic_error_0x41() }\n                sstore(array, add(oldLen, 1))\n                let slot, offset := storage_array_index_access_address_dyn_ptr(array, oldLen)\n                update_storage_value_address_to_address(slot, offset, value0)\n            }\n            /// @ast-id 269 @src 0:2267:2380  \"function createYourBox() public {...\"\n            function fun_createYourBox()\n            {\n                /// @src 0:2318:2327  \"new Box()\"\n                let _1 := allocate_unbounded()\n                let _2 := add(_1, datasize(\"Box_213\"))\n                if or(gt(_2, 0xffffffffffffffff), lt(_2, _1)) { panic_error_0x41() }\n                datacopy(_1, dataoffset(\"Box_213\"), datasize(\"Box_213\"))\n                _2 := abi_encode_tuple(_2)\n                let expr_255_address := create(0, _1, sub(_2, _1))\n                if iszero(expr_255_address) { revert_forward() }\n                /// @src 0:2309:2327  \"Box bx = new Box()\"\n                let var_bx_address := expr_255_address\n                /// @src 0:2337:2342  \"boxes\"\n                let _34_slot := 0x01\n                let expr_257_slot := _34_slot\n                /// @src 0:2343:2353  \"msg.sender\"\n                let expr := caller()\n                /// @src 0:2337:2354  \"boxes[msg.sender]\"\n                let _3 := mapping_index_access_mapping_address_array_address_dyn_storage_of_address(expr_257_slot, expr)\n                let _36_slot := _3\n                let expr_260_slot := _36_slot\n                /// @src 0:2337:2359  \"boxes[msg.sender].push\"\n                let expr_self_slot := convert_array_array_address_dyn_storage_to_array_address_dyn_ptr(expr_260_slot)\n                /// @src 0:2368:2370  \"bx\"\n                let _address := var_bx_address\n                let expr_264_address := _address\n                /// @src 0:2360:2371  \"address(bx)\"\n                let expr_1 := convert_contract_Box_to_address(expr_264_address)\n                /// @src 0:2337:2372  \"boxes[msg.sender].push(address(bx))\"\n                array_push_from_address_to_array_address_dyn_storage_ptr(expr_self_slot, expr_1)\n            }\n            /// @src 0:1873:5258  \"contract SwappyBox{...\"\n            function zero_value_for_split_uint256() -> ret\n            { ret := 0 }\n            function cleanup_t_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_300000000000000000_by_1_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_t_rational_by(value)))\n            }\n            /// @src 0:2133:2165  \"uint constant SLOPE = 0.3 * 1e18\"\n            function constant_SLOPE() -> ret\n            {\n                /// @src 0:2155:2165  \"0.3 * 1e18\"\n                let expr := 0x0429d069189e0000\n                let _1 := convert_rational_300000000000000000_by_1_to_uint256(expr)\n                ret := _1\n            }\n            function checked_mul_uint256(x, y) -> product\n            {\n                x := cleanup_uint256(x)\n                y := cleanup_uint256(y)\n                let product_raw := mul(x, y)\n                product := cleanup_uint256(product_raw)\n                if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n            }\n            function checked_add_uint256(x, y) -> sum\n            {\n                x := cleanup_uint256(x)\n                y := cleanup_uint256(y)\n                sum := add(x, y)\n                if gt(x, sum) { panic_error_0x11() }\n            }\n            /// @ast-id 630 @src 0:4820:5005  \"function getPrice(address _contract) public view returns(uint256){...\"\n            function fun_getPrice(var_contract) -> var_\n            {\n                /// @src 0:4877:4884  \"uint256\"\n                let zero_uint256 := zero_value_for_split_uint256()\n                var_ := zero_uint256\n                /// @src 0:4909:4916  \"boxData\"\n                let _39_slot := 0x02\n                let expr_615_slot := _39_slot\n                /// @src 0:4917:4926  \"_contract\"\n                let _1 := var_contract\n                let expr := _1\n                /// @src 0:4909:4927  \"boxData[_contract]\"\n                let _2 := mapping_index_access_mapping_address_struct_BidTrack_storage_of_address(expr_615_slot, expr)\n                let _42_slot := _2\n                let expr_617_slot := _42_slot\n                /// @src 0:4909:4936  \"boxData[_contract].totalBid\"\n                let _3 := add(expr_617_slot, 2)\n                let _4 := read_from_storage_split_offset_uint256(_3)\n                let expr_1 := _4\n                /// @src 0:4895:4936  \"uint demand = boxData[_contract].totalBid\"\n                let var_demand := expr_1\n                /// @src 0:4953:4958  \"SLOPE\"\n                let expr_2 := constant_SLOPE()\n                /// @src 0:4961:4967  \"demand\"\n                let _5 := var_demand\n                let expr_3 := _5\n                /// @src 0:4953:4967  \"SLOPE * demand\"\n                let expr_4 := checked_mul_uint256(expr_2, expr_3)\n                /// @src 0:4970:4977  \"boxData\"\n                let _47_slot := 0x02\n                let expr_623_slot := _47_slot\n                /// @src 0:4978:4987  \"_contract\"\n                let _6 := var_contract\n                let expr_5 := _6\n                /// @src 0:4970:4988  \"boxData[_contract]\"\n                let _7 := mapping_index_access_mapping_address_struct_BidTrack_storage_of_address(expr_623_slot, expr_5)\n                let _50_slot := _7\n                let expr_625_slot := _50_slot\n                /// @src 0:4970:4998  \"boxData[_contract].basePrice\"\n                let _8 := add(expr_625_slot, 3)\n                let _9 := read_from_storage_split_offset_uint256(_8)\n                let expr_6 := _9\n                /// @src 0:4953:4998  \"SLOPE * demand + boxData[_contract].basePrice\"\n                let expr_7 := checked_add_uint256(expr_4, expr_6)\n                /// @src 0:4946:4998  \"return SLOPE * demand + boxData[_contract].basePrice\"\n                var_ := expr_7\n                leave\n            }\n            /// @src 0:1873:5258  \"contract SwappyBox{...\"\n            function store_literal_in_memory_93df12706b057ee0ca40fdaa0d0d30fa1600f95e9b687379a17bec9aa57a6c9b(memPtr)\n            {\n                mstore(add(memPtr, 0), \"you are not initiator\")\n            }\n            function abi_encode_stringliteral_93df(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 21)\n                store_literal_in_memory_93df12706b057ee0ca40fdaa0d0d30fa1600f95e9b687379a17bec9aa57a6c9b(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_93df(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_93df(tail)\n            }\n            function require_helper_stringliteral_93df(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_93df(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            /// @ast-id 606 @src 0:4573:4812  \"function withdraw(address _contract) public{...\"\n            function fun_withdraw(var_contract)\n            {\n                /// @src 0:4646:4653  \"boxData\"\n                let _53_slot := 0x02\n                let expr_580_slot := _53_slot\n                /// @src 0:4654:4663  \"_contract\"\n                let _1 := var_contract\n                let expr := _1\n                /// @src 0:4646:4664  \"boxData[_contract]\"\n                let _2 := mapping_index_access_mapping_address_struct_BidTrack_storage_of_address(expr_580_slot, expr)\n                let _56_slot := _2\n                let expr_582_slot := _56_slot\n                /// @src 0:4646:4678  \"boxData[_contract].poolInitiator\"\n                let _3 := add(expr_582_slot, 6)\n                let _4 := read_from_storage_split_offset_address(_3)\n                let expr_1 := _4\n                /// @src 0:4626:4678  \"address initiator = boxData[_contract].poolInitiator\"\n                let var_initiator := expr_1\n                /// @src 0:4696:4705  \"initiator\"\n                let _5 := var_initiator\n                let expr_2 := _5\n                /// @src 0:4709:4719  \"msg.sender\"\n                let expr_3 := caller()\n                /// @src 0:4696:4719  \"initiator == msg.sender\"\n                let expr_4 := eq(cleanup_address(expr_2), cleanup_address(expr_3))\n                /// @src 0:4688:4744  \"require(initiator == msg.sender,\\\"you are not initiator\\\")\"\n                require_helper_stringliteral_93df(expr_4)\n                /// @src 0:4766:4775  \"_contract\"\n                let _6 := var_contract\n                let expr_5 := _6\n                /// @src 0:4758:4776  \"payable(_contract)\"\n                let expr_6 := convert_address_to_address_payable(expr_5)\n                /// @src 0:4754:4777  \"Box(payable(_contract))\"\n                let expr_598_address := convert_address_payable_to_contract_Box(expr_6)\n                /// @src 0:4754:4786  \"Box(payable(_contract)).withdraw\"\n                let expr_599_address := convert_contract_Box_to_address(expr_598_address)\n                let expr_599_functionSelector := 0x5437e401\n                /// @src 0:4787:4797  \"msg.sender\"\n                let expr_7 := caller()\n                /// @src 0:4798:4803  \"false\"\n                let expr_8 := 0x00\n                /// @src 0:4754:4804  \"Box(payable(_contract)).withdraw(msg.sender,false)\"\n                if iszero(extcodesize(expr_599_address))\n                {\n                    revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()\n                }\n                let _7 := allocate_unbounded()\n                mstore(_7, shift_left_224(expr_599_functionSelector))\n                let _8 := abi_encode_address_bool(add(_7, 4), expr_7, expr_8)\n                let _9 := call(gas(), expr_599_address, 0, _7, sub(_8, _7), _7, 0)\n                if iszero(_9) { revert_forward() }\n                if _9\n                {\n                    let _10 := 0\n                    if gt(_10, returndatasize()) { _10 := returndatasize() }\n                    finalize_allocation(_7, _10)\n                    abi_decode_fromMemory(_7, add(_7, _10))\n                }\n            }\n            /// @src 0:1873:5258  \"contract SwappyBox{...\"\n            function allocate_memory_struct_struct_BidTrack() -> memPtr\n            {\n                memPtr := allocate_memory(224)\n            }\n            function zero_value_for_uint256() -> ret\n            { ret := 0 }\n            function zero_value_for_address() -> ret\n            { ret := 0 }\n            function allocate_and_zero_memory_struct_struct_BidTrack() -> memPtr\n            {\n                memPtr := allocate_memory_struct_struct_BidTrack()\n                let offset := memPtr\n                mstore(offset, zero_value_for_uint256())\n                offset := add(offset, 32)\n                mstore(offset, zero_value_for_uint256())\n                offset := add(offset, 32)\n                mstore(offset, zero_value_for_uint256())\n                offset := add(offset, 32)\n                mstore(offset, zero_value_for_uint256())\n                offset := add(offset, 32)\n                mstore(offset, zero_value_for_uint256())\n                offset := add(offset, 32)\n                mstore(offset, zero_value_for_address())\n                offset := add(offset, 32)\n                mstore(offset, zero_value_for_address())\n                offset := add(offset, 32)\n            }\n            function zero_value_for_split_struct_BidTrack() -> ret\n            {\n                ret := allocate_and_zero_memory_struct_struct_BidTrack()\n            }\n            function write_to_memory_uint256(memPtr, value)\n            {\n                mstore(memPtr, cleanup_uint256(value))\n            }\n            function write_to_memory_address(memPtr, value)\n            {\n                mstore(memPtr, cleanup_address(value))\n            }\n            function read_from_storage_reference_type_struct_BidTrack(slot) -> value\n            {\n                value := allocate_memory_struct_struct_BidTrack()\n                let memberValue := read_from_storage_split_offset_uint256(add(slot, 0))\n                write_to_memory_uint256(add(value, 0), memberValue)\n                let memberValue_1 := read_from_storage_split_offset_uint256(add(slot, 1))\n                write_to_memory_uint256(add(value, 32), memberValue_1)\n                let memberValue_2 := read_from_storage_split_offset_uint256(add(slot, 2))\n                write_to_memory_uint256(add(value, 64), memberValue_2)\n                let memberValue_3 := read_from_storage_split_offset_uint256(add(slot, 3))\n                write_to_memory_uint256(add(value, 96), memberValue_3)\n                let memberValue_4 := read_from_storage_split_offset_uint256(add(slot, 4))\n                write_to_memory_uint256(add(value, 128), memberValue_4)\n                let memberValue_5 := read_from_storage_split_offset_address(add(slot, 5))\n                write_to_memory_address(add(value, 160), memberValue_5)\n                let memberValue_6 := read_from_storage_split_offset_address(add(slot, 6))\n                write_to_memory_address(add(value, 192), memberValue_6)\n            }\n            function convert_struct_BidTrack_storage_to_struct_BidTrack(value) -> converted\n            {\n                converted := read_from_storage_reference_type_struct_BidTrack(value)\n            }\n            /// @ast-id 643 @src 0:5017:5134  \"function getBoxData(address _contract) public view returns(BidTrack memory){...\"\n            function fun_getBoxData(var_contract) -> var_mpos\n            {\n                /// @src 0:5076:5091  \"BidTrack memory\"\n                let zero_struct_BidTrack_mpos := zero_value_for_split_struct_BidTrack()\n                var_mpos := zero_struct_BidTrack_mpos\n                /// @src 0:5109:5116  \"boxData\"\n                let _66_slot := 0x02\n                let expr_638_slot := _66_slot\n                /// @src 0:5117:5126  \"_contract\"\n                let _1 := var_contract\n                let expr := _1\n                /// @src 0:5109:5127  \"boxData[_contract]\"\n                let _2 := mapping_index_access_mapping_address_struct_BidTrack_storage_of_address(expr_638_slot, expr)\n                let _69_slot := _2\n                let expr_640_slot := _69_slot\n                /// @src 0:5102:5127  \"return boxData[_contract]\"\n                var_mpos := convert_struct_BidTrack_storage_to_struct_BidTrack(expr_640_slot)\n                leave\n            }\n            /// @src 0:1873:5258  \"contract SwappyBox{...\"\n            function store_literal_in_memory_fa392de55f37f34500c9ad4ecd52c9fa50f37c3071e1350b11e7a65abd1837b8(memPtr)\n            {\n                mstore(add(memPtr, 0), \"you already own\")\n            }\n            function abi_encode_stringliteral_fa39(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 15)\n                store_literal_in_memory_fa392de55f37f34500c9ad4ecd52c9fa50f37c3071e1350b11e7a65abd1837b8(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_fa39(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_fa39(tail)\n            }\n            function require_helper_stringliteral_fa39(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_fa39(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function require_helper(condition)\n            {\n                if iszero(condition) { revert(0, 0) }\n            }\n            function cleanup_t_rational_by_1(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_1_by_1_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_t_rational_by_1(value)))\n            }\n            function cleanup_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_100_by_1_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n            }\n            function panic_error_0x12()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x12)\n                revert(0, 0x24)\n            }\n            function checked_div_uint256(x, y) -> r\n            {\n                x := cleanup_uint256(x)\n                y := cleanup_uint256(y)\n                if iszero(y) { panic_error_0x12() }\n                r := div(x, y)\n            }\n            function shift_left(value) -> newValue\n            { newValue := shl(0, value) }\n            function update_byte_slice_shift_0(value, toInsert) -> result\n            {\n                let mask := sub(shl(160, 1), 1)\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function update_storage_value_offset_address_to_address(slot, value)\n            {\n                let convertedValue := convert_address_to_address(value)\n                sstore(slot, update_byte_slice_shift_0(sload(slot), prepare_store_address(convertedValue)))\n            }\n            function update_byte_slice_shift(value, toInsert) -> result\n            {\n                let mask := not(0)\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_uint256_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_uint256(value)))\n            }\n            function prepare_store_uint256(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_uint256_to_uint256(slot, value)\n            {\n                let convertedValue := convert_uint256_to_uint256(value)\n                sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n            }\n            function increment_uint256(value) -> ret\n            {\n                value := cleanup_uint256(value)\n                if eq(value, not(0)) { panic_error_0x11() }\n                ret := add(value, 1)\n            }\n            function cleanup_rational_1500_by(value) -> cleaned\n            { cleaned := value }\n            function convert_t_rational_by_to_t_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_1500_by(value)))\n            }\n            function cleanup_rational_0_by(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_0_by_1_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_0_by(value)))\n            }\n            /// @ast-id 573 @src 0:3507:4563  \"function bid(address _contract,uint bidAmount) public payable{...\"\n            function fun_bid(var__contract, var_bidAmount)\n            {\n                /// @src 0:3586:3593  \"boxData\"\n                let _70_slot := 0x02\n                let expr_434_slot := _70_slot\n                /// @src 0:3594:3603  \"_contract\"\n                let _1 := var__contract\n                let expr := _1\n                /// @src 0:3586:3604  \"boxData[_contract]\"\n                let _2 := mapping_index_access_mapping_address_struct_BidTrack_storage_of_address(expr_434_slot, expr)\n                let _73_slot := _2\n                let expr_436_slot := _73_slot\n                /// @src 0:3586:3618  \"boxData[_contract].currentWinner\"\n                let _3 := add(expr_436_slot, 5)\n                let _4 := read_from_storage_split_offset_address(_3)\n                let expr_1 := _4\n                /// @src 0:3622:3632  \"msg.sender\"\n                let expr_2 := caller()\n                /// @src 0:3586:3632  \"boxData[_contract].currentWinner != msg.sender\"\n                let expr_3 := iszero(eq(cleanup_address(expr_1), cleanup_address(expr_2)))\n                /// @src 0:3578:3651  \"require(boxData[_contract].currentWinner != msg.sender,\\\"you already own\\\")\"\n                require_helper_stringliteral_fa39(expr_3)\n                /// @src 0:3687:3696  \"_contract\"\n                let _5 := var__contract\n                let expr_4 := _5\n                /// @src 0:3678:3697  \"getPrice(_contract)\"\n                let expr_5 := fun_getPrice(expr_4)\n                /// @src 0:3661:3697  \"uint bestPrice = getPrice(_contract)\"\n                let var_bestPrice := expr_5\n                /// @src 0:3710:3719  \"bestPrice\"\n                let _6 := var_bestPrice\n                let expr_6 := _6\n                /// @src 0:3723:3732  \"bidAmount\"\n                let _7 := var_bidAmount\n                let expr_7 := _7\n                /// @src 0:3710:3732  \"bestPrice <= bidAmount\"\n                let expr_8 := iszero(gt(cleanup_uint256(expr_6), cleanup_uint256(expr_7)))\n                /// @src 0:3710:3776  \"bestPrice <= bidAmount && boxData[_contract].lastPrice < bidAmount\"\n                let expr_9 := expr_8\n                if expr_9\n                {\n                    /// @src 0:3736:3743  \"boxData\"\n                    let _79_slot := 0x02\n                    let expr_453_slot := _79_slot\n                    /// @src 0:3744:3753  \"_contract\"\n                    let _8 := var__contract\n                    let expr_10 := _8\n                    /// @src 0:3736:3754  \"boxData[_contract]\"\n                    let _9 := mapping_index_access_mapping_address_struct_BidTrack_storage_of_address(expr_453_slot, expr_10)\n                    let _82_slot := _9\n                    let expr_455_slot := _82_slot\n                    /// @src 0:3736:3764  \"boxData[_contract].lastPrice\"\n                    let _10 := add(expr_455_slot, 4)\n                    let _11 := read_from_storage_split_offset_uint256(_10)\n                    let expr_11 := _11\n                    /// @src 0:3767:3776  \"bidAmount\"\n                    let _12 := var_bidAmount\n                    let expr_12 := _12\n                    /// @src 0:3736:3776  \"boxData[_contract].lastPrice < bidAmount\"\n                    let expr_13 := lt(cleanup_uint256(expr_11), cleanup_uint256(expr_12))\n                    /// @src 0:3710:3776  \"bestPrice <= bidAmount && boxData[_contract].lastPrice < bidAmount\"\n                    expr_9 := expr_13\n                }\n                /// @src 0:3707:4449  \"if(bestPrice <= bidAmount && boxData[_contract].lastPrice < bidAmount){...\"\n                if expr_9\n                {\n                    /// @src 0:3799:3808  \"msg.value\"\n                    let expr_14 := callvalue()\n                    /// @src 0:3812:3821  \"bidAmount\"\n                    let _13 := var_bidAmount\n                    let expr_15 := _13\n                    /// @src 0:3799:3821  \"msg.value == bidAmount\"\n                    let expr_16 := eq(cleanup_uint256(expr_14), cleanup_uint256(expr_15))\n                    /// @src 0:3791:3822  \"require(msg.value == bidAmount)\"\n                    require_helper(expr_16)\n                    /// @src 0:3858:3867  \"bidAmount\"\n                    let _14 := var_bidAmount\n                    let expr_17 := _14\n                    /// @src 0:3870:3871  \"1\"\n                    let expr_18 := 0x01\n                    /// @src 0:3858:3871  \"bidAmount * 1\"\n                    let expr_19 := checked_mul_uint256(expr_17, convert_rational_1_by_1_to_uint256(expr_18))\n                    /// @src 0:3857:3872  \"(bidAmount * 1)\"\n                    let expr_20 := expr_19\n                    /// @src 0:3873:3876  \"100\"\n                    let expr_21 := 0x64\n                    /// @src 0:3857:3876  \"(bidAmount * 1)/100\"\n                    let expr_22 := checked_div_uint256(expr_20, convert_rational_100_by_1_to_uint256(expr_21))\n                    /// @src 0:3836:3876  \"uint initiatorFees = (bidAmount * 1)/100\"\n                    let var_initiatorFees := expr_22\n                    /// @src 0:3904:3913  \"bidAmount\"\n                    let _15 := var_bidAmount\n                    let expr_23 := _15\n                    /// @src 0:3916:3929  \"initiatorFees\"\n                    let _16 := var_initiatorFees\n                    let expr_24 := _16\n                    /// @src 0:3904:3929  \"bidAmount - initiatorFees\"\n                    let expr_25 := checked_sub_uint256(expr_23, expr_24)\n                    /// @src 0:3890:3929  \"uint refund = bidAmount - initiatorFees\"\n                    let var_refund := expr_25\n                    /// @src 0:3967:3974  \"boxData\"\n                    let _90_slot := 0x02\n                    let expr_slot := _90_slot\n                    /// @src 0:3975:3984  \"_contract\"\n                    let _17 := var__contract\n                    let expr_26 := _17\n                    /// @src 0:3967:3985  \"boxData[_contract]\"\n                    let _18 := mapping_index_access_mapping_address_struct_BidTrack_storage_of_address(expr_slot, expr_26)\n                    let _93_slot := _18\n                    let expr_488_slot := _93_slot\n                    /// @src 0:3967:3999  \"boxData[_contract].currentWinner\"\n                    let _19 := add(expr_488_slot, 5)\n                    let _20 := read_from_storage_split_offset_address(_19)\n                    let expr_27 := _20\n                    /// @src 0:3959:4000  \"payable(boxData[_contract].currentWinner)\"\n                    let expr_28 := convert_address_to_address_payable(expr_27)\n                    /// @src 0:3959:4005  \"payable(boxData[_contract].currentWinner).call\"\n                    let expr_491_address := convert_address_payable_to_address(expr_28)\n                    /// @src 0:4012:4018  \"refund\"\n                    let _21 := var_refund\n                    let expr_29 := _21\n                    /// @src 0:3959:4019  \"payable(boxData[_contract].currentWinner).call{value:refund}\"\n                    let expr_493_address := expr_491_address\n                    let expr_493_value := expr_29\n                    /// @src 0:3959:4023  \"payable(boxData[_contract].currentWinner).call{value:refund}(\\\"\\\")\"\n                    let _22 := allocate_unbounded()\n                    let _23 := sub(abi_encode_packed_stringliteral_c5d2(_22), _22)\n                    let expr_component := call(gas(), expr_493_address, expr_493_value, _22, _23, 0, 0)\n                    pop(extract_returndata())\n                    /// @src 0:3943:4023  \"(bool success,)=payable(boxData[_contract].currentWinner).call{value:refund}(\\\"\\\")\"\n                    let var_success := expr_component\n                    /// @src 0:4046:4053  \"success\"\n                    let _24 := var_success\n                    let expr_30 := _24\n                    /// @src 0:4038:4063  \"require(success,\\\"failed\\\")\"\n                    require_helper_stringliteral_8f44(expr_30)\n                    /// @src 0:4102:4109  \"boxData\"\n                    let _100_slot := 0x02\n                    let expr_506_slot := _100_slot\n                    /// @src 0:4110:4119  \"_contract\"\n                    let _25 := var__contract\n                    let expr_31 := _25\n                    /// @src 0:4102:4120  \"boxData[_contract]\"\n                    let _26 := mapping_index_access_mapping_address_struct_BidTrack_storage_of_address(expr_506_slot, expr_31)\n                    let _slot := _26\n                    let expr_508_slot := _slot\n                    /// @src 0:4102:4134  \"boxData[_contract].poolInitiator\"\n                    let _27 := add(expr_508_slot, 6)\n                    let _28 := read_from_storage_split_offset_address(_27)\n                    let expr_32 := _28\n                    /// @src 0:4094:4135  \"payable(boxData[_contract].poolInitiator)\"\n                    let expr_33 := convert_address_to_address_payable(expr_32)\n                    /// @src 0:4094:4140  \"payable(boxData[_contract].poolInitiator).call\"\n                    let expr_511_address := convert_address_payable_to_address(expr_33)\n                    /// @src 0:4147:4160  \"initiatorFees\"\n                    let _29 := var_initiatorFees\n                    let expr_34 := _29\n                    /// @src 0:4094:4161  \"payable(boxData[_contract].poolInitiator).call{value:initiatorFees}\"\n                    let expr_513_address := expr_511_address\n                    let expr_value := expr_34\n                    /// @src 0:4094:4165  \"payable(boxData[_contract].poolInitiator).call{value:initiatorFees}(\\\"\\\")\"\n                    let _30 := allocate_unbounded()\n                    let _31 := sub(abi_encode_packed_stringliteral_c5d2(_30), _30)\n                    let expr_515_component := call(gas(), expr_513_address, expr_value, _30, _31, 0, 0)\n                    pop(extract_returndata())\n                    /// @src 0:4077:4165  \"(bool success2,)=payable(boxData[_contract].poolInitiator).call{value:initiatorFees}(\\\"\\\")\"\n                    let var_success2 := expr_515_component\n                    /// @src 0:4188:4196  \"success2\"\n                    let _32 := var_success2\n                    let expr_35 := _32\n                    /// @src 0:4180:4206  \"require(success2,\\\"failed\\\")\"\n                    require_helper_stringliteral_8f44(expr_35)\n                    /// @src 0:4255:4265  \"msg.sender\"\n                    let expr_36 := caller()\n                    /// @src 0:4220:4227  \"boxData\"\n                    let _110_slot := 0x02\n                    let expr_522_slot := _110_slot\n                    /// @src 0:4228:4237  \"_contract\"\n                    let _33 := var__contract\n                    let expr_37 := _33\n                    /// @src 0:4220:4238  \"boxData[_contract]\"\n                    let _34 := mapping_index_access_mapping_address_struct_BidTrack_storage_of_address(expr_522_slot, expr_37)\n                    let _113_slot := _34\n                    let expr_524_slot := _113_slot\n                    /// @src 0:4220:4252  \"boxData[_contract].currentWinner\"\n                    let _35 := add(expr_524_slot, 5)\n                    /// @src 0:4220:4265  \"boxData[_contract].currentWinner = msg.sender\"\n                    update_storage_value_offset_address_to_address(_35, expr_36)\n                    /// @src 0:4310:4319  \"bidAmount\"\n                    let _36 := var_bidAmount\n                    let expr_38 := _36\n                    /// @src 0:4279:4286  \"boxData\"\n                    let _116_slot := 0x02\n                    let expr_530_slot := _116_slot\n                    /// @src 0:4287:4296  \"_contract\"\n                    let _37 := var__contract\n                    let expr_39 := _37\n                    /// @src 0:4279:4297  \"boxData[_contract]\"\n                    let _38 := mapping_index_access_mapping_address_struct_BidTrack_storage_of_address(expr_530_slot, expr_39)\n                    let _119_slot := _38\n                    let expr_532_slot := _119_slot\n                    /// @src 0:4279:4307  \"boxData[_contract].lastPrice\"\n                    let _39 := add(expr_532_slot, 4)\n                    /// @src 0:4279:4319  \"boxData[_contract].lastPrice = bidAmount\"\n                    update_storage_value_offset_uint256_to_uint256(_39, expr_38)\n                    /// @src 0:4333:4340  \"boxData\"\n                    let _121_slot := 0x02\n                    let expr_537_slot := _121_slot\n                    /// @src 0:4341:4350  \"_contract\"\n                    let _40 := var__contract\n                    let expr_40 := _40\n                    /// @src 0:4333:4351  \"boxData[_contract]\"\n                    let _41 := mapping_index_access_mapping_address_struct_BidTrack_storage_of_address(expr_537_slot, expr_40)\n                    let _124_slot := _41\n                    let expr_539_slot := _124_slot\n                    /// @src 0:4333:4360  \"boxData[_contract].totalBid\"\n                    let _42 := add(expr_539_slot, 2)\n                    /// @src 0:4333:4362  \"boxData[_contract].totalBid++\"\n                    let _43 := read_from_storage_split_offset_uint256(_42)\n                    let _44 := increment_uint256(_43)\n                    update_storage_value_offset_uint256_to_uint256(_42, _44)\n                    /// @src 0:4408:4423  \"block.timestamp\"\n                    let expr_41 := timestamp()\n                    /// @src 0:4424:4428  \"1500\"\n                    let expr_42 := 0x05dc\n                    /// @src 0:4408:4428  \"block.timestamp+1500\"\n                    let expr_43 := checked_add_uint256(expr_41, convert_t_rational_by_to_t_uint256(expr_42))\n                    /// @src 0:4376:4383  \"boxData\"\n                    let _128_slot := 0x02\n                    let expr_543_slot := _128_slot\n                    /// @src 0:4384:4393  \"_contract\"\n                    let _45 := var__contract\n                    let expr_44 := _45\n                    /// @src 0:4376:4394  \"boxData[_contract]\"\n                    let _46 := mapping_index_access_mapping_address_struct_BidTrack_storage_of_address(expr_543_slot, expr_44)\n                    let _131_slot := _46\n                    let expr_545_slot := _131_slot\n                    /// @src 0:4376:4405  \"boxData[_contract].bidEndTime\"\n                    let _47 := add(expr_545_slot, 1)\n                    /// @src 0:4376:4428  \"boxData[_contract].bidEndTime = block.timestamp+1500\"\n                    update_storage_value_offset_uint256_to_uint256(_47, expr_43)\n                }\n                /// @src 0:4467:4474  \"boxData\"\n                let _133_slot := 0x02\n                let expr_556_slot := _133_slot\n                /// @src 0:4475:4484  \"_contract\"\n                let _48 := var__contract\n                let expr_45 := _48\n                /// @src 0:4467:4485  \"boxData[_contract]\"\n                let _49 := mapping_index_access_mapping_address_struct_BidTrack_storage_of_address(expr_556_slot, expr_45)\n                let _136_slot := _49\n                let expr_558_slot := _136_slot\n                /// @src 0:4467:4496  \"boxData[_contract].bidEndTime\"\n                let _50 := add(expr_558_slot, 1)\n                let _51 := read_from_storage_split_offset_uint256(_50)\n                let expr_46 := _51\n                /// @src 0:4499:4514  \"block.timestamp\"\n                let expr_47 := timestamp()\n                /// @src 0:4467:4514  \"boxData[_contract].bidEndTime < block.timestamp\"\n                let expr_48 := lt(cleanup_uint256(expr_46), cleanup_uint256(expr_47))\n                /// @src 0:4459:4515  \"require(boxData[_contract].bidEndTime < block.timestamp)\"\n                require_helper(expr_48)\n                /// @src 0:4555:4556  \"0\"\n                let expr_49 := 0x00\n                /// @src 0:4525:4556  \"boxData[_contract].totalBid = 0\"\n                let _52 := convert_rational_0_by_1_to_uint256(expr_49)\n                /// @src 0:4525:4532  \"boxData\"\n                let _140_slot := 0x02\n                let expr_565_slot := _140_slot\n                /// @src 0:4533:4542  \"_contract\"\n                let _53 := var__contract\n                let expr_50 := _53\n                /// @src 0:4525:4543  \"boxData[_contract]\"\n                let _54 := mapping_index_access_mapping_address_struct_BidTrack_storage_of_address(expr_565_slot, expr_50)\n                let _143_slot := _54\n                let expr_567_slot := _143_slot\n                /// @src 0:4525:4552  \"boxData[_contract].totalBid\"\n                let _55 := add(expr_567_slot, 2)\n                /// @src 0:4525:4556  \"boxData[_contract].totalBid = 0\"\n                update_storage_value_offset_uint256_to_uint256(_55, _52)\n            }\n            /// @src 0:1873:5258  \"contract SwappyBox{...\"\n            function store_literal_in_memory_ebac15005998152c7868d5d3837373e86795737fa2f9ca6c69b26b94f9417814(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Invalid box index\")\n            }\n            function abi_encode_stringliteral_ebac(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 17)\n                store_literal_in_memory_ebac15005998152c7868d5d3837373e86795737fa2f9ca6c69b26b94f9417814(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_ebac(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_ebac(tail)\n            }\n            function require_helper_stringliteral_ebac(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_ebac(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_cadb7cc6d49d1ca8f2ba1454a69a5d723dcf8e4e377151620bc4ba8421cad877(memPtr)\n            {\n                mstore(add(memPtr, 0), \"deposit must be greater than 0\")\n            }\n            function abi_encode_stringliteral_cadb(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 30)\n                store_literal_in_memory_cadb7cc6d49d1ca8f2ba1454a69a5d723dcf8e4e377151620bc4ba8421cad877(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_cadb(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_cadb(tail)\n            }\n            function require_helper_stringliteral_cadb(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_cadb(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function cleanup_rational_10_by(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_by_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_10_by(value)))\n            }\n            function cleanup_rational_by_1(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_3600_by_1_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_by_1(value)))\n            }\n            function allocate_memory_struct_struct_BidTrack_storage_ptr() -> memPtr\n            {\n                memPtr := allocate_memory(224)\n            }\n            function read_from_memoryt_uint256(ptr) -> returnValue\n            {\n                let value := cleanup_uint256(mload(ptr))\n                returnValue := value\n            }\n            function read_from_memoryt_address(ptr) -> returnValue\n            {\n                let value := cleanup_address(mload(ptr))\n                returnValue := value\n            }\n            function copy_struct_to_storage_from_struct_BidTrack_to_struct_BidTrack(slot, value)\n            {\n                let memberSlot := add(slot, 0)\n                let memberSrcPtr := add(value, 0)\n                let memberValue := read_from_memoryt_uint256(memberSrcPtr)\n                update_storage_value_offset_uint256_to_uint256(memberSlot, memberValue)\n                let memberSlot_1 := add(slot, 1)\n                let memberSrcPtr_1 := add(value, 32)\n                let memberValue_1 := read_from_memoryt_uint256(memberSrcPtr_1)\n                update_storage_value_offset_uint256_to_uint256(memberSlot_1, memberValue_1)\n                let memberSlot_2 := add(slot, 2)\n                let memberSrcPtr_2 := add(value, 64)\n                let memberValue_2 := read_from_memoryt_uint256(memberSrcPtr_2)\n                update_storage_value_offset_uint256_to_uint256(memberSlot_2, memberValue_2)\n                let memberSlot_3 := add(slot, 3)\n                let memberSrcPtr_3 := add(value, 96)\n                let memberValue_3 := read_from_memoryt_uint256(memberSrcPtr_3)\n                update_storage_value_offset_uint256_to_uint256(memberSlot_3, memberValue_3)\n                let memberSlot_4 := add(slot, 4)\n                let memberSrcPtr_4 := add(value, 128)\n                let memberValue_4 := read_from_memoryt_uint256(memberSrcPtr_4)\n                update_storage_value_offset_uint256_to_uint256(memberSlot_4, memberValue_4)\n                let memberSlot_5 := add(slot, 5)\n                let memberSrcPtr_5 := add(value, 160)\n                let memberValue_5 := read_from_memoryt_address(memberSrcPtr_5)\n                update_storage_value_offset_address_to_address(memberSlot_5, memberValue_5)\n                let memberSlot_6 := add(slot, 6)\n                let memberSrcPtr_6 := add(value, 192)\n                let memberValue_6 := read_from_memoryt_address(memberSrcPtr_6)\n                update_storage_value_offset_address_to_address(memberSlot_6, memberValue_6)\n            }\n            function update_storage_value_offset_struct_BidTrack_to_struct_BidTrack(slot, value)\n            {\n                copy_struct_to_storage_from_struct_BidTrack_to_struct_BidTrack(slot, value)\n            }\n            /// @ast-id 348 @src 0:2386:2899  \"function depositToBox(uint _index, uint _deadline) public payable {...\"\n            function fun_depositToBox(var_index, var_deadline)\n            {\n                /// @src 0:2470:2476  \"_index\"\n                let _1 := var_index\n                let expr := _1\n                /// @src 0:2479:2484  \"boxes\"\n                let _146_slot := 0x01\n                let expr_278_slot := _146_slot\n                /// @src 0:2485:2495  \"msg.sender\"\n                let expr_1 := caller()\n                /// @src 0:2479:2496  \"boxes[msg.sender]\"\n                let _2 := mapping_index_access_mapping_address_array_address_dyn_storage_of_address(expr_278_slot, expr_1)\n                let _148_slot := _2\n                let expr_281_slot := _148_slot\n                /// @src 0:2479:2503  \"boxes[msg.sender].length\"\n                let expr_2 := array_length_array_address_dyn_storage(expr_281_slot)\n                /// @src 0:2470:2503  \"_index < boxes[msg.sender].length\"\n                let expr_3 := lt(cleanup_uint256(expr), cleanup_uint256(expr_2))\n                /// @src 0:2462:2525  \"require(_index < boxes[msg.sender].length, \\\"Invalid box index\\\")\"\n                require_helper_stringliteral_ebac(expr_3)\n                /// @src 0:2543:2552  \"msg.value\"\n                let expr_4 := callvalue()\n                /// @src 0:2555:2556  \"0\"\n                let expr_5 := 0x00\n                /// @src 0:2543:2556  \"msg.value > 0\"\n                let expr_6 := gt(cleanup_uint256(expr_4), convert_rational_0_by_1_to_uint256(expr_5))\n                /// @src 0:2535:2591  \"require(msg.value > 0, \\\"deposit must be greater than 0\\\")\"\n                require_helper_stringliteral_cadb(expr_6)\n                /// @src 0:2622:2627  \"boxes\"\n                let _149_slot := 0x01\n                let expr_297_slot := _149_slot\n                /// @src 0:2628:2638  \"msg.sender\"\n                let expr_7 := caller()\n                /// @src 0:2622:2639  \"boxes[msg.sender]\"\n                let _3 := mapping_index_access_mapping_address_array_address_dyn_storage_of_address(expr_297_slot, expr_7)\n                let _151_slot := _3\n                let expr_300_slot := _151_slot\n                /// @src 0:2640:2646  \"_index\"\n                let _4 := var_index\n                let expr_8 := _4\n                /// @src 0:2622:2647  \"boxes[msg.sender][_index]\"\n                let _5, _6 := storage_array_index_access_address_dyn(expr_300_slot, expr_8)\n                let _7 := read_from_storage_split_dynamic_address(_5, _6)\n                let expr_9 := _7\n                /// @src 0:2601:2647  \"address boxAddress = boxes[msg.sender][_index]\"\n                let var_boxAddress := expr_9\n                /// @src 0:2669:2679  \"boxAddress\"\n                let _8 := var_boxAddress\n                let expr_10 := _8\n                /// @src 0:2661:2680  \"payable(boxAddress)\"\n                let expr_11 := convert_address_to_address_payable(expr_10)\n                /// @src 0:2657:2681  \"Box(payable(boxAddress))\"\n                let expr_309_address := convert_address_payable_to_contract_Box(expr_11)\n                /// @src 0:2657:2689  \"Box(payable(boxAddress)).deposit\"\n                let expr_310_address := convert_contract_Box_to_address(expr_309_address)\n                let expr_310_functionSelector := 0xb6b55f25\n                /// @src 0:2697:2706  \"msg.value\"\n                let expr_12 := callvalue()\n                /// @src 0:2657:2707  \"Box(payable(boxAddress)).deposit{value: msg.value}\"\n                let expr_313_address := expr_310_address\n                let expr_functionSelector := expr_310_functionSelector\n                let expr_313_value := expr_12\n                /// @src 0:2708:2717  \"_deadline\"\n                let _9 := var_deadline\n                let expr_13 := _9\n                /// @src 0:2657:2718  \"Box(payable(boxAddress)).deposit{value: msg.value}(_deadline)\"\n                if iszero(extcodesize(expr_313_address))\n                {\n                    revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()\n                }\n                let _10 := allocate_unbounded()\n                mstore(_10, shift_left_224(expr_functionSelector))\n                let _11 := abi_encode_uint256(add(_10, 4), expr_13)\n                let _12 := call(gas(), expr_313_address, expr_313_value, _10, sub(_11, _10), _10, 0)\n                if iszero(_12) { revert_forward() }\n                if _12\n                {\n                    let _13 := 0\n                    if gt(_13, returndatasize()) { _13 := returndatasize() }\n                    finalize_allocation(_10, _13)\n                    abi_decode_fromMemory(_10, add(_10, _13))\n                }\n                /// @src 0:2749:2758  \"msg.value\"\n                let expr_14 := callvalue()\n                /// @src 0:2761:2763  \"10\"\n                let expr_15 := 0x0a\n                /// @src 0:2749:2763  \"msg.value * 10\"\n                let expr_16 := checked_mul_uint256(expr_14, convert_rational_by_to_uint256(expr_15))\n                /// @src 0:2748:2764  \"(msg.value * 10)\"\n                let expr_17 := expr_16\n                /// @src 0:2767:2770  \"100\"\n                let expr_18 := 0x64\n                /// @src 0:2748:2770  \"(msg.value * 10) / 100\"\n                let expr_19 := checked_div_uint256(expr_17, convert_rational_100_by_1_to_uint256(expr_18))\n                /// @src 0:2728:2770  \"uint256 basePrice = (msg.value * 10) / 100\"\n                let var_basePrice := expr_19\n                /// @src 0:2811:2826  \"block.timestamp\"\n                let expr_20 := timestamp()\n                /// @src 0:2827:2842  \"block.timestamp\"\n                let expr_21 := timestamp()\n                /// @src 0:2843:2847  \"3600\"\n                let expr_22 := 0x0e10\n                /// @src 0:2827:2847  \"block.timestamp+3600\"\n                let expr_23 := checked_add_uint256(expr_21, convert_rational_3600_by_1_to_uint256(expr_22))\n                /// @src 0:2848:2849  \"0\"\n                let expr_24 := 0x00\n                /// @src 0:2850:2859  \"basePrice\"\n                let _14 := var_basePrice\n                let expr_25 := _14\n                /// @src 0:2860:2869  \"basePrice\"\n                let _15 := var_basePrice\n                let expr_26 := _15\n                /// @src 0:2870:2880  \"msg.sender\"\n                let expr_27 := caller()\n                /// @src 0:2881:2891  \"msg.sender\"\n                let expr_28 := caller()\n                /// @src 0:2802:2892  \"BidTrack(block.timestamp,block.timestamp+3600,0,basePrice,basePrice,msg.sender,msg.sender)\"\n                let expr_mpos := allocate_memory_struct_struct_BidTrack_storage_ptr()\n                write_to_memory_uint256(add(expr_mpos, 0), expr_20)\n                write_to_memory_uint256(add(expr_mpos, 32), expr_23)\n                let _16 := convert_rational_0_by_1_to_uint256(expr_24)\n                write_to_memory_uint256(add(expr_mpos, 64), _16)\n                write_to_memory_uint256(add(expr_mpos, 96), expr_25)\n                write_to_memory_uint256(add(expr_mpos, 128), expr_26)\n                write_to_memory_address(add(expr_mpos, 160), expr_27)\n                write_to_memory_address(add(expr_mpos, 192), expr_28)\n                /// @src 0:2780:2787  \"boxData\"\n                let _165_slot := 0x02\n                let expr_327_slot := _165_slot\n                /// @src 0:2788:2798  \"boxAddress\"\n                let _17 := var_boxAddress\n                let expr_29 := _17\n                /// @src 0:2780:2799  \"boxData[boxAddress]\"\n                let _18 := mapping_index_access_mapping_address_struct_BidTrack_storage_of_address(expr_327_slot, expr_29)\n                /// @src 0:2780:2892  \"boxData[boxAddress] = BidTrack(block.timestamp,block.timestamp+3600,0,basePrice,basePrice,msg.sender,msg.sender)\"\n                update_storage_value_offset_struct_BidTrack_to_struct_BidTrack(_18, expr_mpos)\n            }\n            /// @ast-id 657 @src 0:5141:5255  \"function getBalance(address _contract) public view returns(uint){...\"\n            function fun_getBalance(var_contract) -> var\n            {\n                /// @src 0:5200:5204  \"uint\"\n                let zero_t_uint256 := zero_value_for_split_uint256()\n                var := zero_t_uint256\n                /// @src 0:5230:5239  \"_contract\"\n                let _1 := var_contract\n                let expr := _1\n                /// @src 0:5222:5240  \"address(_contract)\"\n                let expr_1 := expr\n                /// @src 0:5222:5248  \"address(_contract).balance\"\n                let expr_2 := balance(expr_1)\n                /// @src 0:5215:5248  \"return address(_contract).balance\"\n                var := expr_2\n                leave\n            }\n        }\n        /// @use-src 0:\"contracts/SwappyBox/SwappBox.sol\"\n        object \"Box_213\" {\n            code {\n                {\n                    /// @src 0:72:1871  \"contract Box {...\"\n                    mstore(64, memoryguard(0x80))\n                    if callvalue()\n                    {\n                        revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                    }\n                    constructor_Box()\n                    let _1 := allocate_unbounded()\n                    codecopy(_1, dataoffset(\"Box_213_deployed\"), datasize(\"Box_213_deployed\"))\n                    return(_1, datasize(\"Box_213_deployed\"))\n                }\n                function allocate_unbounded() -> memPtr\n                { memPtr := mload(64) }\n                function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                { revert(0, 0) }\n                function shift_left(value) -> newValue\n                { newValue := shl(168, value) }\n                function update_byte_slice_shift(value, toInsert) -> result\n                {\n                    let mask := shl(168, 255)\n                    toInsert := shift_left(toInsert)\n                    value := and(value, not(mask))\n                    result := or(value, and(toInsert, mask))\n                }\n                function cleanup_bool(value) -> cleaned\n                {\n                    cleaned := iszero(iszero(value))\n                }\n                function convert_bool_to_bool(value) -> converted\n                {\n                    converted := cleanup_bool(value)\n                }\n                function prepare_store_bool(value) -> ret\n                { ret := value }\n                function update_storage_value_offset_bool_to_bool(slot, value)\n                {\n                    let convertedValue := convert_bool_to_bool(value)\n                    sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_bool(convertedValue)))\n                }\n                function constructor_Box()\n                {\n                    /// @src 0:245:250  \"false\"\n                    let expr := 0x00\n                    update_storage_value_offset_bool_to_bool(0x02, expr)\n                }\n            }\n            /// @use-src 0:\"contracts/SwappyBox/SwappBox.sol\"\n            object \"Box_213_deployed\" {\n                code {\n                    {\n                        /// @src 0:72:1871  \"contract Box {...\"\n                        mstore(64, memoryguard(0x80))\n                        if iszero(lt(calldatasize(), 4))\n                        {\n                            let selector := shift_right_224_unsigned(calldataload(0))\n                            switch selector\n                            case 0x29dcb0cf { external_fun_deadline() }\n                            case 0x5437e401 { external_fun_withdraw() }\n                            case 0x8da5cb5b { external_fun_owner() }\n                            case 0x9ced0e9b { external_fun_initialTime() }\n                            case 0xb6b55f25 { external_fun_deposit() }\n                            case 0xc934e08e {\n                                external_fun_isContractFunded()\n                            }\n                            case 0xdbae172c { external_fun_isWithdraw() }\n                            default { }\n                        }\n                        if iszero(calldatasize()) { stop() }\n                        revert_error_d228b4ceac16d8e91d6dc7ca8d4a5394f524b2e550555324088cb23b86b87b98()\n                    }\n                    function shift_right_224_unsigned(value) -> newValue\n                    { newValue := shr(224, value) }\n                    function allocate_unbounded() -> memPtr\n                    { memPtr := mload(64) }\n                    function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                    { revert(0, 0) }\n                    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                    { revert(0, 0) }\n                    function abi_decode(headStart, dataEnd)\n                    {\n                        if slt(sub(dataEnd, headStart), 0)\n                        {\n                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                        }\n                    }\n                    function shift_right_unsigned_dynamic(bits, value) -> newValue\n                    { newValue := shr(bits, value) }\n                    function cleanup_from_storage_uint256(value) -> cleaned\n                    { cleaned := value }\n                    function extract_from_storage_value_dynamict_uint256(slot_value, offset) -> value\n                    {\n                        value := cleanup_from_storage_uint256(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n                    }\n                    function read_from_storage_split_dynamic_uint256(slot, offset) -> value\n                    {\n                        value := extract_from_storage_value_dynamict_uint256(sload(slot), offset)\n                    }\n                    /// @ast-id 3 @src 0:91:114  \"uint256 public deadline\"\n                    function getter_fun_deadline() -> ret\n                    {\n                        let slot := 0\n                        let offset := 0\n                        ret := read_from_storage_split_dynamic_uint256(slot, offset)\n                    }\n                    /// @src 0:72:1871  \"contract Box {...\"\n                    function cleanup_uint256(value) -> cleaned\n                    { cleaned := value }\n                    function abi_encode_uint256_to_uint256(value, pos)\n                    {\n                        mstore(pos, cleanup_uint256(value))\n                    }\n                    function abi_encode_uint256(headStart, value0) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        abi_encode_uint256_to_uint256(value0, add(headStart, 0))\n                    }\n                    function external_fun_deadline()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        abi_decode(4, calldatasize())\n                        let ret := getter_fun_deadline()\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_uint256(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function cleanup_uint160(value) -> cleaned\n                    {\n                        cleaned := and(value, sub(shl(160, 1), 1))\n                    }\n                    function cleanup_address(value) -> cleaned\n                    {\n                        cleaned := cleanup_uint160(value)\n                    }\n                    function validator_revert_address(value)\n                    {\n                        if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n                    }\n                    function abi_decode_address(offset, end) -> value\n                    {\n                        value := calldataload(offset)\n                        validator_revert_address(value)\n                    }\n                    function cleanup_bool(value) -> cleaned\n                    {\n                        cleaned := iszero(iszero(value))\n                    }\n                    function validator_revert_bool(value)\n                    {\n                        if iszero(eq(value, cleanup_bool(value))) { revert(0, 0) }\n                    }\n                    function abi_decode_bool(offset, end) -> value\n                    {\n                        value := calldataload(offset)\n                        validator_revert_bool(value)\n                    }\n                    function abi_decode_addresst_bool(headStart, dataEnd) -> value0, value1\n                    {\n                        if slt(sub(dataEnd, headStart), 64)\n                        {\n                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                        }\n                        let offset := 0\n                        value0 := abi_decode_address(add(headStart, offset), dataEnd)\n                        let offset_1 := 32\n                        value1 := abi_decode_bool(add(headStart, offset_1), dataEnd)\n                    }\n                    function abi_encode_tuple(headStart) -> tail\n                    { tail := add(headStart, 0) }\n                    function external_fun_withdraw()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        let param, param_1 := abi_decode_addresst_bool(4, calldatasize())\n                        fun_withdraw(param, param_1)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_tuple(memPos)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function cleanup_from_storage_address_payable(value) -> cleaned\n                    {\n                        cleaned := and(value, sub(shl(160, 1), 1))\n                    }\n                    function extract_from_storage_value_dynamict_address_payable(slot_value, offset) -> value\n                    {\n                        value := cleanup_from_storage_address_payable(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n                    }\n                    function read_from_storage_split_dynamic_address_payable(slot, offset) -> value\n                    {\n                        value := extract_from_storage_value_dynamict_address_payable(sload(slot), offset)\n                    }\n                    /// @ast-id 7 @src 0:152:180  \"address payable public owner\"\n                    function getter_fun_owner() -> ret\n                    {\n                        let slot := 2\n                        let offset := 0\n                        ret := read_from_storage_split_dynamic_address_payable(slot, offset)\n                    }\n                    /// @src 0:72:1871  \"contract Box {...\"\n                    function cleanup_address_payable(value) -> cleaned\n                    {\n                        cleaned := cleanup_uint160(value)\n                    }\n                    function abi_encode_address_payable_to_address_payable(value, pos)\n                    {\n                        mstore(pos, cleanup_address_payable(value))\n                    }\n                    function abi_encode_address_payable(headStart, value0) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        abi_encode_address_payable_to_address_payable(value0, add(headStart, 0))\n                    }\n                    function external_fun_owner()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        abi_decode(4, calldatasize())\n                        let ret := getter_fun_owner()\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_address_payable(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    /// @ast-id 5 @src 0:120:146  \"uint256 public initialTime\"\n                    function getter_fun_initialTime() -> ret\n                    {\n                        let slot := 1\n                        let offset := 0\n                        ret := read_from_storage_split_dynamic_uint256(slot, offset)\n                    }\n                    /// @src 0:72:1871  \"contract Box {...\"\n                    function external_fun_initialTime()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        abi_decode(4, calldatasize())\n                        let ret := getter_fun_initialTime()\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_uint256(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function validator_revert_uint256(value)\n                    {\n                        if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n                    }\n                    function abi_decode_uint256(offset, end) -> value\n                    {\n                        value := calldataload(offset)\n                        validator_revert_uint256(value)\n                    }\n                    function abi_decode_tuple_uint256(headStart, dataEnd) -> value0\n                    {\n                        if slt(sub(dataEnd, headStart), 32)\n                        {\n                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                        }\n                        let offset := 0\n                        value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n                    }\n                    function external_fun_deposit()\n                    {\n                        let param := abi_decode_tuple_uint256(4, calldatasize())\n                        fun_deposit(param)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_tuple(memPos)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function cleanup_from_storage_bool(value) -> cleaned\n                    { cleaned := and(value, 0xff) }\n                    function extract_from_storage_value_dynamict_bool(slot_value, offset) -> value\n                    {\n                        value := cleanup_from_storage_bool(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n                    }\n                    function read_from_storage_split_dynamic_bool(slot, offset) -> value\n                    {\n                        value := extract_from_storage_value_dynamict_bool(sload(slot), offset)\n                    }\n                    /// @ast-id 9 @src 0:186:214  \"bool public isContractFunded\"\n                    function getter_fun_isContractFunded() -> ret\n                    {\n                        let slot := 2\n                        let offset := 20\n                        ret := read_from_storage_split_dynamic_bool(slot, offset)\n                    }\n                    /// @src 0:72:1871  \"contract Box {...\"\n                    function abi_encode_bool_to_bool(value, pos)\n                    {\n                        mstore(pos, cleanup_bool(value))\n                    }\n                    function abi_encode_bool(headStart, value0) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        abi_encode_bool_to_bool(value0, add(headStart, 0))\n                    }\n                    function external_fun_isContractFunded()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        abi_decode(4, calldatasize())\n                        let ret := getter_fun_isContractFunded()\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_bool(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    /// @ast-id 12 @src 0:220:250  \"bool public isWithdraw = false\"\n                    function getter_fun_isWithdraw() -> ret\n                    {\n                        let slot := 2\n                        let offset := 21\n                        ret := read_from_storage_split_dynamic_bool(slot, offset)\n                    }\n                    /// @src 0:72:1871  \"contract Box {...\"\n                    function external_fun_isWithdraw()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        abi_decode(4, calldatasize())\n                        let ret := getter_fun_isWithdraw()\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_bool(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function revert_error_d228b4ceac16d8e91d6dc7ca8d4a5394f524b2e550555324088cb23b86b87b98()\n                    { revert(0, 0) }\n                    function shift_right_0_unsigned(value) -> newValue\n                    { newValue := shr(0, value) }\n                    function extract_from_storage_value_offset_address_payable(slot_value) -> value\n                    {\n                        value := cleanup_from_storage_address_payable(shift_right_0_unsigned(slot_value))\n                    }\n                    function read_from_storage_split_offset_address_payable(slot) -> value\n                    {\n                        value := extract_from_storage_value_offset_address_payable(sload(slot))\n                    }\n                    function identity(value) -> ret\n                    { ret := value }\n                    function convert_uint160_to_uint160(value) -> converted\n                    {\n                        converted := cleanup_uint160(identity(cleanup_uint160(value)))\n                    }\n                    function convert_uint160_to_address(value) -> converted\n                    {\n                        converted := convert_uint160_to_uint160(value)\n                    }\n                    function convert_address_payable_to_address(value) -> converted\n                    {\n                        converted := convert_uint160_to_address(value)\n                    }\n                    function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n                    {\n                        mstore(pos, length)\n                        updated_pos := add(pos, 0x20)\n                    }\n                    function store_literal_in_memory_72ec00def0a4f647f10f2a5c1742fab7d53364130edc365182f3ccef5864f2a5(memPtr)\n                    {\n                        mstore(add(memPtr, 0), \"Not the owner\")\n                    }\n                    function abi_encode_stringliteral_72ec00def0a4f647f10f2a5c1742fab7d53364130edc365182f3ccef5864f2a5(pos) -> end\n                    {\n                        pos := array_storeLengthForEncoding_string(pos, 13)\n                        store_literal_in_memory_72ec00def0a4f647f10f2a5c1742fab7d53364130edc365182f3ccef5864f2a5(pos)\n                        end := add(pos, 32)\n                    }\n                    function abi_encode_stringliteral_72ec(headStart) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        mstore(add(headStart, 0), sub(tail, headStart))\n                        tail := abi_encode_stringliteral_72ec00def0a4f647f10f2a5c1742fab7d53364130edc365182f3ccef5864f2a5(tail)\n                    }\n                    function require_helper_stringliteral_72ec(condition)\n                    {\n                        if iszero(condition)\n                        {\n                            let memPtr := allocate_unbounded()\n                            mstore(memPtr, shl(229, 4594637))\n                            let end := abi_encode_stringliteral_72ec(add(memPtr, 4))\n                            revert(memPtr, sub(end, memPtr))\n                        }\n                    }\n                    /// @ast-id 38 @src 0:392:486  \"modifier onlyOwner() {...\"\n                    function modifier_onlyOwner(var_to, var_isObligation)\n                    {\n                        /// @src 0:431:441  \"msg.sender\"\n                        let expr := caller()\n                        /// @src 0:445:450  \"owner\"\n                        let _1 := read_from_storage_split_offset_address_payable(0x02)\n                        let expr_1 := _1\n                        /// @src 0:431:450  \"msg.sender == owner\"\n                        let expr_2 := eq(cleanup_address(expr), convert_address_payable_to_address(expr_1))\n                        /// @src 0:423:468  \"require(msg.sender == owner, \\\"Not the owner\\\")\"\n                        require_helper_stringliteral_72ec(expr_2)\n                        /// @src 0:478:479  \"_\"\n                        fun_withdraw_inner(var_to, var_isObligation)\n                    }\n                    /// @src 0:72:1871  \"contract Box {...\"\n                    function extract_from_storage_value_offset_uint256(slot_value) -> value\n                    {\n                        value := cleanup_from_storage_uint256(shift_right_0_unsigned(slot_value))\n                    }\n                    function read_from_storage_split_offset_uint256(slot) -> value\n                    {\n                        value := extract_from_storage_value_offset_uint256(sload(slot))\n                    }\n                    function store_literal_in_memory_9346fa5bb6daee01a14e560a7040427cee2fc946781925fbe052d7ef325298b0(memPtr)\n                    {\n                        mstore(add(memPtr, 0), \"Deadline not yet reached\")\n                    }\n                    function abi_encode_stringliteral_9346(pos) -> end\n                    {\n                        pos := array_storeLengthForEncoding_string(pos, 24)\n                        store_literal_in_memory_9346fa5bb6daee01a14e560a7040427cee2fc946781925fbe052d7ef325298b0(pos)\n                        end := add(pos, 32)\n                    }\n                    function abi_encode_stringliteral(headStart) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        mstore(add(headStart, 0), sub(tail, headStart))\n                        tail := abi_encode_stringliteral_9346(tail)\n                    }\n                    function require_helper_stringliteral_9346(condition)\n                    {\n                        if iszero(condition)\n                        {\n                            let memPtr := allocate_unbounded()\n                            mstore(memPtr, shl(229, 4594637))\n                            let end := abi_encode_stringliteral(add(memPtr, 4))\n                            revert(memPtr, sub(end, memPtr))\n                        }\n                    }\n                    function convert_contract_Box_to_address(value) -> converted\n                    {\n                        converted := convert_uint160_to_address(value)\n                    }\n                    function cleanup_t_rational_by(value) -> cleaned\n                    { cleaned := value }\n                    function convert_t_rational_by_to_t_uint256(value) -> converted\n                    {\n                        converted := cleanup_uint256(identity(cleanup_t_rational_by(value)))\n                    }\n                    function shift_right_168_unsigned(value) -> newValue\n                    { newValue := shr(168, value) }\n                    function extract_from_storage_value_offset_t_bool(slot_value) -> value\n                    {\n                        value := cleanup_from_storage_bool(shift_right_168_unsigned(slot_value))\n                    }\n                    function read_from_storage_split_offset_bool(slot) -> value\n                    {\n                        value := extract_from_storage_value_offset_t_bool(sload(slot))\n                    }\n                    function store_literal_in_memory_4b4cc99522fdcee4d97d6d2d3cbabeb353d40433850bd46ba29c08dbfba843f9(memPtr)\n                    {\n                        mstore(add(memPtr, 0), \"No funds to withdraw\")\n                    }\n                    function abi_encode_stringliteral_4b4cc99522fdcee4d97d6d2d3cbabeb353d40433850bd46ba29c08dbfba843f9(pos) -> end\n                    {\n                        pos := array_storeLengthForEncoding_string(pos, 20)\n                        store_literal_in_memory_4b4cc99522fdcee4d97d6d2d3cbabeb353d40433850bd46ba29c08dbfba843f9(pos)\n                        end := add(pos, 32)\n                    }\n                    function abi_encode_stringliteral_4b4c(headStart) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        mstore(add(headStart, 0), sub(tail, headStart))\n                        tail := abi_encode_stringliteral_4b4cc99522fdcee4d97d6d2d3cbabeb353d40433850bd46ba29c08dbfba843f9(tail)\n                    }\n                    function require_helper_stringliteral_4b4c(condition)\n                    {\n                        if iszero(condition)\n                        {\n                            let memPtr := allocate_unbounded()\n                            mstore(memPtr, shl(229, 4594637))\n                            let end := abi_encode_stringliteral_4b4c(add(memPtr, 4))\n                            revert(memPtr, sub(end, memPtr))\n                        }\n                    }\n                    function cleanup_rational_by(value) -> cleaned\n                    { cleaned := value }\n                    function convert_rational_by_to_uint256(value) -> converted\n                    {\n                        converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n                    }\n                    function panic_error_0x11()\n                    {\n                        mstore(0, shl(224, 0x4e487b71))\n                        mstore(4, 0x11)\n                        revert(0, 0x24)\n                    }\n                    function checked_add_uint256(x, y) -> sum\n                    {\n                        x := cleanup_uint256(x)\n                        y := cleanup_uint256(y)\n                        sum := add(x, y)\n                        if gt(x, sum) { panic_error_0x11() }\n                    }\n                    function require_helper(condition)\n                    {\n                        if iszero(condition) { revert(0, 0) }\n                    }\n                    function convert_uint160_to_address_payable(value) -> converted\n                    {\n                        converted := convert_uint160_to_uint160(value)\n                    }\n                    function convert_address_to_address_payable(value) -> converted\n                    {\n                        converted := convert_uint160_to_address_payable(value)\n                    }\n                    function array_storeLengthForEncoding_bytes_nonPadded_inplace(pos, length) -> updated_pos\n                    { updated_pos := pos }\n                    function abi_encode_stringliteral_c5d2(pos) -> end\n                    {\n                        pos := array_storeLengthForEncoding_bytes_nonPadded_inplace(pos, 0)\n                        end := add(pos, 0)\n                    }\n                    function abi_encode_packed_stringliteral_c5d2(pos) -> end\n                    {\n                        pos := abi_encode_stringliteral_c5d2(pos)\n                        end := pos\n                    }\n                    function round_up_to_mul_of(value) -> result\n                    {\n                        result := and(add(value, 31), not(31))\n                    }\n                    function panic_error_0x41()\n                    {\n                        mstore(0, shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(0, 0x24)\n                    }\n                    function finalize_allocation(memPtr, size)\n                    {\n                        let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                        mstore(64, newFreePtr)\n                    }\n                    function allocate_memory(size) -> memPtr\n                    {\n                        memPtr := allocate_unbounded()\n                        finalize_allocation(memPtr, size)\n                    }\n                    function array_allocation_size_bytes(length) -> size\n                    {\n                        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                        size := round_up_to_mul_of(length)\n                        size := add(size, 0x20)\n                    }\n                    function allocate_memory_array_bytes(length) -> memPtr\n                    {\n                        let allocSize := array_allocation_size_bytes(length)\n                        memPtr := allocate_memory(allocSize)\n                        mstore(memPtr, length)\n                    }\n                    function zero_value_for_split_bytes() -> ret\n                    { ret := 96 }\n                    function extract_returndata() -> data\n                    {\n                        switch returndatasize()\n                        case 0 {\n                            data := zero_value_for_split_bytes()\n                        }\n                        default {\n                            data := allocate_memory_array_bytes(returndatasize())\n                            returndatacopy(add(data, 0x20), 0, returndatasize())\n                        }\n                    }\n                    function store_literal_in_memory_2bbe70e6500e9642f2862dc923170a5f09b5a43a51b0f2c3488a318564bb6925(memPtr)\n                    {\n                        mstore(add(memPtr, 0), \"Withdraw failed\")\n                    }\n                    function abi_encode_stringliteral_2bbe70e6500e9642f2862dc923170a5f09b5a43a51b0f2c3488a318564bb6925(pos) -> end\n                    {\n                        pos := array_storeLengthForEncoding_string(pos, 15)\n                        store_literal_in_memory_2bbe70e6500e9642f2862dc923170a5f09b5a43a51b0f2c3488a318564bb6925(pos)\n                        end := add(pos, 32)\n                    }\n                    function abi_encode_stringliteral_2bbe(headStart) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        mstore(add(headStart, 0), sub(tail, headStart))\n                        tail := abi_encode_stringliteral_2bbe70e6500e9642f2862dc923170a5f09b5a43a51b0f2c3488a318564bb6925(tail)\n                    }\n                    function require_helper_stringliteral_2bbe(condition)\n                    {\n                        if iszero(condition)\n                        {\n                            let memPtr := allocate_unbounded()\n                            mstore(memPtr, shl(229, 4594637))\n                            let end := abi_encode_stringliteral_2bbe(add(memPtr, 4))\n                            revert(memPtr, sub(end, memPtr))\n                        }\n                    }\n                    function shift_left_168(value) -> newValue\n                    { newValue := shl(168, value) }\n                    function update_byte_slice_shift_21(value, toInsert) -> result\n                    {\n                        let mask := shl(168, 255)\n                        toInsert := shift_left_168(toInsert)\n                        value := and(value, not(mask))\n                        result := or(value, and(toInsert, mask))\n                    }\n                    function convert_bool_to_bool(value) -> converted\n                    {\n                        converted := cleanup_bool(value)\n                    }\n                    function prepare_store_bool(value) -> ret\n                    { ret := value }\n                    function update_storage_value_offset_t_bool_to_t_bool(slot, value)\n                    {\n                        let convertedValue := convert_bool_to_bool(value)\n                        sstore(slot, update_byte_slice_shift_21(sload(slot), prepare_store_bool(convertedValue)))\n                    }\n                    /// @src 0:965:1803  \"function withdraw(address _to, bool isObligation) external onlyOwner {...\"\n                    function fun_withdraw_inner(var__to, var_isObligation)\n                    {\n                        /// @src 0:1052:1067  \"block.timestamp\"\n                        let expr := timestamp()\n                        /// @src 0:1071:1079  \"deadline\"\n                        let _1 := read_from_storage_split_offset_uint256(0x00)\n                        let expr_1 := _1\n                        /// @src 0:1052:1079  \"block.timestamp >= deadline\"\n                        let expr_2 := iszero(lt(cleanup_uint256(expr), cleanup_uint256(expr_1)))\n                        /// @src 0:1044:1108  \"require(block.timestamp >= deadline, \\\"Deadline not yet reached\\\")\"\n                        require_helper_stringliteral_9346(expr_2)\n                        /// @src 0:1144:1148  \"this\"\n                        let expr_address := address()\n                        /// @src 0:1136:1149  \"address(this)\"\n                        let expr_3 := convert_contract_Box_to_address(expr_address)\n                        /// @src 0:1136:1157  \"address(this).balance\"\n                        let expr_4 := balance(expr_3)\n                        /// @src 0:1119:1157  \"uint256 amount = address(this).balance\"\n                        let var_amount := expr_4\n                        /// @src 0:1175:1181  \"amount\"\n                        let _2 := var_amount\n                        let expr_5 := _2\n                        /// @src 0:1184:1185  \"0\"\n                        let expr_6 := 0x00\n                        /// @src 0:1175:1185  \"amount > 0\"\n                        let expr_7 := gt(cleanup_uint256(expr_5), convert_t_rational_by_to_t_uint256(expr_6))\n                        /// @src 0:1175:1206  \"amount > 0 && isWithdraw==false\"\n                        let expr_8 := expr_7\n                        if expr_8\n                        {\n                            /// @src 0:1189:1199  \"isWithdraw\"\n                            let _3 := read_from_storage_split_offset_bool(0x02)\n                            let expr_9 := _3\n                            /// @src 0:1201:1206  \"false\"\n                            let expr_10 := 0x00\n                            /// @src 0:1189:1206  \"isWithdraw==false\"\n                            let expr_11 := eq(cleanup_bool(expr_9), cleanup_bool(expr_10))\n                            /// @src 0:1175:1206  \"amount > 0 && isWithdraw==false\"\n                            expr_8 := expr_11\n                        }\n                        /// @src 0:1167:1231  \"require(amount > 0 && isWithdraw==false, \\\"No funds to withdraw\\\")\"\n                        require_helper_stringliteral_4b4c(expr_8)\n                        /// @src 0:1253:1265  \"isObligation\"\n                        let _4 := var_isObligation\n                        let expr_12 := _4\n                        /// @src 0:1269:1273  \"true\"\n                        let expr_13 := 0x01\n                        /// @src 0:1253:1273  \"isObligation == true\"\n                        let expr_14 := eq(cleanup_bool(expr_12), cleanup_bool(expr_13))\n                        /// @src 0:1250:1795  \"if(isObligation == true){...\"\n                        switch expr_14\n                        case 0 {\n                            /// @src 0:1517:1525  \"deadline\"\n                            let _5 := read_from_storage_split_offset_uint256(0x00)\n                            let expr_15 := _5\n                            /// @src 0:1527:1535  \"3600 *24\"\n                            let expr_16 := 0x015180\n                            /// @src 0:1526:1536  \"(3600 *24)\"\n                            let expr_17 := expr_16\n                            /// @src 0:1517:1536  \"deadline+(3600 *24)\"\n                            let expr_18 := checked_add_uint256(expr_15, convert_rational_by_to_uint256(expr_17))\n                            /// @src 0:1495:1536  \"uint extendDeadline = deadline+(3600 *24)\"\n                            let var_extendDeadline := expr_18\n                            /// @src 0:1558:1572  \"extendDeadline\"\n                            let _6 := var_extendDeadline\n                            let expr_19 := _6\n                            /// @src 0:1575:1590  \"block.timestamp\"\n                            let expr_20 := timestamp()\n                            /// @src 0:1558:1590  \"extendDeadline < block.timestamp\"\n                            let expr_21 := lt(cleanup_uint256(expr_19), cleanup_uint256(expr_20))\n                            /// @src 0:1550:1591  \"require(extendDeadline < block.timestamp)\"\n                            require_helper(expr_21)\n                            /// @src 0:1632:1635  \"_to\"\n                            let _7 := var__to\n                            let expr_22 := _7\n                            /// @src 0:1624:1636  \"payable(_to)\"\n                            let expr_23 := convert_address_to_address_payable(expr_22)\n                            /// @src 0:1624:1641  \"payable(_to).call\"\n                            let expr_185_address := convert_address_payable_to_address(expr_23)\n                            /// @src 0:1649:1655  \"amount\"\n                            let _8 := var_amount\n                            let expr_24 := _8\n                            /// @src 0:1624:1656  \"payable(_to).call{value: amount}\"\n                            let expr_187_address := expr_185_address\n                            let expr_187_value := expr_24\n                            /// @src 0:1624:1660  \"payable(_to).call{value: amount}(\\\"\\\")\"\n                            let _9 := allocate_unbounded()\n                            let _10 := sub(abi_encode_packed_stringliteral_c5d2(_9), _9)\n                            let expr_component := call(gas(), expr_187_address, expr_187_value, _9, _10, 0, 0)\n                            pop(extract_returndata())\n                            /// @src 0:1605:1660  \"(bool success, ) = payable(_to).call{value: amount}(\\\"\\\")\"\n                            let var_success := expr_component\n                            /// @src 0:1682:1689  \"success\"\n                            let _11 := var_success\n                            let expr_25 := _11\n                            /// @src 0:1674:1709  \"require(success, \\\"Withdraw failed\\\")\"\n                            require_helper_stringliteral_2bbe(expr_25)\n                            /// @src 0:1736:1740  \"true\"\n                            let expr_26 := 0x01\n                            /// @src 0:1723:1740  \"isWithdraw = true\"\n                            update_storage_value_offset_t_bool_to_t_bool(0x02, expr_26)\n                            /// @src 0:1769:1774  \"owner\"\n                            let _12 := read_from_storage_split_offset_address_payable(0x02)\n                            let expr_27 := _12\n                            /// @src 0:1776:1782  \"amount\"\n                            let _13 := var_amount\n                            let expr_28 := _13\n                            /// @src 0:1759:1783  \"Withdrawn(owner, amount)\"\n                            let _14 := 0x7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5\n                            let _15 := convert_address_payable_to_address(expr_27)\n                            let _16 := allocate_unbounded()\n                            let _17 := abi_encode_uint256(_16, expr_28)\n                            log2(_16, sub(_17, _16), _14, _15)\n                        }\n                        default /// @src 0:1250:1795  \"if(isObligation == true){...\"\n                        {\n                            /// @src 0:1315:1318  \"_to\"\n                            let _18 := var__to\n                            let expr_29 := _18\n                            /// @src 0:1307:1319  \"payable(_to)\"\n                            let expr_30 := convert_address_to_address_payable(expr_29)\n                            /// @src 0:1307:1324  \"payable(_to).call\"\n                            let expr_142_address := convert_address_payable_to_address(expr_30)\n                            /// @src 0:1332:1338  \"amount\"\n                            let _19 := var_amount\n                            let expr_31 := _19\n                            /// @src 0:1307:1339  \"payable(_to).call{value: amount}\"\n                            let expr_144_address := expr_142_address\n                            let expr_value := expr_31\n                            /// @src 0:1307:1343  \"payable(_to).call{value: amount}(\\\"\\\")\"\n                            let _20 := allocate_unbounded()\n                            let _21 := sub(abi_encode_packed_stringliteral_c5d2(_20), _20)\n                            let expr_component_1 := call(gas(), expr_144_address, expr_value, _20, _21, 0, 0)\n                            pop(extract_returndata())\n                            /// @src 0:1288:1343  \"(bool success, ) = payable(_to).call{value: amount}(\\\"\\\")\"\n                            let var_success_1 := expr_component_1\n                            /// @src 0:1365:1372  \"success\"\n                            let _22 := var_success_1\n                            let expr_32 := _22\n                            /// @src 0:1357:1392  \"require(success, \\\"Withdraw failed\\\")\"\n                            require_helper_stringliteral_2bbe(expr_32)\n                            /// @src 0:1419:1423  \"true\"\n                            let expr_33 := 0x01\n                            /// @src 0:1406:1423  \"isWithdraw = true\"\n                            update_storage_value_offset_t_bool_to_t_bool(0x02, expr_33)\n                            /// @src 0:1452:1457  \"owner\"\n                            let _23 := read_from_storage_split_offset_address_payable(0x02)\n                            let expr_34 := _23\n                            /// @src 0:1459:1465  \"amount\"\n                            let _24 := var_amount\n                            let expr_35 := _24\n                            /// @src 0:1442:1466  \"Withdrawn(owner, amount)\"\n                            let _25 := 0x7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5\n                            let _26 := convert_address_payable_to_address(expr_34)\n                            let _27 := allocate_unbounded()\n                            let _28 := abi_encode_uint256(_27, expr_35)\n                            log2(_27, sub(_28, _27), _25, _26)\n                        }\n                    }\n                    /// @ast-id 208 @src 0:965:1803  \"function withdraw(address _to, bool isObligation) external onlyOwner {...\"\n                    function fun_withdraw(var_to, var_isObligation)\n                    {\n                        modifier_onlyOwner(var_to, var_isObligation)\n                    }\n                    /// @src 0:72:1871  \"contract Box {...\"\n                    function shift_right_unsigned(value) -> newValue\n                    { newValue := shr(160, value) }\n                    function extract_from_storage_value_offset_bool(slot_value) -> value\n                    {\n                        value := cleanup_from_storage_bool(shift_right_unsigned(slot_value))\n                    }\n                    function read_from_storage_split_offset_t_bool(slot) -> value\n                    {\n                        value := extract_from_storage_value_offset_bool(sload(slot))\n                    }\n                    function store_literal_in_memory_80869cfbf249c642ba4b5f4d5fde64755a28853a4f2a5429e72183f699da85b5(memPtr)\n                    {\n                        mstore(add(memPtr, 0), \"Contract already funded\")\n                    }\n                    function abi_encode_stringliteral_80869cfbf249c642ba4b5f4d5fde64755a28853a4f2a5429e72183f699da85b5(pos) -> end\n                    {\n                        pos := array_storeLengthForEncoding_string(pos, 23)\n                        store_literal_in_memory_80869cfbf249c642ba4b5f4d5fde64755a28853a4f2a5429e72183f699da85b5(pos)\n                        end := add(pos, 32)\n                    }\n                    function abi_encode_stringliteral_8086(headStart) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        mstore(add(headStart, 0), sub(tail, headStart))\n                        tail := abi_encode_stringliteral_80869cfbf249c642ba4b5f4d5fde64755a28853a4f2a5429e72183f699da85b5(tail)\n                    }\n                    function require_helper_stringliteral_8086(condition)\n                    {\n                        if iszero(condition)\n                        {\n                            let memPtr := allocate_unbounded()\n                            mstore(memPtr, shl(229, 4594637))\n                            let end := abi_encode_stringliteral_8086(add(memPtr, 4))\n                            revert(memPtr, sub(end, memPtr))\n                        }\n                    }\n                    function store_literal_in_memory_ebfa112dcede3b10ff28b3a118f2beb993367dd3bc98443adc7df7774b616480(memPtr)\n                    {\n                        mstore(add(memPtr, 0), \"Must send ETH\")\n                    }\n                    function abi_encode_stringliteral_ebfa(pos) -> end\n                    {\n                        pos := array_storeLengthForEncoding_string(pos, 13)\n                        store_literal_in_memory_ebfa112dcede3b10ff28b3a118f2beb993367dd3bc98443adc7df7774b616480(pos)\n                        end := add(pos, 32)\n                    }\n                    function abi_encode_tuple_stringliteral_ebfa(headStart) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        mstore(add(headStart, 0), sub(tail, headStart))\n                        tail := abi_encode_stringliteral_ebfa(tail)\n                    }\n                    function require_helper_stringliteral_ebfa(condition)\n                    {\n                        if iszero(condition)\n                        {\n                            let memPtr := allocate_unbounded()\n                            mstore(memPtr, shl(229, 4594637))\n                            let end := abi_encode_tuple_stringliteral_ebfa(add(memPtr, 4))\n                            revert(memPtr, sub(end, memPtr))\n                        }\n                    }\n                    function store_literal_in_memory_24673d1b0003a199275166474575e96e531c915eb950e021102fb167de0d7af4(memPtr)\n                    {\n                        mstore(add(memPtr, 0), \"Invalid duration\")\n                    }\n                    function abi_encode_stringliteral_24673d1b0003a199275166474575e96e531c915eb950e021102fb167de0d7af4(pos) -> end\n                    {\n                        pos := array_storeLengthForEncoding_string(pos, 16)\n                        store_literal_in_memory_24673d1b0003a199275166474575e96e531c915eb950e021102fb167de0d7af4(pos)\n                        end := add(pos, 32)\n                    }\n                    function abi_encode_stringliteral_2467(headStart) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        mstore(add(headStart, 0), sub(tail, headStart))\n                        tail := abi_encode_stringliteral_24673d1b0003a199275166474575e96e531c915eb950e021102fb167de0d7af4(tail)\n                    }\n                    function require_helper_stringliteral(condition)\n                    {\n                        if iszero(condition)\n                        {\n                            let memPtr := allocate_unbounded()\n                            mstore(memPtr, shl(229, 4594637))\n                            let end := abi_encode_stringliteral_2467(add(memPtr, 4))\n                            revert(memPtr, sub(end, memPtr))\n                        }\n                    }\n                    function shift_left(value) -> newValue\n                    { newValue := shl(0, value) }\n                    function update_byte_slice_shift_0(value, toInsert) -> result\n                    {\n                        let mask := sub(shl(160, 1), 1)\n                        toInsert := shift_left(toInsert)\n                        value := and(value, not(mask))\n                        result := or(value, and(toInsert, mask))\n                    }\n                    function convert_address_payable_to_address_payable(value) -> converted\n                    {\n                        converted := convert_uint160_to_address_payable(value)\n                    }\n                    function prepare_store_address_payable(value) -> ret\n                    { ret := value }\n                    function update_storage_value_offset_address_payable_to_address_payable(slot, value)\n                    {\n                        let convertedValue := convert_address_payable_to_address_payable(value)\n                        sstore(slot, update_byte_slice_shift_0(sload(slot), prepare_store_address_payable(convertedValue)))\n                    }\n                    function update_byte_slice_shift(value, toInsert) -> result\n                    {\n                        let mask := not(0)\n                        toInsert := shift_left(toInsert)\n                        value := and(value, not(mask))\n                        result := or(value, and(toInsert, mask))\n                    }\n                    function convert_uint256_to_uint256(value) -> converted\n                    {\n                        converted := cleanup_uint256(identity(cleanup_uint256(value)))\n                    }\n                    function prepare_store_uint256(value) -> ret\n                    { ret := value }\n                    function update_storage_value_offset_uint256_to_uint256(slot, value)\n                    {\n                        let convertedValue := convert_uint256_to_uint256(value)\n                        sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n                    }\n                    function shift_left_160(value) -> newValue\n                    { newValue := shl(160, value) }\n                    function update_byte_slice_shift_20(value, toInsert) -> result\n                    {\n                        let mask := shl(160, 255)\n                        toInsert := shift_left_160(toInsert)\n                        value := and(value, not(mask))\n                        result := or(value, and(toInsert, mask))\n                    }\n                    function update_storage_value_offset_bool_to_bool(slot, value)\n                    {\n                        let convertedValue := convert_bool_to_bool(value)\n                        sstore(slot, update_byte_slice_shift_20(sload(slot), prepare_store_bool(convertedValue)))\n                    }\n                    function convert_address_to_address(value) -> converted\n                    {\n                        converted := convert_uint160_to_address(value)\n                    }\n                    function abi_encode_uint256_uint256(headStart, value0, value1) -> tail\n                    {\n                        tail := add(headStart, 64)\n                        abi_encode_uint256_to_uint256(value0, add(headStart, 0))\n                        abi_encode_uint256_to_uint256(value1, add(headStart, 32))\n                    }\n                    /// @ast-id 97 @src 0:492:959  \"function deposit(uint256 _durationInSeconds) external payable {...\"\n                    function fun_deposit(var_durationInSeconds)\n                    {\n                        /// @src 0:573:589  \"isContractFunded\"\n                        let _1 := read_from_storage_split_offset_t_bool(0x02)\n                        let expr := _1\n                        /// @src 0:572:589  \"!isContractFunded\"\n                        let expr_1 := cleanup_bool(iszero(expr))\n                        /// @src 0:564:617  \"require(!isContractFunded, \\\"Contract already funded\\\")\"\n                        require_helper_stringliteral_8086(expr_1)\n                        /// @src 0:635:644  \"msg.value\"\n                        let expr_2 := callvalue()\n                        /// @src 0:647:648  \"0\"\n                        let expr_3 := 0x00\n                        /// @src 0:635:648  \"msg.value > 0\"\n                        let expr_4 := gt(cleanup_uint256(expr_2), convert_t_rational_by_to_t_uint256(expr_3))\n                        /// @src 0:627:666  \"require(msg.value > 0, \\\"Must send ETH\\\")\"\n                        require_helper_stringliteral_ebfa(expr_4)\n                        /// @src 0:684:702  \"_durationInSeconds\"\n                        let _2 := var_durationInSeconds\n                        let expr_5 := _2\n                        /// @src 0:705:706  \"0\"\n                        let expr_6 := 0x00\n                        /// @src 0:684:706  \"_durationInSeconds > 0\"\n                        let expr_7 := gt(cleanup_uint256(expr_5), convert_t_rational_by_to_t_uint256(expr_6))\n                        /// @src 0:676:727  \"require(_durationInSeconds > 0, \\\"Invalid duration\\\")\"\n                        require_helper_stringliteral(expr_7)\n                        /// @src 0:754:764  \"msg.sender\"\n                        let expr_8 := caller()\n                        /// @src 0:746:765  \"payable(msg.sender)\"\n                        let expr_9 := convert_address_to_address_payable(expr_8)\n                        /// @src 0:738:765  \"owner = payable(msg.sender)\"\n                        update_storage_value_offset_address_payable_to_address_payable(0x02, expr_9)\n                        /// @src 0:789:804  \"block.timestamp\"\n                        let expr_10 := timestamp()\n                        /// @src 0:775:804  \"initialTime = block.timestamp\"\n                        update_storage_value_offset_uint256_to_uint256(0x01, expr_10)\n                        /// @src 0:825:840  \"block.timestamp\"\n                        let expr_11 := timestamp()\n                        /// @src 0:843:861  \"_durationInSeconds\"\n                        let _3 := var_durationInSeconds\n                        let expr_12 := _3\n                        /// @src 0:825:861  \"block.timestamp + _durationInSeconds\"\n                        let expr_13 := checked_add_uint256(expr_11, expr_12)\n                        /// @src 0:814:861  \"deadline = block.timestamp + _durationInSeconds\"\n                        update_storage_value_offset_uint256_to_uint256(0x00, expr_13)\n                        /// @src 0:890:894  \"true\"\n                        let expr_14 := 0x01\n                        /// @src 0:871:894  \"isContractFunded = true\"\n                        update_storage_value_offset_bool_to_bool(0x02, expr_14)\n                        /// @src 0:920:930  \"msg.sender\"\n                        let expr_15 := caller()\n                        /// @src 0:932:941  \"msg.value\"\n                        let expr_16 := callvalue()\n                        /// @src 0:943:951  \"deadline\"\n                        let _4 := read_from_storage_split_offset_uint256(0x00)\n                        let expr_17 := _4\n                        /// @src 0:910:952  \"Deposited(msg.sender, msg.value, deadline)\"\n                        let _5 := 0x73a19dd210f1a7f902193214c0ee91dd35ee5b4d920cba8d519eca65a7b488ca\n                        let _6 := convert_address_to_address(expr_15)\n                        let _7 := allocate_unbounded()\n                        let _8 := abi_encode_uint256_uint256(_7, expr_16, expr_17)\n                        log2(_7, sub(_8, _7), _5, _6)\n                    }\n                }\n                data \".metadata\" hex\"a26469706673582212205a63dbe2bba412358febd9bd720677d2f3069d42171ac0879d217ebd415030cd64736f6c634300081c0033\"\n            }\n        }\n        data \".metadata\" hex\"a264697066735822122084eb47f42bc14d0d4e8cb49c396bc3d69fcff086a3319b7edb96de728b4375f464736f6c634300081c0033\"\n    }\n}\n",
					"hash": "a3ad015a3afd3400b08d72bda2735c2d20891e6fc09b63b8f49e252198160285",
					"factoryDependencies": {
						"3793e865e19cda689444985eedcf506af0d8b0f39a588252fef43303f834590c": "contracts/SwappyBox/SwappBox.sol:Box"
					}
				}
			}
		},
		"sources": {
			"contracts/SwappyBox/SwappBox.sol": {
				"id": 0,
				"ast": {
					"absolutePath": "contracts/SwappyBox/SwappBox.sol",
					"exportedSymbols": {
						"Box": [
							213
						],
						"SwappyBox": [
							658
						]
					},
					"id": 659,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".2",
								"<",
								"0.9",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "37:31:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Box",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 213,
							"linearizedBaseContracts": [
								213
							],
							"name": "Box",
							"nameLocation": "81:3:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "29dcb0cf",
									"id": 3,
									"mutability": "mutable",
									"name": "deadline",
									"nameLocation": "106:8:0",
									"nodeType": "VariableDeclaration",
									"scope": 213,
									"src": "91:23:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "91:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "9ced0e9b",
									"id": 5,
									"mutability": "mutable",
									"name": "initialTime",
									"nameLocation": "135:11:0",
									"nodeType": "VariableDeclaration",
									"scope": 213,
									"src": "120:26:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 4,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "120:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8da5cb5b",
									"id": 7,
									"mutability": "mutable",
									"name": "owner",
									"nameLocation": "175:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 213,
									"src": "152:28:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address_payable",
										"typeString": "address payable"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "152:15:0",
										"stateMutability": "payable",
										"typeDescriptions": {
											"typeIdentifier": "t_address_payable",
											"typeString": "address payable"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "c934e08e",
									"id": 9,
									"mutability": "mutable",
									"name": "isContractFunded",
									"nameLocation": "198:16:0",
									"nodeType": "VariableDeclaration",
									"scope": 213,
									"src": "186:28:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 8,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "186:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "dbae172c",
									"id": 12,
									"mutability": "mutable",
									"name": "isWithdraw",
									"nameLocation": "232:10:0",
									"nodeType": "VariableDeclaration",
									"scope": 213,
									"src": "220:30:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 10,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "220:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"value": {
										"hexValue": "66616c7365",
										"id": 11,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "bool",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "245:5:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										},
										"value": "false"
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"eventSelector": "73a19dd210f1a7f902193214c0ee91dd35ee5b4d920cba8d519eca65a7b488ca",
									"id": 20,
									"name": "Deposited",
									"nameLocation": "263:9:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "289:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "273:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "273:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 16,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "303:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "295:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 15,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "295:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 18,
												"indexed": false,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "319:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "311:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 17,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "311:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "272:56:0"
									},
									"src": "257:72:0"
								},
								{
									"anonymous": false,
									"eventSelector": "7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5",
									"id": 26,
									"name": "Withdrawn",
									"nameLocation": "340:9:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 22,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "366:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 26,
												"src": "350:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 21,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "350:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 24,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "378:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 26,
												"src": "370:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 23,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "370:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "349:36:0"
									},
									"src": "334:52:0"
								},
								{
									"body": {
										"id": 37,
										"nodeType": "Block",
										"src": "413:73:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 32,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 29,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "431:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 30,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "435:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "431:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 31,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "445:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "431:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f7420746865206f776e6572",
															"id": 33,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "452:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_72ec00def0a4f647f10f2a5c1742fab7d53364130edc365182f3ccef5864f2a5",
																"typeString": "literal_string \"Not the owner\""
															},
															"value": "Not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_72ec00def0a4f647f10f2a5c1742fab7d53364130edc365182f3ccef5864f2a5",
																"typeString": "literal_string \"Not the owner\""
															}
														],
														"id": 28,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "423:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 34,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "423:45:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 35,
												"nodeType": "ExpressionStatement",
												"src": "423:45:0"
											},
											{
												"id": 36,
												"nodeType": "PlaceholderStatement",
												"src": "478:1:0"
											}
										]
									},
									"id": 38,
									"name": "onlyOwner",
									"nameLocation": "401:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 27,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "410:2:0"
									},
									"src": "392:94:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 96,
										"nodeType": "Block",
										"src": "554:405:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 45,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "572:17:0",
															"subExpression": {
																"id": 44,
																"name": "isContractFunded",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 9,
																"src": "573:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "436f6e747261637420616c72656164792066756e646564",
															"id": 46,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "591:25:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_80869cfbf249c642ba4b5f4d5fde64755a28853a4f2a5429e72183f699da85b5",
																"typeString": "literal_string \"Contract already funded\""
															},
															"value": "Contract already funded"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_80869cfbf249c642ba4b5f4d5fde64755a28853a4f2a5429e72183f699da85b5",
																"typeString": "literal_string \"Contract already funded\""
															}
														],
														"id": 43,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "564:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 47,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "564:53:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 48,
												"nodeType": "ExpressionStatement",
												"src": "564:53:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 53,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 50,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "635:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 51,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "639:5:0",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "635:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 52,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "647:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "635:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4d7573742073656e6420455448",
															"id": 54,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "650:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebfa112dcede3b10ff28b3a118f2beb993367dd3bc98443adc7df7774b616480",
																"typeString": "literal_string \"Must send ETH\""
															},
															"value": "Must send ETH"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebfa112dcede3b10ff28b3a118f2beb993367dd3bc98443adc7df7774b616480",
																"typeString": "literal_string \"Must send ETH\""
															}
														],
														"id": 49,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "627:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 55,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "627:39:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 56,
												"nodeType": "ExpressionStatement",
												"src": "627:39:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 60,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 58,
																"name": "_durationInSeconds",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 40,
																"src": "684:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 59,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "705:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "684:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c6964206475726174696f6e",
															"id": 61,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "708:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24673d1b0003a199275166474575e96e531c915eb950e021102fb167de0d7af4",
																"typeString": "literal_string \"Invalid duration\""
															},
															"value": "Invalid duration"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_24673d1b0003a199275166474575e96e531c915eb950e021102fb167de0d7af4",
																"typeString": "literal_string \"Invalid duration\""
															}
														],
														"id": 57,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "676:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 62,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "676:51:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 63,
												"nodeType": "ExpressionStatement",
												"src": "676:51:0"
											},
											{
												"expression": {
													"id": 70,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 64,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "738:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"id": 67,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "754:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 68,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "758:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "754:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 66,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "746:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_payable_$",
																"typeString": "type(address payable)"
															},
															"typeName": {
																"id": 65,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "746:8:0",
																"stateMutability": "payable",
																"typeDescriptions": {}
															}
														},
														"id": 69,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "746:19:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "738:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"id": 71,
												"nodeType": "ExpressionStatement",
												"src": "738:27:0"
											},
											{
												"expression": {
													"id": 75,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 72,
														"name": "initialTime",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 5,
														"src": "775:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 73,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "789:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 74,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "795:9:0",
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "789:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "775:29:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 76,
												"nodeType": "ExpressionStatement",
												"src": "775:29:0"
											},
											{
												"expression": {
													"id": 82,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 77,
														"name": "deadline",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3,
														"src": "814:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 81,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 78,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "825:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 79,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "831:9:0",
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "825:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"id": 80,
															"name": "_durationInSeconds",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 40,
															"src": "843:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "825:36:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "814:47:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 83,
												"nodeType": "ExpressionStatement",
												"src": "814:47:0"
											},
											{
												"expression": {
													"id": 86,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 84,
														"name": "isContractFunded",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 9,
														"src": "871:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 85,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "890:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "871:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 87,
												"nodeType": "ExpressionStatement",
												"src": "871:23:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 89,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "920:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 90,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "924:6:0",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "920:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 91,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "932:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 92,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "936:5:0",
															"memberName": "value",
															"nodeType": "MemberAccess",
															"src": "932:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 93,
															"name": "deadline",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3,
															"src": "943:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 88,
														"name": "Deposited",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 20,
														"src": "910:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256)"
														}
													},
													"id": 94,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "910:42:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 95,
												"nodeType": "EmitStatement",
												"src": "905:47:0"
											}
										]
									},
									"functionSelector": "b6b55f25",
									"id": 97,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "deposit",
									"nameLocation": "501:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 41,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 40,
												"mutability": "mutable",
												"name": "_durationInSeconds",
												"nameLocation": "517:18:0",
												"nodeType": "VariableDeclaration",
												"scope": 97,
												"src": "509:26:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 39,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "509:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "508:28:0"
									},
									"returnParameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "554:0:0"
									},
									"scope": 213,
									"src": "492:467:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 207,
										"nodeType": "Block",
										"src": "1034:769:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 110,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 107,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "1052:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 108,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1058:9:0",
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "1052:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 109,
																"name": "deadline",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3,
																"src": "1071:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1052:27:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "446561646c696e65206e6f74207965742072656163686564",
															"id": 111,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1081:26:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9346fa5bb6daee01a14e560a7040427cee2fc946781925fbe052d7ef325298b0",
																"typeString": "literal_string \"Deadline not yet reached\""
															},
															"value": "Deadline not yet reached"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9346fa5bb6daee01a14e560a7040427cee2fc946781925fbe052d7ef325298b0",
																"typeString": "literal_string \"Deadline not yet reached\""
															}
														],
														"id": 106,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1044:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 112,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1044:64:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 113,
												"nodeType": "ExpressionStatement",
												"src": "1044:64:0"
											},
											{
												"assignments": [
													115
												],
												"declarations": [
													{
														"constant": false,
														"id": 115,
														"mutability": "mutable",
														"name": "amount",
														"nameLocation": "1127:6:0",
														"nodeType": "VariableDeclaration",
														"scope": 207,
														"src": "1119:14:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 114,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1119:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 121,
												"initialValue": {
													"expression": {
														"arguments": [
															{
																"id": 118,
																"name": "this",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967268,
																"src": "1144:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_Box_$213",
																	"typeString": "contract Box"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_Box_$213",
																	"typeString": "contract Box"
																}
															],
															"id": 117,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1136:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 116,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1136:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 119,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1136:13:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 120,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "1150:7:0",
													"memberName": "balance",
													"nodeType": "MemberAccess",
													"src": "1136:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1119:38:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 129,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 125,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 123,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 115,
																	"src": "1175:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 124,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1184:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "1175:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 128,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 126,
																	"name": "isWithdraw",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 12,
																	"src": "1189:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "66616c7365",
																	"id": 127,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1201:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "1189:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1175:31:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f2066756e647320746f207769746864726177",
															"id": 130,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1208:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4b4cc99522fdcee4d97d6d2d3cbabeb353d40433850bd46ba29c08dbfba843f9",
																"typeString": "literal_string \"No funds to withdraw\""
															},
															"value": "No funds to withdraw"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4b4cc99522fdcee4d97d6d2d3cbabeb353d40433850bd46ba29c08dbfba843f9",
																"typeString": "literal_string \"No funds to withdraw\""
															}
														],
														"id": 122,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1167:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 131,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1167:64:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 132,
												"nodeType": "ExpressionStatement",
												"src": "1167:64:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 135,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 133,
														"name": "isObligation",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 101,
														"src": "1253:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "74727565",
														"id": 134,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1269:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "1253:20:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 205,
													"nodeType": "Block",
													"src": "1481:314:0",
													"statements": [
														{
															"assignments": [
																164
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 164,
																	"mutability": "mutable",
																	"name": "extendDeadline",
																	"nameLocation": "1500:14:0",
																	"nodeType": "VariableDeclaration",
																	"scope": 205,
																	"src": "1495:19:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 163,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "1495:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 171,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 170,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 165,
																	"name": "deadline",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3,
																	"src": "1517:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_rational_86400_by_1",
																				"typeString": "int_const 86400"
																			},
																			"id": 168,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "33363030",
																				"id": 166,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1527:4:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_3600_by_1",
																					"typeString": "int_const 3600"
																				},
																				"value": "3600"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"hexValue": "3234",
																				"id": 167,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1533:2:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_24_by_1",
																					"typeString": "int_const 24"
																				},
																				"value": "24"
																			},
																			"src": "1527:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_86400_by_1",
																				"typeString": "int_const 86400"
																			}
																		}
																	],
																	"id": 169,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1526:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_86400_by_1",
																		"typeString": "int_const 86400"
																	}
																},
																"src": "1517:19:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "1495:41:0"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 176,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 173,
																			"name": "extendDeadline",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 164,
																			"src": "1558:14:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"expression": {
																				"id": 174,
																				"name": "block",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967292,
																				"src": "1575:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_block",
																					"typeString": "block"
																				}
																			},
																			"id": 175,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "1581:9:0",
																			"memberName": "timestamp",
																			"nodeType": "MemberAccess",
																			"src": "1575:15:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "1558:32:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 172,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "1550:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																		"typeString": "function (bool) pure"
																	}
																},
																"id": 177,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1550:41:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 178,
															"nodeType": "ExpressionStatement",
															"src": "1550:41:0"
														},
														{
															"assignments": [
																180,
																null
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 180,
																	"mutability": "mutable",
																	"name": "success",
																	"nameLocation": "1611:7:0",
																	"nodeType": "VariableDeclaration",
																	"scope": 205,
																	"src": "1606:12:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 179,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "1606:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"visibility": "internal"
																},
																null
															],
															"id": 190,
															"initialValue": {
																"arguments": [
																	{
																		"hexValue": "",
																		"id": 188,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1657:2:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		},
																		"value": ""
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																				"typeString": "literal_string \"\""
																			}
																		],
																		"expression": {
																			"arguments": [
																				{
																					"id": 183,
																					"name": "_to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 99,
																					"src": "1632:3:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 182,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "1624:8:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_payable_$",
																					"typeString": "type(address payable)"
																				},
																				"typeName": {
																					"id": 181,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "1624:8:0",
																					"stateMutability": "payable",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 184,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1624:12:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address_payable",
																				"typeString": "address payable"
																			}
																		},
																		"id": 185,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1637:4:0",
																		"memberName": "call",
																		"nodeType": "MemberAccess",
																		"src": "1624:17:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
																		}
																	},
																	"id": 187,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"names": [
																		"value"
																	],
																	"nodeType": "FunctionCallOptions",
																	"options": [
																		{
																			"id": 186,
																			"name": "amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 115,
																			"src": "1649:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"src": "1624:32:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
																		"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
																	}
																},
																"id": 189,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1624:36:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
																	"typeString": "tuple(bool,bytes memory)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "1605:55:0"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 192,
																		"name": "success",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 180,
																		"src": "1682:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "5769746864726177206661696c6564",
																		"id": 193,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1691:17:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_2bbe70e6500e9642f2862dc923170a5f09b5a43a51b0f2c3488a318564bb6925",
																			"typeString": "literal_string \"Withdraw failed\""
																		},
																		"value": "Withdraw failed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_2bbe70e6500e9642f2862dc923170a5f09b5a43a51b0f2c3488a318564bb6925",
																			"typeString": "literal_string \"Withdraw failed\""
																		}
																	],
																	"id": 191,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "1674:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 194,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1674:35:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 195,
															"nodeType": "ExpressionStatement",
															"src": "1674:35:0"
														},
														{
															"expression": {
																"id": 198,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 196,
																	"name": "isWithdraw",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 12,
																	"src": "1723:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 197,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1736:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "1723:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 199,
															"nodeType": "ExpressionStatement",
															"src": "1723:17:0"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 201,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 7,
																		"src": "1769:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	{
																		"id": 202,
																		"name": "amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 115,
																		"src": "1776:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 200,
																	"name": "Withdrawn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 26,
																	"src": "1759:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256)"
																	}
																},
																"id": 203,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1759:24:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 204,
															"nodeType": "EmitStatement",
															"src": "1754:29:0"
														}
													]
												},
												"id": 206,
												"nodeType": "IfStatement",
												"src": "1250:545:0",
												"trueBody": {
													"id": 162,
													"nodeType": "Block",
													"src": "1274:203:0",
													"statements": [
														{
															"assignments": [
																137,
																null
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 137,
																	"mutability": "mutable",
																	"name": "success",
																	"nameLocation": "1294:7:0",
																	"nodeType": "VariableDeclaration",
																	"scope": 162,
																	"src": "1289:12:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 136,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "1289:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"visibility": "internal"
																},
																null
															],
															"id": 147,
															"initialValue": {
																"arguments": [
																	{
																		"hexValue": "",
																		"id": 145,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1340:2:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		},
																		"value": ""
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																				"typeString": "literal_string \"\""
																			}
																		],
																		"expression": {
																			"arguments": [
																				{
																					"id": 140,
																					"name": "_to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 99,
																					"src": "1315:3:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 139,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "1307:8:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_payable_$",
																					"typeString": "type(address payable)"
																				},
																				"typeName": {
																					"id": 138,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "1307:8:0",
																					"stateMutability": "payable",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 141,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1307:12:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address_payable",
																				"typeString": "address payable"
																			}
																		},
																		"id": 142,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1320:4:0",
																		"memberName": "call",
																		"nodeType": "MemberAccess",
																		"src": "1307:17:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
																		}
																	},
																	"id": 144,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"names": [
																		"value"
																	],
																	"nodeType": "FunctionCallOptions",
																	"options": [
																		{
																			"id": 143,
																			"name": "amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 115,
																			"src": "1332:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"src": "1307:32:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
																		"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
																	}
																},
																"id": 146,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1307:36:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
																	"typeString": "tuple(bool,bytes memory)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "1288:55:0"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 149,
																		"name": "success",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 137,
																		"src": "1365:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "5769746864726177206661696c6564",
																		"id": 150,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1374:17:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_2bbe70e6500e9642f2862dc923170a5f09b5a43a51b0f2c3488a318564bb6925",
																			"typeString": "literal_string \"Withdraw failed\""
																		},
																		"value": "Withdraw failed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_2bbe70e6500e9642f2862dc923170a5f09b5a43a51b0f2c3488a318564bb6925",
																			"typeString": "literal_string \"Withdraw failed\""
																		}
																	],
																	"id": 148,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "1357:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 151,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1357:35:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 152,
															"nodeType": "ExpressionStatement",
															"src": "1357:35:0"
														},
														{
															"expression": {
																"id": 155,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 153,
																	"name": "isWithdraw",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 12,
																	"src": "1406:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 154,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1419:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "1406:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 156,
															"nodeType": "ExpressionStatement",
															"src": "1406:17:0"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 158,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 7,
																		"src": "1452:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	{
																		"id": 159,
																		"name": "amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 115,
																		"src": "1459:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 157,
																	"name": "Withdrawn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 26,
																	"src": "1442:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256)"
																	}
																},
																"id": 160,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1442:24:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 161,
															"nodeType": "EmitStatement",
															"src": "1437:29:0"
														}
													]
												}
											}
										]
									},
									"functionSelector": "5437e401",
									"id": 208,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 104,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 103,
												"name": "onlyOwner",
												"nameLocations": [
													"1024:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 38,
												"src": "1024:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1024:9:0"
										}
									],
									"name": "withdraw",
									"nameLocation": "974:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 99,
												"mutability": "mutable",
												"name": "_to",
												"nameLocation": "991:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 208,
												"src": "983:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 98,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "983:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 101,
												"mutability": "mutable",
												"name": "isObligation",
												"nameLocation": "1001:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 208,
												"src": "996:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 100,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "996:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "982:32:0"
									},
									"returnParameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1034:0:0"
									},
									"scope": 213,
									"src": "965:838:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 211,
										"nodeType": "Block",
										"src": "1867:2:0",
										"statements": []
									},
									"id": 212,
									"implemented": true,
									"kind": "receive",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 209,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1847:2:0"
									},
									"returnParameters": {
										"id": 210,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1867:0:0"
									},
									"scope": 213,
									"src": "1840:29:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 659,
							"src": "72:1799:0",
							"usedErrors": [],
							"usedEvents": [
								20,
								26
							]
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SwappyBox",
							"contractDependencies": [
								213
							],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 658,
							"linearizedBaseContracts": [
								658
							],
							"name": "SwappyBox",
							"nameLocation": "1882:9:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "754215a1",
									"id": 216,
									"mutability": "mutable",
									"name": "box",
									"nameLocation": "1909:3:0",
									"nodeType": "VariableDeclaration",
									"scope": 658,
									"src": "1898:14:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_Box_$213",
										"typeString": "contract Box"
									},
									"typeName": {
										"id": 215,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 214,
											"name": "Box",
											"nameLocations": [
												"1898:3:0"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 213,
											"src": "1898:3:0"
										},
										"referencedDeclaration": 213,
										"src": "1898:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Box_$213",
											"typeString": "contract Box"
										}
									},
									"visibility": "public"
								},
								{
									"canonicalName": "SwappyBox.BidTrack",
									"id": 231,
									"members": [
										{
											"constant": false,
											"id": 218,
											"mutability": "mutable",
											"name": "bidInitialTime",
											"nameLocation": "1948:14:0",
											"nodeType": "VariableDeclaration",
											"scope": 231,
											"src": "1943:19:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 217,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "1943:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 220,
											"mutability": "mutable",
											"name": "bidEndTime",
											"nameLocation": "1977:10:0",
											"nodeType": "VariableDeclaration",
											"scope": 231,
											"src": "1972:15:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 219,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "1972:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 222,
											"mutability": "mutable",
											"name": "totalBid",
											"nameLocation": "2002:8:0",
											"nodeType": "VariableDeclaration",
											"scope": 231,
											"src": "1997:13:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 221,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "1997:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 224,
											"mutability": "mutable",
											"name": "basePrice",
											"nameLocation": "2025:9:0",
											"nodeType": "VariableDeclaration",
											"scope": 231,
											"src": "2020:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 223,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "2020:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 226,
											"mutability": "mutable",
											"name": "lastPrice",
											"nameLocation": "2049:9:0",
											"nodeType": "VariableDeclaration",
											"scope": 231,
											"src": "2044:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 225,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "2044:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 228,
											"mutability": "mutable",
											"name": "currentWinner",
											"nameLocation": "2076:13:0",
											"nodeType": "VariableDeclaration",
											"scope": 231,
											"src": "2068:21:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 227,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "2068:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 230,
											"mutability": "mutable",
											"name": "poolInitiator",
											"nameLocation": "2107:13:0",
											"nodeType": "VariableDeclaration",
											"scope": 231,
											"src": "2099:21:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 229,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "2099:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "BidTrack",
									"nameLocation": "1925:8:0",
									"nodeType": "StructDefinition",
									"scope": 658,
									"src": "1918:209:0",
									"visibility": "public"
								},
								{
									"constant": true,
									"id": 236,
									"mutability": "constant",
									"name": "SLOPE",
									"nameLocation": "2147:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 658,
									"src": "2133:32:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 232,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "2133:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_300000000000000000_by_1",
											"typeString": "int_const 300000000000000000"
										},
										"id": 235,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "302e33",
											"id": 233,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "2155:3:0",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_3_by_10",
												"typeString": "rational_const 3 / 10"
											},
											"value": "0.3"
										},
										"nodeType": "BinaryOperation",
										"operator": "*",
										"rightExpression": {
											"hexValue": "31653138",
											"id": 234,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "2161:4:0",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1000000000000000000_by_1",
												"typeString": "int_const 1000000000000000000"
											},
											"value": "1e18"
										},
										"src": "2155:10:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_300000000000000000_by_1",
											"typeString": "int_const 300000000000000000"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"functionSelector": "13b980a4",
									"id": 241,
									"mutability": "mutable",
									"name": "boxes",
									"nameLocation": "2209:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 658,
									"src": "2174:40:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$",
										"typeString": "mapping(address => address[])"
									},
									"typeName": {
										"id": 240,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 237,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "2182:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "2174:27:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$",
											"typeString": "mapping(address => address[])"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"baseType": {
												"id": 238,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "2191:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"id": 239,
											"nodeType": "ArrayTypeName",
											"src": "2191:9:0",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
												"typeString": "address[]"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "a4e9ea9b",
									"id": 246,
									"mutability": "mutable",
									"name": "boxData",
									"nameLocation": "2254:7:0",
									"nodeType": "VariableDeclaration",
									"scope": 658,
									"src": "2220:41:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_BidTrack_$231_storage_$",
										"typeString": "mapping(address => struct SwappyBox.BidTrack)"
									},
									"typeName": {
										"id": 245,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 242,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "2228:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "2220:26:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_BidTrack_$231_storage_$",
											"typeString": "mapping(address => struct SwappyBox.BidTrack)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 244,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 243,
												"name": "BidTrack",
												"nameLocations": [
													"2237:8:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 231,
												"src": "2237:8:0"
											},
											"referencedDeclaration": 231,
											"src": "2237:8:0",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_BidTrack_$231_storage_ptr",
												"typeString": "struct SwappyBox.BidTrack"
											}
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 268,
										"nodeType": "Block",
										"src": "2299:81:0",
										"statements": [
											{
												"assignments": [
													251
												],
												"declarations": [
													{
														"constant": false,
														"id": 251,
														"mutability": "mutable",
														"name": "bx",
														"nameLocation": "2313:2:0",
														"nodeType": "VariableDeclaration",
														"scope": 268,
														"src": "2309:6:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_Box_$213",
															"typeString": "contract Box"
														},
														"typeName": {
															"id": 250,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 249,
																"name": "Box",
																"nameLocations": [
																	"2309:3:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 213,
																"src": "2309:3:0"
															},
															"referencedDeclaration": 213,
															"src": "2309:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_Box_$213",
																"typeString": "contract Box"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 256,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 254,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "2318:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_creation_nonpayable$__$returns$_t_contract$_Box_$213_$",
															"typeString": "function () returns (contract Box)"
														},
														"typeName": {
															"id": 253,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 252,
																"name": "Box",
																"nameLocations": [
																	"2322:3:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 213,
																"src": "2322:3:0"
															},
															"referencedDeclaration": 213,
															"src": "2322:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_Box_$213",
																"typeString": "contract Box"
															}
														}
													},
													"id": 255,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2318:9:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_Box_$213",
														"typeString": "contract Box"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2309:18:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 264,
																	"name": "bx",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 251,
																	"src": "2368:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Box_$213",
																		"typeString": "contract Box"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Box_$213",
																		"typeString": "contract Box"
																	}
																],
																"id": 263,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2360:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 262,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2360:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 265,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2360:11:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"baseExpression": {
																"id": 257,
																"name": "boxes",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 241,
																"src": "2337:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$",
																	"typeString": "mapping(address => address[] storage ref)"
																}
															},
															"id": 260,
															"indexExpression": {
																"expression": {
																	"id": 258,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2343:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 259,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2347:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2343:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2337:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															}
														},
														"id": 261,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2355:4:0",
														"memberName": "push",
														"nodeType": "MemberAccess",
														"src": "2337:22:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$attached_to$_t_array$_t_address_$dyn_storage_ptr_$",
															"typeString": "function (address[] storage pointer,address)"
														}
													},
													"id": 266,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2337:35:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 267,
												"nodeType": "ExpressionStatement",
												"src": "2337:35:0"
											}
										]
									},
									"functionSelector": "328e6997",
									"id": 269,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "createYourBox",
									"nameLocation": "2276:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 247,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2289:2:0"
									},
									"returnParameters": {
										"id": 248,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2299:0:0"
									},
									"scope": 658,
									"src": "2267:113:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 347,
										"nodeType": "Block",
										"src": "2452:447:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 283,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 277,
																"name": "_index",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 271,
																"src": "2470:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 278,
																		"name": "boxes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 241,
																		"src": "2479:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$",
																			"typeString": "mapping(address => address[] storage ref)"
																		}
																	},
																	"id": 281,
																	"indexExpression": {
																		"expression": {
																			"id": 279,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "2485:3:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 280,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2489:6:0",
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "2485:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2479:17:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_address_$dyn_storage",
																		"typeString": "address[] storage ref"
																	}
																},
																"id": 282,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2497:6:0",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "2479:24:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2470:33:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c696420626f7820696e646578",
															"id": 284,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2505:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebac15005998152c7868d5d3837373e86795737fa2f9ca6c69b26b94f9417814",
																"typeString": "literal_string \"Invalid box index\""
															},
															"value": "Invalid box index"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebac15005998152c7868d5d3837373e86795737fa2f9ca6c69b26b94f9417814",
																"typeString": "literal_string \"Invalid box index\""
															}
														],
														"id": 276,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2462:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 285,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2462:63:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 286,
												"nodeType": "ExpressionStatement",
												"src": "2462:63:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 291,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 288,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2543:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 289,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2547:5:0",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "2543:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 290,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2555:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2543:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6465706f736974206d7573742062652067726561746572207468616e2030",
															"id": 292,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2558:32:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cadb7cc6d49d1ca8f2ba1454a69a5d723dcf8e4e377151620bc4ba8421cad877",
																"typeString": "literal_string \"deposit must be greater than 0\""
															},
															"value": "deposit must be greater than 0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cadb7cc6d49d1ca8f2ba1454a69a5d723dcf8e4e377151620bc4ba8421cad877",
																"typeString": "literal_string \"deposit must be greater than 0\""
															}
														],
														"id": 287,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2535:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 293,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2535:56:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 294,
												"nodeType": "ExpressionStatement",
												"src": "2535:56:0"
											},
											{
												"assignments": [
													296
												],
												"declarations": [
													{
														"constant": false,
														"id": 296,
														"mutability": "mutable",
														"name": "boxAddress",
														"nameLocation": "2609:10:0",
														"nodeType": "VariableDeclaration",
														"scope": 347,
														"src": "2601:18:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 295,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2601:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 303,
												"initialValue": {
													"baseExpression": {
														"baseExpression": {
															"id": 297,
															"name": "boxes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 241,
															"src": "2622:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$",
																"typeString": "mapping(address => address[] storage ref)"
															}
														},
														"id": 300,
														"indexExpression": {
															"expression": {
																"id": 298,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2628:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 299,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2632:6:0",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2628:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "2622:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_storage",
															"typeString": "address[] storage ref"
														}
													},
													"id": 302,
													"indexExpression": {
														"id": 301,
														"name": "_index",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 271,
														"src": "2640:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2622:25:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2601:46:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 314,
															"name": "_deadline",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 273,
															"src": "2708:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 307,
																				"name": "boxAddress",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 296,
																				"src": "2669:10:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 306,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2661:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_payable_$",
																				"typeString": "type(address payable)"
																			},
																			"typeName": {
																				"id": 305,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2661:8:0",
																				"stateMutability": "payable",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 308,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2661:19:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	],
																	"id": 304,
																	"name": "Box",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 213,
																	"src": "2657:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Box_$213_$",
																		"typeString": "type(contract Box)"
																	}
																},
																"id": 309,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2657:24:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_Box_$213",
																	"typeString": "contract Box"
																}
															},
															"id": 310,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2682:7:0",
															"memberName": "deposit",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 97,
															"src": "2657:32:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_payable$_t_uint256_$returns$__$",
																"typeString": "function (uint256) payable external"
															}
														},
														"id": 313,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"expression": {
																	"id": 311,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2697:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 312,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2701:5:0",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "2697:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2657:50:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_payable$_t_uint256_$returns$__$value",
															"typeString": "function (uint256) payable external"
														}
													},
													"id": 315,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2657:61:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 316,
												"nodeType": "ExpressionStatement",
												"src": "2657:61:0"
											},
											{
												"assignments": [
													318
												],
												"declarations": [
													{
														"constant": false,
														"id": 318,
														"mutability": "mutable",
														"name": "basePrice",
														"nameLocation": "2736:9:0",
														"nodeType": "VariableDeclaration",
														"scope": 347,
														"src": "2728:17:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 317,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2728:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 326,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 325,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 322,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 319,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "2749:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 320,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2753:5:0",
																	"memberName": "value",
																	"nodeType": "MemberAccess",
																	"src": "2749:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"hexValue": "3130",
																	"id": 321,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2761:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "2749:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 323,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2748:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "313030",
														"id": 324,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2767:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_100_by_1",
															"typeString": "int_const 100"
														},
														"value": "100"
													},
													"src": "2748:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2728:42:0"
											},
											{
												"expression": {
													"id": 345,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 327,
															"name": "boxData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 246,
															"src": "2780:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_BidTrack_$231_storage_$",
																"typeString": "mapping(address => struct SwappyBox.BidTrack storage ref)"
															}
														},
														"id": 329,
														"indexExpression": {
															"id": 328,
															"name": "boxAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 296,
															"src": "2788:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2780:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_BidTrack_$231_storage",
															"typeString": "struct SwappyBox.BidTrack storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"id": 331,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "2811:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 332,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2817:9:0",
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "2811:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 336,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 333,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "2827:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 334,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2833:9:0",
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "2827:15:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "33363030",
																	"id": 335,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2843:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_3600_by_1",
																		"typeString": "int_const 3600"
																	},
																	"value": "3600"
																},
																"src": "2827:20:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "30",
																"id": 337,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2848:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															{
																"id": 338,
																"name": "basePrice",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 318,
																"src": "2850:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 339,
																"name": "basePrice",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 318,
																"src": "2860:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"expression": {
																	"id": 340,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2870:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 341,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2874:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2870:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"expression": {
																	"id": 342,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2881:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 343,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2885:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2881:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 330,
															"name": "BidTrack",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 231,
															"src": "2802:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_BidTrack_$231_storage_ptr_$",
																"typeString": "type(struct SwappyBox.BidTrack storage pointer)"
															}
														},
														"id": 344,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2802:90:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_BidTrack_$231_memory_ptr",
															"typeString": "struct SwappyBox.BidTrack memory"
														}
													},
													"src": "2780:112:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BidTrack_$231_storage",
														"typeString": "struct SwappyBox.BidTrack storage ref"
													}
												},
												"id": 346,
												"nodeType": "ExpressionStatement",
												"src": "2780:112:0"
											}
										]
									},
									"functionSelector": "5cf510f8",
									"id": 348,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "depositToBox",
									"nameLocation": "2395:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 274,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 271,
												"mutability": "mutable",
												"name": "_index",
												"nameLocation": "2413:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 348,
												"src": "2408:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 270,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2408:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 273,
												"mutability": "mutable",
												"name": "_deadline",
												"nameLocation": "2426:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 348,
												"src": "2421:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 272,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2421:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2407:29:0"
									},
									"returnParameters": {
										"id": 275,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2452:0:0"
									},
									"scope": 658,
									"src": "2386:513:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 425,
										"nodeType": "Block",
										"src": "2956:545:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 360,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 354,
																		"name": "boxData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 246,
																		"src": "2974:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_BidTrack_$231_storage_$",
																			"typeString": "mapping(address => struct SwappyBox.BidTrack storage ref)"
																		}
																	},
																	"id": 356,
																	"indexExpression": {
																		"id": 355,
																		"name": "_contract",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 350,
																		"src": "2982:9:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2974:18:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_BidTrack_$231_storage",
																		"typeString": "struct SwappyBox.BidTrack storage ref"
																	}
																},
																"id": 357,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2993:13:0",
																"memberName": "currentWinner",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 228,
																"src": "2974:32:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 358,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "3010:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 359,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3014:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "3010:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2974:46:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "796f7520617265206e6f74206269642077696e6e6572",
															"id": 361,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3021:24:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c062c36797a8904dcf800cd5f3b643a1f2bf194dc40f30fc48d95c98a8539be8",
																"typeString": "literal_string \"you are not bid winner\""
															},
															"value": "you are not bid winner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c062c36797a8904dcf800cd5f3b643a1f2bf194dc40f30fc48d95c98a8539be8",
																"typeString": "literal_string \"you are not bid winner\""
															}
														],
														"id": 353,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2966:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 362,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2966:80:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 363,
												"nodeType": "ExpressionStatement",
												"src": "2966:80:0"
											},
											{
												"assignments": [
													365
												],
												"declarations": [
													{
														"constant": false,
														"id": 365,
														"mutability": "mutable",
														"name": "depositedAmount",
														"nameLocation": "3061:15:0",
														"nodeType": "VariableDeclaration",
														"scope": 425,
														"src": "3056:20:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 364,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "3056:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 371,
												"initialValue": {
													"expression": {
														"arguments": [
															{
																"id": 368,
																"name": "_contract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 350,
																"src": "3087:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 367,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3079:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 366,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3079:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 369,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3079:18:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 370,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "3098:7:0",
													"memberName": "balance",
													"nodeType": "MemberAccess",
													"src": "3079:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3056:49:0"
											},
											{
												"assignments": [
													373
												],
												"declarations": [
													{
														"constant": false,
														"id": 373,
														"mutability": "mutable",
														"name": "paidBidAmount",
														"nameLocation": "3120:13:0",
														"nodeType": "VariableDeclaration",
														"scope": 425,
														"src": "3115:18:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 372,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "3115:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 378,
												"initialValue": {
													"expression": {
														"baseExpression": {
															"id": 374,
															"name": "boxData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 246,
															"src": "3136:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_BidTrack_$231_storage_$",
																"typeString": "mapping(address => struct SwappyBox.BidTrack storage ref)"
															}
														},
														"id": 376,
														"indexExpression": {
															"id": 375,
															"name": "_contract",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 350,
															"src": "3144:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3136:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_BidTrack_$231_storage",
															"typeString": "struct SwappyBox.BidTrack storage ref"
														}
													},
													"id": 377,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "3155:9:0",
													"memberName": "basePrice",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 224,
													"src": "3136:28:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3115:49:0"
											},
											{
												"assignments": [
													380
												],
												"declarations": [
													{
														"constant": false,
														"id": 380,
														"mutability": "mutable",
														"name": "amountToTransfer",
														"nameLocation": "3179:16:0",
														"nodeType": "VariableDeclaration",
														"scope": 425,
														"src": "3174:21:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 379,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "3174:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 384,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 383,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 381,
														"name": "depositedAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 365,
														"src": "3198:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 382,
														"name": "paidBidAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 373,
														"src": "3216:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3198:31:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3174:55:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 389,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 386,
																"name": "amountToTransfer",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 380,
																"src": "3247:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 387,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "3267:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 388,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3271:5:0",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "3267:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3247:29:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6f626c69676174696f6e207265766572746564",
															"id": 390,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3277:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_12290b3403b12487975d597e9b87eb52c50c156c95eb92d900379afdd6bb41e2",
																"typeString": "literal_string \"obligation reverted\""
															},
															"value": "obligation reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_12290b3403b12487975d597e9b87eb52c50c156c95eb92d900379afdd6bb41e2",
																"typeString": "literal_string \"obligation reverted\""
															}
														],
														"id": 385,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3239:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 391,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3239:60:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 392,
												"nodeType": "ExpressionStatement",
												"src": "3239:60:0"
											},
											{
												"assignments": [
													394,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 394,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "3315:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 425,
														"src": "3310:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 393,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3310:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 407,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 405,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3396:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"arguments": [
																	{
																		"expression": {
																			"baseExpression": {
																				"id": 397,
																				"name": "boxData",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 246,
																				"src": "3333:7:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_struct$_BidTrack_$231_storage_$",
																					"typeString": "mapping(address => struct SwappyBox.BidTrack storage ref)"
																				}
																			},
																			"id": 399,
																			"indexExpression": {
																				"id": 398,
																				"name": "_contract",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 350,
																				"src": "3341:9:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "3333:18:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_BidTrack_$231_storage",
																				"typeString": "struct SwappyBox.BidTrack storage ref"
																			}
																		},
																		"id": 400,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "3352:13:0",
																		"memberName": "poolInitiator",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 230,
																		"src": "3333:32:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 396,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3325:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_payable_$",
																		"typeString": "type(address payable)"
																	},
																	"typeName": {
																		"id": 395,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "3325:8:0",
																		"stateMutability": "payable",
																		"typeDescriptions": {}
																	}
																},
																"id": 401,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3325:41:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 402,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3367:4:0",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "3325:46:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 404,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 403,
																"name": "amountToTransfer",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 380,
																"src": "3378:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "3325:70:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 406,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3325:74:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3309:90:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 409,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 394,
															"src": "3418:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6661696c6564",
															"id": 410,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3426:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8f44d68b1a26169d304522fa2f95aa938d98120d628d1db5726120ca84e53b43",
																"typeString": "literal_string \"failed\""
															},
															"value": "failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8f44d68b1a26169d304522fa2f95aa938d98120d628d1db5726120ca84e53b43",
																"typeString": "literal_string \"failed\""
															}
														],
														"id": 408,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3410:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 411,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3410:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 412,
												"nodeType": "ExpressionStatement",
												"src": "3410:25:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 420,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3478:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 421,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3482:6:0",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3478:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"hexValue": "74727565",
															"id": 422,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3489:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"expression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 416,
																			"name": "_contract",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 350,
																			"src": "3457:9:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 415,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3449:8:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_payable_$",
																			"typeString": "type(address payable)"
																		},
																		"typeName": {
																			"id": 414,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "3449:8:0",
																			"stateMutability": "payable",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 417,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3449:18:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																],
																"id": 413,
																"name": "Box",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 213,
																"src": "3445:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_Box_$213_$",
																	"typeString": "type(contract Box)"
																}
															},
															"id": 418,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3445:23:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_Box_$213",
																"typeString": "contract Box"
															}
														},
														"id": 419,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3469:8:0",
														"memberName": "withdraw",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 208,
														"src": "3445:32:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_bool_$returns$__$",
															"typeString": "function (address,bool) external"
														}
													},
													"id": 423,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3445:49:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 424,
												"nodeType": "ExpressionStatement",
												"src": "3445:49:0"
											}
										]
									},
									"functionSelector": "20c530e6",
									"id": 426,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "obligate",
									"nameLocation": "2914:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 351,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 350,
												"mutability": "mutable",
												"name": "_contract",
												"nameLocation": "2931:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 426,
												"src": "2923:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 349,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2923:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2922:19:0"
									},
									"returnParameters": {
										"id": 352,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2956:0:0"
									},
									"scope": 658,
									"src": "2905:596:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 572,
										"nodeType": "Block",
										"src": "3568:995:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 440,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 434,
																		"name": "boxData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 246,
																		"src": "3586:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_BidTrack_$231_storage_$",
																			"typeString": "mapping(address => struct SwappyBox.BidTrack storage ref)"
																		}
																	},
																	"id": 436,
																	"indexExpression": {
																		"id": 435,
																		"name": "_contract",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 428,
																		"src": "3594:9:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "3586:18:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_BidTrack_$231_storage",
																		"typeString": "struct SwappyBox.BidTrack storage ref"
																	}
																},
																"id": 437,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3605:13:0",
																"memberName": "currentWinner",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 228,
																"src": "3586:32:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"expression": {
																	"id": 438,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "3622:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 439,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3626:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "3622:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "3586:46:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "796f7520616c7265616479206f776e",
															"id": 441,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3633:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fa392de55f37f34500c9ad4ecd52c9fa50f37c3071e1350b11e7a65abd1837b8",
																"typeString": "literal_string \"you already own\""
															},
															"value": "you already own"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fa392de55f37f34500c9ad4ecd52c9fa50f37c3071e1350b11e7a65abd1837b8",
																"typeString": "literal_string \"you already own\""
															}
														],
														"id": 433,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3578:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 442,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3578:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 443,
												"nodeType": "ExpressionStatement",
												"src": "3578:73:0"
											},
											{
												"assignments": [
													445
												],
												"declarations": [
													{
														"constant": false,
														"id": 445,
														"mutability": "mutable",
														"name": "bestPrice",
														"nameLocation": "3666:9:0",
														"nodeType": "VariableDeclaration",
														"scope": 572,
														"src": "3661:14:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 444,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "3661:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 449,
												"initialValue": {
													"arguments": [
														{
															"id": 447,
															"name": "_contract",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 428,
															"src": "3687:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 446,
														"name": "getPrice",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 630,
														"src": "3678:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 448,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3678:19:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3661:36:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 459,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 452,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 450,
															"name": "bestPrice",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 445,
															"src": "3710:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<=",
														"rightExpression": {
															"id": 451,
															"name": "bidAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 430,
															"src": "3723:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3710:22:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 458,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"baseExpression": {
																	"id": 453,
																	"name": "boxData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 246,
																	"src": "3736:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_BidTrack_$231_storage_$",
																		"typeString": "mapping(address => struct SwappyBox.BidTrack storage ref)"
																	}
																},
																"id": 455,
																"indexExpression": {
																	"id": 454,
																	"name": "_contract",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 428,
																	"src": "3744:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "3736:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_BidTrack_$231_storage",
																	"typeString": "struct SwappyBox.BidTrack storage ref"
																}
															},
															"id": 456,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3755:9:0",
															"memberName": "lastPrice",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 226,
															"src": "3736:28:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 457,
															"name": "bidAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 430,
															"src": "3767:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3736:40:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3710:66:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 554,
												"nodeType": "IfStatement",
												"src": "3707:742:0",
												"trueBody": {
													"id": 553,
													"nodeType": "Block",
													"src": "3777:672:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 464,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"id": 461,
																				"name": "msg",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967281,
																				"src": "3799:3:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_message",
																					"typeString": "msg"
																				}
																			},
																			"id": 462,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "3803:5:0",
																			"memberName": "value",
																			"nodeType": "MemberAccess",
																			"src": "3799:9:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"id": 463,
																			"name": "bidAmount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 430,
																			"src": "3812:9:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "3799:22:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 460,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "3791:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																		"typeString": "function (bool) pure"
																	}
																},
																"id": 465,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3791:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 466,
															"nodeType": "ExpressionStatement",
															"src": "3791:31:0"
														},
														{
															"assignments": [
																468
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 468,
																	"mutability": "mutable",
																	"name": "initiatorFees",
																	"nameLocation": "3841:13:0",
																	"nodeType": "VariableDeclaration",
																	"scope": 553,
																	"src": "3836:18:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 467,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "3836:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 475,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 474,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 471,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 469,
																				"name": "bidAmount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 430,
																				"src": "3858:9:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 470,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3870:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "3858:13:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 472,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3857:15:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "313030",
																	"id": 473,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3873:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "3857:19:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3836:40:0"
														},
														{
															"assignments": [
																477
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 477,
																	"mutability": "mutable",
																	"name": "refund",
																	"nameLocation": "3895:6:0",
																	"nodeType": "VariableDeclaration",
																	"scope": 553,
																	"src": "3890:11:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 476,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "3890:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 481,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 480,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 478,
																	"name": "bidAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 430,
																	"src": "3904:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 479,
																	"name": "initiatorFees",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 468,
																	"src": "3916:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3904:25:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3890:39:0"
														},
														{
															"assignments": [
																483,
																null
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 483,
																	"mutability": "mutable",
																	"name": "success",
																	"nameLocation": "3949:7:0",
																	"nodeType": "VariableDeclaration",
																	"scope": 553,
																	"src": "3944:12:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 482,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "3944:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"visibility": "internal"
																},
																null
															],
															"id": 496,
															"initialValue": {
																"arguments": [
																	{
																		"hexValue": "",
																		"id": 494,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4020:2:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		},
																		"value": ""
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																				"typeString": "literal_string \"\""
																			}
																		],
																		"expression": {
																			"arguments": [
																				{
																					"expression": {
																						"baseExpression": {
																							"id": 486,
																							"name": "boxData",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 246,
																							"src": "3967:7:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_mapping$_t_address_$_t_struct$_BidTrack_$231_storage_$",
																								"typeString": "mapping(address => struct SwappyBox.BidTrack storage ref)"
																							}
																						},
																						"id": 488,
																						"indexExpression": {
																							"id": 487,
																							"name": "_contract",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 428,
																							"src": "3975:9:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "IndexAccess",
																						"src": "3967:18:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_BidTrack_$231_storage",
																							"typeString": "struct SwappyBox.BidTrack storage ref"
																						}
																					},
																					"id": 489,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "3986:13:0",
																					"memberName": "currentWinner",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 228,
																					"src": "3967:32:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 485,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "3959:8:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_payable_$",
																					"typeString": "type(address payable)"
																				},
																				"typeName": {
																					"id": 484,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "3959:8:0",
																					"stateMutability": "payable",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 490,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "3959:41:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address_payable",
																				"typeString": "address payable"
																			}
																		},
																		"id": 491,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "4001:4:0",
																		"memberName": "call",
																		"nodeType": "MemberAccess",
																		"src": "3959:46:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
																		}
																	},
																	"id": 493,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"names": [
																		"value"
																	],
																	"nodeType": "FunctionCallOptions",
																	"options": [
																		{
																			"id": 492,
																			"name": "refund",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 477,
																			"src": "4012:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"src": "3959:60:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
																		"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
																	}
																},
																"id": 495,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3959:64:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
																	"typeString": "tuple(bool,bytes memory)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3943:80:0"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 498,
																		"name": "success",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 483,
																		"src": "4046:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "6661696c6564",
																		"id": 499,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4054:8:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_8f44d68b1a26169d304522fa2f95aa938d98120d628d1db5726120ca84e53b43",
																			"typeString": "literal_string \"failed\""
																		},
																		"value": "failed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_8f44d68b1a26169d304522fa2f95aa938d98120d628d1db5726120ca84e53b43",
																			"typeString": "literal_string \"failed\""
																		}
																	],
																	"id": 497,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "4038:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 500,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4038:25:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 501,
															"nodeType": "ExpressionStatement",
															"src": "4038:25:0"
														},
														{
															"assignments": [
																503,
																null
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 503,
																	"mutability": "mutable",
																	"name": "success2",
																	"nameLocation": "4083:8:0",
																	"nodeType": "VariableDeclaration",
																	"scope": 553,
																	"src": "4078:13:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 502,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "4078:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"visibility": "internal"
																},
																null
															],
															"id": 516,
															"initialValue": {
																"arguments": [
																	{
																		"hexValue": "",
																		"id": 514,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4162:2:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		},
																		"value": ""
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																				"typeString": "literal_string \"\""
																			}
																		],
																		"expression": {
																			"arguments": [
																				{
																					"expression": {
																						"baseExpression": {
																							"id": 506,
																							"name": "boxData",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 246,
																							"src": "4102:7:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_mapping$_t_address_$_t_struct$_BidTrack_$231_storage_$",
																								"typeString": "mapping(address => struct SwappyBox.BidTrack storage ref)"
																							}
																						},
																						"id": 508,
																						"indexExpression": {
																							"id": 507,
																							"name": "_contract",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 428,
																							"src": "4110:9:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "IndexAccess",
																						"src": "4102:18:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_BidTrack_$231_storage",
																							"typeString": "struct SwappyBox.BidTrack storage ref"
																						}
																					},
																					"id": 509,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "4121:13:0",
																					"memberName": "poolInitiator",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 230,
																					"src": "4102:32:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 505,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "4094:8:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_payable_$",
																					"typeString": "type(address payable)"
																				},
																				"typeName": {
																					"id": 504,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "4094:8:0",
																					"stateMutability": "payable",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 510,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "4094:41:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address_payable",
																				"typeString": "address payable"
																			}
																		},
																		"id": 511,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "4136:4:0",
																		"memberName": "call",
																		"nodeType": "MemberAccess",
																		"src": "4094:46:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
																		}
																	},
																	"id": 513,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"names": [
																		"value"
																	],
																	"nodeType": "FunctionCallOptions",
																	"options": [
																		{
																			"id": 512,
																			"name": "initiatorFees",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 468,
																			"src": "4147:13:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"src": "4094:67:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
																		"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
																	}
																},
																"id": 515,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4094:71:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
																	"typeString": "tuple(bool,bytes memory)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "4077:88:0"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 518,
																		"name": "success2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 503,
																		"src": "4188:8:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "6661696c6564",
																		"id": 519,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4197:8:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_8f44d68b1a26169d304522fa2f95aa938d98120d628d1db5726120ca84e53b43",
																			"typeString": "literal_string \"failed\""
																		},
																		"value": "failed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_8f44d68b1a26169d304522fa2f95aa938d98120d628d1db5726120ca84e53b43",
																			"typeString": "literal_string \"failed\""
																		}
																	],
																	"id": 517,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "4180:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 520,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4180:26:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 521,
															"nodeType": "ExpressionStatement",
															"src": "4180:26:0"
														},
														{
															"expression": {
																"id": 528,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"baseExpression": {
																			"id": 522,
																			"name": "boxData",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 246,
																			"src": "4220:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_BidTrack_$231_storage_$",
																				"typeString": "mapping(address => struct SwappyBox.BidTrack storage ref)"
																			}
																		},
																		"id": 524,
																		"indexExpression": {
																			"id": 523,
																			"name": "_contract",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 428,
																			"src": "4228:9:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "4220:18:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_BidTrack_$231_storage",
																			"typeString": "struct SwappyBox.BidTrack storage ref"
																		}
																	},
																	"id": 525,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "4239:13:0",
																	"memberName": "currentWinner",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 228,
																	"src": "4220:32:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"id": 526,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "4255:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 527,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "4259:6:0",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "4255:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "4220:45:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 529,
															"nodeType": "ExpressionStatement",
															"src": "4220:45:0"
														},
														{
															"expression": {
																"id": 535,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"baseExpression": {
																			"id": 530,
																			"name": "boxData",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 246,
																			"src": "4279:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_BidTrack_$231_storage_$",
																				"typeString": "mapping(address => struct SwappyBox.BidTrack storage ref)"
																			}
																		},
																		"id": 532,
																		"indexExpression": {
																			"id": 531,
																			"name": "_contract",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 428,
																			"src": "4287:9:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "4279:18:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_BidTrack_$231_storage",
																			"typeString": "struct SwappyBox.BidTrack storage ref"
																		}
																	},
																	"id": 533,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "4298:9:0",
																	"memberName": "lastPrice",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 226,
																	"src": "4279:28:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 534,
																	"name": "bidAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 430,
																	"src": "4310:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4279:40:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 536,
															"nodeType": "ExpressionStatement",
															"src": "4279:40:0"
														},
														{
															"expression": {
																"id": 541,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "4333:29:0",
																"subExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 537,
																			"name": "boxData",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 246,
																			"src": "4333:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_BidTrack_$231_storage_$",
																				"typeString": "mapping(address => struct SwappyBox.BidTrack storage ref)"
																			}
																		},
																		"id": 539,
																		"indexExpression": {
																			"id": 538,
																			"name": "_contract",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 428,
																			"src": "4341:9:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "4333:18:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_BidTrack_$231_storage",
																			"typeString": "struct SwappyBox.BidTrack storage ref"
																		}
																	},
																	"id": 540,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "4352:8:0",
																	"memberName": "totalBid",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 222,
																	"src": "4333:27:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 542,
															"nodeType": "ExpressionStatement",
															"src": "4333:29:0"
														},
														{
															"expression": {
																"id": 551,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"baseExpression": {
																			"id": 543,
																			"name": "boxData",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 246,
																			"src": "4376:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_BidTrack_$231_storage_$",
																				"typeString": "mapping(address => struct SwappyBox.BidTrack storage ref)"
																			}
																		},
																		"id": 545,
																		"indexExpression": {
																			"id": 544,
																			"name": "_contract",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 428,
																			"src": "4384:9:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "4376:18:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_BidTrack_$231_storage",
																			"typeString": "struct SwappyBox.BidTrack storage ref"
																		}
																	},
																	"id": 546,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "4395:10:0",
																	"memberName": "bidEndTime",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 220,
																	"src": "4376:29:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 550,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 547,
																			"name": "block",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967292,
																			"src": "4408:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_block",
																				"typeString": "block"
																			}
																		},
																		"id": 548,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "4414:9:0",
																		"memberName": "timestamp",
																		"nodeType": "MemberAccess",
																		"src": "4408:15:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "31353030",
																		"id": 549,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4424:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1500_by_1",
																			"typeString": "int_const 1500"
																		},
																		"value": "1500"
																	},
																	"src": "4408:20:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4376:52:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 552,
															"nodeType": "ExpressionStatement",
															"src": "4376:52:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 562,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 556,
																		"name": "boxData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 246,
																		"src": "4467:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_BidTrack_$231_storage_$",
																			"typeString": "mapping(address => struct SwappyBox.BidTrack storage ref)"
																		}
																	},
																	"id": 558,
																	"indexExpression": {
																		"id": 557,
																		"name": "_contract",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 428,
																		"src": "4475:9:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "4467:18:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_BidTrack_$231_storage",
																		"typeString": "struct SwappyBox.BidTrack storage ref"
																	}
																},
																"id": 559,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4486:10:0",
																"memberName": "bidEndTime",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 220,
																"src": "4467:29:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"expression": {
																	"id": 560,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "4499:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 561,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4505:9:0",
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "4499:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4467:47:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 555,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4459:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 563,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4459:56:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 564,
												"nodeType": "ExpressionStatement",
												"src": "4459:56:0"
											},
											{
												"expression": {
													"id": 570,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 565,
																"name": "boxData",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 246,
																"src": "4525:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_BidTrack_$231_storage_$",
																	"typeString": "mapping(address => struct SwappyBox.BidTrack storage ref)"
																}
															},
															"id": 567,
															"indexExpression": {
																"id": 566,
																"name": "_contract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 428,
																"src": "4533:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4525:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_BidTrack_$231_storage",
																"typeString": "struct SwappyBox.BidTrack storage ref"
															}
														},
														"id": 568,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "4544:8:0",
														"memberName": "totalBid",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 222,
														"src": "4525:27:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 569,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4555:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4525:31:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 571,
												"nodeType": "ExpressionStatement",
												"src": "4525:31:0"
											}
										]
									},
									"functionSelector": "59d667a5",
									"id": 573,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "bid",
									"nameLocation": "3516:3:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 431,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 428,
												"mutability": "mutable",
												"name": "_contract",
												"nameLocation": "3528:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 573,
												"src": "3520:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 427,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3520:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 430,
												"mutability": "mutable",
												"name": "bidAmount",
												"nameLocation": "3543:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 573,
												"src": "3538:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 429,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "3538:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3519:34:0"
									},
									"returnParameters": {
										"id": 432,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3568:0:0"
									},
									"scope": 658,
									"src": "3507:1056:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 605,
										"nodeType": "Block",
										"src": "4616:196:0",
										"statements": [
											{
												"assignments": [
													579
												],
												"declarations": [
													{
														"constant": false,
														"id": 579,
														"mutability": "mutable",
														"name": "initiator",
														"nameLocation": "4634:9:0",
														"nodeType": "VariableDeclaration",
														"scope": 605,
														"src": "4626:17:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 578,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4626:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 584,
												"initialValue": {
													"expression": {
														"baseExpression": {
															"id": 580,
															"name": "boxData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 246,
															"src": "4646:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_BidTrack_$231_storage_$",
																"typeString": "mapping(address => struct SwappyBox.BidTrack storage ref)"
															}
														},
														"id": 582,
														"indexExpression": {
															"id": 581,
															"name": "_contract",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 575,
															"src": "4654:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4646:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_BidTrack_$231_storage",
															"typeString": "struct SwappyBox.BidTrack storage ref"
														}
													},
													"id": 583,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "4665:13:0",
													"memberName": "poolInitiator",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 230,
													"src": "4646:32:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4626:52:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 589,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 586,
																"name": "initiator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 579,
																"src": "4696:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 587,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "4709:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 588,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4713:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "4709:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "4696:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "796f7520617265206e6f7420696e69746961746f72",
															"id": 590,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4720:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_93df12706b057ee0ca40fdaa0d0d30fa1600f95e9b687379a17bec9aa57a6c9b",
																"typeString": "literal_string \"you are not initiator\""
															},
															"value": "you are not initiator"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_93df12706b057ee0ca40fdaa0d0d30fa1600f95e9b687379a17bec9aa57a6c9b",
																"typeString": "literal_string \"you are not initiator\""
															}
														],
														"id": 585,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4688:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 591,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4688:56:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 592,
												"nodeType": "ExpressionStatement",
												"src": "4688:56:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 600,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "4787:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 601,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4791:6:0",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "4787:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"hexValue": "66616c7365",
															"id": 602,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4798:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "false"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"expression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 596,
																			"name": "_contract",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 575,
																			"src": "4766:9:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 595,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4758:8:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_payable_$",
																			"typeString": "type(address payable)"
																		},
																		"typeName": {
																			"id": 594,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4758:8:0",
																			"stateMutability": "payable",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 597,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4758:18:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																],
																"id": 593,
																"name": "Box",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 213,
																"src": "4754:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_Box_$213_$",
																	"typeString": "type(contract Box)"
																}
															},
															"id": 598,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4754:23:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_Box_$213",
																"typeString": "contract Box"
															}
														},
														"id": 599,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4778:8:0",
														"memberName": "withdraw",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 208,
														"src": "4754:32:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_bool_$returns$__$",
															"typeString": "function (address,bool) external"
														}
													},
													"id": 603,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4754:50:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 604,
												"nodeType": "ExpressionStatement",
												"src": "4754:50:0"
											}
										]
									},
									"functionSelector": "51cff8d9",
									"id": 606,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "withdraw",
									"nameLocation": "4582:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 576,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 575,
												"mutability": "mutable",
												"name": "_contract",
												"nameLocation": "4599:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 606,
												"src": "4591:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 574,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4591:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4590:19:0"
									},
									"returnParameters": {
										"id": 577,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4616:0:0"
									},
									"scope": 658,
									"src": "4573:239:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 629,
										"nodeType": "Block",
										"src": "4885:120:0",
										"statements": [
											{
												"assignments": [
													614
												],
												"declarations": [
													{
														"constant": false,
														"id": 614,
														"mutability": "mutable",
														"name": "demand",
														"nameLocation": "4900:6:0",
														"nodeType": "VariableDeclaration",
														"scope": 629,
														"src": "4895:11:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 613,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "4895:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 619,
												"initialValue": {
													"expression": {
														"baseExpression": {
															"id": 615,
															"name": "boxData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 246,
															"src": "4909:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_BidTrack_$231_storage_$",
																"typeString": "mapping(address => struct SwappyBox.BidTrack storage ref)"
															}
														},
														"id": 617,
														"indexExpression": {
															"id": 616,
															"name": "_contract",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 608,
															"src": "4917:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4909:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_BidTrack_$231_storage",
															"typeString": "struct SwappyBox.BidTrack storage ref"
														}
													},
													"id": 618,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "4928:8:0",
													"memberName": "totalBid",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 222,
													"src": "4909:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4895:41:0"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 627,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 622,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 620,
															"name": "SLOPE",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 236,
															"src": "4953:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"id": 621,
															"name": "demand",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 614,
															"src": "4961:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "4953:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"expression": {
															"baseExpression": {
																"id": 623,
																"name": "boxData",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 246,
																"src": "4970:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_BidTrack_$231_storage_$",
																	"typeString": "mapping(address => struct SwappyBox.BidTrack storage ref)"
																}
															},
															"id": 625,
															"indexExpression": {
																"id": 624,
																"name": "_contract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 608,
																"src": "4978:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4970:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_BidTrack_$231_storage",
																"typeString": "struct SwappyBox.BidTrack storage ref"
															}
														},
														"id": 626,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4989:9:0",
														"memberName": "basePrice",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 224,
														"src": "4970:28:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4953:45:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 612,
												"id": 628,
												"nodeType": "Return",
												"src": "4946:52:0"
											}
										]
									},
									"functionSelector": "41976e09",
									"id": 630,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getPrice",
									"nameLocation": "4829:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 609,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 608,
												"mutability": "mutable",
												"name": "_contract",
												"nameLocation": "4846:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 630,
												"src": "4838:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 607,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4838:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4837:19:0"
									},
									"returnParameters": {
										"id": 612,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 611,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 630,
												"src": "4877:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 610,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4877:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4876:9:0"
									},
									"scope": 658,
									"src": "4820:185:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 642,
										"nodeType": "Block",
										"src": "5092:42:0",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 638,
														"name": "boxData",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 246,
														"src": "5109:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_BidTrack_$231_storage_$",
															"typeString": "mapping(address => struct SwappyBox.BidTrack storage ref)"
														}
													},
													"id": 640,
													"indexExpression": {
														"id": 639,
														"name": "_contract",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 632,
														"src": "5117:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "5109:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BidTrack_$231_storage",
														"typeString": "struct SwappyBox.BidTrack storage ref"
													}
												},
												"functionReturnParameters": 637,
												"id": 641,
												"nodeType": "Return",
												"src": "5102:25:0"
											}
										]
									},
									"functionSelector": "5565687a",
									"id": 643,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBoxData",
									"nameLocation": "5026:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 633,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 632,
												"mutability": "mutable",
												"name": "_contract",
												"nameLocation": "5045:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 643,
												"src": "5037:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 631,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5037:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5036:19:0"
									},
									"returnParameters": {
										"id": 637,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 636,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 643,
												"src": "5076:15:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BidTrack_$231_memory_ptr",
													"typeString": "struct SwappyBox.BidTrack"
												},
												"typeName": {
													"id": 635,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 634,
														"name": "BidTrack",
														"nameLocations": [
															"5076:8:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 231,
														"src": "5076:8:0"
													},
													"referencedDeclaration": 231,
													"src": "5076:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BidTrack_$231_storage_ptr",
														"typeString": "struct SwappyBox.BidTrack"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5075:17:0"
									},
									"scope": 658,
									"src": "5017:117:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 656,
										"nodeType": "Block",
										"src": "5205:50:0",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [
															{
																"id": 652,
																"name": "_contract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 645,
																"src": "5230:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 651,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5222:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 650,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5222:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 653,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5222:18:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 654,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "5241:7:0",
													"memberName": "balance",
													"nodeType": "MemberAccess",
													"src": "5222:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 649,
												"id": 655,
												"nodeType": "Return",
												"src": "5215:33:0"
											}
										]
									},
									"functionSelector": "f8b2cb4f",
									"id": 657,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBalance",
									"nameLocation": "5150:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 646,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 645,
												"mutability": "mutable",
												"name": "_contract",
												"nameLocation": "5169:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "5161:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 644,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5161:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5160:19:0"
									},
									"returnParameters": {
										"id": 649,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 648,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "5200:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 647,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "5200:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5199:6:0"
									},
									"scope": 658,
									"src": "5141:114:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 659,
							"src": "1873:3385:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "37:5221:0"
				}
			}
		},
		"errors": [],
		"version": "0.8.28",
		"long_version": "0.8.28+commit.7893614a.Emscripten.clang",
		"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8"
	}
}